// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `KinesisAnalytics_20150814`.
///
/// This client allows ergonomic access to a `KinesisAnalytics_20150814`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn add_application_cloud_watch_logging_option(
        &self,
    ) -> fluent_builders::AddApplicationCloudWatchLoggingOption<C, M, R> {
        fluent_builders::AddApplicationCloudWatchLoggingOption::new(self.handle.clone())
    }
    pub fn add_application_input(&self) -> fluent_builders::AddApplicationInput<C, M, R> {
        fluent_builders::AddApplicationInput::new(self.handle.clone())
    }
    pub fn add_application_input_processing_configuration(
        &self,
    ) -> fluent_builders::AddApplicationInputProcessingConfiguration<C, M, R> {
        fluent_builders::AddApplicationInputProcessingConfiguration::new(self.handle.clone())
    }
    pub fn add_application_output(&self) -> fluent_builders::AddApplicationOutput<C, M, R> {
        fluent_builders::AddApplicationOutput::new(self.handle.clone())
    }
    pub fn add_application_reference_data_source(
        &self,
    ) -> fluent_builders::AddApplicationReferenceDataSource<C, M, R> {
        fluent_builders::AddApplicationReferenceDataSource::new(self.handle.clone())
    }
    pub fn create_application(&self) -> fluent_builders::CreateApplication<C, M, R> {
        fluent_builders::CreateApplication::new(self.handle.clone())
    }
    pub fn delete_application(&self) -> fluent_builders::DeleteApplication<C, M, R> {
        fluent_builders::DeleteApplication::new(self.handle.clone())
    }
    pub fn delete_application_cloud_watch_logging_option(
        &self,
    ) -> fluent_builders::DeleteApplicationCloudWatchLoggingOption<C, M, R> {
        fluent_builders::DeleteApplicationCloudWatchLoggingOption::new(self.handle.clone())
    }
    pub fn delete_application_input_processing_configuration(
        &self,
    ) -> fluent_builders::DeleteApplicationInputProcessingConfiguration<C, M, R> {
        fluent_builders::DeleteApplicationInputProcessingConfiguration::new(self.handle.clone())
    }
    pub fn delete_application_output(&self) -> fluent_builders::DeleteApplicationOutput<C, M, R> {
        fluent_builders::DeleteApplicationOutput::new(self.handle.clone())
    }
    pub fn delete_application_reference_data_source(
        &self,
    ) -> fluent_builders::DeleteApplicationReferenceDataSource<C, M, R> {
        fluent_builders::DeleteApplicationReferenceDataSource::new(self.handle.clone())
    }
    pub fn describe_application(&self) -> fluent_builders::DescribeApplication<C, M, R> {
        fluent_builders::DescribeApplication::new(self.handle.clone())
    }
    pub fn discover_input_schema(&self) -> fluent_builders::DiscoverInputSchema<C, M, R> {
        fluent_builders::DiscoverInputSchema::new(self.handle.clone())
    }
    pub fn list_applications(&self) -> fluent_builders::ListApplications<C, M, R> {
        fluent_builders::ListApplications::new(self.handle.clone())
    }
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C, M, R> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    pub fn start_application(&self) -> fluent_builders::StartApplication<C, M, R> {
        fluent_builders::StartApplication::new(self.handle.clone())
    }
    pub fn stop_application(&self) -> fluent_builders::StopApplication<C, M, R> {
        fluent_builders::StopApplication::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C, M, R> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C, M, R> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_application(&self) -> fluent_builders::UpdateApplication<C, M, R> {
        fluent_builders::UpdateApplication::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AddApplicationCloudWatchLoggingOption<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_application_cloud_watch_logging_option_input::Builder,
    }
    impl<C, M, R> AddApplicationCloudWatchLoggingOption<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddApplicationCloudWatchLoggingOptionOutput,
            smithy_http::result::SdkError<crate::error::AddApplicationCloudWatchLoggingOptionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddApplicationCloudWatchLoggingOptionInputOperationOutputAlias,
                crate::output::AddApplicationCloudWatchLoggingOptionOutput,
                crate::error::AddApplicationCloudWatchLoggingOptionError,
                crate::input::AddApplicationCloudWatchLoggingOptionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Kinesis Analytics application name.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The version ID of the Kinesis Analytics application.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>Provides the CloudWatch log stream Amazon Resource Name (ARN) and the IAM role ARN.
        /// Note: To write application messages to CloudWatch, the IAM role that is used must have
        /// the <code>PutLogEvents</code> policy action enabled.</p>
        pub fn cloud_watch_logging_option(
            mut self,
            inp: crate::model::CloudWatchLoggingOption,
        ) -> Self {
            self.inner = self.inner.cloud_watch_logging_option(inp);
            self
        }
        pub fn set_cloud_watch_logging_option(
            mut self,
            input: std::option::Option<crate::model::CloudWatchLoggingOption>,
        ) -> Self {
            self.inner = self.inner.set_cloud_watch_logging_option(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddApplicationInput<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_application_input_input::Builder,
    }
    impl<C, M, R> AddApplicationInput<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddApplicationInputOutput,
            smithy_http::result::SdkError<crate::error::AddApplicationInputError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddApplicationInputInputOperationOutputAlias,
                crate::output::AddApplicationInputOutput,
                crate::error::AddApplicationInputError,
                crate::input::AddApplicationInputInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of your existing Amazon Kinesis Analytics application to which you want to add the streaming source.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Current version of your Amazon Kinesis Analytics application. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation
        /// to find the current application version.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_Input.html">Input</a> to add.</p>
        pub fn input(mut self, inp: crate::model::Input) -> Self {
            self.inner = self.inner.input(inp);
            self
        }
        pub fn set_input(mut self, input: std::option::Option<crate::model::Input>) -> Self {
            self.inner = self.inner.set_input(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddApplicationInputProcessingConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_application_input_processing_configuration_input::Builder,
    }
    impl<C, M, R> AddApplicationInputProcessingConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddApplicationInputProcessingConfigurationOutput,
            smithy_http::result::SdkError<
                crate::error::AddApplicationInputProcessingConfigurationError,
            >,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddApplicationInputProcessingConfigurationInputOperationOutputAlias,
                crate::output::AddApplicationInputProcessingConfigurationOutput,
                crate::error::AddApplicationInputProcessingConfigurationError,
                crate::input::AddApplicationInputProcessingConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of the application to which you want to add the input processing configuration.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Version of the application to which you want to add the input processing configuration. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a>
        /// operation to get the current application version.  If the version specified is not the current version, the
        /// <code>ConcurrentModificationException</code> is returned.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The ID of the input configuration to add the input processing configuration to. You
        /// can get a list of the input IDs for an application using the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation.</p>
        pub fn input_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.input_id(inp);
            self
        }
        pub fn set_input_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_input_id(input);
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputProcessingConfiguration.html">InputProcessingConfiguration</a> to add to the application.</p>
        pub fn input_processing_configuration(
            mut self,
            inp: crate::model::InputProcessingConfiguration,
        ) -> Self {
            self.inner = self.inner.input_processing_configuration(inp);
            self
        }
        pub fn set_input_processing_configuration(
            mut self,
            input: std::option::Option<crate::model::InputProcessingConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_input_processing_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddApplicationOutput<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_application_output_input::Builder,
    }
    impl<C, M, R> AddApplicationOutput<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddApplicationOutputOutput,
            smithy_http::result::SdkError<crate::error::AddApplicationOutputError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddApplicationOutputInputOperationOutputAlias,
                crate::output::AddApplicationOutputOutput,
                crate::error::AddApplicationOutputError,
                crate::input::AddApplicationOutputInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of the application to which you want to add the output configuration.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Version of the application to which you want to add the output configuration. You
        /// can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the current
        /// application version. If the version specified is not the current version, the
        /// <code>ConcurrentModificationException</code> is returned. </p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>An array of objects, each describing one output configuration. In the output
        /// configuration, you specify the name of an in-application stream, a destination (that is,
        /// an Amazon Kinesis stream, an Amazon Kinesis Firehose delivery stream, or an AWS Lambda
        /// function), and record the formation to use when writing to the destination.</p>
        pub fn output(mut self, inp: crate::model::Output) -> Self {
            self.inner = self.inner.output(inp);
            self
        }
        pub fn set_output(mut self, input: std::option::Option<crate::model::Output>) -> Self {
            self.inner = self.inner.set_output(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddApplicationReferenceDataSource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_application_reference_data_source_input::Builder,
    }
    impl<C, M, R> AddApplicationReferenceDataSource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddApplicationReferenceDataSourceOutput,
            smithy_http::result::SdkError<crate::error::AddApplicationReferenceDataSourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddApplicationReferenceDataSourceInputOperationOutputAlias,
                crate::output::AddApplicationReferenceDataSourceOutput,
                crate::error::AddApplicationReferenceDataSourceError,
                crate::input::AddApplicationReferenceDataSourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of an existing application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Version of the application for which you are adding the reference data source.
        /// You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the current application version.
        /// If the version specified is not the current version, the
        /// <code>ConcurrentModificationException</code> is returned.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The reference data source can be an object in your Amazon S3 bucket. Amazon Kinesis Analytics reads the object and copies the data into the in-application table that is created. You provide an S3 bucket, object key name, and the resulting in-application table that is created. You must also provide an IAM role with the necessary permissions that Amazon Kinesis Analytics can assume to read the object from your S3 bucket on your behalf.</p>
        pub fn reference_data_source(mut self, inp: crate::model::ReferenceDataSource) -> Self {
            self.inner = self.inner.reference_data_source(inp);
            self
        }
        pub fn set_reference_data_source(
            mut self,
            input: std::option::Option<crate::model::ReferenceDataSource>,
        ) -> Self {
            self.inner = self.inner.set_reference_data_source(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_application_input::Builder,
    }
    impl<C, M, R> CreateApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateApplicationOutput,
            smithy_http::result::SdkError<crate::error::CreateApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateApplicationInputOperationOutputAlias,
                crate::output::CreateApplicationOutput,
                crate::error::CreateApplicationError,
                crate::input::CreateApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of your Amazon Kinesis Analytics application (for example, <code>sample-app</code>).</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Summary description of the application.</p>
        pub fn application_description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_description(inp);
            self
        }
        pub fn set_application_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_description(input);
            self
        }
        /// Appends an item to `Inputs`.
        ///
        /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
        /// <p>Use this parameter to configure the application input.</p>
        /// <p>You can configure your application to receive input from a single streaming source. In this configuration, you map this streaming source to an in-application stream that is created. Your application code can then query the in-application stream like a table (you can think of it as a constantly updating table).</p>
        /// <p>For the streaming source, you provide its Amazon Resource Name (ARN) and format of
        /// data on the stream (for example, JSON, CSV, etc.). You also must provide an IAM role
        /// that Amazon Kinesis Analytics can assume to read this stream on your behalf.</p>
        /// <p>To create the in-application stream, you need to specify a schema to transform your data into a schematized version used in SQL. In the schema, you provide the necessary mapping of the data elements in the streaming source to record columns in the in-app stream.</p>
        pub fn inputs(mut self, inp: impl Into<crate::model::Input>) -> Self {
            self.inner = self.inner.inputs(inp);
            self
        }
        pub fn set_inputs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Input>>,
        ) -> Self {
            self.inner = self.inner.set_inputs(input);
            self
        }
        /// Appends an item to `Outputs`.
        ///
        /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
        /// <p>You can configure application output to write data from any of the in-application streams to up to three destinations.</p>
        /// <p>These destinations can be Amazon Kinesis streams, Amazon Kinesis Firehose delivery
        /// streams, AWS Lambda destinations, or any combination of the three.</p>
        /// <p>In the configuration, you specify the in-application stream name, the destination stream or Lambda function Amazon Resource Name (ARN), and the format to use when writing data. You must also provide an IAM role that Amazon Kinesis Analytics can assume to write to the
        /// destination stream or Lambda function on your behalf.</p>
        /// <p>In the output configuration, you also provide the output stream or Lambda function ARN. For stream destinations, you provide the format
        /// of data in the stream (for example, JSON, CSV). You also must provide an IAM role that
        /// Amazon Kinesis Analytics can assume to write to the stream or Lambda function on your behalf.</p>
        pub fn outputs(mut self, inp: impl Into<crate::model::Output>) -> Self {
            self.inner = self.inner.outputs(inp);
            self
        }
        pub fn set_outputs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Output>>,
        ) -> Self {
            self.inner = self.inner.set_outputs(input);
            self
        }
        /// Appends an item to `CloudWatchLoggingOptions`.
        ///
        /// To override the contents of this collection use [`set_cloud_watch_logging_options`](Self::set_cloud_watch_logging_options).
        /// <p>Use this parameter to configure a CloudWatch log stream to monitor application
        /// configuration errors. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/cloudwatch-logs.html">Working with Amazon
        /// CloudWatch Logs</a>.</p>
        pub fn cloud_watch_logging_options(
            mut self,
            inp: impl Into<crate::model::CloudWatchLoggingOption>,
        ) -> Self {
            self.inner = self.inner.cloud_watch_logging_options(inp);
            self
        }
        pub fn set_cloud_watch_logging_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CloudWatchLoggingOption>>,
        ) -> Self {
            self.inner = self.inner.set_cloud_watch_logging_options(input);
            self
        }
        /// <p>One or more SQL statements that read input data, transform it, and generate output.
        /// For example, you can write a SQL statement that reads data from one in-application
        /// stream, generates a running average of the number of advertisement clicks by vendor, and
        /// insert resulting rows in another in-application stream using pumps. For more information
        /// about the typical pattern, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-app-code.html">Application
        /// Code</a>. </p>
        /// <p>You can provide such series of SQL statements,
        /// where output of one statement can be
        /// used as the input for the next statement. You store
        /// intermediate results by creating in-application streams and pumps.</p>
        /// <p>Note that the application code must create the streams with names
        /// specified in the <code>Outputs</code>. For example,
        /// if your <code>Outputs</code> defines output streams named
        /// <code>ExampleOutputStream1</code> and <code>ExampleOutputStream2</code>,
        /// then your application code must create these streams. </p>
        pub fn application_code(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_code(inp);
            self
        }
        pub fn set_application_code(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_code(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.
        /// For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-tagging.html">Using Tagging</a>.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_input::Builder,
    }
    impl<C, M, R> DeleteApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteApplicationOutput,
            smithy_http::result::SdkError<crate::error::DeleteApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteApplicationInputOperationOutputAlias,
                crate::output::DeleteApplicationOutput,
                crate::error::DeleteApplicationError,
                crate::input::DeleteApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of the Amazon Kinesis Analytics application to delete.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>
        /// You can use the <code>DescribeApplication</code> operation to get this value.
        /// </p>
        pub fn create_timestamp(mut self, inp: smithy_types::Instant) -> Self {
            self.inner = self.inner.create_timestamp(inp);
            self
        }
        pub fn set_create_timestamp(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_create_timestamp(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplicationCloudWatchLoggingOption<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_cloud_watch_logging_option_input::Builder,
    }
    impl<C, M, R> DeleteApplicationCloudWatchLoggingOption<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteApplicationCloudWatchLoggingOptionOutput,
            smithy_http::result::SdkError<
                crate::error::DeleteApplicationCloudWatchLoggingOptionError,
            >,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteApplicationCloudWatchLoggingOptionInputOperationOutputAlias,
                crate::output::DeleteApplicationCloudWatchLoggingOptionOutput,
                crate::error::DeleteApplicationCloudWatchLoggingOptionError,
                crate::input::DeleteApplicationCloudWatchLoggingOptionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Kinesis Analytics application name.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The version ID of the Kinesis Analytics application.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The <code>CloudWatchLoggingOptionId</code> of the CloudWatch logging option to
        /// delete. You can get the <code>CloudWatchLoggingOptionId</code> by using the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation. </p>
        pub fn cloud_watch_logging_option_id(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.cloud_watch_logging_option_id(inp);
            self
        }
        pub fn set_cloud_watch_logging_option_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cloud_watch_logging_option_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplicationInputProcessingConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_input_processing_configuration_input::Builder,
    }
    impl<C, M, R> DeleteApplicationInputProcessingConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
                                pub async fn send(self) -> std::result::Result<crate::output::DeleteApplicationInputProcessingConfigurationOutput, smithy_http::result::SdkError<crate::error::DeleteApplicationInputProcessingConfigurationError>>
                                where
                                    R::Policy: smithy_client::bounds::SmithyRetryPolicy<crate::input::DeleteApplicationInputProcessingConfigurationInputOperationOutputAlias,
                                    crate::output::DeleteApplicationInputProcessingConfigurationOutput,
                                    crate::error::DeleteApplicationInputProcessingConfigurationError,
                                    crate::input::DeleteApplicationInputProcessingConfigurationInputOperationRetryAlias>,
                                {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Kinesis Analytics application name.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The version ID of the Kinesis Analytics application.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The ID of the input configuration from which to delete the input processing
        /// configuration. You can get a list of the input IDs for an application by using the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation.</p>
        pub fn input_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.input_id(inp);
            self
        }
        pub fn set_input_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_input_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplicationOutput<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_output_input::Builder,
    }
    impl<C, M, R> DeleteApplicationOutput<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteApplicationOutputOutput,
            smithy_http::result::SdkError<crate::error::DeleteApplicationOutputError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteApplicationOutputInputOperationOutputAlias,
                crate::output::DeleteApplicationOutputOutput,
                crate::error::DeleteApplicationOutputError,
                crate::input::DeleteApplicationOutputInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Amazon Kinesis Analytics application name.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Amazon Kinesis Analytics application version.
        /// You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the current application version.
        /// If the version specified is not the current version, the
        /// <code>ConcurrentModificationException</code> is returned.
        /// </p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The ID of the configuration to delete.
        /// Each output configuration that is added to the application, either when the application is
        /// created or later using the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_AddApplicationOutput.html">AddApplicationOutput</a> operation, has a unique ID.
        /// You need to provide the ID to uniquely identify the output configuration that you want to
        /// delete from the application configuration.
        /// You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the specific
        /// <code>OutputId</code>.
        /// </p>
        pub fn output_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.output_id(inp);
            self
        }
        pub fn set_output_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_output_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplicationReferenceDataSource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_reference_data_source_input::Builder,
    }
    impl<C, M, R> DeleteApplicationReferenceDataSource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteApplicationReferenceDataSourceOutput,
            smithy_http::result::SdkError<crate::error::DeleteApplicationReferenceDataSourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteApplicationReferenceDataSourceInputOperationOutputAlias,
                crate::output::DeleteApplicationReferenceDataSourceOutput,
                crate::error::DeleteApplicationReferenceDataSourceError,
                crate::input::DeleteApplicationReferenceDataSourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of an existing application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Version of the application.  
        /// You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the current application version.
        /// If the version specified
        /// is not the current version, the <code>ConcurrentModificationException</code> is returned.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>ID of the reference data source. When you add a reference data source to your
        /// application using the
        /// <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_AddApplicationReferenceDataSource.html">AddApplicationReferenceDataSource</a>, Amazon Kinesis Analytics assigns an ID.
        /// You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the reference ID.
        /// </p>
        pub fn reference_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.reference_id(inp);
            self
        }
        pub fn set_reference_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_reference_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_application_input::Builder,
    }
    impl<C, M, R> DescribeApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeApplicationOutput,
            smithy_http::result::SdkError<crate::error::DescribeApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeApplicationInputOperationOutputAlias,
                crate::output::DescribeApplicationOutput,
                crate::error::DescribeApplicationError,
                crate::input::DescribeApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of the application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DiscoverInputSchema<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::discover_input_schema_input::Builder,
    }
    impl<C, M, R> DiscoverInputSchema<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DiscoverInputSchemaOutput,
            smithy_http::result::SdkError<crate::error::DiscoverInputSchemaError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DiscoverInputSchemaInputOperationOutputAlias,
                crate::output::DiscoverInputSchemaOutput,
                crate::error::DiscoverInputSchemaError,
                crate::input::DiscoverInputSchemaInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Amazon Resource Name (ARN) of the streaming source.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf.</p>
        pub fn role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arn(inp);
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_arn(input);
            self
        }
        /// <p>Point at which you want Amazon Kinesis Analytics to start reading records from the specified streaming source discovery purposes.</p>
        pub fn input_starting_position_configuration(
            mut self,
            inp: crate::model::InputStartingPositionConfiguration,
        ) -> Self {
            self.inner = self.inner.input_starting_position_configuration(inp);
            self
        }
        pub fn set_input_starting_position_configuration(
            mut self,
            input: std::option::Option<crate::model::InputStartingPositionConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_input_starting_position_configuration(input);
            self
        }
        /// <p>Specify this parameter to discover a schema from data in an Amazon S3
        /// object.</p>
        pub fn s3_configuration(mut self, inp: crate::model::S3Configuration) -> Self {
            self.inner = self.inner.s3_configuration(inp);
            self
        }
        pub fn set_s3_configuration(
            mut self,
            input: std::option::Option<crate::model::S3Configuration>,
        ) -> Self {
            self.inner = self.inner.set_s3_configuration(input);
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputProcessingConfiguration.html">InputProcessingConfiguration</a> to use to preprocess the records before discovering the schema of the records.</p>
        pub fn input_processing_configuration(
            mut self,
            inp: crate::model::InputProcessingConfiguration,
        ) -> Self {
            self.inner = self.inner.input_processing_configuration(inp);
            self
        }
        pub fn set_input_processing_configuration(
            mut self,
            input: std::option::Option<crate::model::InputProcessingConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_input_processing_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListApplications<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_applications_input::Builder,
    }
    impl<C, M, R> ListApplications<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListApplicationsOutput,
            smithy_http::result::SdkError<crate::error::ListApplicationsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListApplicationsInputOperationOutputAlias,
                crate::output::ListApplicationsOutput,
                crate::error::ListApplicationsError,
                crate::input::ListApplicationsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Maximum number of applications to list.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.</p>
        pub fn exclusive_start_application_name(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.exclusive_start_application_name(inp);
            self
        }
        pub fn set_exclusive_start_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_exclusive_start_application_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C, M, R> ListTagsForResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTagsForResourceInputOperationOutputAlias,
                crate::output::ListTagsForResourceOutput,
                crate::error::ListTagsForResourceError,
                crate::input::ListTagsForResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the application for which to retrieve tags.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_application_input::Builder,
    }
    impl<C, M, R> StartApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartApplicationOutput,
            smithy_http::result::SdkError<crate::error::StartApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartApplicationInputOperationOutputAlias,
                crate::output::StartApplicationOutput,
                crate::error::StartApplicationError,
                crate::input::StartApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of the application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// Appends an item to `InputConfigurations`.
        ///
        /// To override the contents of this collection use [`set_input_configurations`](Self::set_input_configurations).
        /// <p>Identifies the specific input, by ID, that the application starts consuming. Amazon Kinesis Analytics starts reading the streaming source associated with the input. You can also specify where in the streaming source you want Amazon Kinesis Analytics to start reading.</p>
        pub fn input_configurations(
            mut self,
            inp: impl Into<crate::model::InputConfiguration>,
        ) -> Self {
            self.inner = self.inner.input_configurations(inp);
            self
        }
        pub fn set_input_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InputConfiguration>>,
        ) -> Self {
            self.inner = self.inner.set_input_configurations(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StopApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::stop_application_input::Builder,
    }
    impl<C, M, R> StopApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopApplicationOutput,
            smithy_http::result::SdkError<crate::error::StopApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StopApplicationInputOperationOutputAlias,
                crate::output::StopApplicationOutput,
                crate::error::StopApplicationError,
                crate::input::StopApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of the running application to stop.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C, M, R> TagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TagResourceInputOperationOutputAlias,
                crate::output::TagResourceOutput,
                crate::error::TagResourceError,
                crate::input::TagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the application to assign the tags.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The key-value tags to assign to the application.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C, M, R> UntagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UntagResourceInputOperationOutputAlias,
                crate::output::UntagResourceOutput,
                crate::error::UntagResourceError,
                crate::input::UntagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the Kinesis Analytics application from which to remove the tags.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        /// <p>A list of keys of tags to remove from the specified application.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_application_input::Builder,
    }
    impl<C, M, R> UpdateApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateApplicationOutput,
            smithy_http::result::SdkError<crate::error::UpdateApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateApplicationInputOperationOutputAlias,
                crate::output::UpdateApplicationOutput,
                crate::error::UpdateApplicationError,
                crate::input::UpdateApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of the Amazon Kinesis Analytics application to update.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The current application version ID. You can use the
        /// <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get this value.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>Describes application updates.</p>
        pub fn application_update(mut self, inp: crate::model::ApplicationUpdate) -> Self {
            self.inner = self.inner.application_update(inp);
            self
        }
        pub fn set_application_update(
            mut self,
            input: std::option::Option<crate::model::ApplicationUpdate>,
        ) -> Self {
            self.inner = self.inner.set_application_update(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
