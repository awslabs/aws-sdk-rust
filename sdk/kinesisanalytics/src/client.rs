// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Kinesis Analytics
///
/// Client for invoking operations on Amazon Kinesis Analytics. Each operation on Amazon Kinesis Analytics is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_kinesisanalytics::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_kinesisanalytics::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_kinesisanalytics::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AddApplicationCloudWatchLoggingOption`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::set_application_name): <p>The Kinesis Analytics application name.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::set_current_application_version_id): <p>The version ID of the Kinesis Analytics application.</p>
    ///   - [`cloud_watch_logging_option(CloudWatchLoggingOption)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::cloud_watch_logging_option) / [`set_cloud_watch_logging_option(Option<CloudWatchLoggingOption>)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::set_cloud_watch_logging_option): <p>Provides the CloudWatch log stream Amazon Resource Name (ARN) and the IAM role ARN. Note: To write application messages to CloudWatch, the IAM role that is used must have the <code>PutLogEvents</code> policy action enabled.</p>
    /// - On success, responds with [`AddApplicationCloudWatchLoggingOptionOutput`](crate::output::AddApplicationCloudWatchLoggingOptionOutput)

    /// - On failure, responds with [`SdkError<AddApplicationCloudWatchLoggingOptionError>`](crate::error::AddApplicationCloudWatchLoggingOptionError)
    pub fn add_application_cloud_watch_logging_option(
        &self,
    ) -> crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption {
        crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`AddApplicationInput`](crate::client::fluent_builders::AddApplicationInput) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::AddApplicationInput::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::AddApplicationInput::set_application_name): <p>Name of your existing Amazon Kinesis Analytics application to which you want to add the streaming source.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::AddApplicationInput::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::AddApplicationInput::set_current_application_version_id): <p>Current version of your Amazon Kinesis Analytics application. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to find the current application version.</p>
    ///   - [`input(Input)`](crate::client::fluent_builders::AddApplicationInput::input) / [`set_input(Option<Input>)`](crate::client::fluent_builders::AddApplicationInput::set_input): <p>The <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_Input.html">Input</a> to add.</p>
    /// - On success, responds with [`AddApplicationInputOutput`](crate::output::AddApplicationInputOutput)

    /// - On failure, responds with [`SdkError<AddApplicationInputError>`](crate::error::AddApplicationInputError)
    pub fn add_application_input(&self) -> crate::client::fluent_builders::AddApplicationInput {
        crate::client::fluent_builders::AddApplicationInput::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AddApplicationInputProcessingConfiguration`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::set_application_name): <p>Name of the application to which you want to add the input processing configuration.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::set_current_application_version_id): <p>Version of the application to which you want to add the input processing configuration. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned.</p>
    ///   - [`input_id(impl Into<String>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::input_id) / [`set_input_id(Option<String>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::set_input_id): <p>The ID of the input configuration to add the input processing configuration to. You can get a list of the input IDs for an application using the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation.</p>
    ///   - [`input_processing_configuration(InputProcessingConfiguration)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::input_processing_configuration) / [`set_input_processing_configuration(Option<InputProcessingConfiguration>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::set_input_processing_configuration): <p>The <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputProcessingConfiguration.html">InputProcessingConfiguration</a> to add to the application.</p>
    /// - On success, responds with [`AddApplicationInputProcessingConfigurationOutput`](crate::output::AddApplicationInputProcessingConfigurationOutput)

    /// - On failure, responds with [`SdkError<AddApplicationInputProcessingConfigurationError>`](crate::error::AddApplicationInputProcessingConfigurationError)
    pub fn add_application_input_processing_configuration(
        &self,
    ) -> crate::client::fluent_builders::AddApplicationInputProcessingConfiguration {
        crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`AddApplicationOutput`](crate::client::fluent_builders::AddApplicationOutput) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::AddApplicationOutput::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::AddApplicationOutput::set_application_name): <p>Name of the application to which you want to add the output configuration.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::AddApplicationOutput::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::AddApplicationOutput::set_current_application_version_id): <p>Version of the application to which you want to add the output configuration. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    ///   - [`output(Output)`](crate::client::fluent_builders::AddApplicationOutput::output) / [`set_output(Option<Output>)`](crate::client::fluent_builders::AddApplicationOutput::set_output): <p>An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, an Amazon Kinesis stream, an Amazon Kinesis Firehose delivery stream, or an AWS Lambda function), and record the formation to use when writing to the destination.</p>
    /// - On success, responds with [`AddApplicationOutputOutput`](crate::output::AddApplicationOutputOutput)

    /// - On failure, responds with [`SdkError<AddApplicationOutputError>`](crate::error::AddApplicationOutputError)
    pub fn add_application_output(&self) -> crate::client::fluent_builders::AddApplicationOutput {
        crate::client::fluent_builders::AddApplicationOutput::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AddApplicationReferenceDataSource`](crate::client::fluent_builders::AddApplicationReferenceDataSource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::set_application_name): <p>Name of an existing application.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::set_current_application_version_id): <p>Version of the application for which you are adding the reference data source. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned.</p>
    ///   - [`reference_data_source(ReferenceDataSource)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::reference_data_source) / [`set_reference_data_source(Option<ReferenceDataSource>)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::set_reference_data_source): <p>The reference data source can be an object in your Amazon S3 bucket. Amazon Kinesis Analytics reads the object and copies the data into the in-application table that is created. You provide an S3 bucket, object key name, and the resulting in-application table that is created. You must also provide an IAM role with the necessary permissions that Amazon Kinesis Analytics can assume to read the object from your S3 bucket on your behalf.</p>
    /// - On success, responds with [`AddApplicationReferenceDataSourceOutput`](crate::output::AddApplicationReferenceDataSourceOutput)

    /// - On failure, responds with [`SdkError<AddApplicationReferenceDataSourceError>`](crate::error::AddApplicationReferenceDataSourceError)
    pub fn add_application_reference_data_source(
        &self,
    ) -> crate::client::fluent_builders::AddApplicationReferenceDataSource {
        crate::client::fluent_builders::AddApplicationReferenceDataSource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateApplication`](crate::client::fluent_builders::CreateApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_application_name): <p>Name of your Amazon Kinesis Analytics application (for example, <code>sample-app</code>).</p>
    ///   - [`application_description(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::application_description) / [`set_application_description(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_application_description): <p>Summary description of the application.</p>
    ///   - [`inputs(Vec<Input>)`](crate::client::fluent_builders::CreateApplication::inputs) / [`set_inputs(Option<Vec<Input>>)`](crate::client::fluent_builders::CreateApplication::set_inputs): <p>Use this parameter to configure the application input.</p>  <p>You can configure your application to receive input from a single streaming source. In this configuration, you map this streaming source to an in-application stream that is created. Your application code can then query the in-application stream like a table (you can think of it as a constantly updating table).</p>  <p>For the streaming source, you provide its Amazon Resource Name (ARN) and format of data on the stream (for example, JSON, CSV, etc.). You also must provide an IAM role that Amazon Kinesis Analytics can assume to read this stream on your behalf.</p>  <p>To create the in-application stream, you need to specify a schema to transform your data into a schematized version used in SQL. In the schema, you provide the necessary mapping of the data elements in the streaming source to record columns in the in-app stream.</p>
    ///   - [`outputs(Vec<Output>)`](crate::client::fluent_builders::CreateApplication::outputs) / [`set_outputs(Option<Vec<Output>>)`](crate::client::fluent_builders::CreateApplication::set_outputs): <p>You can configure application output to write data from any of the in-application streams to up to three destinations.</p>  <p>These destinations can be Amazon Kinesis streams, Amazon Kinesis Firehose delivery streams, AWS Lambda destinations, or any combination of the three.</p>  <p>In the configuration, you specify the in-application stream name, the destination stream or Lambda function Amazon Resource Name (ARN), and the format to use when writing data. You must also provide an IAM role that Amazon Kinesis Analytics can assume to write to the destination stream or Lambda function on your behalf.</p>  <p>In the output configuration, you also provide the output stream or Lambda function ARN. For stream destinations, you provide the format of data in the stream (for example, JSON, CSV). You also must provide an IAM role that Amazon Kinesis Analytics can assume to write to the stream or Lambda function on your behalf.</p>
    ///   - [`cloud_watch_logging_options(Vec<CloudWatchLoggingOption>)`](crate::client::fluent_builders::CreateApplication::cloud_watch_logging_options) / [`set_cloud_watch_logging_options(Option<Vec<CloudWatchLoggingOption>>)`](crate::client::fluent_builders::CreateApplication::set_cloud_watch_logging_options): <p>Use this parameter to configure a CloudWatch log stream to monitor application configuration errors. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/cloudwatch-logs.html">Working with Amazon CloudWatch Logs</a>.</p>
    ///   - [`application_code(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::application_code) / [`set_application_code(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_application_code): <p>One or more SQL statements that read input data, transform it, and generate output. For example, you can write a SQL statement that reads data from one in-application stream, generates a running average of the number of advertisement clicks by vendor, and insert resulting rows in another in-application stream using pumps. For more information about the typical pattern, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-app-code.html">Application Code</a>. </p>  <p>You can provide such series of SQL statements, where output of one statement can be used as the input for the next statement. You store intermediate results by creating in-application streams and pumps.</p>  <p>Note that the application code must create the streams with names specified in the <code>Outputs</code>. For example, if your <code>Outputs</code> defines output streams named <code>ExampleOutputStream1</code> and <code>ExampleOutputStream2</code>, then your application code must create these streams. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateApplication::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateApplication::set_tags): <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-tagging.html">Using Tagging</a>.</p>
    /// - On success, responds with [`CreateApplicationOutput`](crate::output::CreateApplicationOutput) with field(s):
    ///   - [`application_summary(Option<ApplicationSummary>)`](crate::output::CreateApplicationOutput::application_summary): <p>In response to your <code>CreateApplication</code> request, Amazon Kinesis Analytics returns a response with a summary of the application it created, including the application Amazon Resource Name (ARN), name, and status.</p>
    /// - On failure, responds with [`SdkError<CreateApplicationError>`](crate::error::CreateApplicationError)
    pub fn create_application(&self) -> crate::client::fluent_builders::CreateApplication {
        crate::client::fluent_builders::CreateApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteApplication`](crate::client::fluent_builders::DeleteApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplication::set_application_name): <p>Name of the Amazon Kinesis Analytics application to delete.</p>
    ///   - [`create_timestamp(DateTime)`](crate::client::fluent_builders::DeleteApplication::create_timestamp) / [`set_create_timestamp(Option<DateTime>)`](crate::client::fluent_builders::DeleteApplication::set_create_timestamp): <p> You can use the <code>DescribeApplication</code> operation to get this value. </p>
    /// - On success, responds with [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput)

    /// - On failure, responds with [`SdkError<DeleteApplicationError>`](crate::error::DeleteApplicationError)
    pub fn delete_application(&self) -> crate::client::fluent_builders::DeleteApplication {
        crate::client::fluent_builders::DeleteApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteApplicationCloudWatchLoggingOption`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::set_application_name): <p>The Kinesis Analytics application name.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::set_current_application_version_id): <p>The version ID of the Kinesis Analytics application.</p>
    ///   - [`cloud_watch_logging_option_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::cloud_watch_logging_option_id) / [`set_cloud_watch_logging_option_id(Option<String>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::set_cloud_watch_logging_option_id): <p>The <code>CloudWatchLoggingOptionId</code> of the CloudWatch logging option to delete. You can get the <code>CloudWatchLoggingOptionId</code> by using the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation. </p>
    /// - On success, responds with [`DeleteApplicationCloudWatchLoggingOptionOutput`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput)

    /// - On failure, responds with [`SdkError<DeleteApplicationCloudWatchLoggingOptionError>`](crate::error::DeleteApplicationCloudWatchLoggingOptionError)
    pub fn delete_application_cloud_watch_logging_option(
        &self,
    ) -> crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption {
        crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DeleteApplicationInputProcessingConfiguration`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::set_application_name): <p>The Kinesis Analytics application name.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::set_current_application_version_id): <p>The version ID of the Kinesis Analytics application.</p>
    ///   - [`input_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::input_id) / [`set_input_id(Option<String>)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::set_input_id): <p>The ID of the input configuration from which to delete the input processing configuration. You can get a list of the input IDs for an application by using the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation.</p>
    /// - On success, responds with [`DeleteApplicationInputProcessingConfigurationOutput`](crate::output::DeleteApplicationInputProcessingConfigurationOutput)

    /// - On failure, responds with [`SdkError<DeleteApplicationInputProcessingConfigurationError>`](crate::error::DeleteApplicationInputProcessingConfigurationError)
    pub fn delete_application_input_processing_configuration(
        &self,
    ) -> crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration {
        crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DeleteApplicationOutput`](crate::client::fluent_builders::DeleteApplicationOutput) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationOutput::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplicationOutput::set_application_name): <p>Amazon Kinesis Analytics application name.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::DeleteApplicationOutput::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::DeleteApplicationOutput::set_current_application_version_id): <p>Amazon Kinesis Analytics application version. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    ///   - [`output_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationOutput::output_id) / [`set_output_id(Option<String>)`](crate::client::fluent_builders::DeleteApplicationOutput::set_output_id): <p>The ID of the configuration to delete. Each output configuration that is added to the application, either when the application is created or later using the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_AddApplicationOutput.html">AddApplicationOutput</a> operation, has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the specific <code>OutputId</code>. </p>
    /// - On success, responds with [`DeleteApplicationOutputOutput`](crate::output::DeleteApplicationOutputOutput)

    /// - On failure, responds with [`SdkError<DeleteApplicationOutputError>`](crate::error::DeleteApplicationOutputError)
    pub fn delete_application_output(
        &self,
    ) -> crate::client::fluent_builders::DeleteApplicationOutput {
        crate::client::fluent_builders::DeleteApplicationOutput::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteApplicationReferenceDataSource`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::set_application_name): <p>Name of an existing application.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::set_current_application_version_id): <p>Version of the application. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned.</p>
    ///   - [`reference_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::reference_id) / [`set_reference_id(Option<String>)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::set_reference_id): <p>ID of the reference data source. When you add a reference data source to your application using the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_AddApplicationReferenceDataSource.html">AddApplicationReferenceDataSource</a>, Amazon Kinesis Analytics assigns an ID. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get the reference ID. </p>
    /// - On success, responds with [`DeleteApplicationReferenceDataSourceOutput`](crate::output::DeleteApplicationReferenceDataSourceOutput)

    /// - On failure, responds with [`SdkError<DeleteApplicationReferenceDataSourceError>`](crate::error::DeleteApplicationReferenceDataSourceError)
    pub fn delete_application_reference_data_source(
        &self,
    ) -> crate::client::fluent_builders::DeleteApplicationReferenceDataSource {
        crate::client::fluent_builders::DeleteApplicationReferenceDataSource::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DescribeApplication`](crate::client::fluent_builders::DescribeApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DescribeApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DescribeApplication::set_application_name): <p>Name of the application.</p>
    /// - On success, responds with [`DescribeApplicationOutput`](crate::output::DescribeApplicationOutput) with field(s):
    ///   - [`application_detail(Option<ApplicationDetail>)`](crate::output::DescribeApplicationOutput::application_detail): <p>Provides a description of the application, such as the application Amazon Resource Name (ARN), status, latest version, and input and output configuration details.</p>
    /// - On failure, responds with [`SdkError<DescribeApplicationError>`](crate::error::DescribeApplicationError)
    pub fn describe_application(&self) -> crate::client::fluent_builders::DescribeApplication {
        crate::client::fluent_builders::DescribeApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DiscoverInputSchema`](crate::client::fluent_builders::DiscoverInputSchema) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::DiscoverInputSchema::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::DiscoverInputSchema::set_resource_arn): <p>Amazon Resource Name (ARN) of the streaming source.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::DiscoverInputSchema::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::DiscoverInputSchema::set_role_arn): <p>ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf.</p>
    ///   - [`input_starting_position_configuration(InputStartingPositionConfiguration)`](crate::client::fluent_builders::DiscoverInputSchema::input_starting_position_configuration) / [`set_input_starting_position_configuration(Option<InputStartingPositionConfiguration>)`](crate::client::fluent_builders::DiscoverInputSchema::set_input_starting_position_configuration): <p>Point at which you want Amazon Kinesis Analytics to start reading records from the specified streaming source discovery purposes.</p>
    ///   - [`s3_configuration(S3Configuration)`](crate::client::fluent_builders::DiscoverInputSchema::s3_configuration) / [`set_s3_configuration(Option<S3Configuration>)`](crate::client::fluent_builders::DiscoverInputSchema::set_s3_configuration): <p>Specify this parameter to discover a schema from data in an Amazon S3 object.</p>
    ///   - [`input_processing_configuration(InputProcessingConfiguration)`](crate::client::fluent_builders::DiscoverInputSchema::input_processing_configuration) / [`set_input_processing_configuration(Option<InputProcessingConfiguration>)`](crate::client::fluent_builders::DiscoverInputSchema::set_input_processing_configuration): <p>The <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputProcessingConfiguration.html">InputProcessingConfiguration</a> to use to preprocess the records before discovering the schema of the records.</p>
    /// - On success, responds with [`DiscoverInputSchemaOutput`](crate::output::DiscoverInputSchemaOutput) with field(s):
    ///   - [`input_schema(Option<SourceSchema>)`](crate::output::DiscoverInputSchemaOutput::input_schema): <p>Schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.</p>
    ///   - [`parsed_input_records(Option<Vec<Vec<String>>>)`](crate::output::DiscoverInputSchemaOutput::parsed_input_records): <p>An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).</p>
    ///   - [`processed_input_records(Option<Vec<String>>)`](crate::output::DiscoverInputSchemaOutput::processed_input_records): <p>Stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter.</p>
    ///   - [`raw_input_records(Option<Vec<String>>)`](crate::output::DiscoverInputSchemaOutput::raw_input_records): <p>Raw stream data that was sampled to infer the schema.</p>
    /// - On failure, responds with [`SdkError<DiscoverInputSchemaError>`](crate::error::DiscoverInputSchemaError)
    pub fn discover_input_schema(&self) -> crate::client::fluent_builders::DiscoverInputSchema {
        crate::client::fluent_builders::DiscoverInputSchema::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListApplications`](crate::client::fluent_builders::ListApplications) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListApplications::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListApplications::set_limit): <p>Maximum number of applications to list.</p>
    ///   - [`exclusive_start_application_name(impl Into<String>)`](crate::client::fluent_builders::ListApplications::exclusive_start_application_name) / [`set_exclusive_start_application_name(Option<String>)`](crate::client::fluent_builders::ListApplications::set_exclusive_start_application_name): <p>Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.</p>
    /// - On success, responds with [`ListApplicationsOutput`](crate::output::ListApplicationsOutput) with field(s):
    ///   - [`application_summaries(Option<Vec<ApplicationSummary>>)`](crate::output::ListApplicationsOutput::application_summaries): <p>List of <code>ApplicationSummary</code> objects. </p>
    ///   - [`has_more_applications(Option<bool>)`](crate::output::ListApplicationsOutput::has_more_applications): <p>Returns true if there are more applications to retrieve.</p>
    /// - On failure, responds with [`SdkError<ListApplicationsError>`](crate::error::ListApplicationsError)
    pub fn list_applications(&self) -> crate::client::fluent_builders::ListApplications {
        crate::client::fluent_builders::ListApplications::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of the application for which to retrieve tags.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The key-value tags assigned to the application.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartApplication`](crate::client::fluent_builders::StartApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::StartApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::StartApplication::set_application_name): <p>Name of the application.</p>
    ///   - [`input_configurations(Vec<InputConfiguration>)`](crate::client::fluent_builders::StartApplication::input_configurations) / [`set_input_configurations(Option<Vec<InputConfiguration>>)`](crate::client::fluent_builders::StartApplication::set_input_configurations): <p>Identifies the specific input, by ID, that the application starts consuming. Amazon Kinesis Analytics starts reading the streaming source associated with the input. You can also specify where in the streaming source you want Amazon Kinesis Analytics to start reading.</p>
    /// - On success, responds with [`StartApplicationOutput`](crate::output::StartApplicationOutput)

    /// - On failure, responds with [`SdkError<StartApplicationError>`](crate::error::StartApplicationError)
    pub fn start_application(&self) -> crate::client::fluent_builders::StartApplication {
        crate::client::fluent_builders::StartApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopApplication`](crate::client::fluent_builders::StopApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::StopApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::StopApplication::set_application_name): <p>Name of the running application to stop.</p>
    /// - On success, responds with [`StopApplicationOutput`](crate::output::StopApplicationOutput)

    /// - On failure, responds with [`SdkError<StopApplicationError>`](crate::error::StopApplicationError)
    pub fn stop_application(&self) -> crate::client::fluent_builders::StopApplication {
        crate::client::fluent_builders::StopApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the application to assign the tags.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The key-value tags to assign to the application.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the Kinesis Analytics application from which to remove the tags.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>A list of keys of tags to remove from the specified application.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateApplication`](crate::client::fluent_builders::UpdateApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::UpdateApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::UpdateApplication::set_application_name): <p>Name of the Amazon Kinesis Analytics application to update.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::UpdateApplication::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::UpdateApplication::set_current_application_version_id): <p>The current application version ID. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get this value.</p>
    ///   - [`application_update(ApplicationUpdate)`](crate::client::fluent_builders::UpdateApplication::application_update) / [`set_application_update(Option<ApplicationUpdate>)`](crate::client::fluent_builders::UpdateApplication::set_application_update): <p>Describes application updates.</p>
    /// - On success, responds with [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput)

    /// - On failure, responds with [`SdkError<UpdateApplicationError>`](crate::error::UpdateApplicationError)
    pub fn update_application(&self) -> crate::client::fluent_builders::UpdateApplication {
        crate::client::fluent_builders::UpdateApplication::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
