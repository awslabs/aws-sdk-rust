// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_input_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InputUpdate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.input_id {
        object.key("InputId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name_prefix_update {
        object.key("NamePrefixUpdate").string(var_2.as_str());
    }
    if let Some(var_3) = &input.input_processing_configuration_update {
        #[allow(unused_mut)]
        let mut object_4 = object
            .key("InputProcessingConfigurationUpdate")
            .start_object();
        crate::protocol_serde::shape_input_processing_configuration_update::ser_input_processing_configuration_update(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.kinesis_streams_input_update {
        #[allow(unused_mut)]
        let mut object_6 = object.key("KinesisStreamsInputUpdate").start_object();
        crate::protocol_serde::shape_kinesis_streams_input_update::ser_kinesis_streams_input_update(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.kinesis_firehose_input_update {
        #[allow(unused_mut)]
        let mut object_8 = object.key("KinesisFirehoseInputUpdate").start_object();
        crate::protocol_serde::shape_kinesis_firehose_input_update::ser_kinesis_firehose_input_update(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.input_schema_update {
        #[allow(unused_mut)]
        let mut object_10 = object.key("InputSchemaUpdate").start_object();
        crate::protocol_serde::shape_input_schema_update::ser_input_schema_update(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.input_parallelism_update {
        #[allow(unused_mut)]
        let mut object_12 = object.key("InputParallelismUpdate").start_object();
        crate::protocol_serde::shape_input_parallelism_update::ser_input_parallelism_update(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    Ok(())
}
