// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopApplicationInput {
    /// <p>Name of the running application to stop.</p>
    #[doc(hidden)]
    pub application_name: std::option::Option<std::string::String>,
}
impl StopApplicationInput {
    /// <p>Name of the running application to stop.</p>
    pub fn application_name(&self) -> std::option::Option<&str> {
        self.application_name.as_deref()
    }
}
impl StopApplicationInput {
    /// Creates a new builder-style object to manufacture [`StopApplicationInput`](crate::operation::stop_application::StopApplicationInput).
    pub fn builder() -> crate::operation::stop_application::builders::StopApplicationInputBuilder {
        crate::operation::stop_application::builders::StopApplicationInputBuilder::default()
    }
}

/// A builder for [`StopApplicationInput`](crate::operation::stop_application::StopApplicationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StopApplicationInputBuilder {
    pub(crate) application_name: std::option::Option<std::string::String>,
}
impl StopApplicationInputBuilder {
    /// <p>Name of the running application to stop.</p>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_name = Some(input.into());
        self
    }
    /// <p>Name of the running application to stop.</p>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// Consumes the builder and constructs a [`StopApplicationInput`](crate::operation::stop_application::StopApplicationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::stop_application::StopApplicationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::stop_application::StopApplicationInput {
            application_name: self.application_name,
        })
    }
}
