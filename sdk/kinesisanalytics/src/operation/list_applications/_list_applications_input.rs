// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListApplicationsInput {
    /// <p>Maximum number of applications to list.</p>
    #[doc(hidden)]
    pub limit: std::option::Option<i32>,
    /// <p>Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.</p>
    #[doc(hidden)]
    pub exclusive_start_application_name: std::option::Option<std::string::String>,
}
impl ListApplicationsInput {
    /// <p>Maximum number of applications to list.</p>
    pub fn limit(&self) -> std::option::Option<i32> {
        self.limit
    }
    /// <p>Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.</p>
    pub fn exclusive_start_application_name(&self) -> std::option::Option<&str> {
        self.exclusive_start_application_name.as_deref()
    }
}
impl ListApplicationsInput {
    /// Creates a new builder-style object to manufacture [`ListApplicationsInput`](crate::operation::list_applications::ListApplicationsInput).
    pub fn builder() -> crate::operation::list_applications::builders::ListApplicationsInputBuilder
    {
        crate::operation::list_applications::builders::ListApplicationsInputBuilder::default()
    }
}

/// A builder for [`ListApplicationsInput`](crate::operation::list_applications::ListApplicationsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListApplicationsInputBuilder {
    pub(crate) limit: std::option::Option<i32>,
    pub(crate) exclusive_start_application_name: std::option::Option<std::string::String>,
}
impl ListApplicationsInputBuilder {
    /// <p>Maximum number of applications to list.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    /// <p>Maximum number of applications to list.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.</p>
    pub fn exclusive_start_application_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.exclusive_start_application_name = Some(input.into());
        self
    }
    /// <p>Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.</p>
    pub fn set_exclusive_start_application_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.exclusive_start_application_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ListApplicationsInput`](crate::operation::list_applications::ListApplicationsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_applications::ListApplicationsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_applications::ListApplicationsInput {
            limit: self.limit,
            exclusive_start_application_name: self.exclusive_start_application_name,
        })
    }
}
