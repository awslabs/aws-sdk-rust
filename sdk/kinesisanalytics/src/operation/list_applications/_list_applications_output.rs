// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListApplicationsOutput {
    /// <p>List of <code>ApplicationSummary</code> objects. </p>
    pub application_summaries: ::std::vec::Vec<crate::types::ApplicationSummary>,
    /// <p>Returns true if there are more applications to retrieve.</p>
    pub has_more_applications: bool,
    _request_id: Option<String>,
}
impl ListApplicationsOutput {
    /// <p>List of <code>ApplicationSummary</code> objects. </p>
    pub fn application_summaries(&self) -> &[crate::types::ApplicationSummary] {
        use std::ops::Deref;
        self.application_summaries.deref()
    }
    /// <p>Returns true if there are more applications to retrieve.</p>
    pub fn has_more_applications(&self) -> bool {
        self.has_more_applications
    }
}
impl ::aws_http::request_id::RequestId for ListApplicationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListApplicationsOutput {
    /// Creates a new builder-style object to manufacture [`ListApplicationsOutput`](crate::operation::list_applications::ListApplicationsOutput).
    pub fn builder() -> crate::operation::list_applications::builders::ListApplicationsOutputBuilder {
        crate::operation::list_applications::builders::ListApplicationsOutputBuilder::default()
    }
}

/// A builder for [`ListApplicationsOutput`](crate::operation::list_applications::ListApplicationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListApplicationsOutputBuilder {
    pub(crate) application_summaries: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationSummary>>,
    pub(crate) has_more_applications: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ListApplicationsOutputBuilder {
    /// Appends an item to `application_summaries`.
    ///
    /// To override the contents of this collection use [`set_application_summaries`](Self::set_application_summaries).
    ///
    /// <p>List of <code>ApplicationSummary</code> objects. </p>
    pub fn application_summaries(mut self, input: crate::types::ApplicationSummary) -> Self {
        let mut v = self.application_summaries.unwrap_or_default();
        v.push(input);
        self.application_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of <code>ApplicationSummary</code> objects. </p>
    pub fn set_application_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationSummary>>) -> Self {
        self.application_summaries = input;
        self
    }
    /// <p>List of <code>ApplicationSummary</code> objects. </p>
    pub fn get_application_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApplicationSummary>> {
        &self.application_summaries
    }
    /// <p>Returns true if there are more applications to retrieve.</p>
    /// This field is required.
    pub fn has_more_applications(mut self, input: bool) -> Self {
        self.has_more_applications = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns true if there are more applications to retrieve.</p>
    pub fn set_has_more_applications(mut self, input: ::std::option::Option<bool>) -> Self {
        self.has_more_applications = input;
        self
    }
    /// <p>Returns true if there are more applications to retrieve.</p>
    pub fn get_has_more_applications(&self) -> &::std::option::Option<bool> {
        &self.has_more_applications
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListApplicationsOutput`](crate::operation::list_applications::ListApplicationsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`application_summaries`](crate::operation::list_applications::builders::ListApplicationsOutputBuilder::application_summaries)
    /// - [`has_more_applications`](crate::operation::list_applications::builders::ListApplicationsOutputBuilder::has_more_applications)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_applications::ListApplicationsOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_applications::ListApplicationsOutput {
            application_summaries: self.application_summaries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_summaries",
                    "application_summaries was not specified but it is required when building ListApplicationsOutput",
                )
            })?,
            has_more_applications: self.has_more_applications.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "has_more_applications",
                    "has_more_applications was not specified but it is required when building ListApplicationsOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
