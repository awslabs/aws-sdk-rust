// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes CloudWatch logging option updates.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudWatchLoggingOptionUpdate {
    /// <p>ID of the CloudWatch logging option to update</p>
    pub cloud_watch_logging_option_id: ::std::string::String,
    /// <p>ARN of the CloudWatch log to receive application messages.</p>
    pub log_stream_arn_update: ::std::option::Option<::std::string::String>,
    /// <p>IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the <code>PutLogEvents</code> policy action enabled.</p>
    pub role_arn_update: ::std::option::Option<::std::string::String>,
}
impl CloudWatchLoggingOptionUpdate {
    /// <p>ID of the CloudWatch logging option to update</p>
    pub fn cloud_watch_logging_option_id(&self) -> &str {
        use std::ops::Deref;
        self.cloud_watch_logging_option_id.deref()
    }
    /// <p>ARN of the CloudWatch log to receive application messages.</p>
    pub fn log_stream_arn_update(&self) -> ::std::option::Option<&str> {
        self.log_stream_arn_update.as_deref()
    }
    /// <p>IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the <code>PutLogEvents</code> policy action enabled.</p>
    pub fn role_arn_update(&self) -> ::std::option::Option<&str> {
        self.role_arn_update.as_deref()
    }
}
impl CloudWatchLoggingOptionUpdate {
    /// Creates a new builder-style object to manufacture [`CloudWatchLoggingOptionUpdate`](crate::types::CloudWatchLoggingOptionUpdate).
    pub fn builder() -> crate::types::builders::CloudWatchLoggingOptionUpdateBuilder {
        crate::types::builders::CloudWatchLoggingOptionUpdateBuilder::default()
    }
}

/// A builder for [`CloudWatchLoggingOptionUpdate`](crate::types::CloudWatchLoggingOptionUpdate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloudWatchLoggingOptionUpdateBuilder {
    pub(crate) cloud_watch_logging_option_id: ::std::option::Option<::std::string::String>,
    pub(crate) log_stream_arn_update: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn_update: ::std::option::Option<::std::string::String>,
}
impl CloudWatchLoggingOptionUpdateBuilder {
    /// <p>ID of the CloudWatch logging option to update</p>
    /// This field is required.
    pub fn cloud_watch_logging_option_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_watch_logging_option_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the CloudWatch logging option to update</p>
    pub fn set_cloud_watch_logging_option_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_watch_logging_option_id = input;
        self
    }
    /// <p>ID of the CloudWatch logging option to update</p>
    pub fn get_cloud_watch_logging_option_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_watch_logging_option_id
    }
    /// <p>ARN of the CloudWatch log to receive application messages.</p>
    pub fn log_stream_arn_update(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_stream_arn_update = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the CloudWatch log to receive application messages.</p>
    pub fn set_log_stream_arn_update(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_stream_arn_update = input;
        self
    }
    /// <p>ARN of the CloudWatch log to receive application messages.</p>
    pub fn get_log_stream_arn_update(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_stream_arn_update
    }
    /// <p>IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the <code>PutLogEvents</code> policy action enabled.</p>
    pub fn role_arn_update(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn_update = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the <code>PutLogEvents</code> policy action enabled.</p>
    pub fn set_role_arn_update(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn_update = input;
        self
    }
    /// <p>IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the <code>PutLogEvents</code> policy action enabled.</p>
    pub fn get_role_arn_update(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn_update
    }
    /// Consumes the builder and constructs a [`CloudWatchLoggingOptionUpdate`](crate::types::CloudWatchLoggingOptionUpdate).
    /// This method will fail if any of the following fields are not set:
    /// - [`cloud_watch_logging_option_id`](crate::types::builders::CloudWatchLoggingOptionUpdateBuilder::cloud_watch_logging_option_id)
    pub fn build(self) -> ::std::result::Result<crate::types::CloudWatchLoggingOptionUpdate, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CloudWatchLoggingOptionUpdate {
            cloud_watch_logging_option_id: self.cloud_watch_logging_option_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cloud_watch_logging_option_id",
                    "cloud_watch_logging_option_id was not specified but it is required when building CloudWatchLoggingOptionUpdate",
                )
            })?,
            log_stream_arn_update: self.log_stream_arn_update,
            role_arn_update: self.role_arn_update,
        })
    }
}
