// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Identifies an Amazon Kinesis stream as the streaming source. You provide the stream's Amazon Resource Name (ARN) and an IAM role ARN that enables Amazon Kinesis Analytics to access the stream on your behalf.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KinesisStreamsInput {
    /// <p>ARN of the input Amazon Kinesis stream to read.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
}
impl KinesisStreamsInput {
    /// <p>ARN of the input Amazon Kinesis stream to read.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl KinesisStreamsInput {
    /// Creates a new builder-style object to manufacture [`KinesisStreamsInput`](crate::types::KinesisStreamsInput).
    pub fn builder() -> crate::types::builders::KinesisStreamsInputBuilder {
        crate::types::builders::KinesisStreamsInputBuilder::default()
    }
}

/// A builder for [`KinesisStreamsInput`](crate::types::KinesisStreamsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KinesisStreamsInputBuilder {
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
}
impl KinesisStreamsInputBuilder {
    /// <p>ARN of the input Amazon Kinesis stream to read.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>ARN of the input Amazon Kinesis stream to read.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`KinesisStreamsInput`](crate::types::KinesisStreamsInput).
    pub fn build(self) -> crate::types::KinesisStreamsInput {
        crate::types::KinesisStreamsInput {
            resource_arn: self.resource_arn,
            role_arn: self.role_arn,
        }
    }
}
