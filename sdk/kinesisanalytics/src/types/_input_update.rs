// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes updates to a specific input configuration (identified by the <code>InputId</code> of an application). </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputUpdate {
    /// <p>Input ID of the application input to be updated.</p>
    #[doc(hidden)]
    pub input_id: std::option::Option<std::string::String>,
    /// <p>Name prefix for in-application streams that Amazon Kinesis Analytics creates for the specific streaming source.</p>
    #[doc(hidden)]
    pub name_prefix_update: std::option::Option<std::string::String>,
    /// <p>Describes updates for an input processing configuration.</p>
    #[doc(hidden)]
    pub input_processing_configuration_update:
        std::option::Option<crate::types::InputProcessingConfigurationUpdate>,
    /// <p>If an Amazon Kinesis stream is the streaming source to be updated, provides an updated stream Amazon Resource Name (ARN) and IAM role ARN.</p>
    #[doc(hidden)]
    pub kinesis_streams_input_update: std::option::Option<crate::types::KinesisStreamsInputUpdate>,
    /// <p>If an Amazon Kinesis Firehose delivery stream is the streaming source to be updated, provides an updated stream ARN and IAM role ARN.</p>
    #[doc(hidden)]
    pub kinesis_firehose_input_update:
        std::option::Option<crate::types::KinesisFirehoseInputUpdate>,
    /// <p>Describes the data format on the streaming source, and how record elements on the streaming source map to columns of the in-application stream that is created.</p>
    #[doc(hidden)]
    pub input_schema_update: std::option::Option<crate::types::InputSchemaUpdate>,
    /// <p>Describes the parallelism updates (the number in-application streams Amazon Kinesis Analytics creates for the specific streaming source).</p>
    #[doc(hidden)]
    pub input_parallelism_update: std::option::Option<crate::types::InputParallelismUpdate>,
}
impl InputUpdate {
    /// <p>Input ID of the application input to be updated.</p>
    pub fn input_id(&self) -> std::option::Option<&str> {
        self.input_id.as_deref()
    }
    /// <p>Name prefix for in-application streams that Amazon Kinesis Analytics creates for the specific streaming source.</p>
    pub fn name_prefix_update(&self) -> std::option::Option<&str> {
        self.name_prefix_update.as_deref()
    }
    /// <p>Describes updates for an input processing configuration.</p>
    pub fn input_processing_configuration_update(
        &self,
    ) -> std::option::Option<&crate::types::InputProcessingConfigurationUpdate> {
        self.input_processing_configuration_update.as_ref()
    }
    /// <p>If an Amazon Kinesis stream is the streaming source to be updated, provides an updated stream Amazon Resource Name (ARN) and IAM role ARN.</p>
    pub fn kinesis_streams_input_update(
        &self,
    ) -> std::option::Option<&crate::types::KinesisStreamsInputUpdate> {
        self.kinesis_streams_input_update.as_ref()
    }
    /// <p>If an Amazon Kinesis Firehose delivery stream is the streaming source to be updated, provides an updated stream ARN and IAM role ARN.</p>
    pub fn kinesis_firehose_input_update(
        &self,
    ) -> std::option::Option<&crate::types::KinesisFirehoseInputUpdate> {
        self.kinesis_firehose_input_update.as_ref()
    }
    /// <p>Describes the data format on the streaming source, and how record elements on the streaming source map to columns of the in-application stream that is created.</p>
    pub fn input_schema_update(&self) -> std::option::Option<&crate::types::InputSchemaUpdate> {
        self.input_schema_update.as_ref()
    }
    /// <p>Describes the parallelism updates (the number in-application streams Amazon Kinesis Analytics creates for the specific streaming source).</p>
    pub fn input_parallelism_update(
        &self,
    ) -> std::option::Option<&crate::types::InputParallelismUpdate> {
        self.input_parallelism_update.as_ref()
    }
}
impl InputUpdate {
    /// Creates a new builder-style object to manufacture [`InputUpdate`](crate::types::InputUpdate).
    pub fn builder() -> crate::types::builders::InputUpdateBuilder {
        crate::types::builders::InputUpdateBuilder::default()
    }
}

/// A builder for [`InputUpdate`](crate::types::InputUpdate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputUpdateBuilder {
    pub(crate) input_id: std::option::Option<std::string::String>,
    pub(crate) name_prefix_update: std::option::Option<std::string::String>,
    pub(crate) input_processing_configuration_update:
        std::option::Option<crate::types::InputProcessingConfigurationUpdate>,
    pub(crate) kinesis_streams_input_update:
        std::option::Option<crate::types::KinesisStreamsInputUpdate>,
    pub(crate) kinesis_firehose_input_update:
        std::option::Option<crate::types::KinesisFirehoseInputUpdate>,
    pub(crate) input_schema_update: std::option::Option<crate::types::InputSchemaUpdate>,
    pub(crate) input_parallelism_update: std::option::Option<crate::types::InputParallelismUpdate>,
}
impl InputUpdateBuilder {
    /// <p>Input ID of the application input to be updated.</p>
    pub fn input_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_id = Some(input.into());
        self
    }
    /// <p>Input ID of the application input to be updated.</p>
    pub fn set_input_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input_id = input;
        self
    }
    /// <p>Name prefix for in-application streams that Amazon Kinesis Analytics creates for the specific streaming source.</p>
    pub fn name_prefix_update(mut self, input: impl Into<std::string::String>) -> Self {
        self.name_prefix_update = Some(input.into());
        self
    }
    /// <p>Name prefix for in-application streams that Amazon Kinesis Analytics creates for the specific streaming source.</p>
    pub fn set_name_prefix_update(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.name_prefix_update = input;
        self
    }
    /// <p>Describes updates for an input processing configuration.</p>
    pub fn input_processing_configuration_update(
        mut self,
        input: crate::types::InputProcessingConfigurationUpdate,
    ) -> Self {
        self.input_processing_configuration_update = Some(input);
        self
    }
    /// <p>Describes updates for an input processing configuration.</p>
    pub fn set_input_processing_configuration_update(
        mut self,
        input: std::option::Option<crate::types::InputProcessingConfigurationUpdate>,
    ) -> Self {
        self.input_processing_configuration_update = input;
        self
    }
    /// <p>If an Amazon Kinesis stream is the streaming source to be updated, provides an updated stream Amazon Resource Name (ARN) and IAM role ARN.</p>
    pub fn kinesis_streams_input_update(
        mut self,
        input: crate::types::KinesisStreamsInputUpdate,
    ) -> Self {
        self.kinesis_streams_input_update = Some(input);
        self
    }
    /// <p>If an Amazon Kinesis stream is the streaming source to be updated, provides an updated stream Amazon Resource Name (ARN) and IAM role ARN.</p>
    pub fn set_kinesis_streams_input_update(
        mut self,
        input: std::option::Option<crate::types::KinesisStreamsInputUpdate>,
    ) -> Self {
        self.kinesis_streams_input_update = input;
        self
    }
    /// <p>If an Amazon Kinesis Firehose delivery stream is the streaming source to be updated, provides an updated stream ARN and IAM role ARN.</p>
    pub fn kinesis_firehose_input_update(
        mut self,
        input: crate::types::KinesisFirehoseInputUpdate,
    ) -> Self {
        self.kinesis_firehose_input_update = Some(input);
        self
    }
    /// <p>If an Amazon Kinesis Firehose delivery stream is the streaming source to be updated, provides an updated stream ARN and IAM role ARN.</p>
    pub fn set_kinesis_firehose_input_update(
        mut self,
        input: std::option::Option<crate::types::KinesisFirehoseInputUpdate>,
    ) -> Self {
        self.kinesis_firehose_input_update = input;
        self
    }
    /// <p>Describes the data format on the streaming source, and how record elements on the streaming source map to columns of the in-application stream that is created.</p>
    pub fn input_schema_update(mut self, input: crate::types::InputSchemaUpdate) -> Self {
        self.input_schema_update = Some(input);
        self
    }
    /// <p>Describes the data format on the streaming source, and how record elements on the streaming source map to columns of the in-application stream that is created.</p>
    pub fn set_input_schema_update(
        mut self,
        input: std::option::Option<crate::types::InputSchemaUpdate>,
    ) -> Self {
        self.input_schema_update = input;
        self
    }
    /// <p>Describes the parallelism updates (the number in-application streams Amazon Kinesis Analytics creates for the specific streaming source).</p>
    pub fn input_parallelism_update(mut self, input: crate::types::InputParallelismUpdate) -> Self {
        self.input_parallelism_update = Some(input);
        self
    }
    /// <p>Describes the parallelism updates (the number in-application streams Amazon Kinesis Analytics creates for the specific streaming source).</p>
    pub fn set_input_parallelism_update(
        mut self,
        input: std::option::Option<crate::types::InputParallelismUpdate>,
    ) -> Self {
        self.input_parallelism_update = input;
        self
    }
    /// Consumes the builder and constructs a [`InputUpdate`](crate::types::InputUpdate).
    pub fn build(self) -> crate::types::InputUpdate {
        crate::types::InputUpdate {
            input_id: self.input_id,
            name_prefix_update: self.name_prefix_update,
            input_processing_configuration_update: self.input_processing_configuration_update,
            kinesis_streams_input_update: self.kinesis_streams_input_update,
            kinesis_firehose_input_update: self.kinesis_firehose_input_update,
            input_schema_update: self.input_schema_update,
            input_parallelism_update: self.input_parallelism_update,
        }
    }
}
