// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a description of an Amazon S3 data source, including the Amazon Resource Name (ARN) of the S3 bucket, the ARN of the IAM role that is used to access the bucket, and the name of the Amazon S3 object that contains the data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Configuration {
    /// <p>IAM ARN of the role used to access the data.</p>
    pub role_arn: ::std::string::String,
    /// <p>ARN of the S3 bucket that contains the data.</p>
    pub bucket_arn: ::std::string::String,
    /// <p>The name of the object that contains the data.</p>
    pub file_key: ::std::string::String,
}
impl S3Configuration {
    /// <p>IAM ARN of the role used to access the data.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>ARN of the S3 bucket that contains the data.</p>
    pub fn bucket_arn(&self) -> &str {
        use std::ops::Deref;
        self.bucket_arn.deref()
    }
    /// <p>The name of the object that contains the data.</p>
    pub fn file_key(&self) -> &str {
        use std::ops::Deref;
        self.file_key.deref()
    }
}
impl S3Configuration {
    /// Creates a new builder-style object to manufacture [`S3Configuration`](crate::types::S3Configuration).
    pub fn builder() -> crate::types::builders::S3ConfigurationBuilder {
        crate::types::builders::S3ConfigurationBuilder::default()
    }
}

/// A builder for [`S3Configuration`](crate::types::S3Configuration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3ConfigurationBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_arn: ::std::option::Option<::std::string::String>,
    pub(crate) file_key: ::std::option::Option<::std::string::String>,
}
impl S3ConfigurationBuilder {
    /// <p>IAM ARN of the role used to access the data.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>IAM ARN of the role used to access the data.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>IAM ARN of the role used to access the data.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>ARN of the S3 bucket that contains the data.</p>
    /// This field is required.
    pub fn bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the S3 bucket that contains the data.</p>
    pub fn set_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_arn = input;
        self
    }
    /// <p>ARN of the S3 bucket that contains the data.</p>
    pub fn get_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_arn
    }
    /// <p>The name of the object that contains the data.</p>
    /// This field is required.
    pub fn file_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the object that contains the data.</p>
    pub fn set_file_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_key = input;
        self
    }
    /// <p>The name of the object that contains the data.</p>
    pub fn get_file_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_key
    }
    /// Consumes the builder and constructs a [`S3Configuration`](crate::types::S3Configuration).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::S3ConfigurationBuilder::role_arn)
    /// - [`bucket_arn`](crate::types::builders::S3ConfigurationBuilder::bucket_arn)
    /// - [`file_key`](crate::types::builders::S3ConfigurationBuilder::file_key)
    pub fn build(self) -> ::std::result::Result<crate::types::S3Configuration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3Configuration {
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building S3Configuration",
                )
            })?,
            bucket_arn: self.bucket_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket_arn",
                    "bucket_arn was not specified but it is required when building S3Configuration",
                )
            })?,
            file_key: self.file_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "file_key",
                    "file_key was not specified but it is required when building S3Configuration",
                )
            })?,
        })
    }
}
