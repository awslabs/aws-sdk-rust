// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a description of an Amazon S3 data source, including the Amazon Resource Name (ARN) of the S3 bucket, the ARN of the IAM role that is used to access the bucket, and the name of the Amazon S3 object that contains the data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3Configuration {
    /// <p>IAM ARN of the role used to access the data.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>ARN of the S3 bucket that contains the data.</p>
    #[doc(hidden)]
    pub bucket_arn: std::option::Option<std::string::String>,
    /// <p>The name of the object that contains the data.</p>
    #[doc(hidden)]
    pub file_key: std::option::Option<std::string::String>,
}
impl S3Configuration {
    /// <p>IAM ARN of the role used to access the data.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>ARN of the S3 bucket that contains the data.</p>
    pub fn bucket_arn(&self) -> std::option::Option<&str> {
        self.bucket_arn.as_deref()
    }
    /// <p>The name of the object that contains the data.</p>
    pub fn file_key(&self) -> std::option::Option<&str> {
        self.file_key.as_deref()
    }
}
impl S3Configuration {
    /// Creates a new builder-style object to manufacture [`S3Configuration`](crate::types::S3Configuration).
    pub fn builder() -> crate::types::builders::S3ConfigurationBuilder {
        crate::types::builders::S3ConfigurationBuilder::default()
    }
}

/// A builder for [`S3Configuration`](crate::types::S3Configuration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3ConfigurationBuilder {
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) bucket_arn: std::option::Option<std::string::String>,
    pub(crate) file_key: std::option::Option<std::string::String>,
}
impl S3ConfigurationBuilder {
    /// <p>IAM ARN of the role used to access the data.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>IAM ARN of the role used to access the data.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>ARN of the S3 bucket that contains the data.</p>
    pub fn bucket_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_arn = Some(input.into());
        self
    }
    /// <p>ARN of the S3 bucket that contains the data.</p>
    pub fn set_bucket_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_arn = input;
        self
    }
    /// <p>The name of the object that contains the data.</p>
    pub fn file_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_key = Some(input.into());
        self
    }
    /// <p>The name of the object that contains the data.</p>
    pub fn set_file_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_key = input;
        self
    }
    /// Consumes the builder and constructs a [`S3Configuration`](crate::types::S3Configuration).
    pub fn build(self) -> crate::types::S3Configuration {
        crate::types::S3Configuration {
            role_arn: self.role_arn,
            bucket_arn: self.bucket_arn,
            file_key: self.file_key,
        }
    }
}
