// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the number of in-application streams to create for a given streaming source. For information about parallelism, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputParallelism {
    /// <p>Number of in-application streams to create. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/limits.html">Limits</a>. </p>
    #[doc(hidden)]
    pub count: std::option::Option<i32>,
}
impl InputParallelism {
    /// <p>Number of in-application streams to create. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/limits.html">Limits</a>. </p>
    pub fn count(&self) -> std::option::Option<i32> {
        self.count
    }
}
impl InputParallelism {
    /// Creates a new builder-style object to manufacture [`InputParallelism`](crate::types::InputParallelism).
    pub fn builder() -> crate::types::builders::InputParallelismBuilder {
        crate::types::builders::InputParallelismBuilder::default()
    }
}

/// A builder for [`InputParallelism`](crate::types::InputParallelism).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputParallelismBuilder {
    pub(crate) count: std::option::Option<i32>,
}
impl InputParallelismBuilder {
    /// <p>Number of in-application streams to create. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/limits.html">Limits</a>. </p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>Number of in-application streams to create. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/limits.html">Limits</a>. </p>
    pub fn set_count(mut self, input: std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// Consumes the builder and constructs a [`InputParallelism`](crate::types::InputParallelism).
    pub fn build(self) -> crate::types::InputParallelism {
        crate::types::InputParallelism { count: self.count }
    }
}
