// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the data format when records are written to the destination. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DestinationSchema {
    /// <p>Specifies the format of the records on the output stream.</p>
    #[doc(hidden)]
    pub record_format_type: std::option::Option<crate::types::RecordFormatType>,
}
impl DestinationSchema {
    /// <p>Specifies the format of the records on the output stream.</p>
    pub fn record_format_type(&self) -> std::option::Option<&crate::types::RecordFormatType> {
        self.record_format_type.as_ref()
    }
}
impl DestinationSchema {
    /// Creates a new builder-style object to manufacture [`DestinationSchema`](crate::types::DestinationSchema).
    pub fn builder() -> crate::types::builders::DestinationSchemaBuilder {
        crate::types::builders::DestinationSchemaBuilder::default()
    }
}

/// A builder for [`DestinationSchema`](crate::types::DestinationSchema).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DestinationSchemaBuilder {
    pub(crate) record_format_type: std::option::Option<crate::types::RecordFormatType>,
}
impl DestinationSchemaBuilder {
    /// <p>Specifies the format of the records on the output stream.</p>
    pub fn record_format_type(mut self, input: crate::types::RecordFormatType) -> Self {
        self.record_format_type = Some(input);
        self
    }
    /// <p>Specifies the format of the records on the output stream.</p>
    pub fn set_record_format_type(
        mut self,
        input: std::option::Option<crate::types::RecordFormatType>,
    ) -> Self {
        self.record_format_type = input;
        self
    }
    /// Consumes the builder and constructs a [`DestinationSchema`](crate::types::DestinationSchema).
    pub fn build(self) -> crate::types::DestinationSchema {
        crate::types::DestinationSchema {
            record_format_type: self.record_format_type,
        }
    }
}
