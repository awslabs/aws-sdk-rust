// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href="/kinesisanalytics/latest/apiv2/Welcome.html">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p>
/// </note>
/// <p>Provides application summary information, including the application Amazon Resource Name (ARN), name, and status.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationSummary {
    /// <p>Name of the application.</p>
    #[doc(hidden)]
    pub application_name: std::option::Option<std::string::String>,
    /// <p>ARN of the application.</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>Status of the application.</p>
    #[doc(hidden)]
    pub application_status: std::option::Option<crate::types::ApplicationStatus>,
}
impl ApplicationSummary {
    /// <p>Name of the application.</p>
    pub fn application_name(&self) -> std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>ARN of the application.</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>Status of the application.</p>
    pub fn application_status(&self) -> std::option::Option<&crate::types::ApplicationStatus> {
        self.application_status.as_ref()
    }
}
impl ApplicationSummary {
    /// Creates a new builder-style object to manufacture [`ApplicationSummary`](crate::types::ApplicationSummary).
    pub fn builder() -> crate::types::builders::ApplicationSummaryBuilder {
        crate::types::builders::ApplicationSummaryBuilder::default()
    }
}

/// A builder for [`ApplicationSummary`](crate::types::ApplicationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApplicationSummaryBuilder {
    pub(crate) application_name: std::option::Option<std::string::String>,
    pub(crate) application_arn: std::option::Option<std::string::String>,
    pub(crate) application_status: std::option::Option<crate::types::ApplicationStatus>,
}
impl ApplicationSummaryBuilder {
    /// <p>Name of the application.</p>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_name = Some(input.into());
        self
    }
    /// <p>Name of the application.</p>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>ARN of the application.</p>
    pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_arn = Some(input.into());
        self
    }
    /// <p>ARN of the application.</p>
    pub fn set_application_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>Status of the application.</p>
    pub fn application_status(mut self, input: crate::types::ApplicationStatus) -> Self {
        self.application_status = Some(input);
        self
    }
    /// <p>Status of the application.</p>
    pub fn set_application_status(
        mut self,
        input: std::option::Option<crate::types::ApplicationStatus>,
    ) -> Self {
        self.application_status = input;
        self
    }
    /// Consumes the builder and constructs a [`ApplicationSummary`](crate::types::ApplicationSummary).
    pub fn build(self) -> crate::types::ApplicationSummary {
        crate::types::ApplicationSummary {
            application_name: self.application_name,
            application_arn: self.application_arn,
            application_status: self.application_status,
        }
    }
}
