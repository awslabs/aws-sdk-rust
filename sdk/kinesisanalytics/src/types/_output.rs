// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes application output configuration in which you identify an in-application stream and a destination where you want the in-application stream data to be written. The destination can be an Amazon Kinesis stream or an Amazon Kinesis Firehose delivery stream. </p>
/// <p></p>
/// <p>For limits on how many destinations an application can write and other limitations, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/limits.html">Limits</a>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Output {
    /// <p>Name of the in-application stream.</p>
    pub name: ::std::string::String,
    /// <p>Identifies an Amazon Kinesis stream as the destination.</p>
    pub kinesis_streams_output: ::std::option::Option<crate::types::KinesisStreamsOutput>,
    /// <p>Identifies an Amazon Kinesis Firehose delivery stream as the destination.</p>
    pub kinesis_firehose_output: ::std::option::Option<crate::types::KinesisFirehoseOutput>,
    /// <p>Identifies an AWS Lambda function as the destination.</p>
    pub lambda_output: ::std::option::Option<crate::types::LambdaOutput>,
    /// <p>Describes the data format when records are written to the destination. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>.</p>
    pub destination_schema: ::std::option::Option<crate::types::DestinationSchema>,
}
impl Output {
    /// <p>Name of the in-application stream.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Identifies an Amazon Kinesis stream as the destination.</p>
    pub fn kinesis_streams_output(&self) -> ::std::option::Option<&crate::types::KinesisStreamsOutput> {
        self.kinesis_streams_output.as_ref()
    }
    /// <p>Identifies an Amazon Kinesis Firehose delivery stream as the destination.</p>
    pub fn kinesis_firehose_output(&self) -> ::std::option::Option<&crate::types::KinesisFirehoseOutput> {
        self.kinesis_firehose_output.as_ref()
    }
    /// <p>Identifies an AWS Lambda function as the destination.</p>
    pub fn lambda_output(&self) -> ::std::option::Option<&crate::types::LambdaOutput> {
        self.lambda_output.as_ref()
    }
    /// <p>Describes the data format when records are written to the destination. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>.</p>
    pub fn destination_schema(&self) -> ::std::option::Option<&crate::types::DestinationSchema> {
        self.destination_schema.as_ref()
    }
}
impl Output {
    /// Creates a new builder-style object to manufacture [`Output`](crate::types::Output).
    pub fn builder() -> crate::types::builders::OutputBuilder {
        crate::types::builders::OutputBuilder::default()
    }
}

/// A builder for [`Output`](crate::types::Output).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) kinesis_streams_output: ::std::option::Option<crate::types::KinesisStreamsOutput>,
    pub(crate) kinesis_firehose_output: ::std::option::Option<crate::types::KinesisFirehoseOutput>,
    pub(crate) lambda_output: ::std::option::Option<crate::types::LambdaOutput>,
    pub(crate) destination_schema: ::std::option::Option<crate::types::DestinationSchema>,
}
impl OutputBuilder {
    /// <p>Name of the in-application stream.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the in-application stream.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the in-application stream.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Identifies an Amazon Kinesis stream as the destination.</p>
    pub fn kinesis_streams_output(mut self, input: crate::types::KinesisStreamsOutput) -> Self {
        self.kinesis_streams_output = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies an Amazon Kinesis stream as the destination.</p>
    pub fn set_kinesis_streams_output(mut self, input: ::std::option::Option<crate::types::KinesisStreamsOutput>) -> Self {
        self.kinesis_streams_output = input;
        self
    }
    /// <p>Identifies an Amazon Kinesis stream as the destination.</p>
    pub fn get_kinesis_streams_output(&self) -> &::std::option::Option<crate::types::KinesisStreamsOutput> {
        &self.kinesis_streams_output
    }
    /// <p>Identifies an Amazon Kinesis Firehose delivery stream as the destination.</p>
    pub fn kinesis_firehose_output(mut self, input: crate::types::KinesisFirehoseOutput) -> Self {
        self.kinesis_firehose_output = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies an Amazon Kinesis Firehose delivery stream as the destination.</p>
    pub fn set_kinesis_firehose_output(mut self, input: ::std::option::Option<crate::types::KinesisFirehoseOutput>) -> Self {
        self.kinesis_firehose_output = input;
        self
    }
    /// <p>Identifies an Amazon Kinesis Firehose delivery stream as the destination.</p>
    pub fn get_kinesis_firehose_output(&self) -> &::std::option::Option<crate::types::KinesisFirehoseOutput> {
        &self.kinesis_firehose_output
    }
    /// <p>Identifies an AWS Lambda function as the destination.</p>
    pub fn lambda_output(mut self, input: crate::types::LambdaOutput) -> Self {
        self.lambda_output = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies an AWS Lambda function as the destination.</p>
    pub fn set_lambda_output(mut self, input: ::std::option::Option<crate::types::LambdaOutput>) -> Self {
        self.lambda_output = input;
        self
    }
    /// <p>Identifies an AWS Lambda function as the destination.</p>
    pub fn get_lambda_output(&self) -> &::std::option::Option<crate::types::LambdaOutput> {
        &self.lambda_output
    }
    /// <p>Describes the data format when records are written to the destination. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>.</p>
    /// This field is required.
    pub fn destination_schema(mut self, input: crate::types::DestinationSchema) -> Self {
        self.destination_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the data format when records are written to the destination. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>.</p>
    pub fn set_destination_schema(mut self, input: ::std::option::Option<crate::types::DestinationSchema>) -> Self {
        self.destination_schema = input;
        self
    }
    /// <p>Describes the data format when records are written to the destination. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>.</p>
    pub fn get_destination_schema(&self) -> &::std::option::Option<crate::types::DestinationSchema> {
        &self.destination_schema
    }
    /// Consumes the builder and constructs a [`Output`](crate::types::Output).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::OutputBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::Output, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Output {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Output",
                )
            })?,
            kinesis_streams_output: self.kinesis_streams_output,
            kinesis_firehose_output: self.kinesis_firehose_output,
            lambda_output: self.lambda_output,
            destination_schema: self.destination_schema,
        })
    }
}
