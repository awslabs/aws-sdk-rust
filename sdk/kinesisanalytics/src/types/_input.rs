// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>When you configure the application input, you specify the streaming source, the in-application stream name that is created, and the mapping between the two. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Input {
    /// <p>Name prefix to use when creating an in-application stream. Suppose that you specify a prefix "MyInApplicationStream." Amazon Kinesis Analytics then creates one or more (as per the <code>InputParallelism</code> count you specified) in-application streams with names "MyInApplicationStream_001," "MyInApplicationStream_002," and so on. </p>
    pub name_prefix: ::std::string::String,
    /// <p>The <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputProcessingConfiguration.html">InputProcessingConfiguration</a> for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputLambdaProcessor.html">InputLambdaProcessor</a>.</p>
    pub input_processing_configuration: ::std::option::Option<crate::types::InputProcessingConfiguration>,
    /// <p>If the streaming source is an Amazon Kinesis stream, identifies the stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p>
    /// <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    pub kinesis_streams_input: ::std::option::Option<crate::types::KinesisStreamsInput>,
    /// <p>If the streaming source is an Amazon Kinesis Firehose delivery stream, identifies the delivery stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p>
    /// <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    pub kinesis_firehose_input: ::std::option::Option<crate::types::KinesisFirehoseInput>,
    /// <p>Describes the number of in-application streams to create. </p>
    /// <p>Data from your source is routed to these in-application input streams.</p>
    /// <p> (see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>.</p>
    pub input_parallelism: ::std::option::Option<crate::types::InputParallelism>,
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.</p>
    /// <p>Also used to describe the format of the reference data source.</p>
    pub input_schema: ::std::option::Option<crate::types::SourceSchema>,
}
impl Input {
    /// <p>Name prefix to use when creating an in-application stream. Suppose that you specify a prefix "MyInApplicationStream." Amazon Kinesis Analytics then creates one or more (as per the <code>InputParallelism</code> count you specified) in-application streams with names "MyInApplicationStream_001," "MyInApplicationStream_002," and so on. </p>
    pub fn name_prefix(&self) -> &str {
        use std::ops::Deref;
        self.name_prefix.deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputProcessingConfiguration.html">InputProcessingConfiguration</a> for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputLambdaProcessor.html">InputLambdaProcessor</a>.</p>
    pub fn input_processing_configuration(&self) -> ::std::option::Option<&crate::types::InputProcessingConfiguration> {
        self.input_processing_configuration.as_ref()
    }
    /// <p>If the streaming source is an Amazon Kinesis stream, identifies the stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p>
    /// <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    pub fn kinesis_streams_input(&self) -> ::std::option::Option<&crate::types::KinesisStreamsInput> {
        self.kinesis_streams_input.as_ref()
    }
    /// <p>If the streaming source is an Amazon Kinesis Firehose delivery stream, identifies the delivery stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p>
    /// <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    pub fn kinesis_firehose_input(&self) -> ::std::option::Option<&crate::types::KinesisFirehoseInput> {
        self.kinesis_firehose_input.as_ref()
    }
    /// <p>Describes the number of in-application streams to create. </p>
    /// <p>Data from your source is routed to these in-application input streams.</p>
    /// <p> (see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>.</p>
    pub fn input_parallelism(&self) -> ::std::option::Option<&crate::types::InputParallelism> {
        self.input_parallelism.as_ref()
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.</p>
    /// <p>Also used to describe the format of the reference data source.</p>
    pub fn input_schema(&self) -> ::std::option::Option<&crate::types::SourceSchema> {
        self.input_schema.as_ref()
    }
}
impl Input {
    /// Creates a new builder-style object to manufacture [`Input`](crate::types::Input).
    pub fn builder() -> crate::types::builders::InputBuilder {
        crate::types::builders::InputBuilder::default()
    }
}

/// A builder for [`Input`](crate::types::Input).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InputBuilder {
    pub(crate) name_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) input_processing_configuration: ::std::option::Option<crate::types::InputProcessingConfiguration>,
    pub(crate) kinesis_streams_input: ::std::option::Option<crate::types::KinesisStreamsInput>,
    pub(crate) kinesis_firehose_input: ::std::option::Option<crate::types::KinesisFirehoseInput>,
    pub(crate) input_parallelism: ::std::option::Option<crate::types::InputParallelism>,
    pub(crate) input_schema: ::std::option::Option<crate::types::SourceSchema>,
}
impl InputBuilder {
    /// <p>Name prefix to use when creating an in-application stream. Suppose that you specify a prefix "MyInApplicationStream." Amazon Kinesis Analytics then creates one or more (as per the <code>InputParallelism</code> count you specified) in-application streams with names "MyInApplicationStream_001," "MyInApplicationStream_002," and so on. </p>
    /// This field is required.
    pub fn name_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name prefix to use when creating an in-application stream. Suppose that you specify a prefix "MyInApplicationStream." Amazon Kinesis Analytics then creates one or more (as per the <code>InputParallelism</code> count you specified) in-application streams with names "MyInApplicationStream_001," "MyInApplicationStream_002," and so on. </p>
    pub fn set_name_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name_prefix = input;
        self
    }
    /// <p>Name prefix to use when creating an in-application stream. Suppose that you specify a prefix "MyInApplicationStream." Amazon Kinesis Analytics then creates one or more (as per the <code>InputParallelism</code> count you specified) in-application streams with names "MyInApplicationStream_001," "MyInApplicationStream_002," and so on. </p>
    pub fn get_name_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.name_prefix
    }
    /// <p>The <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputProcessingConfiguration.html">InputProcessingConfiguration</a> for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputLambdaProcessor.html">InputLambdaProcessor</a>.</p>
    pub fn input_processing_configuration(mut self, input: crate::types::InputProcessingConfiguration) -> Self {
        self.input_processing_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputProcessingConfiguration.html">InputProcessingConfiguration</a> for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputLambdaProcessor.html">InputLambdaProcessor</a>.</p>
    pub fn set_input_processing_configuration(mut self, input: ::std::option::Option<crate::types::InputProcessingConfiguration>) -> Self {
        self.input_processing_configuration = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputProcessingConfiguration.html">InputProcessingConfiguration</a> for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_InputLambdaProcessor.html">InputLambdaProcessor</a>.</p>
    pub fn get_input_processing_configuration(&self) -> &::std::option::Option<crate::types::InputProcessingConfiguration> {
        &self.input_processing_configuration
    }
    /// <p>If the streaming source is an Amazon Kinesis stream, identifies the stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p>
    /// <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    pub fn kinesis_streams_input(mut self, input: crate::types::KinesisStreamsInput) -> Self {
        self.kinesis_streams_input = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the streaming source is an Amazon Kinesis stream, identifies the stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p>
    /// <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    pub fn set_kinesis_streams_input(mut self, input: ::std::option::Option<crate::types::KinesisStreamsInput>) -> Self {
        self.kinesis_streams_input = input;
        self
    }
    /// <p>If the streaming source is an Amazon Kinesis stream, identifies the stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p>
    /// <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    pub fn get_kinesis_streams_input(&self) -> &::std::option::Option<crate::types::KinesisStreamsInput> {
        &self.kinesis_streams_input
    }
    /// <p>If the streaming source is an Amazon Kinesis Firehose delivery stream, identifies the delivery stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p>
    /// <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    pub fn kinesis_firehose_input(mut self, input: crate::types::KinesisFirehoseInput) -> Self {
        self.kinesis_firehose_input = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the streaming source is an Amazon Kinesis Firehose delivery stream, identifies the delivery stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p>
    /// <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    pub fn set_kinesis_firehose_input(mut self, input: ::std::option::Option<crate::types::KinesisFirehoseInput>) -> Self {
        self.kinesis_firehose_input = input;
        self
    }
    /// <p>If the streaming source is an Amazon Kinesis Firehose delivery stream, identifies the delivery stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.</p>
    /// <p>Note: Either <code>KinesisStreamsInput</code> or <code>KinesisFirehoseInput</code> is required.</p>
    pub fn get_kinesis_firehose_input(&self) -> &::std::option::Option<crate::types::KinesisFirehoseInput> {
        &self.kinesis_firehose_input
    }
    /// <p>Describes the number of in-application streams to create. </p>
    /// <p>Data from your source is routed to these in-application input streams.</p>
    /// <p> (see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>.</p>
    pub fn input_parallelism(mut self, input: crate::types::InputParallelism) -> Self {
        self.input_parallelism = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the number of in-application streams to create. </p>
    /// <p>Data from your source is routed to these in-application input streams.</p>
    /// <p> (see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>.</p>
    pub fn set_input_parallelism(mut self, input: ::std::option::Option<crate::types::InputParallelism>) -> Self {
        self.input_parallelism = input;
        self
    }
    /// <p>Describes the number of in-application streams to create. </p>
    /// <p>Data from your source is routed to these in-application input streams.</p>
    /// <p> (see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html">Configuring Application Input</a>.</p>
    pub fn get_input_parallelism(&self) -> &::std::option::Option<crate::types::InputParallelism> {
        &self.input_parallelism
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.</p>
    /// <p>Also used to describe the format of the reference data source.</p>
    /// This field is required.
    pub fn input_schema(mut self, input: crate::types::SourceSchema) -> Self {
        self.input_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.</p>
    /// <p>Also used to describe the format of the reference data source.</p>
    pub fn set_input_schema(mut self, input: ::std::option::Option<crate::types::SourceSchema>) -> Self {
        self.input_schema = input;
        self
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.</p>
    /// <p>Also used to describe the format of the reference data source.</p>
    pub fn get_input_schema(&self) -> &::std::option::Option<crate::types::SourceSchema> {
        &self.input_schema
    }
    /// Consumes the builder and constructs a [`Input`](crate::types::Input).
    /// This method will fail if any of the following fields are not set:
    /// - [`name_prefix`](crate::types::builders::InputBuilder::name_prefix)
    pub fn build(self) -> ::std::result::Result<crate::types::Input, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Input {
            name_prefix: self.name_prefix.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name_prefix",
                    "name_prefix was not specified but it is required when building Input",
                )
            })?,
            input_processing_configuration: self.input_processing_configuration,
            kinesis_streams_input: self.kinesis_streams_input,
            kinesis_firehose_input: self.kinesis_firehose_input,
            input_parallelism: self.input_parallelism,
            input_schema: self.input_schema,
        })
    }
}
