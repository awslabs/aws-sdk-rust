// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Description of the CloudWatch logging option.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudWatchLoggingOptionDescription {
    /// <p>ID of the CloudWatch logging option description.</p>
    #[doc(hidden)]
    pub cloud_watch_logging_option_id: std::option::Option<std::string::String>,
    /// <p>ARN of the CloudWatch log to receive application messages.</p>
    #[doc(hidden)]
    pub log_stream_arn: std::option::Option<std::string::String>,
    /// <p>IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the <code>PutLogEvents</code> policy action enabled.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
}
impl CloudWatchLoggingOptionDescription {
    /// <p>ID of the CloudWatch logging option description.</p>
    pub fn cloud_watch_logging_option_id(&self) -> std::option::Option<&str> {
        self.cloud_watch_logging_option_id.as_deref()
    }
    /// <p>ARN of the CloudWatch log to receive application messages.</p>
    pub fn log_stream_arn(&self) -> std::option::Option<&str> {
        self.log_stream_arn.as_deref()
    }
    /// <p>IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the <code>PutLogEvents</code> policy action enabled.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl CloudWatchLoggingOptionDescription {
    /// Creates a new builder-style object to manufacture [`CloudWatchLoggingOptionDescription`](crate::types::CloudWatchLoggingOptionDescription).
    pub fn builder() -> crate::types::builders::CloudWatchLoggingOptionDescriptionBuilder {
        crate::types::builders::CloudWatchLoggingOptionDescriptionBuilder::default()
    }
}

/// A builder for [`CloudWatchLoggingOptionDescription`](crate::types::CloudWatchLoggingOptionDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CloudWatchLoggingOptionDescriptionBuilder {
    pub(crate) cloud_watch_logging_option_id: std::option::Option<std::string::String>,
    pub(crate) log_stream_arn: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
}
impl CloudWatchLoggingOptionDescriptionBuilder {
    /// <p>ID of the CloudWatch logging option description.</p>
    pub fn cloud_watch_logging_option_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.cloud_watch_logging_option_id = Some(input.into());
        self
    }
    /// <p>ID of the CloudWatch logging option description.</p>
    pub fn set_cloud_watch_logging_option_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cloud_watch_logging_option_id = input;
        self
    }
    /// <p>ARN of the CloudWatch log to receive application messages.</p>
    pub fn log_stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_stream_arn = Some(input.into());
        self
    }
    /// <p>ARN of the CloudWatch log to receive application messages.</p>
    pub fn set_log_stream_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_stream_arn = input;
        self
    }
    /// <p>IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the <code>PutLogEvents</code> policy action enabled.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the <code>PutLogEvents</code> policy action enabled.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`CloudWatchLoggingOptionDescription`](crate::types::CloudWatchLoggingOptionDescription).
    pub fn build(self) -> crate::types::CloudWatchLoggingOptionDescription {
        crate::types::CloudWatchLoggingOptionDescription {
            cloud_watch_logging_option_id: self.cloud_watch_logging_option_id,
            log_stream_arn: self.log_stream_arn,
            role_arn: self.role_arn,
        }
    }
}
