// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListApplications`](crate::operation::list_applications::builders::ListApplicationsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`limit(i32)`](crate::operation::list_applications::builders::ListApplicationsFluentBuilder::limit) / [`set_limit(Option<i32>)`](crate::operation::list_applications::builders::ListApplicationsFluentBuilder::set_limit): <p>Maximum number of applications to list.</p>
    ///   - [`exclusive_start_application_name(impl Into<String>)`](crate::operation::list_applications::builders::ListApplicationsFluentBuilder::exclusive_start_application_name) / [`set_exclusive_start_application_name(Option<String>)`](crate::operation::list_applications::builders::ListApplicationsFluentBuilder::set_exclusive_start_application_name): <p>Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.</p>
    /// - On success, responds with [`ListApplicationsOutput`](crate::operation::list_applications::ListApplicationsOutput) with field(s):
    ///   - [`application_summaries(Option<Vec<ApplicationSummary>>)`](crate::operation::list_applications::ListApplicationsOutput::application_summaries): <p>List of <code>ApplicationSummary</code> objects. </p>
    ///   - [`has_more_applications(Option<bool>)`](crate::operation::list_applications::ListApplicationsOutput::has_more_applications): <p>Returns true if there are more applications to retrieve.</p>
    /// - On failure, responds with [`SdkError<ListApplicationsError>`](crate::operation::list_applications::ListApplicationsError)
    pub fn list_applications(
        &self,
    ) -> crate::operation::list_applications::builders::ListApplicationsFluentBuilder {
        crate::operation::list_applications::builders::ListApplicationsFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
