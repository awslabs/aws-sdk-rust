// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateApplication`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::application_name) / [`set_application_name(Option<String>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_application_name): <p>Name of the Amazon Kinesis Analytics application to update.</p>
    ///   - [`current_application_version_id(i64)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_current_application_version_id): <p>The current application version ID. You can use the <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/API_DescribeApplication.html">DescribeApplication</a> operation to get this value.</p>
    ///   - [`application_update(ApplicationUpdate)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::application_update) / [`set_application_update(Option<ApplicationUpdate>)`](crate::operation::update_application::builders::UpdateApplicationFluentBuilder::set_application_update): <p>Describes application updates.</p>
    /// - On success, responds with [`UpdateApplicationOutput`](crate::operation::update_application::UpdateApplicationOutput)
    /// - On failure, responds with [`SdkError<UpdateApplicationError>`](crate::operation::update_application::UpdateApplicationError)
    pub fn update_application(
        &self,
    ) -> crate::operation::update_application::builders::UpdateApplicationFluentBuilder {
        crate::operation::update_application::builders::UpdateApplicationFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
