// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteRateBasedRule`](crate::operation::delete_rate_based_rule::builders::DeleteRateBasedRuleFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_id(impl Into<String>)`](crate::operation::delete_rate_based_rule::builders::DeleteRateBasedRuleFluentBuilder::rule_id) / [`set_rule_id(Option<String>)`](crate::operation::delete_rate_based_rule::builders::DeleteRateBasedRuleFluentBuilder::set_rule_id): <p>The <code>RuleId</code> of the <code>RateBasedRule</code> that you want to delete. <code>RuleId</code> is returned by <code>CreateRateBasedRule</code> and by <code>ListRateBasedRules</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::operation::delete_rate_based_rule::builders::DeleteRateBasedRuleFluentBuilder::change_token) / [`set_change_token(Option<String>)`](crate::operation::delete_rate_based_rule::builders::DeleteRateBasedRuleFluentBuilder::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteRateBasedRuleOutput`](crate::operation::delete_rate_based_rule::DeleteRateBasedRuleOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::operation::delete_rate_based_rule::DeleteRateBasedRuleOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteRateBasedRule</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteRateBasedRuleError>`](crate::operation::delete_rate_based_rule::DeleteRateBasedRuleError)
    pub fn delete_rate_based_rule(
        &self,
    ) -> crate::operation::delete_rate_based_rule::builders::DeleteRateBasedRuleFluentBuilder {
        crate::operation::delete_rate_based_rule::builders::DeleteRateBasedRuleFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
