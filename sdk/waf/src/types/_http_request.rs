// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS WAF Classic</a> in the developer guide.</p>
/// <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p>
/// </note>
/// <p>The response from a <code>GetSampledRequests</code> request includes an <code>HTTPRequest</code> complex type that appears as <code>Request</code> in the response syntax. <code>HTTPRequest</code> contains information about one of the web requests that were returned by <code>GetSampledRequests</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpRequest {
    /// <p>The IP address that the request originated from. If the <code>WebACL</code> is associated with a CloudFront distribution, this is the value of one of the following fields in CloudFront access logs:</p>
    /// <ul>
    /// <li> <p> <code>c-ip</code>, if the viewer did not use an HTTP proxy or a load balancer to send the request</p> </li>
    /// <li> <p> <code>x-forwarded-for</code>, if the viewer did use an HTTP proxy or a load balancer to send the request</p> </li>
    /// </ul>
    pub client_ip: ::std::option::Option<::std::string::String>,
    /// <p>The two-letter country code for the country that the request originated from. For a current list of country codes, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>.</p>
    pub country: ::std::option::Option<::std::string::String>,
    /// <p>The part of a web request that identifies the resource, for example, <code>/images/daily-ad.jpg</code>.</p>
    pub uri: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP method specified in the sampled web request. CloudFront supports the following methods: <code>DELETE</code>, <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PATCH</code>, <code>POST</code>, and <code>PUT</code>. </p>
    pub method: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP version specified in the sampled web request, for example, <code>HTTP/1.1</code>.</p>
    pub http_version: ::std::option::Option<::std::string::String>,
    /// <p>A complex type that contains two values for each header in the sampled web request: the name of the header and the value of the header.</p>
    pub headers: ::std::option::Option<::std::vec::Vec<crate::types::HttpHeader>>,
}
impl HttpRequest {
    /// <p>The IP address that the request originated from. If the <code>WebACL</code> is associated with a CloudFront distribution, this is the value of one of the following fields in CloudFront access logs:</p>
    /// <ul>
    /// <li> <p> <code>c-ip</code>, if the viewer did not use an HTTP proxy or a load balancer to send the request</p> </li>
    /// <li> <p> <code>x-forwarded-for</code>, if the viewer did use an HTTP proxy or a load balancer to send the request</p> </li>
    /// </ul>
    pub fn client_ip(&self) -> ::std::option::Option<&str> {
        self.client_ip.as_deref()
    }
    /// <p>The two-letter country code for the country that the request originated from. For a current list of country codes, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>.</p>
    pub fn country(&self) -> ::std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>The part of a web request that identifies the resource, for example, <code>/images/daily-ad.jpg</code>.</p>
    pub fn uri(&self) -> ::std::option::Option<&str> {
        self.uri.as_deref()
    }
    /// <p>The HTTP method specified in the sampled web request. CloudFront supports the following methods: <code>DELETE</code>, <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PATCH</code>, <code>POST</code>, and <code>PUT</code>. </p>
    pub fn method(&self) -> ::std::option::Option<&str> {
        self.method.as_deref()
    }
    /// <p>The HTTP version specified in the sampled web request, for example, <code>HTTP/1.1</code>.</p>
    pub fn http_version(&self) -> ::std::option::Option<&str> {
        self.http_version.as_deref()
    }
    /// <p>A complex type that contains two values for each header in the sampled web request: the name of the header and the value of the header.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.headers.is_none()`.
    pub fn headers(&self) -> &[crate::types::HttpHeader] {
        self.headers.as_deref().unwrap_or_default()
    }
}
impl HttpRequest {
    /// Creates a new builder-style object to manufacture [`HttpRequest`](crate::types::HttpRequest).
    pub fn builder() -> crate::types::builders::HttpRequestBuilder {
        crate::types::builders::HttpRequestBuilder::default()
    }
}

/// A builder for [`HttpRequest`](crate::types::HttpRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HttpRequestBuilder {
    pub(crate) client_ip: ::std::option::Option<::std::string::String>,
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) uri: ::std::option::Option<::std::string::String>,
    pub(crate) method: ::std::option::Option<::std::string::String>,
    pub(crate) http_version: ::std::option::Option<::std::string::String>,
    pub(crate) headers: ::std::option::Option<::std::vec::Vec<crate::types::HttpHeader>>,
}
impl HttpRequestBuilder {
    /// <p>The IP address that the request originated from. If the <code>WebACL</code> is associated with a CloudFront distribution, this is the value of one of the following fields in CloudFront access logs:</p>
    /// <ul>
    /// <li> <p> <code>c-ip</code>, if the viewer did not use an HTTP proxy or a load balancer to send the request</p> </li>
    /// <li> <p> <code>x-forwarded-for</code>, if the viewer did use an HTTP proxy or a load balancer to send the request</p> </li>
    /// </ul>
    pub fn client_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address that the request originated from. If the <code>WebACL</code> is associated with a CloudFront distribution, this is the value of one of the following fields in CloudFront access logs:</p>
    /// <ul>
    /// <li> <p> <code>c-ip</code>, if the viewer did not use an HTTP proxy or a load balancer to send the request</p> </li>
    /// <li> <p> <code>x-forwarded-for</code>, if the viewer did use an HTTP proxy or a load balancer to send the request</p> </li>
    /// </ul>
    pub fn set_client_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_ip = input;
        self
    }
    /// <p>The IP address that the request originated from. If the <code>WebACL</code> is associated with a CloudFront distribution, this is the value of one of the following fields in CloudFront access logs:</p>
    /// <ul>
    /// <li> <p> <code>c-ip</code>, if the viewer did not use an HTTP proxy or a load balancer to send the request</p> </li>
    /// <li> <p> <code>x-forwarded-for</code>, if the viewer did use an HTTP proxy or a load balancer to send the request</p> </li>
    /// </ul>
    pub fn get_client_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_ip
    }
    /// <p>The two-letter country code for the country that the request originated from. For a current list of country codes, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>.</p>
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The two-letter country code for the country that the request originated from. For a current list of country codes, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The two-letter country code for the country that the request originated from. For a current list of country codes, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// <p>The part of a web request that identifies the resource, for example, <code>/images/daily-ad.jpg</code>.</p>
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The part of a web request that identifies the resource, for example, <code>/images/daily-ad.jpg</code>.</p>
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The part of a web request that identifies the resource, for example, <code>/images/daily-ad.jpg</code>.</p>
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }
    /// <p>The HTTP method specified in the sampled web request. CloudFront supports the following methods: <code>DELETE</code>, <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PATCH</code>, <code>POST</code>, and <code>PUT</code>. </p>
    pub fn method(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.method = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HTTP method specified in the sampled web request. CloudFront supports the following methods: <code>DELETE</code>, <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PATCH</code>, <code>POST</code>, and <code>PUT</code>. </p>
    pub fn set_method(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.method = input;
        self
    }
    /// <p>The HTTP method specified in the sampled web request. CloudFront supports the following methods: <code>DELETE</code>, <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PATCH</code>, <code>POST</code>, and <code>PUT</code>. </p>
    pub fn get_method(&self) -> &::std::option::Option<::std::string::String> {
        &self.method
    }
    /// <p>The HTTP version specified in the sampled web request, for example, <code>HTTP/1.1</code>.</p>
    pub fn http_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.http_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HTTP version specified in the sampled web request, for example, <code>HTTP/1.1</code>.</p>
    pub fn set_http_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.http_version = input;
        self
    }
    /// <p>The HTTP version specified in the sampled web request, for example, <code>HTTP/1.1</code>.</p>
    pub fn get_http_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.http_version
    }
    /// Appends an item to `headers`.
    ///
    /// To override the contents of this collection use [`set_headers`](Self::set_headers).
    ///
    /// <p>A complex type that contains two values for each header in the sampled web request: the name of the header and the value of the header.</p>
    pub fn headers(mut self, input: crate::types::HttpHeader) -> Self {
        let mut v = self.headers.unwrap_or_default();
        v.push(input);
        self.headers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A complex type that contains two values for each header in the sampled web request: the name of the header and the value of the header.</p>
    pub fn set_headers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HttpHeader>>) -> Self {
        self.headers = input;
        self
    }
    /// <p>A complex type that contains two values for each header in the sampled web request: the name of the header and the value of the header.</p>
    pub fn get_headers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HttpHeader>> {
        &self.headers
    }
    /// Consumes the builder and constructs a [`HttpRequest`](crate::types::HttpRequest).
    pub fn build(self) -> crate::types::HttpRequest {
        crate::types::HttpRequest {
            client_ip: self.client_ip,
            country: self.country,
            uri: self.uri,
            method: self.method,
            http_version: self.http_version,
            headers: self.headers,
        }
    }
}
