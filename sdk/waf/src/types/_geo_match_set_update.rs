// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS WAF Classic</a> in the developer guide.</p>
/// <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p>
/// </note>
/// <p>Specifies the type of update to perform to an <code>GeoMatchSet</code> with <code>UpdateGeoMatchSet</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GeoMatchSetUpdate {
    /// <p>Specifies whether to insert or delete a country with <code>UpdateGeoMatchSet</code>.</p>
    #[doc(hidden)]
    pub action: std::option::Option<crate::types::ChangeAction>,
    /// <p>The country from which web requests originate that you want AWS WAF to search for.</p>
    #[doc(hidden)]
    pub geo_match_constraint: std::option::Option<crate::types::GeoMatchConstraint>,
}
impl GeoMatchSetUpdate {
    /// <p>Specifies whether to insert or delete a country with <code>UpdateGeoMatchSet</code>.</p>
    pub fn action(&self) -> std::option::Option<&crate::types::ChangeAction> {
        self.action.as_ref()
    }
    /// <p>The country from which web requests originate that you want AWS WAF to search for.</p>
    pub fn geo_match_constraint(&self) -> std::option::Option<&crate::types::GeoMatchConstraint> {
        self.geo_match_constraint.as_ref()
    }
}
impl GeoMatchSetUpdate {
    /// Creates a new builder-style object to manufacture [`GeoMatchSetUpdate`](crate::types::GeoMatchSetUpdate).
    pub fn builder() -> crate::types::builders::GeoMatchSetUpdateBuilder {
        crate::types::builders::GeoMatchSetUpdateBuilder::default()
    }
}

/// A builder for [`GeoMatchSetUpdate`](crate::types::GeoMatchSetUpdate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GeoMatchSetUpdateBuilder {
    pub(crate) action: std::option::Option<crate::types::ChangeAction>,
    pub(crate) geo_match_constraint: std::option::Option<crate::types::GeoMatchConstraint>,
}
impl GeoMatchSetUpdateBuilder {
    /// <p>Specifies whether to insert or delete a country with <code>UpdateGeoMatchSet</code>.</p>
    pub fn action(mut self, input: crate::types::ChangeAction) -> Self {
        self.action = Some(input);
        self
    }
    /// <p>Specifies whether to insert or delete a country with <code>UpdateGeoMatchSet</code>.</p>
    pub fn set_action(mut self, input: std::option::Option<crate::types::ChangeAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The country from which web requests originate that you want AWS WAF to search for.</p>
    pub fn geo_match_constraint(mut self, input: crate::types::GeoMatchConstraint) -> Self {
        self.geo_match_constraint = Some(input);
        self
    }
    /// <p>The country from which web requests originate that you want AWS WAF to search for.</p>
    pub fn set_geo_match_constraint(
        mut self,
        input: std::option::Option<crate::types::GeoMatchConstraint>,
    ) -> Self {
        self.geo_match_constraint = input;
        self
    }
    /// Consumes the builder and constructs a [`GeoMatchSetUpdate`](crate::types::GeoMatchSetUpdate).
    pub fn build(self) -> crate::types::GeoMatchSetUpdate {
        crate::types::GeoMatchSetUpdate {
            action: self.action,
            geo_match_constraint: self.geo_match_constraint,
        }
    }
}
