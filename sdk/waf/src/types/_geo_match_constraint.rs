// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS WAF Classic</a> in the developer guide.</p>
/// <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p>
/// </note>
/// <p>The country from which web requests originate that you want AWS WAF to search for.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GeoMatchConstraint {
    /// <p>The type of geographical area you want AWS WAF to search for. Currently <code>Country</code> is the only valid value.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::GeoMatchConstraintType>,
    /// <p>The country that you want AWS WAF to search for.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::GeoMatchConstraintValue>,
}
impl GeoMatchConstraint {
    /// <p>The type of geographical area you want AWS WAF to search for. Currently <code>Country</code> is the only valid value.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::GeoMatchConstraintType> {
        self.r#type.as_ref()
    }
    /// <p>The country that you want AWS WAF to search for.</p>
    pub fn value(&self) -> std::option::Option<&crate::types::GeoMatchConstraintValue> {
        self.value.as_ref()
    }
}
impl GeoMatchConstraint {
    /// Creates a new builder-style object to manufacture [`GeoMatchConstraint`](crate::types::GeoMatchConstraint).
    pub fn builder() -> crate::types::builders::GeoMatchConstraintBuilder {
        crate::types::builders::GeoMatchConstraintBuilder::default()
    }
}

/// A builder for [`GeoMatchConstraint`](crate::types::GeoMatchConstraint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GeoMatchConstraintBuilder {
    pub(crate) r#type: std::option::Option<crate::types::GeoMatchConstraintType>,
    pub(crate) value: std::option::Option<crate::types::GeoMatchConstraintValue>,
}
impl GeoMatchConstraintBuilder {
    /// <p>The type of geographical area you want AWS WAF to search for. Currently <code>Country</code> is the only valid value.</p>
    pub fn r#type(mut self, input: crate::types::GeoMatchConstraintType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of geographical area you want AWS WAF to search for. Currently <code>Country</code> is the only valid value.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::GeoMatchConstraintType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The country that you want AWS WAF to search for.</p>
    pub fn value(mut self, input: crate::types::GeoMatchConstraintValue) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The country that you want AWS WAF to search for.</p>
    pub fn set_value(
        mut self,
        input: std::option::Option<crate::types::GeoMatchConstraintValue>,
    ) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`GeoMatchConstraint`](crate::types::GeoMatchConstraint).
    pub fn build(self) -> crate::types::GeoMatchConstraint {
        crate::types::GeoMatchConstraint {
            r#type: self.r#type,
            value: self.value,
        }
    }
}
