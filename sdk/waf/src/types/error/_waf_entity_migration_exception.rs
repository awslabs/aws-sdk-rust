// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The operation failed due to a problem with the migration. The failure cause is provided in the exception, in the <code>MigrationErrorType</code>: </p>
/// <ul>
/// <li> <p> <code>ENTITY_NOT_SUPPORTED</code> - The web ACL has an unsupported entity but the <code>IgnoreUnsupportedType</code> is not set to true.</p> </li>
/// <li> <p> <code>ENTITY_NOT_FOUND</code> - The web ACL doesn't exist. </p> </li>
/// <li> <p> <code>S3_BUCKET_NO_PERMISSION</code> - You don't have permission to perform the <code>PutObject</code> action to the specified Amazon S3 bucket.</p> </li>
/// <li> <p> <code>S3_BUCKET_NOT_ACCESSIBLE</code> - The bucket policy doesn't allow AWS WAF to perform the <code>PutObject</code> action in the bucket.</p> </li>
/// <li> <p> <code>S3_BUCKET_NOT_FOUND</code> - The S3 bucket doesn't exist. </p> </li>
/// <li> <p> <code>S3_BUCKET_INVALID_REGION</code> - The S3 bucket is not in the same Region as the web ACL.</p> </li>
/// <li> <p> <code>S3_INTERNAL_ERROR</code> - AWS WAF failed to create the template in the S3 bucket for another reason.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WafEntityMigrationException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub migration_error_type: std::option::Option<crate::types::MigrationErrorType>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub migration_error_reason: std::option::Option<std::string::String>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl WafEntityMigrationException {
    #[allow(missing_docs)] // documentation missing in model
    pub fn migration_error_type(&self) -> std::option::Option<&crate::types::MigrationErrorType> {
        self.migration_error_type.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn migration_error_reason(&self) -> std::option::Option<&str> {
        self.migration_error_reason.as_deref()
    }
}
impl WafEntityMigrationException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for WafEntityMigrationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "WafEntityMigrationException [WAFEntityMigrationException]"
        )?;
        if let Some(inner_1) = &self.message {
            {
                write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for WafEntityMigrationException {}
impl aws_http::request_id::RequestId for crate::types::error::WafEntityMigrationException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for WafEntityMigrationException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl WafEntityMigrationException {
    /// Creates a new builder-style object to manufacture [`WafEntityMigrationException`](crate::types::error::WafEntityMigrationException).
    pub fn builder() -> crate::types::error::builders::WafEntityMigrationExceptionBuilder {
        crate::types::error::builders::WafEntityMigrationExceptionBuilder::default()
    }
}

/// A builder for [`WafEntityMigrationException`](crate::types::error::WafEntityMigrationException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WafEntityMigrationExceptionBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) migration_error_type: std::option::Option<crate::types::MigrationErrorType>,
    pub(crate) migration_error_reason: std::option::Option<std::string::String>,
    meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
}
impl WafEntityMigrationExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn migration_error_type(mut self, input: crate::types::MigrationErrorType) -> Self {
        self.migration_error_type = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_migration_error_type(
        mut self,
        input: std::option::Option<crate::types::MigrationErrorType>,
    ) -> Self {
        self.migration_error_type = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn migration_error_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.migration_error_reason = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_migration_error_reason(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.migration_error_reason = input;
        self
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(
        &mut self,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`WafEntityMigrationException`](crate::types::error::WafEntityMigrationException).
    pub fn build(self) -> crate::types::error::WafEntityMigrationException {
        crate::types::error::WafEntityMigrationException {
            message: self.message,
            migration_error_type: self.migration_error_type,
            migration_error_reason: self.migration_error_reason,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
