// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS WAF Classic</a> in the developer guide.</p>
/// <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p>
/// </note>
/// <p>A complex type that contains <code>SizeConstraint</code> objects, which specify the parts of web requests that you want AWS WAF to inspect the size of. If a <code>SizeConstraintSet</code> contains more than one <code>SizeConstraint</code> object, a request only needs to match one constraint to be considered a match.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SizeConstraintSet {
    /// <p>A unique identifier for a <code>SizeConstraintSet</code>. You use <code>SizeConstraintSetId</code> to get information about a <code>SizeConstraintSet</code> (see <code>GetSizeConstraintSet</code>), update a <code>SizeConstraintSet</code> (see <code>UpdateSizeConstraintSet</code>), insert a <code>SizeConstraintSet</code> into a <code>Rule</code> or delete one from a <code>Rule</code> (see <code>UpdateRule</code>), and delete a <code>SizeConstraintSet</code> from AWS WAF (see <code>DeleteSizeConstraintSet</code>).</p>
    /// <p> <code>SizeConstraintSetId</code> is returned by <code>CreateSizeConstraintSet</code> and by <code>ListSizeConstraintSets</code>.</p>
    pub size_constraint_set_id: ::std::string::String,
    /// <p>The name, if any, of the <code>SizeConstraintSet</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the parts of web requests that you want to inspect the size of.</p>
    pub size_constraints: ::std::vec::Vec<crate::types::SizeConstraint>,
}
impl SizeConstraintSet {
    /// <p>A unique identifier for a <code>SizeConstraintSet</code>. You use <code>SizeConstraintSetId</code> to get information about a <code>SizeConstraintSet</code> (see <code>GetSizeConstraintSet</code>), update a <code>SizeConstraintSet</code> (see <code>UpdateSizeConstraintSet</code>), insert a <code>SizeConstraintSet</code> into a <code>Rule</code> or delete one from a <code>Rule</code> (see <code>UpdateRule</code>), and delete a <code>SizeConstraintSet</code> from AWS WAF (see <code>DeleteSizeConstraintSet</code>).</p>
    /// <p> <code>SizeConstraintSetId</code> is returned by <code>CreateSizeConstraintSet</code> and by <code>ListSizeConstraintSets</code>.</p>
    pub fn size_constraint_set_id(&self) -> &str {
        use std::ops::Deref;
        self.size_constraint_set_id.deref()
    }
    /// <p>The name, if any, of the <code>SizeConstraintSet</code>.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies the parts of web requests that you want to inspect the size of.</p>
    pub fn size_constraints(&self) -> &[crate::types::SizeConstraint] {
        use std::ops::Deref;
        self.size_constraints.deref()
    }
}
impl SizeConstraintSet {
    /// Creates a new builder-style object to manufacture [`SizeConstraintSet`](crate::types::SizeConstraintSet).
    pub fn builder() -> crate::types::builders::SizeConstraintSetBuilder {
        crate::types::builders::SizeConstraintSetBuilder::default()
    }
}

/// A builder for [`SizeConstraintSet`](crate::types::SizeConstraintSet).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SizeConstraintSetBuilder {
    pub(crate) size_constraint_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) size_constraints: ::std::option::Option<::std::vec::Vec<crate::types::SizeConstraint>>,
}
impl SizeConstraintSetBuilder {
    /// <p>A unique identifier for a <code>SizeConstraintSet</code>. You use <code>SizeConstraintSetId</code> to get information about a <code>SizeConstraintSet</code> (see <code>GetSizeConstraintSet</code>), update a <code>SizeConstraintSet</code> (see <code>UpdateSizeConstraintSet</code>), insert a <code>SizeConstraintSet</code> into a <code>Rule</code> or delete one from a <code>Rule</code> (see <code>UpdateRule</code>), and delete a <code>SizeConstraintSet</code> from AWS WAF (see <code>DeleteSizeConstraintSet</code>).</p>
    /// <p> <code>SizeConstraintSetId</code> is returned by <code>CreateSizeConstraintSet</code> and by <code>ListSizeConstraintSets</code>.</p>
    /// This field is required.
    pub fn size_constraint_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.size_constraint_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for a <code>SizeConstraintSet</code>. You use <code>SizeConstraintSetId</code> to get information about a <code>SizeConstraintSet</code> (see <code>GetSizeConstraintSet</code>), update a <code>SizeConstraintSet</code> (see <code>UpdateSizeConstraintSet</code>), insert a <code>SizeConstraintSet</code> into a <code>Rule</code> or delete one from a <code>Rule</code> (see <code>UpdateRule</code>), and delete a <code>SizeConstraintSet</code> from AWS WAF (see <code>DeleteSizeConstraintSet</code>).</p>
    /// <p> <code>SizeConstraintSetId</code> is returned by <code>CreateSizeConstraintSet</code> and by <code>ListSizeConstraintSets</code>.</p>
    pub fn set_size_constraint_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.size_constraint_set_id = input;
        self
    }
    /// <p>A unique identifier for a <code>SizeConstraintSet</code>. You use <code>SizeConstraintSetId</code> to get information about a <code>SizeConstraintSet</code> (see <code>GetSizeConstraintSet</code>), update a <code>SizeConstraintSet</code> (see <code>UpdateSizeConstraintSet</code>), insert a <code>SizeConstraintSet</code> into a <code>Rule</code> or delete one from a <code>Rule</code> (see <code>UpdateRule</code>), and delete a <code>SizeConstraintSet</code> from AWS WAF (see <code>DeleteSizeConstraintSet</code>).</p>
    /// <p> <code>SizeConstraintSetId</code> is returned by <code>CreateSizeConstraintSet</code> and by <code>ListSizeConstraintSets</code>.</p>
    pub fn get_size_constraint_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.size_constraint_set_id
    }
    /// <p>The name, if any, of the <code>SizeConstraintSet</code>.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name, if any, of the <code>SizeConstraintSet</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name, if any, of the <code>SizeConstraintSet</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `size_constraints`.
    ///
    /// To override the contents of this collection use [`set_size_constraints`](Self::set_size_constraints).
    ///
    /// <p>Specifies the parts of web requests that you want to inspect the size of.</p>
    pub fn size_constraints(mut self, input: crate::types::SizeConstraint) -> Self {
        let mut v = self.size_constraints.unwrap_or_default();
        v.push(input);
        self.size_constraints = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the parts of web requests that you want to inspect the size of.</p>
    pub fn set_size_constraints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SizeConstraint>>) -> Self {
        self.size_constraints = input;
        self
    }
    /// <p>Specifies the parts of web requests that you want to inspect the size of.</p>
    pub fn get_size_constraints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SizeConstraint>> {
        &self.size_constraints
    }
    /// Consumes the builder and constructs a [`SizeConstraintSet`](crate::types::SizeConstraintSet).
    /// This method will fail if any of the following fields are not set:
    /// - [`size_constraint_set_id`](crate::types::builders::SizeConstraintSetBuilder::size_constraint_set_id)
    /// - [`size_constraints`](crate::types::builders::SizeConstraintSetBuilder::size_constraints)
    pub fn build(self) -> ::std::result::Result<crate::types::SizeConstraintSet, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SizeConstraintSet {
            size_constraint_set_id: self.size_constraint_set_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "size_constraint_set_id",
                    "size_constraint_set_id was not specified but it is required when building SizeConstraintSet",
                )
            })?,
            name: self.name,
            size_constraints: self.size_constraints.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "size_constraints",
                    "size_constraints was not specified but it is required when building SizeConstraintSet",
                )
            })?,
        })
    }
}
