// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS WAF Classic</a> in the developer guide.</p>
/// <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p>
/// </note>
/// <p>The rule to exclude from a rule group. This is applicable only when the <code>ActivatedRule</code> refers to a <code>RuleGroup</code>. The rule must belong to the <code>RuleGroup</code> that is specified by the <code>ActivatedRule</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExcludedRule {
    /// <p>The unique identifier for the rule to exclude from the rule group.</p>
    #[doc(hidden)]
    pub rule_id: std::option::Option<std::string::String>,
}
impl ExcludedRule {
    /// <p>The unique identifier for the rule to exclude from the rule group.</p>
    pub fn rule_id(&self) -> std::option::Option<&str> {
        self.rule_id.as_deref()
    }
}
impl ExcludedRule {
    /// Creates a new builder-style object to manufacture [`ExcludedRule`](crate::types::ExcludedRule).
    pub fn builder() -> crate::types::builders::ExcludedRuleBuilder {
        crate::types::builders::ExcludedRuleBuilder::default()
    }
}

/// A builder for [`ExcludedRule`](crate::types::ExcludedRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExcludedRuleBuilder {
    pub(crate) rule_id: std::option::Option<std::string::String>,
}
impl ExcludedRuleBuilder {
    /// <p>The unique identifier for the rule to exclude from the rule group.</p>
    pub fn rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the rule to exclude from the rule group.</p>
    pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ExcludedRule`](crate::types::ExcludedRule).
    pub fn build(self) -> crate::types::ExcludedRule {
        crate::types::ExcludedRule {
            rule_id: self.rule_id,
        }
    }
}
