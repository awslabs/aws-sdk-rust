// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS WAF
///
/// Client for invoking operations on AWS WAF. Each operation on AWS WAF is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_waf::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_waf::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_waf::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateByteMatchSet`](crate::client::fluent_builders::CreateByteMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateByteMatchSet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateByteMatchSet::set_name): <p>A friendly name or description of the <code>ByteMatchSet</code>. You can't change <code>Name</code> after you create a <code>ByteMatchSet</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateByteMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateByteMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`CreateByteMatchSetOutput`](crate::output::CreateByteMatchSetOutput) with field(s):
    ///   - [`byte_match_set(Option<ByteMatchSet>)`](crate::output::CreateByteMatchSetOutput::byte_match_set): <p>A <code>ByteMatchSet</code> that contains no <code>ByteMatchTuple</code> objects.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateByteMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateByteMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateByteMatchSetError>`](crate::error::CreateByteMatchSetError)
    pub fn create_byte_match_set(&self) -> crate::client::fluent_builders::CreateByteMatchSet {
        crate::client::fluent_builders::CreateByteMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateGeoMatchSet`](crate::client::fluent_builders::CreateGeoMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateGeoMatchSet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateGeoMatchSet::set_name): <p>A friendly name or description of the <code>GeoMatchSet</code>. You can't change <code>Name</code> after you create the <code>GeoMatchSet</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateGeoMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateGeoMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`CreateGeoMatchSetOutput`](crate::output::CreateGeoMatchSetOutput) with field(s):
    ///   - [`geo_match_set(Option<GeoMatchSet>)`](crate::output::CreateGeoMatchSetOutput::geo_match_set): <p>The <code>GeoMatchSet</code> returned in the <code>CreateGeoMatchSet</code> response. The <code>GeoMatchSet</code> contains no <code>GeoMatchConstraints</code>.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateGeoMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateGeoMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateGeoMatchSetError>`](crate::error::CreateGeoMatchSetError)
    pub fn create_geo_match_set(&self) -> crate::client::fluent_builders::CreateGeoMatchSet {
        crate::client::fluent_builders::CreateGeoMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateIPSet`](crate::client::fluent_builders::CreateIPSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateIPSet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateIPSet::set_name): <p>A friendly name or description of the <code>IPSet</code>. You can't change <code>Name</code> after you create the <code>IPSet</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateIPSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateIPSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`CreateIpSetOutput`](crate::output::CreateIpSetOutput) with field(s):
    ///   - [`ip_set(Option<IpSet>)`](crate::output::CreateIpSetOutput::ip_set): <p>The <code>IPSet</code> returned in the <code>CreateIPSet</code> response.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateIpSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateIPSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateIPSetError>`](crate::error::CreateIPSetError)
    pub fn create_ip_set(&self) -> crate::client::fluent_builders::CreateIPSet {
        crate::client::fluent_builders::CreateIPSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRateBasedRule`](crate::client::fluent_builders::CreateRateBasedRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateRateBasedRule::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateRateBasedRule::set_name): <p>A friendly name or description of the <code>RateBasedRule</code>. You can't change the name of a <code>RateBasedRule</code> after you create it.</p>
    ///   - [`metric_name(impl Into<String>)`](crate::client::fluent_builders::CreateRateBasedRule::metric_name) / [`set_metric_name(Option<String>)`](crate::client::fluent_builders::CreateRateBasedRule::set_metric_name): <p>A friendly name or description for the metrics for this <code>RateBasedRule</code>. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the <code>RateBasedRule</code>.</p>
    ///   - [`rate_key(RateKey)`](crate::client::fluent_builders::CreateRateBasedRule::rate_key) / [`set_rate_key(Option<RateKey>)`](crate::client::fluent_builders::CreateRateBasedRule::set_rate_key): <p>The field that AWS WAF uses to determine if requests are likely arriving from a single source and thus subject to rate monitoring. The only valid value for <code>RateKey</code> is <code>IP</code>. <code>IP</code> indicates that requests that arrive from the same IP address are subject to the <code>RateLimit</code> that is specified in the <code>RateBasedRule</code>.</p>
    ///   - [`rate_limit(i64)`](crate::client::fluent_builders::CreateRateBasedRule::rate_limit) / [`set_rate_limit(i64)`](crate::client::fluent_builders::CreateRateBasedRule::set_rate_limit): <p>The maximum number of requests, which have an identical value in the field that is specified by <code>RateKey</code>, allowed in a five-minute period. If the number of requests exceeds the <code>RateLimit</code> and the other predicates specified in the rule are also met, AWS WAF triggers the action that is specified for this rule.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateRateBasedRule::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateRateBasedRule::set_change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateRateBasedRule</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateRateBasedRule::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateRateBasedRule::set_tags): <p></p>
    /// - On success, responds with [`CreateRateBasedRuleOutput`](crate::output::CreateRateBasedRuleOutput) with field(s):
    ///   - [`rule(Option<RateBasedRule>)`](crate::output::CreateRateBasedRuleOutput::rule): <p>The <code>RateBasedRule</code> that is returned in the <code>CreateRateBasedRule</code> response.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateRateBasedRuleOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateRateBasedRule</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateRateBasedRuleError>`](crate::error::CreateRateBasedRuleError)
    pub fn create_rate_based_rule(&self) -> crate::client::fluent_builders::CreateRateBasedRule {
        crate::client::fluent_builders::CreateRateBasedRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRegexMatchSet`](crate::client::fluent_builders::CreateRegexMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateRegexMatchSet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateRegexMatchSet::set_name): <p>A friendly name or description of the <code>RegexMatchSet</code>. You can't change <code>Name</code> after you create a <code>RegexMatchSet</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateRegexMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateRegexMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`CreateRegexMatchSetOutput`](crate::output::CreateRegexMatchSetOutput) with field(s):
    ///   - [`regex_match_set(Option<RegexMatchSet>)`](crate::output::CreateRegexMatchSetOutput::regex_match_set): <p>A <code>RegexMatchSet</code> that contains no <code>RegexMatchTuple</code> objects.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateRegexMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateRegexMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateRegexMatchSetError>`](crate::error::CreateRegexMatchSetError)
    pub fn create_regex_match_set(&self) -> crate::client::fluent_builders::CreateRegexMatchSet {
        crate::client::fluent_builders::CreateRegexMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRegexPatternSet`](crate::client::fluent_builders::CreateRegexPatternSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateRegexPatternSet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateRegexPatternSet::set_name): <p>A friendly name or description of the <code>RegexPatternSet</code>. You can't change <code>Name</code> after you create a <code>RegexPatternSet</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateRegexPatternSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateRegexPatternSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`CreateRegexPatternSetOutput`](crate::output::CreateRegexPatternSetOutput) with field(s):
    ///   - [`regex_pattern_set(Option<RegexPatternSet>)`](crate::output::CreateRegexPatternSetOutput::regex_pattern_set): <p>A <code>RegexPatternSet</code> that contains no objects.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateRegexPatternSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateRegexPatternSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateRegexPatternSetError>`](crate::error::CreateRegexPatternSetError)
    pub fn create_regex_pattern_set(
        &self,
    ) -> crate::client::fluent_builders::CreateRegexPatternSet {
        crate::client::fluent_builders::CreateRegexPatternSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRule`](crate::client::fluent_builders::CreateRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateRule::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateRule::set_name): <p>A friendly name or description of the <code>Rule</code>. You can't change the name of a <code>Rule</code> after you create it.</p>
    ///   - [`metric_name(impl Into<String>)`](crate::client::fluent_builders::CreateRule::metric_name) / [`set_metric_name(Option<String>)`](crate::client::fluent_builders::CreateRule::set_metric_name): <p>A friendly name or description for the metrics for this <code>Rule</code>. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the <code>Rule</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateRule::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateRule::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateRule::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateRule::set_tags): <p></p>
    /// - On success, responds with [`CreateRuleOutput`](crate::output::CreateRuleOutput) with field(s):
    ///   - [`rule(Option<Rule>)`](crate::output::CreateRuleOutput::rule): <p>The <code>Rule</code> returned in the <code>CreateRule</code> response.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateRuleOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateRule</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateRuleError>`](crate::error::CreateRuleError)
    pub fn create_rule(&self) -> crate::client::fluent_builders::CreateRule {
        crate::client::fluent_builders::CreateRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRuleGroup`](crate::client::fluent_builders::CreateRuleGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateRuleGroup::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateRuleGroup::set_name): <p>A friendly name or description of the <code>RuleGroup</code>. You can't change <code>Name</code> after you create a <code>RuleGroup</code>.</p>
    ///   - [`metric_name(impl Into<String>)`](crate::client::fluent_builders::CreateRuleGroup::metric_name) / [`set_metric_name(Option<String>)`](crate::client::fluent_builders::CreateRuleGroup::set_metric_name): <p>A friendly name or description for the metrics for this <code>RuleGroup</code>. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the <code>RuleGroup</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateRuleGroup::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateRuleGroup::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateRuleGroup::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateRuleGroup::set_tags): <p></p>
    /// - On success, responds with [`CreateRuleGroupOutput`](crate::output::CreateRuleGroupOutput) with field(s):
    ///   - [`rule_group(Option<RuleGroup>)`](crate::output::CreateRuleGroupOutput::rule_group): <p>An empty <code>RuleGroup</code>.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateRuleGroupOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateRuleGroup</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateRuleGroupError>`](crate::error::CreateRuleGroupError)
    pub fn create_rule_group(&self) -> crate::client::fluent_builders::CreateRuleGroup {
        crate::client::fluent_builders::CreateRuleGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateSizeConstraintSet`](crate::client::fluent_builders::CreateSizeConstraintSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateSizeConstraintSet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateSizeConstraintSet::set_name): <p>A friendly name or description of the <code>SizeConstraintSet</code>. You can't change <code>Name</code> after you create a <code>SizeConstraintSet</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateSizeConstraintSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateSizeConstraintSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`CreateSizeConstraintSetOutput`](crate::output::CreateSizeConstraintSetOutput) with field(s):
    ///   - [`size_constraint_set(Option<SizeConstraintSet>)`](crate::output::CreateSizeConstraintSetOutput::size_constraint_set): <p>A <code>SizeConstraintSet</code> that contains no <code>SizeConstraint</code> objects.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateSizeConstraintSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateSizeConstraintSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateSizeConstraintSetError>`](crate::error::CreateSizeConstraintSetError)
    pub fn create_size_constraint_set(
        &self,
    ) -> crate::client::fluent_builders::CreateSizeConstraintSet {
        crate::client::fluent_builders::CreateSizeConstraintSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateSqlInjectionMatchSet`](crate::client::fluent_builders::CreateSqlInjectionMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateSqlInjectionMatchSet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateSqlInjectionMatchSet::set_name): <p>A friendly name or description for the <code>SqlInjectionMatchSet</code> that you're creating. You can't change <code>Name</code> after you create the <code>SqlInjectionMatchSet</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateSqlInjectionMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateSqlInjectionMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`CreateSqlInjectionMatchSetOutput`](crate::output::CreateSqlInjectionMatchSetOutput) with field(s):
    ///   - [`sql_injection_match_set(Option<SqlInjectionMatchSet>)`](crate::output::CreateSqlInjectionMatchSetOutput::sql_injection_match_set): <p>A <code>SqlInjectionMatchSet</code>.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateSqlInjectionMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateSqlInjectionMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateSqlInjectionMatchSetError>`](crate::error::CreateSqlInjectionMatchSetError)
    pub fn create_sql_injection_match_set(
        &self,
    ) -> crate::client::fluent_builders::CreateSqlInjectionMatchSet {
        crate::client::fluent_builders::CreateSqlInjectionMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWebACL`](crate::client::fluent_builders::CreateWebACL) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateWebACL::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateWebACL::set_name): <p>A friendly name or description of the <code>WebACL</code>. You can't change <code>Name</code> after you create the <code>WebACL</code>.</p>
    ///   - [`metric_name(impl Into<String>)`](crate::client::fluent_builders::CreateWebACL::metric_name) / [`set_metric_name(Option<String>)`](crate::client::fluent_builders::CreateWebACL::set_metric_name): <p>A friendly name or description for the metrics for this <code>WebACL</code>.The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change <code>MetricName</code> after you create the <code>WebACL</code>.</p>
    ///   - [`default_action(WafAction)`](crate::client::fluent_builders::CreateWebACL::default_action) / [`set_default_action(Option<WafAction>)`](crate::client::fluent_builders::CreateWebACL::set_default_action): <p>The action that you want AWS WAF to take when a request doesn't match the criteria specified in any of the <code>Rule</code> objects that are associated with the <code>WebACL</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateWebACL::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateWebACL::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateWebACL::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateWebACL::set_tags): <p></p>
    /// - On success, responds with [`CreateWebAclOutput`](crate::output::CreateWebAclOutput) with field(s):
    ///   - [`web_acl(Option<WebAcl>)`](crate::output::CreateWebAclOutput::web_acl): <p>The <code>WebACL</code> returned in the <code>CreateWebACL</code> response.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateWebAclOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateWebACL</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateWebACLError>`](crate::error::CreateWebACLError)
    pub fn create_web_acl(&self) -> crate::client::fluent_builders::CreateWebACL {
        crate::client::fluent_builders::CreateWebACL::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWebACLMigrationStack`](crate::client::fluent_builders::CreateWebACLMigrationStack) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`web_acl_id(impl Into<String>)`](crate::client::fluent_builders::CreateWebACLMigrationStack::web_acl_id) / [`set_web_acl_id(Option<String>)`](crate::client::fluent_builders::CreateWebACLMigrationStack::set_web_acl_id): <p>The UUID of the WAF Classic web ACL that you want to migrate to WAF v2.</p>
    ///   - [`s3_bucket_name(impl Into<String>)`](crate::client::fluent_builders::CreateWebACLMigrationStack::s3_bucket_name) / [`set_s3_bucket_name(Option<String>)`](crate::client::fluent_builders::CreateWebACLMigrationStack::set_s3_bucket_name): <p>The name of the Amazon S3 bucket to store the CloudFormation template in. The S3 bucket must be configured as follows for the migration: </p>  <ul>   <li> <p>The bucket name must start with <code>aws-waf-migration-</code>. For example, <code>aws-waf-migration-my-web-acl</code>.</p> </li>   <li> <p>The bucket must be in the Region where you are deploying the template. For example, for a web ACL in us-west-2, you must use an Amazon S3 bucket in us-west-2 and you must deploy the template stack to us-west-2. </p> </li>   <li> <p>The bucket policies must permit the migration process to write data. For listings of the bucket policies, see the Examples section. </p> </li>  </ul>
    ///   - [`ignore_unsupported_type(bool)`](crate::client::fluent_builders::CreateWebACLMigrationStack::ignore_unsupported_type) / [`set_ignore_unsupported_type(Option<bool>)`](crate::client::fluent_builders::CreateWebACLMigrationStack::set_ignore_unsupported_type): <p>Indicates whether to exclude entities that can't be migrated or to stop the migration. Set this to true to ignore unsupported entities in the web ACL during the migration. Otherwise, if AWS WAF encounters unsupported entities, it stops the process and throws an exception. </p>
    /// - On success, responds with [`CreateWebAclMigrationStackOutput`](crate::output::CreateWebAclMigrationStackOutput) with field(s):
    ///   - [`s3_object_url(Option<String>)`](crate::output::CreateWebAclMigrationStackOutput::s3_object_url): <p>The URL of the template created in Amazon S3. </p>
    /// - On failure, responds with [`SdkError<CreateWebACLMigrationStackError>`](crate::error::CreateWebACLMigrationStackError)
    pub fn create_web_acl_migration_stack(
        &self,
    ) -> crate::client::fluent_builders::CreateWebACLMigrationStack {
        crate::client::fluent_builders::CreateWebACLMigrationStack::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateXssMatchSet`](crate::client::fluent_builders::CreateXssMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateXssMatchSet::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateXssMatchSet::set_name): <p>A friendly name or description for the <code>XssMatchSet</code> that you're creating. You can't change <code>Name</code> after you create the <code>XssMatchSet</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::CreateXssMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::CreateXssMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`CreateXssMatchSetOutput`](crate::output::CreateXssMatchSetOutput) with field(s):
    ///   - [`xss_match_set(Option<XssMatchSet>)`](crate::output::CreateXssMatchSetOutput::xss_match_set): <p>An <code>XssMatchSet</code>.</p>
    ///   - [`change_token(Option<String>)`](crate::output::CreateXssMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>CreateXssMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<CreateXssMatchSetError>`](crate::error::CreateXssMatchSetError)
    pub fn create_xss_match_set(&self) -> crate::client::fluent_builders::CreateXssMatchSet {
        crate::client::fluent_builders::CreateXssMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteByteMatchSet`](crate::client::fluent_builders::DeleteByteMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`byte_match_set_id(impl Into<String>)`](crate::client::fluent_builders::DeleteByteMatchSet::byte_match_set_id) / [`set_byte_match_set_id(Option<String>)`](crate::client::fluent_builders::DeleteByteMatchSet::set_byte_match_set_id): <p>The <code>ByteMatchSetId</code> of the <code>ByteMatchSet</code> that you want to delete. <code>ByteMatchSetId</code> is returned by <code>CreateByteMatchSet</code> and by <code>ListByteMatchSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteByteMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteByteMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteByteMatchSetOutput`](crate::output::DeleteByteMatchSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteByteMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteByteMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteByteMatchSetError>`](crate::error::DeleteByteMatchSetError)
    pub fn delete_byte_match_set(&self) -> crate::client::fluent_builders::DeleteByteMatchSet {
        crate::client::fluent_builders::DeleteByteMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteGeoMatchSet`](crate::client::fluent_builders::DeleteGeoMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`geo_match_set_id(impl Into<String>)`](crate::client::fluent_builders::DeleteGeoMatchSet::geo_match_set_id) / [`set_geo_match_set_id(Option<String>)`](crate::client::fluent_builders::DeleteGeoMatchSet::set_geo_match_set_id): <p>The <code>GeoMatchSetID</code> of the <code>GeoMatchSet</code> that you want to delete. <code>GeoMatchSetId</code> is returned by <code>CreateGeoMatchSet</code> and by <code>ListGeoMatchSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteGeoMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteGeoMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteGeoMatchSetOutput`](crate::output::DeleteGeoMatchSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteGeoMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteGeoMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteGeoMatchSetError>`](crate::error::DeleteGeoMatchSetError)
    pub fn delete_geo_match_set(&self) -> crate::client::fluent_builders::DeleteGeoMatchSet {
        crate::client::fluent_builders::DeleteGeoMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteIPSet`](crate::client::fluent_builders::DeleteIPSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ip_set_id(impl Into<String>)`](crate::client::fluent_builders::DeleteIPSet::ip_set_id) / [`set_ip_set_id(Option<String>)`](crate::client::fluent_builders::DeleteIPSet::set_ip_set_id): <p>The <code>IPSetId</code> of the <code>IPSet</code> that you want to delete. <code>IPSetId</code> is returned by <code>CreateIPSet</code> and by <code>ListIPSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteIPSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteIPSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteIpSetOutput`](crate::output::DeleteIpSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteIpSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteIPSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteIPSetError>`](crate::error::DeleteIPSetError)
    pub fn delete_ip_set(&self) -> crate::client::fluent_builders::DeleteIPSet {
        crate::client::fluent_builders::DeleteIPSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLoggingConfiguration`](crate::client::fluent_builders::DeleteLoggingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteLoggingConfiguration::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::DeleteLoggingConfiguration::set_resource_arn): <p>The Amazon Resource Name (ARN) of the web ACL from which you want to delete the <code>LoggingConfiguration</code>.</p>
    /// - On success, responds with [`DeleteLoggingConfigurationOutput`](crate::output::DeleteLoggingConfigurationOutput)

    /// - On failure, responds with [`SdkError<DeleteLoggingConfigurationError>`](crate::error::DeleteLoggingConfigurationError)
    pub fn delete_logging_configuration(
        &self,
    ) -> crate::client::fluent_builders::DeleteLoggingConfiguration {
        crate::client::fluent_builders::DeleteLoggingConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePermissionPolicy`](crate::client::fluent_builders::DeletePermissionPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::DeletePermissionPolicy::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::DeletePermissionPolicy::set_resource_arn): <p>The Amazon Resource Name (ARN) of the RuleGroup from which you want to delete the policy.</p>  <p>The user making the request must be the owner of the RuleGroup.</p>
    /// - On success, responds with [`DeletePermissionPolicyOutput`](crate::output::DeletePermissionPolicyOutput)

    /// - On failure, responds with [`SdkError<DeletePermissionPolicyError>`](crate::error::DeletePermissionPolicyError)
    pub fn delete_permission_policy(
        &self,
    ) -> crate::client::fluent_builders::DeletePermissionPolicy {
        crate::client::fluent_builders::DeletePermissionPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRateBasedRule`](crate::client::fluent_builders::DeleteRateBasedRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_id(impl Into<String>)`](crate::client::fluent_builders::DeleteRateBasedRule::rule_id) / [`set_rule_id(Option<String>)`](crate::client::fluent_builders::DeleteRateBasedRule::set_rule_id): <p>The <code>RuleId</code> of the <code>RateBasedRule</code> that you want to delete. <code>RuleId</code> is returned by <code>CreateRateBasedRule</code> and by <code>ListRateBasedRules</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteRateBasedRule::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteRateBasedRule::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteRateBasedRuleOutput`](crate::output::DeleteRateBasedRuleOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteRateBasedRuleOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteRateBasedRule</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteRateBasedRuleError>`](crate::error::DeleteRateBasedRuleError)
    pub fn delete_rate_based_rule(&self) -> crate::client::fluent_builders::DeleteRateBasedRule {
        crate::client::fluent_builders::DeleteRateBasedRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRegexMatchSet`](crate::client::fluent_builders::DeleteRegexMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`regex_match_set_id(impl Into<String>)`](crate::client::fluent_builders::DeleteRegexMatchSet::regex_match_set_id) / [`set_regex_match_set_id(Option<String>)`](crate::client::fluent_builders::DeleteRegexMatchSet::set_regex_match_set_id): <p>The <code>RegexMatchSetId</code> of the <code>RegexMatchSet</code> that you want to delete. <code>RegexMatchSetId</code> is returned by <code>CreateRegexMatchSet</code> and by <code>ListRegexMatchSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteRegexMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteRegexMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteRegexMatchSetOutput`](crate::output::DeleteRegexMatchSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteRegexMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteRegexMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteRegexMatchSetError>`](crate::error::DeleteRegexMatchSetError)
    pub fn delete_regex_match_set(&self) -> crate::client::fluent_builders::DeleteRegexMatchSet {
        crate::client::fluent_builders::DeleteRegexMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRegexPatternSet`](crate::client::fluent_builders::DeleteRegexPatternSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`regex_pattern_set_id(impl Into<String>)`](crate::client::fluent_builders::DeleteRegexPatternSet::regex_pattern_set_id) / [`set_regex_pattern_set_id(Option<String>)`](crate::client::fluent_builders::DeleteRegexPatternSet::set_regex_pattern_set_id): <p>The <code>RegexPatternSetId</code> of the <code>RegexPatternSet</code> that you want to delete. <code>RegexPatternSetId</code> is returned by <code>CreateRegexPatternSet</code> and by <code>ListRegexPatternSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteRegexPatternSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteRegexPatternSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteRegexPatternSetOutput`](crate::output::DeleteRegexPatternSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteRegexPatternSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteRegexPatternSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteRegexPatternSetError>`](crate::error::DeleteRegexPatternSetError)
    pub fn delete_regex_pattern_set(
        &self,
    ) -> crate::client::fluent_builders::DeleteRegexPatternSet {
        crate::client::fluent_builders::DeleteRegexPatternSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRule`](crate::client::fluent_builders::DeleteRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_id(impl Into<String>)`](crate::client::fluent_builders::DeleteRule::rule_id) / [`set_rule_id(Option<String>)`](crate::client::fluent_builders::DeleteRule::set_rule_id): <p>The <code>RuleId</code> of the <code>Rule</code> that you want to delete. <code>RuleId</code> is returned by <code>CreateRule</code> and by <code>ListRules</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteRule::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteRule::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteRuleOutput`](crate::output::DeleteRuleOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteRuleOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteRule</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteRuleError>`](crate::error::DeleteRuleError)
    pub fn delete_rule(&self) -> crate::client::fluent_builders::DeleteRule {
        crate::client::fluent_builders::DeleteRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRuleGroup`](crate::client::fluent_builders::DeleteRuleGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_group_id(impl Into<String>)`](crate::client::fluent_builders::DeleteRuleGroup::rule_group_id) / [`set_rule_group_id(Option<String>)`](crate::client::fluent_builders::DeleteRuleGroup::set_rule_group_id): <p>The <code>RuleGroupId</code> of the <code>RuleGroup</code> that you want to delete. <code>RuleGroupId</code> is returned by <code>CreateRuleGroup</code> and by <code>ListRuleGroups</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteRuleGroup::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteRuleGroup::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteRuleGroupOutput`](crate::output::DeleteRuleGroupOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteRuleGroupOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteRuleGroup</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteRuleGroupError>`](crate::error::DeleteRuleGroupError)
    pub fn delete_rule_group(&self) -> crate::client::fluent_builders::DeleteRuleGroup {
        crate::client::fluent_builders::DeleteRuleGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSizeConstraintSet`](crate::client::fluent_builders::DeleteSizeConstraintSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`size_constraint_set_id(impl Into<String>)`](crate::client::fluent_builders::DeleteSizeConstraintSet::size_constraint_set_id) / [`set_size_constraint_set_id(Option<String>)`](crate::client::fluent_builders::DeleteSizeConstraintSet::set_size_constraint_set_id): <p>The <code>SizeConstraintSetId</code> of the <code>SizeConstraintSet</code> that you want to delete. <code>SizeConstraintSetId</code> is returned by <code>CreateSizeConstraintSet</code> and by <code>ListSizeConstraintSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteSizeConstraintSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteSizeConstraintSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteSizeConstraintSetOutput`](crate::output::DeleteSizeConstraintSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteSizeConstraintSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteSizeConstraintSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteSizeConstraintSetError>`](crate::error::DeleteSizeConstraintSetError)
    pub fn delete_size_constraint_set(
        &self,
    ) -> crate::client::fluent_builders::DeleteSizeConstraintSet {
        crate::client::fluent_builders::DeleteSizeConstraintSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSqlInjectionMatchSet`](crate::client::fluent_builders::DeleteSqlInjectionMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`sql_injection_match_set_id(impl Into<String>)`](crate::client::fluent_builders::DeleteSqlInjectionMatchSet::sql_injection_match_set_id) / [`set_sql_injection_match_set_id(Option<String>)`](crate::client::fluent_builders::DeleteSqlInjectionMatchSet::set_sql_injection_match_set_id): <p>The <code>SqlInjectionMatchSetId</code> of the <code>SqlInjectionMatchSet</code> that you want to delete. <code>SqlInjectionMatchSetId</code> is returned by <code>CreateSqlInjectionMatchSet</code> and by <code>ListSqlInjectionMatchSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteSqlInjectionMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteSqlInjectionMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteSqlInjectionMatchSetOutput`](crate::output::DeleteSqlInjectionMatchSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteSqlInjectionMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteSqlInjectionMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteSqlInjectionMatchSetError>`](crate::error::DeleteSqlInjectionMatchSetError)
    pub fn delete_sql_injection_match_set(
        &self,
    ) -> crate::client::fluent_builders::DeleteSqlInjectionMatchSet {
        crate::client::fluent_builders::DeleteSqlInjectionMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteWebACL`](crate::client::fluent_builders::DeleteWebACL) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`web_acl_id(impl Into<String>)`](crate::client::fluent_builders::DeleteWebACL::web_acl_id) / [`set_web_acl_id(Option<String>)`](crate::client::fluent_builders::DeleteWebACL::set_web_acl_id): <p>The <code>WebACLId</code> of the <code>WebACL</code> that you want to delete. <code>WebACLId</code> is returned by <code>CreateWebACL</code> and by <code>ListWebACLs</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteWebACL::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteWebACL::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteWebAclOutput`](crate::output::DeleteWebAclOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteWebAclOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteWebACL</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteWebACLError>`](crate::error::DeleteWebACLError)
    pub fn delete_web_acl(&self) -> crate::client::fluent_builders::DeleteWebACL {
        crate::client::fluent_builders::DeleteWebACL::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteXssMatchSet`](crate::client::fluent_builders::DeleteXssMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`xss_match_set_id(impl Into<String>)`](crate::client::fluent_builders::DeleteXssMatchSet::xss_match_set_id) / [`set_xss_match_set_id(Option<String>)`](crate::client::fluent_builders::DeleteXssMatchSet::set_xss_match_set_id): <p>The <code>XssMatchSetId</code> of the <code>XssMatchSet</code> that you want to delete. <code>XssMatchSetId</code> is returned by <code>CreateXssMatchSet</code> and by <code>ListXssMatchSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::DeleteXssMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::DeleteXssMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`DeleteXssMatchSetOutput`](crate::output::DeleteXssMatchSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::DeleteXssMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>DeleteXssMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<DeleteXssMatchSetError>`](crate::error::DeleteXssMatchSetError)
    pub fn delete_xss_match_set(&self) -> crate::client::fluent_builders::DeleteXssMatchSet {
        crate::client::fluent_builders::DeleteXssMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetByteMatchSet`](crate::client::fluent_builders::GetByteMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`byte_match_set_id(impl Into<String>)`](crate::client::fluent_builders::GetByteMatchSet::byte_match_set_id) / [`set_byte_match_set_id(Option<String>)`](crate::client::fluent_builders::GetByteMatchSet::set_byte_match_set_id): <p>The <code>ByteMatchSetId</code> of the <code>ByteMatchSet</code> that you want to get. <code>ByteMatchSetId</code> is returned by <code>CreateByteMatchSet</code> and by <code>ListByteMatchSets</code>.</p>
    /// - On success, responds with [`GetByteMatchSetOutput`](crate::output::GetByteMatchSetOutput) with field(s):
    ///   - [`byte_match_set(Option<ByteMatchSet>)`](crate::output::GetByteMatchSetOutput::byte_match_set): <p>Information about the <code>ByteMatchSet</code> that you specified in the <code>GetByteMatchSet</code> request. For more information, see the following topics:</p>  <ul>   <li> <p> <code>ByteMatchSet</code>: Contains <code>ByteMatchSetId</code>, <code>ByteMatchTuples</code>, and <code>Name</code> </p> </li>   <li> <p> <code>ByteMatchTuples</code>: Contains an array of <code>ByteMatchTuple</code> objects. Each <code>ByteMatchTuple</code> object contains <code>FieldToMatch</code>, <code>PositionalConstraint</code>, <code>TargetString</code>, and <code>TextTransformation</code> </p> </li>   <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<GetByteMatchSetError>`](crate::error::GetByteMatchSetError)
    pub fn get_byte_match_set(&self) -> crate::client::fluent_builders::GetByteMatchSet {
        crate::client::fluent_builders::GetByteMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetChangeToken`](crate::client::fluent_builders::GetChangeToken) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::GetChangeToken::send) it.

    /// - On success, responds with [`GetChangeTokenOutput`](crate::output::GetChangeTokenOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::GetChangeTokenOutput::change_token): <p>The <code>ChangeToken</code> that you used in the request. Use this value in a <code>GetChangeTokenStatus</code> request to get the current status of the request. </p>
    /// - On failure, responds with [`SdkError<GetChangeTokenError>`](crate::error::GetChangeTokenError)
    pub fn get_change_token(&self) -> crate::client::fluent_builders::GetChangeToken {
        crate::client::fluent_builders::GetChangeToken::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetChangeTokenStatus`](crate::client::fluent_builders::GetChangeTokenStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::GetChangeTokenStatus::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::GetChangeTokenStatus::set_change_token): <p>The change token for which you want to get the status. This change token was previously returned in the <code>GetChangeToken</code> response.</p>
    /// - On success, responds with [`GetChangeTokenStatusOutput`](crate::output::GetChangeTokenStatusOutput) with field(s):
    ///   - [`change_token_status(Option<ChangeTokenStatus>)`](crate::output::GetChangeTokenStatusOutput::change_token_status): <p>The status of the change token.</p>
    /// - On failure, responds with [`SdkError<GetChangeTokenStatusError>`](crate::error::GetChangeTokenStatusError)
    pub fn get_change_token_status(&self) -> crate::client::fluent_builders::GetChangeTokenStatus {
        crate::client::fluent_builders::GetChangeTokenStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetGeoMatchSet`](crate::client::fluent_builders::GetGeoMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`geo_match_set_id(impl Into<String>)`](crate::client::fluent_builders::GetGeoMatchSet::geo_match_set_id) / [`set_geo_match_set_id(Option<String>)`](crate::client::fluent_builders::GetGeoMatchSet::set_geo_match_set_id): <p>The <code>GeoMatchSetId</code> of the <code>GeoMatchSet</code> that you want to get. <code>GeoMatchSetId</code> is returned by <code>CreateGeoMatchSet</code> and by <code>ListGeoMatchSets</code>.</p>
    /// - On success, responds with [`GetGeoMatchSetOutput`](crate::output::GetGeoMatchSetOutput) with field(s):
    ///   - [`geo_match_set(Option<GeoMatchSet>)`](crate::output::GetGeoMatchSetOutput::geo_match_set): <p>Information about the <code>GeoMatchSet</code> that you specified in the <code>GetGeoMatchSet</code> request. This includes the <code>Type</code>, which for a <code>GeoMatchContraint</code> is always <code>Country</code>, as well as the <code>Value</code>, which is the identifier for a specific country.</p>
    /// - On failure, responds with [`SdkError<GetGeoMatchSetError>`](crate::error::GetGeoMatchSetError)
    pub fn get_geo_match_set(&self) -> crate::client::fluent_builders::GetGeoMatchSet {
        crate::client::fluent_builders::GetGeoMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetIPSet`](crate::client::fluent_builders::GetIPSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ip_set_id(impl Into<String>)`](crate::client::fluent_builders::GetIPSet::ip_set_id) / [`set_ip_set_id(Option<String>)`](crate::client::fluent_builders::GetIPSet::set_ip_set_id): <p>The <code>IPSetId</code> of the <code>IPSet</code> that you want to get. <code>IPSetId</code> is returned by <code>CreateIPSet</code> and by <code>ListIPSets</code>.</p>
    /// - On success, responds with [`GetIpSetOutput`](crate::output::GetIpSetOutput) with field(s):
    ///   - [`ip_set(Option<IpSet>)`](crate::output::GetIpSetOutput::ip_set): <p>Information about the <code>IPSet</code> that you specified in the <code>GetIPSet</code> request. For more information, see the following topics:</p>  <ul>   <li> <p> <code>IPSet</code>: Contains <code>IPSetDescriptors</code>, <code>IPSetId</code>, and <code>Name</code> </p> </li>   <li> <p> <code>IPSetDescriptors</code>: Contains an array of <code>IPSetDescriptor</code> objects. Each <code>IPSetDescriptor</code> object contains <code>Type</code> and <code>Value</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<GetIPSetError>`](crate::error::GetIPSetError)
    pub fn get_ip_set(&self) -> crate::client::fluent_builders::GetIPSet {
        crate::client::fluent_builders::GetIPSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLoggingConfiguration`](crate::client::fluent_builders::GetLoggingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::GetLoggingConfiguration::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::GetLoggingConfiguration::set_resource_arn): <p>The Amazon Resource Name (ARN) of the web ACL for which you want to get the <code>LoggingConfiguration</code>.</p>
    /// - On success, responds with [`GetLoggingConfigurationOutput`](crate::output::GetLoggingConfigurationOutput) with field(s):
    ///   - [`logging_configuration(Option<LoggingConfiguration>)`](crate::output::GetLoggingConfigurationOutput::logging_configuration): <p>The <code>LoggingConfiguration</code> for the specified web ACL.</p>
    /// - On failure, responds with [`SdkError<GetLoggingConfigurationError>`](crate::error::GetLoggingConfigurationError)
    pub fn get_logging_configuration(
        &self,
    ) -> crate::client::fluent_builders::GetLoggingConfiguration {
        crate::client::fluent_builders::GetLoggingConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPermissionPolicy`](crate::client::fluent_builders::GetPermissionPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::GetPermissionPolicy::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::GetPermissionPolicy::set_resource_arn): <p>The Amazon Resource Name (ARN) of the RuleGroup for which you want to get the policy.</p>
    /// - On success, responds with [`GetPermissionPolicyOutput`](crate::output::GetPermissionPolicyOutput) with field(s):
    ///   - [`policy(Option<String>)`](crate::output::GetPermissionPolicyOutput::policy): <p>The IAM policy attached to the specified RuleGroup.</p>
    /// - On failure, responds with [`SdkError<GetPermissionPolicyError>`](crate::error::GetPermissionPolicyError)
    pub fn get_permission_policy(&self) -> crate::client::fluent_builders::GetPermissionPolicy {
        crate::client::fluent_builders::GetPermissionPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRateBasedRule`](crate::client::fluent_builders::GetRateBasedRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_id(impl Into<String>)`](crate::client::fluent_builders::GetRateBasedRule::rule_id) / [`set_rule_id(Option<String>)`](crate::client::fluent_builders::GetRateBasedRule::set_rule_id): <p>The <code>RuleId</code> of the <code>RateBasedRule</code> that you want to get. <code>RuleId</code> is returned by <code>CreateRateBasedRule</code> and by <code>ListRateBasedRules</code>.</p>
    /// - On success, responds with [`GetRateBasedRuleOutput`](crate::output::GetRateBasedRuleOutput) with field(s):
    ///   - [`rule(Option<RateBasedRule>)`](crate::output::GetRateBasedRuleOutput::rule): <p>Information about the <code>RateBasedRule</code> that you specified in the <code>GetRateBasedRule</code> request.</p>
    /// - On failure, responds with [`SdkError<GetRateBasedRuleError>`](crate::error::GetRateBasedRuleError)
    pub fn get_rate_based_rule(&self) -> crate::client::fluent_builders::GetRateBasedRule {
        crate::client::fluent_builders::GetRateBasedRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRateBasedRuleManagedKeys`](crate::client::fluent_builders::GetRateBasedRuleManagedKeys) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_id(impl Into<String>)`](crate::client::fluent_builders::GetRateBasedRuleManagedKeys::rule_id) / [`set_rule_id(Option<String>)`](crate::client::fluent_builders::GetRateBasedRuleManagedKeys::set_rule_id): <p>The <code>RuleId</code> of the <code>RateBasedRule</code> for which you want to get a list of <code>ManagedKeys</code>. <code>RuleId</code> is returned by <code>CreateRateBasedRule</code> and by <code>ListRateBasedRules</code>.</p>
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::GetRateBasedRuleManagedKeys::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::GetRateBasedRuleManagedKeys::set_next_marker): <p>A null value and not currently used. Do not include this in your request.</p>
    /// - On success, responds with [`GetRateBasedRuleManagedKeysOutput`](crate::output::GetRateBasedRuleManagedKeysOutput) with field(s):
    ///   - [`managed_keys(Option<Vec<String>>)`](crate::output::GetRateBasedRuleManagedKeysOutput::managed_keys): <p>An array of IP addresses that currently are blocked by the specified <code>RateBasedRule</code>. </p>
    ///   - [`next_marker(Option<String>)`](crate::output::GetRateBasedRuleManagedKeysOutput::next_marker): <p>A null value and not currently used.</p>
    /// - On failure, responds with [`SdkError<GetRateBasedRuleManagedKeysError>`](crate::error::GetRateBasedRuleManagedKeysError)
    pub fn get_rate_based_rule_managed_keys(
        &self,
    ) -> crate::client::fluent_builders::GetRateBasedRuleManagedKeys {
        crate::client::fluent_builders::GetRateBasedRuleManagedKeys::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRegexMatchSet`](crate::client::fluent_builders::GetRegexMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`regex_match_set_id(impl Into<String>)`](crate::client::fluent_builders::GetRegexMatchSet::regex_match_set_id) / [`set_regex_match_set_id(Option<String>)`](crate::client::fluent_builders::GetRegexMatchSet::set_regex_match_set_id): <p>The <code>RegexMatchSetId</code> of the <code>RegexMatchSet</code> that you want to get. <code>RegexMatchSetId</code> is returned by <code>CreateRegexMatchSet</code> and by <code>ListRegexMatchSets</code>.</p>
    /// - On success, responds with [`GetRegexMatchSetOutput`](crate::output::GetRegexMatchSetOutput) with field(s):
    ///   - [`regex_match_set(Option<RegexMatchSet>)`](crate::output::GetRegexMatchSetOutput::regex_match_set): <p>Information about the <code>RegexMatchSet</code> that you specified in the <code>GetRegexMatchSet</code> request. For more information, see <code>RegexMatchTuple</code>.</p>
    /// - On failure, responds with [`SdkError<GetRegexMatchSetError>`](crate::error::GetRegexMatchSetError)
    pub fn get_regex_match_set(&self) -> crate::client::fluent_builders::GetRegexMatchSet {
        crate::client::fluent_builders::GetRegexMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRegexPatternSet`](crate::client::fluent_builders::GetRegexPatternSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`regex_pattern_set_id(impl Into<String>)`](crate::client::fluent_builders::GetRegexPatternSet::regex_pattern_set_id) / [`set_regex_pattern_set_id(Option<String>)`](crate::client::fluent_builders::GetRegexPatternSet::set_regex_pattern_set_id): <p>The <code>RegexPatternSetId</code> of the <code>RegexPatternSet</code> that you want to get. <code>RegexPatternSetId</code> is returned by <code>CreateRegexPatternSet</code> and by <code>ListRegexPatternSets</code>.</p>
    /// - On success, responds with [`GetRegexPatternSetOutput`](crate::output::GetRegexPatternSetOutput) with field(s):
    ///   - [`regex_pattern_set(Option<RegexPatternSet>)`](crate::output::GetRegexPatternSetOutput::regex_pattern_set): <p>Information about the <code>RegexPatternSet</code> that you specified in the <code>GetRegexPatternSet</code> request, including the identifier of the pattern set and the regular expression patterns you want AWS WAF to search for. </p>
    /// - On failure, responds with [`SdkError<GetRegexPatternSetError>`](crate::error::GetRegexPatternSetError)
    pub fn get_regex_pattern_set(&self) -> crate::client::fluent_builders::GetRegexPatternSet {
        crate::client::fluent_builders::GetRegexPatternSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRule`](crate::client::fluent_builders::GetRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_id(impl Into<String>)`](crate::client::fluent_builders::GetRule::rule_id) / [`set_rule_id(Option<String>)`](crate::client::fluent_builders::GetRule::set_rule_id): <p>The <code>RuleId</code> of the <code>Rule</code> that you want to get. <code>RuleId</code> is returned by <code>CreateRule</code> and by <code>ListRules</code>.</p>
    /// - On success, responds with [`GetRuleOutput`](crate::output::GetRuleOutput) with field(s):
    ///   - [`rule(Option<Rule>)`](crate::output::GetRuleOutput::rule): <p>Information about the <code>Rule</code> that you specified in the <code>GetRule</code> request. For more information, see the following topics:</p>  <ul>   <li> <p> <code>Rule</code>: Contains <code>MetricName</code>, <code>Name</code>, an array of <code>Predicate</code> objects, and <code>RuleId</code> </p> </li>   <li> <p> <code>Predicate</code>: Each <code>Predicate</code> object contains <code>DataId</code>, <code>Negated</code>, and <code>Type</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<GetRuleError>`](crate::error::GetRuleError)
    pub fn get_rule(&self) -> crate::client::fluent_builders::GetRule {
        crate::client::fluent_builders::GetRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRuleGroup`](crate::client::fluent_builders::GetRuleGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_group_id(impl Into<String>)`](crate::client::fluent_builders::GetRuleGroup::rule_group_id) / [`set_rule_group_id(Option<String>)`](crate::client::fluent_builders::GetRuleGroup::set_rule_group_id): <p>The <code>RuleGroupId</code> of the <code>RuleGroup</code> that you want to get. <code>RuleGroupId</code> is returned by <code>CreateRuleGroup</code> and by <code>ListRuleGroups</code>.</p>
    /// - On success, responds with [`GetRuleGroupOutput`](crate::output::GetRuleGroupOutput) with field(s):
    ///   - [`rule_group(Option<RuleGroup>)`](crate::output::GetRuleGroupOutput::rule_group): <p>Information about the <code>RuleGroup</code> that you specified in the <code>GetRuleGroup</code> request. </p>
    /// - On failure, responds with [`SdkError<GetRuleGroupError>`](crate::error::GetRuleGroupError)
    pub fn get_rule_group(&self) -> crate::client::fluent_builders::GetRuleGroup {
        crate::client::fluent_builders::GetRuleGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSampledRequests`](crate::client::fluent_builders::GetSampledRequests) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`web_acl_id(impl Into<String>)`](crate::client::fluent_builders::GetSampledRequests::web_acl_id) / [`set_web_acl_id(Option<String>)`](crate::client::fluent_builders::GetSampledRequests::set_web_acl_id): <p>The <code>WebACLId</code> of the <code>WebACL</code> for which you want <code>GetSampledRequests</code> to return a sample of requests.</p>
    ///   - [`rule_id(impl Into<String>)`](crate::client::fluent_builders::GetSampledRequests::rule_id) / [`set_rule_id(Option<String>)`](crate::client::fluent_builders::GetSampledRequests::set_rule_id): <p> <code>RuleId</code> is one of three values:</p>  <ul>   <li> <p>The <code>RuleId</code> of the <code>Rule</code> or the <code>RuleGroupId</code> of the <code>RuleGroup</code> for which you want <code>GetSampledRequests</code> to return a sample of requests.</p> </li>   <li> <p> <code>Default_Action</code>, which causes <code>GetSampledRequests</code> to return a sample of the requests that didn't match any of the rules in the specified <code>WebACL</code>.</p> </li>  </ul>
    ///   - [`time_window(TimeWindow)`](crate::client::fluent_builders::GetSampledRequests::time_window) / [`set_time_window(Option<TimeWindow>)`](crate::client::fluent_builders::GetSampledRequests::set_time_window): <p>The start date and time and the end date and time of the range for which you want <code>GetSampledRequests</code> to return a sample of requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, <code>Z</code>. For example, <code>"2016-09-27T14:50Z"</code>. You can specify any time range in the previous three hours.</p>
    ///   - [`max_items(i64)`](crate::client::fluent_builders::GetSampledRequests::max_items) / [`set_max_items(i64)`](crate::client::fluent_builders::GetSampledRequests::set_max_items): <p>The number of requests that you want AWS WAF to return from among the first 5,000 requests that your AWS resource received during the time range. If your resource received fewer requests than the value of <code>MaxItems</code>, <code>GetSampledRequests</code> returns information about all of them. </p>
    /// - On success, responds with [`GetSampledRequestsOutput`](crate::output::GetSampledRequestsOutput) with field(s):
    ///   - [`sampled_requests(Option<Vec<SampledHttpRequest>>)`](crate::output::GetSampledRequestsOutput::sampled_requests): <p>A complex type that contains detailed information about each of the requests in the sample.</p>
    ///   - [`population_size(i64)`](crate::output::GetSampledRequestsOutput::population_size): <p>The total number of requests from which <code>GetSampledRequests</code> got a sample of <code>MaxItems</code> requests. If <code>PopulationSize</code> is less than <code>MaxItems</code>, the sample includes every request that your AWS resource received during the specified time range.</p>
    ///   - [`time_window(Option<TimeWindow>)`](crate::output::GetSampledRequestsOutput::time_window): <p>Usually, <code>TimeWindow</code> is the time range that you specified in the <code>GetSampledRequests</code> request. However, if your AWS resource received more than 5,000 requests during the time range that you specified in the request, <code>GetSampledRequests</code> returns the time range for the first 5,000 requests. Times are in Coordinated Universal Time (UTC) format.</p>
    /// - On failure, responds with [`SdkError<GetSampledRequestsError>`](crate::error::GetSampledRequestsError)
    pub fn get_sampled_requests(&self) -> crate::client::fluent_builders::GetSampledRequests {
        crate::client::fluent_builders::GetSampledRequests::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSizeConstraintSet`](crate::client::fluent_builders::GetSizeConstraintSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`size_constraint_set_id(impl Into<String>)`](crate::client::fluent_builders::GetSizeConstraintSet::size_constraint_set_id) / [`set_size_constraint_set_id(Option<String>)`](crate::client::fluent_builders::GetSizeConstraintSet::set_size_constraint_set_id): <p>The <code>SizeConstraintSetId</code> of the <code>SizeConstraintSet</code> that you want to get. <code>SizeConstraintSetId</code> is returned by <code>CreateSizeConstraintSet</code> and by <code>ListSizeConstraintSets</code>.</p>
    /// - On success, responds with [`GetSizeConstraintSetOutput`](crate::output::GetSizeConstraintSetOutput) with field(s):
    ///   - [`size_constraint_set(Option<SizeConstraintSet>)`](crate::output::GetSizeConstraintSetOutput::size_constraint_set): <p>Information about the <code>SizeConstraintSet</code> that you specified in the <code>GetSizeConstraintSet</code> request. For more information, see the following topics:</p>  <ul>   <li> <p> <code>SizeConstraintSet</code>: Contains <code>SizeConstraintSetId</code>, <code>SizeConstraints</code>, and <code>Name</code> </p> </li>   <li> <p> <code>SizeConstraints</code>: Contains an array of <code>SizeConstraint</code> objects. Each <code>SizeConstraint</code> object contains <code>FieldToMatch</code>, <code>TextTransformation</code>, <code>ComparisonOperator</code>, and <code>Size</code> </p> </li>   <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<GetSizeConstraintSetError>`](crate::error::GetSizeConstraintSetError)
    pub fn get_size_constraint_set(&self) -> crate::client::fluent_builders::GetSizeConstraintSet {
        crate::client::fluent_builders::GetSizeConstraintSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSqlInjectionMatchSet`](crate::client::fluent_builders::GetSqlInjectionMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`sql_injection_match_set_id(impl Into<String>)`](crate::client::fluent_builders::GetSqlInjectionMatchSet::sql_injection_match_set_id) / [`set_sql_injection_match_set_id(Option<String>)`](crate::client::fluent_builders::GetSqlInjectionMatchSet::set_sql_injection_match_set_id): <p>The <code>SqlInjectionMatchSetId</code> of the <code>SqlInjectionMatchSet</code> that you want to get. <code>SqlInjectionMatchSetId</code> is returned by <code>CreateSqlInjectionMatchSet</code> and by <code>ListSqlInjectionMatchSets</code>.</p>
    /// - On success, responds with [`GetSqlInjectionMatchSetOutput`](crate::output::GetSqlInjectionMatchSetOutput) with field(s):
    ///   - [`sql_injection_match_set(Option<SqlInjectionMatchSet>)`](crate::output::GetSqlInjectionMatchSetOutput::sql_injection_match_set): <p>Information about the <code>SqlInjectionMatchSet</code> that you specified in the <code>GetSqlInjectionMatchSet</code> request. For more information, see the following topics:</p>  <ul>   <li> <p> <code>SqlInjectionMatchSet</code>: Contains <code>Name</code>, <code>SqlInjectionMatchSetId</code>, and an array of <code>SqlInjectionMatchTuple</code> objects</p> </li>   <li> <p> <code>SqlInjectionMatchTuple</code>: Each <code>SqlInjectionMatchTuple</code> object contains <code>FieldToMatch</code> and <code>TextTransformation</code> </p> </li>   <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<GetSqlInjectionMatchSetError>`](crate::error::GetSqlInjectionMatchSetError)
    pub fn get_sql_injection_match_set(
        &self,
    ) -> crate::client::fluent_builders::GetSqlInjectionMatchSet {
        crate::client::fluent_builders::GetSqlInjectionMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetWebACL`](crate::client::fluent_builders::GetWebACL) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`web_acl_id(impl Into<String>)`](crate::client::fluent_builders::GetWebACL::web_acl_id) / [`set_web_acl_id(Option<String>)`](crate::client::fluent_builders::GetWebACL::set_web_acl_id): <p>The <code>WebACLId</code> of the <code>WebACL</code> that you want to get. <code>WebACLId</code> is returned by <code>CreateWebACL</code> and by <code>ListWebACLs</code>.</p>
    /// - On success, responds with [`GetWebAclOutput`](crate::output::GetWebAclOutput) with field(s):
    ///   - [`web_acl(Option<WebAcl>)`](crate::output::GetWebAclOutput::web_acl): <p>Information about the <code>WebACL</code> that you specified in the <code>GetWebACL</code> request. For more information, see the following topics:</p>  <ul>   <li> <p> <code>WebACL</code>: Contains <code>DefaultAction</code>, <code>MetricName</code>, <code>Name</code>, an array of <code>Rule</code> objects, and <code>WebACLId</code> </p> </li>   <li> <p> <code>DefaultAction</code> (Data type is <code>WafAction</code>): Contains <code>Type</code> </p> </li>   <li> <p> <code>Rules</code>: Contains an array of <code>ActivatedRule</code> objects, which contain <code>Action</code>, <code>Priority</code>, and <code>RuleId</code> </p> </li>   <li> <p> <code>Action</code>: Contains <code>Type</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<GetWebACLError>`](crate::error::GetWebACLError)
    pub fn get_web_acl(&self) -> crate::client::fluent_builders::GetWebACL {
        crate::client::fluent_builders::GetWebACL::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetXssMatchSet`](crate::client::fluent_builders::GetXssMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`xss_match_set_id(impl Into<String>)`](crate::client::fluent_builders::GetXssMatchSet::xss_match_set_id) / [`set_xss_match_set_id(Option<String>)`](crate::client::fluent_builders::GetXssMatchSet::set_xss_match_set_id): <p>The <code>XssMatchSetId</code> of the <code>XssMatchSet</code> that you want to get. <code>XssMatchSetId</code> is returned by <code>CreateXssMatchSet</code> and by <code>ListXssMatchSets</code>.</p>
    /// - On success, responds with [`GetXssMatchSetOutput`](crate::output::GetXssMatchSetOutput) with field(s):
    ///   - [`xss_match_set(Option<XssMatchSet>)`](crate::output::GetXssMatchSetOutput::xss_match_set): <p>Information about the <code>XssMatchSet</code> that you specified in the <code>GetXssMatchSet</code> request. For more information, see the following topics:</p>  <ul>   <li> <p> <code>XssMatchSet</code>: Contains <code>Name</code>, <code>XssMatchSetId</code>, and an array of <code>XssMatchTuple</code> objects</p> </li>   <li> <p> <code>XssMatchTuple</code>: Each <code>XssMatchTuple</code> object contains <code>FieldToMatch</code> and <code>TextTransformation</code> </p> </li>   <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<GetXssMatchSetError>`](crate::error::GetXssMatchSetError)
    pub fn get_xss_match_set(&self) -> crate::client::fluent_builders::GetXssMatchSet {
        crate::client::fluent_builders::GetXssMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListActivatedRulesInRuleGroup`](crate::client::fluent_builders::ListActivatedRulesInRuleGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_group_id(impl Into<String>)`](crate::client::fluent_builders::ListActivatedRulesInRuleGroup::rule_group_id) / [`set_rule_group_id(Option<String>)`](crate::client::fluent_builders::ListActivatedRulesInRuleGroup::set_rule_group_id): <p>The <code>RuleGroupId</code> of the <code>RuleGroup</code> for which you want to get a list of <code>ActivatedRule</code> objects.</p>
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListActivatedRulesInRuleGroup::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListActivatedRulesInRuleGroup::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>ActivatedRules</code> than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>ActivatedRules</code>. For the second and subsequent <code>ListActivatedRulesInRuleGroup</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>ActivatedRules</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListActivatedRulesInRuleGroup::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListActivatedRulesInRuleGroup::set_limit): <p>Specifies the number of <code>ActivatedRules</code> that you want AWS WAF to return for this request. If you have more <code>ActivatedRules</code> than the number that you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>ActivatedRules</code>.</p>
    /// - On success, responds with [`ListActivatedRulesInRuleGroupOutput`](crate::output::ListActivatedRulesInRuleGroupOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListActivatedRulesInRuleGroupOutput::next_marker): <p>If you have more <code>ActivatedRules</code> than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>ActivatedRules</code>, submit another <code>ListActivatedRulesInRuleGroup</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`activated_rules(Option<Vec<ActivatedRule>>)`](crate::output::ListActivatedRulesInRuleGroupOutput::activated_rules): <p>An array of <code>ActivatedRules</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListActivatedRulesInRuleGroupError>`](crate::error::ListActivatedRulesInRuleGroupError)
    pub fn list_activated_rules_in_rule_group(
        &self,
    ) -> crate::client::fluent_builders::ListActivatedRulesInRuleGroup {
        crate::client::fluent_builders::ListActivatedRulesInRuleGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListByteMatchSets`](crate::client::fluent_builders::ListByteMatchSets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListByteMatchSets::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListByteMatchSets::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>ByteMatchSets</code> than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>ByteMatchSets</code>. For the second and subsequent <code>ListByteMatchSets</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>ByteMatchSets</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListByteMatchSets::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListByteMatchSets::set_limit): <p>Specifies the number of <code>ByteMatchSet</code> objects that you want AWS WAF to return for this request. If you have more <code>ByteMatchSets</code> objects than the number you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>ByteMatchSet</code> objects.</p>
    /// - On success, responds with [`ListByteMatchSetsOutput`](crate::output::ListByteMatchSetsOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListByteMatchSetsOutput::next_marker): <p>If you have more <code>ByteMatchSet</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>ByteMatchSet</code> objects, submit another <code>ListByteMatchSets</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`byte_match_sets(Option<Vec<ByteMatchSetSummary>>)`](crate::output::ListByteMatchSetsOutput::byte_match_sets): <p>An array of <code>ByteMatchSetSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListByteMatchSetsError>`](crate::error::ListByteMatchSetsError)
    pub fn list_byte_match_sets(&self) -> crate::client::fluent_builders::ListByteMatchSets {
        crate::client::fluent_builders::ListByteMatchSets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListGeoMatchSets`](crate::client::fluent_builders::ListGeoMatchSets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListGeoMatchSets::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListGeoMatchSets::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>GeoMatchSet</code>s than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>GeoMatchSet</code> objects. For the second and subsequent <code>ListGeoMatchSets</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>GeoMatchSet</code> objects.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListGeoMatchSets::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListGeoMatchSets::set_limit): <p>Specifies the number of <code>GeoMatchSet</code> objects that you want AWS WAF to return for this request. If you have more <code>GeoMatchSet</code> objects than the number you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>GeoMatchSet</code> objects.</p>
    /// - On success, responds with [`ListGeoMatchSetsOutput`](crate::output::ListGeoMatchSetsOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListGeoMatchSetsOutput::next_marker): <p>If you have more <code>GeoMatchSet</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>GeoMatchSet</code> objects, submit another <code>ListGeoMatchSets</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`geo_match_sets(Option<Vec<GeoMatchSetSummary>>)`](crate::output::ListGeoMatchSetsOutput::geo_match_sets): <p>An array of <code>GeoMatchSetSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListGeoMatchSetsError>`](crate::error::ListGeoMatchSetsError)
    pub fn list_geo_match_sets(&self) -> crate::client::fluent_builders::ListGeoMatchSets {
        crate::client::fluent_builders::ListGeoMatchSets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListIPSets`](crate::client::fluent_builders::ListIPSets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListIPSets::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListIPSets::set_next_marker): <p>AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>IPSets</code>. For the second and subsequent <code>ListIPSets</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>IPSets</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListIPSets::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListIPSets::set_limit): <p>Specifies the number of <code>IPSet</code> objects that you want AWS WAF to return for this request. If you have more <code>IPSet</code> objects than the number you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>IPSet</code> objects.</p>
    /// - On success, responds with [`ListIpSetsOutput`](crate::output::ListIpSetsOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListIpSetsOutput::next_marker): <p>To list more <code>IPSet</code> objects, submit another <code>ListIPSets</code> request, and in the next request use the <code>NextMarker</code> response value as the <code>NextMarker</code> value.</p>
    ///   - [`ip_sets(Option<Vec<IpSetSummary>>)`](crate::output::ListIpSetsOutput::ip_sets): <p>An array of <code>IPSetSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListIPSetsError>`](crate::error::ListIPSetsError)
    pub fn list_ip_sets(&self) -> crate::client::fluent_builders::ListIPSets {
        crate::client::fluent_builders::ListIPSets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListLoggingConfigurations`](crate::client::fluent_builders::ListLoggingConfigurations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListLoggingConfigurations::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListLoggingConfigurations::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>LoggingConfigurations</code> than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>LoggingConfigurations</code>. For the second and subsequent <code>ListLoggingConfigurations</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>ListLoggingConfigurations</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListLoggingConfigurations::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListLoggingConfigurations::set_limit): <p>Specifies the number of <code>LoggingConfigurations</code> that you want AWS WAF to return for this request. If you have more <code>LoggingConfigurations</code> than the number that you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>LoggingConfigurations</code>.</p>
    /// - On success, responds with [`ListLoggingConfigurationsOutput`](crate::output::ListLoggingConfigurationsOutput) with field(s):
    ///   - [`logging_configurations(Option<Vec<LoggingConfiguration>>)`](crate::output::ListLoggingConfigurationsOutput::logging_configurations): <p>An array of <code>LoggingConfiguration</code> objects.</p>
    ///   - [`next_marker(Option<String>)`](crate::output::ListLoggingConfigurationsOutput::next_marker): <p>If you have more <code>LoggingConfigurations</code> than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>LoggingConfigurations</code>, submit another <code>ListLoggingConfigurations</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    /// - On failure, responds with [`SdkError<ListLoggingConfigurationsError>`](crate::error::ListLoggingConfigurationsError)
    pub fn list_logging_configurations(
        &self,
    ) -> crate::client::fluent_builders::ListLoggingConfigurations {
        crate::client::fluent_builders::ListLoggingConfigurations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRateBasedRules`](crate::client::fluent_builders::ListRateBasedRules) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListRateBasedRules::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListRateBasedRules::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>Rules</code> than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>Rules</code>. For the second and subsequent <code>ListRateBasedRules</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>Rules</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListRateBasedRules::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListRateBasedRules::set_limit): <p>Specifies the number of <code>Rules</code> that you want AWS WAF to return for this request. If you have more <code>Rules</code> than the number that you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>Rules</code>.</p>
    /// - On success, responds with [`ListRateBasedRulesOutput`](crate::output::ListRateBasedRulesOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListRateBasedRulesOutput::next_marker): <p>If you have more <code>Rules</code> than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>Rules</code>, submit another <code>ListRateBasedRules</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`rules(Option<Vec<RuleSummary>>)`](crate::output::ListRateBasedRulesOutput::rules): <p>An array of <code>RuleSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListRateBasedRulesError>`](crate::error::ListRateBasedRulesError)
    pub fn list_rate_based_rules(&self) -> crate::client::fluent_builders::ListRateBasedRules {
        crate::client::fluent_builders::ListRateBasedRules::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRegexMatchSets`](crate::client::fluent_builders::ListRegexMatchSets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListRegexMatchSets::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListRegexMatchSets::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>RegexMatchSet</code> objects than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>ByteMatchSets</code>. For the second and subsequent <code>ListRegexMatchSets</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>RegexMatchSet</code> objects.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListRegexMatchSets::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListRegexMatchSets::set_limit): <p>Specifies the number of <code>RegexMatchSet</code> objects that you want AWS WAF to return for this request. If you have more <code>RegexMatchSet</code> objects than the number you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>RegexMatchSet</code> objects.</p>
    /// - On success, responds with [`ListRegexMatchSetsOutput`](crate::output::ListRegexMatchSetsOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListRegexMatchSetsOutput::next_marker): <p>If you have more <code>RegexMatchSet</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>RegexMatchSet</code> objects, submit another <code>ListRegexMatchSets</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`regex_match_sets(Option<Vec<RegexMatchSetSummary>>)`](crate::output::ListRegexMatchSetsOutput::regex_match_sets): <p>An array of <code>RegexMatchSetSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListRegexMatchSetsError>`](crate::error::ListRegexMatchSetsError)
    pub fn list_regex_match_sets(&self) -> crate::client::fluent_builders::ListRegexMatchSets {
        crate::client::fluent_builders::ListRegexMatchSets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRegexPatternSets`](crate::client::fluent_builders::ListRegexPatternSets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListRegexPatternSets::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListRegexPatternSets::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>RegexPatternSet</code> objects than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>RegexPatternSet</code> objects. For the second and subsequent <code>ListRegexPatternSets</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>RegexPatternSet</code> objects.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListRegexPatternSets::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListRegexPatternSets::set_limit): <p>Specifies the number of <code>RegexPatternSet</code> objects that you want AWS WAF to return for this request. If you have more <code>RegexPatternSet</code> objects than the number you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>RegexPatternSet</code> objects.</p>
    /// - On success, responds with [`ListRegexPatternSetsOutput`](crate::output::ListRegexPatternSetsOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListRegexPatternSetsOutput::next_marker): <p>If you have more <code>RegexPatternSet</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>RegexPatternSet</code> objects, submit another <code>ListRegexPatternSets</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`regex_pattern_sets(Option<Vec<RegexPatternSetSummary>>)`](crate::output::ListRegexPatternSetsOutput::regex_pattern_sets): <p>An array of <code>RegexPatternSetSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListRegexPatternSetsError>`](crate::error::ListRegexPatternSetsError)
    pub fn list_regex_pattern_sets(&self) -> crate::client::fluent_builders::ListRegexPatternSets {
        crate::client::fluent_builders::ListRegexPatternSets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRuleGroups`](crate::client::fluent_builders::ListRuleGroups) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListRuleGroups::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListRuleGroups::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>RuleGroups</code> than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>RuleGroups</code>. For the second and subsequent <code>ListRuleGroups</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>RuleGroups</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListRuleGroups::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListRuleGroups::set_limit): <p>Specifies the number of <code>RuleGroups</code> that you want AWS WAF to return for this request. If you have more <code>RuleGroups</code> than the number that you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>RuleGroups</code>.</p>
    /// - On success, responds with [`ListRuleGroupsOutput`](crate::output::ListRuleGroupsOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListRuleGroupsOutput::next_marker): <p>If you have more <code>RuleGroups</code> than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>RuleGroups</code>, submit another <code>ListRuleGroups</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`rule_groups(Option<Vec<RuleGroupSummary>>)`](crate::output::ListRuleGroupsOutput::rule_groups): <p>An array of <code>RuleGroup</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListRuleGroupsError>`](crate::error::ListRuleGroupsError)
    pub fn list_rule_groups(&self) -> crate::client::fluent_builders::ListRuleGroups {
        crate::client::fluent_builders::ListRuleGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRules`](crate::client::fluent_builders::ListRules) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListRules::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListRules::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>Rules</code> than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>Rules</code>. For the second and subsequent <code>ListRules</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>Rules</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListRules::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListRules::set_limit): <p>Specifies the number of <code>Rules</code> that you want AWS WAF to return for this request. If you have more <code>Rules</code> than the number that you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>Rules</code>.</p>
    /// - On success, responds with [`ListRulesOutput`](crate::output::ListRulesOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListRulesOutput::next_marker): <p>If you have more <code>Rules</code> than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>Rules</code>, submit another <code>ListRules</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`rules(Option<Vec<RuleSummary>>)`](crate::output::ListRulesOutput::rules): <p>An array of <code>RuleSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListRulesError>`](crate::error::ListRulesError)
    pub fn list_rules(&self) -> crate::client::fluent_builders::ListRules {
        crate::client::fluent_builders::ListRules::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSizeConstraintSets`](crate::client::fluent_builders::ListSizeConstraintSets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListSizeConstraintSets::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListSizeConstraintSets::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>SizeConstraintSets</code> than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>SizeConstraintSets</code>. For the second and subsequent <code>ListSizeConstraintSets</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>SizeConstraintSets</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListSizeConstraintSets::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListSizeConstraintSets::set_limit): <p>Specifies the number of <code>SizeConstraintSet</code> objects that you want AWS WAF to return for this request. If you have more <code>SizeConstraintSets</code> objects than the number you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>SizeConstraintSet</code> objects.</p>
    /// - On success, responds with [`ListSizeConstraintSetsOutput`](crate::output::ListSizeConstraintSetsOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListSizeConstraintSetsOutput::next_marker): <p>If you have more <code>SizeConstraintSet</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>SizeConstraintSet</code> objects, submit another <code>ListSizeConstraintSets</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`size_constraint_sets(Option<Vec<SizeConstraintSetSummary>>)`](crate::output::ListSizeConstraintSetsOutput::size_constraint_sets): <p>An array of <code>SizeConstraintSetSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListSizeConstraintSetsError>`](crate::error::ListSizeConstraintSetsError)
    pub fn list_size_constraint_sets(
        &self,
    ) -> crate::client::fluent_builders::ListSizeConstraintSets {
        crate::client::fluent_builders::ListSizeConstraintSets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSqlInjectionMatchSets`](crate::client::fluent_builders::ListSqlInjectionMatchSets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListSqlInjectionMatchSets::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListSqlInjectionMatchSets::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>SqlInjectionMatchSet</code> objects than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>SqlInjectionMatchSets</code>. For the second and subsequent <code>ListSqlInjectionMatchSets</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>SqlInjectionMatchSets</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListSqlInjectionMatchSets::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListSqlInjectionMatchSets::set_limit): <p>Specifies the number of <code>SqlInjectionMatchSet</code> objects that you want AWS WAF to return for this request. If you have more <code>SqlInjectionMatchSet</code> objects than the number you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>Rules</code>.</p>
    /// - On success, responds with [`ListSqlInjectionMatchSetsOutput`](crate::output::ListSqlInjectionMatchSetsOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListSqlInjectionMatchSetsOutput::next_marker): <p>If you have more <code>SqlInjectionMatchSet</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>SqlInjectionMatchSet</code> objects, submit another <code>ListSqlInjectionMatchSets</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`sql_injection_match_sets(Option<Vec<SqlInjectionMatchSetSummary>>)`](crate::output::ListSqlInjectionMatchSetsOutput::sql_injection_match_sets): <p>An array of <code>SqlInjectionMatchSetSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListSqlInjectionMatchSetsError>`](crate::error::ListSqlInjectionMatchSetsError)
    pub fn list_sql_injection_match_sets(
        &self,
    ) -> crate::client::fluent_builders::ListSqlInjectionMatchSets {
        crate::client::fluent_builders::ListSqlInjectionMatchSets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSubscribedRuleGroups`](crate::client::fluent_builders::ListSubscribedRuleGroups) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListSubscribedRuleGroups::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListSubscribedRuleGroups::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>ByteMatchSets</code>subscribed rule groups than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of subscribed rule groups. For the second and subsequent <code>ListSubscribedRuleGroupsRequest</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of subscribed rule groups.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListSubscribedRuleGroups::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListSubscribedRuleGroups::set_limit): <p>Specifies the number of subscribed rule groups that you want AWS WAF to return for this request. If you have more objects than the number you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of objects.</p>
    /// - On success, responds with [`ListSubscribedRuleGroupsOutput`](crate::output::ListSubscribedRuleGroupsOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListSubscribedRuleGroupsOutput::next_marker): <p>If you have more objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more objects, submit another <code>ListSubscribedRuleGroups</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`rule_groups(Option<Vec<SubscribedRuleGroupSummary>>)`](crate::output::ListSubscribedRuleGroupsOutput::rule_groups): <p>An array of <code>RuleGroup</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListSubscribedRuleGroupsError>`](crate::error::ListSubscribedRuleGroupsError)
    pub fn list_subscribed_rule_groups(
        &self,
    ) -> crate::client::fluent_builders::ListSubscribedRuleGroups {
        crate::client::fluent_builders::ListSubscribedRuleGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_next_marker): <p></p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListTagsForResource::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListTagsForResource::set_limit): <p></p>
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p></p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListTagsForResourceOutput::next_marker): <p></p>
    ///   - [`tag_info_for_resource(Option<TagInfoForResource>)`](crate::output::ListTagsForResourceOutput::tag_info_for_resource): <p></p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWebACLs`](crate::client::fluent_builders::ListWebACLs) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListWebACLs::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListWebACLs::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>WebACL</code> objects than the number that you specify for <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>WebACL</code> objects. For the second and subsequent <code>ListWebACLs</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>WebACL</code> objects.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListWebACLs::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListWebACLs::set_limit): <p>Specifies the number of <code>WebACL</code> objects that you want AWS WAF to return for this request. If you have more <code>WebACL</code> objects than the number that you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>WebACL</code> objects.</p>
    /// - On success, responds with [`ListWebAcLsOutput`](crate::output::ListWebAcLsOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListWebAcLsOutput::next_marker): <p>If you have more <code>WebACL</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>WebACL</code> objects, submit another <code>ListWebACLs</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`web_ac_ls(Option<Vec<WebAclSummary>>)`](crate::output::ListWebAcLsOutput::web_ac_ls): <p>An array of <code>WebACLSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListWebACLsError>`](crate::error::ListWebACLsError)
    pub fn list_web_ac_ls(&self) -> crate::client::fluent_builders::ListWebACLs {
        crate::client::fluent_builders::ListWebACLs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListXssMatchSets`](crate::client::fluent_builders::ListXssMatchSets) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_marker(impl Into<String>)`](crate::client::fluent_builders::ListXssMatchSets::next_marker) / [`set_next_marker(Option<String>)`](crate::client::fluent_builders::ListXssMatchSets::set_next_marker): <p>If you specify a value for <code>Limit</code> and you have more <code>XssMatchSet</code> objects than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>XssMatchSets</code>. For the second and subsequent <code>ListXssMatchSets</code> requests, specify the value of <code>NextMarker</code> from the previous response to get information about another batch of <code>XssMatchSets</code>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListXssMatchSets::limit) / [`set_limit(i32)`](crate::client::fluent_builders::ListXssMatchSets::set_limit): <p>Specifies the number of <code>XssMatchSet</code> objects that you want AWS WAF to return for this request. If you have more <code>XssMatchSet</code> objects than the number you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>Rules</code>.</p>
    /// - On success, responds with [`ListXssMatchSetsOutput`](crate::output::ListXssMatchSetsOutput) with field(s):
    ///   - [`next_marker(Option<String>)`](crate::output::ListXssMatchSetsOutput::next_marker): <p>If you have more <code>XssMatchSet</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>XssMatchSet</code> objects, submit another <code>ListXssMatchSets</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    ///   - [`xss_match_sets(Option<Vec<XssMatchSetSummary>>)`](crate::output::ListXssMatchSetsOutput::xss_match_sets): <p>An array of <code>XssMatchSetSummary</code> objects.</p>
    /// - On failure, responds with [`SdkError<ListXssMatchSetsError>`](crate::error::ListXssMatchSetsError)
    pub fn list_xss_match_sets(&self) -> crate::client::fluent_builders::ListXssMatchSets {
        crate::client::fluent_builders::ListXssMatchSets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutLoggingConfiguration`](crate::client::fluent_builders::PutLoggingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`logging_configuration(LoggingConfiguration)`](crate::client::fluent_builders::PutLoggingConfiguration::logging_configuration) / [`set_logging_configuration(Option<LoggingConfiguration>)`](crate::client::fluent_builders::PutLoggingConfiguration::set_logging_configuration): <p>The Amazon Kinesis Data Firehose that contains the inspected traffic information, the redacted fields details, and the Amazon Resource Name (ARN) of the web ACL to monitor.</p> <note>   <p>When specifying <code>Type</code> in <code>RedactedFields</code>, you must use one of the following values: <code>URI</code>, <code>QUERY_STRING</code>, <code>HEADER</code>, or <code>METHOD</code>.</p>  </note>
    /// - On success, responds with [`PutLoggingConfigurationOutput`](crate::output::PutLoggingConfigurationOutput) with field(s):
    ///   - [`logging_configuration(Option<LoggingConfiguration>)`](crate::output::PutLoggingConfigurationOutput::logging_configuration): <p>The <code>LoggingConfiguration</code> that you submitted in the request.</p>
    /// - On failure, responds with [`SdkError<PutLoggingConfigurationError>`](crate::error::PutLoggingConfigurationError)
    pub fn put_logging_configuration(
        &self,
    ) -> crate::client::fluent_builders::PutLoggingConfiguration {
        crate::client::fluent_builders::PutLoggingConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutPermissionPolicy`](crate::client::fluent_builders::PutPermissionPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::PutPermissionPolicy::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::PutPermissionPolicy::set_resource_arn): <p>The Amazon Resource Name (ARN) of the RuleGroup to which you want to attach the policy.</p>
    ///   - [`policy(impl Into<String>)`](crate::client::fluent_builders::PutPermissionPolicy::policy) / [`set_policy(Option<String>)`](crate::client::fluent_builders::PutPermissionPolicy::set_policy): <p>The policy to attach to the specified RuleGroup.</p>
    /// - On success, responds with [`PutPermissionPolicyOutput`](crate::output::PutPermissionPolicyOutput)

    /// - On failure, responds with [`SdkError<PutPermissionPolicyError>`](crate::error::PutPermissionPolicyError)
    pub fn put_permission_policy(&self) -> crate::client::fluent_builders::PutPermissionPolicy {
        crate::client::fluent_builders::PutPermissionPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p></p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p></p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p></p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p></p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateByteMatchSet`](crate::client::fluent_builders::UpdateByteMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`byte_match_set_id(impl Into<String>)`](crate::client::fluent_builders::UpdateByteMatchSet::byte_match_set_id) / [`set_byte_match_set_id(Option<String>)`](crate::client::fluent_builders::UpdateByteMatchSet::set_byte_match_set_id): <p>The <code>ByteMatchSetId</code> of the <code>ByteMatchSet</code> that you want to update. <code>ByteMatchSetId</code> is returned by <code>CreateByteMatchSet</code> and by <code>ListByteMatchSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateByteMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateByteMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`updates(Vec<ByteMatchSetUpdate>)`](crate::client::fluent_builders::UpdateByteMatchSet::updates) / [`set_updates(Option<Vec<ByteMatchSetUpdate>>)`](crate::client::fluent_builders::UpdateByteMatchSet::set_updates): <p>An array of <code>ByteMatchSetUpdate</code> objects that you want to insert into or delete from a <code>ByteMatchSet</code>. For more information, see the applicable data types:</p>  <ul>   <li> <p> <code>ByteMatchSetUpdate</code>: Contains <code>Action</code> and <code>ByteMatchTuple</code> </p> </li>   <li> <p> <code>ByteMatchTuple</code>: Contains <code>FieldToMatch</code>, <code>PositionalConstraint</code>, <code>TargetString</code>, and <code>TextTransformation</code> </p> </li>   <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>  </ul>
    /// - On success, responds with [`UpdateByteMatchSetOutput`](crate::output::UpdateByteMatchSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateByteMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateByteMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateByteMatchSetError>`](crate::error::UpdateByteMatchSetError)
    pub fn update_byte_match_set(&self) -> crate::client::fluent_builders::UpdateByteMatchSet {
        crate::client::fluent_builders::UpdateByteMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateGeoMatchSet`](crate::client::fluent_builders::UpdateGeoMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`geo_match_set_id(impl Into<String>)`](crate::client::fluent_builders::UpdateGeoMatchSet::geo_match_set_id) / [`set_geo_match_set_id(Option<String>)`](crate::client::fluent_builders::UpdateGeoMatchSet::set_geo_match_set_id): <p>The <code>GeoMatchSetId</code> of the <code>GeoMatchSet</code> that you want to update. <code>GeoMatchSetId</code> is returned by <code>CreateGeoMatchSet</code> and by <code>ListGeoMatchSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateGeoMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateGeoMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`updates(Vec<GeoMatchSetUpdate>)`](crate::client::fluent_builders::UpdateGeoMatchSet::updates) / [`set_updates(Option<Vec<GeoMatchSetUpdate>>)`](crate::client::fluent_builders::UpdateGeoMatchSet::set_updates): <p>An array of <code>GeoMatchSetUpdate</code> objects that you want to insert into or delete from an <code>GeoMatchSet</code>. For more information, see the applicable data types:</p>  <ul>   <li> <p> <code>GeoMatchSetUpdate</code>: Contains <code>Action</code> and <code>GeoMatchConstraint</code> </p> </li>   <li> <p> <code>GeoMatchConstraint</code>: Contains <code>Type</code> and <code>Value</code> </p> <p>You can have only one <code>Type</code> and <code>Value</code> per <code>GeoMatchConstraint</code>. To add multiple countries, include multiple <code>GeoMatchSetUpdate</code> objects in your request.</p> </li>  </ul>
    /// - On success, responds with [`UpdateGeoMatchSetOutput`](crate::output::UpdateGeoMatchSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateGeoMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateGeoMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateGeoMatchSetError>`](crate::error::UpdateGeoMatchSetError)
    pub fn update_geo_match_set(&self) -> crate::client::fluent_builders::UpdateGeoMatchSet {
        crate::client::fluent_builders::UpdateGeoMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateIPSet`](crate::client::fluent_builders::UpdateIPSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`ip_set_id(impl Into<String>)`](crate::client::fluent_builders::UpdateIPSet::ip_set_id) / [`set_ip_set_id(Option<String>)`](crate::client::fluent_builders::UpdateIPSet::set_ip_set_id): <p>The <code>IPSetId</code> of the <code>IPSet</code> that you want to update. <code>IPSetId</code> is returned by <code>CreateIPSet</code> and by <code>ListIPSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateIPSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateIPSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`updates(Vec<IpSetUpdate>)`](crate::client::fluent_builders::UpdateIPSet::updates) / [`set_updates(Option<Vec<IpSetUpdate>>)`](crate::client::fluent_builders::UpdateIPSet::set_updates): <p>An array of <code>IPSetUpdate</code> objects that you want to insert into or delete from an <code>IPSet</code>. For more information, see the applicable data types:</p>  <ul>   <li> <p> <code>IPSetUpdate</code>: Contains <code>Action</code> and <code>IPSetDescriptor</code> </p> </li>   <li> <p> <code>IPSetDescriptor</code>: Contains <code>Type</code> and <code>Value</code> </p> </li>  </ul>  <p>You can insert a maximum of 1000 addresses in a single request.</p>
    /// - On success, responds with [`UpdateIpSetOutput`](crate::output::UpdateIpSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateIpSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateIPSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateIPSetError>`](crate::error::UpdateIPSetError)
    pub fn update_ip_set(&self) -> crate::client::fluent_builders::UpdateIPSet {
        crate::client::fluent_builders::UpdateIPSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRateBasedRule`](crate::client::fluent_builders::UpdateRateBasedRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_id(impl Into<String>)`](crate::client::fluent_builders::UpdateRateBasedRule::rule_id) / [`set_rule_id(Option<String>)`](crate::client::fluent_builders::UpdateRateBasedRule::set_rule_id): <p>The <code>RuleId</code> of the <code>RateBasedRule</code> that you want to update. <code>RuleId</code> is returned by <code>CreateRateBasedRule</code> and by <code>ListRateBasedRules</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateRateBasedRule::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateRateBasedRule::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`updates(Vec<RuleUpdate>)`](crate::client::fluent_builders::UpdateRateBasedRule::updates) / [`set_updates(Option<Vec<RuleUpdate>>)`](crate::client::fluent_builders::UpdateRateBasedRule::set_updates): <p>An array of <code>RuleUpdate</code> objects that you want to insert into or delete from a <code>RateBasedRule</code>. </p>
    ///   - [`rate_limit(i64)`](crate::client::fluent_builders::UpdateRateBasedRule::rate_limit) / [`set_rate_limit(i64)`](crate::client::fluent_builders::UpdateRateBasedRule::set_rate_limit): <p>The maximum number of requests, which have an identical value in the field specified by the <code>RateKey</code>, allowed in a five-minute period. If the number of requests exceeds the <code>RateLimit</code> and the other predicates specified in the rule are also met, AWS WAF triggers the action that is specified for this rule.</p>
    /// - On success, responds with [`UpdateRateBasedRuleOutput`](crate::output::UpdateRateBasedRuleOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateRateBasedRuleOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateRateBasedRule</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateRateBasedRuleError>`](crate::error::UpdateRateBasedRuleError)
    pub fn update_rate_based_rule(&self) -> crate::client::fluent_builders::UpdateRateBasedRule {
        crate::client::fluent_builders::UpdateRateBasedRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRegexMatchSet`](crate::client::fluent_builders::UpdateRegexMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`regex_match_set_id(impl Into<String>)`](crate::client::fluent_builders::UpdateRegexMatchSet::regex_match_set_id) / [`set_regex_match_set_id(Option<String>)`](crate::client::fluent_builders::UpdateRegexMatchSet::set_regex_match_set_id): <p>The <code>RegexMatchSetId</code> of the <code>RegexMatchSet</code> that you want to update. <code>RegexMatchSetId</code> is returned by <code>CreateRegexMatchSet</code> and by <code>ListRegexMatchSets</code>.</p>
    ///   - [`updates(Vec<RegexMatchSetUpdate>)`](crate::client::fluent_builders::UpdateRegexMatchSet::updates) / [`set_updates(Option<Vec<RegexMatchSetUpdate>>)`](crate::client::fluent_builders::UpdateRegexMatchSet::set_updates): <p>An array of <code>RegexMatchSetUpdate</code> objects that you want to insert into or delete from a <code>RegexMatchSet</code>. For more information, see <code>RegexMatchTuple</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateRegexMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateRegexMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`UpdateRegexMatchSetOutput`](crate::output::UpdateRegexMatchSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateRegexMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateRegexMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateRegexMatchSetError>`](crate::error::UpdateRegexMatchSetError)
    pub fn update_regex_match_set(&self) -> crate::client::fluent_builders::UpdateRegexMatchSet {
        crate::client::fluent_builders::UpdateRegexMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRegexPatternSet`](crate::client::fluent_builders::UpdateRegexPatternSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`regex_pattern_set_id(impl Into<String>)`](crate::client::fluent_builders::UpdateRegexPatternSet::regex_pattern_set_id) / [`set_regex_pattern_set_id(Option<String>)`](crate::client::fluent_builders::UpdateRegexPatternSet::set_regex_pattern_set_id): <p>The <code>RegexPatternSetId</code> of the <code>RegexPatternSet</code> that you want to update. <code>RegexPatternSetId</code> is returned by <code>CreateRegexPatternSet</code> and by <code>ListRegexPatternSets</code>.</p>
    ///   - [`updates(Vec<RegexPatternSetUpdate>)`](crate::client::fluent_builders::UpdateRegexPatternSet::updates) / [`set_updates(Option<Vec<RegexPatternSetUpdate>>)`](crate::client::fluent_builders::UpdateRegexPatternSet::set_updates): <p>An array of <code>RegexPatternSetUpdate</code> objects that you want to insert into or delete from a <code>RegexPatternSet</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateRegexPatternSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateRegexPatternSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`UpdateRegexPatternSetOutput`](crate::output::UpdateRegexPatternSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateRegexPatternSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateRegexPatternSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateRegexPatternSetError>`](crate::error::UpdateRegexPatternSetError)
    pub fn update_regex_pattern_set(
        &self,
    ) -> crate::client::fluent_builders::UpdateRegexPatternSet {
        crate::client::fluent_builders::UpdateRegexPatternSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRule`](crate::client::fluent_builders::UpdateRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_id(impl Into<String>)`](crate::client::fluent_builders::UpdateRule::rule_id) / [`set_rule_id(Option<String>)`](crate::client::fluent_builders::UpdateRule::set_rule_id): <p>The <code>RuleId</code> of the <code>Rule</code> that you want to update. <code>RuleId</code> is returned by <code>CreateRule</code> and by <code>ListRules</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateRule::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateRule::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`updates(Vec<RuleUpdate>)`](crate::client::fluent_builders::UpdateRule::updates) / [`set_updates(Option<Vec<RuleUpdate>>)`](crate::client::fluent_builders::UpdateRule::set_updates): <p>An array of <code>RuleUpdate</code> objects that you want to insert into or delete from a <code>Rule</code>. For more information, see the applicable data types:</p>  <ul>   <li> <p> <code>RuleUpdate</code>: Contains <code>Action</code> and <code>Predicate</code> </p> </li>   <li> <p> <code>Predicate</code>: Contains <code>DataId</code>, <code>Negated</code>, and <code>Type</code> </p> </li>   <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>  </ul>
    /// - On success, responds with [`UpdateRuleOutput`](crate::output::UpdateRuleOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateRuleOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateRule</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateRuleError>`](crate::error::UpdateRuleError)
    pub fn update_rule(&self) -> crate::client::fluent_builders::UpdateRule {
        crate::client::fluent_builders::UpdateRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRuleGroup`](crate::client::fluent_builders::UpdateRuleGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_group_id(impl Into<String>)`](crate::client::fluent_builders::UpdateRuleGroup::rule_group_id) / [`set_rule_group_id(Option<String>)`](crate::client::fluent_builders::UpdateRuleGroup::set_rule_group_id): <p>The <code>RuleGroupId</code> of the <code>RuleGroup</code> that you want to update. <code>RuleGroupId</code> is returned by <code>CreateRuleGroup</code> and by <code>ListRuleGroups</code>.</p>
    ///   - [`updates(Vec<RuleGroupUpdate>)`](crate::client::fluent_builders::UpdateRuleGroup::updates) / [`set_updates(Option<Vec<RuleGroupUpdate>>)`](crate::client::fluent_builders::UpdateRuleGroup::set_updates): <p>An array of <code>RuleGroupUpdate</code> objects that you want to insert into or delete from a <code>RuleGroup</code>.</p>  <p>You can only insert <code>REGULAR</code> rules into a rule group.</p>  <p> <code>ActivatedRule|OverrideAction</code> applies only when updating or adding a <code>RuleGroup</code> to a <code>WebACL</code>. In this case you do not use <code>ActivatedRule|Action</code>. For all other update requests, <code>ActivatedRule|Action</code> is used instead of <code>ActivatedRule|OverrideAction</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateRuleGroup::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateRuleGroup::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    /// - On success, responds with [`UpdateRuleGroupOutput`](crate::output::UpdateRuleGroupOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateRuleGroupOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateRuleGroup</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateRuleGroupError>`](crate::error::UpdateRuleGroupError)
    pub fn update_rule_group(&self) -> crate::client::fluent_builders::UpdateRuleGroup {
        crate::client::fluent_builders::UpdateRuleGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateSizeConstraintSet`](crate::client::fluent_builders::UpdateSizeConstraintSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`size_constraint_set_id(impl Into<String>)`](crate::client::fluent_builders::UpdateSizeConstraintSet::size_constraint_set_id) / [`set_size_constraint_set_id(Option<String>)`](crate::client::fluent_builders::UpdateSizeConstraintSet::set_size_constraint_set_id): <p>The <code>SizeConstraintSetId</code> of the <code>SizeConstraintSet</code> that you want to update. <code>SizeConstraintSetId</code> is returned by <code>CreateSizeConstraintSet</code> and by <code>ListSizeConstraintSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateSizeConstraintSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateSizeConstraintSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`updates(Vec<SizeConstraintSetUpdate>)`](crate::client::fluent_builders::UpdateSizeConstraintSet::updates) / [`set_updates(Option<Vec<SizeConstraintSetUpdate>>)`](crate::client::fluent_builders::UpdateSizeConstraintSet::set_updates): <p>An array of <code>SizeConstraintSetUpdate</code> objects that you want to insert into or delete from a <code>SizeConstraintSet</code>. For more information, see the applicable data types:</p>  <ul>   <li> <p> <code>SizeConstraintSetUpdate</code>: Contains <code>Action</code> and <code>SizeConstraint</code> </p> </li>   <li> <p> <code>SizeConstraint</code>: Contains <code>FieldToMatch</code>, <code>TextTransformation</code>, <code>ComparisonOperator</code>, and <code>Size</code> </p> </li>   <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>  </ul>
    /// - On success, responds with [`UpdateSizeConstraintSetOutput`](crate::output::UpdateSizeConstraintSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateSizeConstraintSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateSizeConstraintSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateSizeConstraintSetError>`](crate::error::UpdateSizeConstraintSetError)
    pub fn update_size_constraint_set(
        &self,
    ) -> crate::client::fluent_builders::UpdateSizeConstraintSet {
        crate::client::fluent_builders::UpdateSizeConstraintSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateSqlInjectionMatchSet`](crate::client::fluent_builders::UpdateSqlInjectionMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`sql_injection_match_set_id(impl Into<String>)`](crate::client::fluent_builders::UpdateSqlInjectionMatchSet::sql_injection_match_set_id) / [`set_sql_injection_match_set_id(Option<String>)`](crate::client::fluent_builders::UpdateSqlInjectionMatchSet::set_sql_injection_match_set_id): <p>The <code>SqlInjectionMatchSetId</code> of the <code>SqlInjectionMatchSet</code> that you want to update. <code>SqlInjectionMatchSetId</code> is returned by <code>CreateSqlInjectionMatchSet</code> and by <code>ListSqlInjectionMatchSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateSqlInjectionMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateSqlInjectionMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`updates(Vec<SqlInjectionMatchSetUpdate>)`](crate::client::fluent_builders::UpdateSqlInjectionMatchSet::updates) / [`set_updates(Option<Vec<SqlInjectionMatchSetUpdate>>)`](crate::client::fluent_builders::UpdateSqlInjectionMatchSet::set_updates): <p>An array of <code>SqlInjectionMatchSetUpdate</code> objects that you want to insert into or delete from a <code>SqlInjectionMatchSet</code>. For more information, see the applicable data types:</p>  <ul>   <li> <p> <code>SqlInjectionMatchSetUpdate</code>: Contains <code>Action</code> and <code>SqlInjectionMatchTuple</code> </p> </li>   <li> <p> <code>SqlInjectionMatchTuple</code>: Contains <code>FieldToMatch</code> and <code>TextTransformation</code> </p> </li>   <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>  </ul>
    /// - On success, responds with [`UpdateSqlInjectionMatchSetOutput`](crate::output::UpdateSqlInjectionMatchSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateSqlInjectionMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateSqlInjectionMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateSqlInjectionMatchSetError>`](crate::error::UpdateSqlInjectionMatchSetError)
    pub fn update_sql_injection_match_set(
        &self,
    ) -> crate::client::fluent_builders::UpdateSqlInjectionMatchSet {
        crate::client::fluent_builders::UpdateSqlInjectionMatchSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateWebACL`](crate::client::fluent_builders::UpdateWebACL) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`web_acl_id(impl Into<String>)`](crate::client::fluent_builders::UpdateWebACL::web_acl_id) / [`set_web_acl_id(Option<String>)`](crate::client::fluent_builders::UpdateWebACL::set_web_acl_id): <p>The <code>WebACLId</code> of the <code>WebACL</code> that you want to update. <code>WebACLId</code> is returned by <code>CreateWebACL</code> and by <code>ListWebACLs</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateWebACL::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateWebACL::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`updates(Vec<WebAclUpdate>)`](crate::client::fluent_builders::UpdateWebACL::updates) / [`set_updates(Option<Vec<WebAclUpdate>>)`](crate::client::fluent_builders::UpdateWebACL::set_updates): <p>An array of updates to make to the <code>WebACL</code>.</p>  <p>An array of <code>WebACLUpdate</code> objects that you want to insert into or delete from a <code>WebACL</code>. For more information, see the applicable data types:</p>  <ul>   <li> <p> <code>WebACLUpdate</code>: Contains <code>Action</code> and <code>ActivatedRule</code> </p> </li>   <li> <p> <code>ActivatedRule</code>: Contains <code>Action</code>, <code>OverrideAction</code>, <code>Priority</code>, <code>RuleId</code>, and <code>Type</code>. <code>ActivatedRule|OverrideAction</code> applies only when updating or adding a <code>RuleGroup</code> to a <code>WebACL</code>. In this case, you do not use <code>ActivatedRule|Action</code>. For all other update requests, <code>ActivatedRule|Action</code> is used instead of <code>ActivatedRule|OverrideAction</code>. </p> </li>   <li> <p> <code>WafAction</code>: Contains <code>Type</code> </p> </li>  </ul>
    ///   - [`default_action(WafAction)`](crate::client::fluent_builders::UpdateWebACL::default_action) / [`set_default_action(Option<WafAction>)`](crate::client::fluent_builders::UpdateWebACL::set_default_action): <p>A default action for the web ACL, either ALLOW or BLOCK. AWS WAF performs the default action if a request doesn't match the criteria in any of the rules in a web ACL.</p>
    /// - On success, responds with [`UpdateWebAclOutput`](crate::output::UpdateWebAclOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateWebAclOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateWebACL</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateWebACLError>`](crate::error::UpdateWebACLError)
    pub fn update_web_acl(&self) -> crate::client::fluent_builders::UpdateWebACL {
        crate::client::fluent_builders::UpdateWebACL::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateXssMatchSet`](crate::client::fluent_builders::UpdateXssMatchSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`xss_match_set_id(impl Into<String>)`](crate::client::fluent_builders::UpdateXssMatchSet::xss_match_set_id) / [`set_xss_match_set_id(Option<String>)`](crate::client::fluent_builders::UpdateXssMatchSet::set_xss_match_set_id): <p>The <code>XssMatchSetId</code> of the <code>XssMatchSet</code> that you want to update. <code>XssMatchSetId</code> is returned by <code>CreateXssMatchSet</code> and by <code>ListXssMatchSets</code>.</p>
    ///   - [`change_token(impl Into<String>)`](crate::client::fluent_builders::UpdateXssMatchSet::change_token) / [`set_change_token(Option<String>)`](crate::client::fluent_builders::UpdateXssMatchSet::set_change_token): <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    ///   - [`updates(Vec<XssMatchSetUpdate>)`](crate::client::fluent_builders::UpdateXssMatchSet::updates) / [`set_updates(Option<Vec<XssMatchSetUpdate>>)`](crate::client::fluent_builders::UpdateXssMatchSet::set_updates): <p>An array of <code>XssMatchSetUpdate</code> objects that you want to insert into or delete from an <code>XssMatchSet</code>. For more information, see the applicable data types:</p>  <ul>   <li> <p> <code>XssMatchSetUpdate</code>: Contains <code>Action</code> and <code>XssMatchTuple</code> </p> </li>   <li> <p> <code>XssMatchTuple</code>: Contains <code>FieldToMatch</code> and <code>TextTransformation</code> </p> </li>   <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>  </ul>
    /// - On success, responds with [`UpdateXssMatchSetOutput`](crate::output::UpdateXssMatchSetOutput) with field(s):
    ///   - [`change_token(Option<String>)`](crate::output::UpdateXssMatchSetOutput::change_token): <p>The <code>ChangeToken</code> that you used to submit the <code>UpdateXssMatchSet</code> request. You can also use this value to query the status of the request. For more information, see <code>GetChangeTokenStatus</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateXssMatchSetError>`](crate::error::UpdateXssMatchSetError)
    pub fn update_xss_match_set(&self) -> crate::client::fluent_builders::UpdateXssMatchSet {
        crate::client::fluent_builders::UpdateXssMatchSet::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
