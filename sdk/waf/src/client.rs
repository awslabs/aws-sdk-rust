// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `AWSWAF_20150824`.
///
/// This client allows ergonomic access to a `AWSWAF_20150824`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn create_byte_match_set(&self) -> fluent_builders::CreateByteMatchSet<C, M, R> {
        fluent_builders::CreateByteMatchSet::new(self.handle.clone())
    }
    pub fn create_geo_match_set(&self) -> fluent_builders::CreateGeoMatchSet<C, M, R> {
        fluent_builders::CreateGeoMatchSet::new(self.handle.clone())
    }
    pub fn create_ip_set(&self) -> fluent_builders::CreateIPSet<C, M, R> {
        fluent_builders::CreateIPSet::new(self.handle.clone())
    }
    pub fn create_rate_based_rule(&self) -> fluent_builders::CreateRateBasedRule<C, M, R> {
        fluent_builders::CreateRateBasedRule::new(self.handle.clone())
    }
    pub fn create_regex_match_set(&self) -> fluent_builders::CreateRegexMatchSet<C, M, R> {
        fluent_builders::CreateRegexMatchSet::new(self.handle.clone())
    }
    pub fn create_regex_pattern_set(&self) -> fluent_builders::CreateRegexPatternSet<C, M, R> {
        fluent_builders::CreateRegexPatternSet::new(self.handle.clone())
    }
    pub fn create_rule(&self) -> fluent_builders::CreateRule<C, M, R> {
        fluent_builders::CreateRule::new(self.handle.clone())
    }
    pub fn create_rule_group(&self) -> fluent_builders::CreateRuleGroup<C, M, R> {
        fluent_builders::CreateRuleGroup::new(self.handle.clone())
    }
    pub fn create_size_constraint_set(&self) -> fluent_builders::CreateSizeConstraintSet<C, M, R> {
        fluent_builders::CreateSizeConstraintSet::new(self.handle.clone())
    }
    pub fn create_sql_injection_match_set(
        &self,
    ) -> fluent_builders::CreateSqlInjectionMatchSet<C, M, R> {
        fluent_builders::CreateSqlInjectionMatchSet::new(self.handle.clone())
    }
    pub fn create_web_acl(&self) -> fluent_builders::CreateWebACL<C, M, R> {
        fluent_builders::CreateWebACL::new(self.handle.clone())
    }
    pub fn create_web_acl_migration_stack(
        &self,
    ) -> fluent_builders::CreateWebACLMigrationStack<C, M, R> {
        fluent_builders::CreateWebACLMigrationStack::new(self.handle.clone())
    }
    pub fn create_xss_match_set(&self) -> fluent_builders::CreateXssMatchSet<C, M, R> {
        fluent_builders::CreateXssMatchSet::new(self.handle.clone())
    }
    pub fn delete_byte_match_set(&self) -> fluent_builders::DeleteByteMatchSet<C, M, R> {
        fluent_builders::DeleteByteMatchSet::new(self.handle.clone())
    }
    pub fn delete_geo_match_set(&self) -> fluent_builders::DeleteGeoMatchSet<C, M, R> {
        fluent_builders::DeleteGeoMatchSet::new(self.handle.clone())
    }
    pub fn delete_ip_set(&self) -> fluent_builders::DeleteIPSet<C, M, R> {
        fluent_builders::DeleteIPSet::new(self.handle.clone())
    }
    pub fn delete_logging_configuration(
        &self,
    ) -> fluent_builders::DeleteLoggingConfiguration<C, M, R> {
        fluent_builders::DeleteLoggingConfiguration::new(self.handle.clone())
    }
    pub fn delete_permission_policy(&self) -> fluent_builders::DeletePermissionPolicy<C, M, R> {
        fluent_builders::DeletePermissionPolicy::new(self.handle.clone())
    }
    pub fn delete_rate_based_rule(&self) -> fluent_builders::DeleteRateBasedRule<C, M, R> {
        fluent_builders::DeleteRateBasedRule::new(self.handle.clone())
    }
    pub fn delete_regex_match_set(&self) -> fluent_builders::DeleteRegexMatchSet<C, M, R> {
        fluent_builders::DeleteRegexMatchSet::new(self.handle.clone())
    }
    pub fn delete_regex_pattern_set(&self) -> fluent_builders::DeleteRegexPatternSet<C, M, R> {
        fluent_builders::DeleteRegexPatternSet::new(self.handle.clone())
    }
    pub fn delete_rule(&self) -> fluent_builders::DeleteRule<C, M, R> {
        fluent_builders::DeleteRule::new(self.handle.clone())
    }
    pub fn delete_rule_group(&self) -> fluent_builders::DeleteRuleGroup<C, M, R> {
        fluent_builders::DeleteRuleGroup::new(self.handle.clone())
    }
    pub fn delete_size_constraint_set(&self) -> fluent_builders::DeleteSizeConstraintSet<C, M, R> {
        fluent_builders::DeleteSizeConstraintSet::new(self.handle.clone())
    }
    pub fn delete_sql_injection_match_set(
        &self,
    ) -> fluent_builders::DeleteSqlInjectionMatchSet<C, M, R> {
        fluent_builders::DeleteSqlInjectionMatchSet::new(self.handle.clone())
    }
    pub fn delete_web_acl(&self) -> fluent_builders::DeleteWebACL<C, M, R> {
        fluent_builders::DeleteWebACL::new(self.handle.clone())
    }
    pub fn delete_xss_match_set(&self) -> fluent_builders::DeleteXssMatchSet<C, M, R> {
        fluent_builders::DeleteXssMatchSet::new(self.handle.clone())
    }
    pub fn get_byte_match_set(&self) -> fluent_builders::GetByteMatchSet<C, M, R> {
        fluent_builders::GetByteMatchSet::new(self.handle.clone())
    }
    pub fn get_change_token(&self) -> fluent_builders::GetChangeToken<C, M, R> {
        fluent_builders::GetChangeToken::new(self.handle.clone())
    }
    pub fn get_change_token_status(&self) -> fluent_builders::GetChangeTokenStatus<C, M, R> {
        fluent_builders::GetChangeTokenStatus::new(self.handle.clone())
    }
    pub fn get_geo_match_set(&self) -> fluent_builders::GetGeoMatchSet<C, M, R> {
        fluent_builders::GetGeoMatchSet::new(self.handle.clone())
    }
    pub fn get_ip_set(&self) -> fluent_builders::GetIPSet<C, M, R> {
        fluent_builders::GetIPSet::new(self.handle.clone())
    }
    pub fn get_logging_configuration(&self) -> fluent_builders::GetLoggingConfiguration<C, M, R> {
        fluent_builders::GetLoggingConfiguration::new(self.handle.clone())
    }
    pub fn get_permission_policy(&self) -> fluent_builders::GetPermissionPolicy<C, M, R> {
        fluent_builders::GetPermissionPolicy::new(self.handle.clone())
    }
    pub fn get_rate_based_rule(&self) -> fluent_builders::GetRateBasedRule<C, M, R> {
        fluent_builders::GetRateBasedRule::new(self.handle.clone())
    }
    pub fn get_rate_based_rule_managed_keys(
        &self,
    ) -> fluent_builders::GetRateBasedRuleManagedKeys<C, M, R> {
        fluent_builders::GetRateBasedRuleManagedKeys::new(self.handle.clone())
    }
    pub fn get_regex_match_set(&self) -> fluent_builders::GetRegexMatchSet<C, M, R> {
        fluent_builders::GetRegexMatchSet::new(self.handle.clone())
    }
    pub fn get_regex_pattern_set(&self) -> fluent_builders::GetRegexPatternSet<C, M, R> {
        fluent_builders::GetRegexPatternSet::new(self.handle.clone())
    }
    pub fn get_rule(&self) -> fluent_builders::GetRule<C, M, R> {
        fluent_builders::GetRule::new(self.handle.clone())
    }
    pub fn get_rule_group(&self) -> fluent_builders::GetRuleGroup<C, M, R> {
        fluent_builders::GetRuleGroup::new(self.handle.clone())
    }
    pub fn get_sampled_requests(&self) -> fluent_builders::GetSampledRequests<C, M, R> {
        fluent_builders::GetSampledRequests::new(self.handle.clone())
    }
    pub fn get_size_constraint_set(&self) -> fluent_builders::GetSizeConstraintSet<C, M, R> {
        fluent_builders::GetSizeConstraintSet::new(self.handle.clone())
    }
    pub fn get_sql_injection_match_set(&self) -> fluent_builders::GetSqlInjectionMatchSet<C, M, R> {
        fluent_builders::GetSqlInjectionMatchSet::new(self.handle.clone())
    }
    pub fn get_web_acl(&self) -> fluent_builders::GetWebACL<C, M, R> {
        fluent_builders::GetWebACL::new(self.handle.clone())
    }
    pub fn get_xss_match_set(&self) -> fluent_builders::GetXssMatchSet<C, M, R> {
        fluent_builders::GetXssMatchSet::new(self.handle.clone())
    }
    pub fn list_activated_rules_in_rule_group(
        &self,
    ) -> fluent_builders::ListActivatedRulesInRuleGroup<C, M, R> {
        fluent_builders::ListActivatedRulesInRuleGroup::new(self.handle.clone())
    }
    pub fn list_byte_match_sets(&self) -> fluent_builders::ListByteMatchSets<C, M, R> {
        fluent_builders::ListByteMatchSets::new(self.handle.clone())
    }
    pub fn list_geo_match_sets(&self) -> fluent_builders::ListGeoMatchSets<C, M, R> {
        fluent_builders::ListGeoMatchSets::new(self.handle.clone())
    }
    pub fn list_ip_sets(&self) -> fluent_builders::ListIPSets<C, M, R> {
        fluent_builders::ListIPSets::new(self.handle.clone())
    }
    pub fn list_logging_configurations(
        &self,
    ) -> fluent_builders::ListLoggingConfigurations<C, M, R> {
        fluent_builders::ListLoggingConfigurations::new(self.handle.clone())
    }
    pub fn list_rate_based_rules(&self) -> fluent_builders::ListRateBasedRules<C, M, R> {
        fluent_builders::ListRateBasedRules::new(self.handle.clone())
    }
    pub fn list_regex_match_sets(&self) -> fluent_builders::ListRegexMatchSets<C, M, R> {
        fluent_builders::ListRegexMatchSets::new(self.handle.clone())
    }
    pub fn list_regex_pattern_sets(&self) -> fluent_builders::ListRegexPatternSets<C, M, R> {
        fluent_builders::ListRegexPatternSets::new(self.handle.clone())
    }
    pub fn list_rule_groups(&self) -> fluent_builders::ListRuleGroups<C, M, R> {
        fluent_builders::ListRuleGroups::new(self.handle.clone())
    }
    pub fn list_rules(&self) -> fluent_builders::ListRules<C, M, R> {
        fluent_builders::ListRules::new(self.handle.clone())
    }
    pub fn list_size_constraint_sets(&self) -> fluent_builders::ListSizeConstraintSets<C, M, R> {
        fluent_builders::ListSizeConstraintSets::new(self.handle.clone())
    }
    pub fn list_sql_injection_match_sets(
        &self,
    ) -> fluent_builders::ListSqlInjectionMatchSets<C, M, R> {
        fluent_builders::ListSqlInjectionMatchSets::new(self.handle.clone())
    }
    pub fn list_subscribed_rule_groups(
        &self,
    ) -> fluent_builders::ListSubscribedRuleGroups<C, M, R> {
        fluent_builders::ListSubscribedRuleGroups::new(self.handle.clone())
    }
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C, M, R> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    pub fn list_web_ac_ls(&self) -> fluent_builders::ListWebACLs<C, M, R> {
        fluent_builders::ListWebACLs::new(self.handle.clone())
    }
    pub fn list_xss_match_sets(&self) -> fluent_builders::ListXssMatchSets<C, M, R> {
        fluent_builders::ListXssMatchSets::new(self.handle.clone())
    }
    pub fn put_logging_configuration(&self) -> fluent_builders::PutLoggingConfiguration<C, M, R> {
        fluent_builders::PutLoggingConfiguration::new(self.handle.clone())
    }
    pub fn put_permission_policy(&self) -> fluent_builders::PutPermissionPolicy<C, M, R> {
        fluent_builders::PutPermissionPolicy::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C, M, R> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C, M, R> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_byte_match_set(&self) -> fluent_builders::UpdateByteMatchSet<C, M, R> {
        fluent_builders::UpdateByteMatchSet::new(self.handle.clone())
    }
    pub fn update_geo_match_set(&self) -> fluent_builders::UpdateGeoMatchSet<C, M, R> {
        fluent_builders::UpdateGeoMatchSet::new(self.handle.clone())
    }
    pub fn update_ip_set(&self) -> fluent_builders::UpdateIPSet<C, M, R> {
        fluent_builders::UpdateIPSet::new(self.handle.clone())
    }
    pub fn update_rate_based_rule(&self) -> fluent_builders::UpdateRateBasedRule<C, M, R> {
        fluent_builders::UpdateRateBasedRule::new(self.handle.clone())
    }
    pub fn update_regex_match_set(&self) -> fluent_builders::UpdateRegexMatchSet<C, M, R> {
        fluent_builders::UpdateRegexMatchSet::new(self.handle.clone())
    }
    pub fn update_regex_pattern_set(&self) -> fluent_builders::UpdateRegexPatternSet<C, M, R> {
        fluent_builders::UpdateRegexPatternSet::new(self.handle.clone())
    }
    pub fn update_rule(&self) -> fluent_builders::UpdateRule<C, M, R> {
        fluent_builders::UpdateRule::new(self.handle.clone())
    }
    pub fn update_rule_group(&self) -> fluent_builders::UpdateRuleGroup<C, M, R> {
        fluent_builders::UpdateRuleGroup::new(self.handle.clone())
    }
    pub fn update_size_constraint_set(&self) -> fluent_builders::UpdateSizeConstraintSet<C, M, R> {
        fluent_builders::UpdateSizeConstraintSet::new(self.handle.clone())
    }
    pub fn update_sql_injection_match_set(
        &self,
    ) -> fluent_builders::UpdateSqlInjectionMatchSet<C, M, R> {
        fluent_builders::UpdateSqlInjectionMatchSet::new(self.handle.clone())
    }
    pub fn update_web_acl(&self) -> fluent_builders::UpdateWebACL<C, M, R> {
        fluent_builders::UpdateWebACL::new(self.handle.clone())
    }
    pub fn update_xss_match_set(&self) -> fluent_builders::UpdateXssMatchSet<C, M, R> {
        fluent_builders::UpdateXssMatchSet::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct CreateByteMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_byte_match_set_input::Builder,
    }
    impl<C, M, R> CreateByteMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateByteMatchSetOutput,
            smithy_http::result::SdkError<crate::error::CreateByteMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateByteMatchSetInputOperationOutputAlias,
                crate::output::CreateByteMatchSetOutput,
                crate::error::CreateByteMatchSetError,
                crate::input::CreateByteMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description of the <a>ByteMatchSet</a>. You can't change <code>Name</code> after you create a
        /// <code>ByteMatchSet</code>.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateGeoMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_geo_match_set_input::Builder,
    }
    impl<C, M, R> CreateGeoMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateGeoMatchSetOutput,
            smithy_http::result::SdkError<crate::error::CreateGeoMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateGeoMatchSetInputOperationOutputAlias,
                crate::output::CreateGeoMatchSetOutput,
                crate::error::CreateGeoMatchSetError,
                crate::input::CreateGeoMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description of the <a>GeoMatchSet</a>. You can't change <code>Name</code> after you create the <code>GeoMatchSet</code>.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateIPSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_ip_set_input::Builder,
    }
    impl<C, M, R> CreateIPSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateIpSetOutput,
            smithy_http::result::SdkError<crate::error::CreateIPSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateIpSetInputOperationOutputAlias,
                crate::output::CreateIpSetOutput,
                crate::error::CreateIPSetError,
                crate::input::CreateIpSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description of the <a>IPSet</a>. You can't change <code>Name</code> after you create the <code>IPSet</code>.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateRateBasedRule<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_rate_based_rule_input::Builder,
    }
    impl<C, M, R> CreateRateBasedRule<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateRateBasedRuleOutput,
            smithy_http::result::SdkError<crate::error::CreateRateBasedRuleError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateRateBasedRuleInputOperationOutputAlias,
                crate::output::CreateRateBasedRuleOutput,
                crate::error::CreateRateBasedRuleError,
                crate::input::CreateRateBasedRuleInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description of the <a>RateBasedRule</a>. You can't
        /// change the name of a <code>RateBasedRule</code> after you create it.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A friendly name or description for the metrics for this <code>RateBasedRule</code>.
        /// The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain
        /// whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the
        /// <code>RateBasedRule</code>.</p>
        pub fn metric_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.metric_name(inp);
            self
        }
        pub fn set_metric_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_metric_name(input);
            self
        }
        /// <p>The field that AWS WAF uses to determine if requests are likely arriving from a single
        /// source and thus subject to rate monitoring. The only valid value for <code>RateKey</code>
        /// is <code>IP</code>. <code>IP</code> indicates that requests that arrive from the same IP
        /// address are subject to the <code>RateLimit</code> that is specified in
        /// the <code>RateBasedRule</code>.</p>
        pub fn rate_key(mut self, inp: crate::model::RateKey) -> Self {
            self.inner = self.inner.rate_key(inp);
            self
        }
        pub fn set_rate_key(mut self, input: std::option::Option<crate::model::RateKey>) -> Self {
            self.inner = self.inner.set_rate_key(input);
            self
        }
        /// <p>The maximum number of requests, which have an identical value in the field that is
        /// specified by <code>RateKey</code>, allowed in a five-minute period. If the number of
        /// requests exceeds the <code>RateLimit</code> and the other predicates specified in the rule
        /// are also met, AWS WAF triggers the action that is specified for this rule.</p>
        pub fn rate_limit(mut self, inp: i64) -> Self {
            self.inner = self.inner.rate_limit(inp);
            self
        }
        pub fn set_rate_limit(mut self, input: std::option::Option<i64>) -> Self {
            self.inner = self.inner.set_rate_limit(input);
            self
        }
        /// <p>The <code>ChangeToken</code> that you used to submit the
        /// <code>CreateRateBasedRule</code> request. You can also use this value to query the
        /// status of the request. For more information, see <a>GetChangeTokenStatus</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p></p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateRegexMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_regex_match_set_input::Builder,
    }
    impl<C, M, R> CreateRegexMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateRegexMatchSetOutput,
            smithy_http::result::SdkError<crate::error::CreateRegexMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateRegexMatchSetInputOperationOutputAlias,
                crate::output::CreateRegexMatchSetOutput,
                crate::error::CreateRegexMatchSetError,
                crate::input::CreateRegexMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description of the <a>RegexMatchSet</a>. You can't change <code>Name</code> after you create a
        /// <code>RegexMatchSet</code>.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateRegexPatternSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_regex_pattern_set_input::Builder,
    }
    impl<C, M, R> CreateRegexPatternSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateRegexPatternSetOutput,
            smithy_http::result::SdkError<crate::error::CreateRegexPatternSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateRegexPatternSetInputOperationOutputAlias,
                crate::output::CreateRegexPatternSetOutput,
                crate::error::CreateRegexPatternSetError,
                crate::input::CreateRegexPatternSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description of the <a>RegexPatternSet</a>. You can't change <code>Name</code> after you create a
        /// <code>RegexPatternSet</code>.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateRule<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_rule_input::Builder,
    }
    impl<C, M, R> CreateRule<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateRuleOutput,
            smithy_http::result::SdkError<crate::error::CreateRuleError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateRuleInputOperationOutputAlias,
                crate::output::CreateRuleOutput,
                crate::error::CreateRuleError,
                crate::input::CreateRuleInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description of the <a>Rule</a>. You can't change the name of a <code>Rule</code> after you create it.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A friendly name or description for the metrics for this <code>Rule</code>. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain
        /// whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the
        /// <code>Rule</code>.</p>
        pub fn metric_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.metric_name(inp);
            self
        }
        pub fn set_metric_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_metric_name(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p></p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateRuleGroup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_rule_group_input::Builder,
    }
    impl<C, M, R> CreateRuleGroup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateRuleGroupOutput,
            smithy_http::result::SdkError<crate::error::CreateRuleGroupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateRuleGroupInputOperationOutputAlias,
                crate::output::CreateRuleGroupOutput,
                crate::error::CreateRuleGroupError,
                crate::input::CreateRuleGroupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description of the <a>RuleGroup</a>. You can't change <code>Name</code> after you create a
        /// <code>RuleGroup</code>.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A friendly name or description for the metrics for this <code>RuleGroup</code>. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain
        /// whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the <code>RuleGroup</code>.</p>
        pub fn metric_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.metric_name(inp);
            self
        }
        pub fn set_metric_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_metric_name(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p></p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateSizeConstraintSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_size_constraint_set_input::Builder,
    }
    impl<C, M, R> CreateSizeConstraintSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateSizeConstraintSetOutput,
            smithy_http::result::SdkError<crate::error::CreateSizeConstraintSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateSizeConstraintSetInputOperationOutputAlias,
                crate::output::CreateSizeConstraintSetOutput,
                crate::error::CreateSizeConstraintSetError,
                crate::input::CreateSizeConstraintSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description of the <a>SizeConstraintSet</a>. You can't change <code>Name</code> after you create a
        /// <code>SizeConstraintSet</code>.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateSqlInjectionMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_sql_injection_match_set_input::Builder,
    }
    impl<C, M, R> CreateSqlInjectionMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateSqlInjectionMatchSetOutput,
            smithy_http::result::SdkError<crate::error::CreateSqlInjectionMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateSqlInjectionMatchSetInputOperationOutputAlias,
                crate::output::CreateSqlInjectionMatchSetOutput,
                crate::error::CreateSqlInjectionMatchSetError,
                crate::input::CreateSqlInjectionMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description for the <a>SqlInjectionMatchSet</a> that you're creating. You can't change <code>Name</code>
        /// after you create the <code>SqlInjectionMatchSet</code>.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateWebACL<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_web_acl_input::Builder,
    }
    impl<C, M, R> CreateWebACL<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateWebAclOutput,
            smithy_http::result::SdkError<crate::error::CreateWebACLError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateWebAclInputOperationOutputAlias,
                crate::output::CreateWebAclOutput,
                crate::error::CreateWebACLError,
                crate::input::CreateWebAclInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description of the <a>WebACL</a>. You can't change <code>Name</code> after you create the <code>WebACL</code>.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A friendly name or description for the metrics for this <code>WebACL</code>.The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain
        /// whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change <code>MetricName</code> after you create the
        /// <code>WebACL</code>.</p>
        pub fn metric_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.metric_name(inp);
            self
        }
        pub fn set_metric_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_metric_name(input);
            self
        }
        /// <p>The action that you want  AWS WAF to take when a request doesn't match the criteria specified in any of the <code>Rule</code>
        /// objects that are associated with the <code>WebACL</code>.</p>
        pub fn default_action(mut self, inp: crate::model::WafAction) -> Self {
            self.inner = self.inner.default_action(inp);
            self
        }
        pub fn set_default_action(
            mut self,
            input: std::option::Option<crate::model::WafAction>,
        ) -> Self {
            self.inner = self.inner.set_default_action(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p></p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateWebACLMigrationStack<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_web_acl_migration_stack_input::Builder,
    }
    impl<C, M, R> CreateWebACLMigrationStack<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateWebAclMigrationStackOutput,
            smithy_http::result::SdkError<crate::error::CreateWebACLMigrationStackError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateWebAclMigrationStackInputOperationOutputAlias,
                crate::output::CreateWebAclMigrationStackOutput,
                crate::error::CreateWebACLMigrationStackError,
                crate::input::CreateWebAclMigrationStackInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The UUID of the WAF Classic web ACL that you want to migrate to WAF v2.</p>
        pub fn web_acl_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.web_acl_id(inp);
            self
        }
        pub fn set_web_acl_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_web_acl_id(input);
            self
        }
        /// <p>The name of the Amazon S3 bucket to store the CloudFormation template in. The S3 bucket must be
        /// configured as follows for the migration:  </p>
        /// <ul>
        /// <li>
        /// <p>The bucket name must start with <code>aws-waf-migration-</code>. For example, <code>aws-waf-migration-my-web-acl</code>.</p>
        /// </li>
        /// <li>
        /// <p>The bucket must be in the Region where you are deploying the template. For example, for a web ACL in us-west-2, you must use an Amazon S3 bucket in us-west-2 and you must deploy the template stack to us-west-2. </p>
        /// </li>
        /// <li>
        /// <p>The bucket policies must permit the migration process to write data. For listings of the
        /// bucket policies, see the Examples section. </p>
        /// </li>
        /// </ul>
        pub fn s3_bucket_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.s3_bucket_name(inp);
            self
        }
        pub fn set_s3_bucket_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_s3_bucket_name(input);
            self
        }
        /// <p>Indicates whether to exclude entities that can't be migrated or to stop the migration.
        /// Set this to true to ignore unsupported entities in the web ACL during the migration. Otherwise, if AWS WAF encounters unsupported
        /// entities, it stops the process and throws an exception. </p>
        pub fn ignore_unsupported_type(mut self, inp: bool) -> Self {
            self.inner = self.inner.ignore_unsupported_type(inp);
            self
        }
        pub fn set_ignore_unsupported_type(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_ignore_unsupported_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateXssMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_xss_match_set_input::Builder,
    }
    impl<C, M, R> CreateXssMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateXssMatchSetOutput,
            smithy_http::result::SdkError<crate::error::CreateXssMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateXssMatchSetInputOperationOutputAlias,
                crate::output::CreateXssMatchSetOutput,
                crate::error::CreateXssMatchSetError,
                crate::input::CreateXssMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A friendly name or description for the <a>XssMatchSet</a> that you're creating. You can't change <code>Name</code>
        /// after you create the <code>XssMatchSet</code>.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteByteMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_byte_match_set_input::Builder,
    }
    impl<C, M, R> DeleteByteMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteByteMatchSetOutput,
            smithy_http::result::SdkError<crate::error::DeleteByteMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteByteMatchSetInputOperationOutputAlias,
                crate::output::DeleteByteMatchSetOutput,
                crate::error::DeleteByteMatchSetError,
                crate::input::DeleteByteMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>ByteMatchSetId</code> of the <a>ByteMatchSet</a> that you want to delete. <code>ByteMatchSetId</code> is returned by <a>CreateByteMatchSet</a> and by
        /// <a>ListByteMatchSets</a>.</p>
        pub fn byte_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.byte_match_set_id(inp);
            self
        }
        pub fn set_byte_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_byte_match_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteGeoMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_geo_match_set_input::Builder,
    }
    impl<C, M, R> DeleteGeoMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteGeoMatchSetOutput,
            smithy_http::result::SdkError<crate::error::DeleteGeoMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteGeoMatchSetInputOperationOutputAlias,
                crate::output::DeleteGeoMatchSetOutput,
                crate::error::DeleteGeoMatchSetError,
                crate::input::DeleteGeoMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>GeoMatchSetID</code> of the <a>GeoMatchSet</a> that you want to delete. <code>GeoMatchSetId</code> is returned by <a>CreateGeoMatchSet</a> and by
        /// <a>ListGeoMatchSets</a>.</p>
        pub fn geo_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.geo_match_set_id(inp);
            self
        }
        pub fn set_geo_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_geo_match_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteIPSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_ip_set_input::Builder,
    }
    impl<C, M, R> DeleteIPSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteIpSetOutput,
            smithy_http::result::SdkError<crate::error::DeleteIPSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteIpSetInputOperationOutputAlias,
                crate::output::DeleteIpSetOutput,
                crate::error::DeleteIPSetError,
                crate::input::DeleteIpSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>IPSetId</code> of the <a>IPSet</a> that you want to delete. <code>IPSetId</code> is returned by <a>CreateIPSet</a> and by
        /// <a>ListIPSets</a>.</p>
        pub fn ip_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ip_set_id(inp);
            self
        }
        pub fn set_ip_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ip_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteLoggingConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_logging_configuration_input::Builder,
    }
    impl<C, M, R> DeleteLoggingConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteLoggingConfigurationOutput,
            smithy_http::result::SdkError<crate::error::DeleteLoggingConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteLoggingConfigurationInputOperationOutputAlias,
                crate::output::DeleteLoggingConfigurationOutput,
                crate::error::DeleteLoggingConfigurationError,
                crate::input::DeleteLoggingConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the web ACL from which you want to delete the <a>LoggingConfiguration</a>.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeletePermissionPolicy<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_permission_policy_input::Builder,
    }
    impl<C, M, R> DeletePermissionPolicy<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeletePermissionPolicyOutput,
            smithy_http::result::SdkError<crate::error::DeletePermissionPolicyError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeletePermissionPolicyInputOperationOutputAlias,
                crate::output::DeletePermissionPolicyOutput,
                crate::error::DeletePermissionPolicyError,
                crate::input::DeletePermissionPolicyInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the RuleGroup from which you want to delete the policy.</p>
        /// <p>The user making the request must be the owner of the RuleGroup.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteRateBasedRule<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_rate_based_rule_input::Builder,
    }
    impl<C, M, R> DeleteRateBasedRule<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteRateBasedRuleOutput,
            smithy_http::result::SdkError<crate::error::DeleteRateBasedRuleError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteRateBasedRuleInputOperationOutputAlias,
                crate::output::DeleteRateBasedRuleOutput,
                crate::error::DeleteRateBasedRuleError,
                crate::input::DeleteRateBasedRuleInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RuleId</code> of the <a>RateBasedRule</a> that you want to
        /// delete. <code>RuleId</code> is returned by <a>CreateRateBasedRule</a> and by
        /// <a>ListRateBasedRules</a>.</p>
        pub fn rule_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_id(inp);
            self
        }
        pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_rule_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteRegexMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_regex_match_set_input::Builder,
    }
    impl<C, M, R> DeleteRegexMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteRegexMatchSetOutput,
            smithy_http::result::SdkError<crate::error::DeleteRegexMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteRegexMatchSetInputOperationOutputAlias,
                crate::output::DeleteRegexMatchSetOutput,
                crate::error::DeleteRegexMatchSetError,
                crate::input::DeleteRegexMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RegexMatchSetId</code> of the <a>RegexMatchSet</a> that you want to delete. <code>RegexMatchSetId</code> is returned by <a>CreateRegexMatchSet</a> and by
        /// <a>ListRegexMatchSets</a>.</p>
        pub fn regex_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.regex_match_set_id(inp);
            self
        }
        pub fn set_regex_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_regex_match_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteRegexPatternSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_regex_pattern_set_input::Builder,
    }
    impl<C, M, R> DeleteRegexPatternSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteRegexPatternSetOutput,
            smithy_http::result::SdkError<crate::error::DeleteRegexPatternSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteRegexPatternSetInputOperationOutputAlias,
                crate::output::DeleteRegexPatternSetOutput,
                crate::error::DeleteRegexPatternSetError,
                crate::input::DeleteRegexPatternSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RegexPatternSetId</code> of the <a>RegexPatternSet</a> that you want to delete. <code>RegexPatternSetId</code> is returned by <a>CreateRegexPatternSet</a> and by
        /// <a>ListRegexPatternSets</a>.</p>
        pub fn regex_pattern_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.regex_pattern_set_id(inp);
            self
        }
        pub fn set_regex_pattern_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_regex_pattern_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteRule<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_rule_input::Builder,
    }
    impl<C, M, R> DeleteRule<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteRuleOutput,
            smithy_http::result::SdkError<crate::error::DeleteRuleError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteRuleInputOperationOutputAlias,
                crate::output::DeleteRuleOutput,
                crate::error::DeleteRuleError,
                crate::input::DeleteRuleInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RuleId</code> of the <a>Rule</a> that you want to delete. <code>RuleId</code> is returned by <a>CreateRule</a> and by
        /// <a>ListRules</a>.</p>
        pub fn rule_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_id(inp);
            self
        }
        pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_rule_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteRuleGroup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_rule_group_input::Builder,
    }
    impl<C, M, R> DeleteRuleGroup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteRuleGroupOutput,
            smithy_http::result::SdkError<crate::error::DeleteRuleGroupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteRuleGroupInputOperationOutputAlias,
                crate::output::DeleteRuleGroupOutput,
                crate::error::DeleteRuleGroupError,
                crate::input::DeleteRuleGroupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RuleGroupId</code> of the <a>RuleGroup</a> that you want to delete. <code>RuleGroupId</code> is returned by <a>CreateRuleGroup</a> and by
        /// <a>ListRuleGroups</a>.</p>
        pub fn rule_group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_group_id(inp);
            self
        }
        pub fn set_rule_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_rule_group_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteSizeConstraintSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_size_constraint_set_input::Builder,
    }
    impl<C, M, R> DeleteSizeConstraintSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteSizeConstraintSetOutput,
            smithy_http::result::SdkError<crate::error::DeleteSizeConstraintSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteSizeConstraintSetInputOperationOutputAlias,
                crate::output::DeleteSizeConstraintSetOutput,
                crate::error::DeleteSizeConstraintSetError,
                crate::input::DeleteSizeConstraintSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>SizeConstraintSetId</code> of the <a>SizeConstraintSet</a> that you want to delete. <code>SizeConstraintSetId</code>
        /// is returned by <a>CreateSizeConstraintSet</a> and by <a>ListSizeConstraintSets</a>.</p>
        pub fn size_constraint_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.size_constraint_set_id(inp);
            self
        }
        pub fn set_size_constraint_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_size_constraint_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteSqlInjectionMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_sql_injection_match_set_input::Builder,
    }
    impl<C, M, R> DeleteSqlInjectionMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteSqlInjectionMatchSetOutput,
            smithy_http::result::SdkError<crate::error::DeleteSqlInjectionMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteSqlInjectionMatchSetInputOperationOutputAlias,
                crate::output::DeleteSqlInjectionMatchSetOutput,
                crate::error::DeleteSqlInjectionMatchSetError,
                crate::input::DeleteSqlInjectionMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>SqlInjectionMatchSetId</code> of the <a>SqlInjectionMatchSet</a> that you want to delete.
        /// <code>SqlInjectionMatchSetId</code> is returned by <a>CreateSqlInjectionMatchSet</a> and by <a>ListSqlInjectionMatchSets</a>.</p>
        pub fn sql_injection_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sql_injection_match_set_id(inp);
            self
        }
        pub fn set_sql_injection_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_sql_injection_match_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteWebACL<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_web_acl_input::Builder,
    }
    impl<C, M, R> DeleteWebACL<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteWebAclOutput,
            smithy_http::result::SdkError<crate::error::DeleteWebACLError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteWebAclInputOperationOutputAlias,
                crate::output::DeleteWebAclOutput,
                crate::error::DeleteWebACLError,
                crate::input::DeleteWebAclInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>WebACLId</code> of the <a>WebACL</a> that you want to delete. <code>WebACLId</code> is returned by <a>CreateWebACL</a> and by
        /// <a>ListWebACLs</a>.</p>
        pub fn web_acl_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.web_acl_id(inp);
            self
        }
        pub fn set_web_acl_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_web_acl_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteXssMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_xss_match_set_input::Builder,
    }
    impl<C, M, R> DeleteXssMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteXssMatchSetOutput,
            smithy_http::result::SdkError<crate::error::DeleteXssMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteXssMatchSetInputOperationOutputAlias,
                crate::output::DeleteXssMatchSetOutput,
                crate::error::DeleteXssMatchSetError,
                crate::input::DeleteXssMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>XssMatchSetId</code> of the <a>XssMatchSet</a> that you want to delete.
        /// <code>XssMatchSetId</code> is returned by <a>CreateXssMatchSet</a> and by <a>ListXssMatchSets</a>.</p>
        pub fn xss_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.xss_match_set_id(inp);
            self
        }
        pub fn set_xss_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_xss_match_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetByteMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_byte_match_set_input::Builder,
    }
    impl<C, M, R> GetByteMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetByteMatchSetOutput,
            smithy_http::result::SdkError<crate::error::GetByteMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetByteMatchSetInputOperationOutputAlias,
                crate::output::GetByteMatchSetOutput,
                crate::error::GetByteMatchSetError,
                crate::input::GetByteMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>ByteMatchSetId</code> of the <a>ByteMatchSet</a> that you want to get. <code>ByteMatchSetId</code> is returned by
        /// <a>CreateByteMatchSet</a> and by <a>ListByteMatchSets</a>.</p>
        pub fn byte_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.byte_match_set_id(inp);
            self
        }
        pub fn set_byte_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_byte_match_set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetChangeToken<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_change_token_input::Builder,
    }
    impl<C, M, R> GetChangeToken<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetChangeTokenOutput,
            smithy_http::result::SdkError<crate::error::GetChangeTokenError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetChangeTokenInputOperationOutputAlias,
                crate::output::GetChangeTokenOutput,
                crate::error::GetChangeTokenError,
                crate::input::GetChangeTokenInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetChangeTokenStatus<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_change_token_status_input::Builder,
    }
    impl<C, M, R> GetChangeTokenStatus<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetChangeTokenStatusOutput,
            smithy_http::result::SdkError<crate::error::GetChangeTokenStatusError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetChangeTokenStatusInputOperationOutputAlias,
                crate::output::GetChangeTokenStatusOutput,
                crate::error::GetChangeTokenStatusError,
                crate::input::GetChangeTokenStatusInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The change token for which you want to get the status. This change token was previously returned in the <code>GetChangeToken</code> response.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetGeoMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_geo_match_set_input::Builder,
    }
    impl<C, M, R> GetGeoMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetGeoMatchSetOutput,
            smithy_http::result::SdkError<crate::error::GetGeoMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetGeoMatchSetInputOperationOutputAlias,
                crate::output::GetGeoMatchSetOutput,
                crate::error::GetGeoMatchSetError,
                crate::input::GetGeoMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>GeoMatchSetId</code> of the <a>GeoMatchSet</a> that you want to get. <code>GeoMatchSetId</code> is returned by <a>CreateGeoMatchSet</a> and by
        /// <a>ListGeoMatchSets</a>.</p>
        pub fn geo_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.geo_match_set_id(inp);
            self
        }
        pub fn set_geo_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_geo_match_set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetIPSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_ip_set_input::Builder,
    }
    impl<C, M, R> GetIPSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetIpSetOutput,
            smithy_http::result::SdkError<crate::error::GetIPSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetIpSetInputOperationOutputAlias,
                crate::output::GetIpSetOutput,
                crate::error::GetIPSetError,
                crate::input::GetIpSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>IPSetId</code> of the <a>IPSet</a> that you want to get. <code>IPSetId</code> is returned by <a>CreateIPSet</a> and by
        /// <a>ListIPSets</a>.</p>
        pub fn ip_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ip_set_id(inp);
            self
        }
        pub fn set_ip_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ip_set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetLoggingConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_logging_configuration_input::Builder,
    }
    impl<C, M, R> GetLoggingConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetLoggingConfigurationOutput,
            smithy_http::result::SdkError<crate::error::GetLoggingConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetLoggingConfigurationInputOperationOutputAlias,
                crate::output::GetLoggingConfigurationOutput,
                crate::error::GetLoggingConfigurationError,
                crate::input::GetLoggingConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the web ACL for which you want to get the <a>LoggingConfiguration</a>.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetPermissionPolicy<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_permission_policy_input::Builder,
    }
    impl<C, M, R> GetPermissionPolicy<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetPermissionPolicyOutput,
            smithy_http::result::SdkError<crate::error::GetPermissionPolicyError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetPermissionPolicyInputOperationOutputAlias,
                crate::output::GetPermissionPolicyOutput,
                crate::error::GetPermissionPolicyError,
                crate::input::GetPermissionPolicyInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the RuleGroup for which you want to get the policy.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetRateBasedRule<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_rate_based_rule_input::Builder,
    }
    impl<C, M, R> GetRateBasedRule<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetRateBasedRuleOutput,
            smithy_http::result::SdkError<crate::error::GetRateBasedRuleError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetRateBasedRuleInputOperationOutputAlias,
                crate::output::GetRateBasedRuleOutput,
                crate::error::GetRateBasedRuleError,
                crate::input::GetRateBasedRuleInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RuleId</code> of the <a>RateBasedRule</a> that you want to get.
        /// <code>RuleId</code> is returned by <a>CreateRateBasedRule</a> and by <a>ListRateBasedRules</a>.</p>
        pub fn rule_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_id(inp);
            self
        }
        pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_rule_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetRateBasedRuleManagedKeys<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_rate_based_rule_managed_keys_input::Builder,
    }
    impl<C, M, R> GetRateBasedRuleManagedKeys<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetRateBasedRuleManagedKeysOutput,
            smithy_http::result::SdkError<crate::error::GetRateBasedRuleManagedKeysError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetRateBasedRuleManagedKeysInputOperationOutputAlias,
                crate::output::GetRateBasedRuleManagedKeysOutput,
                crate::error::GetRateBasedRuleManagedKeysError,
                crate::input::GetRateBasedRuleManagedKeysInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RuleId</code> of the <a>RateBasedRule</a> for which you want to
        /// get a list of <code>ManagedKeys</code>. <code>RuleId</code> is returned by <a>CreateRateBasedRule</a> and by <a>ListRateBasedRules</a>.</p>
        pub fn rule_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_id(inp);
            self
        }
        pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_rule_id(input);
            self
        }
        /// <p>A null value and not currently used. Do not include this in your request.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetRegexMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_regex_match_set_input::Builder,
    }
    impl<C, M, R> GetRegexMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetRegexMatchSetOutput,
            smithy_http::result::SdkError<crate::error::GetRegexMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetRegexMatchSetInputOperationOutputAlias,
                crate::output::GetRegexMatchSetOutput,
                crate::error::GetRegexMatchSetError,
                crate::input::GetRegexMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RegexMatchSetId</code> of the <a>RegexMatchSet</a> that you want to get. <code>RegexMatchSetId</code> is returned by
        /// <a>CreateRegexMatchSet</a> and by <a>ListRegexMatchSets</a>.</p>
        pub fn regex_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.regex_match_set_id(inp);
            self
        }
        pub fn set_regex_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_regex_match_set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetRegexPatternSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_regex_pattern_set_input::Builder,
    }
    impl<C, M, R> GetRegexPatternSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetRegexPatternSetOutput,
            smithy_http::result::SdkError<crate::error::GetRegexPatternSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetRegexPatternSetInputOperationOutputAlias,
                crate::output::GetRegexPatternSetOutput,
                crate::error::GetRegexPatternSetError,
                crate::input::GetRegexPatternSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RegexPatternSetId</code> of the <a>RegexPatternSet</a> that you want to get. <code>RegexPatternSetId</code> is returned by
        /// <a>CreateRegexPatternSet</a> and by <a>ListRegexPatternSets</a>.</p>
        pub fn regex_pattern_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.regex_pattern_set_id(inp);
            self
        }
        pub fn set_regex_pattern_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_regex_pattern_set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetRule<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_rule_input::Builder,
    }
    impl<C, M, R> GetRule<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetRuleOutput,
            smithy_http::result::SdkError<crate::error::GetRuleError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetRuleInputOperationOutputAlias,
                crate::output::GetRuleOutput,
                crate::error::GetRuleError,
                crate::input::GetRuleInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RuleId</code> of the <a>Rule</a> that you want to get. <code>RuleId</code> is returned by <a>CreateRule</a> and by
        /// <a>ListRules</a>.</p>
        pub fn rule_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_id(inp);
            self
        }
        pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_rule_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetRuleGroup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_rule_group_input::Builder,
    }
    impl<C, M, R> GetRuleGroup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetRuleGroupOutput,
            smithy_http::result::SdkError<crate::error::GetRuleGroupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetRuleGroupInputOperationOutputAlias,
                crate::output::GetRuleGroupOutput,
                crate::error::GetRuleGroupError,
                crate::input::GetRuleGroupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RuleGroupId</code> of the <a>RuleGroup</a> that you want to get. <code>RuleGroupId</code> is returned by <a>CreateRuleGroup</a> and by
        /// <a>ListRuleGroups</a>.</p>
        pub fn rule_group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_group_id(inp);
            self
        }
        pub fn set_rule_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_rule_group_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetSampledRequests<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_sampled_requests_input::Builder,
    }
    impl<C, M, R> GetSampledRequests<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetSampledRequestsOutput,
            smithy_http::result::SdkError<crate::error::GetSampledRequestsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetSampledRequestsInputOperationOutputAlias,
                crate::output::GetSampledRequestsOutput,
                crate::error::GetSampledRequestsError,
                crate::input::GetSampledRequestsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>WebACLId</code> of the <code>WebACL</code> for which you want <code>GetSampledRequests</code> to return a sample of requests.</p>
        pub fn web_acl_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.web_acl_id(inp);
            self
        }
        pub fn set_web_acl_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_web_acl_id(input);
            self
        }
        /// <p>
        /// <code>RuleId</code> is one of three values:</p>
        /// <ul>
        /// <li>
        /// <p>The <code>RuleId</code> of the <code>Rule</code> or the <code>RuleGroupId</code> of the <code>RuleGroup</code> for which you want <code>GetSampledRequests</code> to return a sample of requests.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Default_Action</code>, which causes <code>GetSampledRequests</code> to return a sample of the requests that
        /// didn't match any of the rules in the specified <code>WebACL</code>.</p>
        /// </li>
        /// </ul>
        pub fn rule_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_id(inp);
            self
        }
        pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_rule_id(input);
            self
        }
        /// <p>The start date and time and the end date and time of the range for which you want <code>GetSampledRequests</code> to return a
        /// sample of requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special  
        /// designator, <code>Z</code>. For example, <code>"2016-09-27T14:50Z"</code>. You can specify any time range in the previous three hours.</p>
        pub fn time_window(mut self, inp: crate::model::TimeWindow) -> Self {
            self.inner = self.inner.time_window(inp);
            self
        }
        pub fn set_time_window(
            mut self,
            input: std::option::Option<crate::model::TimeWindow>,
        ) -> Self {
            self.inner = self.inner.set_time_window(input);
            self
        }
        /// <p>The number of requests that you want AWS WAF to return from among the first 5,000 requests that your AWS resource received
        /// during the time range. If your resource received fewer requests than the value of <code>MaxItems</code>, <code>GetSampledRequests</code>
        /// returns information about all of them. </p>
        pub fn max_items(mut self, inp: i64) -> Self {
            self.inner = self.inner.max_items(inp);
            self
        }
        pub fn set_max_items(mut self, input: std::option::Option<i64>) -> Self {
            self.inner = self.inner.set_max_items(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetSizeConstraintSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_size_constraint_set_input::Builder,
    }
    impl<C, M, R> GetSizeConstraintSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetSizeConstraintSetOutput,
            smithy_http::result::SdkError<crate::error::GetSizeConstraintSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetSizeConstraintSetInputOperationOutputAlias,
                crate::output::GetSizeConstraintSetOutput,
                crate::error::GetSizeConstraintSetError,
                crate::input::GetSizeConstraintSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>SizeConstraintSetId</code> of the <a>SizeConstraintSet</a> that you want to get. <code>SizeConstraintSetId</code> is returned by
        /// <a>CreateSizeConstraintSet</a> and by <a>ListSizeConstraintSets</a>.</p>
        pub fn size_constraint_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.size_constraint_set_id(inp);
            self
        }
        pub fn set_size_constraint_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_size_constraint_set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetSqlInjectionMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_sql_injection_match_set_input::Builder,
    }
    impl<C, M, R> GetSqlInjectionMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetSqlInjectionMatchSetOutput,
            smithy_http::result::SdkError<crate::error::GetSqlInjectionMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetSqlInjectionMatchSetInputOperationOutputAlias,
                crate::output::GetSqlInjectionMatchSetOutput,
                crate::error::GetSqlInjectionMatchSetError,
                crate::input::GetSqlInjectionMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>SqlInjectionMatchSetId</code> of the <a>SqlInjectionMatchSet</a> that you want to get. <code>SqlInjectionMatchSetId</code>
        /// is returned by <a>CreateSqlInjectionMatchSet</a> and by <a>ListSqlInjectionMatchSets</a>.</p>
        pub fn sql_injection_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sql_injection_match_set_id(inp);
            self
        }
        pub fn set_sql_injection_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_sql_injection_match_set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetWebACL<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_web_acl_input::Builder,
    }
    impl<C, M, R> GetWebACL<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetWebAclOutput,
            smithy_http::result::SdkError<crate::error::GetWebACLError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetWebAclInputOperationOutputAlias,
                crate::output::GetWebAclOutput,
                crate::error::GetWebACLError,
                crate::input::GetWebAclInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>WebACLId</code> of the <a>WebACL</a> that you want to get. <code>WebACLId</code> is returned by <a>CreateWebACL</a> and by
        /// <a>ListWebACLs</a>.</p>
        pub fn web_acl_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.web_acl_id(inp);
            self
        }
        pub fn set_web_acl_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_web_acl_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetXssMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_xss_match_set_input::Builder,
    }
    impl<C, M, R> GetXssMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetXssMatchSetOutput,
            smithy_http::result::SdkError<crate::error::GetXssMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetXssMatchSetInputOperationOutputAlias,
                crate::output::GetXssMatchSetOutput,
                crate::error::GetXssMatchSetError,
                crate::input::GetXssMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>XssMatchSetId</code> of the <a>XssMatchSet</a> that you want to get. <code>XssMatchSetId</code>
        /// is returned by <a>CreateXssMatchSet</a> and by <a>ListXssMatchSets</a>.</p>
        pub fn xss_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.xss_match_set_id(inp);
            self
        }
        pub fn set_xss_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_xss_match_set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListActivatedRulesInRuleGroup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_activated_rules_in_rule_group_input::Builder,
    }
    impl<C, M, R> ListActivatedRulesInRuleGroup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListActivatedRulesInRuleGroupOutput,
            smithy_http::result::SdkError<crate::error::ListActivatedRulesInRuleGroupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListActivatedRulesInRuleGroupInputOperationOutputAlias,
                crate::output::ListActivatedRulesInRuleGroupOutput,
                crate::error::ListActivatedRulesInRuleGroupError,
                crate::input::ListActivatedRulesInRuleGroupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RuleGroupId</code> of the <a>RuleGroup</a> for which you want to get a list of <a>ActivatedRule</a> objects.</p>
        pub fn rule_group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_group_id(inp);
            self
        }
        pub fn set_rule_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_rule_group_id(input);
            self
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>ActivatedRules</code> than the value of <code>Limit</code>,
        /// AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>ActivatedRules</code>.
        /// For the second and subsequent <code>ListActivatedRulesInRuleGroup</code> requests, specify the value of <code>NextMarker</code>
        /// from the previous response to get information about another batch of <code>ActivatedRules</code>.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>ActivatedRules</code> that you want AWS WAF to return for this request. If you have more <code>ActivatedRules</code> than the number that you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of <code>ActivatedRules</code>.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListByteMatchSets<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_byte_match_sets_input::Builder,
    }
    impl<C, M, R> ListByteMatchSets<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListByteMatchSetsOutput,
            smithy_http::result::SdkError<crate::error::ListByteMatchSetsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListByteMatchSetsInputOperationOutputAlias,
                crate::output::ListByteMatchSetsOutput,
                crate::error::ListByteMatchSetsError,
                crate::input::ListByteMatchSetsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>ByteMatchSets</code> than the value of <code>Limit</code>,
        /// AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>ByteMatchSets</code>.
        /// For the second and subsequent <code>ListByteMatchSets</code> requests, specify the value of <code>NextMarker</code>
        /// from the previous response to get information about another batch of <code>ByteMatchSets</code>.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>ByteMatchSet</code> objects that you want AWS WAF to return for this request. If you have more
        /// <code>ByteMatchSets</code> objects than the number you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of <code>ByteMatchSet</code> objects.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListGeoMatchSets<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_geo_match_sets_input::Builder,
    }
    impl<C, M, R> ListGeoMatchSets<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListGeoMatchSetsOutput,
            smithy_http::result::SdkError<crate::error::ListGeoMatchSetsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListGeoMatchSetsInputOperationOutputAlias,
                crate::output::ListGeoMatchSetsOutput,
                crate::error::ListGeoMatchSetsError,
                crate::input::ListGeoMatchSetsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>GeoMatchSet</code>s than the value of <code>Limit</code>,
        /// AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>GeoMatchSet</code> objects.
        /// For the second and subsequent <code>ListGeoMatchSets</code> requests, specify the value of <code>NextMarker</code>
        /// from the previous response to get information about another batch of <code>GeoMatchSet</code> objects.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>GeoMatchSet</code> objects that you want AWS WAF to return for this request. If you have more
        /// <code>GeoMatchSet</code> objects than the number you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of <code>GeoMatchSet</code> objects.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListIPSets<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_ip_sets_input::Builder,
    }
    impl<C, M, R> ListIPSets<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListIpSetsOutput,
            smithy_http::result::SdkError<crate::error::ListIPSetsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListIpSetsInputOperationOutputAlias,
                crate::output::ListIpSetsOutput,
                crate::error::ListIPSetsError,
                crate::input::ListIpSetsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>AWS WAF returns a <code>NextMarker</code> value in the response that allows you to
        /// list another group of <code>IPSets</code>. For the second and subsequent
        /// <code>ListIPSets</code> requests, specify the value of <code>NextMarker</code> from the
        /// previous response to get information about another batch of <code>IPSets</code>.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>IPSet</code> objects that you want AWS WAF to return for this request. If you have more
        /// <code>IPSet</code> objects than the number you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of <code>IPSet</code> objects.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListLoggingConfigurations<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_logging_configurations_input::Builder,
    }
    impl<C, M, R> ListLoggingConfigurations<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListLoggingConfigurationsOutput,
            smithy_http::result::SdkError<crate::error::ListLoggingConfigurationsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListLoggingConfigurationsInputOperationOutputAlias,
                crate::output::ListLoggingConfigurationsOutput,
                crate::error::ListLoggingConfigurationsError,
                crate::input::ListLoggingConfigurationsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>LoggingConfigurations</code> than the value of <code>Limit</code>,
        /// AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>LoggingConfigurations</code>.
        /// For the second and subsequent <code>ListLoggingConfigurations</code> requests, specify the value of <code>NextMarker</code>
        /// from the previous response to get information about another batch of <code>ListLoggingConfigurations</code>.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>LoggingConfigurations</code> that you want AWS WAF to return for this request. If you have more <code>LoggingConfigurations</code> than the number that you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>LoggingConfigurations</code>.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListRateBasedRules<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_rate_based_rules_input::Builder,
    }
    impl<C, M, R> ListRateBasedRules<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListRateBasedRulesOutput,
            smithy_http::result::SdkError<crate::error::ListRateBasedRulesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListRateBasedRulesInputOperationOutputAlias,
                crate::output::ListRateBasedRulesOutput,
                crate::error::ListRateBasedRulesError,
                crate::input::ListRateBasedRulesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>Rules</code>
        /// than the value of <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the
        /// response that allows you to list another group of <code>Rules</code>. For the second and
        /// subsequent <code>ListRateBasedRules</code> requests, specify the value of
        /// <code>NextMarker</code> from the previous response to get information about another
        /// batch of <code>Rules</code>.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>Rules</code> that you want AWS WAF to return for this
        /// request. If you have more <code>Rules</code> than the number that you specify for
        /// <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can
        /// use to get another batch of <code>Rules</code>.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListRegexMatchSets<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_regex_match_sets_input::Builder,
    }
    impl<C, M, R> ListRegexMatchSets<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListRegexMatchSetsOutput,
            smithy_http::result::SdkError<crate::error::ListRegexMatchSetsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListRegexMatchSetsInputOperationOutputAlias,
                crate::output::ListRegexMatchSetsOutput,
                crate::error::ListRegexMatchSetsError,
                crate::input::ListRegexMatchSetsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>RegexMatchSet</code> objects than the value of <code>Limit</code>,
        /// AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>ByteMatchSets</code>.
        /// For the second and subsequent <code>ListRegexMatchSets</code> requests, specify the value of <code>NextMarker</code>
        /// from the previous response to get information about another batch of <code>RegexMatchSet</code> objects.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>RegexMatchSet</code> objects that you want AWS WAF to return for this request. If you have more
        /// <code>RegexMatchSet</code> objects than the number you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of <code>RegexMatchSet</code> objects.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListRegexPatternSets<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_regex_pattern_sets_input::Builder,
    }
    impl<C, M, R> ListRegexPatternSets<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListRegexPatternSetsOutput,
            smithy_http::result::SdkError<crate::error::ListRegexPatternSetsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListRegexPatternSetsInputOperationOutputAlias,
                crate::output::ListRegexPatternSetsOutput,
                crate::error::ListRegexPatternSetsError,
                crate::input::ListRegexPatternSetsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>RegexPatternSet</code> objects than the value of <code>Limit</code>,
        /// AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>RegexPatternSet</code> objects.
        /// For the second and subsequent <code>ListRegexPatternSets</code> requests, specify the value of <code>NextMarker</code>
        /// from the previous response to get information about another batch of <code>RegexPatternSet</code> objects.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>RegexPatternSet</code> objects that you want AWS WAF to return for this request. If you have more
        /// <code>RegexPatternSet</code> objects than the number you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of <code>RegexPatternSet</code> objects.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListRuleGroups<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_rule_groups_input::Builder,
    }
    impl<C, M, R> ListRuleGroups<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListRuleGroupsOutput,
            smithy_http::result::SdkError<crate::error::ListRuleGroupsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListRuleGroupsInputOperationOutputAlias,
                crate::output::ListRuleGroupsOutput,
                crate::error::ListRuleGroupsError,
                crate::input::ListRuleGroupsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>RuleGroups</code> than the value of <code>Limit</code>,
        /// AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>RuleGroups</code>.
        /// For the second and subsequent <code>ListRuleGroups</code> requests, specify the value of <code>NextMarker</code>
        /// from the previous response to get information about another batch of <code>RuleGroups</code>.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>RuleGroups</code> that you want AWS WAF to return for this request. If you have more <code>RuleGroups</code> than the number that you specify for <code>Limit</code>, the response includes a <code>NextMarker</code> value that you can use to get another batch of <code>RuleGroups</code>.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListRules<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_rules_input::Builder,
    }
    impl<C, M, R> ListRules<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListRulesOutput,
            smithy_http::result::SdkError<crate::error::ListRulesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListRulesInputOperationOutputAlias,
                crate::output::ListRulesOutput,
                crate::error::ListRulesError,
                crate::input::ListRulesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>Rules</code> than the value of <code>Limit</code>,
        /// AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>Rules</code>.
        /// For the second and subsequent <code>ListRules</code> requests, specify the value of <code>NextMarker</code>
        /// from the previous response to get information about another batch of <code>Rules</code>.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>Rules</code> that you want AWS WAF to return for this request. If you have more       <code>Rules</code> than the number that you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of <code>Rules</code>.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListSizeConstraintSets<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_size_constraint_sets_input::Builder,
    }
    impl<C, M, R> ListSizeConstraintSets<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListSizeConstraintSetsOutput,
            smithy_http::result::SdkError<crate::error::ListSizeConstraintSetsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListSizeConstraintSetsInputOperationOutputAlias,
                crate::output::ListSizeConstraintSetsOutput,
                crate::error::ListSizeConstraintSetsError,
                crate::input::ListSizeConstraintSetsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>SizeConstraintSets</code> than the value of <code>Limit</code>,
        /// AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of <code>SizeConstraintSets</code>.
        /// For the second and subsequent <code>ListSizeConstraintSets</code> requests, specify the value of <code>NextMarker</code>       from the previous response to get information about another batch of <code>SizeConstraintSets</code>.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>SizeConstraintSet</code> objects that you want AWS WAF to return for this request. If you have more
        /// <code>SizeConstraintSets</code> objects than the number you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of <code>SizeConstraintSet</code> objects.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListSqlInjectionMatchSets<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_sql_injection_match_sets_input::Builder,
    }
    impl<C, M, R> ListSqlInjectionMatchSets<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListSqlInjectionMatchSetsOutput,
            smithy_http::result::SdkError<crate::error::ListSqlInjectionMatchSetsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListSqlInjectionMatchSetsInputOperationOutputAlias,
                crate::output::ListSqlInjectionMatchSetsOutput,
                crate::error::ListSqlInjectionMatchSetsError,
                crate::input::ListSqlInjectionMatchSetsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <a>SqlInjectionMatchSet</a> objects than the value of
        /// <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of
        /// <code>SqlInjectionMatchSets</code>. For the second and subsequent <code>ListSqlInjectionMatchSets</code> requests, specify the
        /// value of <code>NextMarker</code> from the previous response to get information about another batch of <code>SqlInjectionMatchSets</code>.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <a>SqlInjectionMatchSet</a> objects that you want AWS WAF to return for this request. If you have more
        /// <code>SqlInjectionMatchSet</code> objects than the number you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of <code>Rules</code>.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListSubscribedRuleGroups<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_subscribed_rule_groups_input::Builder,
    }
    impl<C, M, R> ListSubscribedRuleGroups<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListSubscribedRuleGroupsOutput,
            smithy_http::result::SdkError<crate::error::ListSubscribedRuleGroupsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListSubscribedRuleGroupsInputOperationOutputAlias,
                crate::output::ListSubscribedRuleGroupsOutput,
                crate::error::ListSubscribedRuleGroupsError,
                crate::input::ListSubscribedRuleGroupsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>ByteMatchSets</code>subscribed rule groups than the value of <code>Limit</code>,
        /// AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of subscribed rule groups.
        /// For the second and subsequent <code>ListSubscribedRuleGroupsRequest</code> requests, specify the value of <code>NextMarker</code>
        /// from the previous response to get information about another batch of subscribed rule groups.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of subscribed rule groups that you want AWS WAF to return for this request. If you have more
        /// objects than the number you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of objects.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C, M, R> ListTagsForResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTagsForResourceInputOperationOutputAlias,
                crate::output::ListTagsForResourceOutput,
                crate::error::ListTagsForResourceError,
                crate::input::ListTagsForResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p></p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p></p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p></p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListWebACLs<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_web_ac_ls_input::Builder,
    }
    impl<C, M, R> ListWebACLs<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListWebAcLsOutput,
            smithy_http::result::SdkError<crate::error::ListWebACLsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListWebAcLsInputOperationOutputAlias,
                crate::output::ListWebAcLsOutput,
                crate::error::ListWebACLsError,
                crate::input::ListWebAcLsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <code>WebACL</code> objects than the number that you specify
        /// for <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of
        /// <code>WebACL</code> objects. For the second and subsequent <code>ListWebACLs</code> requests, specify the value of <code>NextMarker</code>
        /// from the previous response to get information about another batch of <code>WebACL</code> objects.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <code>WebACL</code> objects that you want AWS WAF to return for this request. If you have more
        /// <code>WebACL</code> objects than the number that you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of <code>WebACL</code> objects.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListXssMatchSets<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_xss_match_sets_input::Builder,
    }
    impl<C, M, R> ListXssMatchSets<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListXssMatchSetsOutput,
            smithy_http::result::SdkError<crate::error::ListXssMatchSetsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListXssMatchSetsInputOperationOutputAlias,
                crate::output::ListXssMatchSetsOutput,
                crate::error::ListXssMatchSetsError,
                crate::input::ListXssMatchSetsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If you specify a value for <code>Limit</code> and you have more <a>XssMatchSet</a> objects than the value of
        /// <code>Limit</code>, AWS WAF returns a <code>NextMarker</code> value in the response that allows you to list another group of
        /// <code>XssMatchSets</code>. For the second and subsequent <code>ListXssMatchSets</code> requests, specify the
        /// value of <code>NextMarker</code> from the previous response to get information about another batch of <code>XssMatchSets</code>.</p>
        pub fn next_marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_marker(inp);
            self
        }
        pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_marker(input);
            self
        }
        /// <p>Specifies the number of <a>XssMatchSet</a> objects that you want AWS WAF to return for this request. If you have more
        /// <code>XssMatchSet</code> objects than the number you specify for <code>Limit</code>, the response includes a
        /// <code>NextMarker</code> value that you can use to get another batch of <code>Rules</code>.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutLoggingConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_logging_configuration_input::Builder,
    }
    impl<C, M, R> PutLoggingConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutLoggingConfigurationOutput,
            smithy_http::result::SdkError<crate::error::PutLoggingConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutLoggingConfigurationInputOperationOutputAlias,
                crate::output::PutLoggingConfigurationOutput,
                crate::error::PutLoggingConfigurationError,
                crate::input::PutLoggingConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Kinesis Data Firehose that contains the inspected traffic
        /// information, the redacted fields details, and the Amazon Resource Name (ARN) of the web ACL
        /// to monitor.</p>
        /// <note>
        /// <p>When specifying <code>Type</code> in <code>RedactedFields</code>, you must use one of
        /// the following values: <code>URI</code>, <code>QUERY_STRING</code>, <code>HEADER</code>,
        /// or <code>METHOD</code>.</p>
        /// </note>
        pub fn logging_configuration(mut self, inp: crate::model::LoggingConfiguration) -> Self {
            self.inner = self.inner.logging_configuration(inp);
            self
        }
        pub fn set_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::LoggingConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_logging_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutPermissionPolicy<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_permission_policy_input::Builder,
    }
    impl<C, M, R> PutPermissionPolicy<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutPermissionPolicyOutput,
            smithy_http::result::SdkError<crate::error::PutPermissionPolicyError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutPermissionPolicyInputOperationOutputAlias,
                crate::output::PutPermissionPolicyOutput,
                crate::error::PutPermissionPolicyError,
                crate::input::PutPermissionPolicyInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the RuleGroup to which you want to attach the policy.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>The policy to attach to the specified RuleGroup.</p>
        pub fn policy(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.policy(inp);
            self
        }
        pub fn set_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_policy(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C, M, R> TagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TagResourceInputOperationOutputAlias,
                crate::output::TagResourceOutput,
                crate::error::TagResourceError,
                crate::input::TagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p></p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p></p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C, M, R> UntagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UntagResourceInputOperationOutputAlias,
                crate::output::UntagResourceOutput,
                crate::error::UntagResourceError,
                crate::input::UntagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p></p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        /// <p></p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateByteMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_byte_match_set_input::Builder,
    }
    impl<C, M, R> UpdateByteMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateByteMatchSetOutput,
            smithy_http::result::SdkError<crate::error::UpdateByteMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateByteMatchSetInputOperationOutputAlias,
                crate::output::UpdateByteMatchSetOutput,
                crate::error::UpdateByteMatchSetError,
                crate::input::UpdateByteMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>ByteMatchSetId</code> of the <a>ByteMatchSet</a> that you want to update. <code>ByteMatchSetId</code> is returned by <a>CreateByteMatchSet</a> and by
        /// <a>ListByteMatchSets</a>.</p>
        pub fn byte_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.byte_match_set_id(inp);
            self
        }
        pub fn set_byte_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_byte_match_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of <code>ByteMatchSetUpdate</code> objects that you want to insert into or delete from a <a>ByteMatchSet</a>.
        /// For more information, see the applicable data types:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a>ByteMatchSetUpdate</a>: Contains <code>Action</code> and <code>ByteMatchTuple</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>ByteMatchTuple</a>: Contains <code>FieldToMatch</code>, <code>PositionalConstraint</code>, <code>TargetString</code>,
        /// and <code>TextTransformation</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>FieldToMatch</a>: Contains <code>Data</code> and <code>Type</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn updates(mut self, inp: impl Into<crate::model::ByteMatchSetUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ByteMatchSetUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateGeoMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_geo_match_set_input::Builder,
    }
    impl<C, M, R> UpdateGeoMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateGeoMatchSetOutput,
            smithy_http::result::SdkError<crate::error::UpdateGeoMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateGeoMatchSetInputOperationOutputAlias,
                crate::output::UpdateGeoMatchSetOutput,
                crate::error::UpdateGeoMatchSetError,
                crate::input::UpdateGeoMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>GeoMatchSetId</code> of the <a>GeoMatchSet</a> that you want to update. <code>GeoMatchSetId</code> is returned by <a>CreateGeoMatchSet</a> and by
        /// <a>ListGeoMatchSets</a>.</p>
        pub fn geo_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.geo_match_set_id(inp);
            self
        }
        pub fn set_geo_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_geo_match_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of <code>GeoMatchSetUpdate</code> objects that you want to insert into or delete from an <a>GeoMatchSet</a>.
        /// For more information, see the applicable data types:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a>GeoMatchSetUpdate</a>: Contains <code>Action</code> and <code>GeoMatchConstraint</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>GeoMatchConstraint</a>: Contains <code>Type</code> and <code>Value</code>
        /// </p>
        /// <p>You can have only one <code>Type</code> and <code>Value</code> per <code>GeoMatchConstraint</code>. To add multiple countries, include multiple <code>GeoMatchSetUpdate</code> objects in your request.</p>      
        /// </li>
        /// </ul>
        pub fn updates(mut self, inp: impl Into<crate::model::GeoMatchSetUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::GeoMatchSetUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateIPSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_ip_set_input::Builder,
    }
    impl<C, M, R> UpdateIPSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateIpSetOutput,
            smithy_http::result::SdkError<crate::error::UpdateIPSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateIpSetInputOperationOutputAlias,
                crate::output::UpdateIpSetOutput,
                crate::error::UpdateIPSetError,
                crate::input::UpdateIpSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>IPSetId</code> of the <a>IPSet</a> that you want to update. <code>IPSetId</code> is returned by <a>CreateIPSet</a> and by
        /// <a>ListIPSets</a>.</p>
        pub fn ip_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ip_set_id(inp);
            self
        }
        pub fn set_ip_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ip_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of <code>IPSetUpdate</code> objects that you want to insert into or delete from an <a>IPSet</a>.
        /// For more information, see the applicable data types:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a>IPSetUpdate</a>: Contains <code>Action</code> and <code>IPSetDescriptor</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>IPSetDescriptor</a>: Contains <code>Type</code> and <code>Value</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>You can insert a maximum of 1000 addresses in a single request.</p>
        pub fn updates(mut self, inp: impl Into<crate::model::IpSetUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpSetUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateRateBasedRule<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_rate_based_rule_input::Builder,
    }
    impl<C, M, R> UpdateRateBasedRule<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateRateBasedRuleOutput,
            smithy_http::result::SdkError<crate::error::UpdateRateBasedRuleError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateRateBasedRuleInputOperationOutputAlias,
                crate::output::UpdateRateBasedRuleOutput,
                crate::error::UpdateRateBasedRuleError,
                crate::input::UpdateRateBasedRuleInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RuleId</code> of the <code>RateBasedRule</code> that you want to update.
        /// <code>RuleId</code> is returned by <code>CreateRateBasedRule</code> and by <a>ListRateBasedRules</a>.</p>
        pub fn rule_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_id(inp);
            self
        }
        pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_rule_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of <code>RuleUpdate</code> objects that you want to insert into or delete
        /// from a <a>RateBasedRule</a>. </p>
        pub fn updates(mut self, inp: impl Into<crate::model::RuleUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RuleUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
        /// <p>The maximum number of requests, which have an identical value in the field specified by the <code>RateKey</code>, allowed in a
        /// five-minute period. If the number of requests exceeds the <code>RateLimit</code> and the other
        /// predicates specified in the rule are also met,
        /// AWS WAF triggers the action that is specified for this rule.</p>
        pub fn rate_limit(mut self, inp: i64) -> Self {
            self.inner = self.inner.rate_limit(inp);
            self
        }
        pub fn set_rate_limit(mut self, input: std::option::Option<i64>) -> Self {
            self.inner = self.inner.set_rate_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateRegexMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_regex_match_set_input::Builder,
    }
    impl<C, M, R> UpdateRegexMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateRegexMatchSetOutput,
            smithy_http::result::SdkError<crate::error::UpdateRegexMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateRegexMatchSetInputOperationOutputAlias,
                crate::output::UpdateRegexMatchSetOutput,
                crate::error::UpdateRegexMatchSetError,
                crate::input::UpdateRegexMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RegexMatchSetId</code> of the <a>RegexMatchSet</a> that you want to update. <code>RegexMatchSetId</code> is returned by <a>CreateRegexMatchSet</a> and by
        /// <a>ListRegexMatchSets</a>.</p>
        pub fn regex_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.regex_match_set_id(inp);
            self
        }
        pub fn set_regex_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_regex_match_set_id(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of <code>RegexMatchSetUpdate</code> objects that you want to insert into or delete from a <a>RegexMatchSet</a>.
        /// For more information, see <a>RegexMatchTuple</a>.</p>
        pub fn updates(mut self, inp: impl Into<crate::model::RegexMatchSetUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RegexMatchSetUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateRegexPatternSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_regex_pattern_set_input::Builder,
    }
    impl<C, M, R> UpdateRegexPatternSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateRegexPatternSetOutput,
            smithy_http::result::SdkError<crate::error::UpdateRegexPatternSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateRegexPatternSetInputOperationOutputAlias,
                crate::output::UpdateRegexPatternSetOutput,
                crate::error::UpdateRegexPatternSetError,
                crate::input::UpdateRegexPatternSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RegexPatternSetId</code> of the <a>RegexPatternSet</a> that you want to update. <code>RegexPatternSetId</code> is returned by <a>CreateRegexPatternSet</a> and by
        /// <a>ListRegexPatternSets</a>.</p>
        pub fn regex_pattern_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.regex_pattern_set_id(inp);
            self
        }
        pub fn set_regex_pattern_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_regex_pattern_set_id(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of <code>RegexPatternSetUpdate</code> objects that you want to insert into or delete from a <a>RegexPatternSet</a>.</p>
        pub fn updates(mut self, inp: impl Into<crate::model::RegexPatternSetUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RegexPatternSetUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateRule<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_rule_input::Builder,
    }
    impl<C, M, R> UpdateRule<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateRuleOutput,
            smithy_http::result::SdkError<crate::error::UpdateRuleError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateRuleInputOperationOutputAlias,
                crate::output::UpdateRuleOutput,
                crate::error::UpdateRuleError,
                crate::input::UpdateRuleInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RuleId</code> of the <code>Rule</code> that you want to update. <code>RuleId</code> is returned by
        /// <code>CreateRule</code> and by <a>ListRules</a>.</p>
        pub fn rule_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_id(inp);
            self
        }
        pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_rule_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of <code>RuleUpdate</code> objects that you want to insert into or delete from a
        /// <a>Rule</a>. For more information, see the applicable data types:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a>RuleUpdate</a>: Contains <code>Action</code> and <code>Predicate</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>Predicate</a>: Contains <code>DataId</code>, <code>Negated</code>, and <code>Type</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>FieldToMatch</a>: Contains <code>Data</code> and <code>Type</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn updates(mut self, inp: impl Into<crate::model::RuleUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RuleUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateRuleGroup<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_rule_group_input::Builder,
    }
    impl<C, M, R> UpdateRuleGroup<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateRuleGroupOutput,
            smithy_http::result::SdkError<crate::error::UpdateRuleGroupError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateRuleGroupInputOperationOutputAlias,
                crate::output::UpdateRuleGroupOutput,
                crate::error::UpdateRuleGroupError,
                crate::input::UpdateRuleGroupInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>RuleGroupId</code> of the <a>RuleGroup</a> that you want to update. <code>RuleGroupId</code> is returned by <a>CreateRuleGroup</a> and by
        /// <a>ListRuleGroups</a>.</p>
        pub fn rule_group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rule_group_id(inp);
            self
        }
        pub fn set_rule_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_rule_group_id(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of <code>RuleGroupUpdate</code> objects that you want to insert into or delete from a
        /// <a>RuleGroup</a>.</p>
        /// <p>You can only insert <code>REGULAR</code> rules into a rule group.</p>
        /// <p>
        /// <code>ActivatedRule|OverrideAction</code> applies only when updating or adding a <code>RuleGroup</code> to a <code>WebACL</code>. In this case you do not use <code>ActivatedRule|Action</code>.  For all other update requests, <code>ActivatedRule|Action</code> is used instead of <code>ActivatedRule|OverrideAction</code>.</p>
        pub fn updates(mut self, inp: impl Into<crate::model::RuleGroupUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RuleGroupUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateSizeConstraintSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_size_constraint_set_input::Builder,
    }
    impl<C, M, R> UpdateSizeConstraintSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateSizeConstraintSetOutput,
            smithy_http::result::SdkError<crate::error::UpdateSizeConstraintSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateSizeConstraintSetInputOperationOutputAlias,
                crate::output::UpdateSizeConstraintSetOutput,
                crate::error::UpdateSizeConstraintSetError,
                crate::input::UpdateSizeConstraintSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>SizeConstraintSetId</code> of the <a>SizeConstraintSet</a> that you want to update. <code>SizeConstraintSetId</code>
        /// is returned by <a>CreateSizeConstraintSet</a> and by <a>ListSizeConstraintSets</a>.</p>
        pub fn size_constraint_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.size_constraint_set_id(inp);
            self
        }
        pub fn set_size_constraint_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_size_constraint_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of <code>SizeConstraintSetUpdate</code> objects that you want to insert into or delete from a <a>SizeConstraintSet</a>.
        /// For more information, see the applicable data types:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a>SizeConstraintSetUpdate</a>: Contains <code>Action</code> and <code>SizeConstraint</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>SizeConstraint</a>: Contains <code>FieldToMatch</code>, <code>TextTransformation</code>, <code>ComparisonOperator</code>,
        /// and <code>Size</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>FieldToMatch</a>: Contains <code>Data</code> and <code>Type</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn updates(mut self, inp: impl Into<crate::model::SizeConstraintSetUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SizeConstraintSetUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateSqlInjectionMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_sql_injection_match_set_input::Builder,
    }
    impl<C, M, R> UpdateSqlInjectionMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateSqlInjectionMatchSetOutput,
            smithy_http::result::SdkError<crate::error::UpdateSqlInjectionMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateSqlInjectionMatchSetInputOperationOutputAlias,
                crate::output::UpdateSqlInjectionMatchSetOutput,
                crate::error::UpdateSqlInjectionMatchSetError,
                crate::input::UpdateSqlInjectionMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>SqlInjectionMatchSetId</code> of the <code>SqlInjectionMatchSet</code> that you want to update.
        /// <code>SqlInjectionMatchSetId</code> is returned by <a>CreateSqlInjectionMatchSet</a> and by <a>ListSqlInjectionMatchSets</a>.</p>
        pub fn sql_injection_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sql_injection_match_set_id(inp);
            self
        }
        pub fn set_sql_injection_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_sql_injection_match_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of <code>SqlInjectionMatchSetUpdate</code> objects that you want to insert into or delete from a
        /// <a>SqlInjectionMatchSet</a>. For more information, see the applicable data types:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a>SqlInjectionMatchSetUpdate</a>: Contains <code>Action</code> and <code>SqlInjectionMatchTuple</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>SqlInjectionMatchTuple</a>: Contains <code>FieldToMatch</code> and <code>TextTransformation</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>FieldToMatch</a>: Contains <code>Data</code> and <code>Type</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn updates(mut self, inp: impl Into<crate::model::SqlInjectionMatchSetUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SqlInjectionMatchSetUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateWebACL<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_web_acl_input::Builder,
    }
    impl<C, M, R> UpdateWebACL<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateWebAclOutput,
            smithy_http::result::SdkError<crate::error::UpdateWebACLError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateWebAclInputOperationOutputAlias,
                crate::output::UpdateWebAclOutput,
                crate::error::UpdateWebACLError,
                crate::input::UpdateWebAclInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>WebACLId</code> of the <a>WebACL</a> that you want to update. <code>WebACLId</code> is returned by <a>CreateWebACL</a> and by
        /// <a>ListWebACLs</a>.</p>
        pub fn web_acl_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.web_acl_id(inp);
            self
        }
        pub fn set_web_acl_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_web_acl_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of updates to make to the <a>WebACL</a>.</p>    
        /// <p>An array of <code>WebACLUpdate</code> objects that you want to insert into or delete from a
        /// <a>WebACL</a>. For more information, see the applicable data types:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a>WebACLUpdate</a>: Contains <code>Action</code> and <code>ActivatedRule</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>ActivatedRule</a>: Contains <code>Action</code>,
        /// <code>OverrideAction</code>, <code>Priority</code>, <code>RuleId</code>, and
        /// <code>Type</code>. <code>ActivatedRule|OverrideAction</code> applies only when
        /// updating or adding a <code>RuleGroup</code> to a <code>WebACL</code>. In this
        /// case,
        /// you do not use <code>ActivatedRule|Action</code>. For all other update requests,
        /// <code>ActivatedRule|Action</code> is used instead of
        /// <code>ActivatedRule|OverrideAction</code>. </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>WafAction</a>: Contains <code>Type</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn updates(mut self, inp: impl Into<crate::model::WebAclUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WebAclUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
        /// <p>A default action for the web ACL, either ALLOW or BLOCK. AWS WAF performs the default
        /// action if a request doesn't match the criteria in any of the rules in a web ACL.</p>
        pub fn default_action(mut self, inp: crate::model::WafAction) -> Self {
            self.inner = self.inner.default_action(inp);
            self
        }
        pub fn set_default_action(
            mut self,
            input: std::option::Option<crate::model::WafAction>,
        ) -> Self {
            self.inner = self.inner.set_default_action(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateXssMatchSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_xss_match_set_input::Builder,
    }
    impl<C, M, R> UpdateXssMatchSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateXssMatchSetOutput,
            smithy_http::result::SdkError<crate::error::UpdateXssMatchSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateXssMatchSetInputOperationOutputAlias,
                crate::output::UpdateXssMatchSetOutput,
                crate::error::UpdateXssMatchSetError,
                crate::input::UpdateXssMatchSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>XssMatchSetId</code> of the <code>XssMatchSet</code> that you want to update.
        /// <code>XssMatchSetId</code> is returned by <a>CreateXssMatchSet</a> and by <a>ListXssMatchSets</a>.</p>
        pub fn xss_match_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.xss_match_set_id(inp);
            self
        }
        pub fn set_xss_match_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_xss_match_set_id(input);
            self
        }
        /// <p>The value returned by the most recent call to <a>GetChangeToken</a>.</p>
        pub fn change_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.change_token(inp);
            self
        }
        pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_change_token(input);
            self
        }
        /// Appends an item to `Updates`.
        ///
        /// To override the contents of this collection use [`set_updates`](Self::set_updates).
        /// <p>An array of <code>XssMatchSetUpdate</code> objects that you want to insert into or
        /// delete from an
        /// <a>XssMatchSet</a>. For more information, see the applicable data
        /// types:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a>XssMatchSetUpdate</a>: Contains <code>Action</code> and <code>XssMatchTuple</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>XssMatchTuple</a>: Contains <code>FieldToMatch</code> and <code>TextTransformation</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a>FieldToMatch</a>: Contains <code>Data</code> and <code>Type</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn updates(mut self, inp: impl Into<crate::model::XssMatchSetUpdate>) -> Self {
            self.inner = self.inner.updates(inp);
            self
        }
        pub fn set_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::XssMatchSetUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_updates(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
