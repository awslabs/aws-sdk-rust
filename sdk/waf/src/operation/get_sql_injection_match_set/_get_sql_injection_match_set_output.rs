// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The response to a <code>GetSqlInjectionMatchSet</code> request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSqlInjectionMatchSetOutput {
    /// <p>Information about the <code>SqlInjectionMatchSet</code> that you specified in the <code>GetSqlInjectionMatchSet</code> request. For more information, see the following topics:</p>
    /// <ul>
    /// <li> <p> <code>SqlInjectionMatchSet</code>: Contains <code>Name</code>, <code>SqlInjectionMatchSetId</code>, and an array of <code>SqlInjectionMatchTuple</code> objects</p> </li>
    /// <li> <p> <code>SqlInjectionMatchTuple</code>: Each <code>SqlInjectionMatchTuple</code> object contains <code>FieldToMatch</code> and <code>TextTransformation</code> </p> </li>
    /// <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub sql_injection_match_set: std::option::Option<crate::types::SqlInjectionMatchSet>,
    _request_id: Option<String>,
}
impl GetSqlInjectionMatchSetOutput {
    /// <p>Information about the <code>SqlInjectionMatchSet</code> that you specified in the <code>GetSqlInjectionMatchSet</code> request. For more information, see the following topics:</p>
    /// <ul>
    /// <li> <p> <code>SqlInjectionMatchSet</code>: Contains <code>Name</code>, <code>SqlInjectionMatchSetId</code>, and an array of <code>SqlInjectionMatchTuple</code> objects</p> </li>
    /// <li> <p> <code>SqlInjectionMatchTuple</code>: Each <code>SqlInjectionMatchTuple</code> object contains <code>FieldToMatch</code> and <code>TextTransformation</code> </p> </li>
    /// <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>
    /// </ul>
    pub fn sql_injection_match_set(
        &self,
    ) -> std::option::Option<&crate::types::SqlInjectionMatchSet> {
        self.sql_injection_match_set.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSqlInjectionMatchSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSqlInjectionMatchSetOutput {
    /// Creates a new builder-style object to manufacture [`GetSqlInjectionMatchSetOutput`](crate::operation::get_sql_injection_match_set::GetSqlInjectionMatchSetOutput).
    pub fn builder(
    ) -> crate::operation::get_sql_injection_match_set::builders::GetSqlInjectionMatchSetOutputBuilder
    {
        crate::operation::get_sql_injection_match_set::builders::GetSqlInjectionMatchSetOutputBuilder::default()
    }
}

/// A builder for [`GetSqlInjectionMatchSetOutput`](crate::operation::get_sql_injection_match_set::GetSqlInjectionMatchSetOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSqlInjectionMatchSetOutputBuilder {
    pub(crate) sql_injection_match_set: std::option::Option<crate::types::SqlInjectionMatchSet>,
    _request_id: Option<String>,
}
impl GetSqlInjectionMatchSetOutputBuilder {
    /// <p>Information about the <code>SqlInjectionMatchSet</code> that you specified in the <code>GetSqlInjectionMatchSet</code> request. For more information, see the following topics:</p>
    /// <ul>
    /// <li> <p> <code>SqlInjectionMatchSet</code>: Contains <code>Name</code>, <code>SqlInjectionMatchSetId</code>, and an array of <code>SqlInjectionMatchTuple</code> objects</p> </li>
    /// <li> <p> <code>SqlInjectionMatchTuple</code>: Each <code>SqlInjectionMatchTuple</code> object contains <code>FieldToMatch</code> and <code>TextTransformation</code> </p> </li>
    /// <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>
    /// </ul>
    pub fn sql_injection_match_set(mut self, input: crate::types::SqlInjectionMatchSet) -> Self {
        self.sql_injection_match_set = Some(input);
        self
    }
    /// <p>Information about the <code>SqlInjectionMatchSet</code> that you specified in the <code>GetSqlInjectionMatchSet</code> request. For more information, see the following topics:</p>
    /// <ul>
    /// <li> <p> <code>SqlInjectionMatchSet</code>: Contains <code>Name</code>, <code>SqlInjectionMatchSetId</code>, and an array of <code>SqlInjectionMatchTuple</code> objects</p> </li>
    /// <li> <p> <code>SqlInjectionMatchTuple</code>: Each <code>SqlInjectionMatchTuple</code> object contains <code>FieldToMatch</code> and <code>TextTransformation</code> </p> </li>
    /// <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>
    /// </ul>
    pub fn set_sql_injection_match_set(
        mut self,
        input: std::option::Option<crate::types::SqlInjectionMatchSet>,
    ) -> Self {
        self.sql_injection_match_set = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSqlInjectionMatchSetOutput`](crate::operation::get_sql_injection_match_set::GetSqlInjectionMatchSetOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_sql_injection_match_set::GetSqlInjectionMatchSetOutput {
        crate::operation::get_sql_injection_match_set::GetSqlInjectionMatchSetOutput {
            sql_injection_match_set: self.sql_injection_match_set,
            _request_id: self._request_id,
        }
    }
}
