// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSizeConstraintSetsOutput {
    /// <p>If you have more <code>SizeConstraintSet</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>SizeConstraintSet</code> objects, submit another <code>ListSizeConstraintSets</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    #[doc(hidden)]
    pub next_marker: std::option::Option<std::string::String>,
    /// <p>An array of <code>SizeConstraintSetSummary</code> objects.</p>
    #[doc(hidden)]
    pub size_constraint_sets:
        std::option::Option<std::vec::Vec<crate::types::SizeConstraintSetSummary>>,
    _request_id: Option<String>,
}
impl ListSizeConstraintSetsOutput {
    /// <p>If you have more <code>SizeConstraintSet</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>SizeConstraintSet</code> objects, submit another <code>ListSizeConstraintSets</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    pub fn next_marker(&self) -> std::option::Option<&str> {
        self.next_marker.as_deref()
    }
    /// <p>An array of <code>SizeConstraintSetSummary</code> objects.</p>
    pub fn size_constraint_sets(
        &self,
    ) -> std::option::Option<&[crate::types::SizeConstraintSetSummary]> {
        self.size_constraint_sets.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSizeConstraintSetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSizeConstraintSetsOutput {
    /// Creates a new builder-style object to manufacture [`ListSizeConstraintSetsOutput`](crate::operation::list_size_constraint_sets::ListSizeConstraintSetsOutput).
    pub fn builder(
    ) -> crate::operation::list_size_constraint_sets::builders::ListSizeConstraintSetsOutputBuilder
    {
        crate::operation::list_size_constraint_sets::builders::ListSizeConstraintSetsOutputBuilder::default()
    }
}

/// A builder for [`ListSizeConstraintSetsOutput`](crate::operation::list_size_constraint_sets::ListSizeConstraintSetsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListSizeConstraintSetsOutputBuilder {
    pub(crate) next_marker: std::option::Option<std::string::String>,
    pub(crate) size_constraint_sets:
        std::option::Option<std::vec::Vec<crate::types::SizeConstraintSetSummary>>,
    _request_id: Option<String>,
}
impl ListSizeConstraintSetsOutputBuilder {
    /// <p>If you have more <code>SizeConstraintSet</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>SizeConstraintSet</code> objects, submit another <code>ListSizeConstraintSets</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    pub fn next_marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_marker = Some(input.into());
        self
    }
    /// <p>If you have more <code>SizeConstraintSet</code> objects than the number that you specified for <code>Limit</code> in the request, the response includes a <code>NextMarker</code> value. To list more <code>SizeConstraintSet</code> objects, submit another <code>ListSizeConstraintSets</code> request, and specify the <code>NextMarker</code> value from the response in the <code>NextMarker</code> value in the next request.</p>
    pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_marker = input;
        self
    }
    /// Appends an item to `size_constraint_sets`.
    ///
    /// To override the contents of this collection use [`set_size_constraint_sets`](Self::set_size_constraint_sets).
    ///
    /// <p>An array of <code>SizeConstraintSetSummary</code> objects.</p>
    pub fn size_constraint_sets(mut self, input: crate::types::SizeConstraintSetSummary) -> Self {
        let mut v = self.size_constraint_sets.unwrap_or_default();
        v.push(input);
        self.size_constraint_sets = Some(v);
        self
    }
    /// <p>An array of <code>SizeConstraintSetSummary</code> objects.</p>
    pub fn set_size_constraint_sets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SizeConstraintSetSummary>>,
    ) -> Self {
        self.size_constraint_sets = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListSizeConstraintSetsOutput`](crate::operation::list_size_constraint_sets::ListSizeConstraintSetsOutput).
    pub fn build(
        self,
    ) -> crate::operation::list_size_constraint_sets::ListSizeConstraintSetsOutput {
        crate::operation::list_size_constraint_sets::ListSizeConstraintSetsOutput {
            next_marker: self.next_marker,
            size_constraint_sets: self.size_constraint_sets,
            _request_id: self._request_id,
        }
    }
}
