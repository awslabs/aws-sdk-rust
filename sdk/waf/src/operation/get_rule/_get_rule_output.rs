// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRuleOutput {
    /// <p>Information about the <code>Rule</code> that you specified in the <code>GetRule</code> request. For more information, see the following topics:</p>
    /// <ul>
    /// <li> <p> <code>Rule</code>: Contains <code>MetricName</code>, <code>Name</code>, an array of <code>Predicate</code> objects, and <code>RuleId</code> </p> </li>
    /// <li> <p> <code>Predicate</code>: Each <code>Predicate</code> object contains <code>DataId</code>, <code>Negated</code>, and <code>Type</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub rule: std::option::Option<crate::types::Rule>,
    _request_id: Option<String>,
}
impl GetRuleOutput {
    /// <p>Information about the <code>Rule</code> that you specified in the <code>GetRule</code> request. For more information, see the following topics:</p>
    /// <ul>
    /// <li> <p> <code>Rule</code>: Contains <code>MetricName</code>, <code>Name</code>, an array of <code>Predicate</code> objects, and <code>RuleId</code> </p> </li>
    /// <li> <p> <code>Predicate</code>: Each <code>Predicate</code> object contains <code>DataId</code>, <code>Negated</code>, and <code>Type</code> </p> </li>
    /// </ul>
    pub fn rule(&self) -> std::option::Option<&crate::types::Rule> {
        self.rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRuleOutput {
    /// Creates a new builder-style object to manufacture [`GetRuleOutput`](crate::operation::get_rule::GetRuleOutput).
    pub fn builder() -> crate::operation::get_rule::builders::GetRuleOutputBuilder {
        crate::operation::get_rule::builders::GetRuleOutputBuilder::default()
    }
}

/// A builder for [`GetRuleOutput`](crate::operation::get_rule::GetRuleOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRuleOutputBuilder {
    pub(crate) rule: std::option::Option<crate::types::Rule>,
    _request_id: Option<String>,
}
impl GetRuleOutputBuilder {
    /// <p>Information about the <code>Rule</code> that you specified in the <code>GetRule</code> request. For more information, see the following topics:</p>
    /// <ul>
    /// <li> <p> <code>Rule</code>: Contains <code>MetricName</code>, <code>Name</code>, an array of <code>Predicate</code> objects, and <code>RuleId</code> </p> </li>
    /// <li> <p> <code>Predicate</code>: Each <code>Predicate</code> object contains <code>DataId</code>, <code>Negated</code>, and <code>Type</code> </p> </li>
    /// </ul>
    pub fn rule(mut self, input: crate::types::Rule) -> Self {
        self.rule = Some(input);
        self
    }
    /// <p>Information about the <code>Rule</code> that you specified in the <code>GetRule</code> request. For more information, see the following topics:</p>
    /// <ul>
    /// <li> <p> <code>Rule</code>: Contains <code>MetricName</code>, <code>Name</code>, an array of <code>Predicate</code> objects, and <code>RuleId</code> </p> </li>
    /// <li> <p> <code>Predicate</code>: Each <code>Predicate</code> object contains <code>DataId</code>, <code>Negated</code>, and <code>Type</code> </p> </li>
    /// </ul>
    pub fn set_rule(mut self, input: std::option::Option<crate::types::Rule>) -> Self {
        self.rule = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRuleOutput`](crate::operation::get_rule::GetRuleOutput).
    pub fn build(self) -> crate::operation::get_rule::GetRuleOutput {
        crate::operation::get_rule::GetRuleOutput {
            rule: self.rule,
            _request_id: self._request_id,
        }
    }
}
