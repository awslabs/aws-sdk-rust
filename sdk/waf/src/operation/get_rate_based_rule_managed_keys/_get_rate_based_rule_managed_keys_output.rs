// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRateBasedRuleManagedKeysOutput {
    /// <p>An array of IP addresses that currently are blocked by the specified <code>RateBasedRule</code>. </p>
    #[doc(hidden)]
    pub managed_keys: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A null value and not currently used.</p>
    #[doc(hidden)]
    pub next_marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetRateBasedRuleManagedKeysOutput {
    /// <p>An array of IP addresses that currently are blocked by the specified <code>RateBasedRule</code>. </p>
    pub fn managed_keys(&self) -> std::option::Option<&[std::string::String]> {
        self.managed_keys.as_deref()
    }
    /// <p>A null value and not currently used.</p>
    pub fn next_marker(&self) -> std::option::Option<&str> {
        self.next_marker.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetRateBasedRuleManagedKeysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRateBasedRuleManagedKeysOutput {
    /// Creates a new builder-style object to manufacture [`GetRateBasedRuleManagedKeysOutput`](crate::operation::get_rate_based_rule_managed_keys::GetRateBasedRuleManagedKeysOutput).
    pub fn builder() -> crate::operation::get_rate_based_rule_managed_keys::builders::GetRateBasedRuleManagedKeysOutputBuilder{
        crate::operation::get_rate_based_rule_managed_keys::builders::GetRateBasedRuleManagedKeysOutputBuilder::default()
    }
}

/// A builder for [`GetRateBasedRuleManagedKeysOutput`](crate::operation::get_rate_based_rule_managed_keys::GetRateBasedRuleManagedKeysOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRateBasedRuleManagedKeysOutputBuilder {
    pub(crate) managed_keys: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next_marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetRateBasedRuleManagedKeysOutputBuilder {
    /// Appends an item to `managed_keys`.
    ///
    /// To override the contents of this collection use [`set_managed_keys`](Self::set_managed_keys).
    ///
    /// <p>An array of IP addresses that currently are blocked by the specified <code>RateBasedRule</code>. </p>
    pub fn managed_keys(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.managed_keys.unwrap_or_default();
        v.push(input.into());
        self.managed_keys = Some(v);
        self
    }
    /// <p>An array of IP addresses that currently are blocked by the specified <code>RateBasedRule</code>. </p>
    pub fn set_managed_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.managed_keys = input;
        self
    }
    /// <p>A null value and not currently used.</p>
    pub fn next_marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_marker = Some(input.into());
        self
    }
    /// <p>A null value and not currently used.</p>
    pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_marker = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRateBasedRuleManagedKeysOutput`](crate::operation::get_rate_based_rule_managed_keys::GetRateBasedRuleManagedKeysOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_rate_based_rule_managed_keys::GetRateBasedRuleManagedKeysOutput {
        crate::operation::get_rate_based_rule_managed_keys::GetRateBasedRuleManagedKeysOutput {
            managed_keys: self.managed_keys,
            next_marker: self.next_marker,
            _request_id: self._request_id,
        }
    }
}
