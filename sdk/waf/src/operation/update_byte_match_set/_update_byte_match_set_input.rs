// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateByteMatchSetInput {
    /// <p>The <code>ByteMatchSetId</code> of the <code>ByteMatchSet</code> that you want to update. <code>ByteMatchSetId</code> is returned by <code>CreateByteMatchSet</code> and by <code>ListByteMatchSets</code>.</p>
    #[doc(hidden)]
    pub byte_match_set_id: std::option::Option<std::string::String>,
    /// <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    #[doc(hidden)]
    pub change_token: std::option::Option<std::string::String>,
    /// <p>An array of <code>ByteMatchSetUpdate</code> objects that you want to insert into or delete from a <code>ByteMatchSet</code>. For more information, see the applicable data types:</p>
    /// <ul>
    /// <li> <p> <code>ByteMatchSetUpdate</code>: Contains <code>Action</code> and <code>ByteMatchTuple</code> </p> </li>
    /// <li> <p> <code>ByteMatchTuple</code>: Contains <code>FieldToMatch</code>, <code>PositionalConstraint</code>, <code>TargetString</code>, and <code>TextTransformation</code> </p> </li>
    /// <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub updates: std::option::Option<std::vec::Vec<crate::types::ByteMatchSetUpdate>>,
}
impl UpdateByteMatchSetInput {
    /// <p>The <code>ByteMatchSetId</code> of the <code>ByteMatchSet</code> that you want to update. <code>ByteMatchSetId</code> is returned by <code>CreateByteMatchSet</code> and by <code>ListByteMatchSets</code>.</p>
    pub fn byte_match_set_id(&self) -> std::option::Option<&str> {
        self.byte_match_set_id.as_deref()
    }
    /// <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    pub fn change_token(&self) -> std::option::Option<&str> {
        self.change_token.as_deref()
    }
    /// <p>An array of <code>ByteMatchSetUpdate</code> objects that you want to insert into or delete from a <code>ByteMatchSet</code>. For more information, see the applicable data types:</p>
    /// <ul>
    /// <li> <p> <code>ByteMatchSetUpdate</code>: Contains <code>Action</code> and <code>ByteMatchTuple</code> </p> </li>
    /// <li> <p> <code>ByteMatchTuple</code>: Contains <code>FieldToMatch</code>, <code>PositionalConstraint</code>, <code>TargetString</code>, and <code>TextTransformation</code> </p> </li>
    /// <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>
    /// </ul>
    pub fn updates(&self) -> std::option::Option<&[crate::types::ByteMatchSetUpdate]> {
        self.updates.as_deref()
    }
}
impl UpdateByteMatchSetInput {
    /// Creates a new builder-style object to manufacture [`UpdateByteMatchSetInput`](crate::operation::update_byte_match_set::UpdateByteMatchSetInput).
    pub fn builder(
    ) -> crate::operation::update_byte_match_set::builders::UpdateByteMatchSetInputBuilder {
        crate::operation::update_byte_match_set::builders::UpdateByteMatchSetInputBuilder::default()
    }
}

/// A builder for [`UpdateByteMatchSetInput`](crate::operation::update_byte_match_set::UpdateByteMatchSetInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateByteMatchSetInputBuilder {
    pub(crate) byte_match_set_id: std::option::Option<std::string::String>,
    pub(crate) change_token: std::option::Option<std::string::String>,
    pub(crate) updates: std::option::Option<std::vec::Vec<crate::types::ByteMatchSetUpdate>>,
}
impl UpdateByteMatchSetInputBuilder {
    /// <p>The <code>ByteMatchSetId</code> of the <code>ByteMatchSet</code> that you want to update. <code>ByteMatchSetId</code> is returned by <code>CreateByteMatchSet</code> and by <code>ListByteMatchSets</code>.</p>
    pub fn byte_match_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.byte_match_set_id = Some(input.into());
        self
    }
    /// <p>The <code>ByteMatchSetId</code> of the <code>ByteMatchSet</code> that you want to update. <code>ByteMatchSetId</code> is returned by <code>CreateByteMatchSet</code> and by <code>ListByteMatchSets</code>.</p>
    pub fn set_byte_match_set_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.byte_match_set_id = input;
        self
    }
    /// <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    pub fn change_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.change_token = Some(input.into());
        self
    }
    /// <p>The value returned by the most recent call to <code>GetChangeToken</code>.</p>
    pub fn set_change_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.change_token = input;
        self
    }
    /// Appends an item to `updates`.
    ///
    /// To override the contents of this collection use [`set_updates`](Self::set_updates).
    ///
    /// <p>An array of <code>ByteMatchSetUpdate</code> objects that you want to insert into or delete from a <code>ByteMatchSet</code>. For more information, see the applicable data types:</p>
    /// <ul>
    /// <li> <p> <code>ByteMatchSetUpdate</code>: Contains <code>Action</code> and <code>ByteMatchTuple</code> </p> </li>
    /// <li> <p> <code>ByteMatchTuple</code>: Contains <code>FieldToMatch</code>, <code>PositionalConstraint</code>, <code>TargetString</code>, and <code>TextTransformation</code> </p> </li>
    /// <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>
    /// </ul>
    pub fn updates(mut self, input: crate::types::ByteMatchSetUpdate) -> Self {
        let mut v = self.updates.unwrap_or_default();
        v.push(input);
        self.updates = Some(v);
        self
    }
    /// <p>An array of <code>ByteMatchSetUpdate</code> objects that you want to insert into or delete from a <code>ByteMatchSet</code>. For more information, see the applicable data types:</p>
    /// <ul>
    /// <li> <p> <code>ByteMatchSetUpdate</code>: Contains <code>Action</code> and <code>ByteMatchTuple</code> </p> </li>
    /// <li> <p> <code>ByteMatchTuple</code>: Contains <code>FieldToMatch</code>, <code>PositionalConstraint</code>, <code>TargetString</code>, and <code>TextTransformation</code> </p> </li>
    /// <li> <p> <code>FieldToMatch</code>: Contains <code>Data</code> and <code>Type</code> </p> </li>
    /// </ul>
    pub fn set_updates(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ByteMatchSetUpdate>>,
    ) -> Self {
        self.updates = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateByteMatchSetInput`](crate::operation::update_byte_match_set::UpdateByteMatchSetInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_byte_match_set::UpdateByteMatchSetInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_byte_match_set::UpdateByteMatchSetInput {
                byte_match_set_id: self.byte_match_set_id,
                change_token: self.change_token,
                updates: self.updates,
            },
        )
    }
}
