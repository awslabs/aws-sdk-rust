// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_package_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PackageFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        #[allow(unused_mut)]
        let mut object_2 = object.key("name").start_object();
        crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.version {
        #[allow(unused_mut)]
        let mut object_4 = object.key("version").start_object();
        crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.epoch {
        #[allow(unused_mut)]
        let mut object_6 = object.key("epoch").start_object();
        crate::protocol_serde::shape_number_filter::ser_number_filter(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.release {
        #[allow(unused_mut)]
        let mut object_8 = object.key("release").start_object();
        crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.architecture {
        #[allow(unused_mut)]
        let mut object_10 = object.key("architecture").start_object();
        crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.source_layer_hash {
        #[allow(unused_mut)]
        let mut object_12 = object.key("sourceLayerHash").start_object();
        crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.source_lambda_layer_arn {
        #[allow(unused_mut)]
        let mut object_14 = object.key("sourceLambdaLayerArn").start_object();
        crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_package_filter<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::PackageFilter>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PackageFilterBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "name" => {
                                builder = builder.set_name(
                                    crate::protocol_serde::shape_string_filter::de_string_filter(
                                        tokens,
                                    )?,
                                );
                            }
                            "version" => {
                                builder = builder.set_version(
                                    crate::protocol_serde::shape_string_filter::de_string_filter(
                                        tokens,
                                    )?,
                                );
                            }
                            "epoch" => {
                                builder = builder.set_epoch(
                                    crate::protocol_serde::shape_number_filter::de_number_filter(
                                        tokens,
                                    )?,
                                );
                            }
                            "release" => {
                                builder = builder.set_release(
                                    crate::protocol_serde::shape_string_filter::de_string_filter(
                                        tokens,
                                    )?,
                                );
                            }
                            "architecture" => {
                                builder = builder.set_architecture(
                                    crate::protocol_serde::shape_string_filter::de_string_filter(
                                        tokens,
                                    )?,
                                );
                            }
                            "sourceLayerHash" => {
                                builder = builder.set_source_layer_hash(
                                    crate::protocol_serde::shape_string_filter::de_string_filter(
                                        tokens,
                                    )?,
                                );
                            }
                            "sourceLambdaLayerArn" => {
                                builder = builder.set_source_lambda_layer_arn(
                                    crate::protocol_serde::shape_string_filter::de_string_filter(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
