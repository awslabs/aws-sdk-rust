// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_filter_criteria(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FilterCriteria,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.finding_arn {
        let mut array_2 = object.key("findingArn").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.aws_account_id {
        let mut array_6 = object.key("awsAccountId").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.finding_type {
        let mut array_10 = object.key("findingType").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.severity {
        let mut array_14 = object.key("severity").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.first_observed_at {
        let mut array_18 = object.key("firstObservedAt").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.last_observed_at {
        let mut array_22 = object.key("lastObservedAt").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.updated_at {
        let mut array_26 = object.key("updatedAt").start_array();
        for item_27 in var_25 {
            {
                #[allow(unused_mut)]
                let mut object_28 = array_26.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.finding_status {
        let mut array_30 = object.key("findingStatus").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.title {
        let mut array_34 = object.key("title").start_array();
        for item_35 in var_33 {
            {
                #[allow(unused_mut)]
                let mut object_36 = array_34.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_36, item_35)?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.inspector_score {
        let mut array_38 = object.key("inspectorScore").start_array();
        for item_39 in var_37 {
            {
                #[allow(unused_mut)]
                let mut object_40 = array_38.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(&mut object_40, item_39)?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    if let Some(var_41) = &input.resource_type {
        let mut array_42 = object.key("resourceType").start_array();
        for item_43 in var_41 {
            {
                #[allow(unused_mut)]
                let mut object_44 = array_42.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_44, item_43)?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    if let Some(var_45) = &input.resource_id {
        let mut array_46 = object.key("resourceId").start_array();
        for item_47 in var_45 {
            {
                #[allow(unused_mut)]
                let mut object_48 = array_46.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_48, item_47)?;
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.resource_tags {
        let mut array_50 = object.key("resourceTags").start_array();
        for item_51 in var_49 {
            {
                #[allow(unused_mut)]
                let mut object_52 = array_50.value().start_object();
                crate::protocol_serde::shape_map_filter::ser_map_filter(&mut object_52, item_51)?;
                object_52.finish();
            }
        }
        array_50.finish();
    }
    if let Some(var_53) = &input.ec2_instance_image_id {
        let mut array_54 = object.key("ec2InstanceImageId").start_array();
        for item_55 in var_53 {
            {
                #[allow(unused_mut)]
                let mut object_56 = array_54.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_56, item_55)?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.ec2_instance_vpc_id {
        let mut array_58 = object.key("ec2InstanceVpcId").start_array();
        for item_59 in var_57 {
            {
                #[allow(unused_mut)]
                let mut object_60 = array_58.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_60, item_59)?;
                object_60.finish();
            }
        }
        array_58.finish();
    }
    if let Some(var_61) = &input.ec2_instance_subnet_id {
        let mut array_62 = object.key("ec2InstanceSubnetId").start_array();
        for item_63 in var_61 {
            {
                #[allow(unused_mut)]
                let mut object_64 = array_62.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_64, item_63)?;
                object_64.finish();
            }
        }
        array_62.finish();
    }
    if let Some(var_65) = &input.ecr_image_pushed_at {
        let mut array_66 = object.key("ecrImagePushedAt").start_array();
        for item_67 in var_65 {
            {
                #[allow(unused_mut)]
                let mut object_68 = array_66.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_68, item_67)?;
                object_68.finish();
            }
        }
        array_66.finish();
    }
    if let Some(var_69) = &input.ecr_image_architecture {
        let mut array_70 = object.key("ecrImageArchitecture").start_array();
        for item_71 in var_69 {
            {
                #[allow(unused_mut)]
                let mut object_72 = array_70.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    if let Some(var_73) = &input.ecr_image_registry {
        let mut array_74 = object.key("ecrImageRegistry").start_array();
        for item_75 in var_73 {
            {
                #[allow(unused_mut)]
                let mut object_76 = array_74.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_76, item_75)?;
                object_76.finish();
            }
        }
        array_74.finish();
    }
    if let Some(var_77) = &input.ecr_image_repository_name {
        let mut array_78 = object.key("ecrImageRepositoryName").start_array();
        for item_79 in var_77 {
            {
                #[allow(unused_mut)]
                let mut object_80 = array_78.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_80, item_79)?;
                object_80.finish();
            }
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.ecr_image_tags {
        let mut array_82 = object.key("ecrImageTags").start_array();
        for item_83 in var_81 {
            {
                #[allow(unused_mut)]
                let mut object_84 = array_82.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_84, item_83)?;
                object_84.finish();
            }
        }
        array_82.finish();
    }
    if let Some(var_85) = &input.ecr_image_hash {
        let mut array_86 = object.key("ecrImageHash").start_array();
        for item_87 in var_85 {
            {
                #[allow(unused_mut)]
                let mut object_88 = array_86.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_88, item_87)?;
                object_88.finish();
            }
        }
        array_86.finish();
    }
    if let Some(var_89) = &input.port_range {
        let mut array_90 = object.key("portRange").start_array();
        for item_91 in var_89 {
            {
                #[allow(unused_mut)]
                let mut object_92 = array_90.value().start_object();
                crate::protocol_serde::shape_port_range_filter::ser_port_range_filter(&mut object_92, item_91)?;
                object_92.finish();
            }
        }
        array_90.finish();
    }
    if let Some(var_93) = &input.network_protocol {
        let mut array_94 = object.key("networkProtocol").start_array();
        for item_95 in var_93 {
            {
                #[allow(unused_mut)]
                let mut object_96 = array_94.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_96, item_95)?;
                object_96.finish();
            }
        }
        array_94.finish();
    }
    if let Some(var_97) = &input.component_id {
        let mut array_98 = object.key("componentId").start_array();
        for item_99 in var_97 {
            {
                #[allow(unused_mut)]
                let mut object_100 = array_98.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_100, item_99)?;
                object_100.finish();
            }
        }
        array_98.finish();
    }
    if let Some(var_101) = &input.component_type {
        let mut array_102 = object.key("componentType").start_array();
        for item_103 in var_101 {
            {
                #[allow(unused_mut)]
                let mut object_104 = array_102.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_104, item_103)?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    if let Some(var_105) = &input.vulnerability_id {
        let mut array_106 = object.key("vulnerabilityId").start_array();
        for item_107 in var_105 {
            {
                #[allow(unused_mut)]
                let mut object_108 = array_106.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_108, item_107)?;
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.vulnerability_source {
        let mut array_110 = object.key("vulnerabilitySource").start_array();
        for item_111 in var_109 {
            {
                #[allow(unused_mut)]
                let mut object_112 = array_110.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_112, item_111)?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.vendor_severity {
        let mut array_114 = object.key("vendorSeverity").start_array();
        for item_115 in var_113 {
            {
                #[allow(unused_mut)]
                let mut object_116 = array_114.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_116, item_115)?;
                object_116.finish();
            }
        }
        array_114.finish();
    }
    if let Some(var_117) = &input.vulnerable_packages {
        let mut array_118 = object.key("vulnerablePackages").start_array();
        for item_119 in var_117 {
            {
                #[allow(unused_mut)]
                let mut object_120 = array_118.value().start_object();
                crate::protocol_serde::shape_package_filter::ser_package_filter(&mut object_120, item_119)?;
                object_120.finish();
            }
        }
        array_118.finish();
    }
    if let Some(var_121) = &input.related_vulnerabilities {
        let mut array_122 = object.key("relatedVulnerabilities").start_array();
        for item_123 in var_121 {
            {
                #[allow(unused_mut)]
                let mut object_124 = array_122.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_124, item_123)?;
                object_124.finish();
            }
        }
        array_122.finish();
    }
    if let Some(var_125) = &input.fix_available {
        let mut array_126 = object.key("fixAvailable").start_array();
        for item_127 in var_125 {
            {
                #[allow(unused_mut)]
                let mut object_128 = array_126.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_128, item_127)?;
                object_128.finish();
            }
        }
        array_126.finish();
    }
    if let Some(var_129) = &input.lambda_function_name {
        let mut array_130 = object.key("lambdaFunctionName").start_array();
        for item_131 in var_129 {
            {
                #[allow(unused_mut)]
                let mut object_132 = array_130.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_132, item_131)?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    if let Some(var_133) = &input.lambda_function_layers {
        let mut array_134 = object.key("lambdaFunctionLayers").start_array();
        for item_135 in var_133 {
            {
                #[allow(unused_mut)]
                let mut object_136 = array_134.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_136, item_135)?;
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.lambda_function_runtime {
        let mut array_138 = object.key("lambdaFunctionRuntime").start_array();
        for item_139 in var_137 {
            {
                #[allow(unused_mut)]
                let mut object_140 = array_138.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_140, item_139)?;
                object_140.finish();
            }
        }
        array_138.finish();
    }
    if let Some(var_141) = &input.lambda_function_last_modified_at {
        let mut array_142 = object.key("lambdaFunctionLastModifiedAt").start_array();
        for item_143 in var_141 {
            {
                #[allow(unused_mut)]
                let mut object_144 = array_142.value().start_object();
                crate::protocol_serde::shape_date_filter::ser_date_filter(&mut object_144, item_143)?;
                object_144.finish();
            }
        }
        array_142.finish();
    }
    if let Some(var_145) = &input.lambda_function_execution_role_arn {
        let mut array_146 = object.key("lambdaFunctionExecutionRoleArn").start_array();
        for item_147 in var_145 {
            {
                #[allow(unused_mut)]
                let mut object_148 = array_146.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_148, item_147)?;
                object_148.finish();
            }
        }
        array_146.finish();
    }
    if let Some(var_149) = &input.exploit_available {
        let mut array_150 = object.key("exploitAvailable").start_array();
        for item_151 in var_149 {
            {
                #[allow(unused_mut)]
                let mut object_152 = array_150.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_152, item_151)?;
                object_152.finish();
            }
        }
        array_150.finish();
    }
    if let Some(var_153) = &input.code_vulnerability_detector_name {
        let mut array_154 = object.key("codeVulnerabilityDetectorName").start_array();
        for item_155 in var_153 {
            {
                #[allow(unused_mut)]
                let mut object_156 = array_154.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_156, item_155)?;
                object_156.finish();
            }
        }
        array_154.finish();
    }
    if let Some(var_157) = &input.code_vulnerability_detector_tags {
        let mut array_158 = object.key("codeVulnerabilityDetectorTags").start_array();
        for item_159 in var_157 {
            {
                #[allow(unused_mut)]
                let mut object_160 = array_158.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_160, item_159)?;
                object_160.finish();
            }
        }
        array_158.finish();
    }
    if let Some(var_161) = &input.code_vulnerability_file_path {
        let mut array_162 = object.key("codeVulnerabilityFilePath").start_array();
        for item_163 in var_161 {
            {
                #[allow(unused_mut)]
                let mut object_164 = array_162.value().start_object();
                crate::protocol_serde::shape_string_filter::ser_string_filter(&mut object_164, item_163)?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.epss_score {
        let mut array_166 = object.key("epssScore").start_array();
        for item_167 in var_165 {
            {
                #[allow(unused_mut)]
                let mut object_168 = array_166.value().start_object();
                crate::protocol_serde::shape_number_filter::ser_number_filter(&mut object_168, item_167)?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    Ok(())
}

pub(crate) fn de_filter_criteria<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::FilterCriteria>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::FilterCriteriaBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "findingArn" => {
                            builder = builder.set_finding_arn(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "awsAccountId" => {
                            builder = builder.set_aws_account_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "findingType" => {
                            builder = builder.set_finding_type(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "severity" => {
                            builder = builder.set_severity(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "firstObservedAt" => {
                            builder = builder.set_first_observed_at(crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?);
                        }
                        "lastObservedAt" => {
                            builder = builder.set_last_observed_at(crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?);
                        }
                        "updatedAt" => {
                            builder = builder.set_updated_at(crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?);
                        }
                        "findingStatus" => {
                            builder = builder.set_finding_status(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "title" => {
                            builder = builder.set_title(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "inspectorScore" => {
                            builder = builder.set_inspector_score(crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?);
                        }
                        "resourceType" => {
                            builder = builder.set_resource_type(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "resourceId" => {
                            builder = builder.set_resource_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "resourceTags" => {
                            builder = builder.set_resource_tags(crate::protocol_serde::shape_map_filter_list::de_map_filter_list(tokens)?);
                        }
                        "ec2InstanceImageId" => {
                            builder =
                                builder.set_ec2_instance_image_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ec2InstanceVpcId" => {
                            builder =
                                builder.set_ec2_instance_vpc_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ec2InstanceSubnetId" => {
                            builder =
                                builder.set_ec2_instance_subnet_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ecrImagePushedAt" => {
                            builder = builder.set_ecr_image_pushed_at(crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?);
                        }
                        "ecrImageArchitecture" => {
                            builder =
                                builder.set_ecr_image_architecture(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ecrImageRegistry" => {
                            builder = builder.set_ecr_image_registry(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ecrImageRepositoryName" => {
                            builder = builder
                                .set_ecr_image_repository_name(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ecrImageTags" => {
                            builder = builder.set_ecr_image_tags(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "ecrImageHash" => {
                            builder = builder.set_ecr_image_hash(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "portRange" => {
                            builder = builder.set_port_range(crate::protocol_serde::shape_port_range_filter_list::de_port_range_filter_list(tokens)?);
                        }
                        "networkProtocol" => {
                            builder = builder.set_network_protocol(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "componentId" => {
                            builder = builder.set_component_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "componentType" => {
                            builder = builder.set_component_type(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "vulnerabilityId" => {
                            builder = builder.set_vulnerability_id(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "vulnerabilitySource" => {
                            builder =
                                builder.set_vulnerability_source(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "vendorSeverity" => {
                            builder = builder.set_vendor_severity(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "vulnerablePackages" => {
                            builder =
                                builder.set_vulnerable_packages(crate::protocol_serde::shape_package_filter_list::de_package_filter_list(tokens)?);
                        }
                        "relatedVulnerabilities" => {
                            builder =
                                builder.set_related_vulnerabilities(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "fixAvailable" => {
                            builder = builder.set_fix_available(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "lambdaFunctionName" => {
                            builder =
                                builder.set_lambda_function_name(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "lambdaFunctionLayers" => {
                            builder =
                                builder.set_lambda_function_layers(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "lambdaFunctionRuntime" => {
                            builder =
                                builder.set_lambda_function_runtime(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "lambdaFunctionLastModifiedAt" => {
                            builder = builder
                                .set_lambda_function_last_modified_at(crate::protocol_serde::shape_date_filter_list::de_date_filter_list(tokens)?);
                        }
                        "lambdaFunctionExecutionRoleArn" => {
                            builder = builder.set_lambda_function_execution_role_arn(
                                crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?,
                            );
                        }
                        "exploitAvailable" => {
                            builder = builder.set_exploit_available(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "codeVulnerabilityDetectorName" => {
                            builder = builder.set_code_vulnerability_detector_name(
                                crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?,
                            );
                        }
                        "codeVulnerabilityDetectorTags" => {
                            builder = builder.set_code_vulnerability_detector_tags(
                                crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?,
                            );
                        }
                        "codeVulnerabilityFilePath" => {
                            builder = builder
                                .set_code_vulnerability_file_path(crate::protocol_serde::shape_string_filter_list::de_string_filter_list(tokens)?);
                        }
                        "epssScore" => {
                            builder = builder.set_epss_score(crate::protocol_serde::shape_number_filter_list::de_number_filter_list(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
