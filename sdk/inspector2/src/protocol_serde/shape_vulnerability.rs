// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_vulnerability<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Vulnerability>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::VulnerabilityBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "id" => {
                            builder = builder.set_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "cwes" => {
                            builder = builder.set_cwes(crate::protocol_serde::shape_cwes::de_cwes(tokens)?);
                        }
                        "cisaData" => {
                            builder = builder.set_cisa_data(crate::protocol_serde::shape_cisa_data::de_cisa_data(tokens)?);
                        }
                        "source" => {
                            builder = builder.set_source(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VulnerabilitySource::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "description" => {
                            builder = builder.set_description(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "atigData" => {
                            builder = builder.set_atig_data(crate::protocol_serde::shape_atig_data::de_atig_data(tokens)?);
                        }
                        "vendorSeverity" => {
                            builder = builder.set_vendor_severity(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "cvss3" => {
                            builder = builder.set_cvss3(crate::protocol_serde::shape_cvss3::de_cvss3(tokens)?);
                        }
                        "relatedVulnerabilities" => {
                            builder = builder.set_related_vulnerabilities(
                                crate::protocol_serde::shape_related_vulnerabilities::de_related_vulnerabilities(tokens)?,
                            );
                        }
                        "cvss2" => {
                            builder = builder.set_cvss2(crate::protocol_serde::shape_cvss2::de_cvss2(tokens)?);
                        }
                        "vendorCreatedAt" => {
                            builder = builder.set_vendor_created_at(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "vendorUpdatedAt" => {
                            builder = builder.set_vendor_updated_at(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "sourceUrl" => {
                            builder = builder.set_source_url(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "referenceUrls" => {
                            builder = builder.set_reference_urls(
                                crate::protocol_serde::shape_vulnerability_reference_urls::de_vulnerability_reference_urls(tokens)?,
                            );
                        }
                        "exploitObserved" => {
                            builder = builder.set_exploit_observed(crate::protocol_serde::shape_exploit_observed::de_exploit_observed(tokens)?);
                        }
                        "detectionPlatforms" => {
                            builder =
                                builder.set_detection_platforms(crate::protocol_serde::shape_detection_platforms::de_detection_platforms(tokens)?);
                        }
                        "epss" => {
                            builder = builder.set_epss(crate::protocol_serde::shape_epss::de_epss(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::vulnerability_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
