// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetAccountStatusOutput {
    /// <p>An array of objects that provide details on the status of Amazon Inspector for each of the requested accounts.</p>
    #[doc(hidden)]
    pub accounts: std::option::Option<std::vec::Vec<crate::types::AccountState>>,
    /// <p>An array of objects detailing any accounts that failed to enable Amazon Inspector and why.</p>
    #[doc(hidden)]
    pub failed_accounts: std::option::Option<std::vec::Vec<crate::types::FailedAccount>>,
    _request_id: Option<String>,
}
impl BatchGetAccountStatusOutput {
    /// <p>An array of objects that provide details on the status of Amazon Inspector for each of the requested accounts.</p>
    pub fn accounts(&self) -> std::option::Option<&[crate::types::AccountState]> {
        self.accounts.as_deref()
    }
    /// <p>An array of objects detailing any accounts that failed to enable Amazon Inspector and why.</p>
    pub fn failed_accounts(&self) -> std::option::Option<&[crate::types::FailedAccount]> {
        self.failed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchGetAccountStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetAccountStatusOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetAccountStatusOutput`](crate::operation::batch_get_account_status::BatchGetAccountStatusOutput).
    pub fn builder(
    ) -> crate::operation::batch_get_account_status::builders::BatchGetAccountStatusOutputBuilder
    {
        crate::operation::batch_get_account_status::builders::BatchGetAccountStatusOutputBuilder::default()
    }
}

/// A builder for [`BatchGetAccountStatusOutput`](crate::operation::batch_get_account_status::BatchGetAccountStatusOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchGetAccountStatusOutputBuilder {
    pub(crate) accounts: std::option::Option<std::vec::Vec<crate::types::AccountState>>,
    pub(crate) failed_accounts: std::option::Option<std::vec::Vec<crate::types::FailedAccount>>,
    _request_id: Option<String>,
}
impl BatchGetAccountStatusOutputBuilder {
    /// Appends an item to `accounts`.
    ///
    /// To override the contents of this collection use [`set_accounts`](Self::set_accounts).
    ///
    /// <p>An array of objects that provide details on the status of Amazon Inspector for each of the requested accounts.</p>
    pub fn accounts(mut self, input: crate::types::AccountState) -> Self {
        let mut v = self.accounts.unwrap_or_default();
        v.push(input);
        self.accounts = Some(v);
        self
    }
    /// <p>An array of objects that provide details on the status of Amazon Inspector for each of the requested accounts.</p>
    pub fn set_accounts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AccountState>>,
    ) -> Self {
        self.accounts = input;
        self
    }
    /// Appends an item to `failed_accounts`.
    ///
    /// To override the contents of this collection use [`set_failed_accounts`](Self::set_failed_accounts).
    ///
    /// <p>An array of objects detailing any accounts that failed to enable Amazon Inspector and why.</p>
    pub fn failed_accounts(mut self, input: crate::types::FailedAccount) -> Self {
        let mut v = self.failed_accounts.unwrap_or_default();
        v.push(input);
        self.failed_accounts = Some(v);
        self
    }
    /// <p>An array of objects detailing any accounts that failed to enable Amazon Inspector and why.</p>
    pub fn set_failed_accounts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FailedAccount>>,
    ) -> Self {
        self.failed_accounts = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetAccountStatusOutput`](crate::operation::batch_get_account_status::BatchGetAccountStatusOutput).
    pub fn build(self) -> crate::operation::batch_get_account_status::BatchGetAccountStatusOutput {
        crate::operation::batch_get_account_status::BatchGetAccountStatusOutput {
            accounts: self.accounts,
            failed_accounts: self.failed_accounts,
            _request_id: self._request_id,
        }
    }
}
