// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCoverageStatisticsOutput {
    /// <p>An array with the number for each group.</p>
    #[doc(hidden)]
    pub counts_by_group: std::option::Option<std::vec::Vec<crate::types::Counts>>,
    /// <p>The total number for all groups.</p>
    #[doc(hidden)]
    pub total_counts: std::option::Option<i64>,
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListCoverageStatisticsOutput {
    /// <p>An array with the number for each group.</p>
    pub fn counts_by_group(&self) -> std::option::Option<&[crate::types::Counts]> {
        self.counts_by_group.as_deref()
    }
    /// <p>The total number for all groups.</p>
    pub fn total_counts(&self) -> std::option::Option<i64> {
        self.total_counts
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCoverageStatisticsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListCoverageStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`ListCoverageStatisticsOutput`](crate::operation::list_coverage_statistics::ListCoverageStatisticsOutput).
    pub fn builder(
    ) -> crate::operation::list_coverage_statistics::builders::ListCoverageStatisticsOutputBuilder
    {
        crate::operation::list_coverage_statistics::builders::ListCoverageStatisticsOutputBuilder::default()
    }
}

/// A builder for [`ListCoverageStatisticsOutput`](crate::operation::list_coverage_statistics::ListCoverageStatisticsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListCoverageStatisticsOutputBuilder {
    pub(crate) counts_by_group: std::option::Option<std::vec::Vec<crate::types::Counts>>,
    pub(crate) total_counts: std::option::Option<i64>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListCoverageStatisticsOutputBuilder {
    /// Appends an item to `counts_by_group`.
    ///
    /// To override the contents of this collection use [`set_counts_by_group`](Self::set_counts_by_group).
    ///
    /// <p>An array with the number for each group.</p>
    pub fn counts_by_group(mut self, input: crate::types::Counts) -> Self {
        let mut v = self.counts_by_group.unwrap_or_default();
        v.push(input);
        self.counts_by_group = Some(v);
        self
    }
    /// <p>An array with the number for each group.</p>
    pub fn set_counts_by_group(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Counts>>,
    ) -> Self {
        self.counts_by_group = input;
        self
    }
    /// <p>The total number for all groups.</p>
    pub fn total_counts(mut self, input: i64) -> Self {
        self.total_counts = Some(input);
        self
    }
    /// <p>The total number for all groups.</p>
    pub fn set_total_counts(mut self, input: std::option::Option<i64>) -> Self {
        self.total_counts = input;
        self
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListCoverageStatisticsOutput`](crate::operation::list_coverage_statistics::ListCoverageStatisticsOutput).
    pub fn build(self) -> crate::operation::list_coverage_statistics::ListCoverageStatisticsOutput {
        crate::operation::list_coverage_statistics::ListCoverageStatisticsOutput {
            counts_by_group: self.counts_by_group,
            total_counts: self.total_counts,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
