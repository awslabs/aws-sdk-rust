// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListFiltersInput {
    /// <p>The Amazon resource number (ARN) of the filter.</p>
    #[doc(hidden)]
    pub arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The action the filter applies to matched findings.</p>
    #[doc(hidden)]
    pub action: std::option::Option<crate::types::FilterAction>,
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return in the response.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListFiltersInput {
    /// <p>The Amazon resource number (ARN) of the filter.</p>
    pub fn arns(&self) -> std::option::Option<&[std::string::String]> {
        self.arns.as_deref()
    }
    /// <p>The action the filter applies to matched findings.</p>
    pub fn action(&self) -> std::option::Option<&crate::types::FilterAction> {
        self.action.as_ref()
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListFiltersInput {
    /// Creates a new builder-style object to manufacture [`ListFiltersInput`](crate::operation::list_filters::ListFiltersInput).
    pub fn builder() -> crate::operation::list_filters::builders::ListFiltersInputBuilder {
        crate::operation::list_filters::builders::ListFiltersInputBuilder::default()
    }
}

/// A builder for [`ListFiltersInput`](crate::operation::list_filters::ListFiltersInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListFiltersInputBuilder {
    pub(crate) arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) action: std::option::Option<crate::types::FilterAction>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListFiltersInputBuilder {
    /// Appends an item to `arns`.
    ///
    /// To override the contents of this collection use [`set_arns`](Self::set_arns).
    ///
    /// <p>The Amazon resource number (ARN) of the filter.</p>
    pub fn arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.arns.unwrap_or_default();
        v.push(input.into());
        self.arns = Some(v);
        self
    }
    /// <p>The Amazon resource number (ARN) of the filter.</p>
    pub fn set_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.arns = input;
        self
    }
    /// <p>The action the filter applies to matched findings.</p>
    pub fn action(mut self, input: crate::types::FilterAction) -> Self {
        self.action = Some(input);
        self
    }
    /// <p>The action the filter applies to matched findings.</p>
    pub fn set_action(mut self, input: std::option::Option<crate::types::FilterAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListFiltersInput`](crate::operation::list_filters::ListFiltersInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_filters::ListFiltersInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_filters::ListFiltersInput {
            arns: self.arns,
            action: self.action,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
