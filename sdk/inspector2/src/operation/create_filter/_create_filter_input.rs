// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateFilterInput {
    /// <p>Defines the action that is to be applied to the findings that match the filter.</p>
    pub action: ::std::option::Option<crate::types::FilterAction>,
    /// <p>A description of the filter.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Defines the criteria to be used in the filter for querying findings.</p>
    pub filter_criteria: ::std::option::Option<crate::types::FilterCriteria>,
    /// <p>The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A list of tags for the filter.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The reason for creating the filter.</p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl CreateFilterInput {
    /// <p>Defines the action that is to be applied to the findings that match the filter.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::FilterAction> {
        self.action.as_ref()
    }
    /// <p>A description of the filter.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Defines the criteria to be used in the filter for querying findings.</p>
    pub fn filter_criteria(&self) -> ::std::option::Option<&crate::types::FilterCriteria> {
        self.filter_criteria.as_ref()
    }
    /// <p>The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A list of tags for the filter.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The reason for creating the filter.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl CreateFilterInput {
    /// Creates a new builder-style object to manufacture [`CreateFilterInput`](crate::operation::create_filter::CreateFilterInput).
    pub fn builder() -> crate::operation::create_filter::builders::CreateFilterInputBuilder {
        crate::operation::create_filter::builders::CreateFilterInputBuilder::default()
    }
}

/// A builder for [`CreateFilterInput`](crate::operation::create_filter::CreateFilterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateFilterInputBuilder {
    pub(crate) action: ::std::option::Option<crate::types::FilterAction>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) filter_criteria: ::std::option::Option<crate::types::FilterCriteria>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl CreateFilterInputBuilder {
    /// <p>Defines the action that is to be applied to the findings that match the filter.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::FilterAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the action that is to be applied to the findings that match the filter.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::FilterAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>Defines the action that is to be applied to the findings that match the filter.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::FilterAction> {
        &self.action
    }
    /// <p>A description of the filter.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the filter.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the filter.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Defines the criteria to be used in the filter for querying findings.</p>
    /// This field is required.
    pub fn filter_criteria(mut self, input: crate::types::FilterCriteria) -> Self {
        self.filter_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the criteria to be used in the filter for querying findings.</p>
    pub fn set_filter_criteria(mut self, input: ::std::option::Option<crate::types::FilterCriteria>) -> Self {
        self.filter_criteria = input;
        self
    }
    /// <p>Defines the criteria to be used in the filter for querying findings.</p>
    pub fn get_filter_criteria(&self) -> &::std::option::Option<crate::types::FilterCriteria> {
        &self.filter_criteria
    }
    /// <p>The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags for the filter.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A list of tags for the filter.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags for the filter.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The reason for creating the filter.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for creating the filter.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason for creating the filter.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`CreateFilterInput`](crate::operation::create_filter::CreateFilterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_filter::CreateFilterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_filter::CreateFilterInput {
            action: self.action,
            description: self.description,
            filter_criteria: self.filter_criteria,
            name: self.name,
            tags: self.tags,
            reason: self.reason,
        })
    }
}
