// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateFindingsReportInput {
    /// <p>The filter criteria to apply to the results of the finding report.</p>
    #[doc(hidden)]
    pub filter_criteria: std::option::Option<crate::types::FilterCriteria>,
    /// <p>The format to generate the report in.</p>
    #[doc(hidden)]
    pub report_format: std::option::Option<crate::types::ReportFormat>,
    /// <p>The Amazon S3 export destination for the report.</p>
    #[doc(hidden)]
    pub s3_destination: std::option::Option<crate::types::Destination>,
}
impl CreateFindingsReportInput {
    /// <p>The filter criteria to apply to the results of the finding report.</p>
    pub fn filter_criteria(&self) -> std::option::Option<&crate::types::FilterCriteria> {
        self.filter_criteria.as_ref()
    }
    /// <p>The format to generate the report in.</p>
    pub fn report_format(&self) -> std::option::Option<&crate::types::ReportFormat> {
        self.report_format.as_ref()
    }
    /// <p>The Amazon S3 export destination for the report.</p>
    pub fn s3_destination(&self) -> std::option::Option<&crate::types::Destination> {
        self.s3_destination.as_ref()
    }
}
impl CreateFindingsReportInput {
    /// Creates a new builder-style object to manufacture [`CreateFindingsReportInput`](crate::operation::create_findings_report::CreateFindingsReportInput).
    pub fn builder(
    ) -> crate::operation::create_findings_report::builders::CreateFindingsReportInputBuilder {
        crate::operation::create_findings_report::builders::CreateFindingsReportInputBuilder::default()
    }
}

/// A builder for [`CreateFindingsReportInput`](crate::operation::create_findings_report::CreateFindingsReportInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateFindingsReportInputBuilder {
    pub(crate) filter_criteria: std::option::Option<crate::types::FilterCriteria>,
    pub(crate) report_format: std::option::Option<crate::types::ReportFormat>,
    pub(crate) s3_destination: std::option::Option<crate::types::Destination>,
}
impl CreateFindingsReportInputBuilder {
    /// <p>The filter criteria to apply to the results of the finding report.</p>
    pub fn filter_criteria(mut self, input: crate::types::FilterCriteria) -> Self {
        self.filter_criteria = Some(input);
        self
    }
    /// <p>The filter criteria to apply to the results of the finding report.</p>
    pub fn set_filter_criteria(
        mut self,
        input: std::option::Option<crate::types::FilterCriteria>,
    ) -> Self {
        self.filter_criteria = input;
        self
    }
    /// <p>The format to generate the report in.</p>
    pub fn report_format(mut self, input: crate::types::ReportFormat) -> Self {
        self.report_format = Some(input);
        self
    }
    /// <p>The format to generate the report in.</p>
    pub fn set_report_format(
        mut self,
        input: std::option::Option<crate::types::ReportFormat>,
    ) -> Self {
        self.report_format = input;
        self
    }
    /// <p>The Amazon S3 export destination for the report.</p>
    pub fn s3_destination(mut self, input: crate::types::Destination) -> Self {
        self.s3_destination = Some(input);
        self
    }
    /// <p>The Amazon S3 export destination for the report.</p>
    pub fn set_s3_destination(
        mut self,
        input: std::option::Option<crate::types::Destination>,
    ) -> Self {
        self.s3_destination = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateFindingsReportInput`](crate::operation::create_findings_report::CreateFindingsReportInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_findings_report::CreateFindingsReportInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_findings_report::CreateFindingsReportInput {
                filter_criteria: self.filter_criteria,
                report_format: self.report_format,
                s3_destination: self.s3_destination,
            },
        )
    }
}
