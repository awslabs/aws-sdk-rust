// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateFilterInput {
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    pub action: ::std::option::Option<crate::types::FilterAction>,
    /// <p>A description of the filter.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Defines the criteria to be update in the filter.</p>
    pub filter_criteria: ::std::option::Option<crate::types::FilterCriteria>,
    /// <p>The name of the filter.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Number (ARN) of the filter to update.</p>
    pub filter_arn: ::std::option::Option<::std::string::String>,
    /// <p>The reason the filter was updated.</p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl UpdateFilterInput {
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::FilterAction> {
        self.action.as_ref()
    }
    /// <p>A description of the filter.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Defines the criteria to be update in the filter.</p>
    pub fn filter_criteria(&self) -> ::std::option::Option<&crate::types::FilterCriteria> {
        self.filter_criteria.as_ref()
    }
    /// <p>The name of the filter.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Number (ARN) of the filter to update.</p>
    pub fn filter_arn(&self) -> ::std::option::Option<&str> {
        self.filter_arn.as_deref()
    }
    /// <p>The reason the filter was updated.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl UpdateFilterInput {
    /// Creates a new builder-style object to manufacture [`UpdateFilterInput`](crate::operation::update_filter::UpdateFilterInput).
    pub fn builder() -> crate::operation::update_filter::builders::UpdateFilterInputBuilder {
        crate::operation::update_filter::builders::UpdateFilterInputBuilder::default()
    }
}

/// A builder for [`UpdateFilterInput`](crate::operation::update_filter::UpdateFilterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateFilterInputBuilder {
    pub(crate) action: ::std::option::Option<crate::types::FilterAction>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) filter_criteria: ::std::option::Option<crate::types::FilterCriteria>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) filter_arn: ::std::option::Option<::std::string::String>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl UpdateFilterInputBuilder {
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    pub fn action(mut self, input: crate::types::FilterAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::FilterAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::FilterAction> {
        &self.action
    }
    /// <p>A description of the filter.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the filter.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the filter.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Defines the criteria to be update in the filter.</p>
    pub fn filter_criteria(mut self, input: crate::types::FilterCriteria) -> Self {
        self.filter_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the criteria to be update in the filter.</p>
    pub fn set_filter_criteria(mut self, input: ::std::option::Option<crate::types::FilterCriteria>) -> Self {
        self.filter_criteria = input;
        self
    }
    /// <p>Defines the criteria to be update in the filter.</p>
    pub fn get_filter_criteria(&self) -> &::std::option::Option<crate::types::FilterCriteria> {
        &self.filter_criteria
    }
    /// <p>The name of the filter.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the filter.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the filter.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Number (ARN) of the filter to update.</p>
    /// This field is required.
    pub fn filter_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the filter to update.</p>
    pub fn set_filter_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the filter to update.</p>
    pub fn get_filter_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_arn
    }
    /// <p>The reason the filter was updated.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason the filter was updated.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason the filter was updated.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`UpdateFilterInput`](crate::operation::update_filter::UpdateFilterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_filter::UpdateFilterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_filter::UpdateFilterInput {
            action: self.action,
            description: self.description,
            filter_criteria: self.filter_criteria,
            name: self.name,
            filter_arn: self.filter_arn,
            reason: self.reason,
        })
    }
}
