// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSbomExportInput {
    /// <p>The resource filter criteria for the software bill of materials (SBOM) report.</p>
    pub resource_filter_criteria: ::std::option::Option<crate::types::ResourceFilterCriteria>,
    /// <p>The output format for the software bill of materials (SBOM) report.</p>
    pub report_format: ::std::option::Option<crate::types::SbomReportFormat>,
    /// <p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>
    pub s3_destination: ::std::option::Option<crate::types::Destination>,
}
impl CreateSbomExportInput {
    /// <p>The resource filter criteria for the software bill of materials (SBOM) report.</p>
    pub fn resource_filter_criteria(&self) -> ::std::option::Option<&crate::types::ResourceFilterCriteria> {
        self.resource_filter_criteria.as_ref()
    }
    /// <p>The output format for the software bill of materials (SBOM) report.</p>
    pub fn report_format(&self) -> ::std::option::Option<&crate::types::SbomReportFormat> {
        self.report_format.as_ref()
    }
    /// <p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>
    pub fn s3_destination(&self) -> ::std::option::Option<&crate::types::Destination> {
        self.s3_destination.as_ref()
    }
}
impl CreateSbomExportInput {
    /// Creates a new builder-style object to manufacture [`CreateSbomExportInput`](crate::operation::create_sbom_export::CreateSbomExportInput).
    pub fn builder() -> crate::operation::create_sbom_export::builders::CreateSbomExportInputBuilder {
        crate::operation::create_sbom_export::builders::CreateSbomExportInputBuilder::default()
    }
}

/// A builder for [`CreateSbomExportInput`](crate::operation::create_sbom_export::CreateSbomExportInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateSbomExportInputBuilder {
    pub(crate) resource_filter_criteria: ::std::option::Option<crate::types::ResourceFilterCriteria>,
    pub(crate) report_format: ::std::option::Option<crate::types::SbomReportFormat>,
    pub(crate) s3_destination: ::std::option::Option<crate::types::Destination>,
}
impl CreateSbomExportInputBuilder {
    /// <p>The resource filter criteria for the software bill of materials (SBOM) report.</p>
    pub fn resource_filter_criteria(mut self, input: crate::types::ResourceFilterCriteria) -> Self {
        self.resource_filter_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource filter criteria for the software bill of materials (SBOM) report.</p>
    pub fn set_resource_filter_criteria(mut self, input: ::std::option::Option<crate::types::ResourceFilterCriteria>) -> Self {
        self.resource_filter_criteria = input;
        self
    }
    /// <p>The resource filter criteria for the software bill of materials (SBOM) report.</p>
    pub fn get_resource_filter_criteria(&self) -> &::std::option::Option<crate::types::ResourceFilterCriteria> {
        &self.resource_filter_criteria
    }
    /// <p>The output format for the software bill of materials (SBOM) report.</p>
    /// This field is required.
    pub fn report_format(mut self, input: crate::types::SbomReportFormat) -> Self {
        self.report_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output format for the software bill of materials (SBOM) report.</p>
    pub fn set_report_format(mut self, input: ::std::option::Option<crate::types::SbomReportFormat>) -> Self {
        self.report_format = input;
        self
    }
    /// <p>The output format for the software bill of materials (SBOM) report.</p>
    pub fn get_report_format(&self) -> &::std::option::Option<crate::types::SbomReportFormat> {
        &self.report_format
    }
    /// <p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>
    /// This field is required.
    pub fn s3_destination(mut self, input: crate::types::Destination) -> Self {
        self.s3_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>
    pub fn set_s3_destination(mut self, input: ::std::option::Option<crate::types::Destination>) -> Self {
        self.s3_destination = input;
        self
    }
    /// <p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>
    pub fn get_s3_destination(&self) -> &::std::option::Option<crate::types::Destination> {
        &self.s3_destination
    }
    /// Consumes the builder and constructs a [`CreateSbomExportInput`](crate::operation::create_sbom_export::CreateSbomExportInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_sbom_export::CreateSbomExportInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_sbom_export::CreateSbomExportInput {
            resource_filter_criteria: self.resource_filter_criteria,
            report_format: self.report_format,
            s3_destination: self.s3_destination,
        })
    }
}
