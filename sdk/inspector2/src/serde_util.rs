// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn associate_member_output_correct_errors(
    mut builder: crate::operation::associate_member::builders::AssociateMemberOutputBuilder,
) -> crate::operation::associate_member::builders::AssociateMemberOutputBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_account_status_output_correct_errors(
    mut builder: crate::operation::batch_get_account_status::builders::BatchGetAccountStatusOutputBuilder,
) -> crate::operation::batch_get_account_status::builders::BatchGetAccountStatusOutputBuilder {
    if builder.accounts.is_none() {
        builder.accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_free_trial_info_output_correct_errors(
    mut builder: crate::operation::batch_get_free_trial_info::builders::BatchGetFreeTrialInfoOutputBuilder,
) -> crate::operation::batch_get_free_trial_info::builders::BatchGetFreeTrialInfoOutputBuilder {
    if builder.accounts.is_none() {
        builder.accounts = Some(Default::default())
    }
    if builder.failed_accounts.is_none() {
        builder.failed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn cancel_findings_report_output_correct_errors(
    mut builder: crate::operation::cancel_findings_report::builders::CancelFindingsReportOutputBuilder,
) -> crate::operation::cancel_findings_report::builders::CancelFindingsReportOutputBuilder {
    if builder.report_id.is_none() {
        builder.report_id = Some(Default::default())
    }
    builder
}

pub(crate) fn bad_request_exception_correct_errors(
    mut builder: crate::types::error::builders::BadRequestExceptionBuilder,
) -> crate::types::error::builders::BadRequestExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_filter_output_correct_errors(
    mut builder: crate::operation::create_filter::builders::CreateFilterOutputBuilder,
) -> crate::operation::create_filter::builders::CreateFilterOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_filter_output_correct_errors(
    mut builder: crate::operation::delete_filter::builders::DeleteFilterOutputBuilder,
) -> crate::operation::delete_filter::builders::DeleteFilterOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn disable_output_correct_errors(
    mut builder: crate::operation::disable::builders::DisableOutputBuilder,
) -> crate::operation::disable::builders::DisableOutputBuilder {
    if builder.accounts.is_none() {
        builder.accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn disable_delegated_admin_account_output_correct_errors(
    mut builder: crate::operation::disable_delegated_admin_account::builders::DisableDelegatedAdminAccountOutputBuilder,
) -> crate::operation::disable_delegated_admin_account::builders::DisableDelegatedAdminAccountOutputBuilder {
    if builder.delegated_admin_account_id.is_none() {
        builder.delegated_admin_account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn disassociate_member_output_correct_errors(
    mut builder: crate::operation::disassociate_member::builders::DisassociateMemberOutputBuilder,
) -> crate::operation::disassociate_member::builders::DisassociateMemberOutputBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn enable_output_correct_errors(
    mut builder: crate::operation::enable::builders::EnableOutputBuilder,
) -> crate::operation::enable::builders::EnableOutputBuilder {
    if builder.accounts.is_none() {
        builder.accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn enable_delegated_admin_account_output_correct_errors(
    mut builder: crate::operation::enable_delegated_admin_account::builders::EnableDelegatedAdminAccountOutputBuilder,
) -> crate::operation::enable_delegated_admin_account::builders::EnableDelegatedAdminAccountOutputBuilder {
    if builder.delegated_admin_account_id.is_none() {
        builder.delegated_admin_account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_encryption_key_output_correct_errors(
    mut builder: crate::operation::get_encryption_key::builders::GetEncryptionKeyOutputBuilder,
) -> crate::operation::get_encryption_key::builders::GetEncryptionKeyOutputBuilder {
    if builder.kms_key_id.is_none() {
        builder.kms_key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn list_account_permissions_output_correct_errors(
    mut builder: crate::operation::list_account_permissions::builders::ListAccountPermissionsOutputBuilder,
) -> crate::operation::list_account_permissions::builders::ListAccountPermissionsOutputBuilder {
    if builder.permissions.is_none() {
        builder.permissions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_coverage_statistics_output_correct_errors(
    mut builder: crate::operation::list_coverage_statistics::builders::ListCoverageStatisticsOutputBuilder,
) -> crate::operation::list_coverage_statistics::builders::ListCoverageStatisticsOutputBuilder {
    if builder.total_counts.is_none() {
        builder.total_counts = Some(Default::default())
    }
    builder
}

pub(crate) fn list_filters_output_correct_errors(
    mut builder: crate::operation::list_filters::builders::ListFiltersOutputBuilder,
) -> crate::operation::list_filters::builders::ListFiltersOutputBuilder {
    if builder.filters.is_none() {
        builder.filters = Some(Default::default())
    }
    builder
}

pub(crate) fn list_finding_aggregations_output_correct_errors(
    mut builder: crate::operation::list_finding_aggregations::builders::ListFindingAggregationsOutputBuilder,
) -> crate::operation::list_finding_aggregations::builders::ListFindingAggregationsOutputBuilder {
    if builder.aggregation_type.is_none() {
        builder.aggregation_type = "no value was set".parse::<crate::types::AggregationType>().ok()
    }
    builder
}

pub(crate) fn search_vulnerabilities_output_correct_errors(
    mut builder: crate::operation::search_vulnerabilities::builders::SearchVulnerabilitiesOutputBuilder,
) -> crate::operation::search_vulnerabilities::builders::SearchVulnerabilitiesOutputBuilder {
    if builder.vulnerabilities.is_none() {
        builder.vulnerabilities = Some(Default::default())
    }
    builder
}

pub(crate) fn update_filter_output_correct_errors(
    mut builder: crate::operation::update_filter::builders::UpdateFilterOutputBuilder,
) -> crate::operation::update_filter::builders::UpdateFilterOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_organization_configuration_output_correct_errors(
    mut builder: crate::operation::update_organization_configuration::builders::UpdateOrganizationConfigurationOutputBuilder,
) -> crate::operation::update_organization_configuration::builders::UpdateOrganizationConfigurationOutputBuilder {
    if builder.auto_enable.is_none() {
        builder.auto_enable = {
            let builder = crate::types::builders::AutoEnableBuilder::default();
            crate::serde_util::auto_enable_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn auto_enable_correct_errors(mut builder: crate::types::builders::AutoEnableBuilder) -> crate::types::builders::AutoEnableBuilder {
    if builder.ec2.is_none() {
        builder.ec2 = Some(Default::default())
    }
    if builder.ecr.is_none() {
        builder.ecr = Some(Default::default())
    }
    builder
}

pub(crate) fn destination_correct_errors(mut builder: crate::types::builders::DestinationBuilder) -> crate::types::builders::DestinationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.kms_key_arn.is_none() {
        builder.kms_key_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn account_correct_errors(mut builder: crate::types::builders::AccountBuilder) -> crate::types::builders::AccountBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::Status>().ok()
    }
    if builder.resource_status.is_none() {
        builder.resource_status = {
            let builder = crate::types::builders::ResourceStatusBuilder::default();
            crate::serde_util::resource_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn account_state_correct_errors(mut builder: crate::types::builders::AccountStateBuilder) -> crate::types::builders::AccountStateBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = {
            let builder = crate::types::builders::StateBuilder::default();
            crate::serde_util::state_correct_errors(builder).build().ok()
        }
    }
    if builder.resource_state.is_none() {
        builder.resource_state = {
            let builder = crate::types::builders::ResourceStateBuilder::default();
            Some(crate::serde_util::resource_state_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn code_snippet_error_correct_errors(
    mut builder: crate::types::builders::CodeSnippetErrorBuilder,
) -> crate::types::builders::CodeSnippetErrorBuilder {
    if builder.finding_arn.is_none() {
        builder.finding_arn = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::CodeSnippetErrorCode>().ok()
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn covered_resource_correct_errors(
    mut builder: crate::types::builders::CoveredResourceBuilder,
) -> crate::types::builders::CoveredResourceBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::CoverageResourceType>().ok()
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.scan_type.is_none() {
        builder.scan_type = "no value was set".parse::<crate::types::ScanType>().ok()
    }
    builder
}

pub(crate) fn failed_account_correct_errors(
    mut builder: crate::types::builders::FailedAccountBuilder,
) -> crate::types::builders::FailedAccountBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::ErrorCode>().ok()
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn failed_member_account_ec2_deep_inspection_status_state_correct_errors(
    mut builder: crate::types::builders::FailedMemberAccountEc2DeepInspectionStatusStateBuilder,
) -> crate::types::builders::FailedMemberAccountEc2DeepInspectionStatusStateBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_correct_errors(mut builder: crate::types::builders::FilterBuilder) -> crate::types::builders::FilterBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.owner_id.is_none() {
        builder.owner_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.criteria.is_none() {
        builder.criteria = {
            let builder = crate::types::builders::FilterCriteriaBuilder::default();
            Some(builder.build())
        }
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::FilterAction>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn finding_correct_errors(mut builder: crate::types::builders::FindingBuilder) -> crate::types::builders::FindingBuilder {
    if builder.finding_arn.is_none() {
        builder.finding_arn = Some(Default::default())
    }
    if builder.aws_account_id.is_none() {
        builder.aws_account_id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FindingType>().ok()
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.remediation.is_none() {
        builder.remediation = {
            let builder = crate::types::builders::RemediationBuilder::default();
            Some(builder.build())
        }
    }
    if builder.severity.is_none() {
        builder.severity = "no value was set".parse::<crate::types::Severity>().ok()
    }
    if builder.first_observed_at.is_none() {
        builder.first_observed_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_observed_at.is_none() {
        builder.last_observed_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FindingStatus>().ok()
    }
    if builder.resources.is_none() {
        builder.resources = Some(Default::default())
    }
    builder
}

pub(crate) fn finding_details_error_correct_errors(
    mut builder: crate::types::builders::FindingDetailsErrorBuilder,
) -> crate::types::builders::FindingDetailsErrorBuilder {
    if builder.finding_arn.is_none() {
        builder.finding_arn = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::FindingDetailsErrorCode>().ok()
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn free_trial_account_info_correct_errors(
    mut builder: crate::types::builders::FreeTrialAccountInfoBuilder,
) -> crate::types::builders::FreeTrialAccountInfoBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.free_trial_info.is_none() {
        builder.free_trial_info = Some(Default::default())
    }
    builder
}

pub(crate) fn free_trial_info_error_correct_errors(
    mut builder: crate::types::builders::FreeTrialInfoErrorBuilder,
) -> crate::types::builders::FreeTrialInfoErrorBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::FreeTrialInfoErrorCode>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn member_account_ec2_deep_inspection_status_state_correct_errors(
    mut builder: crate::types::builders::MemberAccountEc2DeepInspectionStatusStateBuilder,
) -> crate::types::builders::MemberAccountEc2DeepInspectionStatusStateBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn permission_correct_errors(mut builder: crate::types::builders::PermissionBuilder) -> crate::types::builders::PermissionBuilder {
    if builder.service.is_none() {
        builder.service = "no value was set".parse::<crate::types::Service>().ok()
    }
    if builder.operation.is_none() {
        builder.operation = "no value was set".parse::<crate::types::Operation>().ok()
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn vulnerability_correct_errors(
    mut builder: crate::types::builders::VulnerabilityBuilder,
) -> crate::types::builders::VulnerabilityBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn ami_aggregation_response_correct_errors(
    mut builder: crate::types::builders::AmiAggregationResponseBuilder,
) -> crate::types::builders::AmiAggregationResponseBuilder {
    if builder.ami.is_none() {
        builder.ami = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_ecr_container_aggregation_response_correct_errors(
    mut builder: crate::types::builders::AwsEcrContainerAggregationResponseBuilder,
) -> crate::types::builders::AwsEcrContainerAggregationResponseBuilder {
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    builder
}

pub(crate) fn code_vulnerability_details_correct_errors(
    mut builder: crate::types::builders::CodeVulnerabilityDetailsBuilder,
) -> crate::types::builders::CodeVulnerabilityDetailsBuilder {
    if builder.file_path.is_none() {
        builder.file_path = {
            let builder = crate::types::builders::CodeFilePathBuilder::default();
            crate::serde_util::code_file_path_correct_errors(builder).build().ok()
        }
    }
    if builder.detector_id.is_none() {
        builder.detector_id = Some(Default::default())
    }
    if builder.detector_name.is_none() {
        builder.detector_name = Some(Default::default())
    }
    if builder.cwes.is_none() {
        builder.cwes = Some(Default::default())
    }
    builder
}

pub(crate) fn ec2_instance_aggregation_response_correct_errors(
    mut builder: crate::types::builders::Ec2InstanceAggregationResponseBuilder,
) -> crate::types::builders::Ec2InstanceAggregationResponseBuilder {
    if builder.instance_id.is_none() {
        builder.instance_id = Some(Default::default())
    }
    builder
}

pub(crate) fn image_layer_aggregation_response_correct_errors(
    mut builder: crate::types::builders::ImageLayerAggregationResponseBuilder,
) -> crate::types::builders::ImageLayerAggregationResponseBuilder {
    if builder.repository.is_none() {
        builder.repository = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.layer_hash.is_none() {
        builder.layer_hash = Some(Default::default())
    }
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_function_aggregation_response_correct_errors(
    mut builder: crate::types::builders::LambdaFunctionAggregationResponseBuilder,
) -> crate::types::builders::LambdaFunctionAggregationResponseBuilder {
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_layer_aggregation_response_correct_errors(
    mut builder: crate::types::builders::LambdaLayerAggregationResponseBuilder,
) -> crate::types::builders::LambdaLayerAggregationResponseBuilder {
    if builder.function_name.is_none() {
        builder.function_name = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.layer_arn.is_none() {
        builder.layer_arn = Some(Default::default())
    }
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn map_filter_correct_errors(mut builder: crate::types::builders::MapFilterBuilder) -> crate::types::builders::MapFilterBuilder {
    if builder.comparison.is_none() {
        builder.comparison = "no value was set".parse::<crate::types::MapComparison>().ok()
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn network_reachability_details_correct_errors(
    mut builder: crate::types::builders::NetworkReachabilityDetailsBuilder,
) -> crate::types::builders::NetworkReachabilityDetailsBuilder {
    if builder.open_port_range.is_none() {
        builder.open_port_range = {
            let builder = crate::types::builders::PortRangeBuilder::default();
            crate::serde_util::port_range_correct_errors(builder).build().ok()
        }
    }
    if builder.protocol.is_none() {
        builder.protocol = "no value was set".parse::<crate::types::NetworkProtocol>().ok()
    }
    if builder.network_path.is_none() {
        builder.network_path = {
            let builder = crate::types::builders::NetworkPathBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn package_aggregation_response_correct_errors(
    mut builder: crate::types::builders::PackageAggregationResponseBuilder,
) -> crate::types::builders::PackageAggregationResponseBuilder {
    if builder.package_name.is_none() {
        builder.package_name = Some(Default::default())
    }
    builder
}

pub(crate) fn package_vulnerability_details_correct_errors(
    mut builder: crate::types::builders::PackageVulnerabilityDetailsBuilder,
) -> crate::types::builders::PackageVulnerabilityDetailsBuilder {
    if builder.vulnerability_id.is_none() {
        builder.vulnerability_id = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    builder
}

pub(crate) fn repository_aggregation_response_correct_errors(
    mut builder: crate::types::builders::RepositoryAggregationResponseBuilder,
) -> crate::types::builders::RepositoryAggregationResponseBuilder {
    if builder.repository.is_none() {
        builder.repository = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_map_filter_correct_errors(
    mut builder: crate::types::builders::ResourceMapFilterBuilder,
) -> crate::types::builders::ResourceMapFilterBuilder {
    if builder.comparison.is_none() {
        builder.comparison = "no value was set".parse::<crate::types::ResourceMapComparison>().ok()
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_state_correct_errors(
    mut builder: crate::types::builders::ResourceStateBuilder,
) -> crate::types::builders::ResourceStateBuilder {
    if builder.ec2.is_none() {
        builder.ec2 = {
            let builder = crate::types::builders::StateBuilder::default();
            crate::serde_util::state_correct_errors(builder).build().ok()
        }
    }
    if builder.ecr.is_none() {
        builder.ecr = {
            let builder = crate::types::builders::StateBuilder::default();
            crate::serde_util::state_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn resource_status_correct_errors(
    mut builder: crate::types::builders::ResourceStatusBuilder,
) -> crate::types::builders::ResourceStatusBuilder {
    if builder.ec2.is_none() {
        builder.ec2 = "no value was set".parse::<crate::types::Status>().ok()
    }
    if builder.ecr.is_none() {
        builder.ecr = "no value was set".parse::<crate::types::Status>().ok()
    }
    builder
}

pub(crate) fn resource_string_filter_correct_errors(
    mut builder: crate::types::builders::ResourceStringFilterBuilder,
) -> crate::types::builders::ResourceStringFilterBuilder {
    if builder.comparison.is_none() {
        builder.comparison = "no value was set".parse::<crate::types::ResourceStringComparison>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn scan_status_correct_errors(mut builder: crate::types::builders::ScanStatusBuilder) -> crate::types::builders::ScanStatusBuilder {
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::ScanStatusCode>().ok()
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ScanStatusReason>().ok()
    }
    builder
}

pub(crate) fn state_correct_errors(mut builder: crate::types::builders::StateBuilder) -> crate::types::builders::StateBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::Status>().ok()
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::ErrorCode>().ok()
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn string_filter_correct_errors(mut builder: crate::types::builders::StringFilterBuilder) -> crate::types::builders::StringFilterBuilder {
    if builder.comparison.is_none() {
        builder.comparison = "no value was set".parse::<crate::types::StringComparison>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn title_aggregation_response_correct_errors(
    mut builder: crate::types::builders::TitleAggregationResponseBuilder,
) -> crate::types::builders::TitleAggregationResponseBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn code_file_path_correct_errors(mut builder: crate::types::builders::CodeFilePathBuilder) -> crate::types::builders::CodeFilePathBuilder {
    if builder.file_name.is_none() {
        builder.file_name = Some(Default::default())
    }
    if builder.file_path.is_none() {
        builder.file_path = Some(Default::default())
    }
    if builder.start_line.is_none() {
        builder.start_line = Some(Default::default())
    }
    if builder.end_line.is_none() {
        builder.end_line = Some(Default::default())
    }
    builder
}

pub(crate) fn code_line_correct_errors(mut builder: crate::types::builders::CodeLineBuilder) -> crate::types::builders::CodeLineBuilder {
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    if builder.line_number.is_none() {
        builder.line_number = Some(Default::default())
    }
    builder
}

pub(crate) fn cvss_score_details_correct_errors(
    mut builder: crate::types::builders::CvssScoreDetailsBuilder,
) -> crate::types::builders::CvssScoreDetailsBuilder {
    if builder.score_source.is_none() {
        builder.score_source = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.score.is_none() {
        builder.score = Some(Default::default())
    }
    if builder.scoring_vector.is_none() {
        builder.scoring_vector = Some(Default::default())
    }
    builder
}

pub(crate) fn free_trial_info_correct_errors(
    mut builder: crate::types::builders::FreeTrialInfoBuilder,
) -> crate::types::builders::FreeTrialInfoBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FreeTrialType>().ok()
    }
    if builder.start.is_none() {
        builder.start = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end.is_none() {
        builder.end = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FreeTrialStatus>().ok()
    }
    builder
}

pub(crate) fn port_range_correct_errors(mut builder: crate::types::builders::PortRangeBuilder) -> crate::types::builders::PortRangeBuilder {
    if builder.begin.is_none() {
        builder.begin = Some(Default::default())
    }
    if builder.end.is_none() {
        builder.end = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_correct_errors(mut builder: crate::types::builders::ResourceBuilder) -> crate::types::builders::ResourceBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn cvss_score_correct_errors(mut builder: crate::types::builders::CvssScoreBuilder) -> crate::types::builders::CvssScoreBuilder {
    if builder.base_score.is_none() {
        builder.base_score = Some(Default::default())
    }
    if builder.scoring_vector.is_none() {
        builder.scoring_vector = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    builder
}

pub(crate) fn vulnerable_package_correct_errors(
    mut builder: crate::types::builders::VulnerablePackageBuilder,
) -> crate::types::builders::VulnerablePackageBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_ecr_container_image_details_correct_errors(
    mut builder: crate::types::builders::AwsEcrContainerImageDetailsBuilder,
) -> crate::types::builders::AwsEcrContainerImageDetailsBuilder {
    if builder.repository_name.is_none() {
        builder.repository_name = Some(Default::default())
    }
    if builder.image_hash.is_none() {
        builder.image_hash = Some(Default::default())
    }
    if builder.registry.is_none() {
        builder.registry = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_lambda_function_details_correct_errors(
    mut builder: crate::types::builders::AwsLambdaFunctionDetailsBuilder,
) -> crate::types::builders::AwsLambdaFunctionDetailsBuilder {
    if builder.function_name.is_none() {
        builder.function_name = Some(Default::default())
    }
    if builder.runtime.is_none() {
        builder.runtime = "no value was set".parse::<crate::types::Runtime>().ok()
    }
    if builder.code_sha256.is_none() {
        builder.code_sha256 = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn cvss_score_adjustment_correct_errors(
    mut builder: crate::types::builders::CvssScoreAdjustmentBuilder,
) -> crate::types::builders::CvssScoreAdjustmentBuilder {
    if builder.metric.is_none() {
        builder.metric = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = Some(Default::default())
    }
    builder
}

pub(crate) fn step_correct_errors(mut builder: crate::types::builders::StepBuilder) -> crate::types::builders::StepBuilder {
    if builder.component_id.is_none() {
        builder.component_id = Some(Default::default())
    }
    if builder.component_type.is_none() {
        builder.component_type = Some(Default::default())
    }
    builder
}
