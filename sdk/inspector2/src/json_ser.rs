// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_member_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateMemberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.account_id {
        object.key("accountId").string(var_1);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_account_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetAccountStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.account_ids {
        let mut array_3 = object.key("accountIds").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4);
            }
        }
        array_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_free_trial_info_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetFreeTrialInfoInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.account_ids {
        let mut array_6 = object.key("accountIds").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7);
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_findings_report_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelFindingsReportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.report_id {
        object.key("reportId").string(var_8);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.action {
        object.key("action").string(var_9.as_str());
    }
    if let Some(var_10) = &input.description {
        object.key("description").string(var_10);
    }
    if let Some(var_11) = &input.filter_criteria {
        let mut object_12 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.name {
        object.key("name").string(var_13);
    }
    if let Some(var_14) = &input.tags {
        let mut object_15 = object.key("tags").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16).string(value_17);
            }
        }
        object_15.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_findings_report_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFindingsReportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.filter_criteria {
        let mut object_19 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.report_format {
        object.key("reportFormat").string(var_20.as_str());
    }
    if let Some(var_21) = &input.s3_destination {
        let mut object_22 = object.key("s3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_destination(&mut object_22, var_21)?;
        object_22.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.arn {
        object.key("arn").string(var_23);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.account_ids {
        let mut array_25 = object.key("accountIds").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26);
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.resource_types {
        let mut array_28 = object.key("resourceTypes").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_delegated_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableDelegatedAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.delegated_admin_account_id {
        object.key("delegatedAdminAccountId").string(var_30);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_member_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateMemberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.account_id {
        object.key("accountId").string(var_31);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.account_ids {
        let mut array_33 = object.key("accountIds").start_array();
        for item_34 in var_32 {
            {
                array_33.value().string(item_34);
            }
        }
        array_33.finish();
    }
    if let Some(var_35) = &input.client_token {
        object.key("clientToken").string(var_35);
    }
    if let Some(var_36) = &input.resource_types {
        let mut array_37 = object.key("resourceTypes").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_delegated_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableDelegatedAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.client_token {
        object.key("clientToken").string(var_39);
    }
    if let Some(var_40) = &input.delegated_admin_account_id {
        object.key("delegatedAdminAccountId").string(var_40);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_findings_report_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFindingsReportStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.report_id {
        object.key("reportId").string(var_41);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_member_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMemberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.account_id {
        object.key("accountId").string(var_42);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_account_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccountPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_43).into()),
        );
    }
    if let Some(var_44) = &input.next_token {
        object.key("nextToken").string(var_44);
    }
    if let Some(var_45) = &input.service {
        object.key("service").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_coverage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCoverageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.filter_criteria {
        let mut object_47 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_coverage_filter_criteria(
            &mut object_47,
            var_46,
        )?;
        object_47.finish();
    }
    if let Some(var_48) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_48).into()),
        );
    }
    if let Some(var_49) = &input.next_token {
        object.key("nextToken").string(var_49);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_coverage_statistics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCoverageStatisticsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.filter_criteria {
        let mut object_51 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_coverage_filter_criteria(
            &mut object_51,
            var_50,
        )?;
        object_51.finish();
    }
    if let Some(var_52) = &input.group_by {
        object.key("groupBy").string(var_52.as_str());
    }
    if let Some(var_53) = &input.next_token {
        object.key("nextToken").string(var_53);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_delegated_admin_accounts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDelegatedAdminAccountsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_54).into()),
        );
    }
    if let Some(var_55) = &input.next_token {
        object.key("nextToken").string(var_55);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_filters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFiltersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.action {
        object.key("action").string(var_56.as_str());
    }
    if let Some(var_57) = &input.arns {
        let mut array_58 = object.key("arns").start_array();
        for item_59 in var_57 {
            {
                array_58.value().string(item_59);
            }
        }
        array_58.finish();
    }
    if let Some(var_60) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_60).into()),
        );
    }
    if let Some(var_61) = &input.next_token {
        object.key("nextToken").string(var_61);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_finding_aggregations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFindingAggregationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.account_ids {
        let mut array_63 = object.key("accountIds").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_65,
                    item_64,
                )?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if let Some(var_66) = &input.aggregation_request {
        let mut object_67 = object.key("aggregationRequest").start_object();
        crate::json_ser::serialize_union_crate_model_aggregation_request(&mut object_67, var_66)?;
        object_67.finish();
    }
    if let Some(var_68) = &input.aggregation_type {
        object.key("aggregationType").string(var_68.as_str());
    }
    if let Some(var_69) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_69).into()),
        );
    }
    if let Some(var_70) = &input.next_token {
        object.key("nextToken").string(var_70);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.filter_criteria {
        let mut object_72 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_72, var_71)?;
        object_72.finish();
    }
    if let Some(var_73) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_73).into()),
        );
    }
    if let Some(var_74) = &input.next_token {
        object.key("nextToken").string(var_74);
    }
    if let Some(var_75) = &input.sort_criteria {
        let mut object_76 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_criteria(&mut object_76, var_75)?;
        object_76.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    if let Some(var_78) = &input.next_token {
        object.key("nextToken").string(var_78);
    }
    if let Some(var_79) = &input.only_associated {
        object.key("onlyAssociated").boolean(*var_79);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_usage_totals_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUsageTotalsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.account_ids {
        let mut array_81 = object.key("accountIds").start_array();
        for item_82 in var_80 {
            {
                array_81.value().string(item_82);
            }
        }
        array_81.finish();
    }
    if let Some(var_83) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_83).into()),
        );
    }
    if let Some(var_84) = &input.next_token {
        object.key("nextToken").string(var_84);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.tags {
        let mut object_86 = object.key("tags").start_object();
        for (key_87, value_88) in var_85 {
            {
                object_86.key(key_87).string(value_88);
            }
        }
        object_86.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.action {
        object.key("action").string(var_89.as_str());
    }
    if let Some(var_90) = &input.description {
        object.key("description").string(var_90);
    }
    if let Some(var_91) = &input.filter_arn {
        object.key("filterArn").string(var_91);
    }
    if let Some(var_92) = &input.filter_criteria {
        let mut object_93 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_filter_criteria(&mut object_93, var_92)?;
        object_93.finish();
    }
    if let Some(var_94) = &input.name {
        object.key("name").string(var_94);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_organization_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOrganizationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.auto_enable {
        let mut object_96 = object.key("autoEnable").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_enable(&mut object_96, var_95)?;
        object_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.finding_arn {
        let mut array_98 = object.key("findingArn").start_array();
        for item_99 in var_97 {
            {
                let mut object_100 = array_98.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_100,
                    item_99,
                )?;
                object_100.finish();
            }
        }
        array_98.finish();
    }
    if let Some(var_101) = &input.aws_account_id {
        let mut array_102 = object.key("awsAccountId").start_array();
        for item_103 in var_101 {
            {
                let mut object_104 = array_102.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_104,
                    item_103,
                )?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    if let Some(var_105) = &input.finding_type {
        let mut array_106 = object.key("findingType").start_array();
        for item_107 in var_105 {
            {
                let mut object_108 = array_106.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_108,
                    item_107,
                )?;
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.severity {
        let mut array_110 = object.key("severity").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_112,
                    item_111,
                )?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.first_observed_at {
        let mut array_114 = object.key("firstObservedAt").start_array();
        for item_115 in var_113 {
            {
                let mut object_116 = array_114.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_116,
                    item_115,
                )?;
                object_116.finish();
            }
        }
        array_114.finish();
    }
    if let Some(var_117) = &input.last_observed_at {
        let mut array_118 = object.key("lastObservedAt").start_array();
        for item_119 in var_117 {
            {
                let mut object_120 = array_118.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_120,
                    item_119,
                )?;
                object_120.finish();
            }
        }
        array_118.finish();
    }
    if let Some(var_121) = &input.updated_at {
        let mut array_122 = object.key("updatedAt").start_array();
        for item_123 in var_121 {
            {
                let mut object_124 = array_122.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_124,
                    item_123,
                )?;
                object_124.finish();
            }
        }
        array_122.finish();
    }
    if let Some(var_125) = &input.finding_status {
        let mut array_126 = object.key("findingStatus").start_array();
        for item_127 in var_125 {
            {
                let mut object_128 = array_126.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_128,
                    item_127,
                )?;
                object_128.finish();
            }
        }
        array_126.finish();
    }
    if let Some(var_129) = &input.title {
        let mut array_130 = object.key("title").start_array();
        for item_131 in var_129 {
            {
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_132,
                    item_131,
                )?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    if let Some(var_133) = &input.inspector_score {
        let mut array_134 = object.key("inspectorScore").start_array();
        for item_135 in var_133 {
            {
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_136,
                    item_135,
                )?;
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.resource_type {
        let mut array_138 = object.key("resourceType").start_array();
        for item_139 in var_137 {
            {
                let mut object_140 = array_138.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_140,
                    item_139,
                )?;
                object_140.finish();
            }
        }
        array_138.finish();
    }
    if let Some(var_141) = &input.resource_id {
        let mut array_142 = object.key("resourceId").start_array();
        for item_143 in var_141 {
            {
                let mut object_144 = array_142.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_144,
                    item_143,
                )?;
                object_144.finish();
            }
        }
        array_142.finish();
    }
    if let Some(var_145) = &input.resource_tags {
        let mut array_146 = object.key("resourceTags").start_array();
        for item_147 in var_145 {
            {
                let mut object_148 = array_146.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_148,
                    item_147,
                )?;
                object_148.finish();
            }
        }
        array_146.finish();
    }
    if let Some(var_149) = &input.ec2_instance_image_id {
        let mut array_150 = object.key("ec2InstanceImageId").start_array();
        for item_151 in var_149 {
            {
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_152,
                    item_151,
                )?;
                object_152.finish();
            }
        }
        array_150.finish();
    }
    if let Some(var_153) = &input.ec2_instance_vpc_id {
        let mut array_154 = object.key("ec2InstanceVpcId").start_array();
        for item_155 in var_153 {
            {
                let mut object_156 = array_154.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_156,
                    item_155,
                )?;
                object_156.finish();
            }
        }
        array_154.finish();
    }
    if let Some(var_157) = &input.ec2_instance_subnet_id {
        let mut array_158 = object.key("ec2InstanceSubnetId").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_160,
                    item_159,
                )?;
                object_160.finish();
            }
        }
        array_158.finish();
    }
    if let Some(var_161) = &input.ecr_image_pushed_at {
        let mut array_162 = object.key("ecrImagePushedAt").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_164,
                    item_163,
                )?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.ecr_image_architecture {
        let mut array_166 = object.key("ecrImageArchitecture").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_168,
                    item_167,
                )?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.ecr_image_registry {
        let mut array_170 = object.key("ecrImageRegistry").start_array();
        for item_171 in var_169 {
            {
                let mut object_172 = array_170.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_172,
                    item_171,
                )?;
                object_172.finish();
            }
        }
        array_170.finish();
    }
    if let Some(var_173) = &input.ecr_image_repository_name {
        let mut array_174 = object.key("ecrImageRepositoryName").start_array();
        for item_175 in var_173 {
            {
                let mut object_176 = array_174.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_176,
                    item_175,
                )?;
                object_176.finish();
            }
        }
        array_174.finish();
    }
    if let Some(var_177) = &input.ecr_image_tags {
        let mut array_178 = object.key("ecrImageTags").start_array();
        for item_179 in var_177 {
            {
                let mut object_180 = array_178.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_180,
                    item_179,
                )?;
                object_180.finish();
            }
        }
        array_178.finish();
    }
    if let Some(var_181) = &input.ecr_image_hash {
        let mut array_182 = object.key("ecrImageHash").start_array();
        for item_183 in var_181 {
            {
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_184,
                    item_183,
                )?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    if let Some(var_185) = &input.port_range {
        let mut array_186 = object.key("portRange").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range_filter(
                    &mut object_188,
                    item_187,
                )?;
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.network_protocol {
        let mut array_190 = object.key("networkProtocol").start_array();
        for item_191 in var_189 {
            {
                let mut object_192 = array_190.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_192,
                    item_191,
                )?;
                object_192.finish();
            }
        }
        array_190.finish();
    }
    if let Some(var_193) = &input.component_id {
        let mut array_194 = object.key("componentId").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_196,
                    item_195,
                )?;
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.component_type {
        let mut array_198 = object.key("componentType").start_array();
        for item_199 in var_197 {
            {
                let mut object_200 = array_198.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_200,
                    item_199,
                )?;
                object_200.finish();
            }
        }
        array_198.finish();
    }
    if let Some(var_201) = &input.vulnerability_id {
        let mut array_202 = object.key("vulnerabilityId").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_204,
                    item_203,
                )?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.vulnerability_source {
        let mut array_206 = object.key("vulnerabilitySource").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_208,
                    item_207,
                )?;
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.vendor_severity {
        let mut array_210 = object.key("vendorSeverity").start_array();
        for item_211 in var_209 {
            {
                let mut object_212 = array_210.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_212,
                    item_211,
                )?;
                object_212.finish();
            }
        }
        array_210.finish();
    }
    if let Some(var_213) = &input.vulnerable_packages {
        let mut array_214 = object.key("vulnerablePackages").start_array();
        for item_215 in var_213 {
            {
                let mut object_216 = array_214.value().start_object();
                crate::json_ser::serialize_structure_crate_model_package_filter(
                    &mut object_216,
                    item_215,
                )?;
                object_216.finish();
            }
        }
        array_214.finish();
    }
    if let Some(var_217) = &input.related_vulnerabilities {
        let mut array_218 = object.key("relatedVulnerabilities").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_220,
                    item_219,
                )?;
                object_220.finish();
            }
        }
        array_218.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.bucket_name {
        object.key("bucketName").string(var_221);
    }
    if let Some(var_222) = &input.key_prefix {
        object.key("keyPrefix").string(var_222);
    }
    if let Some(var_223) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_223);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_coverage_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CoverageFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.scan_status_code {
        let mut array_225 = object.key("scanStatusCode").start_array();
        for item_226 in var_224 {
            {
                let mut object_227 = array_225.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_227,
                    item_226,
                )?;
                object_227.finish();
            }
        }
        array_225.finish();
    }
    if let Some(var_228) = &input.scan_status_reason {
        let mut array_229 = object.key("scanStatusReason").start_array();
        for item_230 in var_228 {
            {
                let mut object_231 = array_229.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_231,
                    item_230,
                )?;
                object_231.finish();
            }
        }
        array_229.finish();
    }
    if let Some(var_232) = &input.account_id {
        let mut array_233 = object.key("accountId").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_235,
                    item_234,
                )?;
                object_235.finish();
            }
        }
        array_233.finish();
    }
    if let Some(var_236) = &input.resource_id {
        let mut array_237 = object.key("resourceId").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_239,
                    item_238,
                )?;
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.resource_type {
        let mut array_241 = object.key("resourceType").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_243,
                    item_242,
                )?;
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.scan_type {
        let mut array_245 = object.key("scanType").start_array();
        for item_246 in var_244 {
            {
                let mut object_247 = array_245.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_247,
                    item_246,
                )?;
                object_247.finish();
            }
        }
        array_245.finish();
    }
    if let Some(var_248) = &input.ecr_repository_name {
        let mut array_249 = object.key("ecrRepositoryName").start_array();
        for item_250 in var_248 {
            {
                let mut object_251 = array_249.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_251,
                    item_250,
                )?;
                object_251.finish();
            }
        }
        array_249.finish();
    }
    if let Some(var_252) = &input.ecr_image_tags {
        let mut array_253 = object.key("ecrImageTags").start_array();
        for item_254 in var_252 {
            {
                let mut object_255 = array_253.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_string_filter(
                    &mut object_255,
                    item_254,
                )?;
                object_255.finish();
            }
        }
        array_253.finish();
    }
    if let Some(var_256) = &input.ec2_instance_tags {
        let mut array_257 = object.key("ec2InstanceTags").start_array();
        for item_258 in var_256 {
            {
                let mut object_259 = array_257.value().start_object();
                crate::json_ser::serialize_structure_crate_model_coverage_map_filter(
                    &mut object_259,
                    item_258,
                )?;
                object_259.finish();
            }
        }
        array_257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.comparison {
        object.key("comparison").string(var_260.as_str());
    }
    if let Some(var_261) = &input.value {
        object.key("value").string(var_261);
    }
    Ok(())
}

pub fn serialize_union_crate_model_aggregation_request(
    object_67: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::AggregationRequest::AccountAggregation(inner) => {
            let mut object_262 = object_67.key("accountAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_account_aggregation(
                &mut object_262,
                inner,
            )?;
            object_262.finish();
        }
        crate::model::AggregationRequest::AmiAggregation(inner) => {
            let mut object_263 = object_67.key("amiAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_ami_aggregation(
                &mut object_263,
                inner,
            )?;
            object_263.finish();
        }
        crate::model::AggregationRequest::AwsEcrContainerAggregation(inner) => {
            let mut object_264 = object_67.key("awsEcrContainerAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_aws_ecr_container_aggregation(
                &mut object_264,
                inner,
            )?;
            object_264.finish();
        }
        crate::model::AggregationRequest::Ec2InstanceAggregation(inner) => {
            let mut object_265 = object_67.key("ec2InstanceAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_ec2_instance_aggregation(
                &mut object_265,
                inner,
            )?;
            object_265.finish();
        }
        crate::model::AggregationRequest::FindingTypeAggregation(inner) => {
            let mut object_266 = object_67.key("findingTypeAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_finding_type_aggregation(
                &mut object_266,
                inner,
            )?;
            object_266.finish();
        }
        crate::model::AggregationRequest::ImageLayerAggregation(inner) => {
            let mut object_267 = object_67.key("imageLayerAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_image_layer_aggregation(
                &mut object_267,
                inner,
            )?;
            object_267.finish();
        }
        crate::model::AggregationRequest::PackageAggregation(inner) => {
            let mut object_268 = object_67.key("packageAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_package_aggregation(
                &mut object_268,
                inner,
            )?;
            object_268.finish();
        }
        crate::model::AggregationRequest::RepositoryAggregation(inner) => {
            let mut object_269 = object_67.key("repositoryAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_repository_aggregation(
                &mut object_269,
                inner,
            )?;
            object_269.finish();
        }
        crate::model::AggregationRequest::TitleAggregation(inner) => {
            let mut object_270 = object_67.key("titleAggregation").start_object();
            crate::json_ser::serialize_structure_crate_model_title_aggregation(
                &mut object_270,
                inner,
            )?;
            object_270.finish();
        }
        crate::model::AggregationRequest::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "AggregationRequest",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.field {
        object.key("field").string(var_271.as_str());
    }
    if let Some(var_272) = &input.sort_order {
        object.key("sortOrder").string(var_272.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_enable(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoEnable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.ec2 {
        object.key("ec2").boolean(*var_273);
    }
    if let Some(var_274) = &input.ecr {
        object.key("ecr").boolean(*var_274);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.start_inclusive {
        object
            .key("startInclusive")
            .date_time(var_275, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_276) = &input.end_inclusive {
        object
            .key("endInclusive")
            .date_time(var_276, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_number_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NumberFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.upper_inclusive {
        object.key("upperInclusive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_277).into()),
        );
    }
    if let Some(var_278) = &input.lower_inclusive {
        object.key("lowerInclusive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_278).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_map_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MapFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.comparison {
        object.key("comparison").string(var_279.as_str());
    }
    if let Some(var_280) = &input.key {
        object.key("key").string(var_280);
    }
    if let Some(var_281) = &input.value {
        object.key("value").string(var_281);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRangeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.begin_inclusive {
        object.key("beginInclusive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_282).into()),
        );
    }
    if let Some(var_283) = &input.end_inclusive {
        object.key("endInclusive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_283).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_package_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PackageFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_284) = &input.name {
        let mut object_285 = object.key("name").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_285, var_284)?;
        object_285.finish();
    }
    if let Some(var_286) = &input.version {
        let mut object_287 = object.key("version").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_287, var_286)?;
        object_287.finish();
    }
    if let Some(var_288) = &input.epoch {
        let mut object_289 = object.key("epoch").start_object();
        crate::json_ser::serialize_structure_crate_model_number_filter(&mut object_289, var_288)?;
        object_289.finish();
    }
    if let Some(var_290) = &input.release {
        let mut object_291 = object.key("release").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_291, var_290)?;
        object_291.finish();
    }
    if let Some(var_292) = &input.architecture {
        let mut object_293 = object.key("architecture").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_293, var_292)?;
        object_293.finish();
    }
    if let Some(var_294) = &input.source_layer_hash {
        let mut object_295 = object.key("sourceLayerHash").start_object();
        crate::json_ser::serialize_structure_crate_model_string_filter(&mut object_295, var_294)?;
        object_295.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_coverage_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CoverageStringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.comparison {
        object.key("comparison").string(var_296.as_str());
    }
    if let Some(var_297) = &input.value {
        object.key("value").string(var_297);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_coverage_map_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CoverageMapFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.comparison {
        object.key("comparison").string(var_298.as_str());
    }
    if let Some(var_299) = &input.key {
        object.key("key").string(var_299);
    }
    if let Some(var_300) = &input.value {
        object.key("value").string(var_300);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_301) = &input.finding_type {
        object.key("findingType").string(var_301.as_str());
    }
    if let Some(var_302) = &input.resource_type {
        object.key("resourceType").string(var_302.as_str());
    }
    if let Some(var_303) = &input.sort_order {
        object.key("sortOrder").string(var_303.as_str());
    }
    if let Some(var_304) = &input.sort_by {
        object.key("sortBy").string(var_304.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ami_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmiAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.amis {
        let mut array_306 = object.key("amis").start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_308,
                    item_307,
                )?;
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.sort_order {
        object.key("sortOrder").string(var_309.as_str());
    }
    if let Some(var_310) = &input.sort_by {
        object.key("sortBy").string(var_310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_container_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrContainerAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.resource_ids {
        let mut array_312 = object.key("resourceIds").start_array();
        for item_313 in var_311 {
            {
                let mut object_314 = array_312.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_314,
                    item_313,
                )?;
                object_314.finish();
            }
        }
        array_312.finish();
    }
    if let Some(var_315) = &input.image_shas {
        let mut array_316 = object.key("imageShas").start_array();
        for item_317 in var_315 {
            {
                let mut object_318 = array_316.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_318,
                    item_317,
                )?;
                object_318.finish();
            }
        }
        array_316.finish();
    }
    if let Some(var_319) = &input.repositories {
        let mut array_320 = object.key("repositories").start_array();
        for item_321 in var_319 {
            {
                let mut object_322 = array_320.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_322,
                    item_321,
                )?;
                object_322.finish();
            }
        }
        array_320.finish();
    }
    if let Some(var_323) = &input.architectures {
        let mut array_324 = object.key("architectures").start_array();
        for item_325 in var_323 {
            {
                let mut object_326 = array_324.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_326,
                    item_325,
                )?;
                object_326.finish();
            }
        }
        array_324.finish();
    }
    if let Some(var_327) = &input.image_tags {
        let mut array_328 = object.key("imageTags").start_array();
        for item_329 in var_327 {
            {
                let mut object_330 = array_328.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_330,
                    item_329,
                )?;
                object_330.finish();
            }
        }
        array_328.finish();
    }
    if let Some(var_331) = &input.sort_order {
        object.key("sortOrder").string(var_331.as_str());
    }
    if let Some(var_332) = &input.sort_by {
        object.key("sortBy").string(var_332.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ec2_instance_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ec2InstanceAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.amis {
        let mut array_334 = object.key("amis").start_array();
        for item_335 in var_333 {
            {
                let mut object_336 = array_334.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_336,
                    item_335,
                )?;
                object_336.finish();
            }
        }
        array_334.finish();
    }
    if let Some(var_337) = &input.operating_systems {
        let mut array_338 = object.key("operatingSystems").start_array();
        for item_339 in var_337 {
            {
                let mut object_340 = array_338.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_340,
                    item_339,
                )?;
                object_340.finish();
            }
        }
        array_338.finish();
    }
    if let Some(var_341) = &input.instance_ids {
        let mut array_342 = object.key("instanceIds").start_array();
        for item_343 in var_341 {
            {
                let mut object_344 = array_342.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_344,
                    item_343,
                )?;
                object_344.finish();
            }
        }
        array_342.finish();
    }
    if let Some(var_345) = &input.instance_tags {
        let mut array_346 = object.key("instanceTags").start_array();
        for item_347 in var_345 {
            {
                let mut object_348 = array_346.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_348,
                    item_347,
                )?;
                object_348.finish();
            }
        }
        array_346.finish();
    }
    if let Some(var_349) = &input.sort_order {
        object.key("sortOrder").string(var_349.as_str());
    }
    if let Some(var_350) = &input.sort_by {
        object.key("sortBy").string(var_350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_type_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingTypeAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_351) = &input.finding_type {
        object.key("findingType").string(var_351.as_str());
    }
    if let Some(var_352) = &input.resource_type {
        object.key("resourceType").string(var_352.as_str());
    }
    if let Some(var_353) = &input.sort_order {
        object.key("sortOrder").string(var_353.as_str());
    }
    if let Some(var_354) = &input.sort_by {
        object.key("sortBy").string(var_354.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_layer_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageLayerAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_355) = &input.repositories {
        let mut array_356 = object.key("repositories").start_array();
        for item_357 in var_355 {
            {
                let mut object_358 = array_356.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_358,
                    item_357,
                )?;
                object_358.finish();
            }
        }
        array_356.finish();
    }
    if let Some(var_359) = &input.resource_ids {
        let mut array_360 = object.key("resourceIds").start_array();
        for item_361 in var_359 {
            {
                let mut object_362 = array_360.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_362,
                    item_361,
                )?;
                object_362.finish();
            }
        }
        array_360.finish();
    }
    if let Some(var_363) = &input.layer_hashes {
        let mut array_364 = object.key("layerHashes").start_array();
        for item_365 in var_363 {
            {
                let mut object_366 = array_364.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_366,
                    item_365,
                )?;
                object_366.finish();
            }
        }
        array_364.finish();
    }
    if let Some(var_367) = &input.sort_order {
        object.key("sortOrder").string(var_367.as_str());
    }
    if let Some(var_368) = &input.sort_by {
        object.key("sortBy").string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_package_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PackageAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.package_names {
        let mut array_370 = object.key("packageNames").start_array();
        for item_371 in var_369 {
            {
                let mut object_372 = array_370.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_372,
                    item_371,
                )?;
                object_372.finish();
            }
        }
        array_370.finish();
    }
    if let Some(var_373) = &input.sort_order {
        object.key("sortOrder").string(var_373.as_str());
    }
    if let Some(var_374) = &input.sort_by {
        object.key("sortBy").string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_repository_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.repositories {
        let mut array_376 = object.key("repositories").start_array();
        for item_377 in var_375 {
            {
                let mut object_378 = array_376.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_378,
                    item_377,
                )?;
                object_378.finish();
            }
        }
        array_376.finish();
    }
    if let Some(var_379) = &input.sort_order {
        object.key("sortOrder").string(var_379.as_str());
    }
    if let Some(var_380) = &input.sort_by {
        object.key("sortBy").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_title_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TitleAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.titles {
        let mut array_382 = object.key("titles").start_array();
        for item_383 in var_381 {
            {
                let mut object_384 = array_382.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_384,
                    item_383,
                )?;
                object_384.finish();
            }
        }
        array_382.finish();
    }
    if let Some(var_385) = &input.vulnerability_ids {
        let mut array_386 = object.key("vulnerabilityIds").start_array();
        for item_387 in var_385 {
            {
                let mut object_388 = array_386.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_388,
                    item_387,
                )?;
                object_388.finish();
            }
        }
        array_386.finish();
    }
    if let Some(var_389) = &input.resource_type {
        object.key("resourceType").string(var_389.as_str());
    }
    if let Some(var_390) = &input.sort_order {
        object.key("sortOrder").string(var_390.as_str());
    }
    if let Some(var_391) = &input.sort_by {
        object.key("sortBy").string(var_391.as_str());
    }
    Ok(())
}
