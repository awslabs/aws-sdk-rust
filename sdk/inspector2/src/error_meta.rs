// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>One or more tags submitted as part of the request is not valid.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>A conflict occurred.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request has failed due to an internal failure of the Amazon Inspector service.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The operation tried to access an invalid resource. Make sure the resource is specified correctly.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>You have exceeded your service quota. To perform the requested action, remove some of the relevant resources, or use Service Quotas to request a service quota increase.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The limit on the number of requests per second was exceeded.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The request has failed validation due to missing required fields or having invalid inputs.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_member::AssociateMemberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_member::AssociateMemberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_member::AssociateMemberError> for Error {
    fn from(err: crate::operation::associate_member::AssociateMemberError) -> Self {
        match err {
            crate::operation::associate_member::AssociateMemberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_member::AssociateMemberError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_member::AssociateMemberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_member::AssociateMemberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_member::AssociateMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_account_status::BatchGetAccountStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_account_status::BatchGetAccountStatusError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_account_status::BatchGetAccountStatusError> for Error {
    fn from(err: crate::operation::batch_get_account_status::BatchGetAccountStatusError) -> Self {
        match err {
            crate::operation::batch_get_account_status::BatchGetAccountStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_get_account_status::BatchGetAccountStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_get_account_status::BatchGetAccountStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_get_account_status::BatchGetAccountStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_get_account_status::BatchGetAccountStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_get_account_status::BatchGetAccountStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_code_snippet::BatchGetCodeSnippetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_code_snippet::BatchGetCodeSnippetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_code_snippet::BatchGetCodeSnippetError> for Error {
    fn from(err: crate::operation::batch_get_code_snippet::BatchGetCodeSnippetError) -> Self {
        match err {
            crate::operation::batch_get_code_snippet::BatchGetCodeSnippetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_get_code_snippet::BatchGetCodeSnippetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_get_code_snippet::BatchGetCodeSnippetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_get_code_snippet::BatchGetCodeSnippetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_get_code_snippet::BatchGetCodeSnippetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_finding_details::BatchGetFindingDetailsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_finding_details::BatchGetFindingDetailsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_finding_details::BatchGetFindingDetailsError> for Error {
    fn from(err: crate::operation::batch_get_finding_details::BatchGetFindingDetailsError) -> Self {
        match err {
            crate::operation::batch_get_finding_details::BatchGetFindingDetailsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_get_finding_details::BatchGetFindingDetailsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_get_finding_details::BatchGetFindingDetailsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_get_finding_details::BatchGetFindingDetailsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_get_finding_details::BatchGetFindingDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_free_trial_info::BatchGetFreeTrialInfoError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_free_trial_info::BatchGetFreeTrialInfoError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_free_trial_info::BatchGetFreeTrialInfoError> for Error {
    fn from(err: crate::operation::batch_get_free_trial_info::BatchGetFreeTrialInfoError) -> Self {
        match err {
            crate::operation::batch_get_free_trial_info::BatchGetFreeTrialInfoError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_get_free_trial_info::BatchGetFreeTrialInfoError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_get_free_trial_info::BatchGetFreeTrialInfoError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_get_free_trial_info::BatchGetFreeTrialInfoError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_get_free_trial_info::BatchGetFreeTrialInfoError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_get_member_ec2_deep_inspection_status::BatchGetMemberEc2DeepInspectionStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_get_member_ec2_deep_inspection_status::BatchGetMemberEc2DeepInspectionStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_member_ec2_deep_inspection_status::BatchGetMemberEc2DeepInspectionStatusError> for Error {
    fn from(err: crate::operation::batch_get_member_ec2_deep_inspection_status::BatchGetMemberEc2DeepInspectionStatusError) -> Self {
        match err {
            crate::operation::batch_get_member_ec2_deep_inspection_status::BatchGetMemberEc2DeepInspectionStatusError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::batch_get_member_ec2_deep_inspection_status::BatchGetMemberEc2DeepInspectionStatusError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::batch_get_member_ec2_deep_inspection_status::BatchGetMemberEc2DeepInspectionStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_get_member_ec2_deep_inspection_status::BatchGetMemberEc2DeepInspectionStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_get_member_ec2_deep_inspection_status::BatchGetMemberEc2DeepInspectionStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_update_member_ec2_deep_inspection_status::BatchUpdateMemberEc2DeepInspectionStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_update_member_ec2_deep_inspection_status::BatchUpdateMemberEc2DeepInspectionStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_update_member_ec2_deep_inspection_status::BatchUpdateMemberEc2DeepInspectionStatusError> for Error {
    fn from(err: crate::operation::batch_update_member_ec2_deep_inspection_status::BatchUpdateMemberEc2DeepInspectionStatusError) -> Self {
        match err {
            crate::operation::batch_update_member_ec2_deep_inspection_status::BatchUpdateMemberEc2DeepInspectionStatusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_update_member_ec2_deep_inspection_status::BatchUpdateMemberEc2DeepInspectionStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_update_member_ec2_deep_inspection_status::BatchUpdateMemberEc2DeepInspectionStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_update_member_ec2_deep_inspection_status::BatchUpdateMemberEc2DeepInspectionStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_update_member_ec2_deep_inspection_status::BatchUpdateMemberEc2DeepInspectionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_findings_report::CancelFindingsReportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_findings_report::CancelFindingsReportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_findings_report::CancelFindingsReportError> for Error {
    fn from(err: crate::operation::cancel_findings_report::CancelFindingsReportError) -> Self {
        match err {
            crate::operation::cancel_findings_report::CancelFindingsReportError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_findings_report::CancelFindingsReportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::cancel_findings_report::CancelFindingsReportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::cancel_findings_report::CancelFindingsReportError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_findings_report::CancelFindingsReportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_findings_report::CancelFindingsReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_sbom_export::CancelSbomExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_sbom_export::CancelSbomExportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_sbom_export::CancelSbomExportError> for Error {
    fn from(err: crate::operation::cancel_sbom_export::CancelSbomExportError) -> Self {
        match err {
            crate::operation::cancel_sbom_export::CancelSbomExportError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_sbom_export::CancelSbomExportError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_sbom_export::CancelSbomExportError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_sbom_export::CancelSbomExportError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_sbom_export::CancelSbomExportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_sbom_export::CancelSbomExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_filter::CreateFilterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_filter::CreateFilterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_filter::CreateFilterError> for Error {
    fn from(err: crate::operation::create_filter::CreateFilterError) -> Self {
        match err {
            crate::operation::create_filter::CreateFilterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_filter::CreateFilterError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_filter::CreateFilterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_filter::CreateFilterError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_filter::CreateFilterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_filter::CreateFilterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_filter::CreateFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_findings_report::CreateFindingsReportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_findings_report::CreateFindingsReportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_findings_report::CreateFindingsReportError> for Error {
    fn from(err: crate::operation::create_findings_report::CreateFindingsReportError) -> Self {
        match err {
            crate::operation::create_findings_report::CreateFindingsReportError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_findings_report::CreateFindingsReportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_findings_report::CreateFindingsReportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_findings_report::CreateFindingsReportError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_findings_report::CreateFindingsReportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_findings_report::CreateFindingsReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_sbom_export::CreateSbomExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_sbom_export::CreateSbomExportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_sbom_export::CreateSbomExportError> for Error {
    fn from(err: crate::operation::create_sbom_export::CreateSbomExportError) -> Self {
        match err {
            crate::operation::create_sbom_export::CreateSbomExportError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_sbom_export::CreateSbomExportError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_sbom_export::CreateSbomExportError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_sbom_export::CreateSbomExportError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_sbom_export::CreateSbomExportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_sbom_export::CreateSbomExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_filter::DeleteFilterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_filter::DeleteFilterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_filter::DeleteFilterError> for Error {
    fn from(err: crate::operation::delete_filter::DeleteFilterError) -> Self {
        match err {
            crate::operation::delete_filter::DeleteFilterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_filter::DeleteFilterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_filter::DeleteFilterError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_filter::DeleteFilterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_filter::DeleteFilterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_filter::DeleteFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationError> for Error {
    fn from(err: crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationError) -> Self {
        match err {
            crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disable::DisableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disable::DisableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disable::DisableError> for Error {
    fn from(err: crate::operation::disable::DisableError) -> Self {
        match err {
            crate::operation::disable::DisableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disable::DisableError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disable::DisableError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disable::DisableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disable::DisableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disable::DisableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disable_delegated_admin_account::DisableDelegatedAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disable_delegated_admin_account::DisableDelegatedAdminAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disable_delegated_admin_account::DisableDelegatedAdminAccountError> for Error {
    fn from(err: crate::operation::disable_delegated_admin_account::DisableDelegatedAdminAccountError) -> Self {
        match err {
            crate::operation::disable_delegated_admin_account::DisableDelegatedAdminAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disable_delegated_admin_account::DisableDelegatedAdminAccountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disable_delegated_admin_account::DisableDelegatedAdminAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disable_delegated_admin_account::DisableDelegatedAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disable_delegated_admin_account::DisableDelegatedAdminAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disable_delegated_admin_account::DisableDelegatedAdminAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disable_delegated_admin_account::DisableDelegatedAdminAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_member::DisassociateMemberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_member::DisassociateMemberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_member::DisassociateMemberError> for Error {
    fn from(err: crate::operation::disassociate_member::DisassociateMemberError) -> Self {
        match err {
            crate::operation::disassociate_member::DisassociateMemberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_member::DisassociateMemberError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_member::DisassociateMemberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_member::DisassociateMemberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_member::DisassociateMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::enable::EnableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::enable::EnableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::enable::EnableError> for Error {
    fn from(err: crate::operation::enable::EnableError) -> Self {
        match err {
            crate::operation::enable::EnableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::enable::EnableError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::enable::EnableError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::enable::EnableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::enable::EnableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::enable::EnableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError> for Error {
    fn from(err: crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError) -> Self {
        match err {
            crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_configuration::GetConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_configuration::GetConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_configuration::GetConfigurationError> for Error {
    fn from(err: crate::operation::get_configuration::GetConfigurationError) -> Self {
        match err {
            crate::operation::get_configuration::GetConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_configuration::GetConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_configuration::GetConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_configuration::GetConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_delegated_admin_account::GetDelegatedAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_delegated_admin_account::GetDelegatedAdminAccountError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_delegated_admin_account::GetDelegatedAdminAccountError> for Error {
    fn from(err: crate::operation::get_delegated_admin_account::GetDelegatedAdminAccountError) -> Self {
        match err {
            crate::operation::get_delegated_admin_account::GetDelegatedAdminAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_delegated_admin_account::GetDelegatedAdminAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_delegated_admin_account::GetDelegatedAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_delegated_admin_account::GetDelegatedAdminAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_delegated_admin_account::GetDelegatedAdminAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_delegated_admin_account::GetDelegatedAdminAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_ec2_deep_inspection_configuration::GetEc2DeepInspectionConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_ec2_deep_inspection_configuration::GetEc2DeepInspectionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_ec2_deep_inspection_configuration::GetEc2DeepInspectionConfigurationError> for Error {
    fn from(err: crate::operation::get_ec2_deep_inspection_configuration::GetEc2DeepInspectionConfigurationError) -> Self {
        match err {
            crate::operation::get_ec2_deep_inspection_configuration::GetEc2DeepInspectionConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_ec2_deep_inspection_configuration::GetEc2DeepInspectionConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_ec2_deep_inspection_configuration::GetEc2DeepInspectionConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_ec2_deep_inspection_configuration::GetEc2DeepInspectionConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_ec2_deep_inspection_configuration::GetEc2DeepInspectionConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_encryption_key::GetEncryptionKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_encryption_key::GetEncryptionKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_encryption_key::GetEncryptionKeyError> for Error {
    fn from(err: crate::operation::get_encryption_key::GetEncryptionKeyError) -> Self {
        match err {
            crate::operation::get_encryption_key::GetEncryptionKeyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_encryption_key::GetEncryptionKeyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_encryption_key::GetEncryptionKeyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_encryption_key::GetEncryptionKeyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_encryption_key::GetEncryptionKeyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_encryption_key::GetEncryptionKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_findings_report_status::GetFindingsReportStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_findings_report_status::GetFindingsReportStatusError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_findings_report_status::GetFindingsReportStatusError> for Error {
    fn from(err: crate::operation::get_findings_report_status::GetFindingsReportStatusError) -> Self {
        match err {
            crate::operation::get_findings_report_status::GetFindingsReportStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_findings_report_status::GetFindingsReportStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_findings_report_status::GetFindingsReportStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_findings_report_status::GetFindingsReportStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_findings_report_status::GetFindingsReportStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_findings_report_status::GetFindingsReportStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_member::GetMemberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_member::GetMemberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_member::GetMemberError> for Error {
    fn from(err: crate::operation::get_member::GetMemberError) -> Self {
        match err {
            crate::operation::get_member::GetMemberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_member::GetMemberError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_member::GetMemberError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_member::GetMemberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_member::GetMemberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_member::GetMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_sbom_export::GetSbomExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_sbom_export::GetSbomExportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_sbom_export::GetSbomExportError> for Error {
    fn from(err: crate::operation::get_sbom_export::GetSbomExportError) -> Self {
        match err {
            crate::operation::get_sbom_export::GetSbomExportError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_sbom_export::GetSbomExportError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_sbom_export::GetSbomExportError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_sbom_export::GetSbomExportError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_sbom_export::GetSbomExportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_sbom_export::GetSbomExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_account_permissions::ListAccountPermissionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_account_permissions::ListAccountPermissionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_account_permissions::ListAccountPermissionsError> for Error {
    fn from(err: crate::operation::list_account_permissions::ListAccountPermissionsError) -> Self {
        match err {
            crate::operation::list_account_permissions::ListAccountPermissionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_account_permissions::ListAccountPermissionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_account_permissions::ListAccountPermissionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_account_permissions::ListAccountPermissionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_account_permissions::ListAccountPermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_coverage::ListCoverageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_coverage::ListCoverageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_coverage::ListCoverageError> for Error {
    fn from(err: crate::operation::list_coverage::ListCoverageError) -> Self {
        match err {
            crate::operation::list_coverage::ListCoverageError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_coverage::ListCoverageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_coverage::ListCoverageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_coverage::ListCoverageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_coverage_statistics::ListCoverageStatisticsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_coverage_statistics::ListCoverageStatisticsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_coverage_statistics::ListCoverageStatisticsError> for Error {
    fn from(err: crate::operation::list_coverage_statistics::ListCoverageStatisticsError) -> Self {
        match err {
            crate::operation::list_coverage_statistics::ListCoverageStatisticsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_coverage_statistics::ListCoverageStatisticsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_coverage_statistics::ListCoverageStatisticsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_coverage_statistics::ListCoverageStatisticsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_delegated_admin_accounts::ListDelegatedAdminAccountsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_delegated_admin_accounts::ListDelegatedAdminAccountsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_delegated_admin_accounts::ListDelegatedAdminAccountsError> for Error {
    fn from(err: crate::operation::list_delegated_admin_accounts::ListDelegatedAdminAccountsError) -> Self {
        match err {
            crate::operation::list_delegated_admin_accounts::ListDelegatedAdminAccountsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_delegated_admin_accounts::ListDelegatedAdminAccountsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_delegated_admin_accounts::ListDelegatedAdminAccountsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_delegated_admin_accounts::ListDelegatedAdminAccountsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_delegated_admin_accounts::ListDelegatedAdminAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_filters::ListFiltersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_filters::ListFiltersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_filters::ListFiltersError> for Error {
    fn from(err: crate::operation::list_filters::ListFiltersError) -> Self {
        match err {
            crate::operation::list_filters::ListFiltersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_filters::ListFiltersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_filters::ListFiltersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_filters::ListFiltersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_filters::ListFiltersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_finding_aggregations::ListFindingAggregationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_finding_aggregations::ListFindingAggregationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_finding_aggregations::ListFindingAggregationsError> for Error {
    fn from(err: crate::operation::list_finding_aggregations::ListFindingAggregationsError) -> Self {
        match err {
            crate::operation::list_finding_aggregations::ListFindingAggregationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_finding_aggregations::ListFindingAggregationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_finding_aggregations::ListFindingAggregationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_finding_aggregations::ListFindingAggregationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_findings::ListFindingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_findings::ListFindingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_findings::ListFindingsError> for Error {
    fn from(err: crate::operation::list_findings::ListFindingsError) -> Self {
        match err {
            crate::operation::list_findings::ListFindingsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_findings::ListFindingsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_findings::ListFindingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_findings::ListFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_members::ListMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_members::ListMembersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_members::ListMembersError> for Error {
    fn from(err: crate::operation::list_members::ListMembersError) -> Self {
        match err {
            crate::operation::list_members::ListMembersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_members::ListMembersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_members::ListMembersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_members::ListMembersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_members::ListMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_usage_totals::ListUsageTotalsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_usage_totals::ListUsageTotalsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_usage_totals::ListUsageTotalsError> for Error {
    fn from(err: crate::operation::list_usage_totals::ListUsageTotalsError) -> Self {
        match err {
            crate::operation::list_usage_totals::ListUsageTotalsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_usage_totals::ListUsageTotalsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_usage_totals::ListUsageTotalsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_usage_totals::ListUsageTotalsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_usage_totals::ListUsageTotalsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_encryption_key::ResetEncryptionKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_encryption_key::ResetEncryptionKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reset_encryption_key::ResetEncryptionKeyError> for Error {
    fn from(err: crate::operation::reset_encryption_key::ResetEncryptionKeyError) -> Self {
        match err {
            crate::operation::reset_encryption_key::ResetEncryptionKeyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::reset_encryption_key::ResetEncryptionKeyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::reset_encryption_key::ResetEncryptionKeyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::reset_encryption_key::ResetEncryptionKeyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reset_encryption_key::ResetEncryptionKeyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reset_encryption_key::ResetEncryptionKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_vulnerabilities::SearchVulnerabilitiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_vulnerabilities::SearchVulnerabilitiesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_vulnerabilities::SearchVulnerabilitiesError> for Error {
    fn from(err: crate::operation::search_vulnerabilities::SearchVulnerabilitiesError) -> Self {
        match err {
            crate::operation::search_vulnerabilities::SearchVulnerabilitiesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_vulnerabilities::SearchVulnerabilitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::search_vulnerabilities::SearchVulnerabilitiesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_vulnerabilities::SearchVulnerabilitiesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_vulnerabilities::SearchVulnerabilitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_configuration::UpdateConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_configuration::UpdateConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_configuration::UpdateConfigurationError> for Error {
    fn from(err: crate::operation::update_configuration::UpdateConfigurationError) -> Self {
        match err {
            crate::operation::update_configuration::UpdateConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_configuration::UpdateConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_configuration::UpdateConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_configuration::UpdateConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_configuration::UpdateConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_ec2_deep_inspection_configuration::UpdateEc2DeepInspectionConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_ec2_deep_inspection_configuration::UpdateEc2DeepInspectionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_ec2_deep_inspection_configuration::UpdateEc2DeepInspectionConfigurationError> for Error {
    fn from(err: crate::operation::update_ec2_deep_inspection_configuration::UpdateEc2DeepInspectionConfigurationError) -> Self {
        match err {
            crate::operation::update_ec2_deep_inspection_configuration::UpdateEc2DeepInspectionConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_ec2_deep_inspection_configuration::UpdateEc2DeepInspectionConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_ec2_deep_inspection_configuration::UpdateEc2DeepInspectionConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_ec2_deep_inspection_configuration::UpdateEc2DeepInspectionConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_ec2_deep_inspection_configuration::UpdateEc2DeepInspectionConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_encryption_key::UpdateEncryptionKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_encryption_key::UpdateEncryptionKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_encryption_key::UpdateEncryptionKeyError> for Error {
    fn from(err: crate::operation::update_encryption_key::UpdateEncryptionKeyError) -> Self {
        match err {
            crate::operation::update_encryption_key::UpdateEncryptionKeyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_encryption_key::UpdateEncryptionKeyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_encryption_key::UpdateEncryptionKeyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_encryption_key::UpdateEncryptionKeyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_encryption_key::UpdateEncryptionKeyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_encryption_key::UpdateEncryptionKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_filter::UpdateFilterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_filter::UpdateFilterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_filter::UpdateFilterError> for Error {
    fn from(err: crate::operation::update_filter::UpdateFilterError) -> Self {
        match err {
            crate::operation::update_filter::UpdateFilterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_filter::UpdateFilterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_filter::UpdateFilterError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_filter::UpdateFilterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_filter::UpdateFilterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_filter::UpdateFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_organization_configuration::UpdateOrganizationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_organization_configuration::UpdateOrganizationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_organization_configuration::UpdateOrganizationConfigurationError> for Error {
    fn from(err: crate::operation::update_organization_configuration::UpdateOrganizationConfigurationError) -> Self {
        match err {
            crate::operation::update_organization_configuration::UpdateOrganizationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_organization_configuration::UpdateOrganizationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_organization_configuration::UpdateOrganizationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_organization_configuration::UpdateOrganizationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_organization_configuration::UpdateOrganizationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_org_ec2_deep_inspection_configuration::UpdateOrgEc2DeepInspectionConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_org_ec2_deep_inspection_configuration::UpdateOrgEc2DeepInspectionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_org_ec2_deep_inspection_configuration::UpdateOrgEc2DeepInspectionConfigurationError> for Error {
    fn from(err: crate::operation::update_org_ec2_deep_inspection_configuration::UpdateOrgEc2DeepInspectionConfigurationError) -> Self {
        match err {
            crate::operation::update_org_ec2_deep_inspection_configuration::UpdateOrgEc2DeepInspectionConfigurationError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::update_org_ec2_deep_inspection_configuration::UpdateOrgEc2DeepInspectionConfigurationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_org_ec2_deep_inspection_configuration::UpdateOrgEc2DeepInspectionConfigurationError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::update_org_ec2_deep_inspection_configuration::UpdateOrgEc2DeepInspectionConfigurationError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::update_org_ec2_deep_inspection_configuration::UpdateOrgEc2DeepInspectionConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::BadRequestException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
