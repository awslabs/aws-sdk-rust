// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListUsageTotals`](crate::client::fluent_builders::ListUsageTotals) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListUsageTotals::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListUsageTotals::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListUsageTotals::set_max_results): <p>The maximum number of results to return in the response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListUsageTotals::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListUsageTotals::set_next_token): <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
    ///   - [`account_ids(Vec<String>)`](crate::client::fluent_builders::ListUsageTotals::account_ids) / [`set_account_ids(Option<Vec<String>>)`](crate::client::fluent_builders::ListUsageTotals::set_account_ids): <p>The Amazon Web Services account IDs to retrieve usage totals for.</p>
    /// - On success, responds with [`ListUsageTotalsOutput`](crate::output::ListUsageTotalsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListUsageTotalsOutput::next_token): <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    ///   - [`totals(Option<Vec<UsageTotal>>)`](crate::output::ListUsageTotalsOutput::totals): <p>An object with details on the total usage for the requested account.</p>
    /// - On failure, responds with [`SdkError<ListUsageTotalsError>`](crate::error::ListUsageTotalsError)
    pub fn list_usage_totals(&self) -> crate::client::fluent_builders::ListUsageTotals {
        crate::client::fluent_builders::ListUsageTotals::new(self.handle.clone())
    }
}
