// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`EnableDelegatedAdminAccount`](crate::operation::enable_delegated_admin_account::builders::EnableDelegatedAdminAccountFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`delegated_admin_account_id(impl Into<String>)`](crate::operation::enable_delegated_admin_account::builders::EnableDelegatedAdminAccountFluentBuilder::delegated_admin_account_id) / [`set_delegated_admin_account_id(Option<String>)`](crate::operation::enable_delegated_admin_account::builders::EnableDelegatedAdminAccountFluentBuilder::set_delegated_admin_account_id): <p>The Amazon Web Services account ID of the Amazon Inspector delegated administrator.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::enable_delegated_admin_account::builders::EnableDelegatedAdminAccountFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::enable_delegated_admin_account::builders::EnableDelegatedAdminAccountFluentBuilder::set_client_token): <p>The idempotency token for the request.</p>
    /// - On success, responds with [`EnableDelegatedAdminAccountOutput`](crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountOutput) with field(s):
    ///   - [`delegated_admin_account_id(Option<String>)`](crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountOutput::delegated_admin_account_id): <p>The Amazon Web Services account ID of the successfully Amazon Inspector delegated administrator.</p>
    /// - On failure, responds with [`SdkError<EnableDelegatedAdminAccountError>`](crate::operation::enable_delegated_admin_account::EnableDelegatedAdminAccountError)
    pub fn enable_delegated_admin_account(&self) -> crate::operation::enable_delegated_admin_account::builders::EnableDelegatedAdminAccountFluentBuilder{
        crate::operation::enable_delegated_admin_account::builders::EnableDelegatedAdminAccountFluentBuilder::new(self.handle.clone())
    }
}
