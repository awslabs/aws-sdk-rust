// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a specific vulnerability Amazon Inspector can detect.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Vulnerability {
    /// <p>The ID for the specific vulnerability.</p>
    pub id: ::std::string::String,
    /// <p>The Common Weakness Enumeration (CWE) associated with the vulnerability.</p>
    pub cwes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An object that contains the Cybersecurity and Infrastructure Security Agency (CISA) details for the vulnerability.</p>
    pub cisa_data: ::std::option::Option<crate::types::CisaData>,
    /// <p>The source of the vulnerability information. Possible results are <code>RHEL</code>, <code>AMAZON_CVE</code>, <code>DEBIAN</code> or <code>NVD</code>.</p>
    pub source: ::std::option::Option<crate::types::VulnerabilitySource>,
    /// <p>A description of the vulnerability.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>An object that contains information about the Amazon Web Services Threat Intel Group (ATIG) details for the vulnerability.</p>
    pub atig_data: ::std::option::Option<crate::types::AtigData>,
    /// <p>The severity assigned by the vendor.</p>
    pub vendor_severity: ::std::option::Option<::std::string::String>,
    /// <p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 3 details for the vulnerability.</p>
    pub cvss3: ::std::option::Option<crate::types::Cvss3>,
    /// <p>A list of related vulnerabilities.</p>
    pub related_vulnerabilities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 2 details for the vulnerability.</p>
    pub cvss2: ::std::option::Option<crate::types::Cvss2>,
    /// <p>The date and time when the vendor created this vulnerability.</p>
    pub vendor_created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the vendor last updated this vulnerability.</p>
    pub vendor_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A link to the official source material for this vulnerability.</p>
    pub source_url: ::std::option::Option<::std::string::String>,
    /// <p>Links to various resources with more information on this vulnerability. </p>
    pub reference_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An object that contains details on when the exploit was observed.</p>
    pub exploit_observed: ::std::option::Option<crate::types::ExploitObserved>,
    /// <p>Platforms that the vulnerability can be detected on.</p>
    pub detection_platforms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An object that contains the Exploit Prediction Scoring System (EPSS) score for a vulnerability.</p>
    pub epss: ::std::option::Option<crate::types::Epss>,
}
impl Vulnerability {
    /// <p>The ID for the specific vulnerability.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The Common Weakness Enumeration (CWE) associated with the vulnerability.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cwes.is_none()`.
    pub fn cwes(&self) -> &[::std::string::String] {
        self.cwes.as_deref().unwrap_or_default()
    }
    /// <p>An object that contains the Cybersecurity and Infrastructure Security Agency (CISA) details for the vulnerability.</p>
    pub fn cisa_data(&self) -> ::std::option::Option<&crate::types::CisaData> {
        self.cisa_data.as_ref()
    }
    /// <p>The source of the vulnerability information. Possible results are <code>RHEL</code>, <code>AMAZON_CVE</code>, <code>DEBIAN</code> or <code>NVD</code>.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::VulnerabilitySource> {
        self.source.as_ref()
    }
    /// <p>A description of the vulnerability.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An object that contains information about the Amazon Web Services Threat Intel Group (ATIG) details for the vulnerability.</p>
    pub fn atig_data(&self) -> ::std::option::Option<&crate::types::AtigData> {
        self.atig_data.as_ref()
    }
    /// <p>The severity assigned by the vendor.</p>
    pub fn vendor_severity(&self) -> ::std::option::Option<&str> {
        self.vendor_severity.as_deref()
    }
    /// <p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 3 details for the vulnerability.</p>
    pub fn cvss3(&self) -> ::std::option::Option<&crate::types::Cvss3> {
        self.cvss3.as_ref()
    }
    /// <p>A list of related vulnerabilities.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.related_vulnerabilities.is_none()`.
    pub fn related_vulnerabilities(&self) -> &[::std::string::String] {
        self.related_vulnerabilities.as_deref().unwrap_or_default()
    }
    /// <p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 2 details for the vulnerability.</p>
    pub fn cvss2(&self) -> ::std::option::Option<&crate::types::Cvss2> {
        self.cvss2.as_ref()
    }
    /// <p>The date and time when the vendor created this vulnerability.</p>
    pub fn vendor_created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.vendor_created_at.as_ref()
    }
    /// <p>The date and time when the vendor last updated this vulnerability.</p>
    pub fn vendor_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.vendor_updated_at.as_ref()
    }
    /// <p>A link to the official source material for this vulnerability.</p>
    pub fn source_url(&self) -> ::std::option::Option<&str> {
        self.source_url.as_deref()
    }
    /// <p>Links to various resources with more information on this vulnerability. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reference_urls.is_none()`.
    pub fn reference_urls(&self) -> &[::std::string::String] {
        self.reference_urls.as_deref().unwrap_or_default()
    }
    /// <p>An object that contains details on when the exploit was observed.</p>
    pub fn exploit_observed(&self) -> ::std::option::Option<&crate::types::ExploitObserved> {
        self.exploit_observed.as_ref()
    }
    /// <p>Platforms that the vulnerability can be detected on.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.detection_platforms.is_none()`.
    pub fn detection_platforms(&self) -> &[::std::string::String] {
        self.detection_platforms.as_deref().unwrap_or_default()
    }
    /// <p>An object that contains the Exploit Prediction Scoring System (EPSS) score for a vulnerability.</p>
    pub fn epss(&self) -> ::std::option::Option<&crate::types::Epss> {
        self.epss.as_ref()
    }
}
impl Vulnerability {
    /// Creates a new builder-style object to manufacture [`Vulnerability`](crate::types::Vulnerability).
    pub fn builder() -> crate::types::builders::VulnerabilityBuilder {
        crate::types::builders::VulnerabilityBuilder::default()
    }
}

/// A builder for [`Vulnerability`](crate::types::Vulnerability).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VulnerabilityBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) cwes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) cisa_data: ::std::option::Option<crate::types::CisaData>,
    pub(crate) source: ::std::option::Option<crate::types::VulnerabilitySource>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) atig_data: ::std::option::Option<crate::types::AtigData>,
    pub(crate) vendor_severity: ::std::option::Option<::std::string::String>,
    pub(crate) cvss3: ::std::option::Option<crate::types::Cvss3>,
    pub(crate) related_vulnerabilities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) cvss2: ::std::option::Option<crate::types::Cvss2>,
    pub(crate) vendor_created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) vendor_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) source_url: ::std::option::Option<::std::string::String>,
    pub(crate) reference_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) exploit_observed: ::std::option::Option<crate::types::ExploitObserved>,
    pub(crate) detection_platforms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) epss: ::std::option::Option<crate::types::Epss>,
}
impl VulnerabilityBuilder {
    /// <p>The ID for the specific vulnerability.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the specific vulnerability.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID for the specific vulnerability.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `cwes`.
    ///
    /// To override the contents of this collection use [`set_cwes`](Self::set_cwes).
    ///
    /// <p>The Common Weakness Enumeration (CWE) associated with the vulnerability.</p>
    pub fn cwes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cwes.unwrap_or_default();
        v.push(input.into());
        self.cwes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Common Weakness Enumeration (CWE) associated with the vulnerability.</p>
    pub fn set_cwes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cwes = input;
        self
    }
    /// <p>The Common Weakness Enumeration (CWE) associated with the vulnerability.</p>
    pub fn get_cwes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cwes
    }
    /// <p>An object that contains the Cybersecurity and Infrastructure Security Agency (CISA) details for the vulnerability.</p>
    pub fn cisa_data(mut self, input: crate::types::CisaData) -> Self {
        self.cisa_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the Cybersecurity and Infrastructure Security Agency (CISA) details for the vulnerability.</p>
    pub fn set_cisa_data(mut self, input: ::std::option::Option<crate::types::CisaData>) -> Self {
        self.cisa_data = input;
        self
    }
    /// <p>An object that contains the Cybersecurity and Infrastructure Security Agency (CISA) details for the vulnerability.</p>
    pub fn get_cisa_data(&self) -> &::std::option::Option<crate::types::CisaData> {
        &self.cisa_data
    }
    /// <p>The source of the vulnerability information. Possible results are <code>RHEL</code>, <code>AMAZON_CVE</code>, <code>DEBIAN</code> or <code>NVD</code>.</p>
    pub fn source(mut self, input: crate::types::VulnerabilitySource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the vulnerability information. Possible results are <code>RHEL</code>, <code>AMAZON_CVE</code>, <code>DEBIAN</code> or <code>NVD</code>.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::VulnerabilitySource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the vulnerability information. Possible results are <code>RHEL</code>, <code>AMAZON_CVE</code>, <code>DEBIAN</code> or <code>NVD</code>.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::VulnerabilitySource> {
        &self.source
    }
    /// <p>A description of the vulnerability.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the vulnerability.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the vulnerability.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>An object that contains information about the Amazon Web Services Threat Intel Group (ATIG) details for the vulnerability.</p>
    pub fn atig_data(mut self, input: crate::types::AtigData) -> Self {
        self.atig_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains information about the Amazon Web Services Threat Intel Group (ATIG) details for the vulnerability.</p>
    pub fn set_atig_data(mut self, input: ::std::option::Option<crate::types::AtigData>) -> Self {
        self.atig_data = input;
        self
    }
    /// <p>An object that contains information about the Amazon Web Services Threat Intel Group (ATIG) details for the vulnerability.</p>
    pub fn get_atig_data(&self) -> &::std::option::Option<crate::types::AtigData> {
        &self.atig_data
    }
    /// <p>The severity assigned by the vendor.</p>
    pub fn vendor_severity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vendor_severity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The severity assigned by the vendor.</p>
    pub fn set_vendor_severity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vendor_severity = input;
        self
    }
    /// <p>The severity assigned by the vendor.</p>
    pub fn get_vendor_severity(&self) -> &::std::option::Option<::std::string::String> {
        &self.vendor_severity
    }
    /// <p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 3 details for the vulnerability.</p>
    pub fn cvss3(mut self, input: crate::types::Cvss3) -> Self {
        self.cvss3 = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 3 details for the vulnerability.</p>
    pub fn set_cvss3(mut self, input: ::std::option::Option<crate::types::Cvss3>) -> Self {
        self.cvss3 = input;
        self
    }
    /// <p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 3 details for the vulnerability.</p>
    pub fn get_cvss3(&self) -> &::std::option::Option<crate::types::Cvss3> {
        &self.cvss3
    }
    /// Appends an item to `related_vulnerabilities`.
    ///
    /// To override the contents of this collection use [`set_related_vulnerabilities`](Self::set_related_vulnerabilities).
    ///
    /// <p>A list of related vulnerabilities.</p>
    pub fn related_vulnerabilities(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.related_vulnerabilities.unwrap_or_default();
        v.push(input.into());
        self.related_vulnerabilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of related vulnerabilities.</p>
    pub fn set_related_vulnerabilities(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.related_vulnerabilities = input;
        self
    }
    /// <p>A list of related vulnerabilities.</p>
    pub fn get_related_vulnerabilities(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.related_vulnerabilities
    }
    /// <p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 2 details for the vulnerability.</p>
    pub fn cvss2(mut self, input: crate::types::Cvss2) -> Self {
        self.cvss2 = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 2 details for the vulnerability.</p>
    pub fn set_cvss2(mut self, input: ::std::option::Option<crate::types::Cvss2>) -> Self {
        self.cvss2 = input;
        self
    }
    /// <p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 2 details for the vulnerability.</p>
    pub fn get_cvss2(&self) -> &::std::option::Option<crate::types::Cvss2> {
        &self.cvss2
    }
    /// <p>The date and time when the vendor created this vulnerability.</p>
    pub fn vendor_created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.vendor_created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the vendor created this vulnerability.</p>
    pub fn set_vendor_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.vendor_created_at = input;
        self
    }
    /// <p>The date and time when the vendor created this vulnerability.</p>
    pub fn get_vendor_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.vendor_created_at
    }
    /// <p>The date and time when the vendor last updated this vulnerability.</p>
    pub fn vendor_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.vendor_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the vendor last updated this vulnerability.</p>
    pub fn set_vendor_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.vendor_updated_at = input;
        self
    }
    /// <p>The date and time when the vendor last updated this vulnerability.</p>
    pub fn get_vendor_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.vendor_updated_at
    }
    /// <p>A link to the official source material for this vulnerability.</p>
    pub fn source_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A link to the official source material for this vulnerability.</p>
    pub fn set_source_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_url = input;
        self
    }
    /// <p>A link to the official source material for this vulnerability.</p>
    pub fn get_source_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_url
    }
    /// Appends an item to `reference_urls`.
    ///
    /// To override the contents of this collection use [`set_reference_urls`](Self::set_reference_urls).
    ///
    /// <p>Links to various resources with more information on this vulnerability. </p>
    pub fn reference_urls(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.reference_urls.unwrap_or_default();
        v.push(input.into());
        self.reference_urls = ::std::option::Option::Some(v);
        self
    }
    /// <p>Links to various resources with more information on this vulnerability. </p>
    pub fn set_reference_urls(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.reference_urls = input;
        self
    }
    /// <p>Links to various resources with more information on this vulnerability. </p>
    pub fn get_reference_urls(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.reference_urls
    }
    /// <p>An object that contains details on when the exploit was observed.</p>
    pub fn exploit_observed(mut self, input: crate::types::ExploitObserved) -> Self {
        self.exploit_observed = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains details on when the exploit was observed.</p>
    pub fn set_exploit_observed(mut self, input: ::std::option::Option<crate::types::ExploitObserved>) -> Self {
        self.exploit_observed = input;
        self
    }
    /// <p>An object that contains details on when the exploit was observed.</p>
    pub fn get_exploit_observed(&self) -> &::std::option::Option<crate::types::ExploitObserved> {
        &self.exploit_observed
    }
    /// Appends an item to `detection_platforms`.
    ///
    /// To override the contents of this collection use [`set_detection_platforms`](Self::set_detection_platforms).
    ///
    /// <p>Platforms that the vulnerability can be detected on.</p>
    pub fn detection_platforms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.detection_platforms.unwrap_or_default();
        v.push(input.into());
        self.detection_platforms = ::std::option::Option::Some(v);
        self
    }
    /// <p>Platforms that the vulnerability can be detected on.</p>
    pub fn set_detection_platforms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.detection_platforms = input;
        self
    }
    /// <p>Platforms that the vulnerability can be detected on.</p>
    pub fn get_detection_platforms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.detection_platforms
    }
    /// <p>An object that contains the Exploit Prediction Scoring System (EPSS) score for a vulnerability.</p>
    pub fn epss(mut self, input: crate::types::Epss) -> Self {
        self.epss = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the Exploit Prediction Scoring System (EPSS) score for a vulnerability.</p>
    pub fn set_epss(mut self, input: ::std::option::Option<crate::types::Epss>) -> Self {
        self.epss = input;
        self
    }
    /// <p>An object that contains the Exploit Prediction Scoring System (EPSS) score for a vulnerability.</p>
    pub fn get_epss(&self) -> &::std::option::Option<crate::types::Epss> {
        &self.epss
    }
    /// Consumes the builder and constructs a [`Vulnerability`](crate::types::Vulnerability).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::VulnerabilityBuilder::id)
    pub fn build(self) -> ::std::result::Result<crate::types::Vulnerability, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Vulnerability {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building Vulnerability",
                )
            })?,
            cwes: self.cwes,
            cisa_data: self.cisa_data,
            source: self.source,
            description: self.description,
            atig_data: self.atig_data,
            vendor_severity: self.vendor_severity,
            cvss3: self.cvss3,
            related_vulnerabilities: self.related_vulnerabilities,
            cvss2: self.cvss2,
            vendor_created_at: self.vendor_created_at,
            vendor_updated_at: self.vendor_updated_at,
            source_url: self.source_url,
            reference_urls: self.reference_urls,
            exploit_observed: self.exploit_observed,
            detection_platforms: self.detection_platforms,
            epss: self.epss,
        })
    }
}
