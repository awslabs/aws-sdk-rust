// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the CVSS score.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CvssScoreDetails {
    /// <p>The source for the CVSS score.</p>
    #[doc(hidden)]
    pub score_source: std::option::Option<std::string::String>,
    /// <p>The source of the CVSS data.</p>
    #[doc(hidden)]
    pub cvss_source: std::option::Option<std::string::String>,
    /// <p>The CVSS version used in scoring.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>The CVSS score.</p>
    #[doc(hidden)]
    pub score: std::option::Option<f64>,
    /// <p>The vector for the CVSS score.</p>
    #[doc(hidden)]
    pub scoring_vector: std::option::Option<std::string::String>,
    /// <p>An object that contains details about adjustment Amazon Inspector made to the CVSS score.</p>
    #[doc(hidden)]
    pub adjustments: std::option::Option<std::vec::Vec<crate::types::CvssScoreAdjustment>>,
}
impl CvssScoreDetails {
    /// <p>The source for the CVSS score.</p>
    pub fn score_source(&self) -> std::option::Option<&str> {
        self.score_source.as_deref()
    }
    /// <p>The source of the CVSS data.</p>
    pub fn cvss_source(&self) -> std::option::Option<&str> {
        self.cvss_source.as_deref()
    }
    /// <p>The CVSS version used in scoring.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The CVSS score.</p>
    pub fn score(&self) -> std::option::Option<f64> {
        self.score
    }
    /// <p>The vector for the CVSS score.</p>
    pub fn scoring_vector(&self) -> std::option::Option<&str> {
        self.scoring_vector.as_deref()
    }
    /// <p>An object that contains details about adjustment Amazon Inspector made to the CVSS score.</p>
    pub fn adjustments(&self) -> std::option::Option<&[crate::types::CvssScoreAdjustment]> {
        self.adjustments.as_deref()
    }
}
impl CvssScoreDetails {
    /// Creates a new builder-style object to manufacture [`CvssScoreDetails`](crate::types::CvssScoreDetails).
    pub fn builder() -> crate::types::builders::CvssScoreDetailsBuilder {
        crate::types::builders::CvssScoreDetailsBuilder::default()
    }
}

/// A builder for [`CvssScoreDetails`](crate::types::CvssScoreDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CvssScoreDetailsBuilder {
    pub(crate) score_source: std::option::Option<std::string::String>,
    pub(crate) cvss_source: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) score: std::option::Option<f64>,
    pub(crate) scoring_vector: std::option::Option<std::string::String>,
    pub(crate) adjustments: std::option::Option<std::vec::Vec<crate::types::CvssScoreAdjustment>>,
}
impl CvssScoreDetailsBuilder {
    /// <p>The source for the CVSS score.</p>
    pub fn score_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.score_source = Some(input.into());
        self
    }
    /// <p>The source for the CVSS score.</p>
    pub fn set_score_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.score_source = input;
        self
    }
    /// <p>The source of the CVSS data.</p>
    pub fn cvss_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.cvss_source = Some(input.into());
        self
    }
    /// <p>The source of the CVSS data.</p>
    pub fn set_cvss_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cvss_source = input;
        self
    }
    /// <p>The CVSS version used in scoring.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The CVSS version used in scoring.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The CVSS score.</p>
    pub fn score(mut self, input: f64) -> Self {
        self.score = Some(input);
        self
    }
    /// <p>The CVSS score.</p>
    pub fn set_score(mut self, input: std::option::Option<f64>) -> Self {
        self.score = input;
        self
    }
    /// <p>The vector for the CVSS score.</p>
    pub fn scoring_vector(mut self, input: impl Into<std::string::String>) -> Self {
        self.scoring_vector = Some(input.into());
        self
    }
    /// <p>The vector for the CVSS score.</p>
    pub fn set_scoring_vector(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.scoring_vector = input;
        self
    }
    /// Appends an item to `adjustments`.
    ///
    /// To override the contents of this collection use [`set_adjustments`](Self::set_adjustments).
    ///
    /// <p>An object that contains details about adjustment Amazon Inspector made to the CVSS score.</p>
    pub fn adjustments(mut self, input: crate::types::CvssScoreAdjustment) -> Self {
        let mut v = self.adjustments.unwrap_or_default();
        v.push(input);
        self.adjustments = Some(v);
        self
    }
    /// <p>An object that contains details about adjustment Amazon Inspector made to the CVSS score.</p>
    pub fn set_adjustments(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CvssScoreAdjustment>>,
    ) -> Self {
        self.adjustments = input;
        self
    }
    /// Consumes the builder and constructs a [`CvssScoreDetails`](crate::types::CvssScoreDetails).
    pub fn build(self) -> crate::types::CvssScoreDetails {
        crate::types::CvssScoreDetails {
            score_source: self.score_source,
            cvss_source: self.cvss_source,
            version: self.version,
            score: self.score,
            scoring_vector: self.scoring_vector,
            adjustments: self.adjustments,
        }
    }
}
