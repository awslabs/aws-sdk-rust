// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details on the time range used to filter findings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DateFilter {
    /// <p>A timestamp representing the start of the time period filtered on.</p>
    #[doc(hidden)]
    pub start_inclusive: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A timestamp representing the end of the time period filtered on.</p>
    #[doc(hidden)]
    pub end_inclusive: std::option::Option<aws_smithy_types::DateTime>,
}
impl DateFilter {
    /// <p>A timestamp representing the start of the time period filtered on.</p>
    pub fn start_inclusive(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_inclusive.as_ref()
    }
    /// <p>A timestamp representing the end of the time period filtered on.</p>
    pub fn end_inclusive(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_inclusive.as_ref()
    }
}
impl DateFilter {
    /// Creates a new builder-style object to manufacture [`DateFilter`](crate::types::DateFilter).
    pub fn builder() -> crate::types::builders::DateFilterBuilder {
        crate::types::builders::DateFilterBuilder::default()
    }
}

/// A builder for [`DateFilter`](crate::types::DateFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DateFilterBuilder {
    pub(crate) start_inclusive: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_inclusive: std::option::Option<aws_smithy_types::DateTime>,
}
impl DateFilterBuilder {
    /// <p>A timestamp representing the start of the time period filtered on.</p>
    pub fn start_inclusive(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_inclusive = Some(input);
        self
    }
    /// <p>A timestamp representing the start of the time period filtered on.</p>
    pub fn set_start_inclusive(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_inclusive = input;
        self
    }
    /// <p>A timestamp representing the end of the time period filtered on.</p>
    pub fn end_inclusive(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_inclusive = Some(input);
        self
    }
    /// <p>A timestamp representing the end of the time period filtered on.</p>
    pub fn set_end_inclusive(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.end_inclusive = input;
        self
    }
    /// Consumes the builder and constructs a [`DateFilter`](crate::types::DateFilter).
    pub fn build(self) -> crate::types::DateFilter {
        crate::types::DateFilter {
            start_inclusive: self.start_inclusive,
            end_inclusive: self.end_inclusive,
        }
    }
}
