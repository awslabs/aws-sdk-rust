// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A response that contains details on the results of a finding aggregation by title.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TitleAggregationResponse {
    /// <p>The title that the findings were aggregated on.</p>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
    /// <p>The vulnerability ID of the finding.</p>
    #[doc(hidden)]
    pub vulnerability_id: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account associated with the findings.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>An object that represent the count of matched findings per severity.</p>
    #[doc(hidden)]
    pub severity_counts: std::option::Option<crate::types::SeverityCounts>,
}
impl TitleAggregationResponse {
    /// <p>The title that the findings were aggregated on.</p>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The vulnerability ID of the finding.</p>
    pub fn vulnerability_id(&self) -> std::option::Option<&str> {
        self.vulnerability_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account associated with the findings.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>An object that represent the count of matched findings per severity.</p>
    pub fn severity_counts(&self) -> std::option::Option<&crate::types::SeverityCounts> {
        self.severity_counts.as_ref()
    }
}
impl TitleAggregationResponse {
    /// Creates a new builder-style object to manufacture [`TitleAggregationResponse`](crate::types::TitleAggregationResponse).
    pub fn builder() -> crate::types::builders::TitleAggregationResponseBuilder {
        crate::types::builders::TitleAggregationResponseBuilder::default()
    }
}

/// A builder for [`TitleAggregationResponse`](crate::types::TitleAggregationResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TitleAggregationResponseBuilder {
    pub(crate) title: std::option::Option<std::string::String>,
    pub(crate) vulnerability_id: std::option::Option<std::string::String>,
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) severity_counts: std::option::Option<crate::types::SeverityCounts>,
}
impl TitleAggregationResponseBuilder {
    /// <p>The title that the findings were aggregated on.</p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>The title that the findings were aggregated on.</p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The vulnerability ID of the finding.</p>
    pub fn vulnerability_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vulnerability_id = Some(input.into());
        self
    }
    /// <p>The vulnerability ID of the finding.</p>
    pub fn set_vulnerability_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vulnerability_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account associated with the findings.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account associated with the findings.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>An object that represent the count of matched findings per severity.</p>
    pub fn severity_counts(mut self, input: crate::types::SeverityCounts) -> Self {
        self.severity_counts = Some(input);
        self
    }
    /// <p>An object that represent the count of matched findings per severity.</p>
    pub fn set_severity_counts(
        mut self,
        input: std::option::Option<crate::types::SeverityCounts>,
    ) -> Self {
        self.severity_counts = input;
        self
    }
    /// Consumes the builder and constructs a [`TitleAggregationResponse`](crate::types::TitleAggregationResponse).
    pub fn build(self) -> crate::types::TitleAggregationResponse {
        crate::types::TitleAggregationResponse {
            title: self.title,
            vulnerability_id: self.vulnerability_id,
            account_id: self.account_id,
            severity_counts: self.severity_counts,
        }
    }
}
