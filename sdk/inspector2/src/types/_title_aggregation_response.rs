// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A response that contains details on the results of a finding aggregation by title.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TitleAggregationResponse {
    /// <p>The title that the findings were aggregated on.</p>
    pub title: ::std::string::String,
    /// <p>The vulnerability ID of the finding.</p>
    pub vulnerability_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services account associated with the findings.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>An object that represent the count of matched findings per severity.</p>
    pub severity_counts: ::std::option::Option<crate::types::SeverityCounts>,
}
impl TitleAggregationResponse {
    /// <p>The title that the findings were aggregated on.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The vulnerability ID of the finding.</p>
    pub fn vulnerability_id(&self) -> ::std::option::Option<&str> {
        self.vulnerability_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account associated with the findings.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>An object that represent the count of matched findings per severity.</p>
    pub fn severity_counts(&self) -> ::std::option::Option<&crate::types::SeverityCounts> {
        self.severity_counts.as_ref()
    }
}
impl TitleAggregationResponse {
    /// Creates a new builder-style object to manufacture [`TitleAggregationResponse`](crate::types::TitleAggregationResponse).
    pub fn builder() -> crate::types::builders::TitleAggregationResponseBuilder {
        crate::types::builders::TitleAggregationResponseBuilder::default()
    }
}

/// A builder for [`TitleAggregationResponse`](crate::types::TitleAggregationResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TitleAggregationResponseBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) vulnerability_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) severity_counts: ::std::option::Option<crate::types::SeverityCounts>,
}
impl TitleAggregationResponseBuilder {
    /// <p>The title that the findings were aggregated on.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title that the findings were aggregated on.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title that the findings were aggregated on.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The vulnerability ID of the finding.</p>
    pub fn vulnerability_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vulnerability_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The vulnerability ID of the finding.</p>
    pub fn set_vulnerability_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vulnerability_id = input;
        self
    }
    /// <p>The vulnerability ID of the finding.</p>
    pub fn get_vulnerability_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vulnerability_id
    }
    /// <p>The ID of the Amazon Web Services account associated with the findings.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account associated with the findings.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account associated with the findings.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>An object that represent the count of matched findings per severity.</p>
    pub fn severity_counts(mut self, input: crate::types::SeverityCounts) -> Self {
        self.severity_counts = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that represent the count of matched findings per severity.</p>
    pub fn set_severity_counts(mut self, input: ::std::option::Option<crate::types::SeverityCounts>) -> Self {
        self.severity_counts = input;
        self
    }
    /// <p>An object that represent the count of matched findings per severity.</p>
    pub fn get_severity_counts(&self) -> &::std::option::Option<crate::types::SeverityCounts> {
        &self.severity_counts
    }
    /// Consumes the builder and constructs a [`TitleAggregationResponse`](crate::types::TitleAggregationResponse).
    /// This method will fail if any of the following fields are not set:
    /// - [`title`](crate::types::builders::TitleAggregationResponseBuilder::title)
    pub fn build(self) -> ::std::result::Result<crate::types::TitleAggregationResponse, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TitleAggregationResponse {
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building TitleAggregationResponse",
                )
            })?,
            vulnerability_id: self.vulnerability_id,
            account_id: self.account_id,
            severity_counts: self.severity_counts,
        })
    }
}
