// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details that define a findings aggregation based on AWS Lambda functions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LambdaFunctionAggregation {
    /// <p>The resource IDs to include in the aggregation results.</p>
    #[doc(hidden)]
    pub resource_ids: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The AWS Lambda function names to include in the aggregation results.</p>
    #[doc(hidden)]
    pub function_names: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    /// <p>Returns findings aggregated by AWS Lambda function runtime environments.</p>
    #[doc(hidden)]
    pub runtimes: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The tags to include in the aggregation results.</p>
    #[doc(hidden)]
    pub function_tags: std::option::Option<std::vec::Vec<crate::types::MapFilter>>,
    /// <p>The order to use for sorting the results.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
    /// <p>The finding severity to use for sorting the results.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::LambdaFunctionSortBy>,
}
impl LambdaFunctionAggregation {
    /// <p>The resource IDs to include in the aggregation results.</p>
    pub fn resource_ids(&self) -> std::option::Option<&[crate::types::StringFilter]> {
        self.resource_ids.as_deref()
    }
    /// <p>The AWS Lambda function names to include in the aggregation results.</p>
    pub fn function_names(&self) -> std::option::Option<&[crate::types::StringFilter]> {
        self.function_names.as_deref()
    }
    /// <p>Returns findings aggregated by AWS Lambda function runtime environments.</p>
    pub fn runtimes(&self) -> std::option::Option<&[crate::types::StringFilter]> {
        self.runtimes.as_deref()
    }
    /// <p>The tags to include in the aggregation results.</p>
    pub fn function_tags(&self) -> std::option::Option<&[crate::types::MapFilter]> {
        self.function_tags.as_deref()
    }
    /// <p>The order to use for sorting the results.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The finding severity to use for sorting the results.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::LambdaFunctionSortBy> {
        self.sort_by.as_ref()
    }
}
impl LambdaFunctionAggregation {
    /// Creates a new builder-style object to manufacture [`LambdaFunctionAggregation`](crate::types::LambdaFunctionAggregation).
    pub fn builder() -> crate::types::builders::LambdaFunctionAggregationBuilder {
        crate::types::builders::LambdaFunctionAggregationBuilder::default()
    }
}

/// A builder for [`LambdaFunctionAggregation`](crate::types::LambdaFunctionAggregation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LambdaFunctionAggregationBuilder {
    pub(crate) resource_ids: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) function_names: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) runtimes: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) function_tags: std::option::Option<std::vec::Vec<crate::types::MapFilter>>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
    pub(crate) sort_by: std::option::Option<crate::types::LambdaFunctionSortBy>,
}
impl LambdaFunctionAggregationBuilder {
    /// Appends an item to `resource_ids`.
    ///
    /// To override the contents of this collection use [`set_resource_ids`](Self::set_resource_ids).
    ///
    /// <p>The resource IDs to include in the aggregation results.</p>
    pub fn resource_ids(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_ids.unwrap_or_default();
        v.push(input);
        self.resource_ids = Some(v);
        self
    }
    /// <p>The resource IDs to include in the aggregation results.</p>
    pub fn set_resource_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    ) -> Self {
        self.resource_ids = input;
        self
    }
    /// Appends an item to `function_names`.
    ///
    /// To override the contents of this collection use [`set_function_names`](Self::set_function_names).
    ///
    /// <p>The AWS Lambda function names to include in the aggregation results.</p>
    pub fn function_names(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.function_names.unwrap_or_default();
        v.push(input);
        self.function_names = Some(v);
        self
    }
    /// <p>The AWS Lambda function names to include in the aggregation results.</p>
    pub fn set_function_names(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    ) -> Self {
        self.function_names = input;
        self
    }
    /// Appends an item to `runtimes`.
    ///
    /// To override the contents of this collection use [`set_runtimes`](Self::set_runtimes).
    ///
    /// <p>Returns findings aggregated by AWS Lambda function runtime environments.</p>
    pub fn runtimes(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.runtimes.unwrap_or_default();
        v.push(input);
        self.runtimes = Some(v);
        self
    }
    /// <p>Returns findings aggregated by AWS Lambda function runtime environments.</p>
    pub fn set_runtimes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    ) -> Self {
        self.runtimes = input;
        self
    }
    /// Appends an item to `function_tags`.
    ///
    /// To override the contents of this collection use [`set_function_tags`](Self::set_function_tags).
    ///
    /// <p>The tags to include in the aggregation results.</p>
    pub fn function_tags(mut self, input: crate::types::MapFilter) -> Self {
        let mut v = self.function_tags.unwrap_or_default();
        v.push(input);
        self.function_tags = Some(v);
        self
    }
    /// <p>The tags to include in the aggregation results.</p>
    pub fn set_function_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MapFilter>>,
    ) -> Self {
        self.function_tags = input;
        self
    }
    /// <p>The order to use for sorting the results.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>The order to use for sorting the results.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The finding severity to use for sorting the results.</p>
    pub fn sort_by(mut self, input: crate::types::LambdaFunctionSortBy) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>The finding severity to use for sorting the results.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::LambdaFunctionSortBy>,
    ) -> Self {
        self.sort_by = input;
        self
    }
    /// Consumes the builder and constructs a [`LambdaFunctionAggregation`](crate::types::LambdaFunctionAggregation).
    pub fn build(self) -> crate::types::LambdaFunctionAggregation {
        crate::types::LambdaFunctionAggregation {
            resource_ids: self.resource_ids,
            function_names: self.function_names,
            runtimes: self.runtimes,
            function_tags: self.function_tags,
            sort_order: self.sort_order,
            sort_by: self.sort_by,
        }
    }
}
