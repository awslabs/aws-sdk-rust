// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information on the vulnerable package identified by a finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VulnerablePackage {
    /// <p>The name of the vulnerable package.</p>
    pub name: ::std::string::String,
    /// <p>The version of the vulnerable package.</p>
    pub version: ::std::string::String,
    /// <p>The source layer hash of the vulnerable package.</p>
    pub source_layer_hash: ::std::option::Option<::std::string::String>,
    /// <p>The epoch of the vulnerable package.</p>
    pub epoch: i32,
    /// <p>The release of the vulnerable package.</p>
    pub release: ::std::option::Option<::std::string::String>,
    /// <p>The architecture of the vulnerable package.</p>
    pub arch: ::std::option::Option<::std::string::String>,
    /// <p>The package manager of the vulnerable package.</p>
    pub package_manager: ::std::option::Option<crate::types::PackageManager>,
    /// <p>The file path of the vulnerable package.</p>
    pub file_path: ::std::option::Option<::std::string::String>,
    /// <p>The version of the package that contains the vulnerability fix.</p>
    pub fixed_in_version: ::std::option::Option<::std::string::String>,
    /// <p>The code to run in your environment to update packages with a fix available.</p>
    pub remediation: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Number (ARN) of the AWS Lambda function affected by a finding.</p>
    pub source_lambda_layer_arn: ::std::option::Option<::std::string::String>,
}
impl VulnerablePackage {
    /// <p>The name of the vulnerable package.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The version of the vulnerable package.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
    /// <p>The source layer hash of the vulnerable package.</p>
    pub fn source_layer_hash(&self) -> ::std::option::Option<&str> {
        self.source_layer_hash.as_deref()
    }
    /// <p>The epoch of the vulnerable package.</p>
    pub fn epoch(&self) -> i32 {
        self.epoch
    }
    /// <p>The release of the vulnerable package.</p>
    pub fn release(&self) -> ::std::option::Option<&str> {
        self.release.as_deref()
    }
    /// <p>The architecture of the vulnerable package.</p>
    pub fn arch(&self) -> ::std::option::Option<&str> {
        self.arch.as_deref()
    }
    /// <p>The package manager of the vulnerable package.</p>
    pub fn package_manager(&self) -> ::std::option::Option<&crate::types::PackageManager> {
        self.package_manager.as_ref()
    }
    /// <p>The file path of the vulnerable package.</p>
    pub fn file_path(&self) -> ::std::option::Option<&str> {
        self.file_path.as_deref()
    }
    /// <p>The version of the package that contains the vulnerability fix.</p>
    pub fn fixed_in_version(&self) -> ::std::option::Option<&str> {
        self.fixed_in_version.as_deref()
    }
    /// <p>The code to run in your environment to update packages with a fix available.</p>
    pub fn remediation(&self) -> ::std::option::Option<&str> {
        self.remediation.as_deref()
    }
    /// <p>The Amazon Resource Number (ARN) of the AWS Lambda function affected by a finding.</p>
    pub fn source_lambda_layer_arn(&self) -> ::std::option::Option<&str> {
        self.source_lambda_layer_arn.as_deref()
    }
}
impl VulnerablePackage {
    /// Creates a new builder-style object to manufacture [`VulnerablePackage`](crate::types::VulnerablePackage).
    pub fn builder() -> crate::types::builders::VulnerablePackageBuilder {
        crate::types::builders::VulnerablePackageBuilder::default()
    }
}

/// A builder for [`VulnerablePackage`](crate::types::VulnerablePackage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VulnerablePackageBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) source_layer_hash: ::std::option::Option<::std::string::String>,
    pub(crate) epoch: ::std::option::Option<i32>,
    pub(crate) release: ::std::option::Option<::std::string::String>,
    pub(crate) arch: ::std::option::Option<::std::string::String>,
    pub(crate) package_manager: ::std::option::Option<crate::types::PackageManager>,
    pub(crate) file_path: ::std::option::Option<::std::string::String>,
    pub(crate) fixed_in_version: ::std::option::Option<::std::string::String>,
    pub(crate) remediation: ::std::option::Option<::std::string::String>,
    pub(crate) source_lambda_layer_arn: ::std::option::Option<::std::string::String>,
}
impl VulnerablePackageBuilder {
    /// <p>The name of the vulnerable package.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the vulnerable package.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the vulnerable package.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The version of the vulnerable package.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the vulnerable package.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the vulnerable package.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The source layer hash of the vulnerable package.</p>
    pub fn source_layer_hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_layer_hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source layer hash of the vulnerable package.</p>
    pub fn set_source_layer_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_layer_hash = input;
        self
    }
    /// <p>The source layer hash of the vulnerable package.</p>
    pub fn get_source_layer_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_layer_hash
    }
    /// <p>The epoch of the vulnerable package.</p>
    pub fn epoch(mut self, input: i32) -> Self {
        self.epoch = ::std::option::Option::Some(input);
        self
    }
    /// <p>The epoch of the vulnerable package.</p>
    pub fn set_epoch(mut self, input: ::std::option::Option<i32>) -> Self {
        self.epoch = input;
        self
    }
    /// <p>The epoch of the vulnerable package.</p>
    pub fn get_epoch(&self) -> &::std::option::Option<i32> {
        &self.epoch
    }
    /// <p>The release of the vulnerable package.</p>
    pub fn release(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.release = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The release of the vulnerable package.</p>
    pub fn set_release(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.release = input;
        self
    }
    /// <p>The release of the vulnerable package.</p>
    pub fn get_release(&self) -> &::std::option::Option<::std::string::String> {
        &self.release
    }
    /// <p>The architecture of the vulnerable package.</p>
    pub fn arch(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arch = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The architecture of the vulnerable package.</p>
    pub fn set_arch(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arch = input;
        self
    }
    /// <p>The architecture of the vulnerable package.</p>
    pub fn get_arch(&self) -> &::std::option::Option<::std::string::String> {
        &self.arch
    }
    /// <p>The package manager of the vulnerable package.</p>
    pub fn package_manager(mut self, input: crate::types::PackageManager) -> Self {
        self.package_manager = ::std::option::Option::Some(input);
        self
    }
    /// <p>The package manager of the vulnerable package.</p>
    pub fn set_package_manager(mut self, input: ::std::option::Option<crate::types::PackageManager>) -> Self {
        self.package_manager = input;
        self
    }
    /// <p>The package manager of the vulnerable package.</p>
    pub fn get_package_manager(&self) -> &::std::option::Option<crate::types::PackageManager> {
        &self.package_manager
    }
    /// <p>The file path of the vulnerable package.</p>
    pub fn file_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file path of the vulnerable package.</p>
    pub fn set_file_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_path = input;
        self
    }
    /// <p>The file path of the vulnerable package.</p>
    pub fn get_file_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_path
    }
    /// <p>The version of the package that contains the vulnerability fix.</p>
    pub fn fixed_in_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fixed_in_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the package that contains the vulnerability fix.</p>
    pub fn set_fixed_in_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fixed_in_version = input;
        self
    }
    /// <p>The version of the package that contains the vulnerability fix.</p>
    pub fn get_fixed_in_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.fixed_in_version
    }
    /// <p>The code to run in your environment to update packages with a fix available.</p>
    pub fn remediation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remediation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code to run in your environment to update packages with a fix available.</p>
    pub fn set_remediation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remediation = input;
        self
    }
    /// <p>The code to run in your environment to update packages with a fix available.</p>
    pub fn get_remediation(&self) -> &::std::option::Option<::std::string::String> {
        &self.remediation
    }
    /// <p>The Amazon Resource Number (ARN) of the AWS Lambda function affected by a finding.</p>
    pub fn source_lambda_layer_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_lambda_layer_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the AWS Lambda function affected by a finding.</p>
    pub fn set_source_lambda_layer_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_lambda_layer_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the AWS Lambda function affected by a finding.</p>
    pub fn get_source_lambda_layer_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_lambda_layer_arn
    }
    /// Consumes the builder and constructs a [`VulnerablePackage`](crate::types::VulnerablePackage).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::VulnerablePackageBuilder::name)
    /// - [`version`](crate::types::builders::VulnerablePackageBuilder::version)
    pub fn build(self) -> ::std::result::Result<crate::types::VulnerablePackage, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VulnerablePackage {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building VulnerablePackage",
                )
            })?,
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building VulnerablePackage",
                )
            })?,
            source_layer_hash: self.source_layer_hash,
            epoch: self.epoch.unwrap_or_default(),
            release: self.release,
            arch: self.arch,
            package_manager: self.package_manager,
            file_path: self.file_path,
            fixed_in_version: self.fixed_in_version,
            remediation: self.remediation,
            source_lambda_layer_arn: self.source_lambda_layer_arn,
        })
    }
}
