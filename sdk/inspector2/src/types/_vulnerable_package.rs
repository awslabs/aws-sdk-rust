// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information on the vulnerable package identified by a finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VulnerablePackage {
    /// <p>The name of the vulnerable package.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The version of the vulnerable package.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>The source layer hash of the vulnerable package.</p>
    #[doc(hidden)]
    pub source_layer_hash: std::option::Option<std::string::String>,
    /// <p>The epoch of the vulnerable package.</p>
    #[doc(hidden)]
    pub epoch: i32,
    /// <p>The release of the vulnerable package.</p>
    #[doc(hidden)]
    pub release: std::option::Option<std::string::String>,
    /// <p>The architecture of the vulnerable package.</p>
    #[doc(hidden)]
    pub arch: std::option::Option<std::string::String>,
    /// <p>The package manager of the vulnerable package.</p>
    #[doc(hidden)]
    pub package_manager: std::option::Option<crate::types::PackageManager>,
    /// <p>The file path of the vulnerable package.</p>
    #[doc(hidden)]
    pub file_path: std::option::Option<std::string::String>,
    /// <p>The version of the package that contains the vulnerability fix.</p>
    #[doc(hidden)]
    pub fixed_in_version: std::option::Option<std::string::String>,
    /// <p>The code to run in your environment to update packages with a fix available.</p>
    #[doc(hidden)]
    pub remediation: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Number (ARN) of the AWS Lambda function affected by a finding.</p>
    #[doc(hidden)]
    pub source_lambda_layer_arn: std::option::Option<std::string::String>,
}
impl VulnerablePackage {
    /// <p>The name of the vulnerable package.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version of the vulnerable package.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The source layer hash of the vulnerable package.</p>
    pub fn source_layer_hash(&self) -> std::option::Option<&str> {
        self.source_layer_hash.as_deref()
    }
    /// <p>The epoch of the vulnerable package.</p>
    pub fn epoch(&self) -> i32 {
        self.epoch
    }
    /// <p>The release of the vulnerable package.</p>
    pub fn release(&self) -> std::option::Option<&str> {
        self.release.as_deref()
    }
    /// <p>The architecture of the vulnerable package.</p>
    pub fn arch(&self) -> std::option::Option<&str> {
        self.arch.as_deref()
    }
    /// <p>The package manager of the vulnerable package.</p>
    pub fn package_manager(&self) -> std::option::Option<&crate::types::PackageManager> {
        self.package_manager.as_ref()
    }
    /// <p>The file path of the vulnerable package.</p>
    pub fn file_path(&self) -> std::option::Option<&str> {
        self.file_path.as_deref()
    }
    /// <p>The version of the package that contains the vulnerability fix.</p>
    pub fn fixed_in_version(&self) -> std::option::Option<&str> {
        self.fixed_in_version.as_deref()
    }
    /// <p>The code to run in your environment to update packages with a fix available.</p>
    pub fn remediation(&self) -> std::option::Option<&str> {
        self.remediation.as_deref()
    }
    /// <p>The Amazon Resource Number (ARN) of the AWS Lambda function affected by a finding.</p>
    pub fn source_lambda_layer_arn(&self) -> std::option::Option<&str> {
        self.source_lambda_layer_arn.as_deref()
    }
}
impl VulnerablePackage {
    /// Creates a new builder-style object to manufacture [`VulnerablePackage`](crate::types::VulnerablePackage).
    pub fn builder() -> crate::types::builders::VulnerablePackageBuilder {
        crate::types::builders::VulnerablePackageBuilder::default()
    }
}

/// A builder for [`VulnerablePackage`](crate::types::VulnerablePackage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VulnerablePackageBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) source_layer_hash: std::option::Option<std::string::String>,
    pub(crate) epoch: std::option::Option<i32>,
    pub(crate) release: std::option::Option<std::string::String>,
    pub(crate) arch: std::option::Option<std::string::String>,
    pub(crate) package_manager: std::option::Option<crate::types::PackageManager>,
    pub(crate) file_path: std::option::Option<std::string::String>,
    pub(crate) fixed_in_version: std::option::Option<std::string::String>,
    pub(crate) remediation: std::option::Option<std::string::String>,
    pub(crate) source_lambda_layer_arn: std::option::Option<std::string::String>,
}
impl VulnerablePackageBuilder {
    /// <p>The name of the vulnerable package.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the vulnerable package.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The version of the vulnerable package.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version of the vulnerable package.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The source layer hash of the vulnerable package.</p>
    pub fn source_layer_hash(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_layer_hash = Some(input.into());
        self
    }
    /// <p>The source layer hash of the vulnerable package.</p>
    pub fn set_source_layer_hash(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_layer_hash = input;
        self
    }
    /// <p>The epoch of the vulnerable package.</p>
    pub fn epoch(mut self, input: i32) -> Self {
        self.epoch = Some(input);
        self
    }
    /// <p>The epoch of the vulnerable package.</p>
    pub fn set_epoch(mut self, input: std::option::Option<i32>) -> Self {
        self.epoch = input;
        self
    }
    /// <p>The release of the vulnerable package.</p>
    pub fn release(mut self, input: impl Into<std::string::String>) -> Self {
        self.release = Some(input.into());
        self
    }
    /// <p>The release of the vulnerable package.</p>
    pub fn set_release(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.release = input;
        self
    }
    /// <p>The architecture of the vulnerable package.</p>
    pub fn arch(mut self, input: impl Into<std::string::String>) -> Self {
        self.arch = Some(input.into());
        self
    }
    /// <p>The architecture of the vulnerable package.</p>
    pub fn set_arch(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arch = input;
        self
    }
    /// <p>The package manager of the vulnerable package.</p>
    pub fn package_manager(mut self, input: crate::types::PackageManager) -> Self {
        self.package_manager = Some(input);
        self
    }
    /// <p>The package manager of the vulnerable package.</p>
    pub fn set_package_manager(
        mut self,
        input: std::option::Option<crate::types::PackageManager>,
    ) -> Self {
        self.package_manager = input;
        self
    }
    /// <p>The file path of the vulnerable package.</p>
    pub fn file_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_path = Some(input.into());
        self
    }
    /// <p>The file path of the vulnerable package.</p>
    pub fn set_file_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_path = input;
        self
    }
    /// <p>The version of the package that contains the vulnerability fix.</p>
    pub fn fixed_in_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.fixed_in_version = Some(input.into());
        self
    }
    /// <p>The version of the package that contains the vulnerability fix.</p>
    pub fn set_fixed_in_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fixed_in_version = input;
        self
    }
    /// <p>The code to run in your environment to update packages with a fix available.</p>
    pub fn remediation(mut self, input: impl Into<std::string::String>) -> Self {
        self.remediation = Some(input.into());
        self
    }
    /// <p>The code to run in your environment to update packages with a fix available.</p>
    pub fn set_remediation(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.remediation = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the AWS Lambda function affected by a finding.</p>
    pub fn source_lambda_layer_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_lambda_layer_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the AWS Lambda function affected by a finding.</p>
    pub fn set_source_lambda_layer_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_lambda_layer_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`VulnerablePackage`](crate::types::VulnerablePackage).
    pub fn build(self) -> crate::types::VulnerablePackage {
        crate::types::VulnerablePackage {
            name: self.name,
            version: self.version,
            source_layer_hash: self.source_layer_hash,
            epoch: self.epoch.unwrap_or_default(),
            release: self.release,
            arch: self.arch,
            package_manager: self.package_manager,
            file_path: self.file_path,
            fixed_in_version: self.fixed_in_version,
            remediation: self.remediation,
            source_lambda_layer_arn: self.source_lambda_layer_arn,
        }
    }
}
