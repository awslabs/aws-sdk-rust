// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that describes details of a map filter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MapFilter {
    /// <p>The operator to use when comparing values in the filter.</p>
    #[doc(hidden)]
    pub comparison: std::option::Option<crate::types::MapComparison>,
    /// <p>The tag key used in the filter.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The tag value used in the filter.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl MapFilter {
    /// <p>The operator to use when comparing values in the filter.</p>
    pub fn comparison(&self) -> std::option::Option<&crate::types::MapComparison> {
        self.comparison.as_ref()
    }
    /// <p>The tag key used in the filter.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The tag value used in the filter.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl MapFilter {
    /// Creates a new builder-style object to manufacture [`MapFilter`](crate::types::MapFilter).
    pub fn builder() -> crate::types::builders::MapFilterBuilder {
        crate::types::builders::MapFilterBuilder::default()
    }
}

/// A builder for [`MapFilter`](crate::types::MapFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MapFilterBuilder {
    pub(crate) comparison: std::option::Option<crate::types::MapComparison>,
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl MapFilterBuilder {
    /// <p>The operator to use when comparing values in the filter.</p>
    pub fn comparison(mut self, input: crate::types::MapComparison) -> Self {
        self.comparison = Some(input);
        self
    }
    /// <p>The operator to use when comparing values in the filter.</p>
    pub fn set_comparison(
        mut self,
        input: std::option::Option<crate::types::MapComparison>,
    ) -> Self {
        self.comparison = input;
        self
    }
    /// <p>The tag key used in the filter.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The tag key used in the filter.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The tag value used in the filter.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The tag value used in the filter.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`MapFilter`](crate::types::MapFilter).
    pub fn build(self) -> crate::types::MapFilter {
        crate::types::MapFilter {
            comparison: self.comparison,
            key: self.key,
            value: self.value,
        }
    }
}
