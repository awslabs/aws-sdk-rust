// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details the state of Amazon Inspector for each resource type Amazon Inspector scans.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceState {
    /// <p>An object detailing the state of Amazon Inspector scanning for Amazon EC2 resources.</p>
    #[doc(hidden)]
    pub ec2: std::option::Option<crate::types::State>,
    /// <p>An object detailing the state of Amazon Inspector scanning for Amazon ECR resources.</p>
    #[doc(hidden)]
    pub ecr: std::option::Option<crate::types::State>,
    /// <p>An object that described the state of Amazon Inspector scans for an account.</p>
    #[doc(hidden)]
    pub lambda: std::option::Option<crate::types::State>,
}
impl ResourceState {
    /// <p>An object detailing the state of Amazon Inspector scanning for Amazon EC2 resources.</p>
    pub fn ec2(&self) -> std::option::Option<&crate::types::State> {
        self.ec2.as_ref()
    }
    /// <p>An object detailing the state of Amazon Inspector scanning for Amazon ECR resources.</p>
    pub fn ecr(&self) -> std::option::Option<&crate::types::State> {
        self.ecr.as_ref()
    }
    /// <p>An object that described the state of Amazon Inspector scans for an account.</p>
    pub fn lambda(&self) -> std::option::Option<&crate::types::State> {
        self.lambda.as_ref()
    }
}
impl ResourceState {
    /// Creates a new builder-style object to manufacture [`ResourceState`](crate::types::ResourceState).
    pub fn builder() -> crate::types::builders::ResourceStateBuilder {
        crate::types::builders::ResourceStateBuilder::default()
    }
}

/// A builder for [`ResourceState`](crate::types::ResourceState).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceStateBuilder {
    pub(crate) ec2: std::option::Option<crate::types::State>,
    pub(crate) ecr: std::option::Option<crate::types::State>,
    pub(crate) lambda: std::option::Option<crate::types::State>,
}
impl ResourceStateBuilder {
    /// <p>An object detailing the state of Amazon Inspector scanning for Amazon EC2 resources.</p>
    pub fn ec2(mut self, input: crate::types::State) -> Self {
        self.ec2 = Some(input);
        self
    }
    /// <p>An object detailing the state of Amazon Inspector scanning for Amazon EC2 resources.</p>
    pub fn set_ec2(mut self, input: std::option::Option<crate::types::State>) -> Self {
        self.ec2 = input;
        self
    }
    /// <p>An object detailing the state of Amazon Inspector scanning for Amazon ECR resources.</p>
    pub fn ecr(mut self, input: crate::types::State) -> Self {
        self.ecr = Some(input);
        self
    }
    /// <p>An object detailing the state of Amazon Inspector scanning for Amazon ECR resources.</p>
    pub fn set_ecr(mut self, input: std::option::Option<crate::types::State>) -> Self {
        self.ecr = input;
        self
    }
    /// <p>An object that described the state of Amazon Inspector scans for an account.</p>
    pub fn lambda(mut self, input: crate::types::State) -> Self {
        self.lambda = Some(input);
        self
    }
    /// <p>An object that described the state of Amazon Inspector scans for an account.</p>
    pub fn set_lambda(mut self, input: std::option::Option<crate::types::State>) -> Self {
        self.lambda = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceState`](crate::types::ResourceState).
    pub fn build(self) -> crate::types::ResourceState {
        crate::types::ResourceState {
            ec2: self.ec2,
            ecr: self.ecr,
            lambda: self.lambda,
        }
    }
}
