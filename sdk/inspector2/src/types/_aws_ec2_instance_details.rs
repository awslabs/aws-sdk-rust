// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the Amazon EC2 instance involved in a finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsEc2InstanceDetails {
    /// <p>The type of the Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The image ID of the Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    /// <p>The IPv4 addresses of the Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub ip_v4_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IPv6 addresses of the Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub ip_v6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The name of the key pair used to launch the Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub key_name: std::option::Option<std::string::String>,
    /// <p>The IAM instance profile ARN of the Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub iam_instance_profile_arn: std::option::Option<std::string::String>,
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
    /// <p>The date and time the Amazon EC2 instance was launched at.</p>
    #[doc(hidden)]
    pub launched_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The platform of the Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<std::string::String>,
}
impl AwsEc2InstanceDetails {
    /// <p>The type of the Amazon EC2 instance.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The image ID of the Amazon EC2 instance.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The IPv4 addresses of the Amazon EC2 instance.</p>
    pub fn ip_v4_addresses(&self) -> std::option::Option<&[std::string::String]> {
        self.ip_v4_addresses.as_deref()
    }
    /// <p>The IPv6 addresses of the Amazon EC2 instance.</p>
    pub fn ip_v6_addresses(&self) -> std::option::Option<&[std::string::String]> {
        self.ip_v6_addresses.as_deref()
    }
    /// <p>The name of the key pair used to launch the Amazon EC2 instance.</p>
    pub fn key_name(&self) -> std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>The IAM instance profile ARN of the Amazon EC2 instance.</p>
    pub fn iam_instance_profile_arn(&self) -> std::option::Option<&str> {
        self.iam_instance_profile_arn.as_deref()
    }
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The date and time the Amazon EC2 instance was launched at.</p>
    pub fn launched_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.launched_at.as_ref()
    }
    /// <p>The platform of the Amazon EC2 instance.</p>
    pub fn platform(&self) -> std::option::Option<&str> {
        self.platform.as_deref()
    }
}
impl AwsEc2InstanceDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2InstanceDetails`](crate::types::AwsEc2InstanceDetails).
    pub fn builder() -> crate::types::builders::AwsEc2InstanceDetailsBuilder {
        crate::types::builders::AwsEc2InstanceDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2InstanceDetails`](crate::types::AwsEc2InstanceDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsEc2InstanceDetailsBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) image_id: std::option::Option<std::string::String>,
    pub(crate) ip_v4_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) ip_v6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) key_name: std::option::Option<std::string::String>,
    pub(crate) iam_instance_profile_arn: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) subnet_id: std::option::Option<std::string::String>,
    pub(crate) launched_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) platform: std::option::Option<std::string::String>,
}
impl AwsEc2InstanceDetailsBuilder {
    /// <p>The type of the Amazon EC2 instance.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of the Amazon EC2 instance.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The image ID of the Amazon EC2 instance.</p>
    pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_id = Some(input.into());
        self
    }
    /// <p>The image ID of the Amazon EC2 instance.</p>
    pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// Appends an item to `ip_v4_addresses`.
    ///
    /// To override the contents of this collection use [`set_ip_v4_addresses`](Self::set_ip_v4_addresses).
    ///
    /// <p>The IPv4 addresses of the Amazon EC2 instance.</p>
    pub fn ip_v4_addresses(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ip_v4_addresses.unwrap_or_default();
        v.push(input.into());
        self.ip_v4_addresses = Some(v);
        self
    }
    /// <p>The IPv4 addresses of the Amazon EC2 instance.</p>
    pub fn set_ip_v4_addresses(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ip_v4_addresses = input;
        self
    }
    /// Appends an item to `ip_v6_addresses`.
    ///
    /// To override the contents of this collection use [`set_ip_v6_addresses`](Self::set_ip_v6_addresses).
    ///
    /// <p>The IPv6 addresses of the Amazon EC2 instance.</p>
    pub fn ip_v6_addresses(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ip_v6_addresses.unwrap_or_default();
        v.push(input.into());
        self.ip_v6_addresses = Some(v);
        self
    }
    /// <p>The IPv6 addresses of the Amazon EC2 instance.</p>
    pub fn set_ip_v6_addresses(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ip_v6_addresses = input;
        self
    }
    /// <p>The name of the key pair used to launch the Amazon EC2 instance.</p>
    pub fn key_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_name = Some(input.into());
        self
    }
    /// <p>The name of the key pair used to launch the Amazon EC2 instance.</p>
    pub fn set_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>The IAM instance profile ARN of the Amazon EC2 instance.</p>
    pub fn iam_instance_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.iam_instance_profile_arn = Some(input.into());
        self
    }
    /// <p>The IAM instance profile ARN of the Amazon EC2 instance.</p>
    pub fn set_iam_instance_profile_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.iam_instance_profile_arn = input;
        self
    }
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_id = Some(input.into());
        self
    }
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The date and time the Amazon EC2 instance was launched at.</p>
    pub fn launched_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.launched_at = Some(input);
        self
    }
    /// <p>The date and time the Amazon EC2 instance was launched at.</p>
    pub fn set_launched_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.launched_at = input;
        self
    }
    /// <p>The platform of the Amazon EC2 instance.</p>
    pub fn platform(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform = Some(input.into());
        self
    }
    /// <p>The platform of the Amazon EC2 instance.</p>
    pub fn set_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsEc2InstanceDetails`](crate::types::AwsEc2InstanceDetails).
    pub fn build(self) -> crate::types::AwsEc2InstanceDetails {
        crate::types::AwsEc2InstanceDetails {
            r#type: self.r#type,
            image_id: self.image_id,
            ip_v4_addresses: self.ip_v4_addresses,
            ip_v6_addresses: self.ip_v6_addresses,
            key_name: self.key_name,
            iam_instance_profile_arn: self.iam_instance_profile_arn,
            vpc_id: self.vpc_id,
            subnet_id: self.subnet_id,
            launched_at: self.launched_at,
            platform: self.platform,
        }
    }
}
