// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the Amazon EC2 instance involved in a finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEc2InstanceDetails {
    /// <p>The type of the Amazon EC2 instance.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The image ID of the Amazon EC2 instance.</p>
    pub image_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 addresses of the Amazon EC2 instance.</p>
    pub ipv4_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The IPv6 addresses of the Amazon EC2 instance.</p>
    pub ipv6_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The name of the key pair used to launch the Amazon EC2 instance.</p>
    pub key_name: ::std::option::Option<::std::string::String>,
    /// <p>The IAM instance profile ARN of the Amazon EC2 instance.</p>
    pub iam_instance_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the Amazon EC2 instance was launched at.</p>
    pub launched_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The platform of the Amazon EC2 instance.</p>
    pub platform: ::std::option::Option<::std::string::String>,
}
impl AwsEc2InstanceDetails {
    /// <p>The type of the Amazon EC2 instance.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The image ID of the Amazon EC2 instance.</p>
    pub fn image_id(&self) -> ::std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The IPv4 addresses of the Amazon EC2 instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv4_addresses.is_none()`.
    pub fn ipv4_addresses(&self) -> &[::std::string::String] {
        self.ipv4_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The IPv6 addresses of the Amazon EC2 instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv6_addresses.is_none()`.
    pub fn ipv6_addresses(&self) -> &[::std::string::String] {
        self.ipv6_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The name of the key pair used to launch the Amazon EC2 instance.</p>
    pub fn key_name(&self) -> ::std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>The IAM instance profile ARN of the Amazon EC2 instance.</p>
    pub fn iam_instance_profile_arn(&self) -> ::std::option::Option<&str> {
        self.iam_instance_profile_arn.as_deref()
    }
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The date and time the Amazon EC2 instance was launched at.</p>
    pub fn launched_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.launched_at.as_ref()
    }
    /// <p>The platform of the Amazon EC2 instance.</p>
    pub fn platform(&self) -> ::std::option::Option<&str> {
        self.platform.as_deref()
    }
}
impl AwsEc2InstanceDetails {
    /// Creates a new builder-style object to manufacture [`AwsEc2InstanceDetails`](crate::types::AwsEc2InstanceDetails).
    pub fn builder() -> crate::types::builders::AwsEc2InstanceDetailsBuilder {
        crate::types::builders::AwsEc2InstanceDetailsBuilder::default()
    }
}

/// A builder for [`AwsEc2InstanceDetails`](crate::types::AwsEc2InstanceDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEc2InstanceDetailsBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) image_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipv4_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) ipv6_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) iam_instance_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) launched_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) platform: ::std::option::Option<::std::string::String>,
}
impl AwsEc2InstanceDetailsBuilder {
    /// <p>The type of the Amazon EC2 instance.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the Amazon EC2 instance.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the Amazon EC2 instance.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The image ID of the Amazon EC2 instance.</p>
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The image ID of the Amazon EC2 instance.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The image ID of the Amazon EC2 instance.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_id
    }
    /// Appends an item to `ipv4_addresses`.
    ///
    /// To override the contents of this collection use [`set_ipv4_addresses`](Self::set_ipv4_addresses).
    ///
    /// <p>The IPv4 addresses of the Amazon EC2 instance.</p>
    pub fn ipv4_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ipv4_addresses.unwrap_or_default();
        v.push(input.into());
        self.ipv4_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IPv4 addresses of the Amazon EC2 instance.</p>
    pub fn set_ipv4_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ipv4_addresses = input;
        self
    }
    /// <p>The IPv4 addresses of the Amazon EC2 instance.</p>
    pub fn get_ipv4_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ipv4_addresses
    }
    /// Appends an item to `ipv6_addresses`.
    ///
    /// To override the contents of this collection use [`set_ipv6_addresses`](Self::set_ipv6_addresses).
    ///
    /// <p>The IPv6 addresses of the Amazon EC2 instance.</p>
    pub fn ipv6_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ipv6_addresses.unwrap_or_default();
        v.push(input.into());
        self.ipv6_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IPv6 addresses of the Amazon EC2 instance.</p>
    pub fn set_ipv6_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ipv6_addresses = input;
        self
    }
    /// <p>The IPv6 addresses of the Amazon EC2 instance.</p>
    pub fn get_ipv6_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ipv6_addresses
    }
    /// <p>The name of the key pair used to launch the Amazon EC2 instance.</p>
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the key pair used to launch the Amazon EC2 instance.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>The name of the key pair used to launch the Amazon EC2 instance.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>The IAM instance profile ARN of the Amazon EC2 instance.</p>
    pub fn iam_instance_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_instance_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM instance profile ARN of the Amazon EC2 instance.</p>
    pub fn set_iam_instance_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_instance_profile_arn = input;
        self
    }
    /// <p>The IAM instance profile ARN of the Amazon EC2 instance.</p>
    pub fn get_iam_instance_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_instance_profile_arn
    }
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The VPC ID of the Amazon EC2 instance.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The subnet ID of the Amazon EC2 instance.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>The date and time the Amazon EC2 instance was launched at.</p>
    pub fn launched_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.launched_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the Amazon EC2 instance was launched at.</p>
    pub fn set_launched_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.launched_at = input;
        self
    }
    /// <p>The date and time the Amazon EC2 instance was launched at.</p>
    pub fn get_launched_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.launched_at
    }
    /// <p>The platform of the Amazon EC2 instance.</p>
    pub fn platform(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The platform of the Amazon EC2 instance.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The platform of the Amazon EC2 instance.</p>
    pub fn get_platform(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform
    }
    /// Consumes the builder and constructs a [`AwsEc2InstanceDetails`](crate::types::AwsEc2InstanceDetails).
    pub fn build(self) -> crate::types::AwsEc2InstanceDetails {
        crate::types::AwsEc2InstanceDetails {
            r#type: self.r#type,
            image_id: self.image_id,
            ipv4_addresses: self.ipv4_addresses,
            ipv6_addresses: self.ipv6_addresses,
            key_name: self.key_name,
            iam_instance_profile_arn: self.iam_instance_profile_arn,
            vpc_id: self.vpc_id,
            subnet_id: self.subnet_id,
            launched_at: self.launched_at,
            platform: self.platform,
        }
    }
}
