// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ErrorCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let errorcode = unimplemented!();
/// match errorcode {
///     ErrorCode::AccessDenied => { /* ... */ },
///     ErrorCode::AccountIsIsolated => { /* ... */ },
///     ErrorCode::AlreadyEnabled => { /* ... */ },
///     ErrorCode::DisableInProgress => { /* ... */ },
///     ErrorCode::DisassociateAllMembers => { /* ... */ },
///     ErrorCode::Ec2SsmAssociationVersionLimitExceeded => { /* ... */ },
///     ErrorCode::Ec2SsmResourceDataSyncLimitExceeded => { /* ... */ },
///     ErrorCode::EnableInProgress => { /* ... */ },
///     ErrorCode::EventbridgeThrottled => { /* ... */ },
///     ErrorCode::EventbridgeUnavailable => { /* ... */ },
///     ErrorCode::InternalError => { /* ... */ },
///     ErrorCode::ResourceNotFound => { /* ... */ },
///     ErrorCode::ResourceScanNotDisabled => { /* ... */ },
///     ErrorCode::SsmThrottled => { /* ... */ },
///     ErrorCode::SsmUnavailable => { /* ... */ },
///     ErrorCode::SuspendInProgress => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `errorcode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ErrorCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ErrorCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ErrorCode::NewFeature` is defined.
/// Specifically, when `errorcode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ErrorCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ErrorCode {
    #[allow(missing_docs)] // documentation missing in model
    AccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    AccountIsIsolated,
    #[allow(missing_docs)] // documentation missing in model
    AlreadyEnabled,
    #[allow(missing_docs)] // documentation missing in model
    DisableInProgress,
    #[allow(missing_docs)] // documentation missing in model
    DisassociateAllMembers,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SsmAssociationVersionLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    Ec2SsmResourceDataSyncLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    EnableInProgress,
    #[allow(missing_docs)] // documentation missing in model
    EventbridgeThrottled,
    #[allow(missing_docs)] // documentation missing in model
    EventbridgeUnavailable,
    #[allow(missing_docs)] // documentation missing in model
    InternalError,
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFound,
    #[allow(missing_docs)] // documentation missing in model
    ResourceScanNotDisabled,
    #[allow(missing_docs)] // documentation missing in model
    SsmThrottled,
    #[allow(missing_docs)] // documentation missing in model
    SsmUnavailable,
    #[allow(missing_docs)] // documentation missing in model
    SuspendInProgress,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ErrorCode {
    fn from(s: &str) -> Self {
        match s {
            "ACCESS_DENIED" => ErrorCode::AccessDenied,
            "ACCOUNT_IS_ISOLATED" => ErrorCode::AccountIsIsolated,
            "ALREADY_ENABLED" => ErrorCode::AlreadyEnabled,
            "DISABLE_IN_PROGRESS" => ErrorCode::DisableInProgress,
            "DISASSOCIATE_ALL_MEMBERS" => ErrorCode::DisassociateAllMembers,
            "EC2_SSM_ASSOCIATION_VERSION_LIMIT_EXCEEDED" => ErrorCode::Ec2SsmAssociationVersionLimitExceeded,
            "EC2_SSM_RESOURCE_DATA_SYNC_LIMIT_EXCEEDED" => ErrorCode::Ec2SsmResourceDataSyncLimitExceeded,
            "ENABLE_IN_PROGRESS" => ErrorCode::EnableInProgress,
            "EVENTBRIDGE_THROTTLED" => ErrorCode::EventbridgeThrottled,
            "EVENTBRIDGE_UNAVAILABLE" => ErrorCode::EventbridgeUnavailable,
            "INTERNAL_ERROR" => ErrorCode::InternalError,
            "RESOURCE_NOT_FOUND" => ErrorCode::ResourceNotFound,
            "RESOURCE_SCAN_NOT_DISABLED" => ErrorCode::ResourceScanNotDisabled,
            "SSM_THROTTLED" => ErrorCode::SsmThrottled,
            "SSM_UNAVAILABLE" => ErrorCode::SsmUnavailable,
            "SUSPEND_IN_PROGRESS" => ErrorCode::SuspendInProgress,
            other => ErrorCode::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ErrorCode {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ErrorCode::from(s))
    }
}
impl ErrorCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ErrorCode::AccessDenied => "ACCESS_DENIED",
            ErrorCode::AccountIsIsolated => "ACCOUNT_IS_ISOLATED",
            ErrorCode::AlreadyEnabled => "ALREADY_ENABLED",
            ErrorCode::DisableInProgress => "DISABLE_IN_PROGRESS",
            ErrorCode::DisassociateAllMembers => "DISASSOCIATE_ALL_MEMBERS",
            ErrorCode::Ec2SsmAssociationVersionLimitExceeded => "EC2_SSM_ASSOCIATION_VERSION_LIMIT_EXCEEDED",
            ErrorCode::Ec2SsmResourceDataSyncLimitExceeded => "EC2_SSM_RESOURCE_DATA_SYNC_LIMIT_EXCEEDED",
            ErrorCode::EnableInProgress => "ENABLE_IN_PROGRESS",
            ErrorCode::EventbridgeThrottled => "EVENTBRIDGE_THROTTLED",
            ErrorCode::EventbridgeUnavailable => "EVENTBRIDGE_UNAVAILABLE",
            ErrorCode::InternalError => "INTERNAL_ERROR",
            ErrorCode::ResourceNotFound => "RESOURCE_NOT_FOUND",
            ErrorCode::ResourceScanNotDisabled => "RESOURCE_SCAN_NOT_DISABLED",
            ErrorCode::SsmThrottled => "SSM_THROTTLED",
            ErrorCode::SsmUnavailable => "SSM_UNAVAILABLE",
            ErrorCode::SuspendInProgress => "SUSPEND_IN_PROGRESS",
            ErrorCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCESS_DENIED",
            "ACCOUNT_IS_ISOLATED",
            "ALREADY_ENABLED",
            "DISABLE_IN_PROGRESS",
            "DISASSOCIATE_ALL_MEMBERS",
            "EC2_SSM_ASSOCIATION_VERSION_LIMIT_EXCEEDED",
            "EC2_SSM_RESOURCE_DATA_SYNC_LIMIT_EXCEEDED",
            "ENABLE_IN_PROGRESS",
            "EVENTBRIDGE_THROTTLED",
            "EVENTBRIDGE_UNAVAILABLE",
            "INTERNAL_ERROR",
            "RESOURCE_NOT_FOUND",
            "RESOURCE_SCAN_NOT_DISABLED",
            "SSM_THROTTLED",
            "SSM_UNAVAILABLE",
            "SUSPEND_IN_PROGRESS",
        ]
    }
}
impl ::std::convert::AsRef<str> for ErrorCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ErrorCode {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ErrorCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ErrorCode::AccessDenied => write!(f, "ACCESS_DENIED"),
            ErrorCode::AccountIsIsolated => write!(f, "ACCOUNT_IS_ISOLATED"),
            ErrorCode::AlreadyEnabled => write!(f, "ALREADY_ENABLED"),
            ErrorCode::DisableInProgress => write!(f, "DISABLE_IN_PROGRESS"),
            ErrorCode::DisassociateAllMembers => write!(f, "DISASSOCIATE_ALL_MEMBERS"),
            ErrorCode::Ec2SsmAssociationVersionLimitExceeded => write!(f, "EC2_SSM_ASSOCIATION_VERSION_LIMIT_EXCEEDED"),
            ErrorCode::Ec2SsmResourceDataSyncLimitExceeded => write!(f, "EC2_SSM_RESOURCE_DATA_SYNC_LIMIT_EXCEEDED"),
            ErrorCode::EnableInProgress => write!(f, "ENABLE_IN_PROGRESS"),
            ErrorCode::EventbridgeThrottled => write!(f, "EVENTBRIDGE_THROTTLED"),
            ErrorCode::EventbridgeUnavailable => write!(f, "EVENTBRIDGE_UNAVAILABLE"),
            ErrorCode::InternalError => write!(f, "INTERNAL_ERROR"),
            ErrorCode::ResourceNotFound => write!(f, "RESOURCE_NOT_FOUND"),
            ErrorCode::ResourceScanNotDisabled => write!(f, "RESOURCE_SCAN_NOT_DISABLED"),
            ErrorCode::SsmThrottled => write!(f, "SSM_THROTTLED"),
            ErrorCode::SsmUnavailable => write!(f, "SSM_UNAVAILABLE"),
            ErrorCode::SuspendInProgress => write!(f, "SUSPEND_IN_PROGRESS"),
            ErrorCode::Unknown(value) => write!(f, "{value}"),
        }
    }
}
