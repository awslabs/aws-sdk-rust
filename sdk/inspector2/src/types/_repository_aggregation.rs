// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details that define an aggregation based on repository.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RepositoryAggregation {
    /// <p>The names of repositories to aggregate findings on.</p>
    #[doc(hidden)]
    pub repositories: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The order to sort results by.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
    /// <p>The value to sort results by.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::RepositorySortBy>,
}
impl RepositoryAggregation {
    /// <p>The names of repositories to aggregate findings on.</p>
    pub fn repositories(&self) -> std::option::Option<&[crate::types::StringFilter]> {
        self.repositories.as_deref()
    }
    /// <p>The order to sort results by.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The value to sort results by.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::RepositorySortBy> {
        self.sort_by.as_ref()
    }
}
impl RepositoryAggregation {
    /// Creates a new builder-style object to manufacture [`RepositoryAggregation`](crate::types::RepositoryAggregation).
    pub fn builder() -> crate::types::builders::RepositoryAggregationBuilder {
        crate::types::builders::RepositoryAggregationBuilder::default()
    }
}

/// A builder for [`RepositoryAggregation`](crate::types::RepositoryAggregation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RepositoryAggregationBuilder {
    pub(crate) repositories: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
    pub(crate) sort_by: std::option::Option<crate::types::RepositorySortBy>,
}
impl RepositoryAggregationBuilder {
    /// Appends an item to `repositories`.
    ///
    /// To override the contents of this collection use [`set_repositories`](Self::set_repositories).
    ///
    /// <p>The names of repositories to aggregate findings on.</p>
    pub fn repositories(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.repositories.unwrap_or_default();
        v.push(input);
        self.repositories = Some(v);
        self
    }
    /// <p>The names of repositories to aggregate findings on.</p>
    pub fn set_repositories(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StringFilter>>,
    ) -> Self {
        self.repositories = input;
        self
    }
    /// <p>The order to sort results by.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>The order to sort results by.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The value to sort results by.</p>
    pub fn sort_by(mut self, input: crate::types::RepositorySortBy) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>The value to sort results by.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::RepositorySortBy>,
    ) -> Self {
        self.sort_by = input;
        self
    }
    /// Consumes the builder and constructs a [`RepositoryAggregation`](crate::types::RepositoryAggregation).
    pub fn build(self) -> crate::types::RepositoryAggregation {
        crate::types::RepositoryAggregation {
            repositories: self.repositories,
            sort_order: self.sort_order,
            sort_by: self.sort_by,
        }
    }
}
