// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object with details on why an account failed to enable Amazon Inspector.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailedAccount {
    /// <p>The Amazon Web Services account ID.</p>
    pub account_id: ::std::string::String,
    /// <p>The status of Amazon Inspector for the account.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>An object detailing which resources Amazon Inspector is enabled to scan for the account.</p>
    pub resource_status: ::std::option::Option<crate::types::ResourceStatus>,
    /// <p>The error code explaining why the account failed to enable Amazon Inspector.</p>
    pub error_code: crate::types::ErrorCode,
    /// <p>The error message received when the account failed to enable Amazon Inspector.</p>
    pub error_message: ::std::string::String,
}
impl FailedAccount {
    /// <p>The Amazon Web Services account ID.</p>
    pub fn account_id(&self) -> &str {
        use std::ops::Deref;
        self.account_id.deref()
    }
    /// <p>The status of Amazon Inspector for the account.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>An object detailing which resources Amazon Inspector is enabled to scan for the account.</p>
    pub fn resource_status(&self) -> ::std::option::Option<&crate::types::ResourceStatus> {
        self.resource_status.as_ref()
    }
    /// <p>The error code explaining why the account failed to enable Amazon Inspector.</p>
    pub fn error_code(&self) -> &crate::types::ErrorCode {
        &self.error_code
    }
    /// <p>The error message received when the account failed to enable Amazon Inspector.</p>
    pub fn error_message(&self) -> &str {
        use std::ops::Deref;
        self.error_message.deref()
    }
}
impl FailedAccount {
    /// Creates a new builder-style object to manufacture [`FailedAccount`](crate::types::FailedAccount).
    pub fn builder() -> crate::types::builders::FailedAccountBuilder {
        crate::types::builders::FailedAccountBuilder::default()
    }
}

/// A builder for [`FailedAccount`](crate::types::FailedAccount).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FailedAccountBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) resource_status: ::std::option::Option<crate::types::ResourceStatus>,
    pub(crate) error_code: ::std::option::Option<crate::types::ErrorCode>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl FailedAccountBuilder {
    /// <p>The Amazon Web Services account ID.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The status of Amazon Inspector for the account.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of Amazon Inspector for the account.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of Amazon Inspector for the account.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>An object detailing which resources Amazon Inspector is enabled to scan for the account.</p>
    pub fn resource_status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.resource_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object detailing which resources Amazon Inspector is enabled to scan for the account.</p>
    pub fn set_resource_status(mut self, input: ::std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.resource_status = input;
        self
    }
    /// <p>An object detailing which resources Amazon Inspector is enabled to scan for the account.</p>
    pub fn get_resource_status(&self) -> &::std::option::Option<crate::types::ResourceStatus> {
        &self.resource_status
    }
    /// <p>The error code explaining why the account failed to enable Amazon Inspector.</p>
    /// This field is required.
    pub fn error_code(mut self, input: crate::types::ErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code explaining why the account failed to enable Amazon Inspector.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::ErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code explaining why the account failed to enable Amazon Inspector.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::ErrorCode> {
        &self.error_code
    }
    /// <p>The error message received when the account failed to enable Amazon Inspector.</p>
    /// This field is required.
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message received when the account failed to enable Amazon Inspector.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The error message received when the account failed to enable Amazon Inspector.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`FailedAccount`](crate::types::FailedAccount).
    /// This method will fail if any of the following fields are not set:
    /// - [`account_id`](crate::types::builders::FailedAccountBuilder::account_id)
    /// - [`error_code`](crate::types::builders::FailedAccountBuilder::error_code)
    /// - [`error_message`](crate::types::builders::FailedAccountBuilder::error_message)
    pub fn build(self) -> ::std::result::Result<crate::types::FailedAccount, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FailedAccount {
            account_id: self.account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "account_id",
                    "account_id was not specified but it is required when building FailedAccount",
                )
            })?,
            status: self.status,
            resource_status: self.resource_status,
            error_code: self.error_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_code",
                    "error_code was not specified but it is required when building FailedAccount",
                )
            })?,
            error_message: self.error_message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_message",
                    "error_message was not specified but it is required when building FailedAccount",
                )
            })?,
        })
    }
}
