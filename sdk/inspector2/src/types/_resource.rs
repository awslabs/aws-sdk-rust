// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the resource involved in a finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Resource {
    /// <p>The type of resource.</p>
    pub r#type: crate::types::ResourceType,
    /// <p>The ID of the resource.</p>
    pub id: ::std::string::String,
    /// <p>The partition of the resource.</p>
    pub partition: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region the impacted resource is located in.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The tags attached to the resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>An object that contains details about the resource involved in a finding.</p>
    pub details: ::std::option::Option<crate::types::ResourceDetails>,
}
impl Resource {
    /// <p>The type of resource.</p>
    pub fn r#type(&self) -> &crate::types::ResourceType {
        &self.r#type
    }
    /// <p>The ID of the resource.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The partition of the resource.</p>
    pub fn partition(&self) -> ::std::option::Option<&str> {
        self.partition.as_deref()
    }
    /// <p>The Amazon Web Services Region the impacted resource is located in.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The tags attached to the resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>An object that contains details about the resource involved in a finding.</p>
    pub fn details(&self) -> ::std::option::Option<&crate::types::ResourceDetails> {
        self.details.as_ref()
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::types::Resource).
    pub fn builder() -> crate::types::builders::ResourceBuilder {
        crate::types::builders::ResourceBuilder::default()
    }
}

/// A builder for [`Resource`](crate::types::Resource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) partition: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) details: ::std::option::Option<crate::types::ResourceDetails>,
}
impl ResourceBuilder {
    /// <p>The type of resource.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ResourceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of resource.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.r#type
    }
    /// <p>The ID of the resource.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the resource.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the resource.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The partition of the resource.</p>
    pub fn partition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.partition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The partition of the resource.</p>
    pub fn set_partition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.partition = input;
        self
    }
    /// <p>The partition of the resource.</p>
    pub fn get_partition(&self) -> &::std::option::Option<::std::string::String> {
        &self.partition
    }
    /// <p>The Amazon Web Services Region the impacted resource is located in.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region the impacted resource is located in.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region the impacted resource is located in.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags attached to the resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags attached to the resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags attached to the resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>An object that contains details about the resource involved in a finding.</p>
    pub fn details(mut self, input: crate::types::ResourceDetails) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains details about the resource involved in a finding.</p>
    pub fn set_details(mut self, input: ::std::option::Option<crate::types::ResourceDetails>) -> Self {
        self.details = input;
        self
    }
    /// <p>An object that contains details about the resource involved in a finding.</p>
    pub fn get_details(&self) -> &::std::option::Option<crate::types::ResourceDetails> {
        &self.details
    }
    /// Consumes the builder and constructs a [`Resource`](crate::types::Resource).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::ResourceBuilder::r#type)
    /// - [`id`](crate::types::builders::ResourceBuilder::id)
    pub fn build(self) -> ::std::result::Result<crate::types::Resource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Resource {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building Resource",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building Resource",
                )
            })?,
            partition: self.partition,
            region: self.region,
            tags: self.tags,
            details: self.details,
        })
    }
}
