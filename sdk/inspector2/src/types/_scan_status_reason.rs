// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ScanStatusReason`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let scanstatusreason = unimplemented!();
/// match scanstatusreason {
///     ScanStatusReason::AccessDenied => { /* ... */ },
///     ScanStatusReason::Ec2InstanceStopped => { /* ... */ },
///     ScanStatusReason::ExcludedByTag => { /* ... */ },
///     ScanStatusReason::ImageSizeExceeded => { /* ... */ },
///     ScanStatusReason::InternalError => { /* ... */ },
///     ScanStatusReason::NoInventory => { /* ... */ },
///     ScanStatusReason::NoResourcesFound => { /* ... */ },
///     ScanStatusReason::PendingDisable => { /* ... */ },
///     ScanStatusReason::PendingInitialScan => { /* ... */ },
///     ScanStatusReason::ResourceTerminated => { /* ... */ },
///     ScanStatusReason::ScanEligibilityExpired => { /* ... */ },
///     ScanStatusReason::ScanFrequencyManual => { /* ... */ },
///     ScanStatusReason::ScanFrequencyScanOnPush => { /* ... */ },
///     ScanStatusReason::StaleInventory => { /* ... */ },
///     ScanStatusReason::Successful => { /* ... */ },
///     ScanStatusReason::UnmanagedEc2Instance => { /* ... */ },
///     ScanStatusReason::UnsupportedOs => { /* ... */ },
///     ScanStatusReason::UnsupportedRuntime => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `scanstatusreason` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ScanStatusReason::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ScanStatusReason::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ScanStatusReason::NewFeature` is defined.
/// Specifically, when `scanstatusreason` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ScanStatusReason::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ScanStatusReason {
    #[allow(missing_docs)] // documentation missing in model
    AccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    Ec2InstanceStopped,
    #[allow(missing_docs)] // documentation missing in model
    ExcludedByTag,
    #[allow(missing_docs)] // documentation missing in model
    ImageSizeExceeded,
    #[allow(missing_docs)] // documentation missing in model
    InternalError,
    #[allow(missing_docs)] // documentation missing in model
    NoInventory,
    #[allow(missing_docs)] // documentation missing in model
    NoResourcesFound,
    #[allow(missing_docs)] // documentation missing in model
    PendingDisable,
    #[allow(missing_docs)] // documentation missing in model
    PendingInitialScan,
    #[allow(missing_docs)] // documentation missing in model
    ResourceTerminated,
    #[allow(missing_docs)] // documentation missing in model
    ScanEligibilityExpired,
    #[allow(missing_docs)] // documentation missing in model
    ScanFrequencyManual,
    #[allow(missing_docs)] // documentation missing in model
    ScanFrequencyScanOnPush,
    #[allow(missing_docs)] // documentation missing in model
    StaleInventory,
    #[allow(missing_docs)] // documentation missing in model
    Successful,
    #[allow(missing_docs)] // documentation missing in model
    UnmanagedEc2Instance,
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedOs,
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedRuntime,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ScanStatusReason {
    fn from(s: &str) -> Self {
        match s {
            "ACCESS_DENIED" => ScanStatusReason::AccessDenied,
            "EC2_INSTANCE_STOPPED" => ScanStatusReason::Ec2InstanceStopped,
            "EXCLUDED_BY_TAG" => ScanStatusReason::ExcludedByTag,
            "IMAGE_SIZE_EXCEEDED" => ScanStatusReason::ImageSizeExceeded,
            "INTERNAL_ERROR" => ScanStatusReason::InternalError,
            "NO_INVENTORY" => ScanStatusReason::NoInventory,
            "NO_RESOURCES_FOUND" => ScanStatusReason::NoResourcesFound,
            "PENDING_DISABLE" => ScanStatusReason::PendingDisable,
            "PENDING_INITIAL_SCAN" => ScanStatusReason::PendingInitialScan,
            "RESOURCE_TERMINATED" => ScanStatusReason::ResourceTerminated,
            "SCAN_ELIGIBILITY_EXPIRED" => ScanStatusReason::ScanEligibilityExpired,
            "SCAN_FREQUENCY_MANUAL" => ScanStatusReason::ScanFrequencyManual,
            "SCAN_FREQUENCY_SCAN_ON_PUSH" => ScanStatusReason::ScanFrequencyScanOnPush,
            "STALE_INVENTORY" => ScanStatusReason::StaleInventory,
            "SUCCESSFUL" => ScanStatusReason::Successful,
            "UNMANAGED_EC2_INSTANCE" => ScanStatusReason::UnmanagedEc2Instance,
            "UNSUPPORTED_OS" => ScanStatusReason::UnsupportedOs,
            "UNSUPPORTED_RUNTIME" => ScanStatusReason::UnsupportedRuntime,
            other => {
                ScanStatusReason::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ScanStatusReason {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ScanStatusReason::from(s))
    }
}
impl ScanStatusReason {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ScanStatusReason::AccessDenied => "ACCESS_DENIED",
            ScanStatusReason::Ec2InstanceStopped => "EC2_INSTANCE_STOPPED",
            ScanStatusReason::ExcludedByTag => "EXCLUDED_BY_TAG",
            ScanStatusReason::ImageSizeExceeded => "IMAGE_SIZE_EXCEEDED",
            ScanStatusReason::InternalError => "INTERNAL_ERROR",
            ScanStatusReason::NoInventory => "NO_INVENTORY",
            ScanStatusReason::NoResourcesFound => "NO_RESOURCES_FOUND",
            ScanStatusReason::PendingDisable => "PENDING_DISABLE",
            ScanStatusReason::PendingInitialScan => "PENDING_INITIAL_SCAN",
            ScanStatusReason::ResourceTerminated => "RESOURCE_TERMINATED",
            ScanStatusReason::ScanEligibilityExpired => "SCAN_ELIGIBILITY_EXPIRED",
            ScanStatusReason::ScanFrequencyManual => "SCAN_FREQUENCY_MANUAL",
            ScanStatusReason::ScanFrequencyScanOnPush => "SCAN_FREQUENCY_SCAN_ON_PUSH",
            ScanStatusReason::StaleInventory => "STALE_INVENTORY",
            ScanStatusReason::Successful => "SUCCESSFUL",
            ScanStatusReason::UnmanagedEc2Instance => "UNMANAGED_EC2_INSTANCE",
            ScanStatusReason::UnsupportedOs => "UNSUPPORTED_OS",
            ScanStatusReason::UnsupportedRuntime => "UNSUPPORTED_RUNTIME",
            ScanStatusReason::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCESS_DENIED",
            "EC2_INSTANCE_STOPPED",
            "EXCLUDED_BY_TAG",
            "IMAGE_SIZE_EXCEEDED",
            "INTERNAL_ERROR",
            "NO_INVENTORY",
            "NO_RESOURCES_FOUND",
            "PENDING_DISABLE",
            "PENDING_INITIAL_SCAN",
            "RESOURCE_TERMINATED",
            "SCAN_ELIGIBILITY_EXPIRED",
            "SCAN_FREQUENCY_MANUAL",
            "SCAN_FREQUENCY_SCAN_ON_PUSH",
            "STALE_INVENTORY",
            "SUCCESSFUL",
            "UNMANAGED_EC2_INSTANCE",
            "UNSUPPORTED_OS",
            "UNSUPPORTED_RUNTIME",
        ]
    }
}
impl AsRef<str> for ScanStatusReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
