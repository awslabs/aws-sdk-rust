// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ScanStatusReason`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let scanstatusreason = unimplemented!();
/// match scanstatusreason {
///     ScanStatusReason::AccessDenied => { /* ... */ },
///     ScanStatusReason::AccessDeniedToEncryptionKey => { /* ... */ },
///     ScanStatusReason::AgentlessInstanceCollectionTimeLimitExceeded => { /* ... */ },
///     ScanStatusReason::AgentlessInstanceStorageLimitExceeded => { /* ... */ },
///     ScanStatusReason::DeepInspectionCollectionTimeLimitExceeded => { /* ... */ },
///     ScanStatusReason::DeepInspectionDailySsmInventoryLimitExceeded => { /* ... */ },
///     ScanStatusReason::DeepInspectionNoInventory => { /* ... */ },
///     ScanStatusReason::DeepInspectionPackageCollectionLimitExceeded => { /* ... */ },
///     ScanStatusReason::Ec2InstanceStopped => { /* ... */ },
///     ScanStatusReason::ExcludedByTag => { /* ... */ },
///     ScanStatusReason::ImageSizeExceeded => { /* ... */ },
///     ScanStatusReason::IntegrationConnectionLost => { /* ... */ },
///     ScanStatusReason::InternalError => { /* ... */ },
///     ScanStatusReason::NoInventory => { /* ... */ },
///     ScanStatusReason::NoResourcesFound => { /* ... */ },
///     ScanStatusReason::NoScanConfigurationAssociated => { /* ... */ },
///     ScanStatusReason::PendingDisable => { /* ... */ },
///     ScanStatusReason::PendingInitialScan => { /* ... */ },
///     ScanStatusReason::PendingRevivalScan => { /* ... */ },
///     ScanStatusReason::ResourceTerminated => { /* ... */ },
///     ScanStatusReason::ScanEligibilityExpired => { /* ... */ },
///     ScanStatusReason::ScanFrequencyManual => { /* ... */ },
///     ScanStatusReason::ScanFrequencyScanOnPush => { /* ... */ },
///     ScanStatusReason::ScanInProgress => { /* ... */ },
///     ScanStatusReason::StaleInventory => { /* ... */ },
///     ScanStatusReason::Successful => { /* ... */ },
///     ScanStatusReason::UnmanagedEc2Instance => { /* ... */ },
///     ScanStatusReason::UnsupportedConfigFile => { /* ... */ },
///     ScanStatusReason::UnsupportedLanguage => { /* ... */ },
///     ScanStatusReason::UnsupportedMediaType => { /* ... */ },
///     ScanStatusReason::UnsupportedOs => { /* ... */ },
///     ScanStatusReason::UnsupportedRuntime => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `scanstatusreason` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ScanStatusReason::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ScanStatusReason::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ScanStatusReason::NewFeature` is defined.
/// Specifically, when `scanstatusreason` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ScanStatusReason::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ScanStatusReason {
    #[allow(missing_docs)] // documentation missing in model
    AccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    AccessDeniedToEncryptionKey,
    #[allow(missing_docs)] // documentation missing in model
    AgentlessInstanceCollectionTimeLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    AgentlessInstanceStorageLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    DeepInspectionCollectionTimeLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    DeepInspectionDailySsmInventoryLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    DeepInspectionNoInventory,
    #[allow(missing_docs)] // documentation missing in model
    DeepInspectionPackageCollectionLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    Ec2InstanceStopped,
    #[allow(missing_docs)] // documentation missing in model
    ExcludedByTag,
    #[allow(missing_docs)] // documentation missing in model
    ImageSizeExceeded,
    #[allow(missing_docs)] // documentation missing in model
    IntegrationConnectionLost,
    #[allow(missing_docs)] // documentation missing in model
    InternalError,
    #[allow(missing_docs)] // documentation missing in model
    NoInventory,
    #[allow(missing_docs)] // documentation missing in model
    NoResourcesFound,
    #[allow(missing_docs)] // documentation missing in model
    NoScanConfigurationAssociated,
    #[allow(missing_docs)] // documentation missing in model
    PendingDisable,
    #[allow(missing_docs)] // documentation missing in model
    PendingInitialScan,
    #[allow(missing_docs)] // documentation missing in model
    PendingRevivalScan,
    #[allow(missing_docs)] // documentation missing in model
    ResourceTerminated,
    #[allow(missing_docs)] // documentation missing in model
    ScanEligibilityExpired,
    #[allow(missing_docs)] // documentation missing in model
    ScanFrequencyManual,
    #[allow(missing_docs)] // documentation missing in model
    ScanFrequencyScanOnPush,
    #[allow(missing_docs)] // documentation missing in model
    ScanInProgress,
    #[allow(missing_docs)] // documentation missing in model
    StaleInventory,
    #[allow(missing_docs)] // documentation missing in model
    Successful,
    #[allow(missing_docs)] // documentation missing in model
    UnmanagedEc2Instance,
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedConfigFile,
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedLanguage,
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedMediaType,
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedOs,
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedRuntime,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ScanStatusReason {
    fn from(s: &str) -> Self {
        match s {
            "ACCESS_DENIED" => ScanStatusReason::AccessDenied,
            "ACCESS_DENIED_TO_ENCRYPTION_KEY" => ScanStatusReason::AccessDeniedToEncryptionKey,
            "AGENTLESS_INSTANCE_COLLECTION_TIME_LIMIT_EXCEEDED" => ScanStatusReason::AgentlessInstanceCollectionTimeLimitExceeded,
            "AGENTLESS_INSTANCE_STORAGE_LIMIT_EXCEEDED" => ScanStatusReason::AgentlessInstanceStorageLimitExceeded,
            "DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED" => ScanStatusReason::DeepInspectionCollectionTimeLimitExceeded,
            "DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED" => ScanStatusReason::DeepInspectionDailySsmInventoryLimitExceeded,
            "DEEP_INSPECTION_NO_INVENTORY" => ScanStatusReason::DeepInspectionNoInventory,
            "DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED" => ScanStatusReason::DeepInspectionPackageCollectionLimitExceeded,
            "EC2_INSTANCE_STOPPED" => ScanStatusReason::Ec2InstanceStopped,
            "EXCLUDED_BY_TAG" => ScanStatusReason::ExcludedByTag,
            "IMAGE_SIZE_EXCEEDED" => ScanStatusReason::ImageSizeExceeded,
            "INTEGRATION_CONNECTION_LOST" => ScanStatusReason::IntegrationConnectionLost,
            "INTERNAL_ERROR" => ScanStatusReason::InternalError,
            "NO_INVENTORY" => ScanStatusReason::NoInventory,
            "NO_RESOURCES_FOUND" => ScanStatusReason::NoResourcesFound,
            "NO_SCAN_CONFIGURATION_ASSOCIATED" => ScanStatusReason::NoScanConfigurationAssociated,
            "PENDING_DISABLE" => ScanStatusReason::PendingDisable,
            "PENDING_INITIAL_SCAN" => ScanStatusReason::PendingInitialScan,
            "PENDING_REVIVAL_SCAN" => ScanStatusReason::PendingRevivalScan,
            "RESOURCE_TERMINATED" => ScanStatusReason::ResourceTerminated,
            "SCAN_ELIGIBILITY_EXPIRED" => ScanStatusReason::ScanEligibilityExpired,
            "SCAN_FREQUENCY_MANUAL" => ScanStatusReason::ScanFrequencyManual,
            "SCAN_FREQUENCY_SCAN_ON_PUSH" => ScanStatusReason::ScanFrequencyScanOnPush,
            "SCAN_IN_PROGRESS" => ScanStatusReason::ScanInProgress,
            "STALE_INVENTORY" => ScanStatusReason::StaleInventory,
            "SUCCESSFUL" => ScanStatusReason::Successful,
            "UNMANAGED_EC2_INSTANCE" => ScanStatusReason::UnmanagedEc2Instance,
            "UNSUPPORTED_CONFIG_FILE" => ScanStatusReason::UnsupportedConfigFile,
            "UNSUPPORTED_LANGUAGE" => ScanStatusReason::UnsupportedLanguage,
            "UNSUPPORTED_MEDIA_TYPE" => ScanStatusReason::UnsupportedMediaType,
            "UNSUPPORTED_OS" => ScanStatusReason::UnsupportedOs,
            "UNSUPPORTED_RUNTIME" => ScanStatusReason::UnsupportedRuntime,
            other => ScanStatusReason::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ScanStatusReason {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ScanStatusReason::from(s))
    }
}
impl ScanStatusReason {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ScanStatusReason::AccessDenied => "ACCESS_DENIED",
            ScanStatusReason::AccessDeniedToEncryptionKey => "ACCESS_DENIED_TO_ENCRYPTION_KEY",
            ScanStatusReason::AgentlessInstanceCollectionTimeLimitExceeded => "AGENTLESS_INSTANCE_COLLECTION_TIME_LIMIT_EXCEEDED",
            ScanStatusReason::AgentlessInstanceStorageLimitExceeded => "AGENTLESS_INSTANCE_STORAGE_LIMIT_EXCEEDED",
            ScanStatusReason::DeepInspectionCollectionTimeLimitExceeded => "DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED",
            ScanStatusReason::DeepInspectionDailySsmInventoryLimitExceeded => "DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED",
            ScanStatusReason::DeepInspectionNoInventory => "DEEP_INSPECTION_NO_INVENTORY",
            ScanStatusReason::DeepInspectionPackageCollectionLimitExceeded => "DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED",
            ScanStatusReason::Ec2InstanceStopped => "EC2_INSTANCE_STOPPED",
            ScanStatusReason::ExcludedByTag => "EXCLUDED_BY_TAG",
            ScanStatusReason::ImageSizeExceeded => "IMAGE_SIZE_EXCEEDED",
            ScanStatusReason::IntegrationConnectionLost => "INTEGRATION_CONNECTION_LOST",
            ScanStatusReason::InternalError => "INTERNAL_ERROR",
            ScanStatusReason::NoInventory => "NO_INVENTORY",
            ScanStatusReason::NoResourcesFound => "NO_RESOURCES_FOUND",
            ScanStatusReason::NoScanConfigurationAssociated => "NO_SCAN_CONFIGURATION_ASSOCIATED",
            ScanStatusReason::PendingDisable => "PENDING_DISABLE",
            ScanStatusReason::PendingInitialScan => "PENDING_INITIAL_SCAN",
            ScanStatusReason::PendingRevivalScan => "PENDING_REVIVAL_SCAN",
            ScanStatusReason::ResourceTerminated => "RESOURCE_TERMINATED",
            ScanStatusReason::ScanEligibilityExpired => "SCAN_ELIGIBILITY_EXPIRED",
            ScanStatusReason::ScanFrequencyManual => "SCAN_FREQUENCY_MANUAL",
            ScanStatusReason::ScanFrequencyScanOnPush => "SCAN_FREQUENCY_SCAN_ON_PUSH",
            ScanStatusReason::ScanInProgress => "SCAN_IN_PROGRESS",
            ScanStatusReason::StaleInventory => "STALE_INVENTORY",
            ScanStatusReason::Successful => "SUCCESSFUL",
            ScanStatusReason::UnmanagedEc2Instance => "UNMANAGED_EC2_INSTANCE",
            ScanStatusReason::UnsupportedConfigFile => "UNSUPPORTED_CONFIG_FILE",
            ScanStatusReason::UnsupportedLanguage => "UNSUPPORTED_LANGUAGE",
            ScanStatusReason::UnsupportedMediaType => "UNSUPPORTED_MEDIA_TYPE",
            ScanStatusReason::UnsupportedOs => "UNSUPPORTED_OS",
            ScanStatusReason::UnsupportedRuntime => "UNSUPPORTED_RUNTIME",
            ScanStatusReason::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCESS_DENIED",
            "ACCESS_DENIED_TO_ENCRYPTION_KEY",
            "AGENTLESS_INSTANCE_COLLECTION_TIME_LIMIT_EXCEEDED",
            "AGENTLESS_INSTANCE_STORAGE_LIMIT_EXCEEDED",
            "DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED",
            "DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED",
            "DEEP_INSPECTION_NO_INVENTORY",
            "DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED",
            "EC2_INSTANCE_STOPPED",
            "EXCLUDED_BY_TAG",
            "IMAGE_SIZE_EXCEEDED",
            "INTEGRATION_CONNECTION_LOST",
            "INTERNAL_ERROR",
            "NO_INVENTORY",
            "NO_RESOURCES_FOUND",
            "NO_SCAN_CONFIGURATION_ASSOCIATED",
            "PENDING_DISABLE",
            "PENDING_INITIAL_SCAN",
            "PENDING_REVIVAL_SCAN",
            "RESOURCE_TERMINATED",
            "SCAN_ELIGIBILITY_EXPIRED",
            "SCAN_FREQUENCY_MANUAL",
            "SCAN_FREQUENCY_SCAN_ON_PUSH",
            "SCAN_IN_PROGRESS",
            "STALE_INVENTORY",
            "SUCCESSFUL",
            "UNMANAGED_EC2_INSTANCE",
            "UNSUPPORTED_CONFIG_FILE",
            "UNSUPPORTED_LANGUAGE",
            "UNSUPPORTED_MEDIA_TYPE",
            "UNSUPPORTED_OS",
            "UNSUPPORTED_RUNTIME",
        ]
    }
}
impl ::std::convert::AsRef<str> for ScanStatusReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ScanStatusReason {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ScanStatusReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ScanStatusReason::AccessDenied => write!(f, "ACCESS_DENIED"),
            ScanStatusReason::AccessDeniedToEncryptionKey => write!(f, "ACCESS_DENIED_TO_ENCRYPTION_KEY"),
            ScanStatusReason::AgentlessInstanceCollectionTimeLimitExceeded => write!(f, "AGENTLESS_INSTANCE_COLLECTION_TIME_LIMIT_EXCEEDED"),
            ScanStatusReason::AgentlessInstanceStorageLimitExceeded => write!(f, "AGENTLESS_INSTANCE_STORAGE_LIMIT_EXCEEDED"),
            ScanStatusReason::DeepInspectionCollectionTimeLimitExceeded => write!(f, "DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED"),
            ScanStatusReason::DeepInspectionDailySsmInventoryLimitExceeded => write!(f, "DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED"),
            ScanStatusReason::DeepInspectionNoInventory => write!(f, "DEEP_INSPECTION_NO_INVENTORY"),
            ScanStatusReason::DeepInspectionPackageCollectionLimitExceeded => write!(f, "DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED"),
            ScanStatusReason::Ec2InstanceStopped => write!(f, "EC2_INSTANCE_STOPPED"),
            ScanStatusReason::ExcludedByTag => write!(f, "EXCLUDED_BY_TAG"),
            ScanStatusReason::ImageSizeExceeded => write!(f, "IMAGE_SIZE_EXCEEDED"),
            ScanStatusReason::IntegrationConnectionLost => write!(f, "INTEGRATION_CONNECTION_LOST"),
            ScanStatusReason::InternalError => write!(f, "INTERNAL_ERROR"),
            ScanStatusReason::NoInventory => write!(f, "NO_INVENTORY"),
            ScanStatusReason::NoResourcesFound => write!(f, "NO_RESOURCES_FOUND"),
            ScanStatusReason::NoScanConfigurationAssociated => write!(f, "NO_SCAN_CONFIGURATION_ASSOCIATED"),
            ScanStatusReason::PendingDisable => write!(f, "PENDING_DISABLE"),
            ScanStatusReason::PendingInitialScan => write!(f, "PENDING_INITIAL_SCAN"),
            ScanStatusReason::PendingRevivalScan => write!(f, "PENDING_REVIVAL_SCAN"),
            ScanStatusReason::ResourceTerminated => write!(f, "RESOURCE_TERMINATED"),
            ScanStatusReason::ScanEligibilityExpired => write!(f, "SCAN_ELIGIBILITY_EXPIRED"),
            ScanStatusReason::ScanFrequencyManual => write!(f, "SCAN_FREQUENCY_MANUAL"),
            ScanStatusReason::ScanFrequencyScanOnPush => write!(f, "SCAN_FREQUENCY_SCAN_ON_PUSH"),
            ScanStatusReason::ScanInProgress => write!(f, "SCAN_IN_PROGRESS"),
            ScanStatusReason::StaleInventory => write!(f, "STALE_INVENTORY"),
            ScanStatusReason::Successful => write!(f, "SUCCESSFUL"),
            ScanStatusReason::UnmanagedEc2Instance => write!(f, "UNMANAGED_EC2_INSTANCE"),
            ScanStatusReason::UnsupportedConfigFile => write!(f, "UNSUPPORTED_CONFIG_FILE"),
            ScanStatusReason::UnsupportedLanguage => write!(f, "UNSUPPORTED_LANGUAGE"),
            ScanStatusReason::UnsupportedMediaType => write!(f, "UNSUPPORTED_MEDIA_TYPE"),
            ScanStatusReason::UnsupportedOs => write!(f, "UNSUPPORTED_OS"),
            ScanStatusReason::UnsupportedRuntime => write!(f, "UNSUPPORTED_RUNTIME"),
            ScanStatusReason::Unknown(value) => write!(f, "{value}"),
        }
    }
}
