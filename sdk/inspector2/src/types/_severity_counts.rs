// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains the counts of aggregated finding per severity.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SeverityCounts {
    /// <p>The total count of findings from all severities.</p>
    #[doc(hidden)]
    pub all: std::option::Option<i64>,
    /// <p>The total count of medium severity findings.</p>
    #[doc(hidden)]
    pub medium: std::option::Option<i64>,
    /// <p>The total count of high severity findings.</p>
    #[doc(hidden)]
    pub high: std::option::Option<i64>,
    /// <p>The total count of critical severity findings.</p>
    #[doc(hidden)]
    pub critical: std::option::Option<i64>,
}
impl SeverityCounts {
    /// <p>The total count of findings from all severities.</p>
    pub fn all(&self) -> std::option::Option<i64> {
        self.all
    }
    /// <p>The total count of medium severity findings.</p>
    pub fn medium(&self) -> std::option::Option<i64> {
        self.medium
    }
    /// <p>The total count of high severity findings.</p>
    pub fn high(&self) -> std::option::Option<i64> {
        self.high
    }
    /// <p>The total count of critical severity findings.</p>
    pub fn critical(&self) -> std::option::Option<i64> {
        self.critical
    }
}
impl SeverityCounts {
    /// Creates a new builder-style object to manufacture [`SeverityCounts`](crate::types::SeverityCounts).
    pub fn builder() -> crate::types::builders::SeverityCountsBuilder {
        crate::types::builders::SeverityCountsBuilder::default()
    }
}

/// A builder for [`SeverityCounts`](crate::types::SeverityCounts).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SeverityCountsBuilder {
    pub(crate) all: std::option::Option<i64>,
    pub(crate) medium: std::option::Option<i64>,
    pub(crate) high: std::option::Option<i64>,
    pub(crate) critical: std::option::Option<i64>,
}
impl SeverityCountsBuilder {
    /// <p>The total count of findings from all severities.</p>
    pub fn all(mut self, input: i64) -> Self {
        self.all = Some(input);
        self
    }
    /// <p>The total count of findings from all severities.</p>
    pub fn set_all(mut self, input: std::option::Option<i64>) -> Self {
        self.all = input;
        self
    }
    /// <p>The total count of medium severity findings.</p>
    pub fn medium(mut self, input: i64) -> Self {
        self.medium = Some(input);
        self
    }
    /// <p>The total count of medium severity findings.</p>
    pub fn set_medium(mut self, input: std::option::Option<i64>) -> Self {
        self.medium = input;
        self
    }
    /// <p>The total count of high severity findings.</p>
    pub fn high(mut self, input: i64) -> Self {
        self.high = Some(input);
        self
    }
    /// <p>The total count of high severity findings.</p>
    pub fn set_high(mut self, input: std::option::Option<i64>) -> Self {
        self.high = input;
        self
    }
    /// <p>The total count of critical severity findings.</p>
    pub fn critical(mut self, input: i64) -> Self {
        self.critical = Some(input);
        self
    }
    /// <p>The total count of critical severity findings.</p>
    pub fn set_critical(mut self, input: std::option::Option<i64>) -> Self {
        self.critical = input;
        self
    }
    /// Consumes the builder and constructs a [`SeverityCounts`](crate::types::SeverityCounts).
    pub fn build(self) -> crate::types::SeverityCounts {
        crate::types::SeverityCounts {
            all: self.all,
            medium: self.medium,
            high: self.high,
            critical: self.critical,
        }
    }
}
