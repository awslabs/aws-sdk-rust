// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details of a network reachability finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkReachabilityDetails {
    /// <p>An object that contains details about the open port range associated with a finding.</p>
    pub open_port_range: ::std::option::Option<crate::types::PortRange>,
    /// <p>The protocol associated with a finding.</p>
    pub protocol: crate::types::NetworkProtocol,
    /// <p>An object that contains details about a network path associated with a finding.</p>
    pub network_path: ::std::option::Option<crate::types::NetworkPath>,
}
impl NetworkReachabilityDetails {
    /// <p>An object that contains details about the open port range associated with a finding.</p>
    pub fn open_port_range(&self) -> ::std::option::Option<&crate::types::PortRange> {
        self.open_port_range.as_ref()
    }
    /// <p>The protocol associated with a finding.</p>
    pub fn protocol(&self) -> &crate::types::NetworkProtocol {
        &self.protocol
    }
    /// <p>An object that contains details about a network path associated with a finding.</p>
    pub fn network_path(&self) -> ::std::option::Option<&crate::types::NetworkPath> {
        self.network_path.as_ref()
    }
}
impl NetworkReachabilityDetails {
    /// Creates a new builder-style object to manufacture [`NetworkReachabilityDetails`](crate::types::NetworkReachabilityDetails).
    pub fn builder() -> crate::types::builders::NetworkReachabilityDetailsBuilder {
        crate::types::builders::NetworkReachabilityDetailsBuilder::default()
    }
}

/// A builder for [`NetworkReachabilityDetails`](crate::types::NetworkReachabilityDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NetworkReachabilityDetailsBuilder {
    pub(crate) open_port_range: ::std::option::Option<crate::types::PortRange>,
    pub(crate) protocol: ::std::option::Option<crate::types::NetworkProtocol>,
    pub(crate) network_path: ::std::option::Option<crate::types::NetworkPath>,
}
impl NetworkReachabilityDetailsBuilder {
    /// <p>An object that contains details about the open port range associated with a finding.</p>
    /// This field is required.
    pub fn open_port_range(mut self, input: crate::types::PortRange) -> Self {
        self.open_port_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains details about the open port range associated with a finding.</p>
    pub fn set_open_port_range(mut self, input: ::std::option::Option<crate::types::PortRange>) -> Self {
        self.open_port_range = input;
        self
    }
    /// <p>An object that contains details about the open port range associated with a finding.</p>
    pub fn get_open_port_range(&self) -> &::std::option::Option<crate::types::PortRange> {
        &self.open_port_range
    }
    /// <p>The protocol associated with a finding.</p>
    /// This field is required.
    pub fn protocol(mut self, input: crate::types::NetworkProtocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol associated with a finding.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::NetworkProtocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol associated with a finding.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::NetworkProtocol> {
        &self.protocol
    }
    /// <p>An object that contains details about a network path associated with a finding.</p>
    /// This field is required.
    pub fn network_path(mut self, input: crate::types::NetworkPath) -> Self {
        self.network_path = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains details about a network path associated with a finding.</p>
    pub fn set_network_path(mut self, input: ::std::option::Option<crate::types::NetworkPath>) -> Self {
        self.network_path = input;
        self
    }
    /// <p>An object that contains details about a network path associated with a finding.</p>
    pub fn get_network_path(&self) -> &::std::option::Option<crate::types::NetworkPath> {
        &self.network_path
    }
    /// Consumes the builder and constructs a [`NetworkReachabilityDetails`](crate::types::NetworkReachabilityDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`protocol`](crate::types::builders::NetworkReachabilityDetailsBuilder::protocol)
    pub fn build(self) -> ::std::result::Result<crate::types::NetworkReachabilityDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NetworkReachabilityDetails {
            open_port_range: self.open_port_range,
            protocol: self.protocol.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "protocol",
                    "protocol was not specified but it is required when building NetworkReachabilityDetails",
                )
            })?,
            network_path: self.network_path,
        })
    }
}
