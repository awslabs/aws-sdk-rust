// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the port range associated with a finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PortRange {
    /// <p>The beginning port in a port range.</p>
    pub begin: i32,
    /// <p>The ending port in a port range.</p>
    pub end: i32,
}
impl PortRange {
    /// <p>The beginning port in a port range.</p>
    pub fn begin(&self) -> i32 {
        self.begin
    }
    /// <p>The ending port in a port range.</p>
    pub fn end(&self) -> i32 {
        self.end
    }
}
impl PortRange {
    /// Creates a new builder-style object to manufacture [`PortRange`](crate::types::PortRange).
    pub fn builder() -> crate::types::builders::PortRangeBuilder {
        crate::types::builders::PortRangeBuilder::default()
    }
}

/// A builder for [`PortRange`](crate::types::PortRange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PortRangeBuilder {
    pub(crate) begin: ::std::option::Option<i32>,
    pub(crate) end: ::std::option::Option<i32>,
}
impl PortRangeBuilder {
    /// <p>The beginning port in a port range.</p>
    /// This field is required.
    pub fn begin(mut self, input: i32) -> Self {
        self.begin = ::std::option::Option::Some(input);
        self
    }
    /// <p>The beginning port in a port range.</p>
    pub fn set_begin(mut self, input: ::std::option::Option<i32>) -> Self {
        self.begin = input;
        self
    }
    /// <p>The beginning port in a port range.</p>
    pub fn get_begin(&self) -> &::std::option::Option<i32> {
        &self.begin
    }
    /// <p>The ending port in a port range.</p>
    /// This field is required.
    pub fn end(mut self, input: i32) -> Self {
        self.end = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ending port in a port range.</p>
    pub fn set_end(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end = input;
        self
    }
    /// <p>The ending port in a port range.</p>
    pub fn get_end(&self) -> &::std::option::Option<i32> {
        &self.end
    }
    /// Consumes the builder and constructs a [`PortRange`](crate::types::PortRange).
    /// This method will fail if any of the following fields are not set:
    /// - [`begin`](crate::types::builders::PortRangeBuilder::begin)
    /// - [`end`](crate::types::builders::PortRangeBuilder::end)
    pub fn build(self) -> ::std::result::Result<crate::types::PortRange, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PortRange {
            begin: self.begin.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "begin",
                    "begin was not specified but it is required when building PortRange",
                )
            })?,
            end: self.end.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end",
                    "end was not specified but it is required when building PortRange",
                )
            })?,
        })
    }
}
