// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the port range associated with a finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PortRange {
    /// <p>The beginning port in a port range.</p>
    #[doc(hidden)]
    pub begin: std::option::Option<i32>,
    /// <p>The ending port in a port range.</p>
    #[doc(hidden)]
    pub end: std::option::Option<i32>,
}
impl PortRange {
    /// <p>The beginning port in a port range.</p>
    pub fn begin(&self) -> std::option::Option<i32> {
        self.begin
    }
    /// <p>The ending port in a port range.</p>
    pub fn end(&self) -> std::option::Option<i32> {
        self.end
    }
}
impl PortRange {
    /// Creates a new builder-style object to manufacture [`PortRange`](crate::types::PortRange).
    pub fn builder() -> crate::types::builders::PortRangeBuilder {
        crate::types::builders::PortRangeBuilder::default()
    }
}

/// A builder for [`PortRange`](crate::types::PortRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PortRangeBuilder {
    pub(crate) begin: std::option::Option<i32>,
    pub(crate) end: std::option::Option<i32>,
}
impl PortRangeBuilder {
    /// <p>The beginning port in a port range.</p>
    pub fn begin(mut self, input: i32) -> Self {
        self.begin = Some(input);
        self
    }
    /// <p>The beginning port in a port range.</p>
    pub fn set_begin(mut self, input: std::option::Option<i32>) -> Self {
        self.begin = input;
        self
    }
    /// <p>The ending port in a port range.</p>
    pub fn end(mut self, input: i32) -> Self {
        self.end = Some(input);
        self
    }
    /// <p>The ending port in a port range.</p>
    pub fn set_end(mut self, input: std::option::Option<i32>) -> Self {
        self.end = input;
        self
    }
    /// Consumes the builder and constructs a [`PortRange`](crate::types::PortRange).
    pub fn build(self) -> crate::types::PortRange {
        crate::types::PortRange {
            begin: self.begin,
            end: self.end,
        }
    }
}
