// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains details about the metadata for an Amazon ECR resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceScanMetadata {
    /// <p>An object that contains details about the repository an Amazon ECR image resides in.</p>
    #[doc(hidden)]
    pub ecr_repository: std::option::Option<crate::types::EcrRepositoryMetadata>,
    /// <p>An object that contains details about the container metadata for an Amazon ECR image.</p>
    #[doc(hidden)]
    pub ecr_image: std::option::Option<crate::types::EcrContainerImageMetadata>,
    /// <p>An object that contains metadata details for an Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub ec2: std::option::Option<crate::types::Ec2Metadata>,
    /// <p>An object that contains metadata details for an AWS Lambda function.</p>
    #[doc(hidden)]
    pub lambda_function: std::option::Option<crate::types::LambdaFunctionMetadata>,
}
impl ResourceScanMetadata {
    /// <p>An object that contains details about the repository an Amazon ECR image resides in.</p>
    pub fn ecr_repository(&self) -> std::option::Option<&crate::types::EcrRepositoryMetadata> {
        self.ecr_repository.as_ref()
    }
    /// <p>An object that contains details about the container metadata for an Amazon ECR image.</p>
    pub fn ecr_image(&self) -> std::option::Option<&crate::types::EcrContainerImageMetadata> {
        self.ecr_image.as_ref()
    }
    /// <p>An object that contains metadata details for an Amazon EC2 instance.</p>
    pub fn ec2(&self) -> std::option::Option<&crate::types::Ec2Metadata> {
        self.ec2.as_ref()
    }
    /// <p>An object that contains metadata details for an AWS Lambda function.</p>
    pub fn lambda_function(&self) -> std::option::Option<&crate::types::LambdaFunctionMetadata> {
        self.lambda_function.as_ref()
    }
}
impl ResourceScanMetadata {
    /// Creates a new builder-style object to manufacture [`ResourceScanMetadata`](crate::types::ResourceScanMetadata).
    pub fn builder() -> crate::types::builders::ResourceScanMetadataBuilder {
        crate::types::builders::ResourceScanMetadataBuilder::default()
    }
}

/// A builder for [`ResourceScanMetadata`](crate::types::ResourceScanMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceScanMetadataBuilder {
    pub(crate) ecr_repository: std::option::Option<crate::types::EcrRepositoryMetadata>,
    pub(crate) ecr_image: std::option::Option<crate::types::EcrContainerImageMetadata>,
    pub(crate) ec2: std::option::Option<crate::types::Ec2Metadata>,
    pub(crate) lambda_function: std::option::Option<crate::types::LambdaFunctionMetadata>,
}
impl ResourceScanMetadataBuilder {
    /// <p>An object that contains details about the repository an Amazon ECR image resides in.</p>
    pub fn ecr_repository(mut self, input: crate::types::EcrRepositoryMetadata) -> Self {
        self.ecr_repository = Some(input);
        self
    }
    /// <p>An object that contains details about the repository an Amazon ECR image resides in.</p>
    pub fn set_ecr_repository(
        mut self,
        input: std::option::Option<crate::types::EcrRepositoryMetadata>,
    ) -> Self {
        self.ecr_repository = input;
        self
    }
    /// <p>An object that contains details about the container metadata for an Amazon ECR image.</p>
    pub fn ecr_image(mut self, input: crate::types::EcrContainerImageMetadata) -> Self {
        self.ecr_image = Some(input);
        self
    }
    /// <p>An object that contains details about the container metadata for an Amazon ECR image.</p>
    pub fn set_ecr_image(
        mut self,
        input: std::option::Option<crate::types::EcrContainerImageMetadata>,
    ) -> Self {
        self.ecr_image = input;
        self
    }
    /// <p>An object that contains metadata details for an Amazon EC2 instance.</p>
    pub fn ec2(mut self, input: crate::types::Ec2Metadata) -> Self {
        self.ec2 = Some(input);
        self
    }
    /// <p>An object that contains metadata details for an Amazon EC2 instance.</p>
    pub fn set_ec2(mut self, input: std::option::Option<crate::types::Ec2Metadata>) -> Self {
        self.ec2 = input;
        self
    }
    /// <p>An object that contains metadata details for an AWS Lambda function.</p>
    pub fn lambda_function(mut self, input: crate::types::LambdaFunctionMetadata) -> Self {
        self.lambda_function = Some(input);
        self
    }
    /// <p>An object that contains metadata details for an AWS Lambda function.</p>
    pub fn set_lambda_function(
        mut self,
        input: std::option::Option<crate::types::LambdaFunctionMetadata>,
    ) -> Self {
        self.lambda_function = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceScanMetadata`](crate::types::ResourceScanMetadata).
    pub fn build(self) -> crate::types::ResourceScanMetadata {
        crate::types::ResourceScanMetadata {
            ecr_repository: self.ecr_repository,
            ecr_image: self.ecr_image,
            ec2: self.ec2,
            lambda_function: self.lambda_function,
        }
    }
}
