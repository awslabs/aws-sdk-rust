// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A response that contains the results of an AWS Lambda function layer finding aggregation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LambdaLayerAggregationResponse {
    /// <p>The names of the AWS Lambda functions associated with the layers.</p>
    #[doc(hidden)]
    pub function_name: std::option::Option<std::string::String>,
    /// <p>The Resource ID of the AWS Lambda function layer.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the AWS Lambda function layer.</p>
    #[doc(hidden)]
    pub layer_arn: std::option::Option<std::string::String>,
    /// <p>The account ID of the AWS Lambda function layer.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>An object that contains the counts of aggregated finding per severity.</p>
    #[doc(hidden)]
    pub severity_counts: std::option::Option<crate::types::SeverityCounts>,
}
impl LambdaLayerAggregationResponse {
    /// <p>The names of the AWS Lambda functions associated with the layers.</p>
    pub fn function_name(&self) -> std::option::Option<&str> {
        self.function_name.as_deref()
    }
    /// <p>The Resource ID of the AWS Lambda function layer.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Lambda function layer.</p>
    pub fn layer_arn(&self) -> std::option::Option<&str> {
        self.layer_arn.as_deref()
    }
    /// <p>The account ID of the AWS Lambda function layer.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>An object that contains the counts of aggregated finding per severity.</p>
    pub fn severity_counts(&self) -> std::option::Option<&crate::types::SeverityCounts> {
        self.severity_counts.as_ref()
    }
}
impl LambdaLayerAggregationResponse {
    /// Creates a new builder-style object to manufacture [`LambdaLayerAggregationResponse`](crate::types::LambdaLayerAggregationResponse).
    pub fn builder() -> crate::types::builders::LambdaLayerAggregationResponseBuilder {
        crate::types::builders::LambdaLayerAggregationResponseBuilder::default()
    }
}

/// A builder for [`LambdaLayerAggregationResponse`](crate::types::LambdaLayerAggregationResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LambdaLayerAggregationResponseBuilder {
    pub(crate) function_name: std::option::Option<std::string::String>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) layer_arn: std::option::Option<std::string::String>,
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) severity_counts: std::option::Option<crate::types::SeverityCounts>,
}
impl LambdaLayerAggregationResponseBuilder {
    /// <p>The names of the AWS Lambda functions associated with the layers.</p>
    pub fn function_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.function_name = Some(input.into());
        self
    }
    /// <p>The names of the AWS Lambda functions associated with the layers.</p>
    pub fn set_function_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.function_name = input;
        self
    }
    /// <p>The Resource ID of the AWS Lambda function layer.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The Resource ID of the AWS Lambda function layer.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Lambda function layer.</p>
    pub fn layer_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.layer_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Lambda function layer.</p>
    pub fn set_layer_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.layer_arn = input;
        self
    }
    /// <p>The account ID of the AWS Lambda function layer.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The account ID of the AWS Lambda function layer.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>An object that contains the counts of aggregated finding per severity.</p>
    pub fn severity_counts(mut self, input: crate::types::SeverityCounts) -> Self {
        self.severity_counts = Some(input);
        self
    }
    /// <p>An object that contains the counts of aggregated finding per severity.</p>
    pub fn set_severity_counts(
        mut self,
        input: std::option::Option<crate::types::SeverityCounts>,
    ) -> Self {
        self.severity_counts = input;
        self
    }
    /// Consumes the builder and constructs a [`LambdaLayerAggregationResponse`](crate::types::LambdaLayerAggregationResponse).
    pub fn build(self) -> crate::types::LambdaLayerAggregationResponse {
        crate::types::LambdaLayerAggregationResponse {
            function_name: self.function_name,
            resource_id: self.resource_id,
            layer_arn: self.layer_arn,
            account_id: self.account_id,
            severity_counts: self.severity_counts,
        }
    }
}
