// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A response that contains the results of a finding aggregation by image layer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageLayerAggregationResponse {
    /// <p>The repository the layer resides in.</p>
    pub repository: ::std::string::String,
    /// <p>The resource ID of the container image layer.</p>
    pub resource_id: ::std::string::String,
    /// <p>The layer hash.</p>
    pub layer_hash: ::std::string::String,
    /// <p>The ID of the Amazon Web Services account that owns the container image hosting the layer image.</p>
    pub account_id: ::std::string::String,
    /// <p>An object that represents the count of matched findings per severity.</p>
    pub severity_counts: ::std::option::Option<crate::types::SeverityCounts>,
}
impl ImageLayerAggregationResponse {
    /// <p>The repository the layer resides in.</p>
    pub fn repository(&self) -> &str {
        use std::ops::Deref;
        self.repository.deref()
    }
    /// <p>The resource ID of the container image layer.</p>
    pub fn resource_id(&self) -> &str {
        use std::ops::Deref;
        self.resource_id.deref()
    }
    /// <p>The layer hash.</p>
    pub fn layer_hash(&self) -> &str {
        use std::ops::Deref;
        self.layer_hash.deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the container image hosting the layer image.</p>
    pub fn account_id(&self) -> &str {
        use std::ops::Deref;
        self.account_id.deref()
    }
    /// <p>An object that represents the count of matched findings per severity.</p>
    pub fn severity_counts(&self) -> ::std::option::Option<&crate::types::SeverityCounts> {
        self.severity_counts.as_ref()
    }
}
impl ImageLayerAggregationResponse {
    /// Creates a new builder-style object to manufacture [`ImageLayerAggregationResponse`](crate::types::ImageLayerAggregationResponse).
    pub fn builder() -> crate::types::builders::ImageLayerAggregationResponseBuilder {
        crate::types::builders::ImageLayerAggregationResponseBuilder::default()
    }
}

/// A builder for [`ImageLayerAggregationResponse`](crate::types::ImageLayerAggregationResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImageLayerAggregationResponseBuilder {
    pub(crate) repository: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) layer_hash: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) severity_counts: ::std::option::Option<crate::types::SeverityCounts>,
}
impl ImageLayerAggregationResponseBuilder {
    /// <p>The repository the layer resides in.</p>
    /// This field is required.
    pub fn repository(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The repository the layer resides in.</p>
    pub fn set_repository(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository = input;
        self
    }
    /// <p>The repository the layer resides in.</p>
    pub fn get_repository(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository
    }
    /// <p>The resource ID of the container image layer.</p>
    /// This field is required.
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource ID of the container image layer.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The resource ID of the container image layer.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The layer hash.</p>
    /// This field is required.
    pub fn layer_hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.layer_hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The layer hash.</p>
    pub fn set_layer_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.layer_hash = input;
        self
    }
    /// <p>The layer hash.</p>
    pub fn get_layer_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.layer_hash
    }
    /// <p>The ID of the Amazon Web Services account that owns the container image hosting the layer image.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the container image hosting the layer image.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the container image hosting the layer image.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>An object that represents the count of matched findings per severity.</p>
    pub fn severity_counts(mut self, input: crate::types::SeverityCounts) -> Self {
        self.severity_counts = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that represents the count of matched findings per severity.</p>
    pub fn set_severity_counts(mut self, input: ::std::option::Option<crate::types::SeverityCounts>) -> Self {
        self.severity_counts = input;
        self
    }
    /// <p>An object that represents the count of matched findings per severity.</p>
    pub fn get_severity_counts(&self) -> &::std::option::Option<crate::types::SeverityCounts> {
        &self.severity_counts
    }
    /// Consumes the builder and constructs a [`ImageLayerAggregationResponse`](crate::types::ImageLayerAggregationResponse).
    /// This method will fail if any of the following fields are not set:
    /// - [`repository`](crate::types::builders::ImageLayerAggregationResponseBuilder::repository)
    /// - [`resource_id`](crate::types::builders::ImageLayerAggregationResponseBuilder::resource_id)
    /// - [`layer_hash`](crate::types::builders::ImageLayerAggregationResponseBuilder::layer_hash)
    /// - [`account_id`](crate::types::builders::ImageLayerAggregationResponseBuilder::account_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ImageLayerAggregationResponse, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImageLayerAggregationResponse {
            repository: self.repository.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "repository",
                    "repository was not specified but it is required when building ImageLayerAggregationResponse",
                )
            })?,
            resource_id: self.resource_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_id",
                    "resource_id was not specified but it is required when building ImageLayerAggregationResponse",
                )
            })?,
            layer_hash: self.layer_hash.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "layer_hash",
                    "layer_hash was not specified but it is required when building ImageLayerAggregationResponse",
                )
            })?,
            account_id: self.account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "account_id",
                    "account_id was not specified but it is required when building ImageLayerAggregationResponse",
                )
            })?,
            severity_counts: self.severity_counts,
        })
    }
}
