// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `PackageManager`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let packagemanager = unimplemented!();
/// match packagemanager {
///     PackageManager::Bundler => { /* ... */ },
///     PackageManager::Cargo => { /* ... */ },
///     PackageManager::Composer => { /* ... */ },
///     PackageManager::Gobinary => { /* ... */ },
///     PackageManager::Gomod => { /* ... */ },
///     PackageManager::Jar => { /* ... */ },
///     PackageManager::Nodepkg => { /* ... */ },
///     PackageManager::Npm => { /* ... */ },
///     PackageManager::Nuget => { /* ... */ },
///     PackageManager::Os => { /* ... */ },
///     PackageManager::Pip => { /* ... */ },
///     PackageManager::Pipenv => { /* ... */ },
///     PackageManager::Poetry => { /* ... */ },
///     PackageManager::Pom => { /* ... */ },
///     PackageManager::Pythonpkg => { /* ... */ },
///     PackageManager::Yarn => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `packagemanager` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `PackageManager::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `PackageManager::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `PackageManager::NewFeature` is defined.
/// Specifically, when `packagemanager` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `PackageManager::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum PackageManager {
    #[allow(missing_docs)] // documentation missing in model
    Bundler,
    #[allow(missing_docs)] // documentation missing in model
    Cargo,
    #[allow(missing_docs)] // documentation missing in model
    Composer,
    #[allow(missing_docs)] // documentation missing in model
    Gobinary,
    #[allow(missing_docs)] // documentation missing in model
    Gomod,
    #[allow(missing_docs)] // documentation missing in model
    Jar,
    #[allow(missing_docs)] // documentation missing in model
    Nodepkg,
    #[allow(missing_docs)] // documentation missing in model
    Npm,
    #[allow(missing_docs)] // documentation missing in model
    Nuget,
    #[allow(missing_docs)] // documentation missing in model
    Os,
    #[allow(missing_docs)] // documentation missing in model
    Pip,
    #[allow(missing_docs)] // documentation missing in model
    Pipenv,
    #[allow(missing_docs)] // documentation missing in model
    Poetry,
    #[allow(missing_docs)] // documentation missing in model
    Pom,
    #[allow(missing_docs)] // documentation missing in model
    Pythonpkg,
    #[allow(missing_docs)] // documentation missing in model
    Yarn,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for PackageManager {
    fn from(s: &str) -> Self {
        match s {
            "BUNDLER" => PackageManager::Bundler,
            "CARGO" => PackageManager::Cargo,
            "COMPOSER" => PackageManager::Composer,
            "GOBINARY" => PackageManager::Gobinary,
            "GOMOD" => PackageManager::Gomod,
            "JAR" => PackageManager::Jar,
            "NODEPKG" => PackageManager::Nodepkg,
            "NPM" => PackageManager::Npm,
            "NUGET" => PackageManager::Nuget,
            "OS" => PackageManager::Os,
            "PIP" => PackageManager::Pip,
            "PIPENV" => PackageManager::Pipenv,
            "POETRY" => PackageManager::Poetry,
            "POM" => PackageManager::Pom,
            "PYTHONPKG" => PackageManager::Pythonpkg,
            "YARN" => PackageManager::Yarn,
            other => {
                PackageManager::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for PackageManager {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(PackageManager::from(s))
    }
}
impl PackageManager {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            PackageManager::Bundler => "BUNDLER",
            PackageManager::Cargo => "CARGO",
            PackageManager::Composer => "COMPOSER",
            PackageManager::Gobinary => "GOBINARY",
            PackageManager::Gomod => "GOMOD",
            PackageManager::Jar => "JAR",
            PackageManager::Nodepkg => "NODEPKG",
            PackageManager::Npm => "NPM",
            PackageManager::Nuget => "NUGET",
            PackageManager::Os => "OS",
            PackageManager::Pip => "PIP",
            PackageManager::Pipenv => "PIPENV",
            PackageManager::Poetry => "POETRY",
            PackageManager::Pom => "POM",
            PackageManager::Pythonpkg => "PYTHONPKG",
            PackageManager::Yarn => "YARN",
            PackageManager::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BUNDLER",
            "CARGO",
            "COMPOSER",
            "GOBINARY",
            "GOMOD",
            "JAR",
            "NODEPKG",
            "NPM",
            "NUGET",
            "OS",
            "PIP",
            "PIPENV",
            "POETRY",
            "POM",
            "PYTHONPKG",
            "YARN",
        ]
    }
}
impl AsRef<str> for PackageManager {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
