// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Filter {
    /// <p>The Amazon Resource Number (ARN) associated with this filter.</p>
    pub arn: ::std::string::String,
    /// <p>The Amazon Web Services account ID of the account that created the filter.</p>
    pub owner_id: ::std::string::String,
    /// <p>The name of the filter.</p>
    pub name: ::std::string::String,
    /// <p>Details on the filter criteria associated with this filter.</p>
    pub criteria: ::std::option::Option<crate::types::FilterCriteria>,
    /// <p>The action that is to be applied to the findings that match the filter.</p>
    pub action: crate::types::FilterAction,
    /// <p>The date and time this filter was created at.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The date and time the filter was last updated at.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>A description of the filter.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The reason for the filter.</p>
    pub reason: ::std::option::Option<::std::string::String>,
    /// <p>The tags attached to the filter.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl Filter {
    /// <p>The Amazon Resource Number (ARN) associated with this filter.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The Amazon Web Services account ID of the account that created the filter.</p>
    pub fn owner_id(&self) -> &str {
        use std::ops::Deref;
        self.owner_id.deref()
    }
    /// <p>The name of the filter.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Details on the filter criteria associated with this filter.</p>
    pub fn criteria(&self) -> ::std::option::Option<&crate::types::FilterCriteria> {
        self.criteria.as_ref()
    }
    /// <p>The action that is to be applied to the findings that match the filter.</p>
    pub fn action(&self) -> &crate::types::FilterAction {
        &self.action
    }
    /// <p>The date and time this filter was created at.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The date and time the filter was last updated at.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>A description of the filter.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The reason for the filter.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>The tags attached to the filter.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl Filter {
    /// Creates a new builder-style object to manufacture [`Filter`](crate::types::Filter).
    pub fn builder() -> crate::types::builders::FilterBuilder {
        crate::types::builders::FilterBuilder::default()
    }
}

/// A builder for [`Filter`](crate::types::Filter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilterBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) criteria: ::std::option::Option<crate::types::FilterCriteria>,
    pub(crate) action: ::std::option::Option<crate::types::FilterAction>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl FilterBuilder {
    /// <p>The Amazon Resource Number (ARN) associated with this filter.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) associated with this filter.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) associated with this filter.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The Amazon Web Services account ID of the account that created the filter.</p>
    /// This field is required.
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the account that created the filter.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the account that created the filter.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The name of the filter.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the filter.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the filter.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Details on the filter criteria associated with this filter.</p>
    /// This field is required.
    pub fn criteria(mut self, input: crate::types::FilterCriteria) -> Self {
        self.criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details on the filter criteria associated with this filter.</p>
    pub fn set_criteria(mut self, input: ::std::option::Option<crate::types::FilterCriteria>) -> Self {
        self.criteria = input;
        self
    }
    /// <p>Details on the filter criteria associated with this filter.</p>
    pub fn get_criteria(&self) -> &::std::option::Option<crate::types::FilterCriteria> {
        &self.criteria
    }
    /// <p>The action that is to be applied to the findings that match the filter.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::FilterAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action that is to be applied to the findings that match the filter.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::FilterAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action that is to be applied to the findings that match the filter.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::FilterAction> {
        &self.action
    }
    /// <p>The date and time this filter was created at.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time this filter was created at.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time this filter was created at.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time the filter was last updated at.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the filter was last updated at.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time the filter was last updated at.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>A description of the filter.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the filter.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the filter.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The reason for the filter.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the filter.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason for the filter.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags attached to the filter.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags attached to the filter.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags attached to the filter.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`Filter`](crate::types::Filter).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::FilterBuilder::arn)
    /// - [`owner_id`](crate::types::builders::FilterBuilder::owner_id)
    /// - [`name`](crate::types::builders::FilterBuilder::name)
    /// - [`action`](crate::types::builders::FilterBuilder::action)
    /// - [`created_at`](crate::types::builders::FilterBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::FilterBuilder::updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::Filter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Filter {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building Filter",
                )
            })?,
            owner_id: self.owner_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner_id",
                    "owner_id was not specified but it is required when building Filter",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Filter",
                )
            })?,
            criteria: self.criteria,
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building Filter",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building Filter",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building Filter",
                )
            })?,
            description: self.description,
            reason: self.reason,
            tags: self.tags,
        })
    }
}
