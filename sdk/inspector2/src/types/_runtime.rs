// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Runtime`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let runtime = unimplemented!();
/// match runtime {
///     Runtime::Dotnetcore31 => { /* ... */ },
///     Runtime::Dotnet6 => { /* ... */ },
///     Runtime::Dotnet7 => { /* ... */ },
///     Runtime::Go1X => { /* ... */ },
///     Runtime::Java11 => { /* ... */ },
///     Runtime::Java17 => { /* ... */ },
///     Runtime::Java8 => { /* ... */ },
///     Runtime::Java8Al2 => { /* ... */ },
///     Runtime::Nodejs => { /* ... */ },
///     Runtime::Nodejs12X => { /* ... */ },
///     Runtime::Nodejs14X => { /* ... */ },
///     Runtime::Nodejs16X => { /* ... */ },
///     Runtime::Nodejs18X => { /* ... */ },
///     Runtime::Python310 => { /* ... */ },
///     Runtime::Python311 => { /* ... */ },
///     Runtime::Python37 => { /* ... */ },
///     Runtime::Python38 => { /* ... */ },
///     Runtime::Python39 => { /* ... */ },
///     Runtime::Ruby27 => { /* ... */ },
///     Runtime::Ruby32 => { /* ... */ },
///     Runtime::Unsupported => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `runtime` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Runtime::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Runtime::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Runtime::NewFeature` is defined.
/// Specifically, when `runtime` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Runtime::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum Runtime {
    #[allow(missing_docs)] // documentation missing in model
    Dotnetcore31,
    #[allow(missing_docs)] // documentation missing in model
    Dotnet6,
    #[allow(missing_docs)] // documentation missing in model
    Dotnet7,
    #[allow(missing_docs)] // documentation missing in model
    Go1X,
    #[allow(missing_docs)] // documentation missing in model
    Java11,
    #[allow(missing_docs)] // documentation missing in model
    Java17,
    #[allow(missing_docs)] // documentation missing in model
    Java8,
    #[allow(missing_docs)] // documentation missing in model
    Java8Al2,
    #[allow(missing_docs)] // documentation missing in model
    Nodejs,
    #[allow(missing_docs)] // documentation missing in model
    Nodejs12X,
    #[allow(missing_docs)] // documentation missing in model
    Nodejs14X,
    #[allow(missing_docs)] // documentation missing in model
    Nodejs16X,
    #[allow(missing_docs)] // documentation missing in model
    Nodejs18X,
    #[allow(missing_docs)] // documentation missing in model
    Python310,
    #[allow(missing_docs)] // documentation missing in model
    Python311,
    #[allow(missing_docs)] // documentation missing in model
    Python37,
    #[allow(missing_docs)] // documentation missing in model
    Python38,
    #[allow(missing_docs)] // documentation missing in model
    Python39,
    #[allow(missing_docs)] // documentation missing in model
    Ruby27,
    #[allow(missing_docs)] // documentation missing in model
    Ruby32,
    #[allow(missing_docs)] // documentation missing in model
    Unsupported,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for Runtime {
    fn from(s: &str) -> Self {
        match s {
            "DOTNETCORE_3_1" => Runtime::Dotnetcore31,
            "DOTNET_6" => Runtime::Dotnet6,
            "DOTNET_7" => Runtime::Dotnet7,
            "GO_1_X" => Runtime::Go1X,
            "JAVA_11" => Runtime::Java11,
            "JAVA_17" => Runtime::Java17,
            "JAVA_8" => Runtime::Java8,
            "JAVA_8_AL2" => Runtime::Java8Al2,
            "NODEJS" => Runtime::Nodejs,
            "NODEJS_12_X" => Runtime::Nodejs12X,
            "NODEJS_14_X" => Runtime::Nodejs14X,
            "NODEJS_16_X" => Runtime::Nodejs16X,
            "NODEJS_18_X" => Runtime::Nodejs18X,
            "PYTHON_3_10" => Runtime::Python310,
            "PYTHON_3_11" => Runtime::Python311,
            "PYTHON_3_7" => Runtime::Python37,
            "PYTHON_3_8" => Runtime::Python38,
            "PYTHON_3_9" => Runtime::Python39,
            "RUBY_2_7" => Runtime::Ruby27,
            "RUBY_3_2" => Runtime::Ruby32,
            "UNSUPPORTED" => Runtime::Unsupported,
            other => Runtime::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for Runtime {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(Runtime::from(s))
    }
}
impl Runtime {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Runtime::Dotnetcore31 => "DOTNETCORE_3_1",
            Runtime::Dotnet6 => "DOTNET_6",
            Runtime::Dotnet7 => "DOTNET_7",
            Runtime::Go1X => "GO_1_X",
            Runtime::Java11 => "JAVA_11",
            Runtime::Java17 => "JAVA_17",
            Runtime::Java8 => "JAVA_8",
            Runtime::Java8Al2 => "JAVA_8_AL2",
            Runtime::Nodejs => "NODEJS",
            Runtime::Nodejs12X => "NODEJS_12_X",
            Runtime::Nodejs14X => "NODEJS_14_X",
            Runtime::Nodejs16X => "NODEJS_16_X",
            Runtime::Nodejs18X => "NODEJS_18_X",
            Runtime::Python310 => "PYTHON_3_10",
            Runtime::Python311 => "PYTHON_3_11",
            Runtime::Python37 => "PYTHON_3_7",
            Runtime::Python38 => "PYTHON_3_8",
            Runtime::Python39 => "PYTHON_3_9",
            Runtime::Ruby27 => "RUBY_2_7",
            Runtime::Ruby32 => "RUBY_3_2",
            Runtime::Unsupported => "UNSUPPORTED",
            Runtime::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "DOTNETCORE_3_1",
            "DOTNET_6",
            "DOTNET_7",
            "GO_1_X",
            "JAVA_11",
            "JAVA_17",
            "JAVA_8",
            "JAVA_8_AL2",
            "NODEJS",
            "NODEJS_12_X",
            "NODEJS_14_X",
            "NODEJS_16_X",
            "NODEJS_18_X",
            "PYTHON_3_10",
            "PYTHON_3_11",
            "PYTHON_3_7",
            "PYTHON_3_8",
            "PYTHON_3_9",
            "RUBY_2_7",
            "RUBY_3_2",
            "UNSUPPORTED",
        ]
    }
}
impl ::std::convert::AsRef<str> for Runtime {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl Runtime {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for Runtime {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Runtime::Dotnetcore31 => write!(f, "DOTNETCORE_3_1"),
            Runtime::Dotnet6 => write!(f, "DOTNET_6"),
            Runtime::Dotnet7 => write!(f, "DOTNET_7"),
            Runtime::Go1X => write!(f, "GO_1_X"),
            Runtime::Java11 => write!(f, "JAVA_11"),
            Runtime::Java17 => write!(f, "JAVA_17"),
            Runtime::Java8 => write!(f, "JAVA_8"),
            Runtime::Java8Al2 => write!(f, "JAVA_8_AL2"),
            Runtime::Nodejs => write!(f, "NODEJS"),
            Runtime::Nodejs12X => write!(f, "NODEJS_12_X"),
            Runtime::Nodejs14X => write!(f, "NODEJS_14_X"),
            Runtime::Nodejs16X => write!(f, "NODEJS_16_X"),
            Runtime::Nodejs18X => write!(f, "NODEJS_18_X"),
            Runtime::Python310 => write!(f, "PYTHON_3_10"),
            Runtime::Python311 => write!(f, "PYTHON_3_11"),
            Runtime::Python37 => write!(f, "PYTHON_3_7"),
            Runtime::Python38 => write!(f, "PYTHON_3_8"),
            Runtime::Python39 => write!(f, "PYTHON_3_9"),
            Runtime::Ruby27 => write!(f, "RUBY_2_7"),
            Runtime::Ruby32 => write!(f, "RUBY_3_2"),
            Runtime::Unsupported => write!(f, "UNSUPPORTED"),
            Runtime::Unknown(value) => write!(f, "{value}"),
        }
    }
}
