// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about the Amazon Inspector free trial for an account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FreeTrialInfo {
    /// <p>The type of scan covered by the Amazon Inspector free trail.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::FreeTrialType>,
    /// <p>The date and time that the Amazon Inspector free trail started for a given account.</p>
    #[doc(hidden)]
    pub start: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the Amazon Inspector free trail ends for a given account.</p>
    #[doc(hidden)]
    pub end: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The order to sort results by.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::FreeTrialStatus>,
}
impl FreeTrialInfo {
    /// <p>The type of scan covered by the Amazon Inspector free trail.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::FreeTrialType> {
        self.r#type.as_ref()
    }
    /// <p>The date and time that the Amazon Inspector free trail started for a given account.</p>
    pub fn start(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start.as_ref()
    }
    /// <p>The date and time that the Amazon Inspector free trail ends for a given account.</p>
    pub fn end(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end.as_ref()
    }
    /// <p>The order to sort results by.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::FreeTrialStatus> {
        self.status.as_ref()
    }
}
impl FreeTrialInfo {
    /// Creates a new builder-style object to manufacture [`FreeTrialInfo`](crate::types::FreeTrialInfo).
    pub fn builder() -> crate::types::builders::FreeTrialInfoBuilder {
        crate::types::builders::FreeTrialInfoBuilder::default()
    }
}

/// A builder for [`FreeTrialInfo`](crate::types::FreeTrialInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FreeTrialInfoBuilder {
    pub(crate) r#type: std::option::Option<crate::types::FreeTrialType>,
    pub(crate) start: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::FreeTrialStatus>,
}
impl FreeTrialInfoBuilder {
    /// <p>The type of scan covered by the Amazon Inspector free trail.</p>
    pub fn r#type(mut self, input: crate::types::FreeTrialType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of scan covered by the Amazon Inspector free trail.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::FreeTrialType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The date and time that the Amazon Inspector free trail started for a given account.</p>
    pub fn start(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start = Some(input);
        self
    }
    /// <p>The date and time that the Amazon Inspector free trail started for a given account.</p>
    pub fn set_start(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.start = input;
        self
    }
    /// <p>The date and time that the Amazon Inspector free trail ends for a given account.</p>
    pub fn end(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end = Some(input);
        self
    }
    /// <p>The date and time that the Amazon Inspector free trail ends for a given account.</p>
    pub fn set_end(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end = input;
        self
    }
    /// <p>The order to sort results by.</p>
    pub fn status(mut self, input: crate::types::FreeTrialStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The order to sort results by.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::FreeTrialStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`FreeTrialInfo`](crate::types::FreeTrialInfo).
    pub fn build(self) -> crate::types::FreeTrialInfo {
        crate::types::FreeTrialInfo {
            r#type: self.r#type,
            start: self.start,
            end: self.end,
            status: self.status,
        }
    }
}
