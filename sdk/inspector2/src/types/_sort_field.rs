// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `SortField`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let sortfield = unimplemented!();
/// match sortfield {
///     SortField::AwsAccountId => { /* ... */ },
///     SortField::ComponentType => { /* ... */ },
///     SortField::EcrImagePushedAt => { /* ... */ },
///     SortField::EcrImageRegistry => { /* ... */ },
///     SortField::EcrImageRepositoryName => { /* ... */ },
///     SortField::FindingStatus => { /* ... */ },
///     SortField::FindingType => { /* ... */ },
///     SortField::FirstObservedAt => { /* ... */ },
///     SortField::InspectorScore => { /* ... */ },
///     SortField::LastObservedAt => { /* ... */ },
///     SortField::NetworkProtocol => { /* ... */ },
///     SortField::ResourceType => { /* ... */ },
///     SortField::Severity => { /* ... */ },
///     SortField::VendorSeverity => { /* ... */ },
///     SortField::VulnerabilityId => { /* ... */ },
///     SortField::VulnerabilitySource => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `sortfield` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `SortField::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `SortField::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `SortField::NewFeature` is defined.
/// Specifically, when `sortfield` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `SortField::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum SortField {
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountId,
    #[allow(missing_docs)] // documentation missing in model
    ComponentType,
    #[allow(missing_docs)] // documentation missing in model
    EcrImagePushedAt,
    #[allow(missing_docs)] // documentation missing in model
    EcrImageRegistry,
    #[allow(missing_docs)] // documentation missing in model
    EcrImageRepositoryName,
    #[allow(missing_docs)] // documentation missing in model
    FindingStatus,
    #[allow(missing_docs)] // documentation missing in model
    FindingType,
    #[allow(missing_docs)] // documentation missing in model
    FirstObservedAt,
    #[allow(missing_docs)] // documentation missing in model
    InspectorScore,
    #[allow(missing_docs)] // documentation missing in model
    LastObservedAt,
    #[allow(missing_docs)] // documentation missing in model
    NetworkProtocol,
    #[allow(missing_docs)] // documentation missing in model
    ResourceType,
    #[allow(missing_docs)] // documentation missing in model
    Severity,
    #[allow(missing_docs)] // documentation missing in model
    VendorSeverity,
    #[allow(missing_docs)] // documentation missing in model
    VulnerabilityId,
    #[allow(missing_docs)] // documentation missing in model
    VulnerabilitySource,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for SortField {
    fn from(s: &str) -> Self {
        match s {
            "AWS_ACCOUNT_ID" => SortField::AwsAccountId,
            "COMPONENT_TYPE" => SortField::ComponentType,
            "ECR_IMAGE_PUSHED_AT" => SortField::EcrImagePushedAt,
            "ECR_IMAGE_REGISTRY" => SortField::EcrImageRegistry,
            "ECR_IMAGE_REPOSITORY_NAME" => SortField::EcrImageRepositoryName,
            "FINDING_STATUS" => SortField::FindingStatus,
            "FINDING_TYPE" => SortField::FindingType,
            "FIRST_OBSERVED_AT" => SortField::FirstObservedAt,
            "INSPECTOR_SCORE" => SortField::InspectorScore,
            "LAST_OBSERVED_AT" => SortField::LastObservedAt,
            "NETWORK_PROTOCOL" => SortField::NetworkProtocol,
            "RESOURCE_TYPE" => SortField::ResourceType,
            "SEVERITY" => SortField::Severity,
            "VENDOR_SEVERITY" => SortField::VendorSeverity,
            "VULNERABILITY_ID" => SortField::VulnerabilityId,
            "VULNERABILITY_SOURCE" => SortField::VulnerabilitySource,
            other => SortField::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for SortField {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(SortField::from(s))
    }
}
impl SortField {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            SortField::AwsAccountId => "AWS_ACCOUNT_ID",
            SortField::ComponentType => "COMPONENT_TYPE",
            SortField::EcrImagePushedAt => "ECR_IMAGE_PUSHED_AT",
            SortField::EcrImageRegistry => "ECR_IMAGE_REGISTRY",
            SortField::EcrImageRepositoryName => "ECR_IMAGE_REPOSITORY_NAME",
            SortField::FindingStatus => "FINDING_STATUS",
            SortField::FindingType => "FINDING_TYPE",
            SortField::FirstObservedAt => "FIRST_OBSERVED_AT",
            SortField::InspectorScore => "INSPECTOR_SCORE",
            SortField::LastObservedAt => "LAST_OBSERVED_AT",
            SortField::NetworkProtocol => "NETWORK_PROTOCOL",
            SortField::ResourceType => "RESOURCE_TYPE",
            SortField::Severity => "SEVERITY",
            SortField::VendorSeverity => "VENDOR_SEVERITY",
            SortField::VulnerabilityId => "VULNERABILITY_ID",
            SortField::VulnerabilitySource => "VULNERABILITY_SOURCE",
            SortField::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AWS_ACCOUNT_ID",
            "COMPONENT_TYPE",
            "ECR_IMAGE_PUSHED_AT",
            "ECR_IMAGE_REGISTRY",
            "ECR_IMAGE_REPOSITORY_NAME",
            "FINDING_STATUS",
            "FINDING_TYPE",
            "FIRST_OBSERVED_AT",
            "INSPECTOR_SCORE",
            "LAST_OBSERVED_AT",
            "NETWORK_PROTOCOL",
            "RESOURCE_TYPE",
            "SEVERITY",
            "VENDOR_SEVERITY",
            "VULNERABILITY_ID",
            "VULNERABILITY_SOURCE",
        ]
    }
}
impl AsRef<str> for SortField {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
