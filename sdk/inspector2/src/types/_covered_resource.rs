// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains details about a resource covered by Amazon Inspector.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CoveredResource {
    /// <p>The type of the covered resource.</p>
    pub resource_type: crate::types::CoverageResourceType,
    /// <p>The ID of the covered resource.</p>
    pub resource_id: ::std::string::String,
    /// <p>The Amazon Web Services account ID of the covered resource.</p>
    pub account_id: ::std::string::String,
    /// <p>The Amazon Inspector scan type covering the resource.</p>
    pub scan_type: crate::types::ScanType,
    /// <p>The status of the scan covering the resource.</p>
    pub scan_status: ::std::option::Option<crate::types::ScanStatus>,
    /// <p>An object that contains details about the metadata.</p>
    pub resource_metadata: ::std::option::Option<crate::types::ResourceScanMetadata>,
    /// <p>The date and time the resource was last checked for vulnerabilities.</p>
    pub last_scanned_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CoveredResource {
    /// <p>The type of the covered resource.</p>
    pub fn resource_type(&self) -> &crate::types::CoverageResourceType {
        &self.resource_type
    }
    /// <p>The ID of the covered resource.</p>
    pub fn resource_id(&self) -> &str {
        use std::ops::Deref;
        self.resource_id.deref()
    }
    /// <p>The Amazon Web Services account ID of the covered resource.</p>
    pub fn account_id(&self) -> &str {
        use std::ops::Deref;
        self.account_id.deref()
    }
    /// <p>The Amazon Inspector scan type covering the resource.</p>
    pub fn scan_type(&self) -> &crate::types::ScanType {
        &self.scan_type
    }
    /// <p>The status of the scan covering the resource.</p>
    pub fn scan_status(&self) -> ::std::option::Option<&crate::types::ScanStatus> {
        self.scan_status.as_ref()
    }
    /// <p>An object that contains details about the metadata.</p>
    pub fn resource_metadata(&self) -> ::std::option::Option<&crate::types::ResourceScanMetadata> {
        self.resource_metadata.as_ref()
    }
    /// <p>The date and time the resource was last checked for vulnerabilities.</p>
    pub fn last_scanned_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_scanned_at.as_ref()
    }
}
impl CoveredResource {
    /// Creates a new builder-style object to manufacture [`CoveredResource`](crate::types::CoveredResource).
    pub fn builder() -> crate::types::builders::CoveredResourceBuilder {
        crate::types::builders::CoveredResourceBuilder::default()
    }
}

/// A builder for [`CoveredResource`](crate::types::CoveredResource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CoveredResourceBuilder {
    pub(crate) resource_type: ::std::option::Option<crate::types::CoverageResourceType>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) scan_type: ::std::option::Option<crate::types::ScanType>,
    pub(crate) scan_status: ::std::option::Option<crate::types::ScanStatus>,
    pub(crate) resource_metadata: ::std::option::Option<crate::types::ResourceScanMetadata>,
    pub(crate) last_scanned_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CoveredResourceBuilder {
    /// <p>The type of the covered resource.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: crate::types::CoverageResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the covered resource.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::CoverageResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of the covered resource.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::CoverageResourceType> {
        &self.resource_type
    }
    /// <p>The ID of the covered resource.</p>
    /// This field is required.
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the covered resource.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The ID of the covered resource.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The Amazon Web Services account ID of the covered resource.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the covered resource.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the covered resource.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The Amazon Inspector scan type covering the resource.</p>
    /// This field is required.
    pub fn scan_type(mut self, input: crate::types::ScanType) -> Self {
        self.scan_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Inspector scan type covering the resource.</p>
    pub fn set_scan_type(mut self, input: ::std::option::Option<crate::types::ScanType>) -> Self {
        self.scan_type = input;
        self
    }
    /// <p>The Amazon Inspector scan type covering the resource.</p>
    pub fn get_scan_type(&self) -> &::std::option::Option<crate::types::ScanType> {
        &self.scan_type
    }
    /// <p>The status of the scan covering the resource.</p>
    pub fn scan_status(mut self, input: crate::types::ScanStatus) -> Self {
        self.scan_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the scan covering the resource.</p>
    pub fn set_scan_status(mut self, input: ::std::option::Option<crate::types::ScanStatus>) -> Self {
        self.scan_status = input;
        self
    }
    /// <p>The status of the scan covering the resource.</p>
    pub fn get_scan_status(&self) -> &::std::option::Option<crate::types::ScanStatus> {
        &self.scan_status
    }
    /// <p>An object that contains details about the metadata.</p>
    pub fn resource_metadata(mut self, input: crate::types::ResourceScanMetadata) -> Self {
        self.resource_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains details about the metadata.</p>
    pub fn set_resource_metadata(mut self, input: ::std::option::Option<crate::types::ResourceScanMetadata>) -> Self {
        self.resource_metadata = input;
        self
    }
    /// <p>An object that contains details about the metadata.</p>
    pub fn get_resource_metadata(&self) -> &::std::option::Option<crate::types::ResourceScanMetadata> {
        &self.resource_metadata
    }
    /// <p>The date and time the resource was last checked for vulnerabilities.</p>
    pub fn last_scanned_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_scanned_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was last checked for vulnerabilities.</p>
    pub fn set_last_scanned_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_scanned_at = input;
        self
    }
    /// <p>The date and time the resource was last checked for vulnerabilities.</p>
    pub fn get_last_scanned_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_scanned_at
    }
    /// Consumes the builder and constructs a [`CoveredResource`](crate::types::CoveredResource).
    /// This method will fail if any of the following fields are not set:
    /// - [`resource_type`](crate::types::builders::CoveredResourceBuilder::resource_type)
    /// - [`resource_id`](crate::types::builders::CoveredResourceBuilder::resource_id)
    /// - [`account_id`](crate::types::builders::CoveredResourceBuilder::account_id)
    /// - [`scan_type`](crate::types::builders::CoveredResourceBuilder::scan_type)
    pub fn build(self) -> ::std::result::Result<crate::types::CoveredResource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CoveredResource {
            resource_type: self.resource_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_type",
                    "resource_type was not specified but it is required when building CoveredResource",
                )
            })?,
            resource_id: self.resource_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_id",
                    "resource_id was not specified but it is required when building CoveredResource",
                )
            })?,
            account_id: self.account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "account_id",
                    "account_id was not specified but it is required when building CoveredResource",
                )
            })?,
            scan_type: self.scan_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scan_type",
                    "scan_type was not specified but it is required when building CoveredResource",
                )
            })?,
            scan_status: self.scan_status,
            resource_metadata: self.resource_metadata,
            last_scanned_at: self.last_scanned_at,
        })
    }
}
