// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information on the lines of code associated with a code snippet.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeLine {
    /// <p>The content of a line of code</p>
    pub content: ::std::string::String,
    /// <p>The line number that a section of code is located at.</p>
    pub line_number: i32,
}
impl CodeLine {
    /// <p>The content of a line of code</p>
    pub fn content(&self) -> &str {
        use std::ops::Deref;
        self.content.deref()
    }
    /// <p>The line number that a section of code is located at.</p>
    pub fn line_number(&self) -> i32 {
        self.line_number
    }
}
impl CodeLine {
    /// Creates a new builder-style object to manufacture [`CodeLine`](crate::types::CodeLine).
    pub fn builder() -> crate::types::builders::CodeLineBuilder {
        crate::types::builders::CodeLineBuilder::default()
    }
}

/// A builder for [`CodeLine`](crate::types::CodeLine).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodeLineBuilder {
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) line_number: ::std::option::Option<i32>,
}
impl CodeLineBuilder {
    /// <p>The content of a line of code</p>
    /// This field is required.
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content of a line of code</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content of a line of code</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// <p>The line number that a section of code is located at.</p>
    /// This field is required.
    pub fn line_number(mut self, input: i32) -> Self {
        self.line_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The line number that a section of code is located at.</p>
    pub fn set_line_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.line_number = input;
        self
    }
    /// <p>The line number that a section of code is located at.</p>
    pub fn get_line_number(&self) -> &::std::option::Option<i32> {
        &self.line_number
    }
    /// Consumes the builder and constructs a [`CodeLine`](crate::types::CodeLine).
    /// This method will fail if any of the following fields are not set:
    /// - [`content`](crate::types::builders::CodeLineBuilder::content)
    /// - [`line_number`](crate::types::builders::CodeLineBuilder::line_number)
    pub fn build(self) -> ::std::result::Result<crate::types::CodeLine, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeLine {
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building CodeLine",
                )
            })?,
            line_number: self.line_number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "line_number",
                    "line_number was not specified but it is required when building CodeLine",
                )
            })?,
        })
    }
}
