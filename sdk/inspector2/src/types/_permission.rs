// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information on the permissions an account has within Amazon Inspector.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Permission {
    /// <p>The services that the permissions allow an account to perform the given operations for.</p>
    #[doc(hidden)]
    pub service: std::option::Option<crate::types::Service>,
    /// <p>The operations that can be performed with the given permissions.</p>
    #[doc(hidden)]
    pub operation: std::option::Option<crate::types::Operation>,
}
impl Permission {
    /// <p>The services that the permissions allow an account to perform the given operations for.</p>
    pub fn service(&self) -> std::option::Option<&crate::types::Service> {
        self.service.as_ref()
    }
    /// <p>The operations that can be performed with the given permissions.</p>
    pub fn operation(&self) -> std::option::Option<&crate::types::Operation> {
        self.operation.as_ref()
    }
}
impl Permission {
    /// Creates a new builder-style object to manufacture [`Permission`](crate::types::Permission).
    pub fn builder() -> crate::types::builders::PermissionBuilder {
        crate::types::builders::PermissionBuilder::default()
    }
}

/// A builder for [`Permission`](crate::types::Permission).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PermissionBuilder {
    pub(crate) service: std::option::Option<crate::types::Service>,
    pub(crate) operation: std::option::Option<crate::types::Operation>,
}
impl PermissionBuilder {
    /// <p>The services that the permissions allow an account to perform the given operations for.</p>
    pub fn service(mut self, input: crate::types::Service) -> Self {
        self.service = Some(input);
        self
    }
    /// <p>The services that the permissions allow an account to perform the given operations for.</p>
    pub fn set_service(mut self, input: std::option::Option<crate::types::Service>) -> Self {
        self.service = input;
        self
    }
    /// <p>The operations that can be performed with the given permissions.</p>
    pub fn operation(mut self, input: crate::types::Operation) -> Self {
        self.operation = Some(input);
        self
    }
    /// <p>The operations that can be performed with the given permissions.</p>
    pub fn set_operation(mut self, input: std::option::Option<crate::types::Operation>) -> Self {
        self.operation = input;
        self
    }
    /// Consumes the builder and constructs a [`Permission`](crate::types::Permission).
    pub fn build(self) -> crate::types::Permission {
        crate::types::Permission {
            service: self.service,
            operation: self.operation,
        }
    }
}
