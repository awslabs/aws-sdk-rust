// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information on the permissions an account has within Amazon Inspector.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Permission {
    /// <p>The services that the permissions allow an account to perform the given operations for.</p>
    pub service: crate::types::Service,
    /// <p>The operations that can be performed with the given permissions.</p>
    pub operation: crate::types::Operation,
}
impl Permission {
    /// <p>The services that the permissions allow an account to perform the given operations for.</p>
    pub fn service(&self) -> &crate::types::Service {
        &self.service
    }
    /// <p>The operations that can be performed with the given permissions.</p>
    pub fn operation(&self) -> &crate::types::Operation {
        &self.operation
    }
}
impl Permission {
    /// Creates a new builder-style object to manufacture [`Permission`](crate::types::Permission).
    pub fn builder() -> crate::types::builders::PermissionBuilder {
        crate::types::builders::PermissionBuilder::default()
    }
}

/// A builder for [`Permission`](crate::types::Permission).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PermissionBuilder {
    pub(crate) service: ::std::option::Option<crate::types::Service>,
    pub(crate) operation: ::std::option::Option<crate::types::Operation>,
}
impl PermissionBuilder {
    /// <p>The services that the permissions allow an account to perform the given operations for.</p>
    /// This field is required.
    pub fn service(mut self, input: crate::types::Service) -> Self {
        self.service = ::std::option::Option::Some(input);
        self
    }
    /// <p>The services that the permissions allow an account to perform the given operations for.</p>
    pub fn set_service(mut self, input: ::std::option::Option<crate::types::Service>) -> Self {
        self.service = input;
        self
    }
    /// <p>The services that the permissions allow an account to perform the given operations for.</p>
    pub fn get_service(&self) -> &::std::option::Option<crate::types::Service> {
        &self.service
    }
    /// <p>The operations that can be performed with the given permissions.</p>
    /// This field is required.
    pub fn operation(mut self, input: crate::types::Operation) -> Self {
        self.operation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operations that can be performed with the given permissions.</p>
    pub fn set_operation(mut self, input: ::std::option::Option<crate::types::Operation>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The operations that can be performed with the given permissions.</p>
    pub fn get_operation(&self) -> &::std::option::Option<crate::types::Operation> {
        &self.operation
    }
    /// Consumes the builder and constructs a [`Permission`](crate::types::Permission).
    /// This method will fail if any of the following fields are not set:
    /// - [`service`](crate::types::builders::PermissionBuilder::service)
    /// - [`operation`](crate::types::builders::PermissionBuilder::operation)
    pub fn build(self) -> ::std::result::Result<crate::types::Permission, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Permission {
            service: self.service.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service",
                    "service was not specified but it is required when building Permission",
                )
            })?,
            operation: self.operation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation",
                    "operation was not specified but it is required when building Permission",
                )
            })?,
        })
    }
}
