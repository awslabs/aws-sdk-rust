// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information on the Amazon ECR repository metadata associated with a finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EcrRepositoryMetadata {
    /// <p>The name of the Amazon ECR repository.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The frequency of scans.</p>
    #[doc(hidden)]
    pub scan_frequency: std::option::Option<crate::types::EcrScanFrequency>,
}
impl EcrRepositoryMetadata {
    /// <p>The name of the Amazon ECR repository.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The frequency of scans.</p>
    pub fn scan_frequency(&self) -> std::option::Option<&crate::types::EcrScanFrequency> {
        self.scan_frequency.as_ref()
    }
}
impl EcrRepositoryMetadata {
    /// Creates a new builder-style object to manufacture [`EcrRepositoryMetadata`](crate::types::EcrRepositoryMetadata).
    pub fn builder() -> crate::types::builders::EcrRepositoryMetadataBuilder {
        crate::types::builders::EcrRepositoryMetadataBuilder::default()
    }
}

/// A builder for [`EcrRepositoryMetadata`](crate::types::EcrRepositoryMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EcrRepositoryMetadataBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) scan_frequency: std::option::Option<crate::types::EcrScanFrequency>,
}
impl EcrRepositoryMetadataBuilder {
    /// <p>The name of the Amazon ECR repository.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon ECR repository.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The frequency of scans.</p>
    pub fn scan_frequency(mut self, input: crate::types::EcrScanFrequency) -> Self {
        self.scan_frequency = Some(input);
        self
    }
    /// <p>The frequency of scans.</p>
    pub fn set_scan_frequency(
        mut self,
        input: std::option::Option<crate::types::EcrScanFrequency>,
    ) -> Self {
        self.scan_frequency = input;
        self
    }
    /// Consumes the builder and constructs a [`EcrRepositoryMetadata`](crate::types::EcrRepositoryMetadata).
    pub fn build(self) -> crate::types::EcrRepositoryMetadata {
        crate::types::EcrRepositoryMetadata {
            name: self.name,
            scan_frequency: self.scan_frequency,
        }
    }
}
