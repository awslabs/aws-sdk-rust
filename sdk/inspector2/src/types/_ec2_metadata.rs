// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Meta data details of an Amazon EC2 instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Ec2Metadata {
    /// <p>The tags attached to the instance.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The ID of the Amazon Machine Image (AMI) used to launch the instance.</p>
    #[doc(hidden)]
    pub ami_id: std::option::Option<std::string::String>,
    /// <p>The platform of the instance.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<crate::types::Ec2Platform>,
}
impl Ec2Metadata {
    /// <p>The tags attached to the instance.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The ID of the Amazon Machine Image (AMI) used to launch the instance.</p>
    pub fn ami_id(&self) -> std::option::Option<&str> {
        self.ami_id.as_deref()
    }
    /// <p>The platform of the instance.</p>
    pub fn platform(&self) -> std::option::Option<&crate::types::Ec2Platform> {
        self.platform.as_ref()
    }
}
impl Ec2Metadata {
    /// Creates a new builder-style object to manufacture [`Ec2Metadata`](crate::types::Ec2Metadata).
    pub fn builder() -> crate::types::builders::Ec2MetadataBuilder {
        crate::types::builders::Ec2MetadataBuilder::default()
    }
}

/// A builder for [`Ec2Metadata`](crate::types::Ec2Metadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Ec2MetadataBuilder {
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) ami_id: std::option::Option<std::string::String>,
    pub(crate) platform: std::option::Option<crate::types::Ec2Platform>,
}
impl Ec2MetadataBuilder {
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags attached to the instance.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags attached to the instance.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The ID of the Amazon Machine Image (AMI) used to launch the instance.</p>
    pub fn ami_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ami_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Machine Image (AMI) used to launch the instance.</p>
    pub fn set_ami_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ami_id = input;
        self
    }
    /// <p>The platform of the instance.</p>
    pub fn platform(mut self, input: crate::types::Ec2Platform) -> Self {
        self.platform = Some(input);
        self
    }
    /// <p>The platform of the instance.</p>
    pub fn set_platform(mut self, input: std::option::Option<crate::types::Ec2Platform>) -> Self {
        self.platform = input;
        self
    }
    /// Consumes the builder and constructs a [`Ec2Metadata`](crate::types::Ec2Metadata).
    pub fn build(self) -> crate::types::Ec2Metadata {
        crate::types::Ec2Metadata {
            tags: self.tags,
            ami_id: self.ami_id,
            platform: self.platform,
        }
    }
}
