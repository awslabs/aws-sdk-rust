// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents which scan types are automatically enabled for new members of your Amazon Inspector organization.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutoEnable {
    /// <p>Represents whether Amazon EC2 scans are automatically enabled for new members of your Amazon Inspector organization.</p>
    #[doc(hidden)]
    pub ec2: std::option::Option<bool>,
    /// <p>Represents whether Amazon ECR scans are automatically enabled for new members of your Amazon Inspector organization.</p>
    #[doc(hidden)]
    pub ecr: std::option::Option<bool>,
    /// <p>Represents whether AWS Lambda scans are automatically enabled for new members of your Amazon Inspector organization. </p>
    #[doc(hidden)]
    pub lambda: std::option::Option<bool>,
}
impl AutoEnable {
    /// <p>Represents whether Amazon EC2 scans are automatically enabled for new members of your Amazon Inspector organization.</p>
    pub fn ec2(&self) -> std::option::Option<bool> {
        self.ec2
    }
    /// <p>Represents whether Amazon ECR scans are automatically enabled for new members of your Amazon Inspector organization.</p>
    pub fn ecr(&self) -> std::option::Option<bool> {
        self.ecr
    }
    /// <p>Represents whether AWS Lambda scans are automatically enabled for new members of your Amazon Inspector organization. </p>
    pub fn lambda(&self) -> std::option::Option<bool> {
        self.lambda
    }
}
impl AutoEnable {
    /// Creates a new builder-style object to manufacture [`AutoEnable`](crate::types::AutoEnable).
    pub fn builder() -> crate::types::builders::AutoEnableBuilder {
        crate::types::builders::AutoEnableBuilder::default()
    }
}

/// A builder for [`AutoEnable`](crate::types::AutoEnable).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutoEnableBuilder {
    pub(crate) ec2: std::option::Option<bool>,
    pub(crate) ecr: std::option::Option<bool>,
    pub(crate) lambda: std::option::Option<bool>,
}
impl AutoEnableBuilder {
    /// <p>Represents whether Amazon EC2 scans are automatically enabled for new members of your Amazon Inspector organization.</p>
    pub fn ec2(mut self, input: bool) -> Self {
        self.ec2 = Some(input);
        self
    }
    /// <p>Represents whether Amazon EC2 scans are automatically enabled for new members of your Amazon Inspector organization.</p>
    pub fn set_ec2(mut self, input: std::option::Option<bool>) -> Self {
        self.ec2 = input;
        self
    }
    /// <p>Represents whether Amazon ECR scans are automatically enabled for new members of your Amazon Inspector organization.</p>
    pub fn ecr(mut self, input: bool) -> Self {
        self.ecr = Some(input);
        self
    }
    /// <p>Represents whether Amazon ECR scans are automatically enabled for new members of your Amazon Inspector organization.</p>
    pub fn set_ecr(mut self, input: std::option::Option<bool>) -> Self {
        self.ecr = input;
        self
    }
    /// <p>Represents whether AWS Lambda scans are automatically enabled for new members of your Amazon Inspector organization. </p>
    pub fn lambda(mut self, input: bool) -> Self {
        self.lambda = Some(input);
        self
    }
    /// <p>Represents whether AWS Lambda scans are automatically enabled for new members of your Amazon Inspector organization. </p>
    pub fn set_lambda(mut self, input: std::option::Option<bool>) -> Self {
        self.lambda = input;
        self
    }
    /// Consumes the builder and constructs a [`AutoEnable`](crate::types::AutoEnable).
    pub fn build(self) -> crate::types::AutoEnable {
        crate::types::AutoEnable {
            ec2: self.ec2,
            ecr: self.ecr,
            lambda: self.lambda,
        }
    }
}
