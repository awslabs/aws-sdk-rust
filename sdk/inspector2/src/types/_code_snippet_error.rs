// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about any errors encountered while trying to retrieve a code snippet.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeSnippetError {
    /// <p>The ARN of the finding that a code snippet couldn't be retrieved for.</p>
    pub finding_arn: ::std::string::String,
    /// <p>The error code for the error that prevented a code snippet from being retrieved.</p>
    pub error_code: crate::types::CodeSnippetErrorCode,
    /// <p>The error message received when Amazon Inspector failed to retrieve a code snippet.</p>
    pub error_message: ::std::string::String,
}
impl CodeSnippetError {
    /// <p>The ARN of the finding that a code snippet couldn't be retrieved for.</p>
    pub fn finding_arn(&self) -> &str {
        use std::ops::Deref;
        self.finding_arn.deref()
    }
    /// <p>The error code for the error that prevented a code snippet from being retrieved.</p>
    pub fn error_code(&self) -> &crate::types::CodeSnippetErrorCode {
        &self.error_code
    }
    /// <p>The error message received when Amazon Inspector failed to retrieve a code snippet.</p>
    pub fn error_message(&self) -> &str {
        use std::ops::Deref;
        self.error_message.deref()
    }
}
impl CodeSnippetError {
    /// Creates a new builder-style object to manufacture [`CodeSnippetError`](crate::types::CodeSnippetError).
    pub fn builder() -> crate::types::builders::CodeSnippetErrorBuilder {
        crate::types::builders::CodeSnippetErrorBuilder::default()
    }
}

/// A builder for [`CodeSnippetError`](crate::types::CodeSnippetError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodeSnippetErrorBuilder {
    pub(crate) finding_arn: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<crate::types::CodeSnippetErrorCode>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl CodeSnippetErrorBuilder {
    /// <p>The ARN of the finding that a code snippet couldn't be retrieved for.</p>
    /// This field is required.
    pub fn finding_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.finding_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the finding that a code snippet couldn't be retrieved for.</p>
    pub fn set_finding_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.finding_arn = input;
        self
    }
    /// <p>The ARN of the finding that a code snippet couldn't be retrieved for.</p>
    pub fn get_finding_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.finding_arn
    }
    /// <p>The error code for the error that prevented a code snippet from being retrieved.</p>
    /// This field is required.
    pub fn error_code(mut self, input: crate::types::CodeSnippetErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code for the error that prevented a code snippet from being retrieved.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::CodeSnippetErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code for the error that prevented a code snippet from being retrieved.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::CodeSnippetErrorCode> {
        &self.error_code
    }
    /// <p>The error message received when Amazon Inspector failed to retrieve a code snippet.</p>
    /// This field is required.
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message received when Amazon Inspector failed to retrieve a code snippet.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The error message received when Amazon Inspector failed to retrieve a code snippet.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`CodeSnippetError`](crate::types::CodeSnippetError).
    /// This method will fail if any of the following fields are not set:
    /// - [`finding_arn`](crate::types::builders::CodeSnippetErrorBuilder::finding_arn)
    /// - [`error_code`](crate::types::builders::CodeSnippetErrorBuilder::error_code)
    /// - [`error_message`](crate::types::builders::CodeSnippetErrorBuilder::error_message)
    pub fn build(self) -> ::std::result::Result<crate::types::CodeSnippetError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeSnippetError {
            finding_arn: self.finding_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "finding_arn",
                    "finding_arn was not specified but it is required when building CodeSnippetError",
                )
            })?,
            error_code: self.error_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_code",
                    "error_code was not specified but it is required when building CodeSnippetError",
                )
            })?,
            error_message: self.error_message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_message",
                    "error_message was not specified but it is required when building CodeSnippetError",
                )
            })?,
        })
    }
}
