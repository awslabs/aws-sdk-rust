// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that describes the details of a number filter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NumberFilter {
    /// <p>The highest number to be included in the filter.</p>
    #[doc(hidden)]
    pub upper_inclusive: std::option::Option<f64>,
    /// <p>The lowest number to be included in the filter.</p>
    #[doc(hidden)]
    pub lower_inclusive: std::option::Option<f64>,
}
impl NumberFilter {
    /// <p>The highest number to be included in the filter.</p>
    pub fn upper_inclusive(&self) -> std::option::Option<f64> {
        self.upper_inclusive
    }
    /// <p>The lowest number to be included in the filter.</p>
    pub fn lower_inclusive(&self) -> std::option::Option<f64> {
        self.lower_inclusive
    }
}
impl NumberFilter {
    /// Creates a new builder-style object to manufacture [`NumberFilter`](crate::types::NumberFilter).
    pub fn builder() -> crate::types::builders::NumberFilterBuilder {
        crate::types::builders::NumberFilterBuilder::default()
    }
}

/// A builder for [`NumberFilter`](crate::types::NumberFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NumberFilterBuilder {
    pub(crate) upper_inclusive: std::option::Option<f64>,
    pub(crate) lower_inclusive: std::option::Option<f64>,
}
impl NumberFilterBuilder {
    /// <p>The highest number to be included in the filter.</p>
    pub fn upper_inclusive(mut self, input: f64) -> Self {
        self.upper_inclusive = Some(input);
        self
    }
    /// <p>The highest number to be included in the filter.</p>
    pub fn set_upper_inclusive(mut self, input: std::option::Option<f64>) -> Self {
        self.upper_inclusive = input;
        self
    }
    /// <p>The lowest number to be included in the filter.</p>
    pub fn lower_inclusive(mut self, input: f64) -> Self {
        self.lower_inclusive = Some(input);
        self
    }
    /// <p>The lowest number to be included in the filter.</p>
    pub fn set_lower_inclusive(mut self, input: std::option::Option<f64>) -> Self {
        self.lower_inclusive = input;
        self
    }
    /// Consumes the builder and constructs a [`NumberFilter`](crate::types::NumberFilter).
    pub fn build(self) -> crate::types::NumberFilter {
        crate::types::NumberFilter {
            upper_inclusive: self.upper_inclusive,
            lower_inclusive: self.lower_inclusive,
        }
    }
}
