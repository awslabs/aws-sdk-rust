// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the criteria used to sort finding results.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SortCriteria {
    /// <p>The finding detail field by which results are sorted.</p>
    #[doc(hidden)]
    pub field: std::option::Option<crate::types::SortField>,
    /// <p>The order by which findings are sorted.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
}
impl SortCriteria {
    /// <p>The finding detail field by which results are sorted.</p>
    pub fn field(&self) -> std::option::Option<&crate::types::SortField> {
        self.field.as_ref()
    }
    /// <p>The order by which findings are sorted.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
}
impl SortCriteria {
    /// Creates a new builder-style object to manufacture [`SortCriteria`](crate::types::SortCriteria).
    pub fn builder() -> crate::types::builders::SortCriteriaBuilder {
        crate::types::builders::SortCriteriaBuilder::default()
    }
}

/// A builder for [`SortCriteria`](crate::types::SortCriteria).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SortCriteriaBuilder {
    pub(crate) field: std::option::Option<crate::types::SortField>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
}
impl SortCriteriaBuilder {
    /// <p>The finding detail field by which results are sorted.</p>
    pub fn field(mut self, input: crate::types::SortField) -> Self {
        self.field = Some(input);
        self
    }
    /// <p>The finding detail field by which results are sorted.</p>
    pub fn set_field(mut self, input: std::option::Option<crate::types::SortField>) -> Self {
        self.field = input;
        self
    }
    /// <p>The order by which findings are sorted.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>The order by which findings are sorted.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// Consumes the builder and constructs a [`SortCriteria`](crate::types::SortCriteria).
    pub fn build(self) -> crate::types::SortCriteria {
        crate::types::SortCriteria {
            field: self.field,
            sort_order: self.sort_order,
        }
    }
}
