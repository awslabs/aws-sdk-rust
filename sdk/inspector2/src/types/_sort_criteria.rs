// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the criteria used to sort finding results.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SortCriteria {
    /// <p>The finding detail field by which results are sorted.</p>
    pub field: crate::types::SortField,
    /// <p>The order by which findings are sorted.</p>
    pub sort_order: crate::types::SortOrder,
}
impl SortCriteria {
    /// <p>The finding detail field by which results are sorted.</p>
    pub fn field(&self) -> &crate::types::SortField {
        &self.field
    }
    /// <p>The order by which findings are sorted.</p>
    pub fn sort_order(&self) -> &crate::types::SortOrder {
        &self.sort_order
    }
}
impl SortCriteria {
    /// Creates a new builder-style object to manufacture [`SortCriteria`](crate::types::SortCriteria).
    pub fn builder() -> crate::types::builders::SortCriteriaBuilder {
        crate::types::builders::SortCriteriaBuilder::default()
    }
}

/// A builder for [`SortCriteria`](crate::types::SortCriteria).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SortCriteriaBuilder {
    pub(crate) field: ::std::option::Option<crate::types::SortField>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
}
impl SortCriteriaBuilder {
    /// <p>The finding detail field by which results are sorted.</p>
    /// This field is required.
    pub fn field(mut self, input: crate::types::SortField) -> Self {
        self.field = ::std::option::Option::Some(input);
        self
    }
    /// <p>The finding detail field by which results are sorted.</p>
    pub fn set_field(mut self, input: ::std::option::Option<crate::types::SortField>) -> Self {
        self.field = input;
        self
    }
    /// <p>The finding detail field by which results are sorted.</p>
    pub fn get_field(&self) -> &::std::option::Option<crate::types::SortField> {
        &self.field
    }
    /// <p>The order by which findings are sorted.</p>
    /// This field is required.
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The order by which findings are sorted.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The order by which findings are sorted.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// Consumes the builder and constructs a [`SortCriteria`](crate::types::SortCriteria).
    /// This method will fail if any of the following fields are not set:
    /// - [`field`](crate::types::builders::SortCriteriaBuilder::field)
    /// - [`sort_order`](crate::types::builders::SortCriteriaBuilder::sort_order)
    pub fn build(self) -> ::std::result::Result<crate::types::SortCriteria, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SortCriteria {
            field: self.field.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field",
                    "field was not specified but it is required when building SortCriteria",
                )
            })?,
            sort_order: self.sort_order.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sort_order",
                    "sort_order was not specified but it is required when building SortCriteria",
                )
            })?,
        })
    }
}
