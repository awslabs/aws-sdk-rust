// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_account_permissions_output_next_token(
    input: &crate::operation::list_account_permissions::ListAccountPermissionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_coverage_output_next_token(
    input: &crate::operation::list_coverage::ListCoverageOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_coverage_statistics_output_next_token(
    input: &crate::operation::list_coverage_statistics::ListCoverageStatisticsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_delegated_admin_accounts_output_next_token(
    input: &crate::operation::list_delegated_admin_accounts::ListDelegatedAdminAccountsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_filters_output_next_token(
    input: &crate::operation::list_filters::ListFiltersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_finding_aggregations_output_next_token(
    input: &crate::operation::list_finding_aggregations::ListFindingAggregationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_findings_output_next_token(
    input: &crate::operation::list_findings::ListFindingsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_members_output_next_token(
    input: &crate::operation::list_members::ListMembersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_usage_totals_output_next_token(
    input: &crate::operation::list_usage_totals::ListUsageTotalsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_vulnerabilities_output_next_token(
    input: &crate::operation::search_vulnerabilities::SearchVulnerabilitiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_account_permissions_output_permissions(
    input: crate::operation::list_account_permissions::ListAccountPermissionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Permission>> {
    let input = input.permissions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_coverage_output_covered_resources(
    input: crate::operation::list_coverage::ListCoverageOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CoveredResource>> {
    let input = match input.covered_resources {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_coverage_statistics_output_counts_by_group(
    input: crate::operation::list_coverage_statistics::ListCoverageStatisticsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Counts>> {
    let input = match input.counts_by_group {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_delegated_admin_accounts_output_delegated_admin_accounts(
    input: crate::operation::list_delegated_admin_accounts::ListDelegatedAdminAccountsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DelegatedAdminAccount>> {
    let input = match input.delegated_admin_accounts {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_filters_output_filters(
    input: crate::operation::list_filters::ListFiltersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
    let input = input.filters;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_finding_aggregations_output_responses(
    input: crate::operation::list_finding_aggregations::ListFindingAggregationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AggregationResponse>> {
    let input = match input.responses {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_findings_output_findings(
    input: crate::operation::list_findings::ListFindingsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Finding>> {
    let input = match input.findings {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_members_output_members(
    input: crate::operation::list_members::ListMembersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Member>> {
    let input = match input.members {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_usage_totals_output_totals(
    input: crate::operation::list_usage_totals::ListUsageTotalsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UsageTotal>> {
    let input = match input.totals {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_vulnerabilities_output_vulnerabilities(
    input: crate::operation::search_vulnerabilities::SearchVulnerabilitiesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Vulnerability>> {
    let input = input.vulnerabilities;
    ::std::option::Option::Some(input)
}
