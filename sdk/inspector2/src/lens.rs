// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_account_permissions_output_next_token(
    input: &crate::output::ListAccountPermissionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_coverage_output_next_token(
    input: &crate::output::ListCoverageOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_coverage_statistics_output_next_token(
    input: &crate::output::ListCoverageStatisticsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_delegated_admin_accounts_output_next_token(
    input: &crate::output::ListDelegatedAdminAccountsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_filters_output_next_token(
    input: &crate::output::ListFiltersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_finding_aggregations_output_next_token(
    input: &crate::output::ListFindingAggregationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_findings_output_next_token(
    input: &crate::output::ListFindingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_members_output_next_token(
    input: &crate::output::ListMembersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_usage_totals_output_next_token(
    input: &crate::output::ListUsageTotalsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_account_permissions_output_permissions(
    input: crate::output::ListAccountPermissionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Permission>> {
    let input = match input.permissions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_coverage_output_covered_resources(
    input: crate::output::ListCoverageOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CoveredResource>> {
    let input = match input.covered_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_coverage_statistics_output_counts_by_group(
    input: crate::output::ListCoverageStatisticsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Counts>> {
    let input = match input.counts_by_group {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_delegated_admin_accounts_output_delegated_admin_accounts(
    input: crate::output::ListDelegatedAdminAccountsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DelegatedAdminAccount>> {
    let input = match input.delegated_admin_accounts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_filters_output_filters(
    input: crate::output::ListFiltersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Filter>> {
    let input = match input.filters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_finding_aggregations_output_responses(
    input: crate::output::ListFindingAggregationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AggregationResponse>> {
    let input = match input.responses {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_findings_output_findings(
    input: crate::output::ListFindingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Finding>> {
    let input = match input.findings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_members_output_members(
    input: crate::output::ListMembersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Member>> {
    let input = match input.members {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_usage_totals_output_totals(
    input: crate::output::ListUsageTotalsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UsageTotal>> {
    let input = match input.totals {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
