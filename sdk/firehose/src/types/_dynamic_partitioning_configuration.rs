// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DynamicPartitioningConfiguration {
    /// <p>The retry behavior in case Kinesis Data Firehose is unable to deliver data to an Amazon S3 prefix.</p>
    #[doc(hidden)]
    pub retry_options: std::option::Option<crate::types::RetryOptions>,
    /// <p>Specifies that the dynamic partitioning is enabled for this Kinesis Data Firehose delivery stream.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
}
impl DynamicPartitioningConfiguration {
    /// <p>The retry behavior in case Kinesis Data Firehose is unable to deliver data to an Amazon S3 prefix.</p>
    pub fn retry_options(&self) -> std::option::Option<&crate::types::RetryOptions> {
        self.retry_options.as_ref()
    }
    /// <p>Specifies that the dynamic partitioning is enabled for this Kinesis Data Firehose delivery stream.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
}
impl DynamicPartitioningConfiguration {
    /// Creates a new builder-style object to manufacture [`DynamicPartitioningConfiguration`](crate::types::DynamicPartitioningConfiguration).
    pub fn builder() -> crate::types::builders::DynamicPartitioningConfigurationBuilder {
        crate::types::builders::DynamicPartitioningConfigurationBuilder::default()
    }
}

/// A builder for [`DynamicPartitioningConfiguration`](crate::types::DynamicPartitioningConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DynamicPartitioningConfigurationBuilder {
    pub(crate) retry_options: std::option::Option<crate::types::RetryOptions>,
    pub(crate) enabled: std::option::Option<bool>,
}
impl DynamicPartitioningConfigurationBuilder {
    /// <p>The retry behavior in case Kinesis Data Firehose is unable to deliver data to an Amazon S3 prefix.</p>
    pub fn retry_options(mut self, input: crate::types::RetryOptions) -> Self {
        self.retry_options = Some(input);
        self
    }
    /// <p>The retry behavior in case Kinesis Data Firehose is unable to deliver data to an Amazon S3 prefix.</p>
    pub fn set_retry_options(
        mut self,
        input: std::option::Option<crate::types::RetryOptions>,
    ) -> Self {
        self.retry_options = input;
        self
    }
    /// <p>Specifies that the dynamic partitioning is enabled for this Kinesis Data Firehose delivery stream.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Specifies that the dynamic partitioning is enabled for this Kinesis Data Firehose delivery stream.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`DynamicPartitioningConfiguration`](crate::types::DynamicPartitioningConfiguration).
    pub fn build(self) -> crate::types::DynamicPartitioningConfiguration {
        crate::types::DynamicPartitioningConfiguration {
            retry_options: self.retry_options,
            enabled: self.enabled,
        }
    }
}
