// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a data processing configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProcessingConfiguration {
    /// <p>Enables or disables data processing.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>The data processors.</p>
    #[doc(hidden)]
    pub processors: std::option::Option<std::vec::Vec<crate::types::Processor>>,
}
impl ProcessingConfiguration {
    /// <p>Enables or disables data processing.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>The data processors.</p>
    pub fn processors(&self) -> std::option::Option<&[crate::types::Processor]> {
        self.processors.as_deref()
    }
}
impl ProcessingConfiguration {
    /// Creates a new builder-style object to manufacture [`ProcessingConfiguration`](crate::types::ProcessingConfiguration).
    pub fn builder() -> crate::types::builders::ProcessingConfigurationBuilder {
        crate::types::builders::ProcessingConfigurationBuilder::default()
    }
}

/// A builder for [`ProcessingConfiguration`](crate::types::ProcessingConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProcessingConfigurationBuilder {
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) processors: std::option::Option<std::vec::Vec<crate::types::Processor>>,
}
impl ProcessingConfigurationBuilder {
    /// <p>Enables or disables data processing.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Enables or disables data processing.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// Appends an item to `processors`.
    ///
    /// To override the contents of this collection use [`set_processors`](Self::set_processors).
    ///
    /// <p>The data processors.</p>
    pub fn processors(mut self, input: crate::types::Processor) -> Self {
        let mut v = self.processors.unwrap_or_default();
        v.push(input);
        self.processors = Some(v);
        self
    }
    /// <p>The data processors.</p>
    pub fn set_processors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Processor>>,
    ) -> Self {
        self.processors = input;
        self
    }
    /// Consumes the builder and constructs a [`ProcessingConfiguration`](crate::types::ProcessingConfiguration).
    pub fn build(self) -> crate::types::ProcessingConfiguration {
        crate::types::ProcessingConfiguration {
            enabled: self.enabled,
            processors: self.processors,
        }
    }
}
