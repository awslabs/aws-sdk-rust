// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a destination in Amazon Redshift.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RedshiftDestinationDescription {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    pub role_arn: ::std::string::String,
    /// <p>The database connection string.</p>
    pub cluster_jdbcurl: ::std::string::String,
    /// <p>The <code>COPY</code> command.</p>
    pub copy_command: ::std::option::Option<crate::types::CopyCommand>,
    /// <p>The name of the user.</p>
    pub username: ::std::string::String,
    /// <p>The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).</p>
    pub retry_options: ::std::option::Option<crate::types::RedshiftRetryOptions>,
    /// <p>The Amazon S3 destination.</p>
    pub s3_destination_description: ::std::option::Option<crate::types::S3DestinationDescription>,
    /// <p>The data processing configuration.</p>
    pub processing_configuration: ::std::option::Option<crate::types::ProcessingConfiguration>,
    /// <p>The Amazon S3 backup mode.</p>
    pub s3_backup_mode: ::std::option::Option<crate::types::RedshiftS3BackupMode>,
    /// <p>The configuration for backup in Amazon S3.</p>
    pub s3_backup_description: ::std::option::Option<crate::types::S3DestinationDescription>,
    /// <p>The Amazon CloudWatch logging options for your delivery stream.</p>
    pub cloud_watch_logging_options: ::std::option::Option<crate::types::CloudWatchLoggingOptions>,
}
impl RedshiftDestinationDescription {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The database connection string.</p>
    pub fn cluster_jdbcurl(&self) -> &str {
        use std::ops::Deref;
        self.cluster_jdbcurl.deref()
    }
    /// <p>The <code>COPY</code> command.</p>
    pub fn copy_command(&self) -> ::std::option::Option<&crate::types::CopyCommand> {
        self.copy_command.as_ref()
    }
    /// <p>The name of the user.</p>
    pub fn username(&self) -> &str {
        use std::ops::Deref;
        self.username.deref()
    }
    /// <p>The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).</p>
    pub fn retry_options(&self) -> ::std::option::Option<&crate::types::RedshiftRetryOptions> {
        self.retry_options.as_ref()
    }
    /// <p>The Amazon S3 destination.</p>
    pub fn s3_destination_description(&self) -> ::std::option::Option<&crate::types::S3DestinationDescription> {
        self.s3_destination_description.as_ref()
    }
    /// <p>The data processing configuration.</p>
    pub fn processing_configuration(&self) -> ::std::option::Option<&crate::types::ProcessingConfiguration> {
        self.processing_configuration.as_ref()
    }
    /// <p>The Amazon S3 backup mode.</p>
    pub fn s3_backup_mode(&self) -> ::std::option::Option<&crate::types::RedshiftS3BackupMode> {
        self.s3_backup_mode.as_ref()
    }
    /// <p>The configuration for backup in Amazon S3.</p>
    pub fn s3_backup_description(&self) -> ::std::option::Option<&crate::types::S3DestinationDescription> {
        self.s3_backup_description.as_ref()
    }
    /// <p>The Amazon CloudWatch logging options for your delivery stream.</p>
    pub fn cloud_watch_logging_options(&self) -> ::std::option::Option<&crate::types::CloudWatchLoggingOptions> {
        self.cloud_watch_logging_options.as_ref()
    }
}
impl ::std::fmt::Debug for RedshiftDestinationDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RedshiftDestinationDescription");
        formatter.field("role_arn", &self.role_arn);
        formatter.field("cluster_jdbcurl", &self.cluster_jdbcurl);
        formatter.field("copy_command", &self.copy_command);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("retry_options", &self.retry_options);
        formatter.field("s3_destination_description", &self.s3_destination_description);
        formatter.field("processing_configuration", &self.processing_configuration);
        formatter.field("s3_backup_mode", &self.s3_backup_mode);
        formatter.field("s3_backup_description", &self.s3_backup_description);
        formatter.field("cloud_watch_logging_options", &self.cloud_watch_logging_options);
        formatter.finish()
    }
}
impl RedshiftDestinationDescription {
    /// Creates a new builder-style object to manufacture [`RedshiftDestinationDescription`](crate::types::RedshiftDestinationDescription).
    pub fn builder() -> crate::types::builders::RedshiftDestinationDescriptionBuilder {
        crate::types::builders::RedshiftDestinationDescriptionBuilder::default()
    }
}

/// A builder for [`RedshiftDestinationDescription`](crate::types::RedshiftDestinationDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RedshiftDestinationDescriptionBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_jdbcurl: ::std::option::Option<::std::string::String>,
    pub(crate) copy_command: ::std::option::Option<crate::types::CopyCommand>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) retry_options: ::std::option::Option<crate::types::RedshiftRetryOptions>,
    pub(crate) s3_destination_description: ::std::option::Option<crate::types::S3DestinationDescription>,
    pub(crate) processing_configuration: ::std::option::Option<crate::types::ProcessingConfiguration>,
    pub(crate) s3_backup_mode: ::std::option::Option<crate::types::RedshiftS3BackupMode>,
    pub(crate) s3_backup_description: ::std::option::Option<crate::types::S3DestinationDescription>,
    pub(crate) cloud_watch_logging_options: ::std::option::Option<crate::types::CloudWatchLoggingOptions>,
}
impl RedshiftDestinationDescriptionBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The database connection string.</p>
    /// This field is required.
    pub fn cluster_jdbcurl(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_jdbcurl = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database connection string.</p>
    pub fn set_cluster_jdbcurl(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_jdbcurl = input;
        self
    }
    /// <p>The database connection string.</p>
    pub fn get_cluster_jdbcurl(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_jdbcurl
    }
    /// <p>The <code>COPY</code> command.</p>
    /// This field is required.
    pub fn copy_command(mut self, input: crate::types::CopyCommand) -> Self {
        self.copy_command = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>COPY</code> command.</p>
    pub fn set_copy_command(mut self, input: ::std::option::Option<crate::types::CopyCommand>) -> Self {
        self.copy_command = input;
        self
    }
    /// <p>The <code>COPY</code> command.</p>
    pub fn get_copy_command(&self) -> &::std::option::Option<crate::types::CopyCommand> {
        &self.copy_command
    }
    /// <p>The name of the user.</p>
    /// This field is required.
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The name of the user.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// <p>The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).</p>
    pub fn retry_options(mut self, input: crate::types::RedshiftRetryOptions) -> Self {
        self.retry_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).</p>
    pub fn set_retry_options(mut self, input: ::std::option::Option<crate::types::RedshiftRetryOptions>) -> Self {
        self.retry_options = input;
        self
    }
    /// <p>The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).</p>
    pub fn get_retry_options(&self) -> &::std::option::Option<crate::types::RedshiftRetryOptions> {
        &self.retry_options
    }
    /// <p>The Amazon S3 destination.</p>
    /// This field is required.
    pub fn s3_destination_description(mut self, input: crate::types::S3DestinationDescription) -> Self {
        self.s3_destination_description = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 destination.</p>
    pub fn set_s3_destination_description(mut self, input: ::std::option::Option<crate::types::S3DestinationDescription>) -> Self {
        self.s3_destination_description = input;
        self
    }
    /// <p>The Amazon S3 destination.</p>
    pub fn get_s3_destination_description(&self) -> &::std::option::Option<crate::types::S3DestinationDescription> {
        &self.s3_destination_description
    }
    /// <p>The data processing configuration.</p>
    pub fn processing_configuration(mut self, input: crate::types::ProcessingConfiguration) -> Self {
        self.processing_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data processing configuration.</p>
    pub fn set_processing_configuration(mut self, input: ::std::option::Option<crate::types::ProcessingConfiguration>) -> Self {
        self.processing_configuration = input;
        self
    }
    /// <p>The data processing configuration.</p>
    pub fn get_processing_configuration(&self) -> &::std::option::Option<crate::types::ProcessingConfiguration> {
        &self.processing_configuration
    }
    /// <p>The Amazon S3 backup mode.</p>
    pub fn s3_backup_mode(mut self, input: crate::types::RedshiftS3BackupMode) -> Self {
        self.s3_backup_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 backup mode.</p>
    pub fn set_s3_backup_mode(mut self, input: ::std::option::Option<crate::types::RedshiftS3BackupMode>) -> Self {
        self.s3_backup_mode = input;
        self
    }
    /// <p>The Amazon S3 backup mode.</p>
    pub fn get_s3_backup_mode(&self) -> &::std::option::Option<crate::types::RedshiftS3BackupMode> {
        &self.s3_backup_mode
    }
    /// <p>The configuration for backup in Amazon S3.</p>
    pub fn s3_backup_description(mut self, input: crate::types::S3DestinationDescription) -> Self {
        self.s3_backup_description = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for backup in Amazon S3.</p>
    pub fn set_s3_backup_description(mut self, input: ::std::option::Option<crate::types::S3DestinationDescription>) -> Self {
        self.s3_backup_description = input;
        self
    }
    /// <p>The configuration for backup in Amazon S3.</p>
    pub fn get_s3_backup_description(&self) -> &::std::option::Option<crate::types::S3DestinationDescription> {
        &self.s3_backup_description
    }
    /// <p>The Amazon CloudWatch logging options for your delivery stream.</p>
    pub fn cloud_watch_logging_options(mut self, input: crate::types::CloudWatchLoggingOptions) -> Self {
        self.cloud_watch_logging_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon CloudWatch logging options for your delivery stream.</p>
    pub fn set_cloud_watch_logging_options(mut self, input: ::std::option::Option<crate::types::CloudWatchLoggingOptions>) -> Self {
        self.cloud_watch_logging_options = input;
        self
    }
    /// <p>The Amazon CloudWatch logging options for your delivery stream.</p>
    pub fn get_cloud_watch_logging_options(&self) -> &::std::option::Option<crate::types::CloudWatchLoggingOptions> {
        &self.cloud_watch_logging_options
    }
    /// Consumes the builder and constructs a [`RedshiftDestinationDescription`](crate::types::RedshiftDestinationDescription).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::RedshiftDestinationDescriptionBuilder::role_arn)
    /// - [`cluster_jdbcurl`](crate::types::builders::RedshiftDestinationDescriptionBuilder::cluster_jdbcurl)
    /// - [`username`](crate::types::builders::RedshiftDestinationDescriptionBuilder::username)
    pub fn build(self) -> ::std::result::Result<crate::types::RedshiftDestinationDescription, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RedshiftDestinationDescription {
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building RedshiftDestinationDescription",
                )
            })?,
            cluster_jdbcurl: self.cluster_jdbcurl.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cluster_jdbcurl",
                    "cluster_jdbcurl was not specified but it is required when building RedshiftDestinationDescription",
                )
            })?,
            copy_command: self.copy_command,
            username: self.username.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "username",
                    "username was not specified but it is required when building RedshiftDestinationDescription",
                )
            })?,
            retry_options: self.retry_options,
            s3_destination_description: self.s3_destination_description,
            processing_configuration: self.processing_configuration,
            s3_backup_mode: self.s3_backup_mode,
            s3_backup_description: self.s3_backup_description,
            cloud_watch_logging_options: self.cloud_watch_logging_options,
        })
    }
}
impl ::std::fmt::Debug for RedshiftDestinationDescriptionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RedshiftDestinationDescriptionBuilder");
        formatter.field("role_arn", &self.role_arn);
        formatter.field("cluster_jdbcurl", &self.cluster_jdbcurl);
        formatter.field("copy_command", &self.copy_command);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("retry_options", &self.retry_options);
        formatter.field("s3_destination_description", &self.s3_destination_description);
        formatter.field("processing_configuration", &self.processing_configuration);
        formatter.field("s3_backup_mode", &self.s3_backup_mode);
        formatter.field("s3_backup_description", &self.s3_backup_description);
        formatter.field("cloud_watch_logging_options", &self.cloud_watch_logging_options);
        formatter.finish()
    }
}
