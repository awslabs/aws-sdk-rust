// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a destination in Amazon S3.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExtendedS3DestinationConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    #[doc(hidden)]
    pub bucket_arn: std::option::Option<std::string::String>,
    /// <p>The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in <a href="https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html">Custom Prefixes for Amazon S3 Objects</a>.</p>
    #[doc(hidden)]
    pub prefix: std::option::Option<std::string::String>,
    /// <p>A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html">Custom Prefixes for Amazon S3 Objects</a>.</p>
    #[doc(hidden)]
    pub error_output_prefix: std::option::Option<std::string::String>,
    /// <p>The buffering option.</p>
    #[doc(hidden)]
    pub buffering_hints: std::option::Option<crate::types::BufferingHints>,
    /// <p>The compression format. If no value is specified, the default is UNCOMPRESSED.</p>
    #[doc(hidden)]
    pub compression_format: std::option::Option<crate::types::CompressionFormat>,
    /// <p>The encryption configuration. If no value is specified, the default is no encryption.</p>
    #[doc(hidden)]
    pub encryption_configuration: std::option::Option<crate::types::EncryptionConfiguration>,
    /// <p>The Amazon CloudWatch logging options for your delivery stream.</p>
    #[doc(hidden)]
    pub cloud_watch_logging_options: std::option::Option<crate::types::CloudWatchLoggingOptions>,
    /// <p>The data processing configuration.</p>
    #[doc(hidden)]
    pub processing_configuration: std::option::Option<crate::types::ProcessingConfiguration>,
    /// <p>The Amazon S3 backup mode. After you create a delivery stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it. </p>
    #[doc(hidden)]
    pub s3_backup_mode: std::option::Option<crate::types::S3BackupMode>,
    /// <p>The configuration for backup in Amazon S3.</p>
    #[doc(hidden)]
    pub s3_backup_configuration: std::option::Option<crate::types::S3DestinationConfiguration>,
    /// <p>The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.</p>
    #[doc(hidden)]
    pub data_format_conversion_configuration:
        std::option::Option<crate::types::DataFormatConversionConfiguration>,
    /// <p>The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations. </p>
    #[doc(hidden)]
    pub dynamic_partitioning_configuration:
        std::option::Option<crate::types::DynamicPartitioningConfiguration>,
}
impl ExtendedS3DestinationConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The ARN of the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    pub fn bucket_arn(&self) -> std::option::Option<&str> {
        self.bucket_arn.as_deref()
    }
    /// <p>The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in <a href="https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html">Custom Prefixes for Amazon S3 Objects</a>.</p>
    pub fn prefix(&self) -> std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p>A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html">Custom Prefixes for Amazon S3 Objects</a>.</p>
    pub fn error_output_prefix(&self) -> std::option::Option<&str> {
        self.error_output_prefix.as_deref()
    }
    /// <p>The buffering option.</p>
    pub fn buffering_hints(&self) -> std::option::Option<&crate::types::BufferingHints> {
        self.buffering_hints.as_ref()
    }
    /// <p>The compression format. If no value is specified, the default is UNCOMPRESSED.</p>
    pub fn compression_format(&self) -> std::option::Option<&crate::types::CompressionFormat> {
        self.compression_format.as_ref()
    }
    /// <p>The encryption configuration. If no value is specified, the default is no encryption.</p>
    pub fn encryption_configuration(
        &self,
    ) -> std::option::Option<&crate::types::EncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
    /// <p>The Amazon CloudWatch logging options for your delivery stream.</p>
    pub fn cloud_watch_logging_options(
        &self,
    ) -> std::option::Option<&crate::types::CloudWatchLoggingOptions> {
        self.cloud_watch_logging_options.as_ref()
    }
    /// <p>The data processing configuration.</p>
    pub fn processing_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ProcessingConfiguration> {
        self.processing_configuration.as_ref()
    }
    /// <p>The Amazon S3 backup mode. After you create a delivery stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it. </p>
    pub fn s3_backup_mode(&self) -> std::option::Option<&crate::types::S3BackupMode> {
        self.s3_backup_mode.as_ref()
    }
    /// <p>The configuration for backup in Amazon S3.</p>
    pub fn s3_backup_configuration(
        &self,
    ) -> std::option::Option<&crate::types::S3DestinationConfiguration> {
        self.s3_backup_configuration.as_ref()
    }
    /// <p>The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.</p>
    pub fn data_format_conversion_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DataFormatConversionConfiguration> {
        self.data_format_conversion_configuration.as_ref()
    }
    /// <p>The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations. </p>
    pub fn dynamic_partitioning_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DynamicPartitioningConfiguration> {
        self.dynamic_partitioning_configuration.as_ref()
    }
}
impl ExtendedS3DestinationConfiguration {
    /// Creates a new builder-style object to manufacture [`ExtendedS3DestinationConfiguration`](crate::types::ExtendedS3DestinationConfiguration).
    pub fn builder() -> crate::types::builders::ExtendedS3DestinationConfigurationBuilder {
        crate::types::builders::ExtendedS3DestinationConfigurationBuilder::default()
    }
}

/// A builder for [`ExtendedS3DestinationConfiguration`](crate::types::ExtendedS3DestinationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExtendedS3DestinationConfigurationBuilder {
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) bucket_arn: std::option::Option<std::string::String>,
    pub(crate) prefix: std::option::Option<std::string::String>,
    pub(crate) error_output_prefix: std::option::Option<std::string::String>,
    pub(crate) buffering_hints: std::option::Option<crate::types::BufferingHints>,
    pub(crate) compression_format: std::option::Option<crate::types::CompressionFormat>,
    pub(crate) encryption_configuration: std::option::Option<crate::types::EncryptionConfiguration>,
    pub(crate) cloud_watch_logging_options:
        std::option::Option<crate::types::CloudWatchLoggingOptions>,
    pub(crate) processing_configuration: std::option::Option<crate::types::ProcessingConfiguration>,
    pub(crate) s3_backup_mode: std::option::Option<crate::types::S3BackupMode>,
    pub(crate) s3_backup_configuration:
        std::option::Option<crate::types::S3DestinationConfiguration>,
    pub(crate) data_format_conversion_configuration:
        std::option::Option<crate::types::DataFormatConversionConfiguration>,
    pub(crate) dynamic_partitioning_configuration:
        std::option::Option<crate::types::DynamicPartitioningConfiguration>,
}
impl ExtendedS3DestinationConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services credentials. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    pub fn bucket_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p>
    pub fn set_bucket_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_arn = input;
        self
    }
    /// <p>The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in <a href="https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html">Custom Prefixes for Amazon S3 Objects</a>.</p>
    pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix = Some(input.into());
        self
    }
    /// <p>The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can also specify a custom prefix, as described in <a href="https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html">Custom Prefixes for Amazon S3 Objects</a>.</p>
    pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html">Custom Prefixes for Amazon S3 Objects</a>.</p>
    pub fn error_output_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_output_prefix = Some(input.into());
        self
    }
    /// <p>A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html">Custom Prefixes for Amazon S3 Objects</a>.</p>
    pub fn set_error_output_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.error_output_prefix = input;
        self
    }
    /// <p>The buffering option.</p>
    pub fn buffering_hints(mut self, input: crate::types::BufferingHints) -> Self {
        self.buffering_hints = Some(input);
        self
    }
    /// <p>The buffering option.</p>
    pub fn set_buffering_hints(
        mut self,
        input: std::option::Option<crate::types::BufferingHints>,
    ) -> Self {
        self.buffering_hints = input;
        self
    }
    /// <p>The compression format. If no value is specified, the default is UNCOMPRESSED.</p>
    pub fn compression_format(mut self, input: crate::types::CompressionFormat) -> Self {
        self.compression_format = Some(input);
        self
    }
    /// <p>The compression format. If no value is specified, the default is UNCOMPRESSED.</p>
    pub fn set_compression_format(
        mut self,
        input: std::option::Option<crate::types::CompressionFormat>,
    ) -> Self {
        self.compression_format = input;
        self
    }
    /// <p>The encryption configuration. If no value is specified, the default is no encryption.</p>
    pub fn encryption_configuration(
        mut self,
        input: crate::types::EncryptionConfiguration,
    ) -> Self {
        self.encryption_configuration = Some(input);
        self
    }
    /// <p>The encryption configuration. If no value is specified, the default is no encryption.</p>
    pub fn set_encryption_configuration(
        mut self,
        input: std::option::Option<crate::types::EncryptionConfiguration>,
    ) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// <p>The Amazon CloudWatch logging options for your delivery stream.</p>
    pub fn cloud_watch_logging_options(
        mut self,
        input: crate::types::CloudWatchLoggingOptions,
    ) -> Self {
        self.cloud_watch_logging_options = Some(input);
        self
    }
    /// <p>The Amazon CloudWatch logging options for your delivery stream.</p>
    pub fn set_cloud_watch_logging_options(
        mut self,
        input: std::option::Option<crate::types::CloudWatchLoggingOptions>,
    ) -> Self {
        self.cloud_watch_logging_options = input;
        self
    }
    /// <p>The data processing configuration.</p>
    pub fn processing_configuration(
        mut self,
        input: crate::types::ProcessingConfiguration,
    ) -> Self {
        self.processing_configuration = Some(input);
        self
    }
    /// <p>The data processing configuration.</p>
    pub fn set_processing_configuration(
        mut self,
        input: std::option::Option<crate::types::ProcessingConfiguration>,
    ) -> Self {
        self.processing_configuration = input;
        self
    }
    /// <p>The Amazon S3 backup mode. After you create a delivery stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it. </p>
    pub fn s3_backup_mode(mut self, input: crate::types::S3BackupMode) -> Self {
        self.s3_backup_mode = Some(input);
        self
    }
    /// <p>The Amazon S3 backup mode. After you create a delivery stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it. </p>
    pub fn set_s3_backup_mode(
        mut self,
        input: std::option::Option<crate::types::S3BackupMode>,
    ) -> Self {
        self.s3_backup_mode = input;
        self
    }
    /// <p>The configuration for backup in Amazon S3.</p>
    pub fn s3_backup_configuration(
        mut self,
        input: crate::types::S3DestinationConfiguration,
    ) -> Self {
        self.s3_backup_configuration = Some(input);
        self
    }
    /// <p>The configuration for backup in Amazon S3.</p>
    pub fn set_s3_backup_configuration(
        mut self,
        input: std::option::Option<crate::types::S3DestinationConfiguration>,
    ) -> Self {
        self.s3_backup_configuration = input;
        self
    }
    /// <p>The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.</p>
    pub fn data_format_conversion_configuration(
        mut self,
        input: crate::types::DataFormatConversionConfiguration,
    ) -> Self {
        self.data_format_conversion_configuration = Some(input);
        self
    }
    /// <p>The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.</p>
    pub fn set_data_format_conversion_configuration(
        mut self,
        input: std::option::Option<crate::types::DataFormatConversionConfiguration>,
    ) -> Self {
        self.data_format_conversion_configuration = input;
        self
    }
    /// <p>The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations. </p>
    pub fn dynamic_partitioning_configuration(
        mut self,
        input: crate::types::DynamicPartitioningConfiguration,
    ) -> Self {
        self.dynamic_partitioning_configuration = Some(input);
        self
    }
    /// <p>The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations. </p>
    pub fn set_dynamic_partitioning_configuration(
        mut self,
        input: std::option::Option<crate::types::DynamicPartitioningConfiguration>,
    ) -> Self {
        self.dynamic_partitioning_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`ExtendedS3DestinationConfiguration`](crate::types::ExtendedS3DestinationConfiguration).
    pub fn build(self) -> crate::types::ExtendedS3DestinationConfiguration {
        crate::types::ExtendedS3DestinationConfiguration {
            role_arn: self.role_arn,
            bucket_arn: self.bucket_arn,
            prefix: self.prefix,
            error_output_prefix: self.error_output_prefix,
            buffering_hints: self.buffering_hints,
            compression_format: self.compression_format,
            encryption_configuration: self.encryption_configuration,
            cloud_watch_logging_options: self.cloud_watch_logging_options,
            processing_configuration: self.processing_configuration,
            s3_backup_mode: self.s3_backup_mode,
            s3_backup_configuration: self.s3_backup_configuration,
            data_format_conversion_configuration: self.data_format_conversion_configuration,
            dynamic_partitioning_configuration: self.dynamic_partitioning_configuration,
        }
    }
}
