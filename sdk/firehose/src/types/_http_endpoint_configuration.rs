// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of the HTTP endpoint to which Kinesis Firehose delivers data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct HttpEndpointConfiguration {
    /// <p>The URL of the HTTP endpoint selected as the destination.</p> <important>
    /// <p>If you choose an HTTP endpoint as your destination, review and follow the instructions in the <a href="https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html">Appendix - HTTP Endpoint Delivery Request and Response Specifications</a>.</p>
    /// </important>
    pub url: ::std::string::String,
    /// <p>The name of the HTTP endpoint selected as the destination.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.</p>
    pub access_key: ::std::option::Option<::std::string::String>,
}
impl HttpEndpointConfiguration {
    /// <p>The URL of the HTTP endpoint selected as the destination.</p> <important>
    /// <p>If you choose an HTTP endpoint as your destination, review and follow the instructions in the <a href="https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html">Appendix - HTTP Endpoint Delivery Request and Response Specifications</a>.</p>
    /// </important>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>The name of the HTTP endpoint selected as the destination.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.</p>
    pub fn access_key(&self) -> ::std::option::Option<&str> {
        self.access_key.as_deref()
    }
}
impl ::std::fmt::Debug for HttpEndpointConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("HttpEndpointConfiguration");
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &self.name);
        formatter.field("access_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl HttpEndpointConfiguration {
    /// Creates a new builder-style object to manufacture [`HttpEndpointConfiguration`](crate::types::HttpEndpointConfiguration).
    pub fn builder() -> crate::types::builders::HttpEndpointConfigurationBuilder {
        crate::types::builders::HttpEndpointConfigurationBuilder::default()
    }
}

/// A builder for [`HttpEndpointConfiguration`](crate::types::HttpEndpointConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct HttpEndpointConfigurationBuilder {
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) access_key: ::std::option::Option<::std::string::String>,
}
impl HttpEndpointConfigurationBuilder {
    /// <p>The URL of the HTTP endpoint selected as the destination.</p> <important>
    /// <p>If you choose an HTTP endpoint as your destination, review and follow the instructions in the <a href="https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html">Appendix - HTTP Endpoint Delivery Request and Response Specifications</a>.</p>
    /// </important>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the HTTP endpoint selected as the destination.</p> <important>
    /// <p>If you choose an HTTP endpoint as your destination, review and follow the instructions in the <a href="https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html">Appendix - HTTP Endpoint Delivery Request and Response Specifications</a>.</p>
    /// </important>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL of the HTTP endpoint selected as the destination.</p> <important>
    /// <p>If you choose an HTTP endpoint as your destination, review and follow the instructions in the <a href="https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html">Appendix - HTTP Endpoint Delivery Request and Response Specifications</a>.</p>
    /// </important>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The name of the HTTP endpoint selected as the destination.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the HTTP endpoint selected as the destination.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the HTTP endpoint selected as the destination.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.</p>
    pub fn access_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.</p>
    pub fn set_access_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_key = input;
        self
    }
    /// <p>The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.</p>
    pub fn get_access_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_key
    }
    /// Consumes the builder and constructs a [`HttpEndpointConfiguration`](crate::types::HttpEndpointConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`url`](crate::types::builders::HttpEndpointConfigurationBuilder::url)
    pub fn build(self) -> ::std::result::Result<crate::types::HttpEndpointConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HttpEndpointConfiguration {
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building HttpEndpointConfiguration",
                )
            })?,
            name: self.name,
            access_key: self.access_key,
        })
    }
}
impl ::std::fmt::Debug for HttpEndpointConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("HttpEndpointConfigurationBuilder");
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &self.name);
        formatter.field("access_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
