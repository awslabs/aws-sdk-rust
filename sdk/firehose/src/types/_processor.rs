// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a data processor.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Processor {
    /// <p>The type of processor.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ProcessorType>,
    /// <p>The processor parameters.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<std::vec::Vec<crate::types::ProcessorParameter>>,
}
impl Processor {
    /// <p>The type of processor.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ProcessorType> {
        self.r#type.as_ref()
    }
    /// <p>The processor parameters.</p>
    pub fn parameters(&self) -> std::option::Option<&[crate::types::ProcessorParameter]> {
        self.parameters.as_deref()
    }
}
impl Processor {
    /// Creates a new builder-style object to manufacture [`Processor`](crate::types::Processor).
    pub fn builder() -> crate::types::builders::ProcessorBuilder {
        crate::types::builders::ProcessorBuilder::default()
    }
}

/// A builder for [`Processor`](crate::types::Processor).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProcessorBuilder {
    pub(crate) r#type: std::option::Option<crate::types::ProcessorType>,
    pub(crate) parameters: std::option::Option<std::vec::Vec<crate::types::ProcessorParameter>>,
}
impl ProcessorBuilder {
    /// <p>The type of processor.</p>
    pub fn r#type(mut self, input: crate::types::ProcessorType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of processor.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ProcessorType>) -> Self {
        self.r#type = input;
        self
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The processor parameters.</p>
    pub fn parameters(mut self, input: crate::types::ProcessorParameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = Some(v);
        self
    }
    /// <p>The processor parameters.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProcessorParameter>>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`Processor`](crate::types::Processor).
    pub fn build(self) -> crate::types::Processor {
        crate::types::Processor {
            r#type: self.r#type,
            parameters: self.parameters,
        }
    }
}
