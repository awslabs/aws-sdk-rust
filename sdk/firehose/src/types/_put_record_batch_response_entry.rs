// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the result for an individual record from a <code>PutRecordBatch</code> request. If the record is successfully added to your delivery stream, it receives a record ID. If the record fails to be added to your delivery stream, the result includes an error code and an error message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutRecordBatchResponseEntry {
    /// <p>The ID of the record.</p>
    #[doc(hidden)]
    pub record_id: std::option::Option<std::string::String>,
    /// <p>The error code for an individual record result.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
    /// <p>The error message for an individual record result.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl PutRecordBatchResponseEntry {
    /// <p>The ID of the record.</p>
    pub fn record_id(&self) -> std::option::Option<&str> {
        self.record_id.as_deref()
    }
    /// <p>The error code for an individual record result.</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The error message for an individual record result.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl PutRecordBatchResponseEntry {
    /// Creates a new builder-style object to manufacture [`PutRecordBatchResponseEntry`](crate::types::PutRecordBatchResponseEntry).
    pub fn builder() -> crate::types::builders::PutRecordBatchResponseEntryBuilder {
        crate::types::builders::PutRecordBatchResponseEntryBuilder::default()
    }
}

/// A builder for [`PutRecordBatchResponseEntry`](crate::types::PutRecordBatchResponseEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutRecordBatchResponseEntryBuilder {
    pub(crate) record_id: std::option::Option<std::string::String>,
    pub(crate) error_code: std::option::Option<std::string::String>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl PutRecordBatchResponseEntryBuilder {
    /// <p>The ID of the record.</p>
    pub fn record_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.record_id = Some(input.into());
        self
    }
    /// <p>The ID of the record.</p>
    pub fn set_record_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.record_id = input;
        self
    }
    /// <p>The error code for an individual record result.</p>
    pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_code = Some(input.into());
        self
    }
    /// <p>The error code for an individual record result.</p>
    pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error message for an individual record result.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>The error message for an individual record result.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`PutRecordBatchResponseEntry`](crate::types::PutRecordBatchResponseEntry).
    pub fn build(self) -> crate::types::PutRecordBatchResponseEntry {
        crate::types::PutRecordBatchResponseEntry {
            record_id: self.record_id,
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
