// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data before it writes it to Amazon S3. This parameter is required if <code>Enabled</code> is set to true.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OutputFormatConfiguration {
    /// <p>Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. If both are non-null, the server rejects the request.</p>
    #[doc(hidden)]
    pub serializer: std::option::Option<crate::types::Serializer>,
}
impl OutputFormatConfiguration {
    /// <p>Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. If both are non-null, the server rejects the request.</p>
    pub fn serializer(&self) -> std::option::Option<&crate::types::Serializer> {
        self.serializer.as_ref()
    }
}
impl OutputFormatConfiguration {
    /// Creates a new builder-style object to manufacture [`OutputFormatConfiguration`](crate::types::OutputFormatConfiguration).
    pub fn builder() -> crate::types::builders::OutputFormatConfigurationBuilder {
        crate::types::builders::OutputFormatConfigurationBuilder::default()
    }
}

/// A builder for [`OutputFormatConfiguration`](crate::types::OutputFormatConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OutputFormatConfigurationBuilder {
    pub(crate) serializer: std::option::Option<crate::types::Serializer>,
}
impl OutputFormatConfigurationBuilder {
    /// <p>Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. If both are non-null, the server rejects the request.</p>
    pub fn serializer(mut self, input: crate::types::Serializer) -> Self {
        self.serializer = Some(input);
        self
    }
    /// <p>Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. If both are non-null, the server rejects the request.</p>
    pub fn set_serializer(mut self, input: std::option::Option<crate::types::Serializer>) -> Self {
        self.serializer = input;
        self
    }
    /// Consumes the builder and constructs a [`OutputFormatConfiguration`](crate::types::OutputFormatConfiguration).
    pub fn build(self) -> crate::types::OutputFormatConfiguration {
        crate::types::OutputFormatConfiguration {
            serializer: self.serializer,
        }
    }
}
