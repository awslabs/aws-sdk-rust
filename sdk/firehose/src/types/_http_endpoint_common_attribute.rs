// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the metadata that's delivered to the specified HTTP endpoint destination.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct HttpEndpointCommonAttribute {
    /// <p>The name of the HTTP endpoint common attribute.</p>
    #[doc(hidden)]
    pub attribute_name: std::option::Option<std::string::String>,
    /// <p>The value of the HTTP endpoint common attribute.</p>
    #[doc(hidden)]
    pub attribute_value: std::option::Option<std::string::String>,
}
impl HttpEndpointCommonAttribute {
    /// <p>The name of the HTTP endpoint common attribute.</p>
    pub fn attribute_name(&self) -> std::option::Option<&str> {
        self.attribute_name.as_deref()
    }
    /// <p>The value of the HTTP endpoint common attribute.</p>
    pub fn attribute_value(&self) -> std::option::Option<&str> {
        self.attribute_value.as_deref()
    }
}
impl std::fmt::Debug for HttpEndpointCommonAttribute {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("HttpEndpointCommonAttribute");
        formatter.field("attribute_name", &"*** Sensitive Data Redacted ***");
        formatter.field("attribute_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl HttpEndpointCommonAttribute {
    /// Creates a new builder-style object to manufacture [`HttpEndpointCommonAttribute`](crate::types::HttpEndpointCommonAttribute).
    pub fn builder() -> crate::types::builders::HttpEndpointCommonAttributeBuilder {
        crate::types::builders::HttpEndpointCommonAttributeBuilder::default()
    }
}

/// A builder for [`HttpEndpointCommonAttribute`](crate::types::HttpEndpointCommonAttribute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct HttpEndpointCommonAttributeBuilder {
    pub(crate) attribute_name: std::option::Option<std::string::String>,
    pub(crate) attribute_value: std::option::Option<std::string::String>,
}
impl HttpEndpointCommonAttributeBuilder {
    /// <p>The name of the HTTP endpoint common attribute.</p>
    pub fn attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute_name = Some(input.into());
        self
    }
    /// <p>The name of the HTTP endpoint common attribute.</p>
    pub fn set_attribute_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The value of the HTTP endpoint common attribute.</p>
    pub fn attribute_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute_value = Some(input.into());
        self
    }
    /// <p>The value of the HTTP endpoint common attribute.</p>
    pub fn set_attribute_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute_value = input;
        self
    }
    /// Consumes the builder and constructs a [`HttpEndpointCommonAttribute`](crate::types::HttpEndpointCommonAttribute).
    pub fn build(self) -> crate::types::HttpEndpointCommonAttribute {
        crate::types::HttpEndpointCommonAttribute {
            attribute_name: self.attribute_name,
            attribute_value: self.attribute_value,
        }
    }
}
impl std::fmt::Debug for HttpEndpointCommonAttributeBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("HttpEndpointCommonAttributeBuilder");
        formatter.field("attribute_name", &"*** Sensitive Data Redacted ***");
        formatter.field("attribute_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
