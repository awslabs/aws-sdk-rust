// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_delivery_stream_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeliveryStreamInput,
) {
    if let Some(var_1) = &input.delivery_stream_name {
        object.key("DeliveryStreamName").string(var_1);
    }
    if let Some(var_2) = &input.delivery_stream_type {
        object.key("DeliveryStreamType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.kinesis_stream_source_configuration {
        let mut object_4 = object
            .key("KinesisStreamSourceConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_kinesis_stream_source_configuration(
            &mut object_4,
            var_3,
        );
        object_4.finish();
    }
    if let Some(var_5) = &input.delivery_stream_encryption_configuration_input {
        let mut object_6 = object
            .key("DeliveryStreamEncryptionConfigurationInput")
            .start_object();
        crate::json_ser::serialize_structure_delivery_stream_encryption_configuration_input(
            &mut object_6,
            var_5,
        );
        object_6.finish();
    }
    if let Some(var_7) = &input.s3_destination_configuration {
        let mut object_8 = object.key("S3DestinationConfiguration").start_object();
        crate::json_ser::serialize_structure_s3_destination_configuration(&mut object_8, var_7);
        object_8.finish();
    }
    if let Some(var_9) = &input.extended_s3_destination_configuration {
        let mut object_10 = object
            .key("ExtendedS3DestinationConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_extended_s3_destination_configuration(
            &mut object_10,
            var_9,
        );
        object_10.finish();
    }
    if let Some(var_11) = &input.redshift_destination_configuration {
        let mut object_12 = object
            .key("RedshiftDestinationConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_redshift_destination_configuration(
            &mut object_12,
            var_11,
        );
        object_12.finish();
    }
    if let Some(var_13) = &input.elasticsearch_destination_configuration {
        let mut object_14 = object
            .key("ElasticsearchDestinationConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_elasticsearch_destination_configuration(
            &mut object_14,
            var_13,
        );
        object_14.finish();
    }
    if let Some(var_15) = &input.splunk_destination_configuration {
        let mut object_16 = object.key("SplunkDestinationConfiguration").start_object();
        crate::json_ser::serialize_structure_splunk_destination_configuration(
            &mut object_16,
            var_15,
        );
        object_16.finish();
    }
    if let Some(var_17) = &input.http_endpoint_destination_configuration {
        let mut object_18 = object
            .key("HttpEndpointDestinationConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_http_endpoint_destination_configuration(
            &mut object_18,
            var_17,
        );
        object_18.finish();
    }
    if let Some(var_19) = &input.tags {
        let mut array_20 = object.key("Tags").start_array();
        for item_21 in var_19 {
            {
                let mut object_22 = array_20.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_22, item_21);
                object_22.finish();
            }
        }
        array_20.finish();
    }
}

pub fn serialize_structure_delete_delivery_stream_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDeliveryStreamInput,
) {
    if let Some(var_23) = &input.delivery_stream_name {
        object.key("DeliveryStreamName").string(var_23);
    }
    if let Some(var_24) = &input.allow_force_delete {
        object.key("AllowForceDelete").boolean(*var_24);
    }
}

pub fn serialize_structure_describe_delivery_stream_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeliveryStreamInput,
) {
    if let Some(var_25) = &input.delivery_stream_name {
        object.key("DeliveryStreamName").string(var_25);
    }
    if let Some(var_26) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_26).into()),
        );
    }
    if let Some(var_27) = &input.exclusive_start_destination_id {
        object.key("ExclusiveStartDestinationId").string(var_27);
    }
}

pub fn serialize_structure_list_delivery_streams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDeliveryStreamsInput,
) {
    if let Some(var_28) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_28).into()),
        );
    }
    if let Some(var_29) = &input.delivery_stream_type {
        object.key("DeliveryStreamType").string(var_29.as_str());
    }
    if let Some(var_30) = &input.exclusive_start_delivery_stream_name {
        object
            .key("ExclusiveStartDeliveryStreamName")
            .string(var_30);
    }
}

pub fn serialize_structure_list_tags_for_delivery_stream_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForDeliveryStreamInput,
) {
    if let Some(var_31) = &input.delivery_stream_name {
        object.key("DeliveryStreamName").string(var_31);
    }
    if let Some(var_32) = &input.exclusive_start_tag_key {
        object.key("ExclusiveStartTagKey").string(var_32);
    }
    if let Some(var_33) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_33).into()),
        );
    }
}

pub fn serialize_structure_put_record_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRecordInput,
) {
    if let Some(var_34) = &input.delivery_stream_name {
        object.key("DeliveryStreamName").string(var_34);
    }
    if let Some(var_35) = &input.record {
        let mut object_36 = object.key("Record").start_object();
        crate::json_ser::serialize_structure_record(&mut object_36, var_35);
        object_36.finish();
    }
}

pub fn serialize_structure_put_record_batch_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRecordBatchInput,
) {
    if let Some(var_37) = &input.delivery_stream_name {
        object.key("DeliveryStreamName").string(var_37);
    }
    if let Some(var_38) = &input.records {
        let mut array_39 = object.key("Records").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_record(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
}

pub fn serialize_structure_start_delivery_stream_encryption_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDeliveryStreamEncryptionInput,
) {
    if let Some(var_42) = &input.delivery_stream_name {
        object.key("DeliveryStreamName").string(var_42);
    }
    if let Some(var_43) = &input.delivery_stream_encryption_configuration_input {
        let mut object_44 = object
            .key("DeliveryStreamEncryptionConfigurationInput")
            .start_object();
        crate::json_ser::serialize_structure_delivery_stream_encryption_configuration_input(
            &mut object_44,
            var_43,
        );
        object_44.finish();
    }
}

pub fn serialize_structure_stop_delivery_stream_encryption_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDeliveryStreamEncryptionInput,
) {
    if let Some(var_45) = &input.delivery_stream_name {
        object.key("DeliveryStreamName").string(var_45);
    }
}

pub fn serialize_structure_tag_delivery_stream_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagDeliveryStreamInput,
) {
    if let Some(var_46) = &input.delivery_stream_name {
        object.key("DeliveryStreamName").string(var_46);
    }
    if let Some(var_47) = &input.tags {
        let mut array_48 = object.key("Tags").start_array();
        for item_49 in var_47 {
            {
                let mut object_50 = array_48.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_50, item_49);
                object_50.finish();
            }
        }
        array_48.finish();
    }
}

pub fn serialize_structure_untag_delivery_stream_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagDeliveryStreamInput,
) {
    if let Some(var_51) = &input.delivery_stream_name {
        object.key("DeliveryStreamName").string(var_51);
    }
    if let Some(var_52) = &input.tag_keys {
        let mut array_53 = object.key("TagKeys").start_array();
        for item_54 in var_52 {
            {
                array_53.value().string(item_54);
            }
        }
        array_53.finish();
    }
}

pub fn serialize_structure_update_destination_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDestinationInput,
) {
    if let Some(var_55) = &input.delivery_stream_name {
        object.key("DeliveryStreamName").string(var_55);
    }
    if let Some(var_56) = &input.current_delivery_stream_version_id {
        object.key("CurrentDeliveryStreamVersionId").string(var_56);
    }
    if let Some(var_57) = &input.destination_id {
        object.key("DestinationId").string(var_57);
    }
    if let Some(var_58) = &input.s3_destination_update {
        let mut object_59 = object.key("S3DestinationUpdate").start_object();
        crate::json_ser::serialize_structure_s3_destination_update(&mut object_59, var_58);
        object_59.finish();
    }
    if let Some(var_60) = &input.extended_s3_destination_update {
        let mut object_61 = object.key("ExtendedS3DestinationUpdate").start_object();
        crate::json_ser::serialize_structure_extended_s3_destination_update(&mut object_61, var_60);
        object_61.finish();
    }
    if let Some(var_62) = &input.redshift_destination_update {
        let mut object_63 = object.key("RedshiftDestinationUpdate").start_object();
        crate::json_ser::serialize_structure_redshift_destination_update(&mut object_63, var_62);
        object_63.finish();
    }
    if let Some(var_64) = &input.elasticsearch_destination_update {
        let mut object_65 = object.key("ElasticsearchDestinationUpdate").start_object();
        crate::json_ser::serialize_structure_elasticsearch_destination_update(
            &mut object_65,
            var_64,
        );
        object_65.finish();
    }
    if let Some(var_66) = &input.splunk_destination_update {
        let mut object_67 = object.key("SplunkDestinationUpdate").start_object();
        crate::json_ser::serialize_structure_splunk_destination_update(&mut object_67, var_66);
        object_67.finish();
    }
    if let Some(var_68) = &input.http_endpoint_destination_update {
        let mut object_69 = object.key("HttpEndpointDestinationUpdate").start_object();
        crate::json_ser::serialize_structure_http_endpoint_destination_update(
            &mut object_69,
            var_68,
        );
        object_69.finish();
    }
}

pub fn serialize_structure_kinesis_stream_source_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisStreamSourceConfiguration,
) {
    if let Some(var_70) = &input.kinesis_stream_arn {
        object.key("KinesisStreamARN").string(var_70);
    }
    if let Some(var_71) = &input.role_arn {
        object.key("RoleARN").string(var_71);
    }
}

pub fn serialize_structure_delivery_stream_encryption_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeliveryStreamEncryptionConfigurationInput,
) {
    if let Some(var_72) = &input.key_arn {
        object.key("KeyARN").string(var_72);
    }
    if let Some(var_73) = &input.key_type {
        object.key("KeyType").string(var_73.as_str());
    }
}

pub fn serialize_structure_s3_destination_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DestinationConfiguration,
) {
    if let Some(var_74) = &input.role_arn {
        object.key("RoleARN").string(var_74);
    }
    if let Some(var_75) = &input.bucket_arn {
        object.key("BucketARN").string(var_75);
    }
    if let Some(var_76) = &input.prefix {
        object.key("Prefix").string(var_76);
    }
    if let Some(var_77) = &input.error_output_prefix {
        object.key("ErrorOutputPrefix").string(var_77);
    }
    if let Some(var_78) = &input.buffering_hints {
        let mut object_79 = object.key("BufferingHints").start_object();
        crate::json_ser::serialize_structure_buffering_hints(&mut object_79, var_78);
        object_79.finish();
    }
    if let Some(var_80) = &input.compression_format {
        object.key("CompressionFormat").string(var_80.as_str());
    }
    if let Some(var_81) = &input.encryption_configuration {
        let mut object_82 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_encryption_configuration(&mut object_82, var_81);
        object_82.finish();
    }
    if let Some(var_83) = &input.cloud_watch_logging_options {
        let mut object_84 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_84, var_83);
        object_84.finish();
    }
}

pub fn serialize_structure_extended_s3_destination_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExtendedS3DestinationConfiguration,
) {
    if let Some(var_85) = &input.role_arn {
        object.key("RoleARN").string(var_85);
    }
    if let Some(var_86) = &input.bucket_arn {
        object.key("BucketARN").string(var_86);
    }
    if let Some(var_87) = &input.prefix {
        object.key("Prefix").string(var_87);
    }
    if let Some(var_88) = &input.error_output_prefix {
        object.key("ErrorOutputPrefix").string(var_88);
    }
    if let Some(var_89) = &input.buffering_hints {
        let mut object_90 = object.key("BufferingHints").start_object();
        crate::json_ser::serialize_structure_buffering_hints(&mut object_90, var_89);
        object_90.finish();
    }
    if let Some(var_91) = &input.compression_format {
        object.key("CompressionFormat").string(var_91.as_str());
    }
    if let Some(var_92) = &input.encryption_configuration {
        let mut object_93 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_encryption_configuration(&mut object_93, var_92);
        object_93.finish();
    }
    if let Some(var_94) = &input.cloud_watch_logging_options {
        let mut object_95 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_95, var_94);
        object_95.finish();
    }
    if let Some(var_96) = &input.processing_configuration {
        let mut object_97 = object.key("ProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_processing_configuration(&mut object_97, var_96);
        object_97.finish();
    }
    if let Some(var_98) = &input.s3_backup_mode {
        object.key("S3BackupMode").string(var_98.as_str());
    }
    if let Some(var_99) = &input.s3_backup_configuration {
        let mut object_100 = object.key("S3BackupConfiguration").start_object();
        crate::json_ser::serialize_structure_s3_destination_configuration(&mut object_100, var_99);
        object_100.finish();
    }
    if let Some(var_101) = &input.data_format_conversion_configuration {
        let mut object_102 = object
            .key("DataFormatConversionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_data_format_conversion_configuration(
            &mut object_102,
            var_101,
        );
        object_102.finish();
    }
}

pub fn serialize_structure_redshift_destination_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDestinationConfiguration,
) {
    if let Some(var_103) = &input.role_arn {
        object.key("RoleARN").string(var_103);
    }
    if let Some(var_104) = &input.cluster_jdbcurl {
        object.key("ClusterJDBCURL").string(var_104);
    }
    if let Some(var_105) = &input.copy_command {
        let mut object_106 = object.key("CopyCommand").start_object();
        crate::json_ser::serialize_structure_copy_command(&mut object_106, var_105);
        object_106.finish();
    }
    if let Some(var_107) = &input.username {
        object.key("Username").string(var_107);
    }
    if let Some(var_108) = &input.password {
        object.key("Password").string(var_108);
    }
    if let Some(var_109) = &input.retry_options {
        let mut object_110 = object.key("RetryOptions").start_object();
        crate::json_ser::serialize_structure_redshift_retry_options(&mut object_110, var_109);
        object_110.finish();
    }
    if let Some(var_111) = &input.s3_configuration {
        let mut object_112 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_s3_destination_configuration(&mut object_112, var_111);
        object_112.finish();
    }
    if let Some(var_113) = &input.processing_configuration {
        let mut object_114 = object.key("ProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_processing_configuration(&mut object_114, var_113);
        object_114.finish();
    }
    if let Some(var_115) = &input.s3_backup_mode {
        object.key("S3BackupMode").string(var_115.as_str());
    }
    if let Some(var_116) = &input.s3_backup_configuration {
        let mut object_117 = object.key("S3BackupConfiguration").start_object();
        crate::json_ser::serialize_structure_s3_destination_configuration(&mut object_117, var_116);
        object_117.finish();
    }
    if let Some(var_118) = &input.cloud_watch_logging_options {
        let mut object_119 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_119, var_118);
        object_119.finish();
    }
}

pub fn serialize_structure_elasticsearch_destination_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchDestinationConfiguration,
) {
    if let Some(var_120) = &input.role_arn {
        object.key("RoleARN").string(var_120);
    }
    if let Some(var_121) = &input.domain_arn {
        object.key("DomainARN").string(var_121);
    }
    if let Some(var_122) = &input.cluster_endpoint {
        object.key("ClusterEndpoint").string(var_122);
    }
    if let Some(var_123) = &input.index_name {
        object.key("IndexName").string(var_123);
    }
    if let Some(var_124) = &input.type_name {
        object.key("TypeName").string(var_124);
    }
    if let Some(var_125) = &input.index_rotation_period {
        object.key("IndexRotationPeriod").string(var_125.as_str());
    }
    if let Some(var_126) = &input.buffering_hints {
        let mut object_127 = object.key("BufferingHints").start_object();
        crate::json_ser::serialize_structure_elasticsearch_buffering_hints(
            &mut object_127,
            var_126,
        );
        object_127.finish();
    }
    if let Some(var_128) = &input.retry_options {
        let mut object_129 = object.key("RetryOptions").start_object();
        crate::json_ser::serialize_structure_elasticsearch_retry_options(&mut object_129, var_128);
        object_129.finish();
    }
    if let Some(var_130) = &input.s3_backup_mode {
        object.key("S3BackupMode").string(var_130.as_str());
    }
    if let Some(var_131) = &input.s3_configuration {
        let mut object_132 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_s3_destination_configuration(&mut object_132, var_131);
        object_132.finish();
    }
    if let Some(var_133) = &input.processing_configuration {
        let mut object_134 = object.key("ProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_processing_configuration(&mut object_134, var_133);
        object_134.finish();
    }
    if let Some(var_135) = &input.cloud_watch_logging_options {
        let mut object_136 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_136, var_135);
        object_136.finish();
    }
    if let Some(var_137) = &input.vpc_configuration {
        let mut object_138 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_vpc_configuration(&mut object_138, var_137);
        object_138.finish();
    }
}

pub fn serialize_structure_splunk_destination_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SplunkDestinationConfiguration,
) {
    if let Some(var_139) = &input.hec_endpoint {
        object.key("HECEndpoint").string(var_139);
    }
    if let Some(var_140) = &input.hec_endpoint_type {
        object.key("HECEndpointType").string(var_140.as_str());
    }
    if let Some(var_141) = &input.hec_token {
        object.key("HECToken").string(var_141);
    }
    if let Some(var_142) = &input.hec_acknowledgment_timeout_in_seconds {
        object.key("HECAcknowledgmentTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    if let Some(var_143) = &input.retry_options {
        let mut object_144 = object.key("RetryOptions").start_object();
        crate::json_ser::serialize_structure_splunk_retry_options(&mut object_144, var_143);
        object_144.finish();
    }
    if let Some(var_145) = &input.s3_backup_mode {
        object.key("S3BackupMode").string(var_145.as_str());
    }
    if let Some(var_146) = &input.s3_configuration {
        let mut object_147 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_s3_destination_configuration(&mut object_147, var_146);
        object_147.finish();
    }
    if let Some(var_148) = &input.processing_configuration {
        let mut object_149 = object.key("ProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_processing_configuration(&mut object_149, var_148);
        object_149.finish();
    }
    if let Some(var_150) = &input.cloud_watch_logging_options {
        let mut object_151 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_151, var_150);
        object_151.finish();
    }
}

pub fn serialize_structure_http_endpoint_destination_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpEndpointDestinationConfiguration,
) {
    if let Some(var_152) = &input.endpoint_configuration {
        let mut object_153 = object.key("EndpointConfiguration").start_object();
        crate::json_ser::serialize_structure_http_endpoint_configuration(&mut object_153, var_152);
        object_153.finish();
    }
    if let Some(var_154) = &input.buffering_hints {
        let mut object_155 = object.key("BufferingHints").start_object();
        crate::json_ser::serialize_structure_http_endpoint_buffering_hints(
            &mut object_155,
            var_154,
        );
        object_155.finish();
    }
    if let Some(var_156) = &input.cloud_watch_logging_options {
        let mut object_157 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_157, var_156);
        object_157.finish();
    }
    if let Some(var_158) = &input.request_configuration {
        let mut object_159 = object.key("RequestConfiguration").start_object();
        crate::json_ser::serialize_structure_http_endpoint_request_configuration(
            &mut object_159,
            var_158,
        );
        object_159.finish();
    }
    if let Some(var_160) = &input.processing_configuration {
        let mut object_161 = object.key("ProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_processing_configuration(&mut object_161, var_160);
        object_161.finish();
    }
    if let Some(var_162) = &input.role_arn {
        object.key("RoleARN").string(var_162);
    }
    if let Some(var_163) = &input.retry_options {
        let mut object_164 = object.key("RetryOptions").start_object();
        crate::json_ser::serialize_structure_http_endpoint_retry_options(&mut object_164, var_163);
        object_164.finish();
    }
    if let Some(var_165) = &input.s3_backup_mode {
        object.key("S3BackupMode").string(var_165.as_str());
    }
    if let Some(var_166) = &input.s3_configuration {
        let mut object_167 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_s3_destination_configuration(&mut object_167, var_166);
        object_167.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_168) = &input.key {
        object.key("Key").string(var_168);
    }
    if let Some(var_169) = &input.value {
        object.key("Value").string(var_169);
    }
}

pub fn serialize_structure_record(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Record,
) {
    if let Some(var_170) = &input.data {
        object
            .key("Data")
            .string_unchecked(&smithy_types::base64::encode(var_170));
    }
}

pub fn serialize_structure_s3_destination_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DestinationUpdate,
) {
    if let Some(var_171) = &input.role_arn {
        object.key("RoleARN").string(var_171);
    }
    if let Some(var_172) = &input.bucket_arn {
        object.key("BucketARN").string(var_172);
    }
    if let Some(var_173) = &input.prefix {
        object.key("Prefix").string(var_173);
    }
    if let Some(var_174) = &input.error_output_prefix {
        object.key("ErrorOutputPrefix").string(var_174);
    }
    if let Some(var_175) = &input.buffering_hints {
        let mut object_176 = object.key("BufferingHints").start_object();
        crate::json_ser::serialize_structure_buffering_hints(&mut object_176, var_175);
        object_176.finish();
    }
    if let Some(var_177) = &input.compression_format {
        object.key("CompressionFormat").string(var_177.as_str());
    }
    if let Some(var_178) = &input.encryption_configuration {
        let mut object_179 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_encryption_configuration(&mut object_179, var_178);
        object_179.finish();
    }
    if let Some(var_180) = &input.cloud_watch_logging_options {
        let mut object_181 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_181, var_180);
        object_181.finish();
    }
}

pub fn serialize_structure_extended_s3_destination_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExtendedS3DestinationUpdate,
) {
    if let Some(var_182) = &input.role_arn {
        object.key("RoleARN").string(var_182);
    }
    if let Some(var_183) = &input.bucket_arn {
        object.key("BucketARN").string(var_183);
    }
    if let Some(var_184) = &input.prefix {
        object.key("Prefix").string(var_184);
    }
    if let Some(var_185) = &input.error_output_prefix {
        object.key("ErrorOutputPrefix").string(var_185);
    }
    if let Some(var_186) = &input.buffering_hints {
        let mut object_187 = object.key("BufferingHints").start_object();
        crate::json_ser::serialize_structure_buffering_hints(&mut object_187, var_186);
        object_187.finish();
    }
    if let Some(var_188) = &input.compression_format {
        object.key("CompressionFormat").string(var_188.as_str());
    }
    if let Some(var_189) = &input.encryption_configuration {
        let mut object_190 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_encryption_configuration(&mut object_190, var_189);
        object_190.finish();
    }
    if let Some(var_191) = &input.cloud_watch_logging_options {
        let mut object_192 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_192, var_191);
        object_192.finish();
    }
    if let Some(var_193) = &input.processing_configuration {
        let mut object_194 = object.key("ProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_processing_configuration(&mut object_194, var_193);
        object_194.finish();
    }
    if let Some(var_195) = &input.s3_backup_mode {
        object.key("S3BackupMode").string(var_195.as_str());
    }
    if let Some(var_196) = &input.s3_backup_update {
        let mut object_197 = object.key("S3BackupUpdate").start_object();
        crate::json_ser::serialize_structure_s3_destination_update(&mut object_197, var_196);
        object_197.finish();
    }
    if let Some(var_198) = &input.data_format_conversion_configuration {
        let mut object_199 = object
            .key("DataFormatConversionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_data_format_conversion_configuration(
            &mut object_199,
            var_198,
        );
        object_199.finish();
    }
}

pub fn serialize_structure_redshift_destination_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDestinationUpdate,
) {
    if let Some(var_200) = &input.role_arn {
        object.key("RoleARN").string(var_200);
    }
    if let Some(var_201) = &input.cluster_jdbcurl {
        object.key("ClusterJDBCURL").string(var_201);
    }
    if let Some(var_202) = &input.copy_command {
        let mut object_203 = object.key("CopyCommand").start_object();
        crate::json_ser::serialize_structure_copy_command(&mut object_203, var_202);
        object_203.finish();
    }
    if let Some(var_204) = &input.username {
        object.key("Username").string(var_204);
    }
    if let Some(var_205) = &input.password {
        object.key("Password").string(var_205);
    }
    if let Some(var_206) = &input.retry_options {
        let mut object_207 = object.key("RetryOptions").start_object();
        crate::json_ser::serialize_structure_redshift_retry_options(&mut object_207, var_206);
        object_207.finish();
    }
    if let Some(var_208) = &input.s3_update {
        let mut object_209 = object.key("S3Update").start_object();
        crate::json_ser::serialize_structure_s3_destination_update(&mut object_209, var_208);
        object_209.finish();
    }
    if let Some(var_210) = &input.processing_configuration {
        let mut object_211 = object.key("ProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_processing_configuration(&mut object_211, var_210);
        object_211.finish();
    }
    if let Some(var_212) = &input.s3_backup_mode {
        object.key("S3BackupMode").string(var_212.as_str());
    }
    if let Some(var_213) = &input.s3_backup_update {
        let mut object_214 = object.key("S3BackupUpdate").start_object();
        crate::json_ser::serialize_structure_s3_destination_update(&mut object_214, var_213);
        object_214.finish();
    }
    if let Some(var_215) = &input.cloud_watch_logging_options {
        let mut object_216 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_216, var_215);
        object_216.finish();
    }
}

pub fn serialize_structure_elasticsearch_destination_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchDestinationUpdate,
) {
    if let Some(var_217) = &input.role_arn {
        object.key("RoleARN").string(var_217);
    }
    if let Some(var_218) = &input.domain_arn {
        object.key("DomainARN").string(var_218);
    }
    if let Some(var_219) = &input.cluster_endpoint {
        object.key("ClusterEndpoint").string(var_219);
    }
    if let Some(var_220) = &input.index_name {
        object.key("IndexName").string(var_220);
    }
    if let Some(var_221) = &input.type_name {
        object.key("TypeName").string(var_221);
    }
    if let Some(var_222) = &input.index_rotation_period {
        object.key("IndexRotationPeriod").string(var_222.as_str());
    }
    if let Some(var_223) = &input.buffering_hints {
        let mut object_224 = object.key("BufferingHints").start_object();
        crate::json_ser::serialize_structure_elasticsearch_buffering_hints(
            &mut object_224,
            var_223,
        );
        object_224.finish();
    }
    if let Some(var_225) = &input.retry_options {
        let mut object_226 = object.key("RetryOptions").start_object();
        crate::json_ser::serialize_structure_elasticsearch_retry_options(&mut object_226, var_225);
        object_226.finish();
    }
    if let Some(var_227) = &input.s3_update {
        let mut object_228 = object.key("S3Update").start_object();
        crate::json_ser::serialize_structure_s3_destination_update(&mut object_228, var_227);
        object_228.finish();
    }
    if let Some(var_229) = &input.processing_configuration {
        let mut object_230 = object.key("ProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_processing_configuration(&mut object_230, var_229);
        object_230.finish();
    }
    if let Some(var_231) = &input.cloud_watch_logging_options {
        let mut object_232 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_232, var_231);
        object_232.finish();
    }
}

pub fn serialize_structure_splunk_destination_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SplunkDestinationUpdate,
) {
    if let Some(var_233) = &input.hec_endpoint {
        object.key("HECEndpoint").string(var_233);
    }
    if let Some(var_234) = &input.hec_endpoint_type {
        object.key("HECEndpointType").string(var_234.as_str());
    }
    if let Some(var_235) = &input.hec_token {
        object.key("HECToken").string(var_235);
    }
    if let Some(var_236) = &input.hec_acknowledgment_timeout_in_seconds {
        object.key("HECAcknowledgmentTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_236).into()),
        );
    }
    if let Some(var_237) = &input.retry_options {
        let mut object_238 = object.key("RetryOptions").start_object();
        crate::json_ser::serialize_structure_splunk_retry_options(&mut object_238, var_237);
        object_238.finish();
    }
    if let Some(var_239) = &input.s3_backup_mode {
        object.key("S3BackupMode").string(var_239.as_str());
    }
    if let Some(var_240) = &input.s3_update {
        let mut object_241 = object.key("S3Update").start_object();
        crate::json_ser::serialize_structure_s3_destination_update(&mut object_241, var_240);
        object_241.finish();
    }
    if let Some(var_242) = &input.processing_configuration {
        let mut object_243 = object.key("ProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_processing_configuration(&mut object_243, var_242);
        object_243.finish();
    }
    if let Some(var_244) = &input.cloud_watch_logging_options {
        let mut object_245 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_245, var_244);
        object_245.finish();
    }
}

pub fn serialize_structure_http_endpoint_destination_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpEndpointDestinationUpdate,
) {
    if let Some(var_246) = &input.endpoint_configuration {
        let mut object_247 = object.key("EndpointConfiguration").start_object();
        crate::json_ser::serialize_structure_http_endpoint_configuration(&mut object_247, var_246);
        object_247.finish();
    }
    if let Some(var_248) = &input.buffering_hints {
        let mut object_249 = object.key("BufferingHints").start_object();
        crate::json_ser::serialize_structure_http_endpoint_buffering_hints(
            &mut object_249,
            var_248,
        );
        object_249.finish();
    }
    if let Some(var_250) = &input.cloud_watch_logging_options {
        let mut object_251 = object.key("CloudWatchLoggingOptions").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_options(&mut object_251, var_250);
        object_251.finish();
    }
    if let Some(var_252) = &input.request_configuration {
        let mut object_253 = object.key("RequestConfiguration").start_object();
        crate::json_ser::serialize_structure_http_endpoint_request_configuration(
            &mut object_253,
            var_252,
        );
        object_253.finish();
    }
    if let Some(var_254) = &input.processing_configuration {
        let mut object_255 = object.key("ProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_processing_configuration(&mut object_255, var_254);
        object_255.finish();
    }
    if let Some(var_256) = &input.role_arn {
        object.key("RoleARN").string(var_256);
    }
    if let Some(var_257) = &input.retry_options {
        let mut object_258 = object.key("RetryOptions").start_object();
        crate::json_ser::serialize_structure_http_endpoint_retry_options(&mut object_258, var_257);
        object_258.finish();
    }
    if let Some(var_259) = &input.s3_backup_mode {
        object.key("S3BackupMode").string(var_259.as_str());
    }
    if let Some(var_260) = &input.s3_update {
        let mut object_261 = object.key("S3Update").start_object();
        crate::json_ser::serialize_structure_s3_destination_update(&mut object_261, var_260);
        object_261.finish();
    }
}

pub fn serialize_structure_buffering_hints(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BufferingHints,
) {
    if let Some(var_262) = &input.size_in_m_bs {
        object.key("SizeInMBs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_262).into()),
        );
    }
    if let Some(var_263) = &input.interval_in_seconds {
        object.key("IntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_263).into()),
        );
    }
}

pub fn serialize_structure_encryption_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) {
    if let Some(var_264) = &input.no_encryption_config {
        object.key("NoEncryptionConfig").string(var_264.as_str());
    }
    if let Some(var_265) = &input.kms_encryption_config {
        let mut object_266 = object.key("KMSEncryptionConfig").start_object();
        crate::json_ser::serialize_structure_kms_encryption_config(&mut object_266, var_265);
        object_266.finish();
    }
}

pub fn serialize_structure_cloud_watch_logging_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchLoggingOptions,
) {
    if let Some(var_267) = &input.enabled {
        object.key("Enabled").boolean(*var_267);
    }
    if let Some(var_268) = &input.log_group_name {
        object.key("LogGroupName").string(var_268);
    }
    if let Some(var_269) = &input.log_stream_name {
        object.key("LogStreamName").string(var_269);
    }
}

pub fn serialize_structure_processing_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingConfiguration,
) {
    if let Some(var_270) = &input.enabled {
        object.key("Enabled").boolean(*var_270);
    }
    if let Some(var_271) = &input.processors {
        let mut array_272 = object.key("Processors").start_array();
        for item_273 in var_271 {
            {
                let mut object_274 = array_272.value().start_object();
                crate::json_ser::serialize_structure_processor(&mut object_274, item_273);
                object_274.finish();
            }
        }
        array_272.finish();
    }
}

pub fn serialize_structure_data_format_conversion_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataFormatConversionConfiguration,
) {
    if let Some(var_275) = &input.schema_configuration {
        let mut object_276 = object.key("SchemaConfiguration").start_object();
        crate::json_ser::serialize_structure_schema_configuration(&mut object_276, var_275);
        object_276.finish();
    }
    if let Some(var_277) = &input.input_format_configuration {
        let mut object_278 = object.key("InputFormatConfiguration").start_object();
        crate::json_ser::serialize_structure_input_format_configuration(&mut object_278, var_277);
        object_278.finish();
    }
    if let Some(var_279) = &input.output_format_configuration {
        let mut object_280 = object.key("OutputFormatConfiguration").start_object();
        crate::json_ser::serialize_structure_output_format_configuration(&mut object_280, var_279);
        object_280.finish();
    }
    if let Some(var_281) = &input.enabled {
        object.key("Enabled").boolean(*var_281);
    }
}

pub fn serialize_structure_copy_command(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CopyCommand,
) {
    if let Some(var_282) = &input.data_table_name {
        object.key("DataTableName").string(var_282);
    }
    if let Some(var_283) = &input.data_table_columns {
        object.key("DataTableColumns").string(var_283);
    }
    if let Some(var_284) = &input.copy_options {
        object.key("CopyOptions").string(var_284);
    }
}

pub fn serialize_structure_redshift_retry_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftRetryOptions,
) {
    if let Some(var_285) = &input.duration_in_seconds {
        object.key("DurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_285).into()),
        );
    }
}

pub fn serialize_structure_elasticsearch_buffering_hints(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchBufferingHints,
) {
    if let Some(var_286) = &input.interval_in_seconds {
        object.key("IntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_286).into()),
        );
    }
    if let Some(var_287) = &input.size_in_m_bs {
        object.key("SizeInMBs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_287).into()),
        );
    }
}

pub fn serialize_structure_elasticsearch_retry_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchRetryOptions,
) {
    if let Some(var_288) = &input.duration_in_seconds {
        object.key("DurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_288).into()),
        );
    }
}

pub fn serialize_structure_vpc_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfiguration,
) {
    if let Some(var_289) = &input.subnet_ids {
        let mut array_290 = object.key("SubnetIds").start_array();
        for item_291 in var_289 {
            {
                array_290.value().string(item_291);
            }
        }
        array_290.finish();
    }
    if let Some(var_292) = &input.role_arn {
        object.key("RoleARN").string(var_292);
    }
    if let Some(var_293) = &input.security_group_ids {
        let mut array_294 = object.key("SecurityGroupIds").start_array();
        for item_295 in var_293 {
            {
                array_294.value().string(item_295);
            }
        }
        array_294.finish();
    }
}

pub fn serialize_structure_splunk_retry_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SplunkRetryOptions,
) {
    if let Some(var_296) = &input.duration_in_seconds {
        object.key("DurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_296).into()),
        );
    }
}

pub fn serialize_structure_http_endpoint_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpEndpointConfiguration,
) {
    if let Some(var_297) = &input.url {
        object.key("Url").string(var_297);
    }
    if let Some(var_298) = &input.name {
        object.key("Name").string(var_298);
    }
    if let Some(var_299) = &input.access_key {
        object.key("AccessKey").string(var_299);
    }
}

pub fn serialize_structure_http_endpoint_buffering_hints(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpEndpointBufferingHints,
) {
    if let Some(var_300) = &input.size_in_m_bs {
        object.key("SizeInMBs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_300).into()),
        );
    }
    if let Some(var_301) = &input.interval_in_seconds {
        object.key("IntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_301).into()),
        );
    }
}

pub fn serialize_structure_http_endpoint_request_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpEndpointRequestConfiguration,
) {
    if let Some(var_302) = &input.content_encoding {
        object.key("ContentEncoding").string(var_302.as_str());
    }
    if let Some(var_303) = &input.common_attributes {
        let mut array_304 = object.key("CommonAttributes").start_array();
        for item_305 in var_303 {
            {
                let mut object_306 = array_304.value().start_object();
                crate::json_ser::serialize_structure_http_endpoint_common_attribute(
                    &mut object_306,
                    item_305,
                );
                object_306.finish();
            }
        }
        array_304.finish();
    }
}

pub fn serialize_structure_http_endpoint_retry_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpEndpointRetryOptions,
) {
    if let Some(var_307) = &input.duration_in_seconds {
        object.key("DurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_307).into()),
        );
    }
}

pub fn serialize_structure_kms_encryption_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KmsEncryptionConfig,
) {
    if let Some(var_308) = &input.awskms_key_arn {
        object.key("AWSKMSKeyARN").string(var_308);
    }
}

pub fn serialize_structure_processor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Processor,
) {
    if let Some(var_309) = &input.r#type {
        object.key("Type").string(var_309.as_str());
    }
    if let Some(var_310) = &input.parameters {
        let mut array_311 = object.key("Parameters").start_array();
        for item_312 in var_310 {
            {
                let mut object_313 = array_311.value().start_object();
                crate::json_ser::serialize_structure_processor_parameter(&mut object_313, item_312);
                object_313.finish();
            }
        }
        array_311.finish();
    }
}

pub fn serialize_structure_schema_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaConfiguration,
) {
    if let Some(var_314) = &input.role_arn {
        object.key("RoleARN").string(var_314);
    }
    if let Some(var_315) = &input.catalog_id {
        object.key("CatalogId").string(var_315);
    }
    if let Some(var_316) = &input.database_name {
        object.key("DatabaseName").string(var_316);
    }
    if let Some(var_317) = &input.table_name {
        object.key("TableName").string(var_317);
    }
    if let Some(var_318) = &input.region {
        object.key("Region").string(var_318);
    }
    if let Some(var_319) = &input.version_id {
        object.key("VersionId").string(var_319);
    }
}

pub fn serialize_structure_input_format_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputFormatConfiguration,
) {
    if let Some(var_320) = &input.deserializer {
        let mut object_321 = object.key("Deserializer").start_object();
        crate::json_ser::serialize_structure_deserializer(&mut object_321, var_320);
        object_321.finish();
    }
}

pub fn serialize_structure_output_format_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputFormatConfiguration,
) {
    if let Some(var_322) = &input.serializer {
        let mut object_323 = object.key("Serializer").start_object();
        crate::json_ser::serialize_structure_serializer(&mut object_323, var_322);
        object_323.finish();
    }
}

pub fn serialize_structure_http_endpoint_common_attribute(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpEndpointCommonAttribute,
) {
    if let Some(var_324) = &input.attribute_name {
        object.key("AttributeName").string(var_324);
    }
    if let Some(var_325) = &input.attribute_value {
        object.key("AttributeValue").string(var_325);
    }
}

pub fn serialize_structure_processor_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessorParameter,
) {
    if let Some(var_326) = &input.parameter_name {
        object.key("ParameterName").string(var_326.as_str());
    }
    if let Some(var_327) = &input.parameter_value {
        object.key("ParameterValue").string(var_327);
    }
}

pub fn serialize_structure_deserializer(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Deserializer,
) {
    if let Some(var_328) = &input.open_x_json_ser_de {
        let mut object_329 = object.key("OpenXJsonSerDe").start_object();
        crate::json_ser::serialize_structure_open_x_json_ser_de(&mut object_329, var_328);
        object_329.finish();
    }
    if let Some(var_330) = &input.hive_json_ser_de {
        let mut object_331 = object.key("HiveJsonSerDe").start_object();
        crate::json_ser::serialize_structure_hive_json_ser_de(&mut object_331, var_330);
        object_331.finish();
    }
}

pub fn serialize_structure_serializer(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Serializer,
) {
    if let Some(var_332) = &input.parquet_ser_de {
        let mut object_333 = object.key("ParquetSerDe").start_object();
        crate::json_ser::serialize_structure_parquet_ser_de(&mut object_333, var_332);
        object_333.finish();
    }
    if let Some(var_334) = &input.orc_ser_de {
        let mut object_335 = object.key("OrcSerDe").start_object();
        crate::json_ser::serialize_structure_orc_ser_de(&mut object_335, var_334);
        object_335.finish();
    }
}

pub fn serialize_structure_open_x_json_ser_de(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenXJsonSerDe,
) {
    if let Some(var_336) = &input.convert_dots_in_json_keys_to_underscores {
        object
            .key("ConvertDotsInJsonKeysToUnderscores")
            .boolean(*var_336);
    }
    if let Some(var_337) = &input.case_insensitive {
        object.key("CaseInsensitive").boolean(*var_337);
    }
    if let Some(var_338) = &input.column_to_json_key_mappings {
        let mut object_339 = object.key("ColumnToJsonKeyMappings").start_object();
        for (key_340, value_341) in var_338 {
            {
                object_339.key(key_340).string(value_341);
            }
        }
        object_339.finish();
    }
}

pub fn serialize_structure_hive_json_ser_de(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HiveJsonSerDe,
) {
    if let Some(var_342) = &input.timestamp_formats {
        let mut array_343 = object.key("TimestampFormats").start_array();
        for item_344 in var_342 {
            {
                array_343.value().string(item_344);
            }
        }
        array_343.finish();
    }
}

pub fn serialize_structure_parquet_ser_de(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParquetSerDe,
) {
    if let Some(var_345) = &input.block_size_bytes {
        object.key("BlockSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_345).into()),
        );
    }
    if let Some(var_346) = &input.page_size_bytes {
        object.key("PageSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_346).into()),
        );
    }
    if let Some(var_347) = &input.compression {
        object.key("Compression").string(var_347.as_str());
    }
    if let Some(var_348) = &input.enable_dictionary_compression {
        object.key("EnableDictionaryCompression").boolean(*var_348);
    }
    if let Some(var_349) = &input.max_padding_bytes {
        object.key("MaxPaddingBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_349).into()),
        );
    }
    if let Some(var_350) = &input.writer_version {
        object.key("WriterVersion").string(var_350.as_str());
    }
}

pub fn serialize_structure_orc_ser_de(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrcSerDe,
) {
    if let Some(var_351) = &input.stripe_size_bytes {
        object.key("StripeSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_351).into()),
        );
    }
    if let Some(var_352) = &input.block_size_bytes {
        object.key("BlockSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_352).into()),
        );
    }
    if let Some(var_353) = &input.row_index_stride {
        object.key("RowIndexStride").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_353).into()),
        );
    }
    if let Some(var_354) = &input.enable_padding {
        object.key("EnablePadding").boolean(*var_354);
    }
    if let Some(var_355) = &input.padding_tolerance {
        object.key("PaddingTolerance").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_355).into()),
        );
    }
    if let Some(var_356) = &input.compression {
        object.key("Compression").string(var_356.as_str());
    }
    if let Some(var_357) = &input.bloom_filter_columns {
        let mut array_358 = object.key("BloomFilterColumns").start_array();
        for item_359 in var_357 {
            {
                array_358.value().string(item_359);
            }
        }
        array_358.finish();
    }
    if let Some(var_360) = &input.bloom_filter_false_positive_probability {
        object.key("BloomFilterFalsePositiveProbability").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_360).into()),
        );
    }
    if let Some(var_361) = &input.dictionary_key_threshold {
        object.key("DictionaryKeyThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_361).into()),
        );
    }
    if let Some(var_362) = &input.format_version {
        object.key("FormatVersion").string(var_362.as_str());
    }
}
