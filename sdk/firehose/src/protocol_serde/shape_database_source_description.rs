// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_database_source_description<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::DatabaseSourceDescription>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DatabaseSourceDescriptionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Type" => {
                            builder = builder.set_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DatabaseType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Endpoint" => {
                            builder = builder.set_endpoint(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Port" => {
                            builder = builder.set_port(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "SSLMode" => {
                            builder = builder.set_ssl_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::SslMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Databases" => {
                            builder = builder.set_databases(crate::protocol_serde::shape_database_list::de_database_list(tokens)?);
                        }
                        "Tables" => {
                            builder = builder.set_tables(crate::protocol_serde::shape_database_table_list::de_database_table_list(tokens)?);
                        }
                        "Columns" => {
                            builder = builder.set_columns(crate::protocol_serde::shape_database_column_list::de_database_column_list(tokens)?);
                        }
                        "SurrogateKeys" => {
                            builder = builder.set_surrogate_keys(
                                crate::protocol_serde::shape_database_column_include_or_exclude_list::de_database_column_include_or_exclude_list(
                                    tokens,
                                )?,
                            );
                        }
                        "SnapshotWatermarkTable" => {
                            builder = builder.set_snapshot_watermark_table(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SnapshotInfo" => {
                            builder = builder.set_snapshot_info(
                                crate::protocol_serde::shape_database_snapshot_info_list::de_database_snapshot_info_list(tokens)?,
                            );
                        }
                        "DatabaseSourceAuthenticationConfiguration" => {
                            builder = builder.set_database_source_authentication_configuration(
                                    crate::protocol_serde::shape_database_source_authentication_configuration::de_database_source_authentication_configuration(tokens)?
                                );
                        }
                        "DatabaseSourceVPCConfiguration" => {
                            builder = builder.set_database_source_vpc_configuration(
                                crate::protocol_serde::shape_database_source_vpc_configuration::de_database_source_vpc_configuration(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
