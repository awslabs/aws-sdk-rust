// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_amazon_open_search_serverless_destination_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AmazonOpenSearchServerlessDestinationUpdate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.role_arn {
        object.key("RoleARN").string(var_1.as_str());
    }
    if let Some(var_2) = &input.collection_endpoint {
        object.key("CollectionEndpoint").string(var_2.as_str());
    }
    if let Some(var_3) = &input.index_name {
        object.key("IndexName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.buffering_hints {
        #[allow(unused_mut)]
        let mut object_5 = object.key("BufferingHints").start_object();
        crate::protocol_serde::shape_amazon_open_search_serverless_buffering_hints::ser_amazon_open_search_serverless_buffering_hints(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.retry_options {
        #[allow(unused_mut)]
        let mut object_7 = object.key("RetryOptions").start_object();
        crate::protocol_serde::shape_amazon_open_search_serverless_retry_options::ser_amazon_open_search_serverless_retry_options(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.s3_update {
        #[allow(unused_mut)]
        let mut object_9 = object.key("S3Update").start_object();
        crate::protocol_serde::shape_s3_destination_update::ser_s3_destination_update(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.processing_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("ProcessingConfiguration").start_object();
        crate::protocol_serde::shape_processing_configuration::ser_processing_configuration(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.cloud_watch_logging_options {
        #[allow(unused_mut)]
        let mut object_13 = object.key("CloudWatchLoggingOptions").start_object();
        crate::protocol_serde::shape_cloud_watch_logging_options::ser_cloud_watch_logging_options(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    Ok(())
}
