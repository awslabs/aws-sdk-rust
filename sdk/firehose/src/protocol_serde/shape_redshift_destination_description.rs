// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_redshift_destination_description<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::RedshiftDestinationDescription>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder =
                crate::types::builders::RedshiftDestinationDescriptionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "RoleARN" => {
                                builder = builder.set_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ClusterJDBCURL" => {
                                builder = builder.set_cluster_jdbcurl(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CopyCommand" => {
                                builder = builder.set_copy_command(
                                    crate::protocol_serde::shape_copy_command::de_copy_command(
                                        tokens,
                                    )?,
                                );
                            }
                            "Username" => {
                                builder = builder.set_username(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RetryOptions" => {
                                builder = builder.set_retry_options(
                                    crate::protocol_serde::shape_redshift_retry_options::de_redshift_retry_options(tokens)?
                                );
                            }
                            "S3DestinationDescription" => {
                                builder = builder.set_s3_destination_description(
                                    crate::protocol_serde::shape_s3_destination_description::de_s3_destination_description(tokens)?
                                );
                            }
                            "ProcessingConfiguration" => {
                                builder = builder.set_processing_configuration(
                                    crate::protocol_serde::shape_processing_configuration::de_processing_configuration(tokens)?
                                );
                            }
                            "S3BackupMode" => {
                                builder = builder.set_s3_backup_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::RedshiftS3BackupMode::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "S3BackupDescription" => {
                                builder = builder.set_s3_backup_description(
                                    crate::protocol_serde::shape_s3_destination_description::de_s3_destination_description(tokens)?
                                );
                            }
                            "CloudWatchLoggingOptions" => {
                                builder = builder.set_cloud_watch_logging_options(
                                    crate::protocol_serde::shape_cloud_watch_logging_options::de_cloud_watch_logging_options(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
