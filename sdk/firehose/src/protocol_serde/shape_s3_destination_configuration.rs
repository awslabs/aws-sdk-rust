// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_s3_destination_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::S3DestinationConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("RoleARN").string(input.role_arn.as_str());
    }
    {
        object.key("BucketARN").string(input.bucket_arn.as_str());
    }
    if let Some(var_1) = &input.prefix {
        object.key("Prefix").string(var_1.as_str());
    }
    if let Some(var_2) = &input.error_output_prefix {
        object.key("ErrorOutputPrefix").string(var_2.as_str());
    }
    if let Some(var_3) = &input.buffering_hints {
        #[allow(unused_mut)]
        let mut object_4 = object.key("BufferingHints").start_object();
        crate::protocol_serde::shape_buffering_hints::ser_buffering_hints(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.compression_format {
        object.key("CompressionFormat").string(var_5.as_str());
    }
    if let Some(var_6) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("EncryptionConfiguration").start_object();
        crate::protocol_serde::shape_encryption_configuration::ser_encryption_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.cloud_watch_logging_options {
        #[allow(unused_mut)]
        let mut object_9 = object.key("CloudWatchLoggingOptions").start_object();
        crate::protocol_serde::shape_cloud_watch_logging_options::ser_cloud_watch_logging_options(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}
