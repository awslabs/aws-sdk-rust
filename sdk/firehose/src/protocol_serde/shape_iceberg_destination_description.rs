// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_iceberg_destination_description<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::IcebergDestinationDescription>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::IcebergDestinationDescriptionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DestinationTableConfigurationList" => {
                            builder = builder.set_destination_table_configuration_list(
                                crate::protocol_serde::shape_destination_table_configuration_list::de_destination_table_configuration_list(tokens)?,
                            );
                        }
                        "SchemaEvolutionConfiguration" => {
                            builder = builder.set_schema_evolution_configuration(
                                crate::protocol_serde::shape_schema_evolution_configuration::de_schema_evolution_configuration(tokens)?,
                            );
                        }
                        "TableCreationConfiguration" => {
                            builder = builder.set_table_creation_configuration(
                                crate::protocol_serde::shape_table_creation_configuration::de_table_creation_configuration(tokens)?,
                            );
                        }
                        "BufferingHints" => {
                            builder = builder.set_buffering_hints(crate::protocol_serde::shape_buffering_hints::de_buffering_hints(tokens)?);
                        }
                        "CloudWatchLoggingOptions" => {
                            builder = builder.set_cloud_watch_logging_options(
                                crate::protocol_serde::shape_cloud_watch_logging_options::de_cloud_watch_logging_options(tokens)?,
                            );
                        }
                        "ProcessingConfiguration" => {
                            builder = builder.set_processing_configuration(
                                crate::protocol_serde::shape_processing_configuration::de_processing_configuration(tokens)?,
                            );
                        }
                        "S3BackupMode" => {
                            builder = builder.set_s3_backup_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::IcebergS3BackupMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "RetryOptions" => {
                            builder = builder.set_retry_options(crate::protocol_serde::shape_retry_options::de_retry_options(tokens)?);
                        }
                        "RoleARN" => {
                            builder = builder.set_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AppendOnly" => {
                            builder = builder.set_append_only(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "CatalogConfiguration" => {
                            builder = builder
                                .set_catalog_configuration(crate::protocol_serde::shape_catalog_configuration::de_catalog_configuration(tokens)?);
                        }
                        "S3DestinationDescription" => {
                            builder = builder.set_s3_destination_description(
                                crate::protocol_serde::shape_s3_destination_description::de_s3_destination_description(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
