// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateDestinationOutput {}
impl std::fmt::Debug for UpdateDestinationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDestinationOutput");
        formatter.finish()
    }
}
/// See [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput)
pub mod update_destination_output {
    /// A builder for [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput)
        pub fn build(self) -> crate::output::UpdateDestinationOutput {
            crate::output::UpdateDestinationOutput {}
        }
    }
}
impl UpdateDestinationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput)
    pub fn builder() -> crate::output::update_destination_output::Builder {
        crate::output::update_destination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagDeliveryStreamOutput {}
impl std::fmt::Debug for UntagDeliveryStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagDeliveryStreamOutput");
        formatter.finish()
    }
}
/// See [`UntagDeliveryStreamOutput`](crate::output::UntagDeliveryStreamOutput)
pub mod untag_delivery_stream_output {
    /// A builder for [`UntagDeliveryStreamOutput`](crate::output::UntagDeliveryStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagDeliveryStreamOutput`](crate::output::UntagDeliveryStreamOutput)
        pub fn build(self) -> crate::output::UntagDeliveryStreamOutput {
            crate::output::UntagDeliveryStreamOutput {}
        }
    }
}
impl UntagDeliveryStreamOutput {
    /// Creates a new builder-style object to manufacture [`UntagDeliveryStreamOutput`](crate::output::UntagDeliveryStreamOutput)
    pub fn builder() -> crate::output::untag_delivery_stream_output::Builder {
        crate::output::untag_delivery_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagDeliveryStreamOutput {}
impl std::fmt::Debug for TagDeliveryStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagDeliveryStreamOutput");
        formatter.finish()
    }
}
/// See [`TagDeliveryStreamOutput`](crate::output::TagDeliveryStreamOutput)
pub mod tag_delivery_stream_output {
    /// A builder for [`TagDeliveryStreamOutput`](crate::output::TagDeliveryStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagDeliveryStreamOutput`](crate::output::TagDeliveryStreamOutput)
        pub fn build(self) -> crate::output::TagDeliveryStreamOutput {
            crate::output::TagDeliveryStreamOutput {}
        }
    }
}
impl TagDeliveryStreamOutput {
    /// Creates a new builder-style object to manufacture [`TagDeliveryStreamOutput`](crate::output::TagDeliveryStreamOutput)
    pub fn builder() -> crate::output::tag_delivery_stream_output::Builder {
        crate::output::tag_delivery_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopDeliveryStreamEncryptionOutput {}
impl std::fmt::Debug for StopDeliveryStreamEncryptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopDeliveryStreamEncryptionOutput");
        formatter.finish()
    }
}
/// See [`StopDeliveryStreamEncryptionOutput`](crate::output::StopDeliveryStreamEncryptionOutput)
pub mod stop_delivery_stream_encryption_output {
    /// A builder for [`StopDeliveryStreamEncryptionOutput`](crate::output::StopDeliveryStreamEncryptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopDeliveryStreamEncryptionOutput`](crate::output::StopDeliveryStreamEncryptionOutput)
        pub fn build(self) -> crate::output::StopDeliveryStreamEncryptionOutput {
            crate::output::StopDeliveryStreamEncryptionOutput {}
        }
    }
}
impl StopDeliveryStreamEncryptionOutput {
    /// Creates a new builder-style object to manufacture [`StopDeliveryStreamEncryptionOutput`](crate::output::StopDeliveryStreamEncryptionOutput)
    pub fn builder() -> crate::output::stop_delivery_stream_encryption_output::Builder {
        crate::output::stop_delivery_stream_encryption_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartDeliveryStreamEncryptionOutput {}
impl std::fmt::Debug for StartDeliveryStreamEncryptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartDeliveryStreamEncryptionOutput");
        formatter.finish()
    }
}
/// See [`StartDeliveryStreamEncryptionOutput`](crate::output::StartDeliveryStreamEncryptionOutput)
pub mod start_delivery_stream_encryption_output {
    /// A builder for [`StartDeliveryStreamEncryptionOutput`](crate::output::StartDeliveryStreamEncryptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StartDeliveryStreamEncryptionOutput`](crate::output::StartDeliveryStreamEncryptionOutput)
        pub fn build(self) -> crate::output::StartDeliveryStreamEncryptionOutput {
            crate::output::StartDeliveryStreamEncryptionOutput {}
        }
    }
}
impl StartDeliveryStreamEncryptionOutput {
    /// Creates a new builder-style object to manufacture [`StartDeliveryStreamEncryptionOutput`](crate::output::StartDeliveryStreamEncryptionOutput)
    pub fn builder() -> crate::output::start_delivery_stream_encryption_output::Builder {
        crate::output::start_delivery_stream_encryption_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutRecordBatchOutput {
    /// <p>The number of records that might have failed processing. This number might be greater
    /// than 0 even if the <a>PutRecordBatch</a> call succeeds. Check
    /// <code>FailedPutCount</code> to determine whether there are records that you need to
    /// resend.</p>
    pub failed_put_count: std::option::Option<i32>,
    /// <p>Indicates whether server-side encryption (SSE) was enabled during this operation.</p>
    pub encrypted: std::option::Option<bool>,
    /// <p>The results array. For each record, the index of the response element is the same as
    /// the index used in the request array.</p>
    pub request_responses:
        std::option::Option<std::vec::Vec<crate::model::PutRecordBatchResponseEntry>>,
}
impl std::fmt::Debug for PutRecordBatchOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutRecordBatchOutput");
        formatter.field("failed_put_count", &self.failed_put_count);
        formatter.field("encrypted", &self.encrypted);
        formatter.field("request_responses", &self.request_responses);
        formatter.finish()
    }
}
/// See [`PutRecordBatchOutput`](crate::output::PutRecordBatchOutput)
pub mod put_record_batch_output {
    /// A builder for [`PutRecordBatchOutput`](crate::output::PutRecordBatchOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failed_put_count: std::option::Option<i32>,
        pub(crate) encrypted: std::option::Option<bool>,
        pub(crate) request_responses:
            std::option::Option<std::vec::Vec<crate::model::PutRecordBatchResponseEntry>>,
    }
    impl Builder {
        /// <p>The number of records that might have failed processing. This number might be greater
        /// than 0 even if the <a>PutRecordBatch</a> call succeeds. Check
        /// <code>FailedPutCount</code> to determine whether there are records that you need to
        /// resend.</p>
        pub fn failed_put_count(mut self, input: i32) -> Self {
            self.failed_put_count = Some(input);
            self
        }
        /// <p>The number of records that might have failed processing. This number might be greater
        /// than 0 even if the <a>PutRecordBatch</a> call succeeds. Check
        /// <code>FailedPutCount</code> to determine whether there are records that you need to
        /// resend.</p>
        pub fn set_failed_put_count(mut self, input: std::option::Option<i32>) -> Self {
            self.failed_put_count = input;
            self
        }
        /// <p>Indicates whether server-side encryption (SSE) was enabled during this operation.</p>
        pub fn encrypted(mut self, input: bool) -> Self {
            self.encrypted = Some(input);
            self
        }
        /// <p>Indicates whether server-side encryption (SSE) was enabled during this operation.</p>
        pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.encrypted = input;
            self
        }
        /// Appends an item to `request_responses`.
        ///
        /// To override the contents of this collection use [`set_request_responses`](Self::set_request_responses).
        ///
        /// <p>The results array. For each record, the index of the response element is the same as
        /// the index used in the request array.</p>
        pub fn request_responses(
            mut self,
            input: impl Into<crate::model::PutRecordBatchResponseEntry>,
        ) -> Self {
            let mut v = self.request_responses.unwrap_or_default();
            v.push(input.into());
            self.request_responses = Some(v);
            self
        }
        /// <p>The results array. For each record, the index of the response element is the same as
        /// the index used in the request array.</p>
        pub fn set_request_responses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PutRecordBatchResponseEntry>>,
        ) -> Self {
            self.request_responses = input;
            self
        }
        /// Consumes the builder and constructs a [`PutRecordBatchOutput`](crate::output::PutRecordBatchOutput)
        pub fn build(self) -> crate::output::PutRecordBatchOutput {
            crate::output::PutRecordBatchOutput {
                failed_put_count: self.failed_put_count,
                encrypted: self.encrypted,
                request_responses: self.request_responses,
            }
        }
    }
}
impl PutRecordBatchOutput {
    /// Creates a new builder-style object to manufacture [`PutRecordBatchOutput`](crate::output::PutRecordBatchOutput)
    pub fn builder() -> crate::output::put_record_batch_output::Builder {
        crate::output::put_record_batch_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutRecordOutput {
    /// <p>The ID of the record.</p>
    pub record_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether server-side encryption (SSE) was enabled during this operation.</p>
    pub encrypted: std::option::Option<bool>,
}
impl std::fmt::Debug for PutRecordOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutRecordOutput");
        formatter.field("record_id", &self.record_id);
        formatter.field("encrypted", &self.encrypted);
        formatter.finish()
    }
}
/// See [`PutRecordOutput`](crate::output::PutRecordOutput)
pub mod put_record_output {
    /// A builder for [`PutRecordOutput`](crate::output::PutRecordOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) record_id: std::option::Option<std::string::String>,
        pub(crate) encrypted: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The ID of the record.</p>
        pub fn record_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.record_id = Some(input.into());
            self
        }
        /// <p>The ID of the record.</p>
        pub fn set_record_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.record_id = input;
            self
        }
        /// <p>Indicates whether server-side encryption (SSE) was enabled during this operation.</p>
        pub fn encrypted(mut self, input: bool) -> Self {
            self.encrypted = Some(input);
            self
        }
        /// <p>Indicates whether server-side encryption (SSE) was enabled during this operation.</p>
        pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.encrypted = input;
            self
        }
        /// Consumes the builder and constructs a [`PutRecordOutput`](crate::output::PutRecordOutput)
        pub fn build(self) -> crate::output::PutRecordOutput {
            crate::output::PutRecordOutput {
                record_id: self.record_id,
                encrypted: self.encrypted,
            }
        }
    }
}
impl PutRecordOutput {
    /// Creates a new builder-style object to manufacture [`PutRecordOutput`](crate::output::PutRecordOutput)
    pub fn builder() -> crate::output::put_record_output::Builder {
        crate::output::put_record_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForDeliveryStreamOutput {
    /// <p>A list of tags associated with <code>DeliveryStreamName</code>, starting with the
    /// first tag after <code>ExclusiveStartTagKey</code> and up to the specified
    /// <code>Limit</code>.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>If this is <code>true</code> in the response, more tags are available. To list the
    /// remaining tags, set <code>ExclusiveStartTagKey</code> to the key of the last tag returned
    /// and call <code>ListTagsForDeliveryStream</code> again.</p>
    pub has_more_tags: std::option::Option<bool>,
}
impl std::fmt::Debug for ListTagsForDeliveryStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForDeliveryStreamOutput");
        formatter.field("tags", &self.tags);
        formatter.field("has_more_tags", &self.has_more_tags);
        formatter.finish()
    }
}
/// See [`ListTagsForDeliveryStreamOutput`](crate::output::ListTagsForDeliveryStreamOutput)
pub mod list_tags_for_delivery_stream_output {
    /// A builder for [`ListTagsForDeliveryStreamOutput`](crate::output::ListTagsForDeliveryStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) has_more_tags: std::option::Option<bool>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tags associated with <code>DeliveryStreamName</code>, starting with the
        /// first tag after <code>ExclusiveStartTagKey</code> and up to the specified
        /// <code>Limit</code>.</p>
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        /// <p>A list of tags associated with <code>DeliveryStreamName</code>, starting with the
        /// first tag after <code>ExclusiveStartTagKey</code> and up to the specified
        /// <code>Limit</code>.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>If this is <code>true</code> in the response, more tags are available. To list the
        /// remaining tags, set <code>ExclusiveStartTagKey</code> to the key of the last tag returned
        /// and call <code>ListTagsForDeliveryStream</code> again.</p>
        pub fn has_more_tags(mut self, input: bool) -> Self {
            self.has_more_tags = Some(input);
            self
        }
        /// <p>If this is <code>true</code> in the response, more tags are available. To list the
        /// remaining tags, set <code>ExclusiveStartTagKey</code> to the key of the last tag returned
        /// and call <code>ListTagsForDeliveryStream</code> again.</p>
        pub fn set_has_more_tags(mut self, input: std::option::Option<bool>) -> Self {
            self.has_more_tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForDeliveryStreamOutput`](crate::output::ListTagsForDeliveryStreamOutput)
        pub fn build(self) -> crate::output::ListTagsForDeliveryStreamOutput {
            crate::output::ListTagsForDeliveryStreamOutput {
                tags: self.tags,
                has_more_tags: self.has_more_tags,
            }
        }
    }
}
impl ListTagsForDeliveryStreamOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForDeliveryStreamOutput`](crate::output::ListTagsForDeliveryStreamOutput)
    pub fn builder() -> crate::output::list_tags_for_delivery_stream_output::Builder {
        crate::output::list_tags_for_delivery_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDeliveryStreamsOutput {
    /// <p>The names of the delivery streams.</p>
    pub delivery_stream_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Indicates whether there are more delivery streams available to list.</p>
    pub has_more_delivery_streams: std::option::Option<bool>,
}
impl std::fmt::Debug for ListDeliveryStreamsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDeliveryStreamsOutput");
        formatter.field("delivery_stream_names", &self.delivery_stream_names);
        formatter.field("has_more_delivery_streams", &self.has_more_delivery_streams);
        formatter.finish()
    }
}
/// See [`ListDeliveryStreamsOutput`](crate::output::ListDeliveryStreamsOutput)
pub mod list_delivery_streams_output {
    /// A builder for [`ListDeliveryStreamsOutput`](crate::output::ListDeliveryStreamsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) delivery_stream_names: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) has_more_delivery_streams: std::option::Option<bool>,
    }
    impl Builder {
        /// Appends an item to `delivery_stream_names`.
        ///
        /// To override the contents of this collection use [`set_delivery_stream_names`](Self::set_delivery_stream_names).
        ///
        /// <p>The names of the delivery streams.</p>
        pub fn delivery_stream_names(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.delivery_stream_names.unwrap_or_default();
            v.push(input.into());
            self.delivery_stream_names = Some(v);
            self
        }
        /// <p>The names of the delivery streams.</p>
        pub fn set_delivery_stream_names(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.delivery_stream_names = input;
            self
        }
        /// <p>Indicates whether there are more delivery streams available to list.</p>
        pub fn has_more_delivery_streams(mut self, input: bool) -> Self {
            self.has_more_delivery_streams = Some(input);
            self
        }
        /// <p>Indicates whether there are more delivery streams available to list.</p>
        pub fn set_has_more_delivery_streams(mut self, input: std::option::Option<bool>) -> Self {
            self.has_more_delivery_streams = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDeliveryStreamsOutput`](crate::output::ListDeliveryStreamsOutput)
        pub fn build(self) -> crate::output::ListDeliveryStreamsOutput {
            crate::output::ListDeliveryStreamsOutput {
                delivery_stream_names: self.delivery_stream_names,
                has_more_delivery_streams: self.has_more_delivery_streams,
            }
        }
    }
}
impl ListDeliveryStreamsOutput {
    /// Creates a new builder-style object to manufacture [`ListDeliveryStreamsOutput`](crate::output::ListDeliveryStreamsOutput)
    pub fn builder() -> crate::output::list_delivery_streams_output::Builder {
        crate::output::list_delivery_streams_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDeliveryStreamOutput {
    /// <p>Information about the delivery stream.</p>
    pub delivery_stream_description: std::option::Option<crate::model::DeliveryStreamDescription>,
}
impl std::fmt::Debug for DescribeDeliveryStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDeliveryStreamOutput");
        formatter.field(
            "delivery_stream_description",
            &self.delivery_stream_description,
        );
        formatter.finish()
    }
}
/// See [`DescribeDeliveryStreamOutput`](crate::output::DescribeDeliveryStreamOutput)
pub mod describe_delivery_stream_output {
    /// A builder for [`DescribeDeliveryStreamOutput`](crate::output::DescribeDeliveryStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) delivery_stream_description:
            std::option::Option<crate::model::DeliveryStreamDescription>,
    }
    impl Builder {
        /// <p>Information about the delivery stream.</p>
        pub fn delivery_stream_description(
            mut self,
            input: crate::model::DeliveryStreamDescription,
        ) -> Self {
            self.delivery_stream_description = Some(input);
            self
        }
        /// <p>Information about the delivery stream.</p>
        pub fn set_delivery_stream_description(
            mut self,
            input: std::option::Option<crate::model::DeliveryStreamDescription>,
        ) -> Self {
            self.delivery_stream_description = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDeliveryStreamOutput`](crate::output::DescribeDeliveryStreamOutput)
        pub fn build(self) -> crate::output::DescribeDeliveryStreamOutput {
            crate::output::DescribeDeliveryStreamOutput {
                delivery_stream_description: self.delivery_stream_description,
            }
        }
    }
}
impl DescribeDeliveryStreamOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDeliveryStreamOutput`](crate::output::DescribeDeliveryStreamOutput)
    pub fn builder() -> crate::output::describe_delivery_stream_output::Builder {
        crate::output::describe_delivery_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDeliveryStreamOutput {}
impl std::fmt::Debug for DeleteDeliveryStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDeliveryStreamOutput");
        formatter.finish()
    }
}
/// See [`DeleteDeliveryStreamOutput`](crate::output::DeleteDeliveryStreamOutput)
pub mod delete_delivery_stream_output {
    /// A builder for [`DeleteDeliveryStreamOutput`](crate::output::DeleteDeliveryStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDeliveryStreamOutput`](crate::output::DeleteDeliveryStreamOutput)
        pub fn build(self) -> crate::output::DeleteDeliveryStreamOutput {
            crate::output::DeleteDeliveryStreamOutput {}
        }
    }
}
impl DeleteDeliveryStreamOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDeliveryStreamOutput`](crate::output::DeleteDeliveryStreamOutput)
    pub fn builder() -> crate::output::delete_delivery_stream_output::Builder {
        crate::output::delete_delivery_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDeliveryStreamOutput {
    /// <p>The ARN of the delivery stream.</p>
    pub delivery_stream_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateDeliveryStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDeliveryStreamOutput");
        formatter.field("delivery_stream_arn", &self.delivery_stream_arn);
        formatter.finish()
    }
}
/// See [`CreateDeliveryStreamOutput`](crate::output::CreateDeliveryStreamOutput)
pub mod create_delivery_stream_output {
    /// A builder for [`CreateDeliveryStreamOutput`](crate::output::CreateDeliveryStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) delivery_stream_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the delivery stream.</p>
        pub fn delivery_stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.delivery_stream_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the delivery stream.</p>
        pub fn set_delivery_stream_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.delivery_stream_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDeliveryStreamOutput`](crate::output::CreateDeliveryStreamOutput)
        pub fn build(self) -> crate::output::CreateDeliveryStreamOutput {
            crate::output::CreateDeliveryStreamOutput {
                delivery_stream_arn: self.delivery_stream_arn,
            }
        }
    }
}
impl CreateDeliveryStreamOutput {
    /// Creates a new builder-style object to manufacture [`CreateDeliveryStreamOutput`](crate::output::CreateDeliveryStreamOutput)
    pub fn builder() -> crate::output::create_delivery_stream_output::Builder {
        crate::output::create_delivery_stream_output::Builder::default()
    }
}
