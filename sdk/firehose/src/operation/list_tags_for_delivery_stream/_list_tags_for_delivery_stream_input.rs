// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForDeliveryStreamInput {
    /// <p>The name of the delivery stream whose tags you want to list.</p>
    #[doc(hidden)]
    pub delivery_stream_name: std::option::Option<std::string::String>,
    /// <p>The key to use as the starting point for the list of tags. If you set this parameter, <code>ListTagsForDeliveryStream</code> gets all tags that occur after <code>ExclusiveStartTagKey</code>.</p>
    #[doc(hidden)]
    pub exclusive_start_tag_key: std::option::Option<std::string::String>,
    /// <p>The number of tags to return. If this number is less than the total number of tags associated with the delivery stream, <code>HasMoreTags</code> is set to <code>true</code> in the response. To list additional tags, set <code>ExclusiveStartTagKey</code> to the last key in the response. </p>
    #[doc(hidden)]
    pub limit: std::option::Option<i32>,
}
impl ListTagsForDeliveryStreamInput {
    /// <p>The name of the delivery stream whose tags you want to list.</p>
    pub fn delivery_stream_name(&self) -> std::option::Option<&str> {
        self.delivery_stream_name.as_deref()
    }
    /// <p>The key to use as the starting point for the list of tags. If you set this parameter, <code>ListTagsForDeliveryStream</code> gets all tags that occur after <code>ExclusiveStartTagKey</code>.</p>
    pub fn exclusive_start_tag_key(&self) -> std::option::Option<&str> {
        self.exclusive_start_tag_key.as_deref()
    }
    /// <p>The number of tags to return. If this number is less than the total number of tags associated with the delivery stream, <code>HasMoreTags</code> is set to <code>true</code> in the response. To list additional tags, set <code>ExclusiveStartTagKey</code> to the last key in the response. </p>
    pub fn limit(&self) -> std::option::Option<i32> {
        self.limit
    }
}
impl ListTagsForDeliveryStreamInput {
    /// Creates a new builder-style object to manufacture [`ListTagsForDeliveryStreamInput`](crate::operation::list_tags_for_delivery_stream::ListTagsForDeliveryStreamInput).
    pub fn builder() -> crate::operation::list_tags_for_delivery_stream::builders::ListTagsForDeliveryStreamInputBuilder{
        crate::operation::list_tags_for_delivery_stream::builders::ListTagsForDeliveryStreamInputBuilder::default()
    }
}

/// A builder for [`ListTagsForDeliveryStreamInput`](crate::operation::list_tags_for_delivery_stream::ListTagsForDeliveryStreamInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForDeliveryStreamInputBuilder {
    pub(crate) delivery_stream_name: std::option::Option<std::string::String>,
    pub(crate) exclusive_start_tag_key: std::option::Option<std::string::String>,
    pub(crate) limit: std::option::Option<i32>,
}
impl ListTagsForDeliveryStreamInputBuilder {
    /// <p>The name of the delivery stream whose tags you want to list.</p>
    pub fn delivery_stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.delivery_stream_name = Some(input.into());
        self
    }
    /// <p>The name of the delivery stream whose tags you want to list.</p>
    pub fn set_delivery_stream_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.delivery_stream_name = input;
        self
    }
    /// <p>The key to use as the starting point for the list of tags. If you set this parameter, <code>ListTagsForDeliveryStream</code> gets all tags that occur after <code>ExclusiveStartTagKey</code>.</p>
    pub fn exclusive_start_tag_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.exclusive_start_tag_key = Some(input.into());
        self
    }
    /// <p>The key to use as the starting point for the list of tags. If you set this parameter, <code>ListTagsForDeliveryStream</code> gets all tags that occur after <code>ExclusiveStartTagKey</code>.</p>
    pub fn set_exclusive_start_tag_key(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.exclusive_start_tag_key = input;
        self
    }
    /// <p>The number of tags to return. If this number is less than the total number of tags associated with the delivery stream, <code>HasMoreTags</code> is set to <code>true</code> in the response. To list additional tags, set <code>ExclusiveStartTagKey</code> to the last key in the response. </p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    /// <p>The number of tags to return. If this number is less than the total number of tags associated with the delivery stream, <code>HasMoreTags</code> is set to <code>true</code> in the response. To list additional tags, set <code>ExclusiveStartTagKey</code> to the last key in the response. </p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// Consumes the builder and constructs a [`ListTagsForDeliveryStreamInput`](crate::operation::list_tags_for_delivery_stream::ListTagsForDeliveryStreamInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_tags_for_delivery_stream::ListTagsForDeliveryStreamInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_tags_for_delivery_stream::ListTagsForDeliveryStreamInput {
                delivery_stream_name: self.delivery_stream_name,
                exclusive_start_tag_key: self.exclusive_start_tag_key,
                limit: self.limit,
            },
        )
    }
}
