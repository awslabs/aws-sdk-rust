// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutRecordBatchInput {
    /// <p>The name of the delivery stream.</p>
    pub delivery_stream_name: ::std::option::Option<::std::string::String>,
    /// <p>One or more records.</p>
    pub records: ::std::option::Option<::std::vec::Vec<crate::types::Record>>,
}
impl PutRecordBatchInput {
    /// <p>The name of the delivery stream.</p>
    pub fn delivery_stream_name(&self) -> ::std::option::Option<&str> {
        self.delivery_stream_name.as_deref()
    }
    /// <p>One or more records.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.records.is_none()`.
    pub fn records(&self) -> &[crate::types::Record] {
        self.records.as_deref().unwrap_or_default()
    }
}
impl PutRecordBatchInput {
    /// Creates a new builder-style object to manufacture [`PutRecordBatchInput`](crate::operation::put_record_batch::PutRecordBatchInput).
    pub fn builder() -> crate::operation::put_record_batch::builders::PutRecordBatchInputBuilder {
        crate::operation::put_record_batch::builders::PutRecordBatchInputBuilder::default()
    }
}

/// A builder for [`PutRecordBatchInput`](crate::operation::put_record_batch::PutRecordBatchInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutRecordBatchInputBuilder {
    pub(crate) delivery_stream_name: ::std::option::Option<::std::string::String>,
    pub(crate) records: ::std::option::Option<::std::vec::Vec<crate::types::Record>>,
}
impl PutRecordBatchInputBuilder {
    /// <p>The name of the delivery stream.</p>
    /// This field is required.
    pub fn delivery_stream_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.delivery_stream_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the delivery stream.</p>
    pub fn set_delivery_stream_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.delivery_stream_name = input;
        self
    }
    /// <p>The name of the delivery stream.</p>
    pub fn get_delivery_stream_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.delivery_stream_name
    }
    /// Appends an item to `records`.
    ///
    /// To override the contents of this collection use [`set_records`](Self::set_records).
    ///
    /// <p>One or more records.</p>
    pub fn records(mut self, input: crate::types::Record) -> Self {
        let mut v = self.records.unwrap_or_default();
        v.push(input);
        self.records = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more records.</p>
    pub fn set_records(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Record>>) -> Self {
        self.records = input;
        self
    }
    /// <p>One or more records.</p>
    pub fn get_records(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Record>> {
        &self.records
    }
    /// Consumes the builder and constructs a [`PutRecordBatchInput`](crate::operation::put_record_batch::PutRecordBatchInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_record_batch::PutRecordBatchInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_record_batch::PutRecordBatchInput {
            delivery_stream_name: self.delivery_stream_name,
            records: self.records,
        })
    }
}
