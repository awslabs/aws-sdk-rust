// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutRecordBatchInput {
    /// <p>The name of the delivery stream.</p>
    #[doc(hidden)]
    pub delivery_stream_name: std::option::Option<std::string::String>,
    /// <p>One or more records.</p>
    #[doc(hidden)]
    pub records: std::option::Option<std::vec::Vec<crate::types::Record>>,
}
impl PutRecordBatchInput {
    /// <p>The name of the delivery stream.</p>
    pub fn delivery_stream_name(&self) -> std::option::Option<&str> {
        self.delivery_stream_name.as_deref()
    }
    /// <p>One or more records.</p>
    pub fn records(&self) -> std::option::Option<&[crate::types::Record]> {
        self.records.as_deref()
    }
}
impl PutRecordBatchInput {
    /// Creates a new builder-style object to manufacture [`PutRecordBatchInput`](crate::operation::put_record_batch::PutRecordBatchInput).
    pub fn builder() -> crate::operation::put_record_batch::builders::PutRecordBatchInputBuilder {
        crate::operation::put_record_batch::builders::PutRecordBatchInputBuilder::default()
    }
}

/// A builder for [`PutRecordBatchInput`](crate::operation::put_record_batch::PutRecordBatchInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutRecordBatchInputBuilder {
    pub(crate) delivery_stream_name: std::option::Option<std::string::String>,
    pub(crate) records: std::option::Option<std::vec::Vec<crate::types::Record>>,
}
impl PutRecordBatchInputBuilder {
    /// <p>The name of the delivery stream.</p>
    pub fn delivery_stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.delivery_stream_name = Some(input.into());
        self
    }
    /// <p>The name of the delivery stream.</p>
    pub fn set_delivery_stream_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.delivery_stream_name = input;
        self
    }
    /// Appends an item to `records`.
    ///
    /// To override the contents of this collection use [`set_records`](Self::set_records).
    ///
    /// <p>One or more records.</p>
    pub fn records(mut self, input: crate::types::Record) -> Self {
        let mut v = self.records.unwrap_or_default();
        v.push(input);
        self.records = Some(v);
        self
    }
    /// <p>One or more records.</p>
    pub fn set_records(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Record>>,
    ) -> Self {
        self.records = input;
        self
    }
    /// Consumes the builder and constructs a [`PutRecordBatchInput`](crate::operation::put_record_batch::PutRecordBatchInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_record_batch::PutRecordBatchInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::put_record_batch::PutRecordBatchInput {
            delivery_stream_name: self.delivery_stream_name,
            records: self.records,
        })
    }
}
