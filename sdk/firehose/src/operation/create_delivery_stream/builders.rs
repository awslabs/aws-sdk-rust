// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_delivery_stream::_create_delivery_stream_output::CreateDeliveryStreamOutputBuilder;

pub use crate::operation::create_delivery_stream::_create_delivery_stream_input::CreateDeliveryStreamInputBuilder;

/// Fluent builder constructing a request to `CreateDeliveryStream`.
///
/// <p>Creates a Kinesis Data Firehose delivery stream.</p>
/// <p>By default, you can create up to 50 delivery streams per Amazon Web Services Region.</p>
/// <p>This is an asynchronous operation that immediately returns. The initial status of the delivery stream is <code>CREATING</code>. After the delivery stream is created, its status is <code>ACTIVE</code> and it now accepts data. If the delivery stream creation fails, the status transitions to <code>CREATING_FAILED</code>. Attempts to send data to a delivery stream that is not in the <code>ACTIVE</code> state cause an exception. To check the state of a delivery stream, use <code>DescribeDeliveryStream</code>.</p>
/// <p>If the status of a delivery stream is <code>CREATING_FAILED</code>, this status doesn't change, and you can't invoke <code>CreateDeliveryStream</code> again on it. However, you can invoke the <code>DeleteDeliveryStream</code> operation to delete it.</p>
/// <p>A Kinesis Data Firehose delivery stream can be configured to receive records directly from providers using <code>PutRecord</code> or <code>PutRecordBatch</code>, or it can be configured to use an existing Kinesis stream as its source. To specify a Kinesis data stream as input, set the <code>DeliveryStreamType</code> parameter to <code>KinesisStreamAsSource</code>, and provide the Kinesis stream Amazon Resource Name (ARN) and role ARN in the <code>KinesisStreamSourceConfiguration</code> parameter.</p>
/// <p>To create a delivery stream with server-side encryption (SSE) enabled, include <code>DeliveryStreamEncryptionConfigurationInput</code> in your request. This is optional. You can also invoke <code>StartDeliveryStreamEncryption</code> to turn on SSE for an existing delivery stream that doesn't have SSE enabled.</p>
/// <p>A delivery stream is configured with a single destination: Amazon S3, Amazon ES, Amazon Redshift, or Splunk. You must specify only one of the following destination configuration parameters: <code>ExtendedS3DestinationConfiguration</code>, <code>S3DestinationConfiguration</code>, <code>ElasticsearchDestinationConfiguration</code>, <code>RedshiftDestinationConfiguration</code>, or <code>SplunkDestinationConfiguration</code>.</p>
/// <p>When you specify <code>S3DestinationConfiguration</code>, you can also provide the following optional values: BufferingHints, <code>EncryptionConfiguration</code>, and <code>CompressionFormat</code>. By default, if no <code>BufferingHints</code> value is provided, Kinesis Data Firehose buffers data up to 5 MB or for 5 minutes, whichever condition is satisfied first. <code>BufferingHints</code> is a hint, so there are some cases where the service cannot adhere to these conditions strictly. For example, record boundaries might be such that the size is a little over or under the configured buffering size. By default, no encryption is performed. We strongly recommend that you enable encryption to ensure secure data storage in Amazon S3.</p>
/// <p>A few notes about Amazon Redshift as a destination:</p>
/// <ul>
/// <li> <p>An Amazon Redshift destination requires an S3 bucket as intermediate location. Kinesis Data Firehose first delivers data to Amazon S3 and then uses <code>COPY</code> syntax to load data into an Amazon Redshift table. This is specified in the <code>RedshiftDestinationConfiguration.S3Configuration</code> parameter.</p> </li>
/// <li> <p>The compression formats <code>SNAPPY</code> or <code>ZIP</code> cannot be specified in <code>RedshiftDestinationConfiguration.S3Configuration</code> because the Amazon Redshift <code>COPY</code> operation that reads from the S3 bucket doesn't support these compression formats.</p> </li>
/// <li> <p>We strongly recommend that you use the user name and password you provide exclusively with Kinesis Data Firehose, and that the permissions for the account are restricted for Amazon Redshift <code>INSERT</code> permissions.</p> </li>
/// </ul>
/// <p>Kinesis Data Firehose assumes the IAM role that is configured as part of the destination. The role should allow the Kinesis Data Firehose principal to assume the role, and the role should have permissions that allow the service to deliver the data. For more information, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3">Grant Kinesis Data Firehose Access to an Amazon S3 Destination</a> in the <i>Amazon Kinesis Data Firehose Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDeliveryStreamFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_delivery_stream::builders::CreateDeliveryStreamInputBuilder,
}
impl CreateDeliveryStreamFluentBuilder {
    /// Creates a new `CreateDeliveryStream`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_delivery_stream::CreateDeliveryStream,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_delivery_stream::CreateDeliveryStreamError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_delivery_stream::CreateDeliveryStreamOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_delivery_stream::CreateDeliveryStreamError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the delivery stream. This name must be unique per Amazon Web Services account in the same Amazon Web Services Region. If the delivery streams are in different accounts or different Regions, you can have multiple delivery streams with the same name.</p>
    pub fn delivery_stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.delivery_stream_name(input.into());
        self
    }
    /// <p>The name of the delivery stream. This name must be unique per Amazon Web Services account in the same Amazon Web Services Region. If the delivery streams are in different accounts or different Regions, you can have multiple delivery streams with the same name.</p>
    pub fn set_delivery_stream_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_delivery_stream_name(input);
        self
    }
    /// <p>The delivery stream type. This parameter can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>DirectPut</code>: Provider applications access the delivery stream directly.</p> </li>
    /// <li> <p> <code>KinesisStreamAsSource</code>: The delivery stream uses a Kinesis data stream as a source.</p> </li>
    /// </ul>
    pub fn delivery_stream_type(mut self, input: crate::types::DeliveryStreamType) -> Self {
        self.inner = self.inner.delivery_stream_type(input);
        self
    }
    /// <p>The delivery stream type. This parameter can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>DirectPut</code>: Provider applications access the delivery stream directly.</p> </li>
    /// <li> <p> <code>KinesisStreamAsSource</code>: The delivery stream uses a Kinesis data stream as a source.</p> </li>
    /// </ul>
    pub fn set_delivery_stream_type(
        mut self,
        input: std::option::Option<crate::types::DeliveryStreamType>,
    ) -> Self {
        self.inner = self.inner.set_delivery_stream_type(input);
        self
    }
    /// <p>When a Kinesis data stream is used as the source for the delivery stream, a <code>KinesisStreamSourceConfiguration</code> containing the Kinesis data stream Amazon Resource Name (ARN) and the role ARN for the source stream.</p>
    pub fn kinesis_stream_source_configuration(
        mut self,
        input: crate::types::KinesisStreamSourceConfiguration,
    ) -> Self {
        self.inner = self.inner.kinesis_stream_source_configuration(input);
        self
    }
    /// <p>When a Kinesis data stream is used as the source for the delivery stream, a <code>KinesisStreamSourceConfiguration</code> containing the Kinesis data stream Amazon Resource Name (ARN) and the role ARN for the source stream.</p>
    pub fn set_kinesis_stream_source_configuration(
        mut self,
        input: std::option::Option<crate::types::KinesisStreamSourceConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_kinesis_stream_source_configuration(input);
        self
    }
    /// <p>Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed for Server-Side Encryption (SSE).</p>
    pub fn delivery_stream_encryption_configuration_input(
        mut self,
        input: crate::types::DeliveryStreamEncryptionConfigurationInput,
    ) -> Self {
        self.inner = self
            .inner
            .delivery_stream_encryption_configuration_input(input);
        self
    }
    /// <p>Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed for Server-Side Encryption (SSE).</p>
    pub fn set_delivery_stream_encryption_configuration_input(
        mut self,
        input: std::option::Option<crate::types::DeliveryStreamEncryptionConfigurationInput>,
    ) -> Self {
        self.inner = self
            .inner
            .set_delivery_stream_encryption_configuration_input(input);
        self
    }
    /// <p>[Deprecated] The destination in Amazon S3. You can specify only one destination.</p>
    #[deprecated]
    pub fn s3_destination_configuration(
        mut self,
        input: crate::types::S3DestinationConfiguration,
    ) -> Self {
        self.inner = self.inner.s3_destination_configuration(input);
        self
    }
    /// <p>[Deprecated] The destination in Amazon S3. You can specify only one destination.</p>
    #[deprecated]
    pub fn set_s3_destination_configuration(
        mut self,
        input: std::option::Option<crate::types::S3DestinationConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_s3_destination_configuration(input);
        self
    }
    /// <p>The destination in Amazon S3. You can specify only one destination.</p>
    pub fn extended_s3_destination_configuration(
        mut self,
        input: crate::types::ExtendedS3DestinationConfiguration,
    ) -> Self {
        self.inner = self.inner.extended_s3_destination_configuration(input);
        self
    }
    /// <p>The destination in Amazon S3. You can specify only one destination.</p>
    pub fn set_extended_s3_destination_configuration(
        mut self,
        input: std::option::Option<crate::types::ExtendedS3DestinationConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_extended_s3_destination_configuration(input);
        self
    }
    /// <p>The destination in Amazon Redshift. You can specify only one destination.</p>
    pub fn redshift_destination_configuration(
        mut self,
        input: crate::types::RedshiftDestinationConfiguration,
    ) -> Self {
        self.inner = self.inner.redshift_destination_configuration(input);
        self
    }
    /// <p>The destination in Amazon Redshift. You can specify only one destination.</p>
    pub fn set_redshift_destination_configuration(
        mut self,
        input: std::option::Option<crate::types::RedshiftDestinationConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_redshift_destination_configuration(input);
        self
    }
    /// <p>The destination in Amazon ES. You can specify only one destination.</p>
    pub fn elasticsearch_destination_configuration(
        mut self,
        input: crate::types::ElasticsearchDestinationConfiguration,
    ) -> Self {
        self.inner = self.inner.elasticsearch_destination_configuration(input);
        self
    }
    /// <p>The destination in Amazon ES. You can specify only one destination.</p>
    pub fn set_elasticsearch_destination_configuration(
        mut self,
        input: std::option::Option<crate::types::ElasticsearchDestinationConfiguration>,
    ) -> Self {
        self.inner = self
            .inner
            .set_elasticsearch_destination_configuration(input);
        self
    }
    /// <p>The destination in Amazon OpenSearch Service. You can specify only one destination.</p>
    pub fn amazonopensearchservice_destination_configuration(
        mut self,
        input: crate::types::AmazonopensearchserviceDestinationConfiguration,
    ) -> Self {
        self.inner = self
            .inner
            .amazonopensearchservice_destination_configuration(input);
        self
    }
    /// <p>The destination in Amazon OpenSearch Service. You can specify only one destination.</p>
    pub fn set_amazonopensearchservice_destination_configuration(
        mut self,
        input: std::option::Option<crate::types::AmazonopensearchserviceDestinationConfiguration>,
    ) -> Self {
        self.inner = self
            .inner
            .set_amazonopensearchservice_destination_configuration(input);
        self
    }
    /// <p>The destination in Splunk. You can specify only one destination.</p>
    pub fn splunk_destination_configuration(
        mut self,
        input: crate::types::SplunkDestinationConfiguration,
    ) -> Self {
        self.inner = self.inner.splunk_destination_configuration(input);
        self
    }
    /// <p>The destination in Splunk. You can specify only one destination.</p>
    pub fn set_splunk_destination_configuration(
        mut self,
        input: std::option::Option<crate::types::SplunkDestinationConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_splunk_destination_configuration(input);
        self
    }
    /// <p>Enables configuring Kinesis Firehose to deliver data to any HTTP endpoint destination. You can specify only one destination.</p>
    pub fn http_endpoint_destination_configuration(
        mut self,
        input: crate::types::HttpEndpointDestinationConfiguration,
    ) -> Self {
        self.inner = self.inner.http_endpoint_destination_configuration(input);
        self
    }
    /// <p>Enables configuring Kinesis Firehose to deliver data to any HTTP endpoint destination. You can specify only one destination.</p>
    pub fn set_http_endpoint_destination_configuration(
        mut self,
        input: std::option::Option<crate::types::HttpEndpointDestinationConfiguration>,
    ) -> Self {
        self.inner = self
            .inner
            .set_http_endpoint_destination_configuration(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A set of tags to assign to the delivery stream. A tag is a key-value pair that you can define and assign to Amazon Web Services resources. Tags are metadata. For example, you can add friendly names and descriptions or other types of information that can help you distinguish the delivery stream. For more information about tags, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using Cost Allocation Tags</a> in the Amazon Web Services Billing and Cost Management User Guide.</p>
    /// <p>You can specify up to 50 tags when creating a delivery stream.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A set of tags to assign to the delivery stream. A tag is a key-value pair that you can define and assign to Amazon Web Services resources. Tags are metadata. For example, you can add friendly names and descriptions or other types of information that can help you distinguish the delivery stream. For more information about tags, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using Cost Allocation Tags</a> in the Amazon Web Services Billing and Cost Management User Guide.</p>
    /// <p>You can specify up to 50 tags when creating a delivery stream.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The destination in the Serverless offering for Amazon OpenSearch Service. You can specify only one destination.</p>
    pub fn amazon_open_search_serverless_destination_configuration(
        mut self,
        input: crate::types::AmazonOpenSearchServerlessDestinationConfiguration,
    ) -> Self {
        self.inner = self
            .inner
            .amazon_open_search_serverless_destination_configuration(input);
        self
    }
    /// <p>The destination in the Serverless offering for Amazon OpenSearch Service. You can specify only one destination.</p>
    pub fn set_amazon_open_search_serverless_destination_configuration(
        mut self,
        input: std::option::Option<
            crate::types::AmazonOpenSearchServerlessDestinationConfiguration,
        >,
    ) -> Self {
        self.inner = self
            .inner
            .set_amazon_open_search_serverless_destination_configuration(input);
        self
    }
}
