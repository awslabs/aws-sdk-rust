// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_destination::_update_destination_output::UpdateDestinationOutputBuilder;

pub use crate::operation::update_destination::_update_destination_input::UpdateDestinationInputBuilder;

/// Fluent builder constructing a request to `UpdateDestination`.
///
/// <p>Updates the specified destination of the specified delivery stream.</p>
/// <p>Use this operation to change the destination type (for example, to replace the Amazon S3 destination with Amazon Redshift) or change the parameters associated with a destination (for example, to change the bucket name of the Amazon S3 destination). The update might not occur immediately. The target delivery stream remains active while the configurations are updated, so data writes to the delivery stream can continue during this process. The updated configurations are usually effective within a few minutes.</p>
/// <p>Switching between Amazon ES and other services is not supported. For an Amazon ES destination, you can only update to another Amazon ES destination.</p>
/// <p>If the destination type is the same, Kinesis Data Firehose merges the configuration parameters specified with the destination configuration that already exists on the delivery stream. If any of the parameters are not specified in the call, the existing values are retained. For example, in the Amazon S3 destination, if <code>EncryptionConfiguration</code> is not specified, then the existing <code>EncryptionConfiguration</code> is maintained on the destination.</p>
/// <p>If the destination type is not the same, for example, changing the destination from Amazon S3 to Amazon Redshift, Kinesis Data Firehose does not merge any parameters. In this case, all parameters must be specified.</p>
/// <p>Kinesis Data Firehose uses <code>CurrentDeliveryStreamVersionId</code> to avoid race conditions and conflicting merges. This is a required field, and the service updates the configuration only if the existing configuration has a version ID that matches. After the update is applied successfully, the version ID is updated, and can be retrieved using <code>DescribeDeliveryStream</code>. Use the new version ID to set <code>CurrentDeliveryStreamVersionId</code> in the next call.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDestinationFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_destination::builders::UpdateDestinationInputBuilder,
}
impl UpdateDestinationFluentBuilder {
    /// Creates a new `UpdateDestination`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_destination::UpdateDestination,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_destination::UpdateDestinationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_destination::UpdateDestinationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_destination::UpdateDestinationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the delivery stream.</p>
    pub fn delivery_stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.delivery_stream_name(input.into());
        self
    }
    /// <p>The name of the delivery stream.</p>
    pub fn set_delivery_stream_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_delivery_stream_name(input);
        self
    }
    /// <p>Obtain this value from the <code>VersionId</code> result of <code>DeliveryStreamDescription</code>. This value is required, and helps the service perform conditional operations. For example, if there is an interleaving update and this value is null, then the update destination fails. After the update is successful, the <code>VersionId</code> value is updated. The service then performs a merge of the old configuration with the new configuration.</p>
    pub fn current_delivery_stream_version_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.current_delivery_stream_version_id(input.into());
        self
    }
    /// <p>Obtain this value from the <code>VersionId</code> result of <code>DeliveryStreamDescription</code>. This value is required, and helps the service perform conditional operations. For example, if there is an interleaving update and this value is null, then the update destination fails. After the update is successful, the <code>VersionId</code> value is updated. The service then performs a merge of the old configuration with the new configuration.</p>
    pub fn set_current_delivery_stream_version_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_current_delivery_stream_version_id(input);
        self
    }
    /// <p>The ID of the destination.</p>
    pub fn destination_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_id(input.into());
        self
    }
    /// <p>The ID of the destination.</p>
    pub fn set_destination_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_destination_id(input);
        self
    }
    /// <p>[Deprecated] Describes an update for a destination in Amazon S3.</p>
    #[deprecated]
    pub fn s3_destination_update(mut self, input: crate::types::S3DestinationUpdate) -> Self {
        self.inner = self.inner.s3_destination_update(input);
        self
    }
    /// <p>[Deprecated] Describes an update for a destination in Amazon S3.</p>
    #[deprecated]
    pub fn set_s3_destination_update(
        mut self,
        input: std::option::Option<crate::types::S3DestinationUpdate>,
    ) -> Self {
        self.inner = self.inner.set_s3_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in Amazon S3.</p>
    pub fn extended_s3_destination_update(
        mut self,
        input: crate::types::ExtendedS3DestinationUpdate,
    ) -> Self {
        self.inner = self.inner.extended_s3_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in Amazon S3.</p>
    pub fn set_extended_s3_destination_update(
        mut self,
        input: std::option::Option<crate::types::ExtendedS3DestinationUpdate>,
    ) -> Self {
        self.inner = self.inner.set_extended_s3_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in Amazon Redshift.</p>
    pub fn redshift_destination_update(
        mut self,
        input: crate::types::RedshiftDestinationUpdate,
    ) -> Self {
        self.inner = self.inner.redshift_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in Amazon Redshift.</p>
    pub fn set_redshift_destination_update(
        mut self,
        input: std::option::Option<crate::types::RedshiftDestinationUpdate>,
    ) -> Self {
        self.inner = self.inner.set_redshift_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in Amazon ES.</p>
    pub fn elasticsearch_destination_update(
        mut self,
        input: crate::types::ElasticsearchDestinationUpdate,
    ) -> Self {
        self.inner = self.inner.elasticsearch_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in Amazon ES.</p>
    pub fn set_elasticsearch_destination_update(
        mut self,
        input: std::option::Option<crate::types::ElasticsearchDestinationUpdate>,
    ) -> Self {
        self.inner = self.inner.set_elasticsearch_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in Amazon OpenSearch Service.</p>
    pub fn amazonopensearchservice_destination_update(
        mut self,
        input: crate::types::AmazonopensearchserviceDestinationUpdate,
    ) -> Self {
        self.inner = self.inner.amazonopensearchservice_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in Amazon OpenSearch Service.</p>
    pub fn set_amazonopensearchservice_destination_update(
        mut self,
        input: std::option::Option<crate::types::AmazonopensearchserviceDestinationUpdate>,
    ) -> Self {
        self.inner = self
            .inner
            .set_amazonopensearchservice_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in Splunk.</p>
    pub fn splunk_destination_update(
        mut self,
        input: crate::types::SplunkDestinationUpdate,
    ) -> Self {
        self.inner = self.inner.splunk_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in Splunk.</p>
    pub fn set_splunk_destination_update(
        mut self,
        input: std::option::Option<crate::types::SplunkDestinationUpdate>,
    ) -> Self {
        self.inner = self.inner.set_splunk_destination_update(input);
        self
    }
    /// <p>Describes an update to the specified HTTP endpoint destination.</p>
    pub fn http_endpoint_destination_update(
        mut self,
        input: crate::types::HttpEndpointDestinationUpdate,
    ) -> Self {
        self.inner = self.inner.http_endpoint_destination_update(input);
        self
    }
    /// <p>Describes an update to the specified HTTP endpoint destination.</p>
    pub fn set_http_endpoint_destination_update(
        mut self,
        input: std::option::Option<crate::types::HttpEndpointDestinationUpdate>,
    ) -> Self {
        self.inner = self.inner.set_http_endpoint_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in the Serverless offering for Amazon OpenSearch Service.</p>
    pub fn amazon_open_search_serverless_destination_update(
        mut self,
        input: crate::types::AmazonOpenSearchServerlessDestinationUpdate,
    ) -> Self {
        self.inner = self
            .inner
            .amazon_open_search_serverless_destination_update(input);
        self
    }
    /// <p>Describes an update for a destination in the Serverless offering for Amazon OpenSearch Service.</p>
    pub fn set_amazon_open_search_serverless_destination_update(
        mut self,
        input: std::option::Option<crate::types::AmazonOpenSearchServerlessDestinationUpdate>,
    ) -> Self {
        self.inner = self
            .inner
            .set_amazon_open_search_serverless_destination_update(input);
        self
    }
}
