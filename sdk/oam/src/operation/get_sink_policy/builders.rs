// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_sink_policy::_get_sink_policy_output::GetSinkPolicyOutputBuilder;

pub use crate::operation::get_sink_policy::_get_sink_policy_input::GetSinkPolicyInputBuilder;

impl GetSinkPolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_sink_policy::GetSinkPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_sink_policy::GetSinkPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_sink_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetSinkPolicy`.
///
/// <p>Returns the current sink policy attached to this sink. The sink policy specifies what accounts can attach to this sink as source accounts, and what types of data they can share.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetSinkPolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_sink_policy::builders::GetSinkPolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_sink_policy::GetSinkPolicyOutput,
        crate::operation::get_sink_policy::GetSinkPolicyError,
    > for GetSinkPolicyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_sink_policy::GetSinkPolicyOutput,
            crate::operation::get_sink_policy::GetSinkPolicyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetSinkPolicyFluentBuilder {
    /// Creates a new `GetSinkPolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetSinkPolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::get_sink_policy::builders::GetSinkPolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_sink_policy::GetSinkPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_sink_policy::GetSinkPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_sink_policy::GetSinkPolicy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_sink_policy::GetSinkPolicy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_sink_policy::GetSinkPolicyOutput,
        crate::operation::get_sink_policy::GetSinkPolicyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the sink to retrieve the policy of.</p>
    pub fn sink_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.sink_identifier(input.into());
        self
    }
    /// <p>The ARN of the sink to retrieve the policy of.</p>
    pub fn set_sink_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_sink_identifier(input);
        self
    }
    /// <p>The ARN of the sink to retrieve the policy of.</p>
    pub fn get_sink_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_sink_identifier()
    }
}
