// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_sink_policy::_put_sink_policy_output::PutSinkPolicyOutputBuilder;

pub use crate::operation::put_sink_policy::_put_sink_policy_input::PutSinkPolicyInputBuilder;

/// Fluent builder constructing a request to `PutSinkPolicy`.
///
/// <p>Creates or updates the resource policy that grants permissions to source accounts to link to the monitoring account sink. When you create a sink policy, you can grant permissions to all accounts in an organization or to individual accounts.</p>
/// <p>You can also use a sink policy to limit the types of data that is shared. The three types that you can allow or deny are:</p>
/// <ul>
/// <li> <p> <b>Metrics</b> - Specify with <code>AWS::CloudWatch::Metric</code> </p> </li>
/// <li> <p> <b>Log groups</b> - Specify with <code>AWS::Logs::LogGroup</code> </p> </li>
/// <li> <p> <b>Traces</b> - Specify with <code>AWS::XRay::Trace</code> </p> </li>
/// </ul>
/// <p>See the examples in this section to see how to specify permitted source accounts and data types.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutSinkPolicyFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_sink_policy::builders::PutSinkPolicyInputBuilder,
}
impl PutSinkPolicyFluentBuilder {
    /// Creates a new `PutSinkPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_sink_policy::PutSinkPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::put_sink_policy::PutSinkPolicyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_sink_policy::PutSinkPolicyOutput,
        aws_smithy_http::result::SdkError<crate::operation::put_sink_policy::PutSinkPolicyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the sink to attach this policy to.</p>
    pub fn sink_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sink_identifier(input.into());
        self
    }
    /// <p>The ARN of the sink to attach this policy to.</p>
    pub fn set_sink_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sink_identifier(input);
        self
    }
    /// <p>The JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.</p>
    /// <p>The policy must be in JSON string format with quotation marks escaped and no newlines.</p>
    /// <p>For examples of different types of policies, see the <b>Examples</b> section on this page.</p>
    pub fn policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.policy(input.into());
        self
    }
    /// <p>The JSON policy to use. If you are updating an existing policy, the entire existing policy is replaced by what you specify here.</p>
    /// <p>The policy must be in JSON string format with quotation marks escaped and no newlines.</p>
    /// <p>For examples of different types of policies, see the <b>Examples</b> section on this page.</p>
    pub fn set_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_policy(input);
        self
    }
}
