// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_link_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateLinkOutput, crate::error::CreateLinkError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CreateLinkError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateLinkError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ConflictException" => {
            crate::error::CreateLinkError::ConflictException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::conflict_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::CreateLinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_create_link_conflict_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InternalServiceFault" => {
            crate::error::CreateLinkError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::CreateLinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_create_link_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => crate::error::CreateLinkError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateLinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_create_link_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "MissingRequiredParameterException" => {
            crate::error::CreateLinkError::MissingRequiredParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::missing_required_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_missing_required_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateLinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_create_link_missing_required_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ServiceQuotaExceededException" => {
            crate::error::CreateLinkError::ServiceQuotaExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::service_quota_exceeded_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_service_quota_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateLinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_create_link_service_quota_exceeded_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::CreateLinkError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_link_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateLinkOutput, crate::error::CreateLinkError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_link_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_create_link(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateLinkError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_sink_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateSinkOutput, crate::error::CreateSinkError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CreateSinkError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateSinkError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ConflictException" => {
            crate::error::CreateSinkError::ConflictException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::conflict_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::CreateSinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_create_sink_conflict_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InternalServiceFault" => {
            crate::error::CreateSinkError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::CreateSinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_create_sink_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => crate::error::CreateSinkError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateSinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_create_sink_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "MissingRequiredParameterException" => {
            crate::error::CreateSinkError::MissingRequiredParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::missing_required_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_missing_required_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateSinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_create_sink_missing_required_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ServiceQuotaExceededException" => {
            crate::error::CreateSinkError::ServiceQuotaExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::service_quota_exceeded_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_service_quota_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateSinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_create_sink_service_quota_exceeded_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::CreateSinkError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_sink_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateSinkOutput, crate::error::CreateSinkError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_sink_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_create_sink(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateSinkError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_link_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteLinkOutput, crate::error::DeleteLinkError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeleteLinkError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteLinkError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServiceFault" => {
            crate::error::DeleteLinkError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteLinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_delete_link_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => crate::error::DeleteLinkError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteLinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_delete_link_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "MissingRequiredParameterException" => {
            crate::error::DeleteLinkError::MissingRequiredParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::missing_required_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_missing_required_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteLinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_delete_link_missing_required_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => crate::error::DeleteLinkError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteLinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_delete_link_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::DeleteLinkError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_link_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteLinkOutput, crate::error::DeleteLinkError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_link_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_sink_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteSinkOutput, crate::error::DeleteSinkError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeleteSinkError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteSinkError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ConflictException" => {
            crate::error::DeleteSinkError::ConflictException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::conflict_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::DeleteSinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_delete_sink_conflict_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InternalServiceFault" => {
            crate::error::DeleteSinkError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteSinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_delete_sink_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => crate::error::DeleteSinkError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteSinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_delete_sink_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "MissingRequiredParameterException" => {
            crate::error::DeleteSinkError::MissingRequiredParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::missing_required_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_missing_required_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteSinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_delete_sink_missing_required_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => crate::error::DeleteSinkError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteSinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_delete_sink_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::DeleteSinkError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_sink_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteSinkOutput, crate::error::DeleteSinkError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_sink_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_link_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetLinkOutput, crate::error::GetLinkError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetLinkError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetLinkError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServiceFault" => {
            crate::error::GetLinkError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::GetLinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_link_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => crate::error::GetLinkError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetLinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_link_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "MissingRequiredParameterException" => {
            crate::error::GetLinkError::MissingRequiredParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::missing_required_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_missing_required_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetLinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_link_missing_required_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => crate::error::GetLinkError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetLinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_link_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetLinkError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_link_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetLinkOutput, crate::error::GetLinkError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_link_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_link(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetLinkError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_sink_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetSinkOutput, crate::error::GetSinkError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetSinkError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetSinkError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServiceFault" => {
            crate::error::GetSinkError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::GetSinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_sink_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => crate::error::GetSinkError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetSinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_sink_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "MissingRequiredParameterException" => {
            crate::error::GetSinkError::MissingRequiredParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::missing_required_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_missing_required_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetSinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_sink_missing_required_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => crate::error::GetSinkError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetSinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_sink_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetSinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::GetSinkError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_sink_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetSinkOutput, crate::error::GetSinkError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_sink_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_sink(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetSinkError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_sink_policy_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetSinkPolicyOutput, crate::error::GetSinkPolicyError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetSinkPolicyError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetSinkPolicyError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServiceFault" => {
            crate::error::GetSinkPolicyError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::GetSinkPolicyError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_sink_policy_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetSinkPolicyError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => {
            crate::error::GetSinkPolicyError::InvalidParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetSinkPolicyError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_sink_policy_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetSinkPolicyError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MissingRequiredParameterException" => {
            crate::error::GetSinkPolicyError::MissingRequiredParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::missing_required_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_missing_required_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetSinkPolicyError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_sink_policy_missing_required_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetSinkPolicyError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::GetSinkPolicyError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetSinkPolicyError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_get_sink_policy_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::GetSinkPolicyError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::GetSinkPolicyError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_sink_policy_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetSinkPolicyOutput, crate::error::GetSinkPolicyError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_sink_policy_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_sink_policy(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetSinkPolicyError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_attached_links_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListAttachedLinksOutput, crate::error::ListAttachedLinksError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListAttachedLinksError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListAttachedLinksError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServiceFault" => {
            crate::error::ListAttachedLinksError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListAttachedLinksError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_list_attached_links_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::ListAttachedLinksError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => {
            crate::error::ListAttachedLinksError::InvalidParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListAttachedLinksError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_list_attached_links_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::ListAttachedLinksError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MissingRequiredParameterException" => {
            crate::error::ListAttachedLinksError::MissingRequiredParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::missing_required_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_missing_required_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListAttachedLinksError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_list_attached_links_missing_required_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::ListAttachedLinksError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::ListAttachedLinksError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListAttachedLinksError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_list_attached_links_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::ListAttachedLinksError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::ListAttachedLinksError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_attached_links_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListAttachedLinksOutput, crate::error::ListAttachedLinksError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_attached_links_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_attached_links(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListAttachedLinksError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_links_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListLinksOutput, crate::error::ListLinksError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListLinksError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListLinksError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServiceFault" => {
            crate::error::ListLinksError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListLinksError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_list_links_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::ListLinksError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => crate::error::ListLinksError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListLinksError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_list_links_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::ListLinksError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ResourceNotFoundException" => crate::error::ListLinksError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListLinksError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_list_links_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::ListLinksError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListLinksError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_links_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListLinksOutput, crate::error::ListLinksError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_links_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_links(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListLinksError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_sinks_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListSinksOutput, crate::error::ListSinksError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListSinksError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListSinksError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServiceFault" => {
            crate::error::ListSinksError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListSinksError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_list_sinks_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::ListSinksError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => crate::error::ListSinksError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListSinksError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_list_sinks_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::ListSinksError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ResourceNotFoundException" => crate::error::ListSinksError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListSinksError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_list_sinks_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::ListSinksError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::ListSinksError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_sinks_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListSinksOutput, crate::error::ListSinksError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_sinks_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_sinks(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListSinksError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ResourceNotFoundException" => {
            crate::error::ListTagsForResourceError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_list_tags_for_resource_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::ListTagsForResourceError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::ListTagsForResourceError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::ListTagsForResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_resource_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_tags_for_resource(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_sink_policy_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PutSinkPolicyOutput, crate::error::PutSinkPolicyError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::PutSinkPolicyError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PutSinkPolicyError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServiceFault" => {
            crate::error::PutSinkPolicyError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::PutSinkPolicyError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_put_sink_policy_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::PutSinkPolicyError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => {
            crate::error::PutSinkPolicyError::InvalidParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutSinkPolicyError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_put_sink_policy_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::PutSinkPolicyError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MissingRequiredParameterException" => {
            crate::error::PutSinkPolicyError::MissingRequiredParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::missing_required_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_missing_required_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutSinkPolicyError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_put_sink_policy_missing_required_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::PutSinkPolicyError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::PutSinkPolicyError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutSinkPolicyError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_put_sink_policy_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::PutSinkPolicyError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::PutSinkPolicyError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_sink_policy_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PutSinkPolicyOutput, crate::error::PutSinkPolicyError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::put_sink_policy_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_put_sink_policy(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::PutSinkPolicyError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::TagResourceError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::TagResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ResourceNotFoundException" => crate::error::TagResourceError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_tag_resource_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::TagResourceError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TooManyTagsException" => crate::error::TagResourceError::TooManyTagsException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_tags_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_too_many_tags_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ValidationException" => {
            crate::error::TagResourceError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::TagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::tag_resource_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UntagResourceError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UntagResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ResourceNotFoundException" => {
            crate::error::UntagResourceError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_untag_resource_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::UntagResourceError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::UntagResourceError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::UntagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::untag_resource_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_link_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateLinkOutput, crate::error::UpdateLinkError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateLinkError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateLinkError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServiceFault" => {
            crate::error::UpdateLinkError::InternalServiceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_service_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_service_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateLinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_update_link_internal_service_fault_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => crate::error::UpdateLinkError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateLinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_update_link_invalid_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "MissingRequiredParameterException" => {
            crate::error::UpdateLinkError::MissingRequiredParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::missing_required_parameter_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_missing_required_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateLinkError::unhandled)?;
                    output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_update_link_missing_required_parameter_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => crate::error::UpdateLinkError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateLinkError::unhandled)?;
                output = output.set_amzn_error_type(
                        crate::http_serde::deser_header_update_link_resource_not_found_exception_amzn_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateLinkError::unhandled("Failed to parse amznErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::UpdateLinkError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_link_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateLinkOutput, crate::error::UpdateLinkError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_link_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_update_link(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateLinkError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
