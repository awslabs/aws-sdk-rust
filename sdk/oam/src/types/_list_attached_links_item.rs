// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains information about one link attached to this monitoring account sink.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAttachedLinksItem {
    /// <p>The label that was assigned to this link at creation, with the variables resolved to their actual values.</p>
    #[doc(hidden)]
    pub label: std::option::Option<std::string::String>,
    /// <p>The ARN of the link.</p>
    #[doc(hidden)]
    pub link_arn: std::option::Option<std::string::String>,
    /// <p>The resource types supported by this link.</p>
    #[doc(hidden)]
    pub resource_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListAttachedLinksItem {
    /// <p>The label that was assigned to this link at creation, with the variables resolved to their actual values.</p>
    pub fn label(&self) -> std::option::Option<&str> {
        self.label.as_deref()
    }
    /// <p>The ARN of the link.</p>
    pub fn link_arn(&self) -> std::option::Option<&str> {
        self.link_arn.as_deref()
    }
    /// <p>The resource types supported by this link.</p>
    pub fn resource_types(&self) -> std::option::Option<&[std::string::String]> {
        self.resource_types.as_deref()
    }
}
impl ListAttachedLinksItem {
    /// Creates a new builder-style object to manufacture [`ListAttachedLinksItem`](crate::types::ListAttachedLinksItem).
    pub fn builder() -> crate::types::builders::ListAttachedLinksItemBuilder {
        crate::types::builders::ListAttachedLinksItemBuilder::default()
    }
}

/// A builder for [`ListAttachedLinksItem`](crate::types::ListAttachedLinksItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListAttachedLinksItemBuilder {
    pub(crate) label: std::option::Option<std::string::String>,
    pub(crate) link_arn: std::option::Option<std::string::String>,
    pub(crate) resource_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListAttachedLinksItemBuilder {
    /// <p>The label that was assigned to this link at creation, with the variables resolved to their actual values.</p>
    pub fn label(mut self, input: impl Into<std::string::String>) -> Self {
        self.label = Some(input.into());
        self
    }
    /// <p>The label that was assigned to this link at creation, with the variables resolved to their actual values.</p>
    pub fn set_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.label = input;
        self
    }
    /// <p>The ARN of the link.</p>
    pub fn link_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.link_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the link.</p>
    pub fn set_link_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.link_arn = input;
        self
    }
    /// Appends an item to `resource_types`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>The resource types supported by this link.</p>
    pub fn resource_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.resource_types.unwrap_or_default();
        v.push(input.into());
        self.resource_types = Some(v);
        self
    }
    /// <p>The resource types supported by this link.</p>
    pub fn set_resource_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.resource_types = input;
        self
    }
    /// Consumes the builder and constructs a [`ListAttachedLinksItem`](crate::types::ListAttachedLinksItem).
    pub fn build(self) -> crate::types::ListAttachedLinksItem {
        crate::types::ListAttachedLinksItem {
            label: self.label,
            link_arn: self.link_arn,
            resource_types: self.resource_types,
        }
    }
}
