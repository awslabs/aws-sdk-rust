// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateWirelessGatewayOutput {}
impl std::fmt::Debug for UpdateWirelessGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateWirelessGatewayOutput");
        formatter.finish()
    }
}
/// See [`UpdateWirelessGatewayOutput`](crate::output::UpdateWirelessGatewayOutput)
pub mod update_wireless_gateway_output {
    /// A builder for [`UpdateWirelessGatewayOutput`](crate::output::UpdateWirelessGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateWirelessGatewayOutput`](crate::output::UpdateWirelessGatewayOutput)
        pub fn build(self) -> crate::output::UpdateWirelessGatewayOutput {
            crate::output::UpdateWirelessGatewayOutput {}
        }
    }
}
impl UpdateWirelessGatewayOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWirelessGatewayOutput`](crate::output::UpdateWirelessGatewayOutput)
    pub fn builder() -> crate::output::update_wireless_gateway_output::Builder {
        crate::output::update_wireless_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateWirelessDeviceOutput {}
impl std::fmt::Debug for UpdateWirelessDeviceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateWirelessDeviceOutput");
        formatter.finish()
    }
}
/// See [`UpdateWirelessDeviceOutput`](crate::output::UpdateWirelessDeviceOutput)
pub mod update_wireless_device_output {
    /// A builder for [`UpdateWirelessDeviceOutput`](crate::output::UpdateWirelessDeviceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateWirelessDeviceOutput`](crate::output::UpdateWirelessDeviceOutput)
        pub fn build(self) -> crate::output::UpdateWirelessDeviceOutput {
            crate::output::UpdateWirelessDeviceOutput {}
        }
    }
}
impl UpdateWirelessDeviceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWirelessDeviceOutput`](crate::output::UpdateWirelessDeviceOutput)
    pub fn builder() -> crate::output::update_wireless_device_output::Builder {
        crate::output::update_wireless_device_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdatePartnerAccountOutput {}
impl std::fmt::Debug for UpdatePartnerAccountOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePartnerAccountOutput");
        formatter.finish()
    }
}
/// See [`UpdatePartnerAccountOutput`](crate::output::UpdatePartnerAccountOutput)
pub mod update_partner_account_output {
    /// A builder for [`UpdatePartnerAccountOutput`](crate::output::UpdatePartnerAccountOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdatePartnerAccountOutput`](crate::output::UpdatePartnerAccountOutput)
        pub fn build(self) -> crate::output::UpdatePartnerAccountOutput {
            crate::output::UpdatePartnerAccountOutput {}
        }
    }
}
impl UpdatePartnerAccountOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePartnerAccountOutput`](crate::output::UpdatePartnerAccountOutput)
    pub fn builder() -> crate::output::update_partner_account_output::Builder {
        crate::output::update_partner_account_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateLogLevelsByResourceTypesOutput {}
impl std::fmt::Debug for UpdateLogLevelsByResourceTypesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateLogLevelsByResourceTypesOutput");
        formatter.finish()
    }
}
/// See [`UpdateLogLevelsByResourceTypesOutput`](crate::output::UpdateLogLevelsByResourceTypesOutput)
pub mod update_log_levels_by_resource_types_output {
    /// A builder for [`UpdateLogLevelsByResourceTypesOutput`](crate::output::UpdateLogLevelsByResourceTypesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateLogLevelsByResourceTypesOutput`](crate::output::UpdateLogLevelsByResourceTypesOutput)
        pub fn build(self) -> crate::output::UpdateLogLevelsByResourceTypesOutput {
            crate::output::UpdateLogLevelsByResourceTypesOutput {}
        }
    }
}
impl UpdateLogLevelsByResourceTypesOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLogLevelsByResourceTypesOutput`](crate::output::UpdateLogLevelsByResourceTypesOutput)
    pub fn builder() -> crate::output::update_log_levels_by_resource_types_output::Builder {
        crate::output::update_log_levels_by_resource_types_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateDestinationOutput {}
impl std::fmt::Debug for UpdateDestinationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDestinationOutput");
        formatter.finish()
    }
}
/// See [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput)
pub mod update_destination_output {
    /// A builder for [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput)
        pub fn build(self) -> crate::output::UpdateDestinationOutput {
            crate::output::UpdateDestinationOutput {}
        }
    }
}
impl UpdateDestinationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDestinationOutput`](crate::output::UpdateDestinationOutput)
    pub fn builder() -> crate::output::update_destination_output::Builder {
        crate::output::update_destination_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TestWirelessDeviceOutput {
    /// <p>The result returned by the test.</p>
    pub result: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for TestWirelessDeviceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TestWirelessDeviceOutput");
        formatter.field("result", &self.result);
        formatter.finish()
    }
}
/// See [`TestWirelessDeviceOutput`](crate::output::TestWirelessDeviceOutput)
pub mod test_wireless_device_output {
    /// A builder for [`TestWirelessDeviceOutput`](crate::output::TestWirelessDeviceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) result: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The result returned by the test.</p>
        pub fn result(mut self, input: impl Into<std::string::String>) -> Self {
            self.result = Some(input.into());
            self
        }
        pub fn set_result(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.result = input;
            self
        }
        /// Consumes the builder and constructs a [`TestWirelessDeviceOutput`](crate::output::TestWirelessDeviceOutput)
        pub fn build(self) -> crate::output::TestWirelessDeviceOutput {
            crate::output::TestWirelessDeviceOutput {
                result: self.result,
            }
        }
    }
}
impl TestWirelessDeviceOutput {
    /// Creates a new builder-style object to manufacture [`TestWirelessDeviceOutput`](crate::output::TestWirelessDeviceOutput)
    pub fn builder() -> crate::output::test_wireless_device_output::Builder {
        crate::output::test_wireless_device_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SendDataToWirelessDeviceOutput {
    /// <p>The ID of the message sent to the wireless device.</p>
    pub message_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for SendDataToWirelessDeviceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SendDataToWirelessDeviceOutput");
        formatter.field("message_id", &self.message_id);
        formatter.finish()
    }
}
/// See [`SendDataToWirelessDeviceOutput`](crate::output::SendDataToWirelessDeviceOutput)
pub mod send_data_to_wireless_device_output {
    /// A builder for [`SendDataToWirelessDeviceOutput`](crate::output::SendDataToWirelessDeviceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the message sent to the wireless device.</p>
        pub fn message_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.message_id = Some(input.into());
            self
        }
        pub fn set_message_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message_id = input;
            self
        }
        /// Consumes the builder and constructs a [`SendDataToWirelessDeviceOutput`](crate::output::SendDataToWirelessDeviceOutput)
        pub fn build(self) -> crate::output::SendDataToWirelessDeviceOutput {
            crate::output::SendDataToWirelessDeviceOutput {
                message_id: self.message_id,
            }
        }
    }
}
impl SendDataToWirelessDeviceOutput {
    /// Creates a new builder-style object to manufacture [`SendDataToWirelessDeviceOutput`](crate::output::SendDataToWirelessDeviceOutput)
    pub fn builder() -> crate::output::send_data_to_wireless_device_output::Builder {
        crate::output::send_data_to_wireless_device_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetResourceLogLevelOutput {}
impl std::fmt::Debug for ResetResourceLogLevelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetResourceLogLevelOutput");
        formatter.finish()
    }
}
/// See [`ResetResourceLogLevelOutput`](crate::output::ResetResourceLogLevelOutput)
pub mod reset_resource_log_level_output {
    /// A builder for [`ResetResourceLogLevelOutput`](crate::output::ResetResourceLogLevelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ResetResourceLogLevelOutput`](crate::output::ResetResourceLogLevelOutput)
        pub fn build(self) -> crate::output::ResetResourceLogLevelOutput {
            crate::output::ResetResourceLogLevelOutput {}
        }
    }
}
impl ResetResourceLogLevelOutput {
    /// Creates a new builder-style object to manufacture [`ResetResourceLogLevelOutput`](crate::output::ResetResourceLogLevelOutput)
    pub fn builder() -> crate::output::reset_resource_log_level_output::Builder {
        crate::output::reset_resource_log_level_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetAllResourceLogLevelsOutput {}
impl std::fmt::Debug for ResetAllResourceLogLevelsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetAllResourceLogLevelsOutput");
        formatter.finish()
    }
}
/// See [`ResetAllResourceLogLevelsOutput`](crate::output::ResetAllResourceLogLevelsOutput)
pub mod reset_all_resource_log_levels_output {
    /// A builder for [`ResetAllResourceLogLevelsOutput`](crate::output::ResetAllResourceLogLevelsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ResetAllResourceLogLevelsOutput`](crate::output::ResetAllResourceLogLevelsOutput)
        pub fn build(self) -> crate::output::ResetAllResourceLogLevelsOutput {
            crate::output::ResetAllResourceLogLevelsOutput {}
        }
    }
}
impl ResetAllResourceLogLevelsOutput {
    /// Creates a new builder-style object to manufacture [`ResetAllResourceLogLevelsOutput`](crate::output::ResetAllResourceLogLevelsOutput)
    pub fn builder() -> crate::output::reset_all_resource_log_levels_output::Builder {
        crate::output::reset_all_resource_log_levels_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutResourceLogLevelOutput {}
impl std::fmt::Debug for PutResourceLogLevelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutResourceLogLevelOutput");
        formatter.finish()
    }
}
/// See [`PutResourceLogLevelOutput`](crate::output::PutResourceLogLevelOutput)
pub mod put_resource_log_level_output {
    /// A builder for [`PutResourceLogLevelOutput`](crate::output::PutResourceLogLevelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutResourceLogLevelOutput`](crate::output::PutResourceLogLevelOutput)
        pub fn build(self) -> crate::output::PutResourceLogLevelOutput {
            crate::output::PutResourceLogLevelOutput {}
        }
    }
}
impl PutResourceLogLevelOutput {
    /// Creates a new builder-style object to manufacture [`PutResourceLogLevelOutput`](crate::output::PutResourceLogLevelOutput)
    pub fn builder() -> crate::output::put_resource_log_level_output::Builder {
        crate::output::put_resource_log_level_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListWirelessGatewayTaskDefinitionsOutput {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The list of task definitions.</p>
    pub task_definitions:
        std::option::Option<std::vec::Vec<crate::model::UpdateWirelessGatewayTaskEntry>>,
}
impl std::fmt::Debug for ListWirelessGatewayTaskDefinitionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListWirelessGatewayTaskDefinitionsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("task_definitions", &self.task_definitions);
        formatter.finish()
    }
}
/// See [`ListWirelessGatewayTaskDefinitionsOutput`](crate::output::ListWirelessGatewayTaskDefinitionsOutput)
pub mod list_wireless_gateway_task_definitions_output {
    /// A builder for [`ListWirelessGatewayTaskDefinitionsOutput`](crate::output::ListWirelessGatewayTaskDefinitionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) task_definitions:
            std::option::Option<std::vec::Vec<crate::model::UpdateWirelessGatewayTaskEntry>>,
    }
    impl Builder {
        /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn task_definitions(
            mut self,
            input: impl Into<crate::model::UpdateWirelessGatewayTaskEntry>,
        ) -> Self {
            let mut v = self.task_definitions.unwrap_or_default();
            v.push(input.into());
            self.task_definitions = Some(v);
            self
        }
        pub fn set_task_definitions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UpdateWirelessGatewayTaskEntry>>,
        ) -> Self {
            self.task_definitions = input;
            self
        }
        /// Consumes the builder and constructs a [`ListWirelessGatewayTaskDefinitionsOutput`](crate::output::ListWirelessGatewayTaskDefinitionsOutput)
        pub fn build(self) -> crate::output::ListWirelessGatewayTaskDefinitionsOutput {
            crate::output::ListWirelessGatewayTaskDefinitionsOutput {
                next_token: self.next_token,
                task_definitions: self.task_definitions,
            }
        }
    }
}
impl ListWirelessGatewayTaskDefinitionsOutput {
    /// Creates a new builder-style object to manufacture [`ListWirelessGatewayTaskDefinitionsOutput`](crate::output::ListWirelessGatewayTaskDefinitionsOutput)
    pub fn builder() -> crate::output::list_wireless_gateway_task_definitions_output::Builder {
        crate::output::list_wireless_gateway_task_definitions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListWirelessGatewaysOutput {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the wireless gateway.</p>
    pub wireless_gateway_list:
        std::option::Option<std::vec::Vec<crate::model::WirelessGatewayStatistics>>,
}
impl std::fmt::Debug for ListWirelessGatewaysOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListWirelessGatewaysOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("wireless_gateway_list", &self.wireless_gateway_list);
        formatter.finish()
    }
}
/// See [`ListWirelessGatewaysOutput`](crate::output::ListWirelessGatewaysOutput)
pub mod list_wireless_gateways_output {
    /// A builder for [`ListWirelessGatewaysOutput`](crate::output::ListWirelessGatewaysOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) wireless_gateway_list:
            std::option::Option<std::vec::Vec<crate::model::WirelessGatewayStatistics>>,
    }
    impl Builder {
        /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn wireless_gateway_list(
            mut self,
            input: impl Into<crate::model::WirelessGatewayStatistics>,
        ) -> Self {
            let mut v = self.wireless_gateway_list.unwrap_or_default();
            v.push(input.into());
            self.wireless_gateway_list = Some(v);
            self
        }
        pub fn set_wireless_gateway_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WirelessGatewayStatistics>>,
        ) -> Self {
            self.wireless_gateway_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListWirelessGatewaysOutput`](crate::output::ListWirelessGatewaysOutput)
        pub fn build(self) -> crate::output::ListWirelessGatewaysOutput {
            crate::output::ListWirelessGatewaysOutput {
                next_token: self.next_token,
                wireless_gateway_list: self.wireless_gateway_list,
            }
        }
    }
}
impl ListWirelessGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`ListWirelessGatewaysOutput`](crate::output::ListWirelessGatewaysOutput)
    pub fn builder() -> crate::output::list_wireless_gateways_output::Builder {
        crate::output::list_wireless_gateways_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListWirelessDevicesOutput {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the wireless device.</p>
    pub wireless_device_list:
        std::option::Option<std::vec::Vec<crate::model::WirelessDeviceStatistics>>,
}
impl std::fmt::Debug for ListWirelessDevicesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListWirelessDevicesOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("wireless_device_list", &self.wireless_device_list);
        formatter.finish()
    }
}
/// See [`ListWirelessDevicesOutput`](crate::output::ListWirelessDevicesOutput)
pub mod list_wireless_devices_output {
    /// A builder for [`ListWirelessDevicesOutput`](crate::output::ListWirelessDevicesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) wireless_device_list:
            std::option::Option<std::vec::Vec<crate::model::WirelessDeviceStatistics>>,
    }
    impl Builder {
        /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn wireless_device_list(
            mut self,
            input: impl Into<crate::model::WirelessDeviceStatistics>,
        ) -> Self {
            let mut v = self.wireless_device_list.unwrap_or_default();
            v.push(input.into());
            self.wireless_device_list = Some(v);
            self
        }
        pub fn set_wireless_device_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WirelessDeviceStatistics>>,
        ) -> Self {
            self.wireless_device_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListWirelessDevicesOutput`](crate::output::ListWirelessDevicesOutput)
        pub fn build(self) -> crate::output::ListWirelessDevicesOutput {
            crate::output::ListWirelessDevicesOutput {
                next_token: self.next_token,
                wireless_device_list: self.wireless_device_list,
            }
        }
    }
}
impl ListWirelessDevicesOutput {
    /// Creates a new builder-style object to manufacture [`ListWirelessDevicesOutput`](crate::output::ListWirelessDevicesOutput)
    pub fn builder() -> crate::output::list_wireless_devices_output::Builder {
        crate::output::list_wireless_devices_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags to attach to the specified resource. Tags are metadata that you can use to manage a resource.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListServiceProfilesOutput {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The list of service profiles.</p>
    pub service_profile_list: std::option::Option<std::vec::Vec<crate::model::ServiceProfile>>,
}
impl std::fmt::Debug for ListServiceProfilesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListServiceProfilesOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("service_profile_list", &self.service_profile_list);
        formatter.finish()
    }
}
/// See [`ListServiceProfilesOutput`](crate::output::ListServiceProfilesOutput)
pub mod list_service_profiles_output {
    /// A builder for [`ListServiceProfilesOutput`](crate::output::ListServiceProfilesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) service_profile_list:
            std::option::Option<std::vec::Vec<crate::model::ServiceProfile>>,
    }
    impl Builder {
        /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn service_profile_list(
            mut self,
            input: impl Into<crate::model::ServiceProfile>,
        ) -> Self {
            let mut v = self.service_profile_list.unwrap_or_default();
            v.push(input.into());
            self.service_profile_list = Some(v);
            self
        }
        pub fn set_service_profile_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceProfile>>,
        ) -> Self {
            self.service_profile_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListServiceProfilesOutput`](crate::output::ListServiceProfilesOutput)
        pub fn build(self) -> crate::output::ListServiceProfilesOutput {
            crate::output::ListServiceProfilesOutput {
                next_token: self.next_token,
                service_profile_list: self.service_profile_list,
            }
        }
    }
}
impl ListServiceProfilesOutput {
    /// Creates a new builder-style object to manufacture [`ListServiceProfilesOutput`](crate::output::ListServiceProfilesOutput)
    pub fn builder() -> crate::output::list_service_profiles_output::Builder {
        crate::output::list_service_profiles_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPartnerAccountsOutput {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The Sidewalk account credentials.</p>
    pub sidewalk:
        std::option::Option<std::vec::Vec<crate::model::SidewalkAccountInfoWithFingerprint>>,
}
impl std::fmt::Debug for ListPartnerAccountsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPartnerAccountsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("sidewalk", &self.sidewalk);
        formatter.finish()
    }
}
/// See [`ListPartnerAccountsOutput`](crate::output::ListPartnerAccountsOutput)
pub mod list_partner_accounts_output {
    /// A builder for [`ListPartnerAccountsOutput`](crate::output::ListPartnerAccountsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) sidewalk:
            std::option::Option<std::vec::Vec<crate::model::SidewalkAccountInfoWithFingerprint>>,
    }
    impl Builder {
        /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn sidewalk(
            mut self,
            input: impl Into<crate::model::SidewalkAccountInfoWithFingerprint>,
        ) -> Self {
            let mut v = self.sidewalk.unwrap_or_default();
            v.push(input.into());
            self.sidewalk = Some(v);
            self
        }
        pub fn set_sidewalk(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::SidewalkAccountInfoWithFingerprint>,
            >,
        ) -> Self {
            self.sidewalk = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPartnerAccountsOutput`](crate::output::ListPartnerAccountsOutput)
        pub fn build(self) -> crate::output::ListPartnerAccountsOutput {
            crate::output::ListPartnerAccountsOutput {
                next_token: self.next_token,
                sidewalk: self.sidewalk,
            }
        }
    }
}
impl ListPartnerAccountsOutput {
    /// Creates a new builder-style object to manufacture [`ListPartnerAccountsOutput`](crate::output::ListPartnerAccountsOutput)
    pub fn builder() -> crate::output::list_partner_accounts_output::Builder {
        crate::output::list_partner_accounts_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDeviceProfilesOutput {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The list of device profiles.</p>
    pub device_profile_list: std::option::Option<std::vec::Vec<crate::model::DeviceProfile>>,
}
impl std::fmt::Debug for ListDeviceProfilesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDeviceProfilesOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("device_profile_list", &self.device_profile_list);
        formatter.finish()
    }
}
/// See [`ListDeviceProfilesOutput`](crate::output::ListDeviceProfilesOutput)
pub mod list_device_profiles_output {
    /// A builder for [`ListDeviceProfilesOutput`](crate::output::ListDeviceProfilesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) device_profile_list:
            std::option::Option<std::vec::Vec<crate::model::DeviceProfile>>,
    }
    impl Builder {
        /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn device_profile_list(
            mut self,
            input: impl Into<crate::model::DeviceProfile>,
        ) -> Self {
            let mut v = self.device_profile_list.unwrap_or_default();
            v.push(input.into());
            self.device_profile_list = Some(v);
            self
        }
        pub fn set_device_profile_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DeviceProfile>>,
        ) -> Self {
            self.device_profile_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDeviceProfilesOutput`](crate::output::ListDeviceProfilesOutput)
        pub fn build(self) -> crate::output::ListDeviceProfilesOutput {
            crate::output::ListDeviceProfilesOutput {
                next_token: self.next_token,
                device_profile_list: self.device_profile_list,
            }
        }
    }
}
impl ListDeviceProfilesOutput {
    /// Creates a new builder-style object to manufacture [`ListDeviceProfilesOutput`](crate::output::ListDeviceProfilesOutput)
    pub fn builder() -> crate::output::list_device_profiles_output::Builder {
        crate::output::list_device_profiles_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDestinationsOutput {
    /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The list of destinations.</p>
    pub destination_list: std::option::Option<std::vec::Vec<crate::model::Destinations>>,
}
impl std::fmt::Debug for ListDestinationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDestinationsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("destination_list", &self.destination_list);
        formatter.finish()
    }
}
/// See [`ListDestinationsOutput`](crate::output::ListDestinationsOutput)
pub mod list_destinations_output {
    /// A builder for [`ListDestinationsOutput`](crate::output::ListDestinationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) destination_list: std::option::Option<std::vec::Vec<crate::model::Destinations>>,
    }
    impl Builder {
        /// <p>The token to use to get the next set of results, or <b>null</b> if there are no additional results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn destination_list(mut self, input: impl Into<crate::model::Destinations>) -> Self {
            let mut v = self.destination_list.unwrap_or_default();
            v.push(input.into());
            self.destination_list = Some(v);
            self
        }
        pub fn set_destination_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Destinations>>,
        ) -> Self {
            self.destination_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDestinationsOutput`](crate::output::ListDestinationsOutput)
        pub fn build(self) -> crate::output::ListDestinationsOutput {
            crate::output::ListDestinationsOutput {
                next_token: self.next_token,
                destination_list: self.destination_list,
            }
        }
    }
}
impl ListDestinationsOutput {
    /// Creates a new builder-style object to manufacture [`ListDestinationsOutput`](crate::output::ListDestinationsOutput)
    pub fn builder() -> crate::output::list_destinations_output::Builder {
        crate::output::list_destinations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetWirelessGatewayTaskDefinitionOutput {
    /// <p>Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.</p>
    pub auto_create_tasks: bool,
    /// <p>The name of the resource.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>Information about the gateways to update.</p>
    pub update: std::option::Option<crate::model::UpdateWirelessGatewayTaskCreate>,
    /// <p>The Amazon Resource Name of the resource.</p>
    pub arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetWirelessGatewayTaskDefinitionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetWirelessGatewayTaskDefinitionOutput");
        formatter.field("auto_create_tasks", &self.auto_create_tasks);
        formatter.field("name", &self.name);
        formatter.field("update", &self.update);
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`GetWirelessGatewayTaskDefinitionOutput`](crate::output::GetWirelessGatewayTaskDefinitionOutput)
pub mod get_wireless_gateway_task_definition_output {
    /// A builder for [`GetWirelessGatewayTaskDefinitionOutput`](crate::output::GetWirelessGatewayTaskDefinitionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_create_tasks: std::option::Option<bool>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) update: std::option::Option<crate::model::UpdateWirelessGatewayTaskCreate>,
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.</p>
        pub fn auto_create_tasks(mut self, input: bool) -> Self {
            self.auto_create_tasks = Some(input);
            self
        }
        pub fn set_auto_create_tasks(mut self, input: std::option::Option<bool>) -> Self {
            self.auto_create_tasks = input;
            self
        }
        /// <p>The name of the resource.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>Information about the gateways to update.</p>
        pub fn update(mut self, input: crate::model::UpdateWirelessGatewayTaskCreate) -> Self {
            self.update = Some(input);
            self
        }
        pub fn set_update(
            mut self,
            input: std::option::Option<crate::model::UpdateWirelessGatewayTaskCreate>,
        ) -> Self {
            self.update = input;
            self
        }
        /// <p>The Amazon Resource Name of the resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`GetWirelessGatewayTaskDefinitionOutput`](crate::output::GetWirelessGatewayTaskDefinitionOutput)
        pub fn build(self) -> crate::output::GetWirelessGatewayTaskDefinitionOutput {
            crate::output::GetWirelessGatewayTaskDefinitionOutput {
                auto_create_tasks: self.auto_create_tasks.unwrap_or_default(),
                name: self.name,
                update: self.update,
                arn: self.arn,
            }
        }
    }
}
impl GetWirelessGatewayTaskDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayTaskDefinitionOutput`](crate::output::GetWirelessGatewayTaskDefinitionOutput)
    pub fn builder() -> crate::output::get_wireless_gateway_task_definition_output::Builder {
        crate::output::get_wireless_gateway_task_definition_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetWirelessGatewayTaskOutput {
    /// <p>The ID of the wireless gateway.</p>
    pub wireless_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of the WirelessGatewayTask.</p>
    pub wireless_gateway_task_definition_id: std::option::Option<std::string::String>,
    /// <p>The date and time when the most recent uplink was received.</p>
    pub last_uplink_received_at: std::option::Option<std::string::String>,
    /// <p>The date and time when the task was created.</p>
    pub task_created_at: std::option::Option<std::string::String>,
    /// <p>The status of the request.</p>
    pub status: std::option::Option<crate::model::WirelessGatewayTaskStatus>,
}
impl std::fmt::Debug for GetWirelessGatewayTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetWirelessGatewayTaskOutput");
        formatter.field("wireless_gateway_id", &self.wireless_gateway_id);
        formatter.field(
            "wireless_gateway_task_definition_id",
            &self.wireless_gateway_task_definition_id,
        );
        formatter.field("last_uplink_received_at", &self.last_uplink_received_at);
        formatter.field("task_created_at", &self.task_created_at);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`GetWirelessGatewayTaskOutput`](crate::output::GetWirelessGatewayTaskOutput)
pub mod get_wireless_gateway_task_output {
    /// A builder for [`GetWirelessGatewayTaskOutput`](crate::output::GetWirelessGatewayTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) wireless_gateway_id: std::option::Option<std::string::String>,
        pub(crate) wireless_gateway_task_definition_id: std::option::Option<std::string::String>,
        pub(crate) last_uplink_received_at: std::option::Option<std::string::String>,
        pub(crate) task_created_at: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::WirelessGatewayTaskStatus>,
    }
    impl Builder {
        /// <p>The ID of the wireless gateway.</p>
        pub fn wireless_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.wireless_gateway_id = Some(input.into());
            self
        }
        pub fn set_wireless_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.wireless_gateway_id = input;
            self
        }
        /// <p>The ID of the WirelessGatewayTask.</p>
        pub fn wireless_gateway_task_definition_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.wireless_gateway_task_definition_id = Some(input.into());
            self
        }
        pub fn set_wireless_gateway_task_definition_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.wireless_gateway_task_definition_id = input;
            self
        }
        /// <p>The date and time when the most recent uplink was received.</p>
        pub fn last_uplink_received_at(mut self, input: impl Into<std::string::String>) -> Self {
            self.last_uplink_received_at = Some(input.into());
            self
        }
        pub fn set_last_uplink_received_at(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.last_uplink_received_at = input;
            self
        }
        /// <p>The date and time when the task was created.</p>
        pub fn task_created_at(mut self, input: impl Into<std::string::String>) -> Self {
            self.task_created_at = Some(input.into());
            self
        }
        pub fn set_task_created_at(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.task_created_at = input;
            self
        }
        /// <p>The status of the request.</p>
        pub fn status(mut self, input: crate::model::WirelessGatewayTaskStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::WirelessGatewayTaskStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`GetWirelessGatewayTaskOutput`](crate::output::GetWirelessGatewayTaskOutput)
        pub fn build(self) -> crate::output::GetWirelessGatewayTaskOutput {
            crate::output::GetWirelessGatewayTaskOutput {
                wireless_gateway_id: self.wireless_gateway_id,
                wireless_gateway_task_definition_id: self.wireless_gateway_task_definition_id,
                last_uplink_received_at: self.last_uplink_received_at,
                task_created_at: self.task_created_at,
                status: self.status,
            }
        }
    }
}
impl GetWirelessGatewayTaskOutput {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayTaskOutput`](crate::output::GetWirelessGatewayTaskOutput)
    pub fn builder() -> crate::output::get_wireless_gateway_task_output::Builder {
        crate::output::get_wireless_gateway_task_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetWirelessGatewayStatisticsOutput {
    /// <p>The ID of the wireless gateway.</p>
    pub wireless_gateway_id: std::option::Option<std::string::String>,
    /// <p>The date and time when the most recent uplink was received.</p>
    pub last_uplink_received_at: std::option::Option<std::string::String>,
    /// <p>The connection status of the wireless gateway.</p>
    pub connection_status: std::option::Option<crate::model::ConnectionStatus>,
}
impl std::fmt::Debug for GetWirelessGatewayStatisticsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetWirelessGatewayStatisticsOutput");
        formatter.field("wireless_gateway_id", &self.wireless_gateway_id);
        formatter.field("last_uplink_received_at", &self.last_uplink_received_at);
        formatter.field("connection_status", &self.connection_status);
        formatter.finish()
    }
}
/// See [`GetWirelessGatewayStatisticsOutput`](crate::output::GetWirelessGatewayStatisticsOutput)
pub mod get_wireless_gateway_statistics_output {
    /// A builder for [`GetWirelessGatewayStatisticsOutput`](crate::output::GetWirelessGatewayStatisticsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) wireless_gateway_id: std::option::Option<std::string::String>,
        pub(crate) last_uplink_received_at: std::option::Option<std::string::String>,
        pub(crate) connection_status: std::option::Option<crate::model::ConnectionStatus>,
    }
    impl Builder {
        /// <p>The ID of the wireless gateway.</p>
        pub fn wireless_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.wireless_gateway_id = Some(input.into());
            self
        }
        pub fn set_wireless_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.wireless_gateway_id = input;
            self
        }
        /// <p>The date and time when the most recent uplink was received.</p>
        pub fn last_uplink_received_at(mut self, input: impl Into<std::string::String>) -> Self {
            self.last_uplink_received_at = Some(input.into());
            self
        }
        pub fn set_last_uplink_received_at(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.last_uplink_received_at = input;
            self
        }
        /// <p>The connection status of the wireless gateway.</p>
        pub fn connection_status(mut self, input: crate::model::ConnectionStatus) -> Self {
            self.connection_status = Some(input);
            self
        }
        pub fn set_connection_status(
            mut self,
            input: std::option::Option<crate::model::ConnectionStatus>,
        ) -> Self {
            self.connection_status = input;
            self
        }
        /// Consumes the builder and constructs a [`GetWirelessGatewayStatisticsOutput`](crate::output::GetWirelessGatewayStatisticsOutput)
        pub fn build(self) -> crate::output::GetWirelessGatewayStatisticsOutput {
            crate::output::GetWirelessGatewayStatisticsOutput {
                wireless_gateway_id: self.wireless_gateway_id,
                last_uplink_received_at: self.last_uplink_received_at,
                connection_status: self.connection_status,
            }
        }
    }
}
impl GetWirelessGatewayStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayStatisticsOutput`](crate::output::GetWirelessGatewayStatisticsOutput)
    pub fn builder() -> crate::output::get_wireless_gateway_statistics_output::Builder {
        crate::output::get_wireless_gateway_statistics_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetWirelessGatewayFirmwareInformationOutput {
    /// <p>Information about the wireless gateway's firmware.</p>
    pub lo_ra_wan: std::option::Option<crate::model::LoRaWanGatewayCurrentVersion>,
}
impl std::fmt::Debug for GetWirelessGatewayFirmwareInformationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetWirelessGatewayFirmwareInformationOutput");
        formatter.field("lo_ra_wan", &self.lo_ra_wan);
        formatter.finish()
    }
}
/// See [`GetWirelessGatewayFirmwareInformationOutput`](crate::output::GetWirelessGatewayFirmwareInformationOutput)
pub mod get_wireless_gateway_firmware_information_output {
    /// A builder for [`GetWirelessGatewayFirmwareInformationOutput`](crate::output::GetWirelessGatewayFirmwareInformationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lo_ra_wan: std::option::Option<crate::model::LoRaWanGatewayCurrentVersion>,
    }
    impl Builder {
        /// <p>Information about the wireless gateway's firmware.</p>
        pub fn lo_ra_wan(mut self, input: crate::model::LoRaWanGatewayCurrentVersion) -> Self {
            self.lo_ra_wan = Some(input);
            self
        }
        pub fn set_lo_ra_wan(
            mut self,
            input: std::option::Option<crate::model::LoRaWanGatewayCurrentVersion>,
        ) -> Self {
            self.lo_ra_wan = input;
            self
        }
        /// Consumes the builder and constructs a [`GetWirelessGatewayFirmwareInformationOutput`](crate::output::GetWirelessGatewayFirmwareInformationOutput)
        pub fn build(self) -> crate::output::GetWirelessGatewayFirmwareInformationOutput {
            crate::output::GetWirelessGatewayFirmwareInformationOutput {
                lo_ra_wan: self.lo_ra_wan,
            }
        }
    }
}
impl GetWirelessGatewayFirmwareInformationOutput {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayFirmwareInformationOutput`](crate::output::GetWirelessGatewayFirmwareInformationOutput)
    pub fn builder() -> crate::output::get_wireless_gateway_firmware_information_output::Builder {
        crate::output::get_wireless_gateway_firmware_information_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetWirelessGatewayCertificateOutput {
    /// <p>The ID of the certificate associated with the wireless gateway.</p>
    pub iot_certificate_id: std::option::Option<std::string::String>,
    /// <p>The ID of the certificate that is associated with the wireless gateway and used for the LoRaWANNetworkServer endpoint.</p>
    pub lo_ra_wan_network_server_certificate_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetWirelessGatewayCertificateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetWirelessGatewayCertificateOutput");
        formatter.field("iot_certificate_id", &self.iot_certificate_id);
        formatter.field(
            "lo_ra_wan_network_server_certificate_id",
            &self.lo_ra_wan_network_server_certificate_id,
        );
        formatter.finish()
    }
}
/// See [`GetWirelessGatewayCertificateOutput`](crate::output::GetWirelessGatewayCertificateOutput)
pub mod get_wireless_gateway_certificate_output {
    /// A builder for [`GetWirelessGatewayCertificateOutput`](crate::output::GetWirelessGatewayCertificateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) iot_certificate_id: std::option::Option<std::string::String>,
        pub(crate) lo_ra_wan_network_server_certificate_id:
            std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the certificate associated with the wireless gateway.</p>
        pub fn iot_certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.iot_certificate_id = Some(input.into());
            self
        }
        pub fn set_iot_certificate_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.iot_certificate_id = input;
            self
        }
        /// <p>The ID of the certificate that is associated with the wireless gateway and used for the LoRaWANNetworkServer endpoint.</p>
        pub fn lo_ra_wan_network_server_certificate_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.lo_ra_wan_network_server_certificate_id = Some(input.into());
            self
        }
        pub fn set_lo_ra_wan_network_server_certificate_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.lo_ra_wan_network_server_certificate_id = input;
            self
        }
        /// Consumes the builder and constructs a [`GetWirelessGatewayCertificateOutput`](crate::output::GetWirelessGatewayCertificateOutput)
        pub fn build(self) -> crate::output::GetWirelessGatewayCertificateOutput {
            crate::output::GetWirelessGatewayCertificateOutput {
                iot_certificate_id: self.iot_certificate_id,
                lo_ra_wan_network_server_certificate_id: self
                    .lo_ra_wan_network_server_certificate_id,
            }
        }
    }
}
impl GetWirelessGatewayCertificateOutput {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayCertificateOutput`](crate::output::GetWirelessGatewayCertificateOutput)
    pub fn builder() -> crate::output::get_wireless_gateway_certificate_output::Builder {
        crate::output::get_wireless_gateway_certificate_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetWirelessGatewayOutput {
    /// <p>The name of the resource.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the wireless gateway.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The description of the resource.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>Information about the wireless gateway.</p>
    pub lo_ra_wan: std::option::Option<crate::model::LoRaWanGateway>,
    /// <p>The Amazon Resource Name of the resource.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the thing associated with the wireless gateway. The value is empty if a thing isn't associated with the gateway.</p>
    pub thing_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the thing associated with the wireless gateway.</p>
    pub thing_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetWirelessGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetWirelessGatewayOutput");
        formatter.field("name", &self.name);
        formatter.field("id", &self.id);
        formatter.field("description", &self.description);
        formatter.field("lo_ra_wan", &self.lo_ra_wan);
        formatter.field("arn", &self.arn);
        formatter.field("thing_name", &self.thing_name);
        formatter.field("thing_arn", &self.thing_arn);
        formatter.finish()
    }
}
/// See [`GetWirelessGatewayOutput`](crate::output::GetWirelessGatewayOutput)
pub mod get_wireless_gateway_output {
    /// A builder for [`GetWirelessGatewayOutput`](crate::output::GetWirelessGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) lo_ra_wan: std::option::Option<crate::model::LoRaWanGateway>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) thing_name: std::option::Option<std::string::String>,
        pub(crate) thing_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the resource.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The ID of the wireless gateway.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The description of the resource.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>Information about the wireless gateway.</p>
        pub fn lo_ra_wan(mut self, input: crate::model::LoRaWanGateway) -> Self {
            self.lo_ra_wan = Some(input);
            self
        }
        pub fn set_lo_ra_wan(
            mut self,
            input: std::option::Option<crate::model::LoRaWanGateway>,
        ) -> Self {
            self.lo_ra_wan = input;
            self
        }
        /// <p>The Amazon Resource Name of the resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the thing associated with the wireless gateway. The value is empty if a thing isn't associated with the gateway.</p>
        pub fn thing_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.thing_name = Some(input.into());
            self
        }
        pub fn set_thing_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.thing_name = input;
            self
        }
        /// <p>The ARN of the thing associated with the wireless gateway.</p>
        pub fn thing_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.thing_arn = Some(input.into());
            self
        }
        pub fn set_thing_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.thing_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`GetWirelessGatewayOutput`](crate::output::GetWirelessGatewayOutput)
        pub fn build(self) -> crate::output::GetWirelessGatewayOutput {
            crate::output::GetWirelessGatewayOutput {
                name: self.name,
                id: self.id,
                description: self.description,
                lo_ra_wan: self.lo_ra_wan,
                arn: self.arn,
                thing_name: self.thing_name,
                thing_arn: self.thing_arn,
            }
        }
    }
}
impl GetWirelessGatewayOutput {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayOutput`](crate::output::GetWirelessGatewayOutput)
    pub fn builder() -> crate::output::get_wireless_gateway_output::Builder {
        crate::output::get_wireless_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetWirelessDeviceStatisticsOutput {
    /// <p>The ID of the wireless device.</p>
    pub wireless_device_id: std::option::Option<std::string::String>,
    /// <p>The date and time when the most recent uplink was received.</p>
    pub last_uplink_received_at: std::option::Option<std::string::String>,
    /// <p>Information about the wireless device's operations.</p>
    pub lo_ra_wan: std::option::Option<crate::model::LoRaWanDeviceMetadata>,
    /// <p>MetaData for Sidewalk device.</p>
    pub sidewalk: std::option::Option<crate::model::SidewalkDeviceMetadata>,
}
impl std::fmt::Debug for GetWirelessDeviceStatisticsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetWirelessDeviceStatisticsOutput");
        formatter.field("wireless_device_id", &self.wireless_device_id);
        formatter.field("last_uplink_received_at", &self.last_uplink_received_at);
        formatter.field("lo_ra_wan", &self.lo_ra_wan);
        formatter.field("sidewalk", &self.sidewalk);
        formatter.finish()
    }
}
/// See [`GetWirelessDeviceStatisticsOutput`](crate::output::GetWirelessDeviceStatisticsOutput)
pub mod get_wireless_device_statistics_output {
    /// A builder for [`GetWirelessDeviceStatisticsOutput`](crate::output::GetWirelessDeviceStatisticsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) wireless_device_id: std::option::Option<std::string::String>,
        pub(crate) last_uplink_received_at: std::option::Option<std::string::String>,
        pub(crate) lo_ra_wan: std::option::Option<crate::model::LoRaWanDeviceMetadata>,
        pub(crate) sidewalk: std::option::Option<crate::model::SidewalkDeviceMetadata>,
    }
    impl Builder {
        /// <p>The ID of the wireless device.</p>
        pub fn wireless_device_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.wireless_device_id = Some(input.into());
            self
        }
        pub fn set_wireless_device_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.wireless_device_id = input;
            self
        }
        /// <p>The date and time when the most recent uplink was received.</p>
        pub fn last_uplink_received_at(mut self, input: impl Into<std::string::String>) -> Self {
            self.last_uplink_received_at = Some(input.into());
            self
        }
        pub fn set_last_uplink_received_at(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.last_uplink_received_at = input;
            self
        }
        /// <p>Information about the wireless device's operations.</p>
        pub fn lo_ra_wan(mut self, input: crate::model::LoRaWanDeviceMetadata) -> Self {
            self.lo_ra_wan = Some(input);
            self
        }
        pub fn set_lo_ra_wan(
            mut self,
            input: std::option::Option<crate::model::LoRaWanDeviceMetadata>,
        ) -> Self {
            self.lo_ra_wan = input;
            self
        }
        /// <p>MetaData for Sidewalk device.</p>
        pub fn sidewalk(mut self, input: crate::model::SidewalkDeviceMetadata) -> Self {
            self.sidewalk = Some(input);
            self
        }
        pub fn set_sidewalk(
            mut self,
            input: std::option::Option<crate::model::SidewalkDeviceMetadata>,
        ) -> Self {
            self.sidewalk = input;
            self
        }
        /// Consumes the builder and constructs a [`GetWirelessDeviceStatisticsOutput`](crate::output::GetWirelessDeviceStatisticsOutput)
        pub fn build(self) -> crate::output::GetWirelessDeviceStatisticsOutput {
            crate::output::GetWirelessDeviceStatisticsOutput {
                wireless_device_id: self.wireless_device_id,
                last_uplink_received_at: self.last_uplink_received_at,
                lo_ra_wan: self.lo_ra_wan,
                sidewalk: self.sidewalk,
            }
        }
    }
}
impl GetWirelessDeviceStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`GetWirelessDeviceStatisticsOutput`](crate::output::GetWirelessDeviceStatisticsOutput)
    pub fn builder() -> crate::output::get_wireless_device_statistics_output::Builder {
        crate::output::get_wireless_device_statistics_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetWirelessDeviceOutput {
    /// <p>The wireless device type.</p>
    pub r#type: std::option::Option<crate::model::WirelessDeviceType>,
    /// <p>The name of the resource.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the resource.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The name of the destination to which the device is assigned.</p>
    pub destination_name: std::option::Option<std::string::String>,
    /// <p>The ID of the wireless device.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name of the resource.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the thing associated with the wireless device. The value is empty if a thing isn't associated with the device.</p>
    pub thing_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the thing associated with the wireless device.</p>
    pub thing_arn: std::option::Option<std::string::String>,
    /// <p>Information about the wireless device.</p>
    pub lo_ra_wan: std::option::Option<crate::model::LoRaWanDevice>,
    /// <p>Sidewalk device object.</p>
    pub sidewalk: std::option::Option<crate::model::SidewalkDevice>,
}
impl std::fmt::Debug for GetWirelessDeviceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetWirelessDeviceOutput");
        formatter.field("r#type", &self.r#type);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("destination_name", &self.destination_name);
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("thing_name", &self.thing_name);
        formatter.field("thing_arn", &self.thing_arn);
        formatter.field("lo_ra_wan", &self.lo_ra_wan);
        formatter.field("sidewalk", &self.sidewalk);
        formatter.finish()
    }
}
/// See [`GetWirelessDeviceOutput`](crate::output::GetWirelessDeviceOutput)
pub mod get_wireless_device_output {
    /// A builder for [`GetWirelessDeviceOutput`](crate::output::GetWirelessDeviceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#type: std::option::Option<crate::model::WirelessDeviceType>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) destination_name: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) thing_name: std::option::Option<std::string::String>,
        pub(crate) thing_arn: std::option::Option<std::string::String>,
        pub(crate) lo_ra_wan: std::option::Option<crate::model::LoRaWanDevice>,
        pub(crate) sidewalk: std::option::Option<crate::model::SidewalkDevice>,
    }
    impl Builder {
        /// <p>The wireless device type.</p>
        pub fn r#type(mut self, input: crate::model::WirelessDeviceType) -> Self {
            self.r#type = Some(input);
            self
        }
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::WirelessDeviceType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The name of the resource.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The description of the resource.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The name of the destination to which the device is assigned.</p>
        pub fn destination_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.destination_name = Some(input.into());
            self
        }
        pub fn set_destination_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.destination_name = input;
            self
        }
        /// <p>The ID of the wireless device.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon Resource Name of the resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the thing associated with the wireless device. The value is empty if a thing isn't associated with the device.</p>
        pub fn thing_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.thing_name = Some(input.into());
            self
        }
        pub fn set_thing_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.thing_name = input;
            self
        }
        /// <p>The ARN of the thing associated with the wireless device.</p>
        pub fn thing_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.thing_arn = Some(input.into());
            self
        }
        pub fn set_thing_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.thing_arn = input;
            self
        }
        /// <p>Information about the wireless device.</p>
        pub fn lo_ra_wan(mut self, input: crate::model::LoRaWanDevice) -> Self {
            self.lo_ra_wan = Some(input);
            self
        }
        pub fn set_lo_ra_wan(
            mut self,
            input: std::option::Option<crate::model::LoRaWanDevice>,
        ) -> Self {
            self.lo_ra_wan = input;
            self
        }
        /// <p>Sidewalk device object.</p>
        pub fn sidewalk(mut self, input: crate::model::SidewalkDevice) -> Self {
            self.sidewalk = Some(input);
            self
        }
        pub fn set_sidewalk(
            mut self,
            input: std::option::Option<crate::model::SidewalkDevice>,
        ) -> Self {
            self.sidewalk = input;
            self
        }
        /// Consumes the builder and constructs a [`GetWirelessDeviceOutput`](crate::output::GetWirelessDeviceOutput)
        pub fn build(self) -> crate::output::GetWirelessDeviceOutput {
            crate::output::GetWirelessDeviceOutput {
                r#type: self.r#type,
                name: self.name,
                description: self.description,
                destination_name: self.destination_name,
                id: self.id,
                arn: self.arn,
                thing_name: self.thing_name,
                thing_arn: self.thing_arn,
                lo_ra_wan: self.lo_ra_wan,
                sidewalk: self.sidewalk,
            }
        }
    }
}
impl GetWirelessDeviceOutput {
    /// Creates a new builder-style object to manufacture [`GetWirelessDeviceOutput`](crate::output::GetWirelessDeviceOutput)
    pub fn builder() -> crate::output::get_wireless_device_output::Builder {
        crate::output::get_wireless_device_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetServiceProfileOutput {
    /// <p>The Amazon Resource Name of the resource.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the resource.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the service profile.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>Information about the service profile.</p>
    pub lo_ra_wan: std::option::Option<crate::model::LoRaWanGetServiceProfileInfo>,
}
impl std::fmt::Debug for GetServiceProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetServiceProfileOutput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("id", &self.id);
        formatter.field("lo_ra_wan", &self.lo_ra_wan);
        formatter.finish()
    }
}
/// See [`GetServiceProfileOutput`](crate::output::GetServiceProfileOutput)
pub mod get_service_profile_output {
    /// A builder for [`GetServiceProfileOutput`](crate::output::GetServiceProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) lo_ra_wan: std::option::Option<crate::model::LoRaWanGetServiceProfileInfo>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name of the resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the resource.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The ID of the service profile.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>Information about the service profile.</p>
        pub fn lo_ra_wan(mut self, input: crate::model::LoRaWanGetServiceProfileInfo) -> Self {
            self.lo_ra_wan = Some(input);
            self
        }
        pub fn set_lo_ra_wan(
            mut self,
            input: std::option::Option<crate::model::LoRaWanGetServiceProfileInfo>,
        ) -> Self {
            self.lo_ra_wan = input;
            self
        }
        /// Consumes the builder and constructs a [`GetServiceProfileOutput`](crate::output::GetServiceProfileOutput)
        pub fn build(self) -> crate::output::GetServiceProfileOutput {
            crate::output::GetServiceProfileOutput {
                arn: self.arn,
                name: self.name,
                id: self.id,
                lo_ra_wan: self.lo_ra_wan,
            }
        }
    }
}
impl GetServiceProfileOutput {
    /// Creates a new builder-style object to manufacture [`GetServiceProfileOutput`](crate::output::GetServiceProfileOutput)
    pub fn builder() -> crate::output::get_service_profile_output::Builder {
        crate::output::get_service_profile_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetServiceEndpointOutput {
    /// <p>The endpoint's service type.</p>
    pub service_type: std::option::Option<crate::model::WirelessGatewayServiceType>,
    /// <p>The service endpoint value.</p>
    pub service_endpoint: std::option::Option<std::string::String>,
    /// <p>The Root CA of the server trust certificate.</p>
    pub server_trust: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetServiceEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetServiceEndpointOutput");
        formatter.field("service_type", &self.service_type);
        formatter.field("service_endpoint", &self.service_endpoint);
        formatter.field("server_trust", &self.server_trust);
        formatter.finish()
    }
}
/// See [`GetServiceEndpointOutput`](crate::output::GetServiceEndpointOutput)
pub mod get_service_endpoint_output {
    /// A builder for [`GetServiceEndpointOutput`](crate::output::GetServiceEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_type: std::option::Option<crate::model::WirelessGatewayServiceType>,
        pub(crate) service_endpoint: std::option::Option<std::string::String>,
        pub(crate) server_trust: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The endpoint's service type.</p>
        pub fn service_type(mut self, input: crate::model::WirelessGatewayServiceType) -> Self {
            self.service_type = Some(input);
            self
        }
        pub fn set_service_type(
            mut self,
            input: std::option::Option<crate::model::WirelessGatewayServiceType>,
        ) -> Self {
            self.service_type = input;
            self
        }
        /// <p>The service endpoint value.</p>
        pub fn service_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
            self.service_endpoint = Some(input.into());
            self
        }
        pub fn set_service_endpoint(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.service_endpoint = input;
            self
        }
        /// <p>The Root CA of the server trust certificate.</p>
        pub fn server_trust(mut self, input: impl Into<std::string::String>) -> Self {
            self.server_trust = Some(input.into());
            self
        }
        pub fn set_server_trust(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.server_trust = input;
            self
        }
        /// Consumes the builder and constructs a [`GetServiceEndpointOutput`](crate::output::GetServiceEndpointOutput)
        pub fn build(self) -> crate::output::GetServiceEndpointOutput {
            crate::output::GetServiceEndpointOutput {
                service_type: self.service_type,
                service_endpoint: self.service_endpoint,
                server_trust: self.server_trust,
            }
        }
    }
}
impl GetServiceEndpointOutput {
    /// Creates a new builder-style object to manufacture [`GetServiceEndpointOutput`](crate::output::GetServiceEndpointOutput)
    pub fn builder() -> crate::output::get_service_endpoint_output::Builder {
        crate::output::get_service_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetResourceLogLevelOutput {
    /// <p>The log level for a log message.</p>
    pub log_level: std::option::Option<crate::model::LogLevel>,
}
impl std::fmt::Debug for GetResourceLogLevelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetResourceLogLevelOutput");
        formatter.field("log_level", &self.log_level);
        formatter.finish()
    }
}
/// See [`GetResourceLogLevelOutput`](crate::output::GetResourceLogLevelOutput)
pub mod get_resource_log_level_output {
    /// A builder for [`GetResourceLogLevelOutput`](crate::output::GetResourceLogLevelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) log_level: std::option::Option<crate::model::LogLevel>,
    }
    impl Builder {
        /// <p>The log level for a log message.</p>
        pub fn log_level(mut self, input: crate::model::LogLevel) -> Self {
            self.log_level = Some(input);
            self
        }
        pub fn set_log_level(mut self, input: std::option::Option<crate::model::LogLevel>) -> Self {
            self.log_level = input;
            self
        }
        /// Consumes the builder and constructs a [`GetResourceLogLevelOutput`](crate::output::GetResourceLogLevelOutput)
        pub fn build(self) -> crate::output::GetResourceLogLevelOutput {
            crate::output::GetResourceLogLevelOutput {
                log_level: self.log_level,
            }
        }
    }
}
impl GetResourceLogLevelOutput {
    /// Creates a new builder-style object to manufacture [`GetResourceLogLevelOutput`](crate::output::GetResourceLogLevelOutput)
    pub fn builder() -> crate::output::get_resource_log_level_output::Builder {
        crate::output::get_resource_log_level_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPartnerAccountOutput {
    /// <p>The Sidewalk account credentials.</p>
    pub sidewalk: std::option::Option<crate::model::SidewalkAccountInfoWithFingerprint>,
    /// <p>Whether the partner account is linked to the AWS account.</p>
    pub account_linked: bool,
}
impl std::fmt::Debug for GetPartnerAccountOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPartnerAccountOutput");
        formatter.field("sidewalk", &self.sidewalk);
        formatter.field("account_linked", &self.account_linked);
        formatter.finish()
    }
}
/// See [`GetPartnerAccountOutput`](crate::output::GetPartnerAccountOutput)
pub mod get_partner_account_output {
    /// A builder for [`GetPartnerAccountOutput`](crate::output::GetPartnerAccountOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sidewalk: std::option::Option<crate::model::SidewalkAccountInfoWithFingerprint>,
        pub(crate) account_linked: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The Sidewalk account credentials.</p>
        pub fn sidewalk(mut self, input: crate::model::SidewalkAccountInfoWithFingerprint) -> Self {
            self.sidewalk = Some(input);
            self
        }
        pub fn set_sidewalk(
            mut self,
            input: std::option::Option<crate::model::SidewalkAccountInfoWithFingerprint>,
        ) -> Self {
            self.sidewalk = input;
            self
        }
        /// <p>Whether the partner account is linked to the AWS account.</p>
        pub fn account_linked(mut self, input: bool) -> Self {
            self.account_linked = Some(input);
            self
        }
        pub fn set_account_linked(mut self, input: std::option::Option<bool>) -> Self {
            self.account_linked = input;
            self
        }
        /// Consumes the builder and constructs a [`GetPartnerAccountOutput`](crate::output::GetPartnerAccountOutput)
        pub fn build(self) -> crate::output::GetPartnerAccountOutput {
            crate::output::GetPartnerAccountOutput {
                sidewalk: self.sidewalk,
                account_linked: self.account_linked.unwrap_or_default(),
            }
        }
    }
}
impl GetPartnerAccountOutput {
    /// Creates a new builder-style object to manufacture [`GetPartnerAccountOutput`](crate::output::GetPartnerAccountOutput)
    pub fn builder() -> crate::output::get_partner_account_output::Builder {
        crate::output::get_partner_account_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetLogLevelsByResourceTypesOutput {
    /// <p>The log level for a log message.</p>
    pub default_log_level: std::option::Option<crate::model::LogLevel>,
    /// <p>The list of wireless gateway log options.</p>
    pub wireless_gateway_log_options:
        std::option::Option<std::vec::Vec<crate::model::WirelessGatewayLogOption>>,
    /// <p>The list of wireless device log options.</p>
    pub wireless_device_log_options:
        std::option::Option<std::vec::Vec<crate::model::WirelessDeviceLogOption>>,
}
impl std::fmt::Debug for GetLogLevelsByResourceTypesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetLogLevelsByResourceTypesOutput");
        formatter.field("default_log_level", &self.default_log_level);
        formatter.field(
            "wireless_gateway_log_options",
            &self.wireless_gateway_log_options,
        );
        formatter.field(
            "wireless_device_log_options",
            &self.wireless_device_log_options,
        );
        formatter.finish()
    }
}
/// See [`GetLogLevelsByResourceTypesOutput`](crate::output::GetLogLevelsByResourceTypesOutput)
pub mod get_log_levels_by_resource_types_output {
    /// A builder for [`GetLogLevelsByResourceTypesOutput`](crate::output::GetLogLevelsByResourceTypesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) default_log_level: std::option::Option<crate::model::LogLevel>,
        pub(crate) wireless_gateway_log_options:
            std::option::Option<std::vec::Vec<crate::model::WirelessGatewayLogOption>>,
        pub(crate) wireless_device_log_options:
            std::option::Option<std::vec::Vec<crate::model::WirelessDeviceLogOption>>,
    }
    impl Builder {
        /// <p>The log level for a log message.</p>
        pub fn default_log_level(mut self, input: crate::model::LogLevel) -> Self {
            self.default_log_level = Some(input);
            self
        }
        pub fn set_default_log_level(
            mut self,
            input: std::option::Option<crate::model::LogLevel>,
        ) -> Self {
            self.default_log_level = input;
            self
        }
        pub fn wireless_gateway_log_options(
            mut self,
            input: impl Into<crate::model::WirelessGatewayLogOption>,
        ) -> Self {
            let mut v = self.wireless_gateway_log_options.unwrap_or_default();
            v.push(input.into());
            self.wireless_gateway_log_options = Some(v);
            self
        }
        pub fn set_wireless_gateway_log_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WirelessGatewayLogOption>>,
        ) -> Self {
            self.wireless_gateway_log_options = input;
            self
        }
        pub fn wireless_device_log_options(
            mut self,
            input: impl Into<crate::model::WirelessDeviceLogOption>,
        ) -> Self {
            let mut v = self.wireless_device_log_options.unwrap_or_default();
            v.push(input.into());
            self.wireless_device_log_options = Some(v);
            self
        }
        pub fn set_wireless_device_log_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WirelessDeviceLogOption>>,
        ) -> Self {
            self.wireless_device_log_options = input;
            self
        }
        /// Consumes the builder and constructs a [`GetLogLevelsByResourceTypesOutput`](crate::output::GetLogLevelsByResourceTypesOutput)
        pub fn build(self) -> crate::output::GetLogLevelsByResourceTypesOutput {
            crate::output::GetLogLevelsByResourceTypesOutput {
                default_log_level: self.default_log_level,
                wireless_gateway_log_options: self.wireless_gateway_log_options,
                wireless_device_log_options: self.wireless_device_log_options,
            }
        }
    }
}
impl GetLogLevelsByResourceTypesOutput {
    /// Creates a new builder-style object to manufacture [`GetLogLevelsByResourceTypesOutput`](crate::output::GetLogLevelsByResourceTypesOutput)
    pub fn builder() -> crate::output::get_log_levels_by_resource_types_output::Builder {
        crate::output::get_log_levels_by_resource_types_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDeviceProfileOutput {
    /// <p>The Amazon Resource Name of the resource.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the resource.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the device profile.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>Information about the device profile.</p>
    pub lo_ra_wan: std::option::Option<crate::model::LoRaWanDeviceProfile>,
}
impl std::fmt::Debug for GetDeviceProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDeviceProfileOutput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("id", &self.id);
        formatter.field("lo_ra_wan", &self.lo_ra_wan);
        formatter.finish()
    }
}
/// See [`GetDeviceProfileOutput`](crate::output::GetDeviceProfileOutput)
pub mod get_device_profile_output {
    /// A builder for [`GetDeviceProfileOutput`](crate::output::GetDeviceProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) lo_ra_wan: std::option::Option<crate::model::LoRaWanDeviceProfile>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name of the resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the resource.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The ID of the device profile.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>Information about the device profile.</p>
        pub fn lo_ra_wan(mut self, input: crate::model::LoRaWanDeviceProfile) -> Self {
            self.lo_ra_wan = Some(input);
            self
        }
        pub fn set_lo_ra_wan(
            mut self,
            input: std::option::Option<crate::model::LoRaWanDeviceProfile>,
        ) -> Self {
            self.lo_ra_wan = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDeviceProfileOutput`](crate::output::GetDeviceProfileOutput)
        pub fn build(self) -> crate::output::GetDeviceProfileOutput {
            crate::output::GetDeviceProfileOutput {
                arn: self.arn,
                name: self.name,
                id: self.id,
                lo_ra_wan: self.lo_ra_wan,
            }
        }
    }
}
impl GetDeviceProfileOutput {
    /// Creates a new builder-style object to manufacture [`GetDeviceProfileOutput`](crate::output::GetDeviceProfileOutput)
    pub fn builder() -> crate::output::get_device_profile_output::Builder {
        crate::output::get_device_profile_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDestinationOutput {
    /// <p>The Amazon Resource Name of the resource.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the resource.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The rule name or topic rule to send messages to.</p>
    pub expression: std::option::Option<std::string::String>,
    /// <p>The type of value in <code>Expression</code>.</p>
    pub expression_type: std::option::Option<crate::model::ExpressionType>,
    /// <p>The description of the resource.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The ARN of the IAM Role that authorizes the destination.</p>
    pub role_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetDestinationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDestinationOutput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("expression", &self.expression);
        formatter.field("expression_type", &self.expression_type);
        formatter.field("description", &self.description);
        formatter.field("role_arn", &self.role_arn);
        formatter.finish()
    }
}
/// See [`GetDestinationOutput`](crate::output::GetDestinationOutput)
pub mod get_destination_output {
    /// A builder for [`GetDestinationOutput`](crate::output::GetDestinationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) expression: std::option::Option<std::string::String>,
        pub(crate) expression_type: std::option::Option<crate::model::ExpressionType>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name of the resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the resource.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The rule name or topic rule to send messages to.</p>
        pub fn expression(mut self, input: impl Into<std::string::String>) -> Self {
            self.expression = Some(input.into());
            self
        }
        pub fn set_expression(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.expression = input;
            self
        }
        /// <p>The type of value in <code>Expression</code>.</p>
        pub fn expression_type(mut self, input: crate::model::ExpressionType) -> Self {
            self.expression_type = Some(input);
            self
        }
        pub fn set_expression_type(
            mut self,
            input: std::option::Option<crate::model::ExpressionType>,
        ) -> Self {
            self.expression_type = input;
            self
        }
        /// <p>The description of the resource.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ARN of the IAM Role that authorizes the destination.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDestinationOutput`](crate::output::GetDestinationOutput)
        pub fn build(self) -> crate::output::GetDestinationOutput {
            crate::output::GetDestinationOutput {
                arn: self.arn,
                name: self.name,
                expression: self.expression,
                expression_type: self.expression_type,
                description: self.description,
                role_arn: self.role_arn,
            }
        }
    }
}
impl GetDestinationOutput {
    /// Creates a new builder-style object to manufacture [`GetDestinationOutput`](crate::output::GetDestinationOutput)
    pub fn builder() -> crate::output::get_destination_output::Builder {
        crate::output::get_destination_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateWirelessGatewayFromThingOutput {}
impl std::fmt::Debug for DisassociateWirelessGatewayFromThingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateWirelessGatewayFromThingOutput");
        formatter.finish()
    }
}
/// See [`DisassociateWirelessGatewayFromThingOutput`](crate::output::DisassociateWirelessGatewayFromThingOutput)
pub mod disassociate_wireless_gateway_from_thing_output {
    /// A builder for [`DisassociateWirelessGatewayFromThingOutput`](crate::output::DisassociateWirelessGatewayFromThingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateWirelessGatewayFromThingOutput`](crate::output::DisassociateWirelessGatewayFromThingOutput)
        pub fn build(self) -> crate::output::DisassociateWirelessGatewayFromThingOutput {
            crate::output::DisassociateWirelessGatewayFromThingOutput {}
        }
    }
}
impl DisassociateWirelessGatewayFromThingOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateWirelessGatewayFromThingOutput`](crate::output::DisassociateWirelessGatewayFromThingOutput)
    pub fn builder() -> crate::output::disassociate_wireless_gateway_from_thing_output::Builder {
        crate::output::disassociate_wireless_gateway_from_thing_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateWirelessGatewayFromCertificateOutput {}
impl std::fmt::Debug for DisassociateWirelessGatewayFromCertificateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateWirelessGatewayFromCertificateOutput");
        formatter.finish()
    }
}
/// See [`DisassociateWirelessGatewayFromCertificateOutput`](crate::output::DisassociateWirelessGatewayFromCertificateOutput)
pub mod disassociate_wireless_gateway_from_certificate_output {
    /// A builder for [`DisassociateWirelessGatewayFromCertificateOutput`](crate::output::DisassociateWirelessGatewayFromCertificateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateWirelessGatewayFromCertificateOutput`](crate::output::DisassociateWirelessGatewayFromCertificateOutput)
        pub fn build(self) -> crate::output::DisassociateWirelessGatewayFromCertificateOutput {
            crate::output::DisassociateWirelessGatewayFromCertificateOutput {}
        }
    }
}
impl DisassociateWirelessGatewayFromCertificateOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateWirelessGatewayFromCertificateOutput`](crate::output::DisassociateWirelessGatewayFromCertificateOutput)
    pub fn builder() -> crate::output::disassociate_wireless_gateway_from_certificate_output::Builder
    {
        crate::output::disassociate_wireless_gateway_from_certificate_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateWirelessDeviceFromThingOutput {}
impl std::fmt::Debug for DisassociateWirelessDeviceFromThingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateWirelessDeviceFromThingOutput");
        formatter.finish()
    }
}
/// See [`DisassociateWirelessDeviceFromThingOutput`](crate::output::DisassociateWirelessDeviceFromThingOutput)
pub mod disassociate_wireless_device_from_thing_output {
    /// A builder for [`DisassociateWirelessDeviceFromThingOutput`](crate::output::DisassociateWirelessDeviceFromThingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateWirelessDeviceFromThingOutput`](crate::output::DisassociateWirelessDeviceFromThingOutput)
        pub fn build(self) -> crate::output::DisassociateWirelessDeviceFromThingOutput {
            crate::output::DisassociateWirelessDeviceFromThingOutput {}
        }
    }
}
impl DisassociateWirelessDeviceFromThingOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateWirelessDeviceFromThingOutput`](crate::output::DisassociateWirelessDeviceFromThingOutput)
    pub fn builder() -> crate::output::disassociate_wireless_device_from_thing_output::Builder {
        crate::output::disassociate_wireless_device_from_thing_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateAwsAccountFromPartnerAccountOutput {}
impl std::fmt::Debug for DisassociateAwsAccountFromPartnerAccountOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateAwsAccountFromPartnerAccountOutput");
        formatter.finish()
    }
}
/// See [`DisassociateAwsAccountFromPartnerAccountOutput`](crate::output::DisassociateAwsAccountFromPartnerAccountOutput)
pub mod disassociate_aws_account_from_partner_account_output {
    /// A builder for [`DisassociateAwsAccountFromPartnerAccountOutput`](crate::output::DisassociateAwsAccountFromPartnerAccountOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateAwsAccountFromPartnerAccountOutput`](crate::output::DisassociateAwsAccountFromPartnerAccountOutput)
        pub fn build(self) -> crate::output::DisassociateAwsAccountFromPartnerAccountOutput {
            crate::output::DisassociateAwsAccountFromPartnerAccountOutput {}
        }
    }
}
impl DisassociateAwsAccountFromPartnerAccountOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateAwsAccountFromPartnerAccountOutput`](crate::output::DisassociateAwsAccountFromPartnerAccountOutput)
    pub fn builder() -> crate::output::disassociate_aws_account_from_partner_account_output::Builder
    {
        crate::output::disassociate_aws_account_from_partner_account_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteWirelessGatewayTaskDefinitionOutput {}
impl std::fmt::Debug for DeleteWirelessGatewayTaskDefinitionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteWirelessGatewayTaskDefinitionOutput");
        formatter.finish()
    }
}
/// See [`DeleteWirelessGatewayTaskDefinitionOutput`](crate::output::DeleteWirelessGatewayTaskDefinitionOutput)
pub mod delete_wireless_gateway_task_definition_output {
    /// A builder for [`DeleteWirelessGatewayTaskDefinitionOutput`](crate::output::DeleteWirelessGatewayTaskDefinitionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteWirelessGatewayTaskDefinitionOutput`](crate::output::DeleteWirelessGatewayTaskDefinitionOutput)
        pub fn build(self) -> crate::output::DeleteWirelessGatewayTaskDefinitionOutput {
            crate::output::DeleteWirelessGatewayTaskDefinitionOutput {}
        }
    }
}
impl DeleteWirelessGatewayTaskDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWirelessGatewayTaskDefinitionOutput`](crate::output::DeleteWirelessGatewayTaskDefinitionOutput)
    pub fn builder() -> crate::output::delete_wireless_gateway_task_definition_output::Builder {
        crate::output::delete_wireless_gateway_task_definition_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteWirelessGatewayTaskOutput {}
impl std::fmt::Debug for DeleteWirelessGatewayTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteWirelessGatewayTaskOutput");
        formatter.finish()
    }
}
/// See [`DeleteWirelessGatewayTaskOutput`](crate::output::DeleteWirelessGatewayTaskOutput)
pub mod delete_wireless_gateway_task_output {
    /// A builder for [`DeleteWirelessGatewayTaskOutput`](crate::output::DeleteWirelessGatewayTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteWirelessGatewayTaskOutput`](crate::output::DeleteWirelessGatewayTaskOutput)
        pub fn build(self) -> crate::output::DeleteWirelessGatewayTaskOutput {
            crate::output::DeleteWirelessGatewayTaskOutput {}
        }
    }
}
impl DeleteWirelessGatewayTaskOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWirelessGatewayTaskOutput`](crate::output::DeleteWirelessGatewayTaskOutput)
    pub fn builder() -> crate::output::delete_wireless_gateway_task_output::Builder {
        crate::output::delete_wireless_gateway_task_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteWirelessGatewayOutput {}
impl std::fmt::Debug for DeleteWirelessGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteWirelessGatewayOutput");
        formatter.finish()
    }
}
/// See [`DeleteWirelessGatewayOutput`](crate::output::DeleteWirelessGatewayOutput)
pub mod delete_wireless_gateway_output {
    /// A builder for [`DeleteWirelessGatewayOutput`](crate::output::DeleteWirelessGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteWirelessGatewayOutput`](crate::output::DeleteWirelessGatewayOutput)
        pub fn build(self) -> crate::output::DeleteWirelessGatewayOutput {
            crate::output::DeleteWirelessGatewayOutput {}
        }
    }
}
impl DeleteWirelessGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWirelessGatewayOutput`](crate::output::DeleteWirelessGatewayOutput)
    pub fn builder() -> crate::output::delete_wireless_gateway_output::Builder {
        crate::output::delete_wireless_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteWirelessDeviceOutput {}
impl std::fmt::Debug for DeleteWirelessDeviceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteWirelessDeviceOutput");
        formatter.finish()
    }
}
/// See [`DeleteWirelessDeviceOutput`](crate::output::DeleteWirelessDeviceOutput)
pub mod delete_wireless_device_output {
    /// A builder for [`DeleteWirelessDeviceOutput`](crate::output::DeleteWirelessDeviceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteWirelessDeviceOutput`](crate::output::DeleteWirelessDeviceOutput)
        pub fn build(self) -> crate::output::DeleteWirelessDeviceOutput {
            crate::output::DeleteWirelessDeviceOutput {}
        }
    }
}
impl DeleteWirelessDeviceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWirelessDeviceOutput`](crate::output::DeleteWirelessDeviceOutput)
    pub fn builder() -> crate::output::delete_wireless_device_output::Builder {
        crate::output::delete_wireless_device_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteServiceProfileOutput {}
impl std::fmt::Debug for DeleteServiceProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteServiceProfileOutput");
        formatter.finish()
    }
}
/// See [`DeleteServiceProfileOutput`](crate::output::DeleteServiceProfileOutput)
pub mod delete_service_profile_output {
    /// A builder for [`DeleteServiceProfileOutput`](crate::output::DeleteServiceProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteServiceProfileOutput`](crate::output::DeleteServiceProfileOutput)
        pub fn build(self) -> crate::output::DeleteServiceProfileOutput {
            crate::output::DeleteServiceProfileOutput {}
        }
    }
}
impl DeleteServiceProfileOutput {
    /// Creates a new builder-style object to manufacture [`DeleteServiceProfileOutput`](crate::output::DeleteServiceProfileOutput)
    pub fn builder() -> crate::output::delete_service_profile_output::Builder {
        crate::output::delete_service_profile_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDeviceProfileOutput {}
impl std::fmt::Debug for DeleteDeviceProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDeviceProfileOutput");
        formatter.finish()
    }
}
/// See [`DeleteDeviceProfileOutput`](crate::output::DeleteDeviceProfileOutput)
pub mod delete_device_profile_output {
    /// A builder for [`DeleteDeviceProfileOutput`](crate::output::DeleteDeviceProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDeviceProfileOutput`](crate::output::DeleteDeviceProfileOutput)
        pub fn build(self) -> crate::output::DeleteDeviceProfileOutput {
            crate::output::DeleteDeviceProfileOutput {}
        }
    }
}
impl DeleteDeviceProfileOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDeviceProfileOutput`](crate::output::DeleteDeviceProfileOutput)
    pub fn builder() -> crate::output::delete_device_profile_output::Builder {
        crate::output::delete_device_profile_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDestinationOutput {}
impl std::fmt::Debug for DeleteDestinationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDestinationOutput");
        formatter.finish()
    }
}
/// See [`DeleteDestinationOutput`](crate::output::DeleteDestinationOutput)
pub mod delete_destination_output {
    /// A builder for [`DeleteDestinationOutput`](crate::output::DeleteDestinationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDestinationOutput`](crate::output::DeleteDestinationOutput)
        pub fn build(self) -> crate::output::DeleteDestinationOutput {
            crate::output::DeleteDestinationOutput {}
        }
    }
}
impl DeleteDestinationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDestinationOutput`](crate::output::DeleteDestinationOutput)
    pub fn builder() -> crate::output::delete_destination_output::Builder {
        crate::output::delete_destination_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateWirelessGatewayTaskDefinitionOutput {
    /// <p>The ID of the new wireless gateway task definition.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name of the resource.</p>
    pub arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateWirelessGatewayTaskDefinitionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWirelessGatewayTaskDefinitionOutput");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`CreateWirelessGatewayTaskDefinitionOutput`](crate::output::CreateWirelessGatewayTaskDefinitionOutput)
pub mod create_wireless_gateway_task_definition_output {
    /// A builder for [`CreateWirelessGatewayTaskDefinitionOutput`](crate::output::CreateWirelessGatewayTaskDefinitionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the new wireless gateway task definition.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon Resource Name of the resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateWirelessGatewayTaskDefinitionOutput`](crate::output::CreateWirelessGatewayTaskDefinitionOutput)
        pub fn build(self) -> crate::output::CreateWirelessGatewayTaskDefinitionOutput {
            crate::output::CreateWirelessGatewayTaskDefinitionOutput {
                id: self.id,
                arn: self.arn,
            }
        }
    }
}
impl CreateWirelessGatewayTaskDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`CreateWirelessGatewayTaskDefinitionOutput`](crate::output::CreateWirelessGatewayTaskDefinitionOutput)
    pub fn builder() -> crate::output::create_wireless_gateway_task_definition_output::Builder {
        crate::output::create_wireless_gateway_task_definition_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateWirelessGatewayTaskOutput {
    /// <p>The ID of the WirelessGatewayTaskDefinition.</p>
    pub wireless_gateway_task_definition_id: std::option::Option<std::string::String>,
    /// <p>The status of the request.</p>
    pub status: std::option::Option<crate::model::WirelessGatewayTaskStatus>,
}
impl std::fmt::Debug for CreateWirelessGatewayTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWirelessGatewayTaskOutput");
        formatter.field(
            "wireless_gateway_task_definition_id",
            &self.wireless_gateway_task_definition_id,
        );
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`CreateWirelessGatewayTaskOutput`](crate::output::CreateWirelessGatewayTaskOutput)
pub mod create_wireless_gateway_task_output {
    /// A builder for [`CreateWirelessGatewayTaskOutput`](crate::output::CreateWirelessGatewayTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) wireless_gateway_task_definition_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::WirelessGatewayTaskStatus>,
    }
    impl Builder {
        /// <p>The ID of the WirelessGatewayTaskDefinition.</p>
        pub fn wireless_gateway_task_definition_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.wireless_gateway_task_definition_id = Some(input.into());
            self
        }
        pub fn set_wireless_gateway_task_definition_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.wireless_gateway_task_definition_id = input;
            self
        }
        /// <p>The status of the request.</p>
        pub fn status(mut self, input: crate::model::WirelessGatewayTaskStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::WirelessGatewayTaskStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateWirelessGatewayTaskOutput`](crate::output::CreateWirelessGatewayTaskOutput)
        pub fn build(self) -> crate::output::CreateWirelessGatewayTaskOutput {
            crate::output::CreateWirelessGatewayTaskOutput {
                wireless_gateway_task_definition_id: self.wireless_gateway_task_definition_id,
                status: self.status,
            }
        }
    }
}
impl CreateWirelessGatewayTaskOutput {
    /// Creates a new builder-style object to manufacture [`CreateWirelessGatewayTaskOutput`](crate::output::CreateWirelessGatewayTaskOutput)
    pub fn builder() -> crate::output::create_wireless_gateway_task_output::Builder {
        crate::output::create_wireless_gateway_task_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateWirelessGatewayOutput {
    /// <p>The Amazon Resource Name of the new resource.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the new wireless gateway.</p>
    pub id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateWirelessGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWirelessGatewayOutput");
        formatter.field("arn", &self.arn);
        formatter.field("id", &self.id);
        formatter.finish()
    }
}
/// See [`CreateWirelessGatewayOutput`](crate::output::CreateWirelessGatewayOutput)
pub mod create_wireless_gateway_output {
    /// A builder for [`CreateWirelessGatewayOutput`](crate::output::CreateWirelessGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name of the new resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The ID of the new wireless gateway.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateWirelessGatewayOutput`](crate::output::CreateWirelessGatewayOutput)
        pub fn build(self) -> crate::output::CreateWirelessGatewayOutput {
            crate::output::CreateWirelessGatewayOutput {
                arn: self.arn,
                id: self.id,
            }
        }
    }
}
impl CreateWirelessGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateWirelessGatewayOutput`](crate::output::CreateWirelessGatewayOutput)
    pub fn builder() -> crate::output::create_wireless_gateway_output::Builder {
        crate::output::create_wireless_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateWirelessDeviceOutput {
    /// <p>The Amazon Resource Name of the new resource.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the new wireless device.</p>
    pub id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateWirelessDeviceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWirelessDeviceOutput");
        formatter.field("arn", &self.arn);
        formatter.field("id", &self.id);
        formatter.finish()
    }
}
/// See [`CreateWirelessDeviceOutput`](crate::output::CreateWirelessDeviceOutput)
pub mod create_wireless_device_output {
    /// A builder for [`CreateWirelessDeviceOutput`](crate::output::CreateWirelessDeviceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name of the new resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The ID of the new wireless device.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateWirelessDeviceOutput`](crate::output::CreateWirelessDeviceOutput)
        pub fn build(self) -> crate::output::CreateWirelessDeviceOutput {
            crate::output::CreateWirelessDeviceOutput {
                arn: self.arn,
                id: self.id,
            }
        }
    }
}
impl CreateWirelessDeviceOutput {
    /// Creates a new builder-style object to manufacture [`CreateWirelessDeviceOutput`](crate::output::CreateWirelessDeviceOutput)
    pub fn builder() -> crate::output::create_wireless_device_output::Builder {
        crate::output::create_wireless_device_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateServiceProfileOutput {
    /// <p>The Amazon Resource Name of the new resource.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the new service profile.</p>
    pub id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateServiceProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateServiceProfileOutput");
        formatter.field("arn", &self.arn);
        formatter.field("id", &self.id);
        formatter.finish()
    }
}
/// See [`CreateServiceProfileOutput`](crate::output::CreateServiceProfileOutput)
pub mod create_service_profile_output {
    /// A builder for [`CreateServiceProfileOutput`](crate::output::CreateServiceProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name of the new resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The ID of the new service profile.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateServiceProfileOutput`](crate::output::CreateServiceProfileOutput)
        pub fn build(self) -> crate::output::CreateServiceProfileOutput {
            crate::output::CreateServiceProfileOutput {
                arn: self.arn,
                id: self.id,
            }
        }
    }
}
impl CreateServiceProfileOutput {
    /// Creates a new builder-style object to manufacture [`CreateServiceProfileOutput`](crate::output::CreateServiceProfileOutput)
    pub fn builder() -> crate::output::create_service_profile_output::Builder {
        crate::output::create_service_profile_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDeviceProfileOutput {
    /// <p>The Amazon Resource Name of the new resource.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the new device profile.</p>
    pub id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateDeviceProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDeviceProfileOutput");
        formatter.field("arn", &self.arn);
        formatter.field("id", &self.id);
        formatter.finish()
    }
}
/// See [`CreateDeviceProfileOutput`](crate::output::CreateDeviceProfileOutput)
pub mod create_device_profile_output {
    /// A builder for [`CreateDeviceProfileOutput`](crate::output::CreateDeviceProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name of the new resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The ID of the new device profile.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDeviceProfileOutput`](crate::output::CreateDeviceProfileOutput)
        pub fn build(self) -> crate::output::CreateDeviceProfileOutput {
            crate::output::CreateDeviceProfileOutput {
                arn: self.arn,
                id: self.id,
            }
        }
    }
}
impl CreateDeviceProfileOutput {
    /// Creates a new builder-style object to manufacture [`CreateDeviceProfileOutput`](crate::output::CreateDeviceProfileOutput)
    pub fn builder() -> crate::output::create_device_profile_output::Builder {
        crate::output::create_device_profile_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDestinationOutput {
    /// <p>The Amazon Resource Name of the new resource.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the new resource.</p>
    pub name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateDestinationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDestinationOutput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.finish()
    }
}
/// See [`CreateDestinationOutput`](crate::output::CreateDestinationOutput)
pub mod create_destination_output {
    /// A builder for [`CreateDestinationOutput`](crate::output::CreateDestinationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name of the new resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the new resource.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDestinationOutput`](crate::output::CreateDestinationOutput)
        pub fn build(self) -> crate::output::CreateDestinationOutput {
            crate::output::CreateDestinationOutput {
                arn: self.arn,
                name: self.name,
            }
        }
    }
}
impl CreateDestinationOutput {
    /// Creates a new builder-style object to manufacture [`CreateDestinationOutput`](crate::output::CreateDestinationOutput)
    pub fn builder() -> crate::output::create_destination_output::Builder {
        crate::output::create_destination_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateWirelessGatewayWithThingOutput {}
impl std::fmt::Debug for AssociateWirelessGatewayWithThingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateWirelessGatewayWithThingOutput");
        formatter.finish()
    }
}
/// See [`AssociateWirelessGatewayWithThingOutput`](crate::output::AssociateWirelessGatewayWithThingOutput)
pub mod associate_wireless_gateway_with_thing_output {
    /// A builder for [`AssociateWirelessGatewayWithThingOutput`](crate::output::AssociateWirelessGatewayWithThingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateWirelessGatewayWithThingOutput`](crate::output::AssociateWirelessGatewayWithThingOutput)
        pub fn build(self) -> crate::output::AssociateWirelessGatewayWithThingOutput {
            crate::output::AssociateWirelessGatewayWithThingOutput {}
        }
    }
}
impl AssociateWirelessGatewayWithThingOutput {
    /// Creates a new builder-style object to manufacture [`AssociateWirelessGatewayWithThingOutput`](crate::output::AssociateWirelessGatewayWithThingOutput)
    pub fn builder() -> crate::output::associate_wireless_gateway_with_thing_output::Builder {
        crate::output::associate_wireless_gateway_with_thing_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateWirelessGatewayWithCertificateOutput {
    /// <p>The ID of the certificate associated with the wireless gateway.</p>
    pub iot_certificate_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AssociateWirelessGatewayWithCertificateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateWirelessGatewayWithCertificateOutput");
        formatter.field("iot_certificate_id", &self.iot_certificate_id);
        formatter.finish()
    }
}
/// See [`AssociateWirelessGatewayWithCertificateOutput`](crate::output::AssociateWirelessGatewayWithCertificateOutput)
pub mod associate_wireless_gateway_with_certificate_output {
    /// A builder for [`AssociateWirelessGatewayWithCertificateOutput`](crate::output::AssociateWirelessGatewayWithCertificateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) iot_certificate_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the certificate associated with the wireless gateway.</p>
        pub fn iot_certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.iot_certificate_id = Some(input.into());
            self
        }
        pub fn set_iot_certificate_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.iot_certificate_id = input;
            self
        }
        /// Consumes the builder and constructs a [`AssociateWirelessGatewayWithCertificateOutput`](crate::output::AssociateWirelessGatewayWithCertificateOutput)
        pub fn build(self) -> crate::output::AssociateWirelessGatewayWithCertificateOutput {
            crate::output::AssociateWirelessGatewayWithCertificateOutput {
                iot_certificate_id: self.iot_certificate_id,
            }
        }
    }
}
impl AssociateWirelessGatewayWithCertificateOutput {
    /// Creates a new builder-style object to manufacture [`AssociateWirelessGatewayWithCertificateOutput`](crate::output::AssociateWirelessGatewayWithCertificateOutput)
    pub fn builder() -> crate::output::associate_wireless_gateway_with_certificate_output::Builder {
        crate::output::associate_wireless_gateway_with_certificate_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateWirelessDeviceWithThingOutput {}
impl std::fmt::Debug for AssociateWirelessDeviceWithThingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateWirelessDeviceWithThingOutput");
        formatter.finish()
    }
}
/// See [`AssociateWirelessDeviceWithThingOutput`](crate::output::AssociateWirelessDeviceWithThingOutput)
pub mod associate_wireless_device_with_thing_output {
    /// A builder for [`AssociateWirelessDeviceWithThingOutput`](crate::output::AssociateWirelessDeviceWithThingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateWirelessDeviceWithThingOutput`](crate::output::AssociateWirelessDeviceWithThingOutput)
        pub fn build(self) -> crate::output::AssociateWirelessDeviceWithThingOutput {
            crate::output::AssociateWirelessDeviceWithThingOutput {}
        }
    }
}
impl AssociateWirelessDeviceWithThingOutput {
    /// Creates a new builder-style object to manufacture [`AssociateWirelessDeviceWithThingOutput`](crate::output::AssociateWirelessDeviceWithThingOutput)
    pub fn builder() -> crate::output::associate_wireless_device_with_thing_output::Builder {
        crate::output::associate_wireless_device_with_thing_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateAwsAccountWithPartnerAccountOutput {
    /// <p>The Sidewalk account credentials.</p>
    pub sidewalk: std::option::Option<crate::model::SidewalkAccountInfo>,
    /// <p>The Amazon Resource Name of the resource.</p>
    pub arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AssociateAwsAccountWithPartnerAccountOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateAwsAccountWithPartnerAccountOutput");
        formatter.field("sidewalk", &self.sidewalk);
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`AssociateAwsAccountWithPartnerAccountOutput`](crate::output::AssociateAwsAccountWithPartnerAccountOutput)
pub mod associate_aws_account_with_partner_account_output {
    /// A builder for [`AssociateAwsAccountWithPartnerAccountOutput`](crate::output::AssociateAwsAccountWithPartnerAccountOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sidewalk: std::option::Option<crate::model::SidewalkAccountInfo>,
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Sidewalk account credentials.</p>
        pub fn sidewalk(mut self, input: crate::model::SidewalkAccountInfo) -> Self {
            self.sidewalk = Some(input);
            self
        }
        pub fn set_sidewalk(
            mut self,
            input: std::option::Option<crate::model::SidewalkAccountInfo>,
        ) -> Self {
            self.sidewalk = input;
            self
        }
        /// <p>The Amazon Resource Name of the resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`AssociateAwsAccountWithPartnerAccountOutput`](crate::output::AssociateAwsAccountWithPartnerAccountOutput)
        pub fn build(self) -> crate::output::AssociateAwsAccountWithPartnerAccountOutput {
            crate::output::AssociateAwsAccountWithPartnerAccountOutput {
                sidewalk: self.sidewalk,
                arn: self.arn,
            }
        }
    }
}
impl AssociateAwsAccountWithPartnerAccountOutput {
    /// Creates a new builder-style object to manufacture [`AssociateAwsAccountWithPartnerAccountOutput`](crate::output::AssociateAwsAccountWithPartnerAccountOutput)
    pub fn builder() -> crate::output::associate_aws_account_with_partner_account_output::Builder {
        crate::output::associate_aws_account_with_partner_account_output::Builder::default()
    }
}
