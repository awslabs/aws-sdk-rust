// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The cell towers that were used to perform the measurements.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CellTowers {
    /// <p>GSM object information.</p>
    pub gsm: ::std::option::Option<::std::vec::Vec<crate::types::GsmObj>>,
    /// <p>WCDMA object information.</p>
    pub wcdma: ::std::option::Option<::std::vec::Vec<crate::types::WcdmaObj>>,
    /// <p>TD-SCDMA object information.</p>
    pub tdscdma: ::std::option::Option<::std::vec::Vec<crate::types::TdscdmaObj>>,
    /// <p>LTE object information.</p>
    pub lte: ::std::option::Option<::std::vec::Vec<crate::types::LteObj>>,
    /// <p>CDMA object information.</p>
    pub cdma: ::std::option::Option<::std::vec::Vec<crate::types::CdmaObj>>,
}
impl CellTowers {
    /// <p>GSM object information.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.gsm.is_none()`.
    pub fn gsm(&self) -> &[crate::types::GsmObj] {
        self.gsm.as_deref().unwrap_or_default()
    }
    /// <p>WCDMA object information.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.wcdma.is_none()`.
    pub fn wcdma(&self) -> &[crate::types::WcdmaObj] {
        self.wcdma.as_deref().unwrap_or_default()
    }
    /// <p>TD-SCDMA object information.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tdscdma.is_none()`.
    pub fn tdscdma(&self) -> &[crate::types::TdscdmaObj] {
        self.tdscdma.as_deref().unwrap_or_default()
    }
    /// <p>LTE object information.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.lte.is_none()`.
    pub fn lte(&self) -> &[crate::types::LteObj] {
        self.lte.as_deref().unwrap_or_default()
    }
    /// <p>CDMA object information.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cdma.is_none()`.
    pub fn cdma(&self) -> &[crate::types::CdmaObj] {
        self.cdma.as_deref().unwrap_or_default()
    }
}
impl CellTowers {
    /// Creates a new builder-style object to manufacture [`CellTowers`](crate::types::CellTowers).
    pub fn builder() -> crate::types::builders::CellTowersBuilder {
        crate::types::builders::CellTowersBuilder::default()
    }
}

/// A builder for [`CellTowers`](crate::types::CellTowers).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CellTowersBuilder {
    pub(crate) gsm: ::std::option::Option<::std::vec::Vec<crate::types::GsmObj>>,
    pub(crate) wcdma: ::std::option::Option<::std::vec::Vec<crate::types::WcdmaObj>>,
    pub(crate) tdscdma: ::std::option::Option<::std::vec::Vec<crate::types::TdscdmaObj>>,
    pub(crate) lte: ::std::option::Option<::std::vec::Vec<crate::types::LteObj>>,
    pub(crate) cdma: ::std::option::Option<::std::vec::Vec<crate::types::CdmaObj>>,
}
impl CellTowersBuilder {
    /// Appends an item to `gsm`.
    ///
    /// To override the contents of this collection use [`set_gsm`](Self::set_gsm).
    ///
    /// <p>GSM object information.</p>
    pub fn gsm(mut self, input: crate::types::GsmObj) -> Self {
        let mut v = self.gsm.unwrap_or_default();
        v.push(input);
        self.gsm = ::std::option::Option::Some(v);
        self
    }
    /// <p>GSM object information.</p>
    pub fn set_gsm(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GsmObj>>) -> Self {
        self.gsm = input;
        self
    }
    /// <p>GSM object information.</p>
    pub fn get_gsm(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GsmObj>> {
        &self.gsm
    }
    /// Appends an item to `wcdma`.
    ///
    /// To override the contents of this collection use [`set_wcdma`](Self::set_wcdma).
    ///
    /// <p>WCDMA object information.</p>
    pub fn wcdma(mut self, input: crate::types::WcdmaObj) -> Self {
        let mut v = self.wcdma.unwrap_or_default();
        v.push(input);
        self.wcdma = ::std::option::Option::Some(v);
        self
    }
    /// <p>WCDMA object information.</p>
    pub fn set_wcdma(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WcdmaObj>>) -> Self {
        self.wcdma = input;
        self
    }
    /// <p>WCDMA object information.</p>
    pub fn get_wcdma(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WcdmaObj>> {
        &self.wcdma
    }
    /// Appends an item to `tdscdma`.
    ///
    /// To override the contents of this collection use [`set_tdscdma`](Self::set_tdscdma).
    ///
    /// <p>TD-SCDMA object information.</p>
    pub fn tdscdma(mut self, input: crate::types::TdscdmaObj) -> Self {
        let mut v = self.tdscdma.unwrap_or_default();
        v.push(input);
        self.tdscdma = ::std::option::Option::Some(v);
        self
    }
    /// <p>TD-SCDMA object information.</p>
    pub fn set_tdscdma(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TdscdmaObj>>) -> Self {
        self.tdscdma = input;
        self
    }
    /// <p>TD-SCDMA object information.</p>
    pub fn get_tdscdma(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TdscdmaObj>> {
        &self.tdscdma
    }
    /// Appends an item to `lte`.
    ///
    /// To override the contents of this collection use [`set_lte`](Self::set_lte).
    ///
    /// <p>LTE object information.</p>
    pub fn lte(mut self, input: crate::types::LteObj) -> Self {
        let mut v = self.lte.unwrap_or_default();
        v.push(input);
        self.lte = ::std::option::Option::Some(v);
        self
    }
    /// <p>LTE object information.</p>
    pub fn set_lte(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LteObj>>) -> Self {
        self.lte = input;
        self
    }
    /// <p>LTE object information.</p>
    pub fn get_lte(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LteObj>> {
        &self.lte
    }
    /// Appends an item to `cdma`.
    ///
    /// To override the contents of this collection use [`set_cdma`](Self::set_cdma).
    ///
    /// <p>CDMA object information.</p>
    pub fn cdma(mut self, input: crate::types::CdmaObj) -> Self {
        let mut v = self.cdma.unwrap_or_default();
        v.push(input);
        self.cdma = ::std::option::Option::Some(v);
        self
    }
    /// <p>CDMA object information.</p>
    pub fn set_cdma(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CdmaObj>>) -> Self {
        self.cdma = input;
        self
    }
    /// <p>CDMA object information.</p>
    pub fn get_cdma(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CdmaObj>> {
        &self.cdma
    }
    /// Consumes the builder and constructs a [`CellTowers`](crate::types::CellTowers).
    pub fn build(self) -> crate::types::CellTowers {
        crate::types::CellTowers {
            gsm: self.gsm,
            wcdma: self.wcdma,
            tdscdma: self.tdscdma,
            lte: self.lte,
            cdma: self.cdma,
        }
    }
}
