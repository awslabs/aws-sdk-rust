// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The log options for wireless devices and can be used to set log levels for a specific type of wireless device.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WirelessDeviceLogOption {
    /// <p>The wireless device type.</p>
    pub r#type: crate::types::WirelessDeviceType,
    /// <p>The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.</p>
    pub log_level: crate::types::LogLevel,
    /// <p>The list of wireless device event log options.</p>
    pub events: ::std::option::Option<::std::vec::Vec<crate::types::WirelessDeviceEventLogOption>>,
}
impl WirelessDeviceLogOption {
    /// <p>The wireless device type.</p>
    pub fn r#type(&self) -> &crate::types::WirelessDeviceType {
        &self.r#type
    }
    /// <p>The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.</p>
    pub fn log_level(&self) -> &crate::types::LogLevel {
        &self.log_level
    }
    /// <p>The list of wireless device event log options.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.events.is_none()`.
    pub fn events(&self) -> &[crate::types::WirelessDeviceEventLogOption] {
        self.events.as_deref().unwrap_or_default()
    }
}
impl WirelessDeviceLogOption {
    /// Creates a new builder-style object to manufacture [`WirelessDeviceLogOption`](crate::types::WirelessDeviceLogOption).
    pub fn builder() -> crate::types::builders::WirelessDeviceLogOptionBuilder {
        crate::types::builders::WirelessDeviceLogOptionBuilder::default()
    }
}

/// A builder for [`WirelessDeviceLogOption`](crate::types::WirelessDeviceLogOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WirelessDeviceLogOptionBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::WirelessDeviceType>,
    pub(crate) log_level: ::std::option::Option<crate::types::LogLevel>,
    pub(crate) events: ::std::option::Option<::std::vec::Vec<crate::types::WirelessDeviceEventLogOption>>,
}
impl WirelessDeviceLogOptionBuilder {
    /// <p>The wireless device type.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::WirelessDeviceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The wireless device type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::WirelessDeviceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The wireless device type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::WirelessDeviceType> {
        &self.r#type
    }
    /// <p>The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.</p>
    /// This field is required.
    pub fn log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.log_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.</p>
    pub fn set_log_level(mut self, input: ::std::option::Option<crate::types::LogLevel>) -> Self {
        self.log_level = input;
        self
    }
    /// <p>The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.</p>
    pub fn get_log_level(&self) -> &::std::option::Option<crate::types::LogLevel> {
        &self.log_level
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>The list of wireless device event log options.</p>
    pub fn events(mut self, input: crate::types::WirelessDeviceEventLogOption) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input);
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of wireless device event log options.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WirelessDeviceEventLogOption>>) -> Self {
        self.events = input;
        self
    }
    /// <p>The list of wireless device event log options.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WirelessDeviceEventLogOption>> {
        &self.events
    }
    /// Consumes the builder and constructs a [`WirelessDeviceLogOption`](crate::types::WirelessDeviceLogOption).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::WirelessDeviceLogOptionBuilder::r#type)
    /// - [`log_level`](crate::types::builders::WirelessDeviceLogOptionBuilder::log_level)
    pub fn build(self) -> ::std::result::Result<crate::types::WirelessDeviceLogOption, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WirelessDeviceLogOption {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building WirelessDeviceLogOption",
                )
            })?,
            log_level: self.log_level.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "log_level",
                    "log_level was not specified but it is required when building WirelessDeviceLogOption",
                )
            })?,
            events: self.events,
        })
    }
}
