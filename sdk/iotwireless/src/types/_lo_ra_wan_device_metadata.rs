// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>LoRaWAN device metatdata.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoRaWanDeviceMetadata {
    /// <p>The DevEUI value.</p>
    pub dev_eui: ::std::option::Option<::std::string::String>,
    /// <p>The FPort value.</p>
    pub f_port: ::std::option::Option<i32>,
    /// <p>The DataRate value.</p>
    pub data_rate: ::std::option::Option<i32>,
    /// <p>The device's channel frequency in Hz.</p>
    pub frequency: ::std::option::Option<i32>,
    /// <p>The date and time of the metadata.</p>
    pub timestamp: ::std::option::Option<::std::string::String>,
    /// <p>Information about the gateways accessed by the device.</p>
    pub gateways: ::std::option::Option<::std::vec::Vec<crate::types::LoRaWanGatewayMetadata>>,
}
impl LoRaWanDeviceMetadata {
    /// <p>The DevEUI value.</p>
    pub fn dev_eui(&self) -> ::std::option::Option<&str> {
        self.dev_eui.as_deref()
    }
    /// <p>The FPort value.</p>
    pub fn f_port(&self) -> ::std::option::Option<i32> {
        self.f_port
    }
    /// <p>The DataRate value.</p>
    pub fn data_rate(&self) -> ::std::option::Option<i32> {
        self.data_rate
    }
    /// <p>The device's channel frequency in Hz.</p>
    pub fn frequency(&self) -> ::std::option::Option<i32> {
        self.frequency
    }
    /// <p>The date and time of the metadata.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&str> {
        self.timestamp.as_deref()
    }
    /// <p>Information about the gateways accessed by the device.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.gateways.is_none()`.
    pub fn gateways(&self) -> &[crate::types::LoRaWanGatewayMetadata] {
        self.gateways.as_deref().unwrap_or_default()
    }
}
impl LoRaWanDeviceMetadata {
    /// Creates a new builder-style object to manufacture [`LoRaWanDeviceMetadata`](crate::types::LoRaWanDeviceMetadata).
    pub fn builder() -> crate::types::builders::LoRaWanDeviceMetadataBuilder {
        crate::types::builders::LoRaWanDeviceMetadataBuilder::default()
    }
}

/// A builder for [`LoRaWanDeviceMetadata`](crate::types::LoRaWanDeviceMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LoRaWanDeviceMetadataBuilder {
    pub(crate) dev_eui: ::std::option::Option<::std::string::String>,
    pub(crate) f_port: ::std::option::Option<i32>,
    pub(crate) data_rate: ::std::option::Option<i32>,
    pub(crate) frequency: ::std::option::Option<i32>,
    pub(crate) timestamp: ::std::option::Option<::std::string::String>,
    pub(crate) gateways: ::std::option::Option<::std::vec::Vec<crate::types::LoRaWanGatewayMetadata>>,
}
impl LoRaWanDeviceMetadataBuilder {
    /// <p>The DevEUI value.</p>
    pub fn dev_eui(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dev_eui = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DevEUI value.</p>
    pub fn set_dev_eui(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dev_eui = input;
        self
    }
    /// <p>The DevEUI value.</p>
    pub fn get_dev_eui(&self) -> &::std::option::Option<::std::string::String> {
        &self.dev_eui
    }
    /// <p>The FPort value.</p>
    pub fn f_port(mut self, input: i32) -> Self {
        self.f_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The FPort value.</p>
    pub fn set_f_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.f_port = input;
        self
    }
    /// <p>The FPort value.</p>
    pub fn get_f_port(&self) -> &::std::option::Option<i32> {
        &self.f_port
    }
    /// <p>The DataRate value.</p>
    pub fn data_rate(mut self, input: i32) -> Self {
        self.data_rate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The DataRate value.</p>
    pub fn set_data_rate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.data_rate = input;
        self
    }
    /// <p>The DataRate value.</p>
    pub fn get_data_rate(&self) -> &::std::option::Option<i32> {
        &self.data_rate
    }
    /// <p>The device's channel frequency in Hz.</p>
    pub fn frequency(mut self, input: i32) -> Self {
        self.frequency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The device's channel frequency in Hz.</p>
    pub fn set_frequency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.frequency = input;
        self
    }
    /// <p>The device's channel frequency in Hz.</p>
    pub fn get_frequency(&self) -> &::std::option::Option<i32> {
        &self.frequency
    }
    /// <p>The date and time of the metadata.</p>
    pub fn timestamp(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timestamp = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time of the metadata.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The date and time of the metadata.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::std::string::String> {
        &self.timestamp
    }
    /// Appends an item to `gateways`.
    ///
    /// To override the contents of this collection use [`set_gateways`](Self::set_gateways).
    ///
    /// <p>Information about the gateways accessed by the device.</p>
    pub fn gateways(mut self, input: crate::types::LoRaWanGatewayMetadata) -> Self {
        let mut v = self.gateways.unwrap_or_default();
        v.push(input);
        self.gateways = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the gateways accessed by the device.</p>
    pub fn set_gateways(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LoRaWanGatewayMetadata>>) -> Self {
        self.gateways = input;
        self
    }
    /// <p>Information about the gateways accessed by the device.</p>
    pub fn get_gateways(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LoRaWanGatewayMetadata>> {
        &self.gateways
    }
    /// Consumes the builder and constructs a [`LoRaWanDeviceMetadata`](crate::types::LoRaWanDeviceMetadata).
    pub fn build(self) -> crate::types::LoRaWanDeviceMetadata {
        crate::types::LoRaWanDeviceMetadata {
            dev_eui: self.dev_eui,
            f_port: self.f_port,
            data_rate: self.data_rate,
            frequency: self.frequency,
            timestamp: self.timestamp,
            gateways: self.gateways,
        }
    }
}
