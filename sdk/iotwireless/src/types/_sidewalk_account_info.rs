// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a Sidewalk account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SidewalkAccountInfo {
    /// <p>The Sidewalk Amazon ID.</p>
    #[doc(hidden)]
    pub amazon_id: std::option::Option<std::string::String>,
    /// <p>The Sidewalk application server private key.</p>
    #[doc(hidden)]
    pub app_server_private_key: std::option::Option<std::string::String>,
}
impl SidewalkAccountInfo {
    /// <p>The Sidewalk Amazon ID.</p>
    pub fn amazon_id(&self) -> std::option::Option<&str> {
        self.amazon_id.as_deref()
    }
    /// <p>The Sidewalk application server private key.</p>
    pub fn app_server_private_key(&self) -> std::option::Option<&str> {
        self.app_server_private_key.as_deref()
    }
}
impl std::fmt::Debug for SidewalkAccountInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SidewalkAccountInfo");
        formatter.field("amazon_id", &self.amazon_id);
        formatter.field("app_server_private_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SidewalkAccountInfo {
    /// Creates a new builder-style object to manufacture [`SidewalkAccountInfo`](crate::types::SidewalkAccountInfo).
    pub fn builder() -> crate::types::builders::SidewalkAccountInfoBuilder {
        crate::types::builders::SidewalkAccountInfoBuilder::default()
    }
}

/// A builder for [`SidewalkAccountInfo`](crate::types::SidewalkAccountInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct SidewalkAccountInfoBuilder {
    pub(crate) amazon_id: std::option::Option<std::string::String>,
    pub(crate) app_server_private_key: std::option::Option<std::string::String>,
}
impl SidewalkAccountInfoBuilder {
    /// <p>The Sidewalk Amazon ID.</p>
    pub fn amazon_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.amazon_id = Some(input.into());
        self
    }
    /// <p>The Sidewalk Amazon ID.</p>
    pub fn set_amazon_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.amazon_id = input;
        self
    }
    /// <p>The Sidewalk application server private key.</p>
    pub fn app_server_private_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_server_private_key = Some(input.into());
        self
    }
    /// <p>The Sidewalk application server private key.</p>
    pub fn set_app_server_private_key(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.app_server_private_key = input;
        self
    }
    /// Consumes the builder and constructs a [`SidewalkAccountInfo`](crate::types::SidewalkAccountInfo).
    pub fn build(self) -> crate::types::SidewalkAccountInfo {
        crate::types::SidewalkAccountInfo {
            amazon_id: self.amazon_id,
            app_server_private_key: self.app_server_private_key,
        }
    }
}
impl std::fmt::Debug for SidewalkAccountInfoBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SidewalkAccountInfoBuilder");
        formatter.field("amazon_id", &self.amazon_id);
        formatter.field("app_server_private_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
