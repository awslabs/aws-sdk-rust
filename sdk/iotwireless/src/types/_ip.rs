// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>IP address used for resolving device location.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Ip {
    /// <p>IP address information.</p>
    #[doc(hidden)]
    pub ip_address: std::option::Option<std::string::String>,
}
impl Ip {
    /// <p>IP address information.</p>
    pub fn ip_address(&self) -> std::option::Option<&str> {
        self.ip_address.as_deref()
    }
}
impl Ip {
    /// Creates a new builder-style object to manufacture [`Ip`](crate::types::Ip).
    pub fn builder() -> crate::types::builders::IpBuilder {
        crate::types::builders::IpBuilder::default()
    }
}

/// A builder for [`Ip`](crate::types::Ip).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IpBuilder {
    pub(crate) ip_address: std::option::Option<std::string::String>,
}
impl IpBuilder {
    /// <p>IP address information.</p>
    pub fn ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip_address = Some(input.into());
        self
    }
    /// <p>IP address information.</p>
    pub fn set_ip_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// Consumes the builder and constructs a [`Ip`](crate::types::Ip).
    pub fn build(self) -> crate::types::Ip {
        crate::types::Ip {
            ip_address: self.ip_address,
        }
    }
}
