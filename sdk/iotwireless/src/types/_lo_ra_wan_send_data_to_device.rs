// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>LoRaWAN router info.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoRaWanSendDataToDevice {
    /// <p>The Fport value.</p>
    #[doc(hidden)]
    pub f_port: std::option::Option<i32>,
    /// <p>Choose the gateways that you want to use for the downlink data traffic when the wireless device is running in class B or class C mode.</p>
    #[doc(hidden)]
    pub participating_gateways: std::option::Option<crate::types::ParticipatingGateways>,
}
impl LoRaWanSendDataToDevice {
    /// <p>The Fport value.</p>
    pub fn f_port(&self) -> std::option::Option<i32> {
        self.f_port
    }
    /// <p>Choose the gateways that you want to use for the downlink data traffic when the wireless device is running in class B or class C mode.</p>
    pub fn participating_gateways(
        &self,
    ) -> std::option::Option<&crate::types::ParticipatingGateways> {
        self.participating_gateways.as_ref()
    }
}
impl LoRaWanSendDataToDevice {
    /// Creates a new builder-style object to manufacture [`LoRaWanSendDataToDevice`](crate::types::LoRaWanSendDataToDevice).
    pub fn builder() -> crate::types::builders::LoRaWanSendDataToDeviceBuilder {
        crate::types::builders::LoRaWanSendDataToDeviceBuilder::default()
    }
}

/// A builder for [`LoRaWanSendDataToDevice`](crate::types::LoRaWanSendDataToDevice).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoRaWanSendDataToDeviceBuilder {
    pub(crate) f_port: std::option::Option<i32>,
    pub(crate) participating_gateways: std::option::Option<crate::types::ParticipatingGateways>,
}
impl LoRaWanSendDataToDeviceBuilder {
    /// <p>The Fport value.</p>
    pub fn f_port(mut self, input: i32) -> Self {
        self.f_port = Some(input);
        self
    }
    /// <p>The Fport value.</p>
    pub fn set_f_port(mut self, input: std::option::Option<i32>) -> Self {
        self.f_port = input;
        self
    }
    /// <p>Choose the gateways that you want to use for the downlink data traffic when the wireless device is running in class B or class C mode.</p>
    pub fn participating_gateways(mut self, input: crate::types::ParticipatingGateways) -> Self {
        self.participating_gateways = Some(input);
        self
    }
    /// <p>Choose the gateways that you want to use for the downlink data traffic when the wireless device is running in class B or class C mode.</p>
    pub fn set_participating_gateways(
        mut self,
        input: std::option::Option<crate::types::ParticipatingGateways>,
    ) -> Self {
        self.participating_gateways = input;
        self
    }
    /// Consumes the builder and constructs a [`LoRaWanSendDataToDevice`](crate::types::LoRaWanSendDataToDevice).
    pub fn build(self) -> crate::types::LoRaWanSendDataToDevice {
        crate::types::LoRaWanSendDataToDevice {
            f_port: self.f_port,
            participating_gateways: self.participating_gateways,
        }
    }
}
