// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>LTE object for network measurement reports.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LteNmrObj {
    /// <p>Physical cell ID.</p>
    pub pci: i32,
    /// <p>E-UTRA (Evolved universal terrestrial Radio Access) absolute radio frequency channel Number (EARFCN).</p>
    pub earfcn: i32,
    /// <p>E-UTRAN (Evolved Universal Terrestrial Radio Access Network) cell global identifier (EUTRANCID).</p>
    pub eutran_cid: i32,
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub rsrp: ::std::option::Option<i32>,
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub rsrq: ::std::option::Option<f32>,
}
impl LteNmrObj {
    /// <p>Physical cell ID.</p>
    pub fn pci(&self) -> i32 {
        self.pci
    }
    /// <p>E-UTRA (Evolved universal terrestrial Radio Access) absolute radio frequency channel Number (EARFCN).</p>
    pub fn earfcn(&self) -> i32 {
        self.earfcn
    }
    /// <p>E-UTRAN (Evolved Universal Terrestrial Radio Access Network) cell global identifier (EUTRANCID).</p>
    pub fn eutran_cid(&self) -> i32 {
        self.eutran_cid
    }
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub fn rsrp(&self) -> ::std::option::Option<i32> {
        self.rsrp
    }
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub fn rsrq(&self) -> ::std::option::Option<f32> {
        self.rsrq
    }
}
impl LteNmrObj {
    /// Creates a new builder-style object to manufacture [`LteNmrObj`](crate::types::LteNmrObj).
    pub fn builder() -> crate::types::builders::LteNmrObjBuilder {
        crate::types::builders::LteNmrObjBuilder::default()
    }
}

/// A builder for [`LteNmrObj`](crate::types::LteNmrObj).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LteNmrObjBuilder {
    pub(crate) pci: ::std::option::Option<i32>,
    pub(crate) earfcn: ::std::option::Option<i32>,
    pub(crate) eutran_cid: ::std::option::Option<i32>,
    pub(crate) rsrp: ::std::option::Option<i32>,
    pub(crate) rsrq: ::std::option::Option<f32>,
}
impl LteNmrObjBuilder {
    /// <p>Physical cell ID.</p>
    /// This field is required.
    pub fn pci(mut self, input: i32) -> Self {
        self.pci = ::std::option::Option::Some(input);
        self
    }
    /// <p>Physical cell ID.</p>
    pub fn set_pci(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pci = input;
        self
    }
    /// <p>Physical cell ID.</p>
    pub fn get_pci(&self) -> &::std::option::Option<i32> {
        &self.pci
    }
    /// <p>E-UTRA (Evolved universal terrestrial Radio Access) absolute radio frequency channel Number (EARFCN).</p>
    /// This field is required.
    pub fn earfcn(mut self, input: i32) -> Self {
        self.earfcn = ::std::option::Option::Some(input);
        self
    }
    /// <p>E-UTRA (Evolved universal terrestrial Radio Access) absolute radio frequency channel Number (EARFCN).</p>
    pub fn set_earfcn(mut self, input: ::std::option::Option<i32>) -> Self {
        self.earfcn = input;
        self
    }
    /// <p>E-UTRA (Evolved universal terrestrial Radio Access) absolute radio frequency channel Number (EARFCN).</p>
    pub fn get_earfcn(&self) -> &::std::option::Option<i32> {
        &self.earfcn
    }
    /// <p>E-UTRAN (Evolved Universal Terrestrial Radio Access Network) cell global identifier (EUTRANCID).</p>
    /// This field is required.
    pub fn eutran_cid(mut self, input: i32) -> Self {
        self.eutran_cid = ::std::option::Option::Some(input);
        self
    }
    /// <p>E-UTRAN (Evolved Universal Terrestrial Radio Access Network) cell global identifier (EUTRANCID).</p>
    pub fn set_eutran_cid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.eutran_cid = input;
        self
    }
    /// <p>E-UTRAN (Evolved Universal Terrestrial Radio Access Network) cell global identifier (EUTRANCID).</p>
    pub fn get_eutran_cid(&self) -> &::std::option::Option<i32> {
        &self.eutran_cid
    }
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub fn rsrp(mut self, input: i32) -> Self {
        self.rsrp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub fn set_rsrp(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rsrp = input;
        self
    }
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub fn get_rsrp(&self) -> &::std::option::Option<i32> {
        &self.rsrp
    }
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub fn rsrq(mut self, input: f32) -> Self {
        self.rsrq = ::std::option::Option::Some(input);
        self
    }
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub fn set_rsrq(mut self, input: ::std::option::Option<f32>) -> Self {
        self.rsrq = input;
        self
    }
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub fn get_rsrq(&self) -> &::std::option::Option<f32> {
        &self.rsrq
    }
    /// Consumes the builder and constructs a [`LteNmrObj`](crate::types::LteNmrObj).
    /// This method will fail if any of the following fields are not set:
    /// - [`pci`](crate::types::builders::LteNmrObjBuilder::pci)
    /// - [`earfcn`](crate::types::builders::LteNmrObjBuilder::earfcn)
    /// - [`eutran_cid`](crate::types::builders::LteNmrObjBuilder::eutran_cid)
    pub fn build(self) -> ::std::result::Result<crate::types::LteNmrObj, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LteNmrObj {
            pci: self.pci.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pci",
                    "pci was not specified but it is required when building LteNmrObj",
                )
            })?,
            earfcn: self.earfcn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "earfcn",
                    "earfcn was not specified but it is required when building LteNmrObj",
                )
            })?,
            eutran_cid: self.eutran_cid.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "eutran_cid",
                    "eutran_cid was not specified but it is required when building LteNmrObj",
                )
            })?,
            rsrp: self.rsrp,
            rsrq: self.rsrq,
        })
    }
}
