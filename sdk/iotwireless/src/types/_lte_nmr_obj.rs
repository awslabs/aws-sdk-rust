// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>LTE object for network measurement reports.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LteNmrObj {
    /// <p>Physical cell ID.</p>
    #[doc(hidden)]
    pub pci: std::option::Option<i32>,
    /// <p>E-UTRA (Evolved universal terrestrial Radio Access) absolute radio frequency channel Number (EARFCN).</p>
    #[doc(hidden)]
    pub earfcn: std::option::Option<i32>,
    /// <p>E-UTRAN (Evolved Universal Terrestrial Radio Access Network) cell global identifier (EUTRANCID).</p>
    #[doc(hidden)]
    pub eutran_cid: std::option::Option<i32>,
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    #[doc(hidden)]
    pub rsrp: std::option::Option<i32>,
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    #[doc(hidden)]
    pub rsrq: std::option::Option<f32>,
}
impl LteNmrObj {
    /// <p>Physical cell ID.</p>
    pub fn pci(&self) -> std::option::Option<i32> {
        self.pci
    }
    /// <p>E-UTRA (Evolved universal terrestrial Radio Access) absolute radio frequency channel Number (EARFCN).</p>
    pub fn earfcn(&self) -> std::option::Option<i32> {
        self.earfcn
    }
    /// <p>E-UTRAN (Evolved Universal Terrestrial Radio Access Network) cell global identifier (EUTRANCID).</p>
    pub fn eutran_cid(&self) -> std::option::Option<i32> {
        self.eutran_cid
    }
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub fn rsrp(&self) -> std::option::Option<i32> {
        self.rsrp
    }
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub fn rsrq(&self) -> std::option::Option<f32> {
        self.rsrq
    }
}
impl LteNmrObj {
    /// Creates a new builder-style object to manufacture [`LteNmrObj`](crate::types::LteNmrObj).
    pub fn builder() -> crate::types::builders::LteNmrObjBuilder {
        crate::types::builders::LteNmrObjBuilder::default()
    }
}

/// A builder for [`LteNmrObj`](crate::types::LteNmrObj).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LteNmrObjBuilder {
    pub(crate) pci: std::option::Option<i32>,
    pub(crate) earfcn: std::option::Option<i32>,
    pub(crate) eutran_cid: std::option::Option<i32>,
    pub(crate) rsrp: std::option::Option<i32>,
    pub(crate) rsrq: std::option::Option<f32>,
}
impl LteNmrObjBuilder {
    /// <p>Physical cell ID.</p>
    pub fn pci(mut self, input: i32) -> Self {
        self.pci = Some(input);
        self
    }
    /// <p>Physical cell ID.</p>
    pub fn set_pci(mut self, input: std::option::Option<i32>) -> Self {
        self.pci = input;
        self
    }
    /// <p>E-UTRA (Evolved universal terrestrial Radio Access) absolute radio frequency channel Number (EARFCN).</p>
    pub fn earfcn(mut self, input: i32) -> Self {
        self.earfcn = Some(input);
        self
    }
    /// <p>E-UTRA (Evolved universal terrestrial Radio Access) absolute radio frequency channel Number (EARFCN).</p>
    pub fn set_earfcn(mut self, input: std::option::Option<i32>) -> Self {
        self.earfcn = input;
        self
    }
    /// <p>E-UTRAN (Evolved Universal Terrestrial Radio Access Network) cell global identifier (EUTRANCID).</p>
    pub fn eutran_cid(mut self, input: i32) -> Self {
        self.eutran_cid = Some(input);
        self
    }
    /// <p>E-UTRAN (Evolved Universal Terrestrial Radio Access Network) cell global identifier (EUTRANCID).</p>
    pub fn set_eutran_cid(mut self, input: std::option::Option<i32>) -> Self {
        self.eutran_cid = input;
        self
    }
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub fn rsrp(mut self, input: i32) -> Self {
        self.rsrp = Some(input);
        self
    }
    /// <p>Signal power of the reference signal received, measured in dBm (decibel-milliwatts).</p>
    pub fn set_rsrp(mut self, input: std::option::Option<i32>) -> Self {
        self.rsrp = input;
        self
    }
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub fn rsrq(mut self, input: f32) -> Self {
        self.rsrq = Some(input);
        self
    }
    /// <p>Signal quality of the reference Signal received, measured in decibels (dB).</p>
    pub fn set_rsrq(mut self, input: std::option::Option<f32>) -> Self {
        self.rsrq = input;
        self
    }
    /// Consumes the builder and constructs a [`LteNmrObj`](crate::types::LteNmrObj).
    pub fn build(self) -> crate::types::LteNmrObj {
        crate::types::LteNmrObj {
            pci: self.pci,
            earfcn: self.earfcn,
            eutran_cid: self.eutran_cid,
            rsrp: self.rsrp,
            rsrq: self.rsrq,
        }
    }
}
