// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Global identity information.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GlobalIdentity {
    /// <p>Location area code of the global identity.</p>
    #[doc(hidden)]
    pub lac: std::option::Option<i32>,
    /// <p>GERAN (GSM EDGE Radio Access Network) cell global identifier.</p>
    #[doc(hidden)]
    pub geran_cid: std::option::Option<i32>,
}
impl GlobalIdentity {
    /// <p>Location area code of the global identity.</p>
    pub fn lac(&self) -> std::option::Option<i32> {
        self.lac
    }
    /// <p>GERAN (GSM EDGE Radio Access Network) cell global identifier.</p>
    pub fn geran_cid(&self) -> std::option::Option<i32> {
        self.geran_cid
    }
}
impl GlobalIdentity {
    /// Creates a new builder-style object to manufacture [`GlobalIdentity`](crate::types::GlobalIdentity).
    pub fn builder() -> crate::types::builders::GlobalIdentityBuilder {
        crate::types::builders::GlobalIdentityBuilder::default()
    }
}

/// A builder for [`GlobalIdentity`](crate::types::GlobalIdentity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GlobalIdentityBuilder {
    pub(crate) lac: std::option::Option<i32>,
    pub(crate) geran_cid: std::option::Option<i32>,
}
impl GlobalIdentityBuilder {
    /// <p>Location area code of the global identity.</p>
    pub fn lac(mut self, input: i32) -> Self {
        self.lac = Some(input);
        self
    }
    /// <p>Location area code of the global identity.</p>
    pub fn set_lac(mut self, input: std::option::Option<i32>) -> Self {
        self.lac = input;
        self
    }
    /// <p>GERAN (GSM EDGE Radio Access Network) cell global identifier.</p>
    pub fn geran_cid(mut self, input: i32) -> Self {
        self.geran_cid = Some(input);
        self
    }
    /// <p>GERAN (GSM EDGE Radio Access Network) cell global identifier.</p>
    pub fn set_geran_cid(mut self, input: std::option::Option<i32>) -> Self {
        self.geran_cid = input;
        self
    }
    /// Consumes the builder and constructs a [`GlobalIdentity`](crate::types::GlobalIdentity).
    pub fn build(self) -> crate::types::GlobalIdentity {
        crate::types::GlobalIdentity {
            lac: self.lac,
            geran_cid: self.geran_cid,
        }
    }
}
