// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>ABP device object for LoRaWAN specification v1.0.x</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AbpV10X {
    /// <p>The DevAddr value.</p>
    #[doc(hidden)]
    pub dev_addr: std::option::Option<std::string::String>,
    /// <p>Session keys for ABP v1.0.x</p>
    #[doc(hidden)]
    pub session_keys: std::option::Option<crate::types::SessionKeysAbpV10X>,
    /// <p>The FCnt init value.</p>
    #[doc(hidden)]
    pub f_cnt_start: std::option::Option<i32>,
}
impl AbpV10X {
    /// <p>The DevAddr value.</p>
    pub fn dev_addr(&self) -> std::option::Option<&str> {
        self.dev_addr.as_deref()
    }
    /// <p>Session keys for ABP v1.0.x</p>
    pub fn session_keys(&self) -> std::option::Option<&crate::types::SessionKeysAbpV10X> {
        self.session_keys.as_ref()
    }
    /// <p>The FCnt init value.</p>
    pub fn f_cnt_start(&self) -> std::option::Option<i32> {
        self.f_cnt_start
    }
}
impl AbpV10X {
    /// Creates a new builder-style object to manufacture [`AbpV10X`](crate::types::AbpV10X).
    pub fn builder() -> crate::types::builders::AbpV10XBuilder {
        crate::types::builders::AbpV10XBuilder::default()
    }
}

/// A builder for [`AbpV10X`](crate::types::AbpV10X).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AbpV10XBuilder {
    pub(crate) dev_addr: std::option::Option<std::string::String>,
    pub(crate) session_keys: std::option::Option<crate::types::SessionKeysAbpV10X>,
    pub(crate) f_cnt_start: std::option::Option<i32>,
}
impl AbpV10XBuilder {
    /// <p>The DevAddr value.</p>
    pub fn dev_addr(mut self, input: impl Into<std::string::String>) -> Self {
        self.dev_addr = Some(input.into());
        self
    }
    /// <p>The DevAddr value.</p>
    pub fn set_dev_addr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dev_addr = input;
        self
    }
    /// <p>Session keys for ABP v1.0.x</p>
    pub fn session_keys(mut self, input: crate::types::SessionKeysAbpV10X) -> Self {
        self.session_keys = Some(input);
        self
    }
    /// <p>Session keys for ABP v1.0.x</p>
    pub fn set_session_keys(
        mut self,
        input: std::option::Option<crate::types::SessionKeysAbpV10X>,
    ) -> Self {
        self.session_keys = input;
        self
    }
    /// <p>The FCnt init value.</p>
    pub fn f_cnt_start(mut self, input: i32) -> Self {
        self.f_cnt_start = Some(input);
        self
    }
    /// <p>The FCnt init value.</p>
    pub fn set_f_cnt_start(mut self, input: std::option::Option<i32>) -> Self {
        self.f_cnt_start = input;
        self
    }
    /// Consumes the builder and constructs a [`AbpV10X`](crate::types::AbpV10X).
    pub fn build(self) -> crate::types::AbpV10X {
        crate::types::AbpV10X {
            dev_addr: self.dev_addr,
            session_keys: self.session_keys,
            f_cnt_start: self.f_cnt_start,
        }
    }
}
