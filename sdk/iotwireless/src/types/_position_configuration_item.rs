// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The wrapper for a position configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PositionConfigurationItem {
    /// <p>Resource identifier for the position configuration.</p>
    #[doc(hidden)]
    pub resource_identifier: std::option::Option<std::string::String>,
    /// <p>Resource type of the resource for the position configuration.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::PositionResourceType>,
    /// <p>The details of the positioning solver object used to compute the location.</p>
    #[doc(hidden)]
    pub solvers: std::option::Option<crate::types::PositionSolverDetails>,
    /// <p>The position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.</p>
    #[doc(hidden)]
    pub destination: std::option::Option<std::string::String>,
}
impl PositionConfigurationItem {
    /// <p>Resource identifier for the position configuration.</p>
    pub fn resource_identifier(&self) -> std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>Resource type of the resource for the position configuration.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::PositionResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The details of the positioning solver object used to compute the location.</p>
    pub fn solvers(&self) -> std::option::Option<&crate::types::PositionSolverDetails> {
        self.solvers.as_ref()
    }
    /// <p>The position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.</p>
    pub fn destination(&self) -> std::option::Option<&str> {
        self.destination.as_deref()
    }
}
impl PositionConfigurationItem {
    /// Creates a new builder-style object to manufacture [`PositionConfigurationItem`](crate::types::PositionConfigurationItem).
    pub fn builder() -> crate::types::builders::PositionConfigurationItemBuilder {
        crate::types::builders::PositionConfigurationItemBuilder::default()
    }
}

/// A builder for [`PositionConfigurationItem`](crate::types::PositionConfigurationItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PositionConfigurationItemBuilder {
    pub(crate) resource_identifier: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<crate::types::PositionResourceType>,
    pub(crate) solvers: std::option::Option<crate::types::PositionSolverDetails>,
    pub(crate) destination: std::option::Option<std::string::String>,
}
impl PositionConfigurationItemBuilder {
    /// <p>Resource identifier for the position configuration.</p>
    pub fn resource_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_identifier = Some(input.into());
        self
    }
    /// <p>Resource identifier for the position configuration.</p>
    pub fn set_resource_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>Resource type of the resource for the position configuration.</p>
    pub fn resource_type(mut self, input: crate::types::PositionResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>Resource type of the resource for the position configuration.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::PositionResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The details of the positioning solver object used to compute the location.</p>
    pub fn solvers(mut self, input: crate::types::PositionSolverDetails) -> Self {
        self.solvers = Some(input);
        self
    }
    /// <p>The details of the positioning solver object used to compute the location.</p>
    pub fn set_solvers(
        mut self,
        input: std::option::Option<crate::types::PositionSolverDetails>,
    ) -> Self {
        self.solvers = input;
        self
    }
    /// <p>The position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.</p>
    pub fn destination(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination = Some(input.into());
        self
    }
    /// <p>The position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.</p>
    pub fn set_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// Consumes the builder and constructs a [`PositionConfigurationItem`](crate::types::PositionConfigurationItem).
    pub fn build(self) -> crate::types::PositionConfigurationItem {
        crate::types::PositionConfigurationItem {
            resource_identifier: self.resource_identifier,
            resource_type: self.resource_type,
            solvers: self.solvers,
            destination: self.destination,
        }
    }
}
