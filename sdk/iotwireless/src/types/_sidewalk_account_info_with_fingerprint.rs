// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a Sidewalk account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SidewalkAccountInfoWithFingerprint {
    /// <p>The Sidewalk Amazon ID.</p>
    #[doc(hidden)]
    pub amazon_id: std::option::Option<std::string::String>,
    /// <p>The fingerprint of the Sidewalk application server private key.</p>
    #[doc(hidden)]
    pub fingerprint: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name of the resource.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
}
impl SidewalkAccountInfoWithFingerprint {
    /// <p>The Sidewalk Amazon ID.</p>
    pub fn amazon_id(&self) -> std::option::Option<&str> {
        self.amazon_id.as_deref()
    }
    /// <p>The fingerprint of the Sidewalk application server private key.</p>
    pub fn fingerprint(&self) -> std::option::Option<&str> {
        self.fingerprint.as_deref()
    }
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl std::fmt::Debug for SidewalkAccountInfoWithFingerprint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SidewalkAccountInfoWithFingerprint");
        formatter.field("amazon_id", &self.amazon_id);
        formatter.field("fingerprint", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
impl SidewalkAccountInfoWithFingerprint {
    /// Creates a new builder-style object to manufacture [`SidewalkAccountInfoWithFingerprint`](crate::types::SidewalkAccountInfoWithFingerprint).
    pub fn builder() -> crate::types::builders::SidewalkAccountInfoWithFingerprintBuilder {
        crate::types::builders::SidewalkAccountInfoWithFingerprintBuilder::default()
    }
}

/// A builder for [`SidewalkAccountInfoWithFingerprint`](crate::types::SidewalkAccountInfoWithFingerprint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct SidewalkAccountInfoWithFingerprintBuilder {
    pub(crate) amazon_id: std::option::Option<std::string::String>,
    pub(crate) fingerprint: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
}
impl SidewalkAccountInfoWithFingerprintBuilder {
    /// <p>The Sidewalk Amazon ID.</p>
    pub fn amazon_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.amazon_id = Some(input.into());
        self
    }
    /// <p>The Sidewalk Amazon ID.</p>
    pub fn set_amazon_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.amazon_id = input;
        self
    }
    /// <p>The fingerprint of the Sidewalk application server private key.</p>
    pub fn fingerprint(mut self, input: impl Into<std::string::String>) -> Self {
        self.fingerprint = Some(input.into());
        self
    }
    /// <p>The fingerprint of the Sidewalk application server private key.</p>
    pub fn set_fingerprint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fingerprint = input;
        self
    }
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Consumes the builder and constructs a [`SidewalkAccountInfoWithFingerprint`](crate::types::SidewalkAccountInfoWithFingerprint).
    pub fn build(self) -> crate::types::SidewalkAccountInfoWithFingerprint {
        crate::types::SidewalkAccountInfoWithFingerprint {
            amazon_id: self.amazon_id,
            fingerprint: self.fingerprint,
            arn: self.arn,
        }
    }
}
impl std::fmt::Debug for SidewalkAccountInfoWithFingerprintBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SidewalkAccountInfoWithFingerprintBuilder");
        formatter.field("amazon_id", &self.amazon_id);
        formatter.field("fingerprint", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
