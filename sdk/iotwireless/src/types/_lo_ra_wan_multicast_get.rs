// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The LoRaWAN information that is to be returned from getting multicast group information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoRaWanMulticastGet {
    /// <p>Supported RfRegions</p>
    pub rf_region: ::std::option::Option<crate::types::SupportedRfRegion>,
    /// <p>DlClass for LoRaWAM, valid values are ClassB and ClassC.</p>
    pub dl_class: ::std::option::Option<crate::types::DlClass>,
    /// <p>Number of devices that are requested to be associated with the multicast group.</p>
    pub number_of_devices_requested: ::std::option::Option<i32>,
    /// <p>Number of devices that are associated to the multicast group.</p>
    pub number_of_devices_in_group: ::std::option::Option<i32>,
    /// <p>Specify the list of gateways to which you want to send the multicast downlink messages. The multicast message will be sent to each gateway in the list, with the transmission interval as the time interval between each message.</p>
    pub participating_gateways: ::std::option::Option<crate::types::ParticipatingGatewaysMulticast>,
}
impl LoRaWanMulticastGet {
    /// <p>Supported RfRegions</p>
    pub fn rf_region(&self) -> ::std::option::Option<&crate::types::SupportedRfRegion> {
        self.rf_region.as_ref()
    }
    /// <p>DlClass for LoRaWAM, valid values are ClassB and ClassC.</p>
    pub fn dl_class(&self) -> ::std::option::Option<&crate::types::DlClass> {
        self.dl_class.as_ref()
    }
    /// <p>Number of devices that are requested to be associated with the multicast group.</p>
    pub fn number_of_devices_requested(&self) -> ::std::option::Option<i32> {
        self.number_of_devices_requested
    }
    /// <p>Number of devices that are associated to the multicast group.</p>
    pub fn number_of_devices_in_group(&self) -> ::std::option::Option<i32> {
        self.number_of_devices_in_group
    }
    /// <p>Specify the list of gateways to which you want to send the multicast downlink messages. The multicast message will be sent to each gateway in the list, with the transmission interval as the time interval between each message.</p>
    pub fn participating_gateways(&self) -> ::std::option::Option<&crate::types::ParticipatingGatewaysMulticast> {
        self.participating_gateways.as_ref()
    }
}
impl LoRaWanMulticastGet {
    /// Creates a new builder-style object to manufacture [`LoRaWanMulticastGet`](crate::types::LoRaWanMulticastGet).
    pub fn builder() -> crate::types::builders::LoRaWanMulticastGetBuilder {
        crate::types::builders::LoRaWanMulticastGetBuilder::default()
    }
}

/// A builder for [`LoRaWanMulticastGet`](crate::types::LoRaWanMulticastGet).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LoRaWanMulticastGetBuilder {
    pub(crate) rf_region: ::std::option::Option<crate::types::SupportedRfRegion>,
    pub(crate) dl_class: ::std::option::Option<crate::types::DlClass>,
    pub(crate) number_of_devices_requested: ::std::option::Option<i32>,
    pub(crate) number_of_devices_in_group: ::std::option::Option<i32>,
    pub(crate) participating_gateways: ::std::option::Option<crate::types::ParticipatingGatewaysMulticast>,
}
impl LoRaWanMulticastGetBuilder {
    /// <p>Supported RfRegions</p>
    pub fn rf_region(mut self, input: crate::types::SupportedRfRegion) -> Self {
        self.rf_region = ::std::option::Option::Some(input);
        self
    }
    /// <p>Supported RfRegions</p>
    pub fn set_rf_region(mut self, input: ::std::option::Option<crate::types::SupportedRfRegion>) -> Self {
        self.rf_region = input;
        self
    }
    /// <p>Supported RfRegions</p>
    pub fn get_rf_region(&self) -> &::std::option::Option<crate::types::SupportedRfRegion> {
        &self.rf_region
    }
    /// <p>DlClass for LoRaWAM, valid values are ClassB and ClassC.</p>
    pub fn dl_class(mut self, input: crate::types::DlClass) -> Self {
        self.dl_class = ::std::option::Option::Some(input);
        self
    }
    /// <p>DlClass for LoRaWAM, valid values are ClassB and ClassC.</p>
    pub fn set_dl_class(mut self, input: ::std::option::Option<crate::types::DlClass>) -> Self {
        self.dl_class = input;
        self
    }
    /// <p>DlClass for LoRaWAM, valid values are ClassB and ClassC.</p>
    pub fn get_dl_class(&self) -> &::std::option::Option<crate::types::DlClass> {
        &self.dl_class
    }
    /// <p>Number of devices that are requested to be associated with the multicast group.</p>
    pub fn number_of_devices_requested(mut self, input: i32) -> Self {
        self.number_of_devices_requested = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of devices that are requested to be associated with the multicast group.</p>
    pub fn set_number_of_devices_requested(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_devices_requested = input;
        self
    }
    /// <p>Number of devices that are requested to be associated with the multicast group.</p>
    pub fn get_number_of_devices_requested(&self) -> &::std::option::Option<i32> {
        &self.number_of_devices_requested
    }
    /// <p>Number of devices that are associated to the multicast group.</p>
    pub fn number_of_devices_in_group(mut self, input: i32) -> Self {
        self.number_of_devices_in_group = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of devices that are associated to the multicast group.</p>
    pub fn set_number_of_devices_in_group(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_devices_in_group = input;
        self
    }
    /// <p>Number of devices that are associated to the multicast group.</p>
    pub fn get_number_of_devices_in_group(&self) -> &::std::option::Option<i32> {
        &self.number_of_devices_in_group
    }
    /// <p>Specify the list of gateways to which you want to send the multicast downlink messages. The multicast message will be sent to each gateway in the list, with the transmission interval as the time interval between each message.</p>
    pub fn participating_gateways(mut self, input: crate::types::ParticipatingGatewaysMulticast) -> Self {
        self.participating_gateways = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the list of gateways to which you want to send the multicast downlink messages. The multicast message will be sent to each gateway in the list, with the transmission interval as the time interval between each message.</p>
    pub fn set_participating_gateways(mut self, input: ::std::option::Option<crate::types::ParticipatingGatewaysMulticast>) -> Self {
        self.participating_gateways = input;
        self
    }
    /// <p>Specify the list of gateways to which you want to send the multicast downlink messages. The multicast message will be sent to each gateway in the list, with the transmission interval as the time interval between each message.</p>
    pub fn get_participating_gateways(&self) -> &::std::option::Option<crate::types::ParticipatingGatewaysMulticast> {
        &self.participating_gateways
    }
    /// Consumes the builder and constructs a [`LoRaWanMulticastGet`](crate::types::LoRaWanMulticastGet).
    pub fn build(self) -> crate::types::LoRaWanMulticastGet {
        crate::types::LoRaWanMulticastGet {
            rf_region: self.rf_region,
            dl_class: self.dl_class,
            number_of_devices_requested: self.number_of_devices_requested,
            number_of_devices_in_group: self.number_of_devices_in_group,
            participating_gateways: self.participating_gateways,
        }
    }
}
