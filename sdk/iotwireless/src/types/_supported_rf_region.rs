// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `SupportedRfRegion`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let supportedrfregion = unimplemented!();
/// match supportedrfregion {
///     SupportedRfRegion::As9231 => { /* ... */ },
///     SupportedRfRegion::As9232 => { /* ... */ },
///     SupportedRfRegion::As9233 => { /* ... */ },
///     SupportedRfRegion::As9234 => { /* ... */ },
///     SupportedRfRegion::Au915 => { /* ... */ },
///     SupportedRfRegion::Cn470 => { /* ... */ },
///     SupportedRfRegion::Cn779 => { /* ... */ },
///     SupportedRfRegion::Eu433 => { /* ... */ },
///     SupportedRfRegion::Eu868 => { /* ... */ },
///     SupportedRfRegion::In865 => { /* ... */ },
///     SupportedRfRegion::Kr920 => { /* ... */ },
///     SupportedRfRegion::Ru864 => { /* ... */ },
///     SupportedRfRegion::Us915 => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `supportedrfregion` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `SupportedRfRegion::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `SupportedRfRegion::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `SupportedRfRegion::NewFeature` is defined.
/// Specifically, when `supportedrfregion` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `SupportedRfRegion::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
/// <p>Supported RfRegions</p>
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum SupportedRfRegion {
    #[allow(missing_docs)] // documentation missing in model
    As9231,
    #[allow(missing_docs)] // documentation missing in model
    As9232,
    #[allow(missing_docs)] // documentation missing in model
    As9233,
    #[allow(missing_docs)] // documentation missing in model
    As9234,
    #[allow(missing_docs)] // documentation missing in model
    Au915,
    #[allow(missing_docs)] // documentation missing in model
    Cn470,
    #[allow(missing_docs)] // documentation missing in model
    Cn779,
    #[allow(missing_docs)] // documentation missing in model
    Eu433,
    #[allow(missing_docs)] // documentation missing in model
    Eu868,
    #[allow(missing_docs)] // documentation missing in model
    In865,
    #[allow(missing_docs)] // documentation missing in model
    Kr920,
    #[allow(missing_docs)] // documentation missing in model
    Ru864,
    #[allow(missing_docs)] // documentation missing in model
    Us915,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for SupportedRfRegion {
    fn from(s: &str) -> Self {
        match s {
            "AS923-1" => SupportedRfRegion::As9231,
            "AS923-2" => SupportedRfRegion::As9232,
            "AS923-3" => SupportedRfRegion::As9233,
            "AS923-4" => SupportedRfRegion::As9234,
            "AU915" => SupportedRfRegion::Au915,
            "CN470" => SupportedRfRegion::Cn470,
            "CN779" => SupportedRfRegion::Cn779,
            "EU433" => SupportedRfRegion::Eu433,
            "EU868" => SupportedRfRegion::Eu868,
            "IN865" => SupportedRfRegion::In865,
            "KR920" => SupportedRfRegion::Kr920,
            "RU864" => SupportedRfRegion::Ru864,
            "US915" => SupportedRfRegion::Us915,
            other => SupportedRfRegion::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for SupportedRfRegion {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(SupportedRfRegion::from(s))
    }
}
impl SupportedRfRegion {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            SupportedRfRegion::As9231 => "AS923-1",
            SupportedRfRegion::As9232 => "AS923-2",
            SupportedRfRegion::As9233 => "AS923-3",
            SupportedRfRegion::As9234 => "AS923-4",
            SupportedRfRegion::Au915 => "AU915",
            SupportedRfRegion::Cn470 => "CN470",
            SupportedRfRegion::Cn779 => "CN779",
            SupportedRfRegion::Eu433 => "EU433",
            SupportedRfRegion::Eu868 => "EU868",
            SupportedRfRegion::In865 => "IN865",
            SupportedRfRegion::Kr920 => "KR920",
            SupportedRfRegion::Ru864 => "RU864",
            SupportedRfRegion::Us915 => "US915",
            SupportedRfRegion::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AS923-1", "AS923-2", "AS923-3", "AS923-4", "AU915", "CN470", "CN779", "EU433", "EU868", "IN865", "KR920", "RU864", "US915",
        ]
    }
}
impl ::std::convert::AsRef<str> for SupportedRfRegion {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl SupportedRfRegion {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for SupportedRfRegion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            SupportedRfRegion::As9231 => write!(f, "AS923-1"),
            SupportedRfRegion::As9232 => write!(f, "AS923-2"),
            SupportedRfRegion::As9233 => write!(f, "AS923-3"),
            SupportedRfRegion::As9234 => write!(f, "AS923-4"),
            SupportedRfRegion::Au915 => write!(f, "AU915"),
            SupportedRfRegion::Cn470 => write!(f, "CN470"),
            SupportedRfRegion::Cn779 => write!(f, "CN779"),
            SupportedRfRegion::Eu433 => write!(f, "EU433"),
            SupportedRfRegion::Eu868 => write!(f, "EU868"),
            SupportedRfRegion::In865 => write!(f, "IN865"),
            SupportedRfRegion::Kr920 => write!(f, "KR920"),
            SupportedRfRegion::Ru864 => write!(f, "RU864"),
            SupportedRfRegion::Us915 => write!(f, "US915"),
            SupportedRfRegion::Unknown(value) => write!(f, "{value}"),
        }
    }
}
