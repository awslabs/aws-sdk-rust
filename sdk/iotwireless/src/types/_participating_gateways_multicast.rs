// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specify the list of gateways to which you want to send the multicast downlink messages. The multicast message will be sent to each gateway in the list, with the transmission interval as the time interval between each message.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParticipatingGatewaysMulticast {
    /// <p>The list of gateways that you want to use for sending the multicast downlink message. Each downlink message will be sent to all the gateways in the list in the order that you provided. If the gateway list is empty, then AWS IoT Core for LoRaWAN chooses the gateways that were most recently used by the devices to send an uplink message.</p>
    pub gateway_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The duration of time in milliseconds for which AWS IoT Core for LoRaWAN will wait before transmitting the multicast payload to the next gateway in the list.</p>
    pub transmission_interval: ::std::option::Option<i32>,
}
impl ParticipatingGatewaysMulticast {
    /// <p>The list of gateways that you want to use for sending the multicast downlink message. Each downlink message will be sent to all the gateways in the list in the order that you provided. If the gateway list is empty, then AWS IoT Core for LoRaWAN chooses the gateways that were most recently used by the devices to send an uplink message.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.gateway_list.is_none()`.
    pub fn gateway_list(&self) -> &[::std::string::String] {
        self.gateway_list.as_deref().unwrap_or_default()
    }
    /// <p>The duration of time in milliseconds for which AWS IoT Core for LoRaWAN will wait before transmitting the multicast payload to the next gateway in the list.</p>
    pub fn transmission_interval(&self) -> ::std::option::Option<i32> {
        self.transmission_interval
    }
}
impl ParticipatingGatewaysMulticast {
    /// Creates a new builder-style object to manufacture [`ParticipatingGatewaysMulticast`](crate::types::ParticipatingGatewaysMulticast).
    pub fn builder() -> crate::types::builders::ParticipatingGatewaysMulticastBuilder {
        crate::types::builders::ParticipatingGatewaysMulticastBuilder::default()
    }
}

/// A builder for [`ParticipatingGatewaysMulticast`](crate::types::ParticipatingGatewaysMulticast).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParticipatingGatewaysMulticastBuilder {
    pub(crate) gateway_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) transmission_interval: ::std::option::Option<i32>,
}
impl ParticipatingGatewaysMulticastBuilder {
    /// Appends an item to `gateway_list`.
    ///
    /// To override the contents of this collection use [`set_gateway_list`](Self::set_gateway_list).
    ///
    /// <p>The list of gateways that you want to use for sending the multicast downlink message. Each downlink message will be sent to all the gateways in the list in the order that you provided. If the gateway list is empty, then AWS IoT Core for LoRaWAN chooses the gateways that were most recently used by the devices to send an uplink message.</p>
    pub fn gateway_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.gateway_list.unwrap_or_default();
        v.push(input.into());
        self.gateway_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of gateways that you want to use for sending the multicast downlink message. Each downlink message will be sent to all the gateways in the list in the order that you provided. If the gateway list is empty, then AWS IoT Core for LoRaWAN chooses the gateways that were most recently used by the devices to send an uplink message.</p>
    pub fn set_gateway_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.gateway_list = input;
        self
    }
    /// <p>The list of gateways that you want to use for sending the multicast downlink message. Each downlink message will be sent to all the gateways in the list in the order that you provided. If the gateway list is empty, then AWS IoT Core for LoRaWAN chooses the gateways that were most recently used by the devices to send an uplink message.</p>
    pub fn get_gateway_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.gateway_list
    }
    /// <p>The duration of time in milliseconds for which AWS IoT Core for LoRaWAN will wait before transmitting the multicast payload to the next gateway in the list.</p>
    pub fn transmission_interval(mut self, input: i32) -> Self {
        self.transmission_interval = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration of time in milliseconds for which AWS IoT Core for LoRaWAN will wait before transmitting the multicast payload to the next gateway in the list.</p>
    pub fn set_transmission_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.transmission_interval = input;
        self
    }
    /// <p>The duration of time in milliseconds for which AWS IoT Core for LoRaWAN will wait before transmitting the multicast payload to the next gateway in the list.</p>
    pub fn get_transmission_interval(&self) -> &::std::option::Option<i32> {
        &self.transmission_interval
    }
    /// Consumes the builder and constructs a [`ParticipatingGatewaysMulticast`](crate::types::ParticipatingGatewaysMulticast).
    pub fn build(self) -> crate::types::ParticipatingGatewaysMulticast {
        crate::types::ParticipatingGatewaysMulticast {
            gateway_list: self.gateway_list,
            transmission_interval: self.transmission_interval,
        }
    }
}
