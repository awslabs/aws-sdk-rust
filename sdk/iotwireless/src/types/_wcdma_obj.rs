// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>WCDMA.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WcdmaObj {
    /// <p>Mobile Country Code.</p>
    #[doc(hidden)]
    pub mcc: std::option::Option<i32>,
    /// <p>Mobile Network Code.</p>
    #[doc(hidden)]
    pub mnc: std::option::Option<i32>,
    /// <p>Location Area Code.</p>
    #[doc(hidden)]
    pub lac: std::option::Option<i32>,
    /// <p>UTRAN (UMTS Terrestrial Radio Access Network) Cell Global Identifier.</p>
    #[doc(hidden)]
    pub utran_cid: std::option::Option<i32>,
    /// <p>WCDMA local ID information.</p>
    #[doc(hidden)]
    pub wcdma_local_id: std::option::Option<crate::types::WcdmaLocalId>,
    /// <p>Received Signal Code Power (signal power) (dBm).</p>
    #[doc(hidden)]
    pub rscp: std::option::Option<i32>,
    /// <p>Path loss, or path attenuation, is the reduction in power density of an electromagnetic wave as it propagates through space.</p>
    #[doc(hidden)]
    pub path_loss: std::option::Option<i32>,
    /// <p>WCDMA object for network measurement reports.</p>
    #[doc(hidden)]
    pub wcdma_nmr: std::option::Option<std::vec::Vec<crate::types::WcdmaNmrObj>>,
}
impl WcdmaObj {
    /// <p>Mobile Country Code.</p>
    pub fn mcc(&self) -> std::option::Option<i32> {
        self.mcc
    }
    /// <p>Mobile Network Code.</p>
    pub fn mnc(&self) -> std::option::Option<i32> {
        self.mnc
    }
    /// <p>Location Area Code.</p>
    pub fn lac(&self) -> std::option::Option<i32> {
        self.lac
    }
    /// <p>UTRAN (UMTS Terrestrial Radio Access Network) Cell Global Identifier.</p>
    pub fn utran_cid(&self) -> std::option::Option<i32> {
        self.utran_cid
    }
    /// <p>WCDMA local ID information.</p>
    pub fn wcdma_local_id(&self) -> std::option::Option<&crate::types::WcdmaLocalId> {
        self.wcdma_local_id.as_ref()
    }
    /// <p>Received Signal Code Power (signal power) (dBm).</p>
    pub fn rscp(&self) -> std::option::Option<i32> {
        self.rscp
    }
    /// <p>Path loss, or path attenuation, is the reduction in power density of an electromagnetic wave as it propagates through space.</p>
    pub fn path_loss(&self) -> std::option::Option<i32> {
        self.path_loss
    }
    /// <p>WCDMA object for network measurement reports.</p>
    pub fn wcdma_nmr(&self) -> std::option::Option<&[crate::types::WcdmaNmrObj]> {
        self.wcdma_nmr.as_deref()
    }
}
impl WcdmaObj {
    /// Creates a new builder-style object to manufacture [`WcdmaObj`](crate::types::WcdmaObj).
    pub fn builder() -> crate::types::builders::WcdmaObjBuilder {
        crate::types::builders::WcdmaObjBuilder::default()
    }
}

/// A builder for [`WcdmaObj`](crate::types::WcdmaObj).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WcdmaObjBuilder {
    pub(crate) mcc: std::option::Option<i32>,
    pub(crate) mnc: std::option::Option<i32>,
    pub(crate) lac: std::option::Option<i32>,
    pub(crate) utran_cid: std::option::Option<i32>,
    pub(crate) wcdma_local_id: std::option::Option<crate::types::WcdmaLocalId>,
    pub(crate) rscp: std::option::Option<i32>,
    pub(crate) path_loss: std::option::Option<i32>,
    pub(crate) wcdma_nmr: std::option::Option<std::vec::Vec<crate::types::WcdmaNmrObj>>,
}
impl WcdmaObjBuilder {
    /// <p>Mobile Country Code.</p>
    pub fn mcc(mut self, input: i32) -> Self {
        self.mcc = Some(input);
        self
    }
    /// <p>Mobile Country Code.</p>
    pub fn set_mcc(mut self, input: std::option::Option<i32>) -> Self {
        self.mcc = input;
        self
    }
    /// <p>Mobile Network Code.</p>
    pub fn mnc(mut self, input: i32) -> Self {
        self.mnc = Some(input);
        self
    }
    /// <p>Mobile Network Code.</p>
    pub fn set_mnc(mut self, input: std::option::Option<i32>) -> Self {
        self.mnc = input;
        self
    }
    /// <p>Location Area Code.</p>
    pub fn lac(mut self, input: i32) -> Self {
        self.lac = Some(input);
        self
    }
    /// <p>Location Area Code.</p>
    pub fn set_lac(mut self, input: std::option::Option<i32>) -> Self {
        self.lac = input;
        self
    }
    /// <p>UTRAN (UMTS Terrestrial Radio Access Network) Cell Global Identifier.</p>
    pub fn utran_cid(mut self, input: i32) -> Self {
        self.utran_cid = Some(input);
        self
    }
    /// <p>UTRAN (UMTS Terrestrial Radio Access Network) Cell Global Identifier.</p>
    pub fn set_utran_cid(mut self, input: std::option::Option<i32>) -> Self {
        self.utran_cid = input;
        self
    }
    /// <p>WCDMA local ID information.</p>
    pub fn wcdma_local_id(mut self, input: crate::types::WcdmaLocalId) -> Self {
        self.wcdma_local_id = Some(input);
        self
    }
    /// <p>WCDMA local ID information.</p>
    pub fn set_wcdma_local_id(
        mut self,
        input: std::option::Option<crate::types::WcdmaLocalId>,
    ) -> Self {
        self.wcdma_local_id = input;
        self
    }
    /// <p>Received Signal Code Power (signal power) (dBm).</p>
    pub fn rscp(mut self, input: i32) -> Self {
        self.rscp = Some(input);
        self
    }
    /// <p>Received Signal Code Power (signal power) (dBm).</p>
    pub fn set_rscp(mut self, input: std::option::Option<i32>) -> Self {
        self.rscp = input;
        self
    }
    /// <p>Path loss, or path attenuation, is the reduction in power density of an electromagnetic wave as it propagates through space.</p>
    pub fn path_loss(mut self, input: i32) -> Self {
        self.path_loss = Some(input);
        self
    }
    /// <p>Path loss, or path attenuation, is the reduction in power density of an electromagnetic wave as it propagates through space.</p>
    pub fn set_path_loss(mut self, input: std::option::Option<i32>) -> Self {
        self.path_loss = input;
        self
    }
    /// Appends an item to `wcdma_nmr`.
    ///
    /// To override the contents of this collection use [`set_wcdma_nmr`](Self::set_wcdma_nmr).
    ///
    /// <p>WCDMA object for network measurement reports.</p>
    pub fn wcdma_nmr(mut self, input: crate::types::WcdmaNmrObj) -> Self {
        let mut v = self.wcdma_nmr.unwrap_or_default();
        v.push(input);
        self.wcdma_nmr = Some(v);
        self
    }
    /// <p>WCDMA object for network measurement reports.</p>
    pub fn set_wcdma_nmr(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::WcdmaNmrObj>>,
    ) -> Self {
        self.wcdma_nmr = input;
        self
    }
    /// Consumes the builder and constructs a [`WcdmaObj`](crate::types::WcdmaObj).
    pub fn build(self) -> crate::types::WcdmaObj {
        crate::types::WcdmaObj {
            mcc: self.mcc,
            mnc: self.mnc,
            lac: self.lac,
            utran_cid: self.utran_cid,
            wcdma_local_id: self.wcdma_local_id,
            rscp: self.rscp,
            path_loss: self.path_loss,
            wcdma_nmr: self.wcdma_nmr,
        }
    }
}
