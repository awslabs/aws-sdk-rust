// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>TD-SCDMA object for network measurement reports.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TdscdmaNmrObj {
    /// <p>TD-SCDMA UTRA (Universal Terrestrial Radio Access Network) absolute RF channel number.</p>
    pub uarfcn: i32,
    /// <p>Cell parameters for TD-SCDMA network measurement reports object.</p>
    pub cell_params: i32,
    /// <p>UTRAN (UMTS Terrestrial Radio Access Network) cell global identifier.</p>
    pub utran_cid: ::std::option::Option<i32>,
    /// <p>Code power of the received signal, measured in decibel-milliwatts (dBm).</p>
    pub rscp: ::std::option::Option<i32>,
    /// <p>Path loss, or path attenuation, is the reduction in power density of an electromagnetic wave as it propagates through space.</p>
    pub path_loss: ::std::option::Option<i32>,
}
impl TdscdmaNmrObj {
    /// <p>TD-SCDMA UTRA (Universal Terrestrial Radio Access Network) absolute RF channel number.</p>
    pub fn uarfcn(&self) -> i32 {
        self.uarfcn
    }
    /// <p>Cell parameters for TD-SCDMA network measurement reports object.</p>
    pub fn cell_params(&self) -> i32 {
        self.cell_params
    }
    /// <p>UTRAN (UMTS Terrestrial Radio Access Network) cell global identifier.</p>
    pub fn utran_cid(&self) -> ::std::option::Option<i32> {
        self.utran_cid
    }
    /// <p>Code power of the received signal, measured in decibel-milliwatts (dBm).</p>
    pub fn rscp(&self) -> ::std::option::Option<i32> {
        self.rscp
    }
    /// <p>Path loss, or path attenuation, is the reduction in power density of an electromagnetic wave as it propagates through space.</p>
    pub fn path_loss(&self) -> ::std::option::Option<i32> {
        self.path_loss
    }
}
impl TdscdmaNmrObj {
    /// Creates a new builder-style object to manufacture [`TdscdmaNmrObj`](crate::types::TdscdmaNmrObj).
    pub fn builder() -> crate::types::builders::TdscdmaNmrObjBuilder {
        crate::types::builders::TdscdmaNmrObjBuilder::default()
    }
}

/// A builder for [`TdscdmaNmrObj`](crate::types::TdscdmaNmrObj).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TdscdmaNmrObjBuilder {
    pub(crate) uarfcn: ::std::option::Option<i32>,
    pub(crate) cell_params: ::std::option::Option<i32>,
    pub(crate) utran_cid: ::std::option::Option<i32>,
    pub(crate) rscp: ::std::option::Option<i32>,
    pub(crate) path_loss: ::std::option::Option<i32>,
}
impl TdscdmaNmrObjBuilder {
    /// <p>TD-SCDMA UTRA (Universal Terrestrial Radio Access Network) absolute RF channel number.</p>
    /// This field is required.
    pub fn uarfcn(mut self, input: i32) -> Self {
        self.uarfcn = ::std::option::Option::Some(input);
        self
    }
    /// <p>TD-SCDMA UTRA (Universal Terrestrial Radio Access Network) absolute RF channel number.</p>
    pub fn set_uarfcn(mut self, input: ::std::option::Option<i32>) -> Self {
        self.uarfcn = input;
        self
    }
    /// <p>TD-SCDMA UTRA (Universal Terrestrial Radio Access Network) absolute RF channel number.</p>
    pub fn get_uarfcn(&self) -> &::std::option::Option<i32> {
        &self.uarfcn
    }
    /// <p>Cell parameters for TD-SCDMA network measurement reports object.</p>
    /// This field is required.
    pub fn cell_params(mut self, input: i32) -> Self {
        self.cell_params = ::std::option::Option::Some(input);
        self
    }
    /// <p>Cell parameters for TD-SCDMA network measurement reports object.</p>
    pub fn set_cell_params(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cell_params = input;
        self
    }
    /// <p>Cell parameters for TD-SCDMA network measurement reports object.</p>
    pub fn get_cell_params(&self) -> &::std::option::Option<i32> {
        &self.cell_params
    }
    /// <p>UTRAN (UMTS Terrestrial Radio Access Network) cell global identifier.</p>
    pub fn utran_cid(mut self, input: i32) -> Self {
        self.utran_cid = ::std::option::Option::Some(input);
        self
    }
    /// <p>UTRAN (UMTS Terrestrial Radio Access Network) cell global identifier.</p>
    pub fn set_utran_cid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.utran_cid = input;
        self
    }
    /// <p>UTRAN (UMTS Terrestrial Radio Access Network) cell global identifier.</p>
    pub fn get_utran_cid(&self) -> &::std::option::Option<i32> {
        &self.utran_cid
    }
    /// <p>Code power of the received signal, measured in decibel-milliwatts (dBm).</p>
    pub fn rscp(mut self, input: i32) -> Self {
        self.rscp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Code power of the received signal, measured in decibel-milliwatts (dBm).</p>
    pub fn set_rscp(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rscp = input;
        self
    }
    /// <p>Code power of the received signal, measured in decibel-milliwatts (dBm).</p>
    pub fn get_rscp(&self) -> &::std::option::Option<i32> {
        &self.rscp
    }
    /// <p>Path loss, or path attenuation, is the reduction in power density of an electromagnetic wave as it propagates through space.</p>
    pub fn path_loss(mut self, input: i32) -> Self {
        self.path_loss = ::std::option::Option::Some(input);
        self
    }
    /// <p>Path loss, or path attenuation, is the reduction in power density of an electromagnetic wave as it propagates through space.</p>
    pub fn set_path_loss(mut self, input: ::std::option::Option<i32>) -> Self {
        self.path_loss = input;
        self
    }
    /// <p>Path loss, or path attenuation, is the reduction in power density of an electromagnetic wave as it propagates through space.</p>
    pub fn get_path_loss(&self) -> &::std::option::Option<i32> {
        &self.path_loss
    }
    /// Consumes the builder and constructs a [`TdscdmaNmrObj`](crate::types::TdscdmaNmrObj).
    /// This method will fail if any of the following fields are not set:
    /// - [`uarfcn`](crate::types::builders::TdscdmaNmrObjBuilder::uarfcn)
    /// - [`cell_params`](crate::types::builders::TdscdmaNmrObjBuilder::cell_params)
    pub fn build(self) -> ::std::result::Result<crate::types::TdscdmaNmrObj, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TdscdmaNmrObj {
            uarfcn: self.uarfcn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "uarfcn",
                    "uarfcn was not specified but it is required when building TdscdmaNmrObj",
                )
            })?,
            cell_params: self.cell_params.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cell_params",
                    "cell_params was not specified but it is required when building TdscdmaNmrObj",
                )
            })?,
            utran_cid: self.utran_cid,
            rscp: self.rscp,
            path_loss: self.path_loss,
        })
    }
}
