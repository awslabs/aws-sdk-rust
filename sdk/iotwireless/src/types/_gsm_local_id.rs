// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>GSM local ID information, which corresponds to the local identification parameters of a GSM cell.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GsmLocalId {
    /// <p>GSM base station identity code (BSIC).</p>
    pub bsic: i32,
    /// <p>GSM broadcast control channel.</p>
    pub bcch: i32,
}
impl GsmLocalId {
    /// <p>GSM base station identity code (BSIC).</p>
    pub fn bsic(&self) -> i32 {
        self.bsic
    }
    /// <p>GSM broadcast control channel.</p>
    pub fn bcch(&self) -> i32 {
        self.bcch
    }
}
impl GsmLocalId {
    /// Creates a new builder-style object to manufacture [`GsmLocalId`](crate::types::GsmLocalId).
    pub fn builder() -> crate::types::builders::GsmLocalIdBuilder {
        crate::types::builders::GsmLocalIdBuilder::default()
    }
}

/// A builder for [`GsmLocalId`](crate::types::GsmLocalId).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GsmLocalIdBuilder {
    pub(crate) bsic: ::std::option::Option<i32>,
    pub(crate) bcch: ::std::option::Option<i32>,
}
impl GsmLocalIdBuilder {
    /// <p>GSM base station identity code (BSIC).</p>
    /// This field is required.
    pub fn bsic(mut self, input: i32) -> Self {
        self.bsic = ::std::option::Option::Some(input);
        self
    }
    /// <p>GSM base station identity code (BSIC).</p>
    pub fn set_bsic(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bsic = input;
        self
    }
    /// <p>GSM base station identity code (BSIC).</p>
    pub fn get_bsic(&self) -> &::std::option::Option<i32> {
        &self.bsic
    }
    /// <p>GSM broadcast control channel.</p>
    /// This field is required.
    pub fn bcch(mut self, input: i32) -> Self {
        self.bcch = ::std::option::Option::Some(input);
        self
    }
    /// <p>GSM broadcast control channel.</p>
    pub fn set_bcch(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bcch = input;
        self
    }
    /// <p>GSM broadcast control channel.</p>
    pub fn get_bcch(&self) -> &::std::option::Option<i32> {
        &self.bcch
    }
    /// Consumes the builder and constructs a [`GsmLocalId`](crate::types::GsmLocalId).
    /// This method will fail if any of the following fields are not set:
    /// - [`bsic`](crate::types::builders::GsmLocalIdBuilder::bsic)
    /// - [`bcch`](crate::types::builders::GsmLocalIdBuilder::bcch)
    pub fn build(self) -> ::std::result::Result<crate::types::GsmLocalId, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GsmLocalId {
            bsic: self.bsic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bsic",
                    "bsic was not specified but it is required when building GsmLocalId",
                )
            })?,
            bcch: self.bcch.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bcch",
                    "bcch was not specified but it is required when building GsmLocalId",
                )
            })?,
        })
    }
}
