// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>CDMA object for network measurement reports.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CdmaNmrObj {
    /// <p>Pseudo-noise offset, which is a characteristic of the signal from a cell on a radio tower.</p>
    pub pn_offset: i32,
    /// <p>CDMA channel information.</p>
    pub cdma_channel: i32,
    /// <p>Transmit power level of the pilot signal, measured in dBm (decibel-milliwatts).</p>
    pub pilot_power: ::std::option::Option<i32>,
    /// <p>CDMA base station ID (BSID).</p>
    pub base_station_id: ::std::option::Option<i32>,
}
impl CdmaNmrObj {
    /// <p>Pseudo-noise offset, which is a characteristic of the signal from a cell on a radio tower.</p>
    pub fn pn_offset(&self) -> i32 {
        self.pn_offset
    }
    /// <p>CDMA channel information.</p>
    pub fn cdma_channel(&self) -> i32 {
        self.cdma_channel
    }
    /// <p>Transmit power level of the pilot signal, measured in dBm (decibel-milliwatts).</p>
    pub fn pilot_power(&self) -> ::std::option::Option<i32> {
        self.pilot_power
    }
    /// <p>CDMA base station ID (BSID).</p>
    pub fn base_station_id(&self) -> ::std::option::Option<i32> {
        self.base_station_id
    }
}
impl CdmaNmrObj {
    /// Creates a new builder-style object to manufacture [`CdmaNmrObj`](crate::types::CdmaNmrObj).
    pub fn builder() -> crate::types::builders::CdmaNmrObjBuilder {
        crate::types::builders::CdmaNmrObjBuilder::default()
    }
}

/// A builder for [`CdmaNmrObj`](crate::types::CdmaNmrObj).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CdmaNmrObjBuilder {
    pub(crate) pn_offset: ::std::option::Option<i32>,
    pub(crate) cdma_channel: ::std::option::Option<i32>,
    pub(crate) pilot_power: ::std::option::Option<i32>,
    pub(crate) base_station_id: ::std::option::Option<i32>,
}
impl CdmaNmrObjBuilder {
    /// <p>Pseudo-noise offset, which is a characteristic of the signal from a cell on a radio tower.</p>
    /// This field is required.
    pub fn pn_offset(mut self, input: i32) -> Self {
        self.pn_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>Pseudo-noise offset, which is a characteristic of the signal from a cell on a radio tower.</p>
    pub fn set_pn_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pn_offset = input;
        self
    }
    /// <p>Pseudo-noise offset, which is a characteristic of the signal from a cell on a radio tower.</p>
    pub fn get_pn_offset(&self) -> &::std::option::Option<i32> {
        &self.pn_offset
    }
    /// <p>CDMA channel information.</p>
    /// This field is required.
    pub fn cdma_channel(mut self, input: i32) -> Self {
        self.cdma_channel = ::std::option::Option::Some(input);
        self
    }
    /// <p>CDMA channel information.</p>
    pub fn set_cdma_channel(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cdma_channel = input;
        self
    }
    /// <p>CDMA channel information.</p>
    pub fn get_cdma_channel(&self) -> &::std::option::Option<i32> {
        &self.cdma_channel
    }
    /// <p>Transmit power level of the pilot signal, measured in dBm (decibel-milliwatts).</p>
    pub fn pilot_power(mut self, input: i32) -> Self {
        self.pilot_power = ::std::option::Option::Some(input);
        self
    }
    /// <p>Transmit power level of the pilot signal, measured in dBm (decibel-milliwatts).</p>
    pub fn set_pilot_power(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pilot_power = input;
        self
    }
    /// <p>Transmit power level of the pilot signal, measured in dBm (decibel-milliwatts).</p>
    pub fn get_pilot_power(&self) -> &::std::option::Option<i32> {
        &self.pilot_power
    }
    /// <p>CDMA base station ID (BSID).</p>
    pub fn base_station_id(mut self, input: i32) -> Self {
        self.base_station_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>CDMA base station ID (BSID).</p>
    pub fn set_base_station_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.base_station_id = input;
        self
    }
    /// <p>CDMA base station ID (BSID).</p>
    pub fn get_base_station_id(&self) -> &::std::option::Option<i32> {
        &self.base_station_id
    }
    /// Consumes the builder and constructs a [`CdmaNmrObj`](crate::types::CdmaNmrObj).
    /// This method will fail if any of the following fields are not set:
    /// - [`pn_offset`](crate::types::builders::CdmaNmrObjBuilder::pn_offset)
    /// - [`cdma_channel`](crate::types::builders::CdmaNmrObjBuilder::cdma_channel)
    pub fn build(self) -> ::std::result::Result<crate::types::CdmaNmrObj, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CdmaNmrObj {
            pn_offset: self.pn_offset.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pn_offset",
                    "pn_offset was not specified but it is required when building CdmaNmrObj",
                )
            })?,
            cdma_channel: self.cdma_channel.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cdma_channel",
                    "cdma_channel was not specified but it is required when building CdmaNmrObj",
                )
            })?,
            pilot_power: self.pilot_power,
            base_station_id: self.base_station_id,
        })
    }
}
