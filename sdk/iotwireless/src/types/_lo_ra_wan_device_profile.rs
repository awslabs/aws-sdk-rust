// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>LoRaWANDeviceProfile object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoRaWanDeviceProfile {
    /// <p>The SupportsClassB value.</p>
    #[doc(hidden)]
    pub supports_class_b: bool,
    /// <p>The ClassBTimeout value.</p>
    #[doc(hidden)]
    pub class_b_timeout: std::option::Option<i32>,
    /// <p>The PingSlotPeriod value.</p>
    #[doc(hidden)]
    pub ping_slot_period: std::option::Option<i32>,
    /// <p>The PingSlotDR value.</p>
    #[doc(hidden)]
    pub ping_slot_dr: std::option::Option<i32>,
    /// <p>The PingSlotFreq value.</p>
    #[doc(hidden)]
    pub ping_slot_freq: std::option::Option<i32>,
    /// <p>The SupportsClassC value.</p>
    #[doc(hidden)]
    pub supports_class_c: bool,
    /// <p>The ClassCTimeout value.</p>
    #[doc(hidden)]
    pub class_c_timeout: std::option::Option<i32>,
    /// <p>The MAC version (such as OTAA 1.1 or OTAA 1.0.3) to use with this device profile.</p>
    #[doc(hidden)]
    pub mac_version: std::option::Option<std::string::String>,
    /// <p>The version of regional parameters.</p>
    #[doc(hidden)]
    pub reg_params_revision: std::option::Option<std::string::String>,
    /// <p>The RXDelay1 value.</p>
    #[doc(hidden)]
    pub rx_delay1: std::option::Option<i32>,
    /// <p>The RXDROffset1 value.</p>
    #[doc(hidden)]
    pub rx_dr_offset1: std::option::Option<i32>,
    /// <p>The RXDataRate2 value.</p>
    #[doc(hidden)]
    pub rx_data_rate2: std::option::Option<i32>,
    /// <p>The RXFreq2 value.</p>
    #[doc(hidden)]
    pub rx_freq2: std::option::Option<i32>,
    /// <p>The list of values that make up the FactoryPresetFreqs value.</p>
    #[doc(hidden)]
    pub factory_preset_freqs_list: std::option::Option<std::vec::Vec<i32>>,
    /// <p>The MaxEIRP value.</p>
    #[doc(hidden)]
    pub max_eirp: std::option::Option<i32>,
    /// <p>The MaxDutyCycle value.</p>
    #[doc(hidden)]
    pub max_duty_cycle: std::option::Option<i32>,
    /// <p>The frequency band (RFRegion) value.</p>
    #[doc(hidden)]
    pub rf_region: std::option::Option<std::string::String>,
    /// <p>The SupportsJoin value.</p>
    #[doc(hidden)]
    pub supports_join: std::option::Option<bool>,
    /// <p>The Supports32BitFCnt value.</p>
    #[doc(hidden)]
    pub supports32_bit_f_cnt: bool,
}
impl LoRaWanDeviceProfile {
    /// <p>The SupportsClassB value.</p>
    pub fn supports_class_b(&self) -> bool {
        self.supports_class_b
    }
    /// <p>The ClassBTimeout value.</p>
    pub fn class_b_timeout(&self) -> std::option::Option<i32> {
        self.class_b_timeout
    }
    /// <p>The PingSlotPeriod value.</p>
    pub fn ping_slot_period(&self) -> std::option::Option<i32> {
        self.ping_slot_period
    }
    /// <p>The PingSlotDR value.</p>
    pub fn ping_slot_dr(&self) -> std::option::Option<i32> {
        self.ping_slot_dr
    }
    /// <p>The PingSlotFreq value.</p>
    pub fn ping_slot_freq(&self) -> std::option::Option<i32> {
        self.ping_slot_freq
    }
    /// <p>The SupportsClassC value.</p>
    pub fn supports_class_c(&self) -> bool {
        self.supports_class_c
    }
    /// <p>The ClassCTimeout value.</p>
    pub fn class_c_timeout(&self) -> std::option::Option<i32> {
        self.class_c_timeout
    }
    /// <p>The MAC version (such as OTAA 1.1 or OTAA 1.0.3) to use with this device profile.</p>
    pub fn mac_version(&self) -> std::option::Option<&str> {
        self.mac_version.as_deref()
    }
    /// <p>The version of regional parameters.</p>
    pub fn reg_params_revision(&self) -> std::option::Option<&str> {
        self.reg_params_revision.as_deref()
    }
    /// <p>The RXDelay1 value.</p>
    pub fn rx_delay1(&self) -> std::option::Option<i32> {
        self.rx_delay1
    }
    /// <p>The RXDROffset1 value.</p>
    pub fn rx_dr_offset1(&self) -> std::option::Option<i32> {
        self.rx_dr_offset1
    }
    /// <p>The RXDataRate2 value.</p>
    pub fn rx_data_rate2(&self) -> std::option::Option<i32> {
        self.rx_data_rate2
    }
    /// <p>The RXFreq2 value.</p>
    pub fn rx_freq2(&self) -> std::option::Option<i32> {
        self.rx_freq2
    }
    /// <p>The list of values that make up the FactoryPresetFreqs value.</p>
    pub fn factory_preset_freqs_list(&self) -> std::option::Option<&[i32]> {
        self.factory_preset_freqs_list.as_deref()
    }
    /// <p>The MaxEIRP value.</p>
    pub fn max_eirp(&self) -> std::option::Option<i32> {
        self.max_eirp
    }
    /// <p>The MaxDutyCycle value.</p>
    pub fn max_duty_cycle(&self) -> std::option::Option<i32> {
        self.max_duty_cycle
    }
    /// <p>The frequency band (RFRegion) value.</p>
    pub fn rf_region(&self) -> std::option::Option<&str> {
        self.rf_region.as_deref()
    }
    /// <p>The SupportsJoin value.</p>
    pub fn supports_join(&self) -> std::option::Option<bool> {
        self.supports_join
    }
    /// <p>The Supports32BitFCnt value.</p>
    pub fn supports32_bit_f_cnt(&self) -> bool {
        self.supports32_bit_f_cnt
    }
}
impl LoRaWanDeviceProfile {
    /// Creates a new builder-style object to manufacture [`LoRaWanDeviceProfile`](crate::types::LoRaWanDeviceProfile).
    pub fn builder() -> crate::types::builders::LoRaWanDeviceProfileBuilder {
        crate::types::builders::LoRaWanDeviceProfileBuilder::default()
    }
}

/// A builder for [`LoRaWanDeviceProfile`](crate::types::LoRaWanDeviceProfile).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoRaWanDeviceProfileBuilder {
    pub(crate) supports_class_b: std::option::Option<bool>,
    pub(crate) class_b_timeout: std::option::Option<i32>,
    pub(crate) ping_slot_period: std::option::Option<i32>,
    pub(crate) ping_slot_dr: std::option::Option<i32>,
    pub(crate) ping_slot_freq: std::option::Option<i32>,
    pub(crate) supports_class_c: std::option::Option<bool>,
    pub(crate) class_c_timeout: std::option::Option<i32>,
    pub(crate) mac_version: std::option::Option<std::string::String>,
    pub(crate) reg_params_revision: std::option::Option<std::string::String>,
    pub(crate) rx_delay1: std::option::Option<i32>,
    pub(crate) rx_dr_offset1: std::option::Option<i32>,
    pub(crate) rx_data_rate2: std::option::Option<i32>,
    pub(crate) rx_freq2: std::option::Option<i32>,
    pub(crate) factory_preset_freqs_list: std::option::Option<std::vec::Vec<i32>>,
    pub(crate) max_eirp: std::option::Option<i32>,
    pub(crate) max_duty_cycle: std::option::Option<i32>,
    pub(crate) rf_region: std::option::Option<std::string::String>,
    pub(crate) supports_join: std::option::Option<bool>,
    pub(crate) supports32_bit_f_cnt: std::option::Option<bool>,
}
impl LoRaWanDeviceProfileBuilder {
    /// <p>The SupportsClassB value.</p>
    pub fn supports_class_b(mut self, input: bool) -> Self {
        self.supports_class_b = Some(input);
        self
    }
    /// <p>The SupportsClassB value.</p>
    pub fn set_supports_class_b(mut self, input: std::option::Option<bool>) -> Self {
        self.supports_class_b = input;
        self
    }
    /// <p>The ClassBTimeout value.</p>
    pub fn class_b_timeout(mut self, input: i32) -> Self {
        self.class_b_timeout = Some(input);
        self
    }
    /// <p>The ClassBTimeout value.</p>
    pub fn set_class_b_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.class_b_timeout = input;
        self
    }
    /// <p>The PingSlotPeriod value.</p>
    pub fn ping_slot_period(mut self, input: i32) -> Self {
        self.ping_slot_period = Some(input);
        self
    }
    /// <p>The PingSlotPeriod value.</p>
    pub fn set_ping_slot_period(mut self, input: std::option::Option<i32>) -> Self {
        self.ping_slot_period = input;
        self
    }
    /// <p>The PingSlotDR value.</p>
    pub fn ping_slot_dr(mut self, input: i32) -> Self {
        self.ping_slot_dr = Some(input);
        self
    }
    /// <p>The PingSlotDR value.</p>
    pub fn set_ping_slot_dr(mut self, input: std::option::Option<i32>) -> Self {
        self.ping_slot_dr = input;
        self
    }
    /// <p>The PingSlotFreq value.</p>
    pub fn ping_slot_freq(mut self, input: i32) -> Self {
        self.ping_slot_freq = Some(input);
        self
    }
    /// <p>The PingSlotFreq value.</p>
    pub fn set_ping_slot_freq(mut self, input: std::option::Option<i32>) -> Self {
        self.ping_slot_freq = input;
        self
    }
    /// <p>The SupportsClassC value.</p>
    pub fn supports_class_c(mut self, input: bool) -> Self {
        self.supports_class_c = Some(input);
        self
    }
    /// <p>The SupportsClassC value.</p>
    pub fn set_supports_class_c(mut self, input: std::option::Option<bool>) -> Self {
        self.supports_class_c = input;
        self
    }
    /// <p>The ClassCTimeout value.</p>
    pub fn class_c_timeout(mut self, input: i32) -> Self {
        self.class_c_timeout = Some(input);
        self
    }
    /// <p>The ClassCTimeout value.</p>
    pub fn set_class_c_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.class_c_timeout = input;
        self
    }
    /// <p>The MAC version (such as OTAA 1.1 or OTAA 1.0.3) to use with this device profile.</p>
    pub fn mac_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.mac_version = Some(input.into());
        self
    }
    /// <p>The MAC version (such as OTAA 1.1 or OTAA 1.0.3) to use with this device profile.</p>
    pub fn set_mac_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mac_version = input;
        self
    }
    /// <p>The version of regional parameters.</p>
    pub fn reg_params_revision(mut self, input: impl Into<std::string::String>) -> Self {
        self.reg_params_revision = Some(input.into());
        self
    }
    /// <p>The version of regional parameters.</p>
    pub fn set_reg_params_revision(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reg_params_revision = input;
        self
    }
    /// <p>The RXDelay1 value.</p>
    pub fn rx_delay1(mut self, input: i32) -> Self {
        self.rx_delay1 = Some(input);
        self
    }
    /// <p>The RXDelay1 value.</p>
    pub fn set_rx_delay1(mut self, input: std::option::Option<i32>) -> Self {
        self.rx_delay1 = input;
        self
    }
    /// <p>The RXDROffset1 value.</p>
    pub fn rx_dr_offset1(mut self, input: i32) -> Self {
        self.rx_dr_offset1 = Some(input);
        self
    }
    /// <p>The RXDROffset1 value.</p>
    pub fn set_rx_dr_offset1(mut self, input: std::option::Option<i32>) -> Self {
        self.rx_dr_offset1 = input;
        self
    }
    /// <p>The RXDataRate2 value.</p>
    pub fn rx_data_rate2(mut self, input: i32) -> Self {
        self.rx_data_rate2 = Some(input);
        self
    }
    /// <p>The RXDataRate2 value.</p>
    pub fn set_rx_data_rate2(mut self, input: std::option::Option<i32>) -> Self {
        self.rx_data_rate2 = input;
        self
    }
    /// <p>The RXFreq2 value.</p>
    pub fn rx_freq2(mut self, input: i32) -> Self {
        self.rx_freq2 = Some(input);
        self
    }
    /// <p>The RXFreq2 value.</p>
    pub fn set_rx_freq2(mut self, input: std::option::Option<i32>) -> Self {
        self.rx_freq2 = input;
        self
    }
    /// Appends an item to `factory_preset_freqs_list`.
    ///
    /// To override the contents of this collection use [`set_factory_preset_freqs_list`](Self::set_factory_preset_freqs_list).
    ///
    /// <p>The list of values that make up the FactoryPresetFreqs value.</p>
    pub fn factory_preset_freqs_list(mut self, input: i32) -> Self {
        let mut v = self.factory_preset_freqs_list.unwrap_or_default();
        v.push(input);
        self.factory_preset_freqs_list = Some(v);
        self
    }
    /// <p>The list of values that make up the FactoryPresetFreqs value.</p>
    pub fn set_factory_preset_freqs_list(
        mut self,
        input: std::option::Option<std::vec::Vec<i32>>,
    ) -> Self {
        self.factory_preset_freqs_list = input;
        self
    }
    /// <p>The MaxEIRP value.</p>
    pub fn max_eirp(mut self, input: i32) -> Self {
        self.max_eirp = Some(input);
        self
    }
    /// <p>The MaxEIRP value.</p>
    pub fn set_max_eirp(mut self, input: std::option::Option<i32>) -> Self {
        self.max_eirp = input;
        self
    }
    /// <p>The MaxDutyCycle value.</p>
    pub fn max_duty_cycle(mut self, input: i32) -> Self {
        self.max_duty_cycle = Some(input);
        self
    }
    /// <p>The MaxDutyCycle value.</p>
    pub fn set_max_duty_cycle(mut self, input: std::option::Option<i32>) -> Self {
        self.max_duty_cycle = input;
        self
    }
    /// <p>The frequency band (RFRegion) value.</p>
    pub fn rf_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.rf_region = Some(input.into());
        self
    }
    /// <p>The frequency band (RFRegion) value.</p>
    pub fn set_rf_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rf_region = input;
        self
    }
    /// <p>The SupportsJoin value.</p>
    pub fn supports_join(mut self, input: bool) -> Self {
        self.supports_join = Some(input);
        self
    }
    /// <p>The SupportsJoin value.</p>
    pub fn set_supports_join(mut self, input: std::option::Option<bool>) -> Self {
        self.supports_join = input;
        self
    }
    /// <p>The Supports32BitFCnt value.</p>
    pub fn supports32_bit_f_cnt(mut self, input: bool) -> Self {
        self.supports32_bit_f_cnt = Some(input);
        self
    }
    /// <p>The Supports32BitFCnt value.</p>
    pub fn set_supports32_bit_f_cnt(mut self, input: std::option::Option<bool>) -> Self {
        self.supports32_bit_f_cnt = input;
        self
    }
    /// Consumes the builder and constructs a [`LoRaWanDeviceProfile`](crate::types::LoRaWanDeviceProfile).
    pub fn build(self) -> crate::types::LoRaWanDeviceProfile {
        crate::types::LoRaWanDeviceProfile {
            supports_class_b: self.supports_class_b.unwrap_or_default(),
            class_b_timeout: self.class_b_timeout,
            ping_slot_period: self.ping_slot_period,
            ping_slot_dr: self.ping_slot_dr,
            ping_slot_freq: self.ping_slot_freq,
            supports_class_c: self.supports_class_c.unwrap_or_default(),
            class_c_timeout: self.class_c_timeout,
            mac_version: self.mac_version,
            reg_params_revision: self.reg_params_revision,
            rx_delay1: self.rx_delay1,
            rx_dr_offset1: self.rx_dr_offset1,
            rx_data_rate2: self.rx_data_rate2,
            rx_freq2: self.rx_freq2,
            factory_preset_freqs_list: self.factory_preset_freqs_list,
            max_eirp: self.max_eirp,
            max_duty_cycle: self.max_duty_cycle,
            rf_region: self.rf_region,
            supports_join: self.supports_join,
            supports32_bit_f_cnt: self.supports32_bit_f_cnt.unwrap_or_default(),
        }
    }
}
