// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>LoRaWAN application configuration, which can be used to perform geolocation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationConfig {
    /// <p>The Fport value.</p>
    #[doc(hidden)]
    pub f_port: std::option::Option<i32>,
    /// <p>Application type, which can be specified to obtain real-time position information of your LoRaWAN device.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ApplicationConfigType>,
    /// <p>The name of the position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.</p>
    #[doc(hidden)]
    pub destination_name: std::option::Option<std::string::String>,
}
impl ApplicationConfig {
    /// <p>The Fport value.</p>
    pub fn f_port(&self) -> std::option::Option<i32> {
        self.f_port
    }
    /// <p>Application type, which can be specified to obtain real-time position information of your LoRaWAN device.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ApplicationConfigType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.</p>
    pub fn destination_name(&self) -> std::option::Option<&str> {
        self.destination_name.as_deref()
    }
}
impl ApplicationConfig {
    /// Creates a new builder-style object to manufacture [`ApplicationConfig`](crate::types::ApplicationConfig).
    pub fn builder() -> crate::types::builders::ApplicationConfigBuilder {
        crate::types::builders::ApplicationConfigBuilder::default()
    }
}

/// A builder for [`ApplicationConfig`](crate::types::ApplicationConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApplicationConfigBuilder {
    pub(crate) f_port: std::option::Option<i32>,
    pub(crate) r#type: std::option::Option<crate::types::ApplicationConfigType>,
    pub(crate) destination_name: std::option::Option<std::string::String>,
}
impl ApplicationConfigBuilder {
    /// <p>The Fport value.</p>
    pub fn f_port(mut self, input: i32) -> Self {
        self.f_port = Some(input);
        self
    }
    /// <p>The Fport value.</p>
    pub fn set_f_port(mut self, input: std::option::Option<i32>) -> Self {
        self.f_port = input;
        self
    }
    /// <p>Application type, which can be specified to obtain real-time position information of your LoRaWAN device.</p>
    pub fn r#type(mut self, input: crate::types::ApplicationConfigType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Application type, which can be specified to obtain real-time position information of your LoRaWAN device.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::ApplicationConfigType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The name of the position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.</p>
    pub fn destination_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_name = Some(input.into());
        self
    }
    /// <p>The name of the position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.</p>
    pub fn set_destination_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ApplicationConfig`](crate::types::ApplicationConfig).
    pub fn build(self) -> crate::types::ApplicationConfig {
        crate::types::ApplicationConfig {
            f_port: self.f_port,
            r#type: self.r#type,
            destination_name: self.destination_name,
        }
    }
}
