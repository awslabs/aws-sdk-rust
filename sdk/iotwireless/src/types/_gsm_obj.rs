// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>GSM object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GsmObj {
    /// <p>Mobile Country Code.</p>
    #[doc(hidden)]
    pub mcc: std::option::Option<i32>,
    /// <p>Mobile Network Code.</p>
    #[doc(hidden)]
    pub mnc: std::option::Option<i32>,
    /// <p>Location area code.</p>
    #[doc(hidden)]
    pub lac: std::option::Option<i32>,
    /// <p>GERAN (GSM EDGE Radio Access Network) Cell Global Identifier.</p>
    #[doc(hidden)]
    pub geran_cid: std::option::Option<i32>,
    /// <p>GSM local identification (local ID) information.</p>
    #[doc(hidden)]
    pub gsm_local_id: std::option::Option<crate::types::GsmLocalId>,
    /// <p>Timing advance value, which corresponds to the length of time a signal takes to reach the base station from a mobile phone.</p>
    #[doc(hidden)]
    pub gsm_timing_advance: std::option::Option<i32>,
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    #[doc(hidden)]
    pub rx_level: std::option::Option<i32>,
    /// <p>GSM object for network measurement reports.</p>
    #[doc(hidden)]
    pub gsm_nmr: std::option::Option<std::vec::Vec<crate::types::GsmNmrObj>>,
}
impl GsmObj {
    /// <p>Mobile Country Code.</p>
    pub fn mcc(&self) -> std::option::Option<i32> {
        self.mcc
    }
    /// <p>Mobile Network Code.</p>
    pub fn mnc(&self) -> std::option::Option<i32> {
        self.mnc
    }
    /// <p>Location area code.</p>
    pub fn lac(&self) -> std::option::Option<i32> {
        self.lac
    }
    /// <p>GERAN (GSM EDGE Radio Access Network) Cell Global Identifier.</p>
    pub fn geran_cid(&self) -> std::option::Option<i32> {
        self.geran_cid
    }
    /// <p>GSM local identification (local ID) information.</p>
    pub fn gsm_local_id(&self) -> std::option::Option<&crate::types::GsmLocalId> {
        self.gsm_local_id.as_ref()
    }
    /// <p>Timing advance value, which corresponds to the length of time a signal takes to reach the base station from a mobile phone.</p>
    pub fn gsm_timing_advance(&self) -> std::option::Option<i32> {
        self.gsm_timing_advance
    }
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub fn rx_level(&self) -> std::option::Option<i32> {
        self.rx_level
    }
    /// <p>GSM object for network measurement reports.</p>
    pub fn gsm_nmr(&self) -> std::option::Option<&[crate::types::GsmNmrObj]> {
        self.gsm_nmr.as_deref()
    }
}
impl GsmObj {
    /// Creates a new builder-style object to manufacture [`GsmObj`](crate::types::GsmObj).
    pub fn builder() -> crate::types::builders::GsmObjBuilder {
        crate::types::builders::GsmObjBuilder::default()
    }
}

/// A builder for [`GsmObj`](crate::types::GsmObj).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GsmObjBuilder {
    pub(crate) mcc: std::option::Option<i32>,
    pub(crate) mnc: std::option::Option<i32>,
    pub(crate) lac: std::option::Option<i32>,
    pub(crate) geran_cid: std::option::Option<i32>,
    pub(crate) gsm_local_id: std::option::Option<crate::types::GsmLocalId>,
    pub(crate) gsm_timing_advance: std::option::Option<i32>,
    pub(crate) rx_level: std::option::Option<i32>,
    pub(crate) gsm_nmr: std::option::Option<std::vec::Vec<crate::types::GsmNmrObj>>,
}
impl GsmObjBuilder {
    /// <p>Mobile Country Code.</p>
    pub fn mcc(mut self, input: i32) -> Self {
        self.mcc = Some(input);
        self
    }
    /// <p>Mobile Country Code.</p>
    pub fn set_mcc(mut self, input: std::option::Option<i32>) -> Self {
        self.mcc = input;
        self
    }
    /// <p>Mobile Network Code.</p>
    pub fn mnc(mut self, input: i32) -> Self {
        self.mnc = Some(input);
        self
    }
    /// <p>Mobile Network Code.</p>
    pub fn set_mnc(mut self, input: std::option::Option<i32>) -> Self {
        self.mnc = input;
        self
    }
    /// <p>Location area code.</p>
    pub fn lac(mut self, input: i32) -> Self {
        self.lac = Some(input);
        self
    }
    /// <p>Location area code.</p>
    pub fn set_lac(mut self, input: std::option::Option<i32>) -> Self {
        self.lac = input;
        self
    }
    /// <p>GERAN (GSM EDGE Radio Access Network) Cell Global Identifier.</p>
    pub fn geran_cid(mut self, input: i32) -> Self {
        self.geran_cid = Some(input);
        self
    }
    /// <p>GERAN (GSM EDGE Radio Access Network) Cell Global Identifier.</p>
    pub fn set_geran_cid(mut self, input: std::option::Option<i32>) -> Self {
        self.geran_cid = input;
        self
    }
    /// <p>GSM local identification (local ID) information.</p>
    pub fn gsm_local_id(mut self, input: crate::types::GsmLocalId) -> Self {
        self.gsm_local_id = Some(input);
        self
    }
    /// <p>GSM local identification (local ID) information.</p>
    pub fn set_gsm_local_id(
        mut self,
        input: std::option::Option<crate::types::GsmLocalId>,
    ) -> Self {
        self.gsm_local_id = input;
        self
    }
    /// <p>Timing advance value, which corresponds to the length of time a signal takes to reach the base station from a mobile phone.</p>
    pub fn gsm_timing_advance(mut self, input: i32) -> Self {
        self.gsm_timing_advance = Some(input);
        self
    }
    /// <p>Timing advance value, which corresponds to the length of time a signal takes to reach the base station from a mobile phone.</p>
    pub fn set_gsm_timing_advance(mut self, input: std::option::Option<i32>) -> Self {
        self.gsm_timing_advance = input;
        self
    }
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub fn rx_level(mut self, input: i32) -> Self {
        self.rx_level = Some(input);
        self
    }
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub fn set_rx_level(mut self, input: std::option::Option<i32>) -> Self {
        self.rx_level = input;
        self
    }
    /// Appends an item to `gsm_nmr`.
    ///
    /// To override the contents of this collection use [`set_gsm_nmr`](Self::set_gsm_nmr).
    ///
    /// <p>GSM object for network measurement reports.</p>
    pub fn gsm_nmr(mut self, input: crate::types::GsmNmrObj) -> Self {
        let mut v = self.gsm_nmr.unwrap_or_default();
        v.push(input);
        self.gsm_nmr = Some(v);
        self
    }
    /// <p>GSM object for network measurement reports.</p>
    pub fn set_gsm_nmr(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GsmNmrObj>>,
    ) -> Self {
        self.gsm_nmr = input;
        self
    }
    /// Consumes the builder and constructs a [`GsmObj`](crate::types::GsmObj).
    pub fn build(self) -> crate::types::GsmObj {
        crate::types::GsmObj {
            mcc: self.mcc,
            mnc: self.mnc,
            lac: self.lac,
            geran_cid: self.geran_cid,
            gsm_local_id: self.gsm_local_id,
            gsm_timing_advance: self.gsm_timing_advance,
            rx_level: self.rx_level,
            gsm_nmr: self.gsm_nmr,
        }
    }
}
