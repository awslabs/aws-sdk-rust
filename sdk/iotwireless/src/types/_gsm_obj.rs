// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>GSM object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GsmObj {
    /// <p>Mobile Country Code.</p>
    pub mcc: i32,
    /// <p>Mobile Network Code.</p>
    pub mnc: i32,
    /// <p>Location area code.</p>
    pub lac: i32,
    /// <p>GERAN (GSM EDGE Radio Access Network) Cell Global Identifier.</p>
    pub geran_cid: i32,
    /// <p>GSM local identification (local ID) information.</p>
    pub gsm_local_id: ::std::option::Option<crate::types::GsmLocalId>,
    /// <p>Timing advance value, which corresponds to the length of time a signal takes to reach the base station from a mobile phone.</p>
    pub gsm_timing_advance: ::std::option::Option<i32>,
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub rx_level: ::std::option::Option<i32>,
    /// <p>GSM object for network measurement reports.</p>
    pub gsm_nmr: ::std::option::Option<::std::vec::Vec<crate::types::GsmNmrObj>>,
}
impl GsmObj {
    /// <p>Mobile Country Code.</p>
    pub fn mcc(&self) -> i32 {
        self.mcc
    }
    /// <p>Mobile Network Code.</p>
    pub fn mnc(&self) -> i32 {
        self.mnc
    }
    /// <p>Location area code.</p>
    pub fn lac(&self) -> i32 {
        self.lac
    }
    /// <p>GERAN (GSM EDGE Radio Access Network) Cell Global Identifier.</p>
    pub fn geran_cid(&self) -> i32 {
        self.geran_cid
    }
    /// <p>GSM local identification (local ID) information.</p>
    pub fn gsm_local_id(&self) -> ::std::option::Option<&crate::types::GsmLocalId> {
        self.gsm_local_id.as_ref()
    }
    /// <p>Timing advance value, which corresponds to the length of time a signal takes to reach the base station from a mobile phone.</p>
    pub fn gsm_timing_advance(&self) -> ::std::option::Option<i32> {
        self.gsm_timing_advance
    }
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub fn rx_level(&self) -> ::std::option::Option<i32> {
        self.rx_level
    }
    /// <p>GSM object for network measurement reports.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.gsm_nmr.is_none()`.
    pub fn gsm_nmr(&self) -> &[crate::types::GsmNmrObj] {
        self.gsm_nmr.as_deref().unwrap_or_default()
    }
}
impl GsmObj {
    /// Creates a new builder-style object to manufacture [`GsmObj`](crate::types::GsmObj).
    pub fn builder() -> crate::types::builders::GsmObjBuilder {
        crate::types::builders::GsmObjBuilder::default()
    }
}

/// A builder for [`GsmObj`](crate::types::GsmObj).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GsmObjBuilder {
    pub(crate) mcc: ::std::option::Option<i32>,
    pub(crate) mnc: ::std::option::Option<i32>,
    pub(crate) lac: ::std::option::Option<i32>,
    pub(crate) geran_cid: ::std::option::Option<i32>,
    pub(crate) gsm_local_id: ::std::option::Option<crate::types::GsmLocalId>,
    pub(crate) gsm_timing_advance: ::std::option::Option<i32>,
    pub(crate) rx_level: ::std::option::Option<i32>,
    pub(crate) gsm_nmr: ::std::option::Option<::std::vec::Vec<crate::types::GsmNmrObj>>,
}
impl GsmObjBuilder {
    /// <p>Mobile Country Code.</p>
    /// This field is required.
    pub fn mcc(mut self, input: i32) -> Self {
        self.mcc = ::std::option::Option::Some(input);
        self
    }
    /// <p>Mobile Country Code.</p>
    pub fn set_mcc(mut self, input: ::std::option::Option<i32>) -> Self {
        self.mcc = input;
        self
    }
    /// <p>Mobile Country Code.</p>
    pub fn get_mcc(&self) -> &::std::option::Option<i32> {
        &self.mcc
    }
    /// <p>Mobile Network Code.</p>
    /// This field is required.
    pub fn mnc(mut self, input: i32) -> Self {
        self.mnc = ::std::option::Option::Some(input);
        self
    }
    /// <p>Mobile Network Code.</p>
    pub fn set_mnc(mut self, input: ::std::option::Option<i32>) -> Self {
        self.mnc = input;
        self
    }
    /// <p>Mobile Network Code.</p>
    pub fn get_mnc(&self) -> &::std::option::Option<i32> {
        &self.mnc
    }
    /// <p>Location area code.</p>
    /// This field is required.
    pub fn lac(mut self, input: i32) -> Self {
        self.lac = ::std::option::Option::Some(input);
        self
    }
    /// <p>Location area code.</p>
    pub fn set_lac(mut self, input: ::std::option::Option<i32>) -> Self {
        self.lac = input;
        self
    }
    /// <p>Location area code.</p>
    pub fn get_lac(&self) -> &::std::option::Option<i32> {
        &self.lac
    }
    /// <p>GERAN (GSM EDGE Radio Access Network) Cell Global Identifier.</p>
    /// This field is required.
    pub fn geran_cid(mut self, input: i32) -> Self {
        self.geran_cid = ::std::option::Option::Some(input);
        self
    }
    /// <p>GERAN (GSM EDGE Radio Access Network) Cell Global Identifier.</p>
    pub fn set_geran_cid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.geran_cid = input;
        self
    }
    /// <p>GERAN (GSM EDGE Radio Access Network) Cell Global Identifier.</p>
    pub fn get_geran_cid(&self) -> &::std::option::Option<i32> {
        &self.geran_cid
    }
    /// <p>GSM local identification (local ID) information.</p>
    pub fn gsm_local_id(mut self, input: crate::types::GsmLocalId) -> Self {
        self.gsm_local_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>GSM local identification (local ID) information.</p>
    pub fn set_gsm_local_id(mut self, input: ::std::option::Option<crate::types::GsmLocalId>) -> Self {
        self.gsm_local_id = input;
        self
    }
    /// <p>GSM local identification (local ID) information.</p>
    pub fn get_gsm_local_id(&self) -> &::std::option::Option<crate::types::GsmLocalId> {
        &self.gsm_local_id
    }
    /// <p>Timing advance value, which corresponds to the length of time a signal takes to reach the base station from a mobile phone.</p>
    pub fn gsm_timing_advance(mut self, input: i32) -> Self {
        self.gsm_timing_advance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timing advance value, which corresponds to the length of time a signal takes to reach the base station from a mobile phone.</p>
    pub fn set_gsm_timing_advance(mut self, input: ::std::option::Option<i32>) -> Self {
        self.gsm_timing_advance = input;
        self
    }
    /// <p>Timing advance value, which corresponds to the length of time a signal takes to reach the base station from a mobile phone.</p>
    pub fn get_gsm_timing_advance(&self) -> &::std::option::Option<i32> {
        &self.gsm_timing_advance
    }
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub fn rx_level(mut self, input: i32) -> Self {
        self.rx_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub fn set_rx_level(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rx_level = input;
        self
    }
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub fn get_rx_level(&self) -> &::std::option::Option<i32> {
        &self.rx_level
    }
    /// Appends an item to `gsm_nmr`.
    ///
    /// To override the contents of this collection use [`set_gsm_nmr`](Self::set_gsm_nmr).
    ///
    /// <p>GSM object for network measurement reports.</p>
    pub fn gsm_nmr(mut self, input: crate::types::GsmNmrObj) -> Self {
        let mut v = self.gsm_nmr.unwrap_or_default();
        v.push(input);
        self.gsm_nmr = ::std::option::Option::Some(v);
        self
    }
    /// <p>GSM object for network measurement reports.</p>
    pub fn set_gsm_nmr(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GsmNmrObj>>) -> Self {
        self.gsm_nmr = input;
        self
    }
    /// <p>GSM object for network measurement reports.</p>
    pub fn get_gsm_nmr(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GsmNmrObj>> {
        &self.gsm_nmr
    }
    /// Consumes the builder and constructs a [`GsmObj`](crate::types::GsmObj).
    /// This method will fail if any of the following fields are not set:
    /// - [`mcc`](crate::types::builders::GsmObjBuilder::mcc)
    /// - [`mnc`](crate::types::builders::GsmObjBuilder::mnc)
    /// - [`lac`](crate::types::builders::GsmObjBuilder::lac)
    /// - [`geran_cid`](crate::types::builders::GsmObjBuilder::geran_cid)
    pub fn build(self) -> ::std::result::Result<crate::types::GsmObj, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GsmObj {
            mcc: self.mcc.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mcc",
                    "mcc was not specified but it is required when building GsmObj",
                )
            })?,
            mnc: self.mnc.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mnc",
                    "mnc was not specified but it is required when building GsmObj",
                )
            })?,
            lac: self.lac.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "lac",
                    "lac was not specified but it is required when building GsmObj",
                )
            })?,
            geran_cid: self.geran_cid.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "geran_cid",
                    "geran_cid was not specified but it is required when building GsmObj",
                )
            })?,
            gsm_local_id: self.gsm_local_id,
            gsm_timing_advance: self.gsm_timing_advance,
            rx_level: self.rx_level,
            gsm_nmr: self.gsm_nmr,
        })
    }
}
