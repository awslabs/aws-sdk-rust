// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sidewalk-related information for devices in an import task that are being onboarded.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SidewalkGetStartImportInfo {
    /// <p>List of Sidewalk devices that are added to the import task.</p>
    pub device_creation_file_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The IAM role that allows AWS IoT Wireless to access the CSV file in the S3 bucket.</p>
    pub role: ::std::option::Option<::std::string::String>,
}
impl SidewalkGetStartImportInfo {
    /// <p>List of Sidewalk devices that are added to the import task.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.device_creation_file_list.is_none()`.
    pub fn device_creation_file_list(&self) -> &[::std::string::String] {
        self.device_creation_file_list.as_deref().unwrap_or_default()
    }
    /// <p>The IAM role that allows AWS IoT Wireless to access the CSV file in the S3 bucket.</p>
    pub fn role(&self) -> ::std::option::Option<&str> {
        self.role.as_deref()
    }
}
impl SidewalkGetStartImportInfo {
    /// Creates a new builder-style object to manufacture [`SidewalkGetStartImportInfo`](crate::types::SidewalkGetStartImportInfo).
    pub fn builder() -> crate::types::builders::SidewalkGetStartImportInfoBuilder {
        crate::types::builders::SidewalkGetStartImportInfoBuilder::default()
    }
}

/// A builder for [`SidewalkGetStartImportInfo`](crate::types::SidewalkGetStartImportInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SidewalkGetStartImportInfoBuilder {
    pub(crate) device_creation_file_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) role: ::std::option::Option<::std::string::String>,
}
impl SidewalkGetStartImportInfoBuilder {
    /// Appends an item to `device_creation_file_list`.
    ///
    /// To override the contents of this collection use [`set_device_creation_file_list`](Self::set_device_creation_file_list).
    ///
    /// <p>List of Sidewalk devices that are added to the import task.</p>
    pub fn device_creation_file_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.device_creation_file_list.unwrap_or_default();
        v.push(input.into());
        self.device_creation_file_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of Sidewalk devices that are added to the import task.</p>
    pub fn set_device_creation_file_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.device_creation_file_list = input;
        self
    }
    /// <p>List of Sidewalk devices that are added to the import task.</p>
    pub fn get_device_creation_file_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.device_creation_file_list
    }
    /// <p>The IAM role that allows AWS IoT Wireless to access the CSV file in the S3 bucket.</p>
    pub fn role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role that allows AWS IoT Wireless to access the CSV file in the S3 bucket.</p>
    pub fn set_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>The IAM role that allows AWS IoT Wireless to access the CSV file in the S3 bucket.</p>
    pub fn get_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.role
    }
    /// Consumes the builder and constructs a [`SidewalkGetStartImportInfo`](crate::types::SidewalkGetStartImportInfo).
    pub fn build(self) -> crate::types::SidewalkGetStartImportInfo {
        crate::types::SidewalkGetStartImportInfo {
            device_creation_file_list: self.device_creation_file_list,
            role: self.role,
        }
    }
}
