// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>GSM object for network measurement reports.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GsmNmrObj {
    /// <p>GSM base station identity code (BSIC).</p>
    pub bsic: i32,
    /// <p>GSM broadcast control channel.</p>
    pub bcch: i32,
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub rx_level: ::std::option::Option<i32>,
    /// <p>Global identity information of the GSM object.</p>
    pub global_identity: ::std::option::Option<crate::types::GlobalIdentity>,
}
impl GsmNmrObj {
    /// <p>GSM base station identity code (BSIC).</p>
    pub fn bsic(&self) -> i32 {
        self.bsic
    }
    /// <p>GSM broadcast control channel.</p>
    pub fn bcch(&self) -> i32 {
        self.bcch
    }
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub fn rx_level(&self) -> ::std::option::Option<i32> {
        self.rx_level
    }
    /// <p>Global identity information of the GSM object.</p>
    pub fn global_identity(&self) -> ::std::option::Option<&crate::types::GlobalIdentity> {
        self.global_identity.as_ref()
    }
}
impl GsmNmrObj {
    /// Creates a new builder-style object to manufacture [`GsmNmrObj`](crate::types::GsmNmrObj).
    pub fn builder() -> crate::types::builders::GsmNmrObjBuilder {
        crate::types::builders::GsmNmrObjBuilder::default()
    }
}

/// A builder for [`GsmNmrObj`](crate::types::GsmNmrObj).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GsmNmrObjBuilder {
    pub(crate) bsic: ::std::option::Option<i32>,
    pub(crate) bcch: ::std::option::Option<i32>,
    pub(crate) rx_level: ::std::option::Option<i32>,
    pub(crate) global_identity: ::std::option::Option<crate::types::GlobalIdentity>,
}
impl GsmNmrObjBuilder {
    /// <p>GSM base station identity code (BSIC).</p>
    /// This field is required.
    pub fn bsic(mut self, input: i32) -> Self {
        self.bsic = ::std::option::Option::Some(input);
        self
    }
    /// <p>GSM base station identity code (BSIC).</p>
    pub fn set_bsic(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bsic = input;
        self
    }
    /// <p>GSM base station identity code (BSIC).</p>
    pub fn get_bsic(&self) -> &::std::option::Option<i32> {
        &self.bsic
    }
    /// <p>GSM broadcast control channel.</p>
    /// This field is required.
    pub fn bcch(mut self, input: i32) -> Self {
        self.bcch = ::std::option::Option::Some(input);
        self
    }
    /// <p>GSM broadcast control channel.</p>
    pub fn set_bcch(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bcch = input;
        self
    }
    /// <p>GSM broadcast control channel.</p>
    pub fn get_bcch(&self) -> &::std::option::Option<i32> {
        &self.bcch
    }
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub fn rx_level(mut self, input: i32) -> Self {
        self.rx_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub fn set_rx_level(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rx_level = input;
        self
    }
    /// <p>Rx level, which is the received signal power, measured in dBm (decibel-milliwatts).</p>
    pub fn get_rx_level(&self) -> &::std::option::Option<i32> {
        &self.rx_level
    }
    /// <p>Global identity information of the GSM object.</p>
    pub fn global_identity(mut self, input: crate::types::GlobalIdentity) -> Self {
        self.global_identity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Global identity information of the GSM object.</p>
    pub fn set_global_identity(mut self, input: ::std::option::Option<crate::types::GlobalIdentity>) -> Self {
        self.global_identity = input;
        self
    }
    /// <p>Global identity information of the GSM object.</p>
    pub fn get_global_identity(&self) -> &::std::option::Option<crate::types::GlobalIdentity> {
        &self.global_identity
    }
    /// Consumes the builder and constructs a [`GsmNmrObj`](crate::types::GsmNmrObj).
    /// This method will fail if any of the following fields are not set:
    /// - [`bsic`](crate::types::builders::GsmNmrObjBuilder::bsic)
    /// - [`bcch`](crate::types::builders::GsmNmrObjBuilder::bcch)
    pub fn build(self) -> ::std::result::Result<crate::types::GsmNmrObj, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GsmNmrObj {
            bsic: self.bsic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bsic",
                    "bsic was not specified but it is required when building GsmNmrObj",
                )
            })?,
            bcch: self.bcch.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bcch",
                    "bcch was not specified but it is required when building GsmNmrObj",
                )
            })?,
            rx_level: self.rx_level,
            global_identity: self.global_identity,
        })
    }
}
