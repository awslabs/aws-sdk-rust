// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Wi-Fi access point.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WiFiAccessPoint {
    /// <p>Wi-Fi MAC Address.</p>
    pub mac_address: ::std::string::String,
    /// <p>Received signal strength (dBm) of the WLAN measurement data.</p>
    pub rss: i32,
}
impl WiFiAccessPoint {
    /// <p>Wi-Fi MAC Address.</p>
    pub fn mac_address(&self) -> &str {
        use std::ops::Deref;
        self.mac_address.deref()
    }
    /// <p>Received signal strength (dBm) of the WLAN measurement data.</p>
    pub fn rss(&self) -> i32 {
        self.rss
    }
}
impl WiFiAccessPoint {
    /// Creates a new builder-style object to manufacture [`WiFiAccessPoint`](crate::types::WiFiAccessPoint).
    pub fn builder() -> crate::types::builders::WiFiAccessPointBuilder {
        crate::types::builders::WiFiAccessPointBuilder::default()
    }
}

/// A builder for [`WiFiAccessPoint`](crate::types::WiFiAccessPoint).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WiFiAccessPointBuilder {
    pub(crate) mac_address: ::std::option::Option<::std::string::String>,
    pub(crate) rss: ::std::option::Option<i32>,
}
impl WiFiAccessPointBuilder {
    /// <p>Wi-Fi MAC Address.</p>
    /// This field is required.
    pub fn mac_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mac_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Wi-Fi MAC Address.</p>
    pub fn set_mac_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mac_address = input;
        self
    }
    /// <p>Wi-Fi MAC Address.</p>
    pub fn get_mac_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.mac_address
    }
    /// <p>Received signal strength (dBm) of the WLAN measurement data.</p>
    /// This field is required.
    pub fn rss(mut self, input: i32) -> Self {
        self.rss = ::std::option::Option::Some(input);
        self
    }
    /// <p>Received signal strength (dBm) of the WLAN measurement data.</p>
    pub fn set_rss(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rss = input;
        self
    }
    /// <p>Received signal strength (dBm) of the WLAN measurement data.</p>
    pub fn get_rss(&self) -> &::std::option::Option<i32> {
        &self.rss
    }
    /// Consumes the builder and constructs a [`WiFiAccessPoint`](crate::types::WiFiAccessPoint).
    /// This method will fail if any of the following fields are not set:
    /// - [`mac_address`](crate::types::builders::WiFiAccessPointBuilder::mac_address)
    /// - [`rss`](crate::types::builders::WiFiAccessPointBuilder::rss)
    pub fn build(self) -> ::std::result::Result<crate::types::WiFiAccessPoint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WiFiAccessPoint {
            mac_address: self.mac_address.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mac_address",
                    "mac_address was not specified but it is required when building WiFiAccessPoint",
                )
            })?,
            rss: self.rss.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rss",
                    "rss was not specified but it is required when building WiFiAccessPoint",
                )
            })?,
        })
    }
}
