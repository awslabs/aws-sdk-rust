// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Wi-Fi access point.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WiFiAccessPoint {
    /// <p>Wi-Fi MAC Address.</p>
    #[doc(hidden)]
    pub mac_address: std::option::Option<std::string::String>,
    /// <p>Recived signal strength of the WLAN measurement data.</p>
    #[doc(hidden)]
    pub rss: std::option::Option<i32>,
}
impl WiFiAccessPoint {
    /// <p>Wi-Fi MAC Address.</p>
    pub fn mac_address(&self) -> std::option::Option<&str> {
        self.mac_address.as_deref()
    }
    /// <p>Recived signal strength of the WLAN measurement data.</p>
    pub fn rss(&self) -> std::option::Option<i32> {
        self.rss
    }
}
impl WiFiAccessPoint {
    /// Creates a new builder-style object to manufacture [`WiFiAccessPoint`](crate::types::WiFiAccessPoint).
    pub fn builder() -> crate::types::builders::WiFiAccessPointBuilder {
        crate::types::builders::WiFiAccessPointBuilder::default()
    }
}

/// A builder for [`WiFiAccessPoint`](crate::types::WiFiAccessPoint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WiFiAccessPointBuilder {
    pub(crate) mac_address: std::option::Option<std::string::String>,
    pub(crate) rss: std::option::Option<i32>,
}
impl WiFiAccessPointBuilder {
    /// <p>Wi-Fi MAC Address.</p>
    pub fn mac_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.mac_address = Some(input.into());
        self
    }
    /// <p>Wi-Fi MAC Address.</p>
    pub fn set_mac_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mac_address = input;
        self
    }
    /// <p>Recived signal strength of the WLAN measurement data.</p>
    pub fn rss(mut self, input: i32) -> Self {
        self.rss = Some(input);
        self
    }
    /// <p>Recived signal strength of the WLAN measurement data.</p>
    pub fn set_rss(mut self, input: std::option::Option<i32>) -> Self {
        self.rss = input;
        self
    }
    /// Consumes the builder and constructs a [`WiFiAccessPoint`](crate::types::WiFiAccessPoint).
    pub fn build(self) -> crate::types::WiFiAccessPoint {
        crate::types::WiFiAccessPoint {
            mac_address: self.mac_address,
            rss: self.rss,
        }
    }
}
