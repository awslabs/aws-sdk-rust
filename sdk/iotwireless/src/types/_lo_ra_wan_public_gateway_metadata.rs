// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>LoRaWAN public gateway metadata.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoRaWanPublicGatewayMetadata {
    /// <p>The ID of the LoRaWAN public network provider.</p>
    pub provider_net_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the gateways that are operated by the network provider.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The RSSI (received signal strength indicator) value.</p>
    pub rssi: ::std::option::Option<f64>,
    /// <p>The SNR (signal to noise ratio) value.</p>
    pub snr: ::std::option::Option<f64>,
    /// <p>The frequency band (RFRegion) value.</p>
    pub rf_region: ::std::option::Option<::std::string::String>,
    /// <p>Boolean that indicates whether downlink is allowed using the network.</p>
    pub dl_allowed: ::std::option::Option<bool>,
}
impl LoRaWanPublicGatewayMetadata {
    /// <p>The ID of the LoRaWAN public network provider.</p>
    pub fn provider_net_id(&self) -> ::std::option::Option<&str> {
        self.provider_net_id.as_deref()
    }
    /// <p>The ID of the gateways that are operated by the network provider.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The RSSI (received signal strength indicator) value.</p>
    pub fn rssi(&self) -> ::std::option::Option<f64> {
        self.rssi
    }
    /// <p>The SNR (signal to noise ratio) value.</p>
    pub fn snr(&self) -> ::std::option::Option<f64> {
        self.snr
    }
    /// <p>The frequency band (RFRegion) value.</p>
    pub fn rf_region(&self) -> ::std::option::Option<&str> {
        self.rf_region.as_deref()
    }
    /// <p>Boolean that indicates whether downlink is allowed using the network.</p>
    pub fn dl_allowed(&self) -> ::std::option::Option<bool> {
        self.dl_allowed
    }
}
impl LoRaWanPublicGatewayMetadata {
    /// Creates a new builder-style object to manufacture [`LoRaWanPublicGatewayMetadata`](crate::types::LoRaWanPublicGatewayMetadata).
    pub fn builder() -> crate::types::builders::LoRaWanPublicGatewayMetadataBuilder {
        crate::types::builders::LoRaWanPublicGatewayMetadataBuilder::default()
    }
}

/// A builder for [`LoRaWanPublicGatewayMetadata`](crate::types::LoRaWanPublicGatewayMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LoRaWanPublicGatewayMetadataBuilder {
    pub(crate) provider_net_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) rssi: ::std::option::Option<f64>,
    pub(crate) snr: ::std::option::Option<f64>,
    pub(crate) rf_region: ::std::option::Option<::std::string::String>,
    pub(crate) dl_allowed: ::std::option::Option<bool>,
}
impl LoRaWanPublicGatewayMetadataBuilder {
    /// <p>The ID of the LoRaWAN public network provider.</p>
    pub fn provider_net_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_net_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the LoRaWAN public network provider.</p>
    pub fn set_provider_net_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_net_id = input;
        self
    }
    /// <p>The ID of the LoRaWAN public network provider.</p>
    pub fn get_provider_net_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_net_id
    }
    /// <p>The ID of the gateways that are operated by the network provider.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the gateways that are operated by the network provider.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the gateways that are operated by the network provider.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The RSSI (received signal strength indicator) value.</p>
    pub fn rssi(mut self, input: f64) -> Self {
        self.rssi = ::std::option::Option::Some(input);
        self
    }
    /// <p>The RSSI (received signal strength indicator) value.</p>
    pub fn set_rssi(mut self, input: ::std::option::Option<f64>) -> Self {
        self.rssi = input;
        self
    }
    /// <p>The RSSI (received signal strength indicator) value.</p>
    pub fn get_rssi(&self) -> &::std::option::Option<f64> {
        &self.rssi
    }
    /// <p>The SNR (signal to noise ratio) value.</p>
    pub fn snr(mut self, input: f64) -> Self {
        self.snr = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SNR (signal to noise ratio) value.</p>
    pub fn set_snr(mut self, input: ::std::option::Option<f64>) -> Self {
        self.snr = input;
        self
    }
    /// <p>The SNR (signal to noise ratio) value.</p>
    pub fn get_snr(&self) -> &::std::option::Option<f64> {
        &self.snr
    }
    /// <p>The frequency band (RFRegion) value.</p>
    pub fn rf_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rf_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The frequency band (RFRegion) value.</p>
    pub fn set_rf_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rf_region = input;
        self
    }
    /// <p>The frequency band (RFRegion) value.</p>
    pub fn get_rf_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.rf_region
    }
    /// <p>Boolean that indicates whether downlink is allowed using the network.</p>
    pub fn dl_allowed(mut self, input: bool) -> Self {
        self.dl_allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean that indicates whether downlink is allowed using the network.</p>
    pub fn set_dl_allowed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dl_allowed = input;
        self
    }
    /// <p>Boolean that indicates whether downlink is allowed using the network.</p>
    pub fn get_dl_allowed(&self) -> &::std::option::Option<bool> {
        &self.dl_allowed
    }
    /// Consumes the builder and constructs a [`LoRaWanPublicGatewayMetadata`](crate::types::LoRaWanPublicGatewayMetadata).
    pub fn build(self) -> crate::types::LoRaWanPublicGatewayMetadata {
        crate::types::LoRaWanPublicGatewayMetadata {
            provider_net_id: self.provider_net_id,
            id: self.id,
            rssi: self.rssi,
            snr: self.snr,
            rf_region: self.rf_region,
            dl_allowed: self.dl_allowed,
        }
    }
}
