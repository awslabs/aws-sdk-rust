// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of the summary metrics aggregation operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SummaryMetricQueryResult {
    /// <p>The ID of the summary metric results query operation.</p>
    pub query_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the summary metric query result.</p>
    pub query_status: ::std::option::Option<crate::types::MetricQueryStatus>,
    /// <p>The error message for the summary metric query result.</p>
    pub error: ::std::option::Option<::std::string::String>,
    /// <p>The name of the summary metric query result.</p>
    pub metric_name: ::std::option::Option<crate::types::MetricName>,
    /// <p>The dimensions of the metric.</p>
    pub dimensions: ::std::option::Option<::std::vec::Vec<crate::types::Dimension>>,
    /// <p>The aggregation period of the metric.</p>
    pub aggregation_period: ::std::option::Option<crate::types::AggregationPeriod>,
    /// <p>The start timestamp for the summary metric query.</p>
    pub start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end timestamp for the summary metric query.</p>
    pub end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of each aggregation result.</p>
    pub timestamps: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>>,
    /// <p>The list of aggregated summary metric query results.</p>
    pub values: ::std::option::Option<::std::vec::Vec<crate::types::MetricQueryValue>>,
    /// <p>The units of measurement to be used for interpreting the aggregation result.</p>
    pub unit: ::std::option::Option<::std::string::String>,
}
impl SummaryMetricQueryResult {
    /// <p>The ID of the summary metric results query operation.</p>
    pub fn query_id(&self) -> ::std::option::Option<&str> {
        self.query_id.as_deref()
    }
    /// <p>The status of the summary metric query result.</p>
    pub fn query_status(&self) -> ::std::option::Option<&crate::types::MetricQueryStatus> {
        self.query_status.as_ref()
    }
    /// <p>The error message for the summary metric query result.</p>
    pub fn error(&self) -> ::std::option::Option<&str> {
        self.error.as_deref()
    }
    /// <p>The name of the summary metric query result.</p>
    pub fn metric_name(&self) -> ::std::option::Option<&crate::types::MetricName> {
        self.metric_name.as_ref()
    }
    /// <p>The dimensions of the metric.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dimensions.is_none()`.
    pub fn dimensions(&self) -> &[crate::types::Dimension] {
        self.dimensions.as_deref().unwrap_or_default()
    }
    /// <p>The aggregation period of the metric.</p>
    pub fn aggregation_period(&self) -> ::std::option::Option<&crate::types::AggregationPeriod> {
        self.aggregation_period.as_ref()
    }
    /// <p>The start timestamp for the summary metric query.</p>
    pub fn start_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_timestamp.as_ref()
    }
    /// <p>The end timestamp for the summary metric query.</p>
    pub fn end_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_timestamp.as_ref()
    }
    /// <p>The timestamp of each aggregation result.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.timestamps.is_none()`.
    pub fn timestamps(&self) -> &[::aws_smithy_types::DateTime] {
        self.timestamps.as_deref().unwrap_or_default()
    }
    /// <p>The list of aggregated summary metric query results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[crate::types::MetricQueryValue] {
        self.values.as_deref().unwrap_or_default()
    }
    /// <p>The units of measurement to be used for interpreting the aggregation result.</p>
    pub fn unit(&self) -> ::std::option::Option<&str> {
        self.unit.as_deref()
    }
}
impl SummaryMetricQueryResult {
    /// Creates a new builder-style object to manufacture [`SummaryMetricQueryResult`](crate::types::SummaryMetricQueryResult).
    pub fn builder() -> crate::types::builders::SummaryMetricQueryResultBuilder {
        crate::types::builders::SummaryMetricQueryResultBuilder::default()
    }
}

/// A builder for [`SummaryMetricQueryResult`](crate::types::SummaryMetricQueryResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SummaryMetricQueryResultBuilder {
    pub(crate) query_id: ::std::option::Option<::std::string::String>,
    pub(crate) query_status: ::std::option::Option<crate::types::MetricQueryStatus>,
    pub(crate) error: ::std::option::Option<::std::string::String>,
    pub(crate) metric_name: ::std::option::Option<crate::types::MetricName>,
    pub(crate) dimensions: ::std::option::Option<::std::vec::Vec<crate::types::Dimension>>,
    pub(crate) aggregation_period: ::std::option::Option<crate::types::AggregationPeriod>,
    pub(crate) start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) timestamps: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<crate::types::MetricQueryValue>>,
    pub(crate) unit: ::std::option::Option<::std::string::String>,
}
impl SummaryMetricQueryResultBuilder {
    /// <p>The ID of the summary metric results query operation.</p>
    pub fn query_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the summary metric results query operation.</p>
    pub fn set_query_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// <p>The ID of the summary metric results query operation.</p>
    pub fn get_query_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_id
    }
    /// <p>The status of the summary metric query result.</p>
    pub fn query_status(mut self, input: crate::types::MetricQueryStatus) -> Self {
        self.query_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the summary metric query result.</p>
    pub fn set_query_status(mut self, input: ::std::option::Option<crate::types::MetricQueryStatus>) -> Self {
        self.query_status = input;
        self
    }
    /// <p>The status of the summary metric query result.</p>
    pub fn get_query_status(&self) -> &::std::option::Option<crate::types::MetricQueryStatus> {
        &self.query_status
    }
    /// <p>The error message for the summary metric query result.</p>
    pub fn error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message for the summary metric query result.</p>
    pub fn set_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error = input;
        self
    }
    /// <p>The error message for the summary metric query result.</p>
    pub fn get_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.error
    }
    /// <p>The name of the summary metric query result.</p>
    pub fn metric_name(mut self, input: crate::types::MetricName) -> Self {
        self.metric_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the summary metric query result.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<crate::types::MetricName>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The name of the summary metric query result.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<crate::types::MetricName> {
        &self.metric_name
    }
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>The dimensions of the metric.</p>
    pub fn dimensions(mut self, input: crate::types::Dimension) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input);
        self.dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The dimensions of the metric.</p>
    pub fn set_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Dimension>>) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>The dimensions of the metric.</p>
    pub fn get_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Dimension>> {
        &self.dimensions
    }
    /// <p>The aggregation period of the metric.</p>
    pub fn aggregation_period(mut self, input: crate::types::AggregationPeriod) -> Self {
        self.aggregation_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregation period of the metric.</p>
    pub fn set_aggregation_period(mut self, input: ::std::option::Option<crate::types::AggregationPeriod>) -> Self {
        self.aggregation_period = input;
        self
    }
    /// <p>The aggregation period of the metric.</p>
    pub fn get_aggregation_period(&self) -> &::std::option::Option<crate::types::AggregationPeriod> {
        &self.aggregation_period
    }
    /// <p>The start timestamp for the summary metric query.</p>
    pub fn start_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start timestamp for the summary metric query.</p>
    pub fn set_start_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_timestamp = input;
        self
    }
    /// <p>The start timestamp for the summary metric query.</p>
    pub fn get_start_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_timestamp
    }
    /// <p>The end timestamp for the summary metric query.</p>
    pub fn end_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end timestamp for the summary metric query.</p>
    pub fn set_end_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_timestamp = input;
        self
    }
    /// <p>The end timestamp for the summary metric query.</p>
    pub fn get_end_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_timestamp
    }
    /// Appends an item to `timestamps`.
    ///
    /// To override the contents of this collection use [`set_timestamps`](Self::set_timestamps).
    ///
    /// <p>The timestamp of each aggregation result.</p>
    pub fn timestamps(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        let mut v = self.timestamps.unwrap_or_default();
        v.push(input);
        self.timestamps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The timestamp of each aggregation result.</p>
    pub fn set_timestamps(mut self, input: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>>) -> Self {
        self.timestamps = input;
        self
    }
    /// <p>The timestamp of each aggregation result.</p>
    pub fn get_timestamps(&self) -> &::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>> {
        &self.timestamps
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The list of aggregated summary metric query results.</p>
    pub fn values(mut self, input: crate::types::MetricQueryValue) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of aggregated summary metric query results.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricQueryValue>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The list of aggregated summary metric query results.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricQueryValue>> {
        &self.values
    }
    /// <p>The units of measurement to be used for interpreting the aggregation result.</p>
    pub fn unit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The units of measurement to be used for interpreting the aggregation result.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The units of measurement to be used for interpreting the aggregation result.</p>
    pub fn get_unit(&self) -> &::std::option::Option<::std::string::String> {
        &self.unit
    }
    /// Consumes the builder and constructs a [`SummaryMetricQueryResult`](crate::types::SummaryMetricQueryResult).
    pub fn build(self) -> crate::types::SummaryMetricQueryResult {
        crate::types::SummaryMetricQueryResult {
            query_id: self.query_id,
            query_status: self.query_status,
            error: self.error,
            metric_name: self.metric_name,
            dimensions: self.dimensions,
            aggregation_period: self.aggregation_period,
            start_timestamp: self.start_timestamp,
            end_timestamp: self.end_timestamp,
            timestamps: self.timestamps,
            values: self.values,
            unit: self.unit,
        }
    }
}
