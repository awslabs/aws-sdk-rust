// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>CDMA local ID information, which corresponds to the local identification parameters of a CDMA cell.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CdmaLocalId {
    /// <p>Pseudo-noise offset, which is a characteristic of the signal from a cell on a radio tower.</p>
    pub pn_offset: i32,
    /// <p>CDMA channel information.</p>
    pub cdma_channel: i32,
}
impl CdmaLocalId {
    /// <p>Pseudo-noise offset, which is a characteristic of the signal from a cell on a radio tower.</p>
    pub fn pn_offset(&self) -> i32 {
        self.pn_offset
    }
    /// <p>CDMA channel information.</p>
    pub fn cdma_channel(&self) -> i32 {
        self.cdma_channel
    }
}
impl CdmaLocalId {
    /// Creates a new builder-style object to manufacture [`CdmaLocalId`](crate::types::CdmaLocalId).
    pub fn builder() -> crate::types::builders::CdmaLocalIdBuilder {
        crate::types::builders::CdmaLocalIdBuilder::default()
    }
}

/// A builder for [`CdmaLocalId`](crate::types::CdmaLocalId).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CdmaLocalIdBuilder {
    pub(crate) pn_offset: ::std::option::Option<i32>,
    pub(crate) cdma_channel: ::std::option::Option<i32>,
}
impl CdmaLocalIdBuilder {
    /// <p>Pseudo-noise offset, which is a characteristic of the signal from a cell on a radio tower.</p>
    /// This field is required.
    pub fn pn_offset(mut self, input: i32) -> Self {
        self.pn_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>Pseudo-noise offset, which is a characteristic of the signal from a cell on a radio tower.</p>
    pub fn set_pn_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pn_offset = input;
        self
    }
    /// <p>Pseudo-noise offset, which is a characteristic of the signal from a cell on a radio tower.</p>
    pub fn get_pn_offset(&self) -> &::std::option::Option<i32> {
        &self.pn_offset
    }
    /// <p>CDMA channel information.</p>
    /// This field is required.
    pub fn cdma_channel(mut self, input: i32) -> Self {
        self.cdma_channel = ::std::option::Option::Some(input);
        self
    }
    /// <p>CDMA channel information.</p>
    pub fn set_cdma_channel(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cdma_channel = input;
        self
    }
    /// <p>CDMA channel information.</p>
    pub fn get_cdma_channel(&self) -> &::std::option::Option<i32> {
        &self.cdma_channel
    }
    /// Consumes the builder and constructs a [`CdmaLocalId`](crate::types::CdmaLocalId).
    /// This method will fail if any of the following fields are not set:
    /// - [`pn_offset`](crate::types::builders::CdmaLocalIdBuilder::pn_offset)
    /// - [`cdma_channel`](crate::types::builders::CdmaLocalIdBuilder::cdma_channel)
    pub fn build(self) -> ::std::result::Result<crate::types::CdmaLocalId, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CdmaLocalId {
            pn_offset: self.pn_offset.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pn_offset",
                    "pn_offset was not specified but it is required when building CdmaLocalId",
                )
            })?,
            cdma_channel: self.cdma_channel.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cdma_channel",
                    "cdma_channel was not specified but it is required when building CdmaLocalId",
                )
            })?,
        })
    }
}
