// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `MetricName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let metricname = unimplemented!();
/// match metricname {
///     MetricName::AwsAccountActiveDeviceCount => { /* ... */ },
///     MetricName::AwsAccountActiveGatewayCount => { /* ... */ },
///     MetricName::AwsAccountDeviceCount => { /* ... */ },
///     MetricName::AwsAccountDownlinkCount => { /* ... */ },
///     MetricName::AwsAccountGatewayCount => { /* ... */ },
///     MetricName::AwsAccountJoinAcceptCount => { /* ... */ },
///     MetricName::AwsAccountJoinRequestCount => { /* ... */ },
///     MetricName::AwsAccountRoamingDownlinkCount => { /* ... */ },
///     MetricName::AwsAccountRoamingUplinkCount => { /* ... */ },
///     MetricName::AwsAccountUplinkCount => { /* ... */ },
///     MetricName::AwsAccountUplinkLostCount => { /* ... */ },
///     MetricName::AwsAccountUplinkLostRate => { /* ... */ },
///     MetricName::DeviceDownlinkCount => { /* ... */ },
///     MetricName::DeviceJoinAcceptCount => { /* ... */ },
///     MetricName::DeviceJoinRequestCount => { /* ... */ },
///     MetricName::DeviceRssi => { /* ... */ },
///     MetricName::DeviceRoamingDownlinkCount => { /* ... */ },
///     MetricName::DeviceRoamingRssi => { /* ... */ },
///     MetricName::DeviceRoamingSnr => { /* ... */ },
///     MetricName::DeviceRoamingUplinkCount => { /* ... */ },
///     MetricName::DeviceSnr => { /* ... */ },
///     MetricName::DeviceUplinkCount => { /* ... */ },
///     MetricName::DeviceUplinkLostCount => { /* ... */ },
///     MetricName::DeviceUplinkLostRate => { /* ... */ },
///     MetricName::GatewayDownTime => { /* ... */ },
///     MetricName::GatewayDownlinkCount => { /* ... */ },
///     MetricName::GatewayJoinAcceptCount => { /* ... */ },
///     MetricName::GatewayJoinRequestCount => { /* ... */ },
///     MetricName::GatewayRssi => { /* ... */ },
///     MetricName::GatewaySnr => { /* ... */ },
///     MetricName::GatewayUpTime => { /* ... */ },
///     MetricName::GatewayUplinkCount => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `metricname` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `MetricName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `MetricName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `MetricName::NewFeature` is defined.
/// Specifically, when `metricname` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `MetricName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum MetricName {
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountActiveDeviceCount,
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountActiveGatewayCount,
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountDeviceCount,
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountDownlinkCount,
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountGatewayCount,
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountJoinAcceptCount,
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountJoinRequestCount,
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountRoamingDownlinkCount,
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountRoamingUplinkCount,
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountUplinkCount,
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountUplinkLostCount,
    #[allow(missing_docs)] // documentation missing in model
    AwsAccountUplinkLostRate,
    #[allow(missing_docs)] // documentation missing in model
    DeviceDownlinkCount,
    #[allow(missing_docs)] // documentation missing in model
    DeviceJoinAcceptCount,
    #[allow(missing_docs)] // documentation missing in model
    DeviceJoinRequestCount,
    #[allow(missing_docs)] // documentation missing in model
    DeviceRssi,
    #[allow(missing_docs)] // documentation missing in model
    DeviceRoamingDownlinkCount,
    #[allow(missing_docs)] // documentation missing in model
    DeviceRoamingRssi,
    #[allow(missing_docs)] // documentation missing in model
    DeviceRoamingSnr,
    #[allow(missing_docs)] // documentation missing in model
    DeviceRoamingUplinkCount,
    #[allow(missing_docs)] // documentation missing in model
    DeviceSnr,
    #[allow(missing_docs)] // documentation missing in model
    DeviceUplinkCount,
    #[allow(missing_docs)] // documentation missing in model
    DeviceUplinkLostCount,
    #[allow(missing_docs)] // documentation missing in model
    DeviceUplinkLostRate,
    #[allow(missing_docs)] // documentation missing in model
    GatewayDownTime,
    #[allow(missing_docs)] // documentation missing in model
    GatewayDownlinkCount,
    #[allow(missing_docs)] // documentation missing in model
    GatewayJoinAcceptCount,
    #[allow(missing_docs)] // documentation missing in model
    GatewayJoinRequestCount,
    #[allow(missing_docs)] // documentation missing in model
    GatewayRssi,
    #[allow(missing_docs)] // documentation missing in model
    GatewaySnr,
    #[allow(missing_docs)] // documentation missing in model
    GatewayUpTime,
    #[allow(missing_docs)] // documentation missing in model
    GatewayUplinkCount,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for MetricName {
    fn from(s: &str) -> Self {
        match s {
            "AwsAccountActiveDeviceCount" => MetricName::AwsAccountActiveDeviceCount,
            "AwsAccountActiveGatewayCount" => MetricName::AwsAccountActiveGatewayCount,
            "AwsAccountDeviceCount" => MetricName::AwsAccountDeviceCount,
            "AwsAccountDownlinkCount" => MetricName::AwsAccountDownlinkCount,
            "AwsAccountGatewayCount" => MetricName::AwsAccountGatewayCount,
            "AwsAccountJoinAcceptCount" => MetricName::AwsAccountJoinAcceptCount,
            "AwsAccountJoinRequestCount" => MetricName::AwsAccountJoinRequestCount,
            "AwsAccountRoamingDownlinkCount" => MetricName::AwsAccountRoamingDownlinkCount,
            "AwsAccountRoamingUplinkCount" => MetricName::AwsAccountRoamingUplinkCount,
            "AwsAccountUplinkCount" => MetricName::AwsAccountUplinkCount,
            "AwsAccountUplinkLostCount" => MetricName::AwsAccountUplinkLostCount,
            "AwsAccountUplinkLostRate" => MetricName::AwsAccountUplinkLostRate,
            "DeviceDownlinkCount" => MetricName::DeviceDownlinkCount,
            "DeviceJoinAcceptCount" => MetricName::DeviceJoinAcceptCount,
            "DeviceJoinRequestCount" => MetricName::DeviceJoinRequestCount,
            "DeviceRSSI" => MetricName::DeviceRssi,
            "DeviceRoamingDownlinkCount" => MetricName::DeviceRoamingDownlinkCount,
            "DeviceRoamingRSSI" => MetricName::DeviceRoamingRssi,
            "DeviceRoamingSNR" => MetricName::DeviceRoamingSnr,
            "DeviceRoamingUplinkCount" => MetricName::DeviceRoamingUplinkCount,
            "DeviceSNR" => MetricName::DeviceSnr,
            "DeviceUplinkCount" => MetricName::DeviceUplinkCount,
            "DeviceUplinkLostCount" => MetricName::DeviceUplinkLostCount,
            "DeviceUplinkLostRate" => MetricName::DeviceUplinkLostRate,
            "GatewayDownTime" => MetricName::GatewayDownTime,
            "GatewayDownlinkCount" => MetricName::GatewayDownlinkCount,
            "GatewayJoinAcceptCount" => MetricName::GatewayJoinAcceptCount,
            "GatewayJoinRequestCount" => MetricName::GatewayJoinRequestCount,
            "GatewayRSSI" => MetricName::GatewayRssi,
            "GatewaySNR" => MetricName::GatewaySnr,
            "GatewayUpTime" => MetricName::GatewayUpTime,
            "GatewayUplinkCount" => MetricName::GatewayUplinkCount,
            other => MetricName::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for MetricName {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(MetricName::from(s))
    }
}
impl MetricName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            MetricName::AwsAccountActiveDeviceCount => "AwsAccountActiveDeviceCount",
            MetricName::AwsAccountActiveGatewayCount => "AwsAccountActiveGatewayCount",
            MetricName::AwsAccountDeviceCount => "AwsAccountDeviceCount",
            MetricName::AwsAccountDownlinkCount => "AwsAccountDownlinkCount",
            MetricName::AwsAccountGatewayCount => "AwsAccountGatewayCount",
            MetricName::AwsAccountJoinAcceptCount => "AwsAccountJoinAcceptCount",
            MetricName::AwsAccountJoinRequestCount => "AwsAccountJoinRequestCount",
            MetricName::AwsAccountRoamingDownlinkCount => "AwsAccountRoamingDownlinkCount",
            MetricName::AwsAccountRoamingUplinkCount => "AwsAccountRoamingUplinkCount",
            MetricName::AwsAccountUplinkCount => "AwsAccountUplinkCount",
            MetricName::AwsAccountUplinkLostCount => "AwsAccountUplinkLostCount",
            MetricName::AwsAccountUplinkLostRate => "AwsAccountUplinkLostRate",
            MetricName::DeviceDownlinkCount => "DeviceDownlinkCount",
            MetricName::DeviceJoinAcceptCount => "DeviceJoinAcceptCount",
            MetricName::DeviceJoinRequestCount => "DeviceJoinRequestCount",
            MetricName::DeviceRssi => "DeviceRSSI",
            MetricName::DeviceRoamingDownlinkCount => "DeviceRoamingDownlinkCount",
            MetricName::DeviceRoamingRssi => "DeviceRoamingRSSI",
            MetricName::DeviceRoamingSnr => "DeviceRoamingSNR",
            MetricName::DeviceRoamingUplinkCount => "DeviceRoamingUplinkCount",
            MetricName::DeviceSnr => "DeviceSNR",
            MetricName::DeviceUplinkCount => "DeviceUplinkCount",
            MetricName::DeviceUplinkLostCount => "DeviceUplinkLostCount",
            MetricName::DeviceUplinkLostRate => "DeviceUplinkLostRate",
            MetricName::GatewayDownTime => "GatewayDownTime",
            MetricName::GatewayDownlinkCount => "GatewayDownlinkCount",
            MetricName::GatewayJoinAcceptCount => "GatewayJoinAcceptCount",
            MetricName::GatewayJoinRequestCount => "GatewayJoinRequestCount",
            MetricName::GatewayRssi => "GatewayRSSI",
            MetricName::GatewaySnr => "GatewaySNR",
            MetricName::GatewayUpTime => "GatewayUpTime",
            MetricName::GatewayUplinkCount => "GatewayUplinkCount",
            MetricName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AwsAccountActiveDeviceCount",
            "AwsAccountActiveGatewayCount",
            "AwsAccountDeviceCount",
            "AwsAccountDownlinkCount",
            "AwsAccountGatewayCount",
            "AwsAccountJoinAcceptCount",
            "AwsAccountJoinRequestCount",
            "AwsAccountRoamingDownlinkCount",
            "AwsAccountRoamingUplinkCount",
            "AwsAccountUplinkCount",
            "AwsAccountUplinkLostCount",
            "AwsAccountUplinkLostRate",
            "DeviceDownlinkCount",
            "DeviceJoinAcceptCount",
            "DeviceJoinRequestCount",
            "DeviceRSSI",
            "DeviceRoamingDownlinkCount",
            "DeviceRoamingRSSI",
            "DeviceRoamingSNR",
            "DeviceRoamingUplinkCount",
            "DeviceSNR",
            "DeviceUplinkCount",
            "DeviceUplinkLostCount",
            "DeviceUplinkLostRate",
            "GatewayDownTime",
            "GatewayDownlinkCount",
            "GatewayJoinAcceptCount",
            "GatewayJoinRequestCount",
            "GatewayRSSI",
            "GatewaySNR",
            "GatewayUpTime",
            "GatewayUplinkCount",
        ]
    }
}
impl ::std::convert::AsRef<str> for MetricName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl MetricName {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for MetricName {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            MetricName::AwsAccountActiveDeviceCount => write!(f, "AwsAccountActiveDeviceCount"),
            MetricName::AwsAccountActiveGatewayCount => write!(f, "AwsAccountActiveGatewayCount"),
            MetricName::AwsAccountDeviceCount => write!(f, "AwsAccountDeviceCount"),
            MetricName::AwsAccountDownlinkCount => write!(f, "AwsAccountDownlinkCount"),
            MetricName::AwsAccountGatewayCount => write!(f, "AwsAccountGatewayCount"),
            MetricName::AwsAccountJoinAcceptCount => write!(f, "AwsAccountJoinAcceptCount"),
            MetricName::AwsAccountJoinRequestCount => write!(f, "AwsAccountJoinRequestCount"),
            MetricName::AwsAccountRoamingDownlinkCount => write!(f, "AwsAccountRoamingDownlinkCount"),
            MetricName::AwsAccountRoamingUplinkCount => write!(f, "AwsAccountRoamingUplinkCount"),
            MetricName::AwsAccountUplinkCount => write!(f, "AwsAccountUplinkCount"),
            MetricName::AwsAccountUplinkLostCount => write!(f, "AwsAccountUplinkLostCount"),
            MetricName::AwsAccountUplinkLostRate => write!(f, "AwsAccountUplinkLostRate"),
            MetricName::DeviceDownlinkCount => write!(f, "DeviceDownlinkCount"),
            MetricName::DeviceJoinAcceptCount => write!(f, "DeviceJoinAcceptCount"),
            MetricName::DeviceJoinRequestCount => write!(f, "DeviceJoinRequestCount"),
            MetricName::DeviceRssi => write!(f, "DeviceRSSI"),
            MetricName::DeviceRoamingDownlinkCount => write!(f, "DeviceRoamingDownlinkCount"),
            MetricName::DeviceRoamingRssi => write!(f, "DeviceRoamingRSSI"),
            MetricName::DeviceRoamingSnr => write!(f, "DeviceRoamingSNR"),
            MetricName::DeviceRoamingUplinkCount => write!(f, "DeviceRoamingUplinkCount"),
            MetricName::DeviceSnr => write!(f, "DeviceSNR"),
            MetricName::DeviceUplinkCount => write!(f, "DeviceUplinkCount"),
            MetricName::DeviceUplinkLostCount => write!(f, "DeviceUplinkLostCount"),
            MetricName::DeviceUplinkLostRate => write!(f, "DeviceUplinkLostRate"),
            MetricName::GatewayDownTime => write!(f, "GatewayDownTime"),
            MetricName::GatewayDownlinkCount => write!(f, "GatewayDownlinkCount"),
            MetricName::GatewayJoinAcceptCount => write!(f, "GatewayJoinAcceptCount"),
            MetricName::GatewayJoinRequestCount => write!(f, "GatewayJoinRequestCount"),
            MetricName::GatewayRssi => write!(f, "GatewayRSSI"),
            MetricName::GatewaySnr => write!(f, "GatewaySNR"),
            MetricName::GatewayUpTime => write!(f, "GatewayUpTime"),
            MetricName::GatewayUplinkCount => write!(f, "GatewayUplinkCount"),
            MetricName::Unknown(value) => write!(f, "{value}"),
        }
    }
}
