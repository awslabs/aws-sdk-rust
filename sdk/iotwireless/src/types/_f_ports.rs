// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List of FPort assigned for different LoRaWAN application packages to use</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FPorts {
    /// <p>The Fport value.</p>
    pub fuota: ::std::option::Option<i32>,
    /// <p>The Fport value.</p>
    pub multicast: ::std::option::Option<i32>,
    /// <p>The Fport value.</p>
    pub clock_sync: ::std::option::Option<i32>,
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub positioning: ::std::option::Option<crate::types::Positioning>,
    /// <p>Optional LoRaWAN application information, which can be used for geolocation.</p>
    pub applications: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationConfig>>,
}
impl FPorts {
    /// <p>The Fport value.</p>
    pub fn fuota(&self) -> ::std::option::Option<i32> {
        self.fuota
    }
    /// <p>The Fport value.</p>
    pub fn multicast(&self) -> ::std::option::Option<i32> {
        self.multicast
    }
    /// <p>The Fport value.</p>
    pub fn clock_sync(&self) -> ::std::option::Option<i32> {
        self.clock_sync
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn positioning(&self) -> ::std::option::Option<&crate::types::Positioning> {
        self.positioning.as_ref()
    }
    /// <p>Optional LoRaWAN application information, which can be used for geolocation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.applications.is_none()`.
    pub fn applications(&self) -> &[crate::types::ApplicationConfig] {
        self.applications.as_deref().unwrap_or_default()
    }
}
impl FPorts {
    /// Creates a new builder-style object to manufacture [`FPorts`](crate::types::FPorts).
    pub fn builder() -> crate::types::builders::FPortsBuilder {
        crate::types::builders::FPortsBuilder::default()
    }
}

/// A builder for [`FPorts`](crate::types::FPorts).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FPortsBuilder {
    pub(crate) fuota: ::std::option::Option<i32>,
    pub(crate) multicast: ::std::option::Option<i32>,
    pub(crate) clock_sync: ::std::option::Option<i32>,
    pub(crate) positioning: ::std::option::Option<crate::types::Positioning>,
    pub(crate) applications: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationConfig>>,
}
impl FPortsBuilder {
    /// <p>The Fport value.</p>
    pub fn fuota(mut self, input: i32) -> Self {
        self.fuota = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Fport value.</p>
    pub fn set_fuota(mut self, input: ::std::option::Option<i32>) -> Self {
        self.fuota = input;
        self
    }
    /// <p>The Fport value.</p>
    pub fn get_fuota(&self) -> &::std::option::Option<i32> {
        &self.fuota
    }
    /// <p>The Fport value.</p>
    pub fn multicast(mut self, input: i32) -> Self {
        self.multicast = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Fport value.</p>
    pub fn set_multicast(mut self, input: ::std::option::Option<i32>) -> Self {
        self.multicast = input;
        self
    }
    /// <p>The Fport value.</p>
    pub fn get_multicast(&self) -> &::std::option::Option<i32> {
        &self.multicast
    }
    /// <p>The Fport value.</p>
    pub fn clock_sync(mut self, input: i32) -> Self {
        self.clock_sync = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Fport value.</p>
    pub fn set_clock_sync(mut self, input: ::std::option::Option<i32>) -> Self {
        self.clock_sync = input;
        self
    }
    /// <p>The Fport value.</p>
    pub fn get_clock_sync(&self) -> &::std::option::Option<i32> {
        &self.clock_sync
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn positioning(mut self, input: crate::types::Positioning) -> Self {
        self.positioning = ::std::option::Option::Some(input);
        self
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn set_positioning(mut self, input: ::std::option::Option<crate::types::Positioning>) -> Self {
        self.positioning = input;
        self
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn get_positioning(&self) -> &::std::option::Option<crate::types::Positioning> {
        &self.positioning
    }
    /// Appends an item to `applications`.
    ///
    /// To override the contents of this collection use [`set_applications`](Self::set_applications).
    ///
    /// <p>Optional LoRaWAN application information, which can be used for geolocation.</p>
    pub fn applications(mut self, input: crate::types::ApplicationConfig) -> Self {
        let mut v = self.applications.unwrap_or_default();
        v.push(input);
        self.applications = ::std::option::Option::Some(v);
        self
    }
    /// <p>Optional LoRaWAN application information, which can be used for geolocation.</p>
    pub fn set_applications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationConfig>>) -> Self {
        self.applications = input;
        self
    }
    /// <p>Optional LoRaWAN application information, which can be used for geolocation.</p>
    pub fn get_applications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApplicationConfig>> {
        &self.applications
    }
    /// Consumes the builder and constructs a [`FPorts`](crate::types::FPorts).
    pub fn build(self) -> crate::types::FPorts {
        crate::types::FPorts {
            fuota: self.fuota,
            multicast: self.multicast,
            clock_sync: self.clock_sync,
            positioning: self.positioning,
            applications: self.applications,
        }
    }
}
