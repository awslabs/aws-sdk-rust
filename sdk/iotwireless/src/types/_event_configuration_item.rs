// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Event configuration object for a single resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EventConfigurationItem {
    /// <p>Resource identifier opted in for event messaging.</p>
    #[doc(hidden)]
    pub identifier: std::option::Option<std::string::String>,
    /// <p>Identifier type of the particular resource identifier for event configuration.</p>
    #[doc(hidden)]
    pub identifier_type: std::option::Option<crate::types::IdentifierType>,
    /// <p>Partner type of the resource if the identifier type is PartnerAccountId.</p>
    #[doc(hidden)]
    pub partner_type: std::option::Option<crate::types::EventNotificationPartnerType>,
    /// <p>Object of all event configurations and the status of the event topics.</p>
    #[doc(hidden)]
    pub events: std::option::Option<crate::types::EventNotificationItemConfigurations>,
}
impl EventConfigurationItem {
    /// <p>Resource identifier opted in for event messaging.</p>
    pub fn identifier(&self) -> std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>Identifier type of the particular resource identifier for event configuration.</p>
    pub fn identifier_type(&self) -> std::option::Option<&crate::types::IdentifierType> {
        self.identifier_type.as_ref()
    }
    /// <p>Partner type of the resource if the identifier type is PartnerAccountId.</p>
    pub fn partner_type(&self) -> std::option::Option<&crate::types::EventNotificationPartnerType> {
        self.partner_type.as_ref()
    }
    /// <p>Object of all event configurations and the status of the event topics.</p>
    pub fn events(
        &self,
    ) -> std::option::Option<&crate::types::EventNotificationItemConfigurations> {
        self.events.as_ref()
    }
}
impl EventConfigurationItem {
    /// Creates a new builder-style object to manufacture [`EventConfigurationItem`](crate::types::EventConfigurationItem).
    pub fn builder() -> crate::types::builders::EventConfigurationItemBuilder {
        crate::types::builders::EventConfigurationItemBuilder::default()
    }
}

/// A builder for [`EventConfigurationItem`](crate::types::EventConfigurationItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventConfigurationItemBuilder {
    pub(crate) identifier: std::option::Option<std::string::String>,
    pub(crate) identifier_type: std::option::Option<crate::types::IdentifierType>,
    pub(crate) partner_type: std::option::Option<crate::types::EventNotificationPartnerType>,
    pub(crate) events: std::option::Option<crate::types::EventNotificationItemConfigurations>,
}
impl EventConfigurationItemBuilder {
    /// <p>Resource identifier opted in for event messaging.</p>
    pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.identifier = Some(input.into());
        self
    }
    /// <p>Resource identifier opted in for event messaging.</p>
    pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>Identifier type of the particular resource identifier for event configuration.</p>
    pub fn identifier_type(mut self, input: crate::types::IdentifierType) -> Self {
        self.identifier_type = Some(input);
        self
    }
    /// <p>Identifier type of the particular resource identifier for event configuration.</p>
    pub fn set_identifier_type(
        mut self,
        input: std::option::Option<crate::types::IdentifierType>,
    ) -> Self {
        self.identifier_type = input;
        self
    }
    /// <p>Partner type of the resource if the identifier type is PartnerAccountId.</p>
    pub fn partner_type(mut self, input: crate::types::EventNotificationPartnerType) -> Self {
        self.partner_type = Some(input);
        self
    }
    /// <p>Partner type of the resource if the identifier type is PartnerAccountId.</p>
    pub fn set_partner_type(
        mut self,
        input: std::option::Option<crate::types::EventNotificationPartnerType>,
    ) -> Self {
        self.partner_type = input;
        self
    }
    /// <p>Object of all event configurations and the status of the event topics.</p>
    pub fn events(mut self, input: crate::types::EventNotificationItemConfigurations) -> Self {
        self.events = Some(input);
        self
    }
    /// <p>Object of all event configurations and the status of the event topics.</p>
    pub fn set_events(
        mut self,
        input: std::option::Option<crate::types::EventNotificationItemConfigurations>,
    ) -> Self {
        self.events = input;
        self
    }
    /// Consumes the builder and constructs a [`EventConfigurationItem`](crate::types::EventConfigurationItem).
    pub fn build(self) -> crate::types::EventConfigurationItem {
        crate::types::EventConfigurationItem {
            identifier: self.identifier,
            identifier_type: self.identifier_type,
            partner_type: self.partner_type,
            events: self.events,
        }
    }
}
