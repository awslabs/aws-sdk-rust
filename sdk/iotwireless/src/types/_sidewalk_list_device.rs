// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sidewalk object used by list functions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SidewalkListDevice {
    /// <p>The Sidewalk Amazon ID.</p>
    #[doc(hidden)]
    pub amazon_id: std::option::Option<std::string::String>,
    /// <p>The sidewalk device identification.</p>
    #[doc(hidden)]
    pub sidewalk_id: std::option::Option<std::string::String>,
    /// <p>The Sidewalk manufacturing series number.</p>
    #[doc(hidden)]
    pub sidewalk_manufacturing_sn: std::option::Option<std::string::String>,
    /// <p>The sidewalk device certificates for Ed25519 and P256r1.</p>
    #[doc(hidden)]
    pub device_certificates: std::option::Option<std::vec::Vec<crate::types::CertificateList>>,
}
impl SidewalkListDevice {
    /// <p>The Sidewalk Amazon ID.</p>
    pub fn amazon_id(&self) -> std::option::Option<&str> {
        self.amazon_id.as_deref()
    }
    /// <p>The sidewalk device identification.</p>
    pub fn sidewalk_id(&self) -> std::option::Option<&str> {
        self.sidewalk_id.as_deref()
    }
    /// <p>The Sidewalk manufacturing series number.</p>
    pub fn sidewalk_manufacturing_sn(&self) -> std::option::Option<&str> {
        self.sidewalk_manufacturing_sn.as_deref()
    }
    /// <p>The sidewalk device certificates for Ed25519 and P256r1.</p>
    pub fn device_certificates(&self) -> std::option::Option<&[crate::types::CertificateList]> {
        self.device_certificates.as_deref()
    }
}
impl SidewalkListDevice {
    /// Creates a new builder-style object to manufacture [`SidewalkListDevice`](crate::types::SidewalkListDevice).
    pub fn builder() -> crate::types::builders::SidewalkListDeviceBuilder {
        crate::types::builders::SidewalkListDeviceBuilder::default()
    }
}

/// A builder for [`SidewalkListDevice`](crate::types::SidewalkListDevice).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SidewalkListDeviceBuilder {
    pub(crate) amazon_id: std::option::Option<std::string::String>,
    pub(crate) sidewalk_id: std::option::Option<std::string::String>,
    pub(crate) sidewalk_manufacturing_sn: std::option::Option<std::string::String>,
    pub(crate) device_certificates:
        std::option::Option<std::vec::Vec<crate::types::CertificateList>>,
}
impl SidewalkListDeviceBuilder {
    /// <p>The Sidewalk Amazon ID.</p>
    pub fn amazon_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.amazon_id = Some(input.into());
        self
    }
    /// <p>The Sidewalk Amazon ID.</p>
    pub fn set_amazon_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.amazon_id = input;
        self
    }
    /// <p>The sidewalk device identification.</p>
    pub fn sidewalk_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sidewalk_id = Some(input.into());
        self
    }
    /// <p>The sidewalk device identification.</p>
    pub fn set_sidewalk_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sidewalk_id = input;
        self
    }
    /// <p>The Sidewalk manufacturing series number.</p>
    pub fn sidewalk_manufacturing_sn(mut self, input: impl Into<std::string::String>) -> Self {
        self.sidewalk_manufacturing_sn = Some(input.into());
        self
    }
    /// <p>The Sidewalk manufacturing series number.</p>
    pub fn set_sidewalk_manufacturing_sn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sidewalk_manufacturing_sn = input;
        self
    }
    /// Appends an item to `device_certificates`.
    ///
    /// To override the contents of this collection use [`set_device_certificates`](Self::set_device_certificates).
    ///
    /// <p>The sidewalk device certificates for Ed25519 and P256r1.</p>
    pub fn device_certificates(mut self, input: crate::types::CertificateList) -> Self {
        let mut v = self.device_certificates.unwrap_or_default();
        v.push(input);
        self.device_certificates = Some(v);
        self
    }
    /// <p>The sidewalk device certificates for Ed25519 and P256r1.</p>
    pub fn set_device_certificates(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CertificateList>>,
    ) -> Self {
        self.device_certificates = input;
        self
    }
    /// Consumes the builder and constructs a [`SidewalkListDevice`](crate::types::SidewalkListDevice).
    pub fn build(self) -> crate::types::SidewalkListDevice {
        crate::types::SidewalkListDevice {
            amazon_id: self.amazon_id,
            sidewalk_id: self.sidewalk_id,
            sidewalk_manufacturing_sn: self.sidewalk_manufacturing_sn,
            device_certificates: self.device_certificates,
        }
    }
}
