// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The LoRaWAN information that is to be used with the multicast group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoRaWanMulticast {
    /// <p>Supported RfRegions</p>
    pub rf_region: ::std::option::Option<crate::types::SupportedRfRegion>,
    /// <p>DlClass for LoRaWAM, valid values are ClassB and ClassC.</p>
    pub dl_class: ::std::option::Option<crate::types::DlClass>,
    /// <p>Specify the list of gateways to which you want to send the multicast downlink messages. The multicast message will be sent to each gateway in the list, with the transmission interval as the time interval between each message.</p>
    pub participating_gateways: ::std::option::Option<crate::types::ParticipatingGatewaysMulticast>,
}
impl LoRaWanMulticast {
    /// <p>Supported RfRegions</p>
    pub fn rf_region(&self) -> ::std::option::Option<&crate::types::SupportedRfRegion> {
        self.rf_region.as_ref()
    }
    /// <p>DlClass for LoRaWAM, valid values are ClassB and ClassC.</p>
    pub fn dl_class(&self) -> ::std::option::Option<&crate::types::DlClass> {
        self.dl_class.as_ref()
    }
    /// <p>Specify the list of gateways to which you want to send the multicast downlink messages. The multicast message will be sent to each gateway in the list, with the transmission interval as the time interval between each message.</p>
    pub fn participating_gateways(&self) -> ::std::option::Option<&crate::types::ParticipatingGatewaysMulticast> {
        self.participating_gateways.as_ref()
    }
}
impl LoRaWanMulticast {
    /// Creates a new builder-style object to manufacture [`LoRaWanMulticast`](crate::types::LoRaWanMulticast).
    pub fn builder() -> crate::types::builders::LoRaWanMulticastBuilder {
        crate::types::builders::LoRaWanMulticastBuilder::default()
    }
}

/// A builder for [`LoRaWanMulticast`](crate::types::LoRaWanMulticast).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LoRaWanMulticastBuilder {
    pub(crate) rf_region: ::std::option::Option<crate::types::SupportedRfRegion>,
    pub(crate) dl_class: ::std::option::Option<crate::types::DlClass>,
    pub(crate) participating_gateways: ::std::option::Option<crate::types::ParticipatingGatewaysMulticast>,
}
impl LoRaWanMulticastBuilder {
    /// <p>Supported RfRegions</p>
    pub fn rf_region(mut self, input: crate::types::SupportedRfRegion) -> Self {
        self.rf_region = ::std::option::Option::Some(input);
        self
    }
    /// <p>Supported RfRegions</p>
    pub fn set_rf_region(mut self, input: ::std::option::Option<crate::types::SupportedRfRegion>) -> Self {
        self.rf_region = input;
        self
    }
    /// <p>Supported RfRegions</p>
    pub fn get_rf_region(&self) -> &::std::option::Option<crate::types::SupportedRfRegion> {
        &self.rf_region
    }
    /// <p>DlClass for LoRaWAM, valid values are ClassB and ClassC.</p>
    pub fn dl_class(mut self, input: crate::types::DlClass) -> Self {
        self.dl_class = ::std::option::Option::Some(input);
        self
    }
    /// <p>DlClass for LoRaWAM, valid values are ClassB and ClassC.</p>
    pub fn set_dl_class(mut self, input: ::std::option::Option<crate::types::DlClass>) -> Self {
        self.dl_class = input;
        self
    }
    /// <p>DlClass for LoRaWAM, valid values are ClassB and ClassC.</p>
    pub fn get_dl_class(&self) -> &::std::option::Option<crate::types::DlClass> {
        &self.dl_class
    }
    /// <p>Specify the list of gateways to which you want to send the multicast downlink messages. The multicast message will be sent to each gateway in the list, with the transmission interval as the time interval between each message.</p>
    pub fn participating_gateways(mut self, input: crate::types::ParticipatingGatewaysMulticast) -> Self {
        self.participating_gateways = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the list of gateways to which you want to send the multicast downlink messages. The multicast message will be sent to each gateway in the list, with the transmission interval as the time interval between each message.</p>
    pub fn set_participating_gateways(mut self, input: ::std::option::Option<crate::types::ParticipatingGatewaysMulticast>) -> Self {
        self.participating_gateways = input;
        self
    }
    /// <p>Specify the list of gateways to which you want to send the multicast downlink messages. The multicast message will be sent to each gateway in the list, with the transmission interval as the time interval between each message.</p>
    pub fn get_participating_gateways(&self) -> &::std::option::Option<crate::types::ParticipatingGatewaysMulticast> {
        &self.participating_gateways
    }
    /// Consumes the builder and constructs a [`LoRaWanMulticast`](crate::types::LoRaWanMulticast).
    pub fn build(self) -> crate::types::LoRaWanMulticast {
        crate::types::LoRaWanMulticast {
            rf_region: self.rf_region,
            dl_class: self.dl_class,
            participating_gateways: self.participating_gateways,
        }
    }
}
