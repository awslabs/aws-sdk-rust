// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The device attestation key (DAK) information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DakCertificateMetadata {
    /// <p>The certificate ID for the DAK.</p>
    pub certificate_id: ::std::string::String,
    /// <p>The maximum number of signatures that the DAK can sign. A value of <code>-1</code> indicates that there's no device limit.</p>
    pub max_allowed_signature: ::std::option::Option<i32>,
    /// <p>Whether factory support has been enabled.</p>
    pub factory_support: ::std::option::Option<bool>,
    /// <p>The advertised product ID (APID) that's used for pre-production and production applications.</p>
    pub ap_id: ::std::option::Option<::std::string::String>,
    /// <p>The device type ID that's used for prototyping applications.</p>
    pub device_type_id: ::std::option::Option<::std::string::String>,
}
impl DakCertificateMetadata {
    /// <p>The certificate ID for the DAK.</p>
    pub fn certificate_id(&self) -> &str {
        use std::ops::Deref;
        self.certificate_id.deref()
    }
    /// <p>The maximum number of signatures that the DAK can sign. A value of <code>-1</code> indicates that there's no device limit.</p>
    pub fn max_allowed_signature(&self) -> ::std::option::Option<i32> {
        self.max_allowed_signature
    }
    /// <p>Whether factory support has been enabled.</p>
    pub fn factory_support(&self) -> ::std::option::Option<bool> {
        self.factory_support
    }
    /// <p>The advertised product ID (APID) that's used for pre-production and production applications.</p>
    pub fn ap_id(&self) -> ::std::option::Option<&str> {
        self.ap_id.as_deref()
    }
    /// <p>The device type ID that's used for prototyping applications.</p>
    pub fn device_type_id(&self) -> ::std::option::Option<&str> {
        self.device_type_id.as_deref()
    }
}
impl DakCertificateMetadata {
    /// Creates a new builder-style object to manufacture [`DakCertificateMetadata`](crate::types::DakCertificateMetadata).
    pub fn builder() -> crate::types::builders::DakCertificateMetadataBuilder {
        crate::types::builders::DakCertificateMetadataBuilder::default()
    }
}

/// A builder for [`DakCertificateMetadata`](crate::types::DakCertificateMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DakCertificateMetadataBuilder {
    pub(crate) certificate_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_allowed_signature: ::std::option::Option<i32>,
    pub(crate) factory_support: ::std::option::Option<bool>,
    pub(crate) ap_id: ::std::option::Option<::std::string::String>,
    pub(crate) device_type_id: ::std::option::Option<::std::string::String>,
}
impl DakCertificateMetadataBuilder {
    /// <p>The certificate ID for the DAK.</p>
    /// This field is required.
    pub fn certificate_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The certificate ID for the DAK.</p>
    pub fn set_certificate_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_id = input;
        self
    }
    /// <p>The certificate ID for the DAK.</p>
    pub fn get_certificate_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_id
    }
    /// <p>The maximum number of signatures that the DAK can sign. A value of <code>-1</code> indicates that there's no device limit.</p>
    pub fn max_allowed_signature(mut self, input: i32) -> Self {
        self.max_allowed_signature = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of signatures that the DAK can sign. A value of <code>-1</code> indicates that there's no device limit.</p>
    pub fn set_max_allowed_signature(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_allowed_signature = input;
        self
    }
    /// <p>The maximum number of signatures that the DAK can sign. A value of <code>-1</code> indicates that there's no device limit.</p>
    pub fn get_max_allowed_signature(&self) -> &::std::option::Option<i32> {
        &self.max_allowed_signature
    }
    /// <p>Whether factory support has been enabled.</p>
    pub fn factory_support(mut self, input: bool) -> Self {
        self.factory_support = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether factory support has been enabled.</p>
    pub fn set_factory_support(mut self, input: ::std::option::Option<bool>) -> Self {
        self.factory_support = input;
        self
    }
    /// <p>Whether factory support has been enabled.</p>
    pub fn get_factory_support(&self) -> &::std::option::Option<bool> {
        &self.factory_support
    }
    /// <p>The advertised product ID (APID) that's used for pre-production and production applications.</p>
    pub fn ap_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ap_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The advertised product ID (APID) that's used for pre-production and production applications.</p>
    pub fn set_ap_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ap_id = input;
        self
    }
    /// <p>The advertised product ID (APID) that's used for pre-production and production applications.</p>
    pub fn get_ap_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ap_id
    }
    /// <p>The device type ID that's used for prototyping applications.</p>
    pub fn device_type_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_type_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The device type ID that's used for prototyping applications.</p>
    pub fn set_device_type_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_type_id = input;
        self
    }
    /// <p>The device type ID that's used for prototyping applications.</p>
    pub fn get_device_type_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_type_id
    }
    /// Consumes the builder and constructs a [`DakCertificateMetadata`](crate::types::DakCertificateMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`certificate_id`](crate::types::builders::DakCertificateMetadataBuilder::certificate_id)
    pub fn build(self) -> ::std::result::Result<crate::types::DakCertificateMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DakCertificateMetadata {
            certificate_id: self.certificate_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "certificate_id",
                    "certificate_id was not specified but it is required when building DakCertificateMetadata",
                )
            })?,
            max_allowed_signature: self.max_allowed_signature,
            factory_support: self.factory_support,
            ap_id: self.ap_id,
            device_type_id: self.device_type_id,
        })
    }
}
