// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartSingleWirelessDeviceImportTask`](crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`destination_name(impl Into<String>)`](crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder::destination_name) / [`set_destination_name(Option<String>)`](crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder::set_destination_name):<br>required: **true**<br><p>The name of the Sidewalk destination that describes the IoT rule to route messages from the device in the import task that will be onboarded to AWS IoT Wireless.</p><br>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder::set_client_request_token):<br>required: **false**<br><p>Each resource must have a unique client request token. The client token is used to implement idempotency. It ensures that the request completes no more than one time. If you retry a request with the same token and the same parameters, the request will complete successfully. However, if you try to create a new resource using the same token but different parameters, an HTTP 409 conflict occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. For more information about idempotency, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency in Amazon EC2 API requests</a>.</p><br>
    ///   - [`device_name(impl Into<String>)`](crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder::device_name) / [`set_device_name(Option<String>)`](crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder::set_device_name):<br>required: **false**<br><p>The name of the wireless device for which an import task is being started.</p><br>
    ///   - [`tags(Tag)`](crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder::set_tags):<br>required: **false**<br><p>The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.</p><br>
    ///   - [`sidewalk(SidewalkSingleStartImportInfo)`](crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder::sidewalk) / [`set_sidewalk(Option<SidewalkSingleStartImportInfo>)`](crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder::set_sidewalk):<br>required: **true**<br><p>The Sidewalk-related parameters for importing a single wireless device.</p><br>
    /// - On success, responds with [`StartSingleWirelessDeviceImportTaskOutput`](crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskOutput::id): <p>The import task ID.</p>
    ///   - [`arn(Option<String>)`](crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskOutput::arn): <p>The ARN (Amazon Resource Name) of the import task.</p>
    /// - On failure, responds with [`SdkError<StartSingleWirelessDeviceImportTaskError>`](crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError)
    pub fn start_single_wireless_device_import_task(
        &self,
    ) -> crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder {
        crate::operation::start_single_wireless_device_import_task::builders::StartSingleWirelessDeviceImportTaskFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
