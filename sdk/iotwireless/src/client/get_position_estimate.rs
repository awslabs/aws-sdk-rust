// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetPositionEstimate`](crate::client::fluent_builders::GetPositionEstimate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`wi_fi_access_points(Vec<WiFiAccessPoint>)`](crate::client::fluent_builders::GetPositionEstimate::wi_fi_access_points) / [`set_wi_fi_access_points(Option<Vec<WiFiAccessPoint>>)`](crate::client::fluent_builders::GetPositionEstimate::set_wi_fi_access_points): <p>Retrieves an estimated device position by resolving WLAN measurement data. The position is resolved using HERE's Wi-Fi based solver.</p>
    ///   - [`cell_towers(CellTowers)`](crate::client::fluent_builders::GetPositionEstimate::cell_towers) / [`set_cell_towers(Option<CellTowers>)`](crate::client::fluent_builders::GetPositionEstimate::set_cell_towers): <p>Retrieves an estimated device position by resolving measurement data from cellular radio towers. The position is resolved using HERE's cellular-based solver.</p>
    ///   - [`ip(Ip)`](crate::client::fluent_builders::GetPositionEstimate::ip) / [`set_ip(Option<Ip>)`](crate::client::fluent_builders::GetPositionEstimate::set_ip): <p>Retrieves an estimated device position by resolving the IP address information from the device. The position is resolved using MaxMind's IP-based solver.</p>
    ///   - [`gnss(Gnss)`](crate::client::fluent_builders::GetPositionEstimate::gnss) / [`set_gnss(Option<Gnss>)`](crate::client::fluent_builders::GetPositionEstimate::set_gnss): <p>Retrieves an estimated device position by resolving the global navigation satellite system (GNSS) scan data. The position is resolved using the GNSS solver powered by LoRa Cloud.</p>
    ///   - [`timestamp(DateTime)`](crate::client::fluent_builders::GetPositionEstimate::timestamp) / [`set_timestamp(Option<DateTime>)`](crate::client::fluent_builders::GetPositionEstimate::set_timestamp): <p>Optional information that specifies the time when the position information will be resolved. It uses the UNIX timestamp format. If not specified, the time at which the request was received will be used.</p>
    /// - On success, responds with [`GetPositionEstimateOutput`](crate::output::GetPositionEstimateOutput) with field(s):
    ///   - [`geo_json_payload(Option<Blob>)`](crate::output::GetPositionEstimateOutput::geo_json_payload): <p>The position information of the resource, displayed as a JSON payload. The payload uses the GeoJSON format, which a format that's used to encode geographic data structures. For more information, see <a href="https://geojson.org/">GeoJSON</a>.</p>
    /// - On failure, responds with [`SdkError<GetPositionEstimateError>`](crate::error::GetPositionEstimateError)
    pub fn get_position_estimate(&self) -> crate::client::fluent_builders::GetPositionEstimate {
        crate::client::fluent_builders::GetPositionEstimate::new(self.handle.clone())
    }
}
