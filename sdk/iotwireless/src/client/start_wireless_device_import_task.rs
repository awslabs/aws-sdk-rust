// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartWirelessDeviceImportTask`](crate::operation::start_wireless_device_import_task::builders::StartWirelessDeviceImportTaskFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`destination_name(impl Into<String>)`](crate::operation::start_wireless_device_import_task::builders::StartWirelessDeviceImportTaskFluentBuilder::destination_name) / [`set_destination_name(Option<String>)`](crate::operation::start_wireless_device_import_task::builders::StartWirelessDeviceImportTaskFluentBuilder::set_destination_name):<br>required: **true**<br><p>The name of the Sidewalk destination that describes the IoT rule to route messages from the devices in the import task that are onboarded to AWS IoT Wireless.</p><br>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::start_wireless_device_import_task::builders::StartWirelessDeviceImportTaskFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::start_wireless_device_import_task::builders::StartWirelessDeviceImportTaskFluentBuilder::set_client_request_token):<br>required: **false**<br><p>Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.</p><br>
    ///   - [`tags(Tag)`](crate::operation::start_wireless_device_import_task::builders::StartWirelessDeviceImportTaskFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::start_wireless_device_import_task::builders::StartWirelessDeviceImportTaskFluentBuilder::set_tags):<br>required: **false**<br><p>The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.</p><br>
    ///   - [`sidewalk(SidewalkStartImportInfo)`](crate::operation::start_wireless_device_import_task::builders::StartWirelessDeviceImportTaskFluentBuilder::sidewalk) / [`set_sidewalk(Option<SidewalkStartImportInfo>)`](crate::operation::start_wireless_device_import_task::builders::StartWirelessDeviceImportTaskFluentBuilder::set_sidewalk):<br>required: **true**<br><p>The Sidewalk-related parameters for importing wireless devices that need to be provisioned in bulk.</p><br>
    /// - On success, responds with [`StartWirelessDeviceImportTaskOutput`](crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskOutput::id): <p>The import task ID.</p>
    ///   - [`arn(Option<String>)`](crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskOutput::arn): <p>The ARN (Amazon Resource Name) of the import task.</p>
    /// - On failure, responds with [`SdkError<StartWirelessDeviceImportTaskError>`](crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError)
    pub fn start_wireless_device_import_task(
        &self,
    ) -> crate::operation::start_wireless_device_import_task::builders::StartWirelessDeviceImportTaskFluentBuilder {
        crate::operation::start_wireless_device_import_task::builders::StartWirelessDeviceImportTaskFluentBuilder::new(self.handle.clone())
    }
}
