// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateWirelessGatewayTaskDefinition`](crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`auto_create_tasks(bool)`](crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder::auto_create_tasks) / [`set_auto_create_tasks(Option<bool>)`](crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder::set_auto_create_tasks):<br>required: **true**<br><p>Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder::set_name):<br>required: **false**<br><p>The name of the new resource.</p><br>
    ///   - [`update(UpdateWirelessGatewayTaskCreate)`](crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder::update) / [`set_update(Option<UpdateWirelessGatewayTaskCreate>)`](crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder::set_update):<br>required: **false**<br><p>Information about the gateways to update.</p><br>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder::set_client_request_token):<br>required: **false**<br><p>Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. </p><br>
    ///   - [`tags(Tag)`](crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder::set_tags):<br>required: **false**<br><p>The tags to attach to the specified resource. Tags are metadata that you can use to manage a resource.</p><br>
    /// - On success, responds with [`CreateWirelessGatewayTaskDefinitionOutput`](crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionOutput::id): <p>The ID of the new wireless gateway task definition.</p>
    ///   - [`arn(Option<String>)`](crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionOutput::arn): <p>The Amazon Resource Name of the resource.</p>
    /// - On failure, responds with [`SdkError<CreateWirelessGatewayTaskDefinitionError>`](crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError)
    pub fn create_wireless_gateway_task_definition(
        &self,
    ) -> crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder {
        crate::operation::create_wireless_gateway_task_definition::builders::CreateWirelessGatewayTaskDefinitionFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
