// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeregisterWirelessDevice`](crate::operation::deregister_wireless_device::builders::DeregisterWirelessDeviceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::operation::deregister_wireless_device::builders::DeregisterWirelessDeviceFluentBuilder::identifier) / [`set_identifier(Option<String>)`](crate::operation::deregister_wireless_device::builders::DeregisterWirelessDeviceFluentBuilder::set_identifier):<br>required: **true**<br><p>The identifier of the wireless device to deregister from AWS IoT Wireless.</p><br>
    ///   - [`wireless_device_type(WirelessDeviceType)`](crate::operation::deregister_wireless_device::builders::DeregisterWirelessDeviceFluentBuilder::wireless_device_type) / [`set_wireless_device_type(Option<WirelessDeviceType>)`](crate::operation::deregister_wireless_device::builders::DeregisterWirelessDeviceFluentBuilder::set_wireless_device_type):<br>required: **false**<br><p>The type of wireless device to deregister from AWS IoT Wireless, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.</p><br>
    /// - On success, responds with [`DeregisterWirelessDeviceOutput`](crate::operation::deregister_wireless_device::DeregisterWirelessDeviceOutput)
    /// - On failure, responds with [`SdkError<DeregisterWirelessDeviceError>`](crate::operation::deregister_wireless_device::DeregisterWirelessDeviceError)
    pub fn deregister_wireless_device(&self) -> crate::operation::deregister_wireless_device::builders::DeregisterWirelessDeviceFluentBuilder {
        crate::operation::deregister_wireless_device::builders::DeregisterWirelessDeviceFluentBuilder::new(self.handle.clone())
    }
}
