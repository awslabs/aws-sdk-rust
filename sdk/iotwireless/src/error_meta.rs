// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>User does not have permission to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Adding, updating, or deleting the resource can cause an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An unexpected error occurred while processing a request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>Resource does not exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request was denied because it exceeded the allowed API request rate.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The request was denied because the resource can't have any more tags.</p>
    TooManyTagsException(crate::types::error::TooManyTagsException),
    /// <p>The input did not meet the specified constraints.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_aws_account_with_partner_account::AssociateAwsAccountWithPartnerAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_aws_account_with_partner_account::AssociateAwsAccountWithPartnerAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_aws_account_with_partner_account::AssociateAwsAccountWithPartnerAccountError> for Error {
    fn from(err: crate::operation::associate_aws_account_with_partner_account::AssociateAwsAccountWithPartnerAccountError) -> Self {
        match err {
            crate::operation::associate_aws_account_with_partner_account::AssociateAwsAccountWithPartnerAccountError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::associate_aws_account_with_partner_account::AssociateAwsAccountWithPartnerAccountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::associate_aws_account_with_partner_account::AssociateAwsAccountWithPartnerAccountError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::associate_aws_account_with_partner_account::AssociateAwsAccountWithPartnerAccountError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_aws_account_with_partner_account::AssociateAwsAccountWithPartnerAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_aws_account_with_partner_account::AssociateAwsAccountWithPartnerAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_aws_account_with_partner_account::AssociateAwsAccountWithPartnerAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_multicast_group_with_fuota_task::AssociateMulticastGroupWithFuotaTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_multicast_group_with_fuota_task::AssociateMulticastGroupWithFuotaTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_multicast_group_with_fuota_task::AssociateMulticastGroupWithFuotaTaskError> for Error {
    fn from(err: crate::operation::associate_multicast_group_with_fuota_task::AssociateMulticastGroupWithFuotaTaskError) -> Self {
        match err {
            crate::operation::associate_multicast_group_with_fuota_task::AssociateMulticastGroupWithFuotaTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_multicast_group_with_fuota_task::AssociateMulticastGroupWithFuotaTaskError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::associate_multicast_group_with_fuota_task::AssociateMulticastGroupWithFuotaTaskError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::associate_multicast_group_with_fuota_task::AssociateMulticastGroupWithFuotaTaskError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_multicast_group_with_fuota_task::AssociateMulticastGroupWithFuotaTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_multicast_group_with_fuota_task::AssociateMulticastGroupWithFuotaTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_multicast_group_with_fuota_task::AssociateMulticastGroupWithFuotaTaskError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_wireless_device_with_fuota_task::AssociateWirelessDeviceWithFuotaTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_wireless_device_with_fuota_task::AssociateWirelessDeviceWithFuotaTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_wireless_device_with_fuota_task::AssociateWirelessDeviceWithFuotaTaskError> for Error {
    fn from(err: crate::operation::associate_wireless_device_with_fuota_task::AssociateWirelessDeviceWithFuotaTaskError) -> Self {
        match err {
            crate::operation::associate_wireless_device_with_fuota_task::AssociateWirelessDeviceWithFuotaTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_wireless_device_with_fuota_task::AssociateWirelessDeviceWithFuotaTaskError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::associate_wireless_device_with_fuota_task::AssociateWirelessDeviceWithFuotaTaskError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::associate_wireless_device_with_fuota_task::AssociateWirelessDeviceWithFuotaTaskError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_wireless_device_with_fuota_task::AssociateWirelessDeviceWithFuotaTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_wireless_device_with_fuota_task::AssociateWirelessDeviceWithFuotaTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_wireless_device_with_fuota_task::AssociateWirelessDeviceWithFuotaTaskError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupError> for Error {
    fn from(err: crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupError) -> Self {
        match err {
            crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_wireless_device_with_thing::AssociateWirelessDeviceWithThingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_wireless_device_with_thing::AssociateWirelessDeviceWithThingError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_wireless_device_with_thing::AssociateWirelessDeviceWithThingError> for Error {
    fn from(err: crate::operation::associate_wireless_device_with_thing::AssociateWirelessDeviceWithThingError) -> Self {
        match err {
            crate::operation::associate_wireless_device_with_thing::AssociateWirelessDeviceWithThingError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_wireless_device_with_thing::AssociateWirelessDeviceWithThingError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::associate_wireless_device_with_thing::AssociateWirelessDeviceWithThingError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::associate_wireless_device_with_thing::AssociateWirelessDeviceWithThingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_wireless_device_with_thing::AssociateWirelessDeviceWithThingError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_wireless_device_with_thing::AssociateWirelessDeviceWithThingError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_wireless_device_with_thing::AssociateWirelessDeviceWithThingError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateError> for Error {
    fn from(err: crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateError) -> Self {
        match err {
            crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_wireless_gateway_with_thing::AssociateWirelessGatewayWithThingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_wireless_gateway_with_thing::AssociateWirelessGatewayWithThingError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_wireless_gateway_with_thing::AssociateWirelessGatewayWithThingError> for Error {
    fn from(err: crate::operation::associate_wireless_gateway_with_thing::AssociateWirelessGatewayWithThingError) -> Self {
        match err {
            crate::operation::associate_wireless_gateway_with_thing::AssociateWirelessGatewayWithThingError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_wireless_gateway_with_thing::AssociateWirelessGatewayWithThingError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::associate_wireless_gateway_with_thing::AssociateWirelessGatewayWithThingError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::associate_wireless_gateway_with_thing::AssociateWirelessGatewayWithThingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_wireless_gateway_with_thing::AssociateWirelessGatewayWithThingError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_wireless_gateway_with_thing::AssociateWirelessGatewayWithThingError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_wireless_gateway_with_thing::AssociateWirelessGatewayWithThingError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_multicast_group_session::CancelMulticastGroupSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::cancel_multicast_group_session::CancelMulticastGroupSessionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_multicast_group_session::CancelMulticastGroupSessionError> for Error {
    fn from(err: crate::operation::cancel_multicast_group_session::CancelMulticastGroupSessionError) -> Self {
        match err {
            crate::operation::cancel_multicast_group_session::CancelMulticastGroupSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::cancel_multicast_group_session::CancelMulticastGroupSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::cancel_multicast_group_session::CancelMulticastGroupSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::cancel_multicast_group_session::CancelMulticastGroupSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::cancel_multicast_group_session::CancelMulticastGroupSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::cancel_multicast_group_session::CancelMulticastGroupSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::cancel_multicast_group_session::CancelMulticastGroupSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_destination::CreateDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_destination::CreateDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_destination::CreateDestinationError> for Error {
    fn from(err: crate::operation::create_destination::CreateDestinationError) -> Self {
        match err {
            crate::operation::create_destination::CreateDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_destination::CreateDestinationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_destination::CreateDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_destination::CreateDestinationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_destination::CreateDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_destination::CreateDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_destination::CreateDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_device_profile::CreateDeviceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_device_profile::CreateDeviceProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_device_profile::CreateDeviceProfileError> for Error {
    fn from(err: crate::operation::create_device_profile::CreateDeviceProfileError) -> Self {
        match err {
            crate::operation::create_device_profile::CreateDeviceProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_device_profile::CreateDeviceProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_device_profile::CreateDeviceProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_device_profile::CreateDeviceProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_device_profile::CreateDeviceProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_device_profile::CreateDeviceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_fuota_task::CreateFuotaTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_fuota_task::CreateFuotaTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_fuota_task::CreateFuotaTaskError> for Error {
    fn from(err: crate::operation::create_fuota_task::CreateFuotaTaskError) -> Self {
        match err {
            crate::operation::create_fuota_task::CreateFuotaTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_fuota_task::CreateFuotaTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_fuota_task::CreateFuotaTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_fuota_task::CreateFuotaTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_fuota_task::CreateFuotaTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_fuota_task::CreateFuotaTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_fuota_task::CreateFuotaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_multicast_group::CreateMulticastGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_multicast_group::CreateMulticastGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_multicast_group::CreateMulticastGroupError> for Error {
    fn from(err: crate::operation::create_multicast_group::CreateMulticastGroupError) -> Self {
        match err {
            crate::operation::create_multicast_group::CreateMulticastGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_multicast_group::CreateMulticastGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_multicast_group::CreateMulticastGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_multicast_group::CreateMulticastGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_multicast_group::CreateMulticastGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_multicast_group::CreateMulticastGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_multicast_group::CreateMulticastGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_network_analyzer_configuration::CreateNetworkAnalyzerConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_network_analyzer_configuration::CreateNetworkAnalyzerConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_network_analyzer_configuration::CreateNetworkAnalyzerConfigurationError> for Error {
    fn from(err: crate::operation::create_network_analyzer_configuration::CreateNetworkAnalyzerConfigurationError) -> Self {
        match err {
            crate::operation::create_network_analyzer_configuration::CreateNetworkAnalyzerConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_network_analyzer_configuration::CreateNetworkAnalyzerConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_network_analyzer_configuration::CreateNetworkAnalyzerConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_network_analyzer_configuration::CreateNetworkAnalyzerConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_network_analyzer_configuration::CreateNetworkAnalyzerConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_network_analyzer_configuration::CreateNetworkAnalyzerConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_network_analyzer_configuration::CreateNetworkAnalyzerConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_service_profile::CreateServiceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_service_profile::CreateServiceProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_service_profile::CreateServiceProfileError> for Error {
    fn from(err: crate::operation::create_service_profile::CreateServiceProfileError) -> Self {
        match err {
            crate::operation::create_service_profile::CreateServiceProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_service_profile::CreateServiceProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_service_profile::CreateServiceProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_service_profile::CreateServiceProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_service_profile::CreateServiceProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_service_profile::CreateServiceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_wireless_device::CreateWirelessDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_wireless_device::CreateWirelessDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_wireless_device::CreateWirelessDeviceError> for Error {
    fn from(err: crate::operation::create_wireless_device::CreateWirelessDeviceError) -> Self {
        match err {
            crate::operation::create_wireless_device::CreateWirelessDeviceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_wireless_device::CreateWirelessDeviceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_wireless_device::CreateWirelessDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_wireless_device::CreateWirelessDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_wireless_device::CreateWirelessDeviceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_wireless_device::CreateWirelessDeviceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_wireless_device::CreateWirelessDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_wireless_gateway::CreateWirelessGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_wireless_gateway::CreateWirelessGatewayError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_wireless_gateway::CreateWirelessGatewayError> for Error {
    fn from(err: crate::operation::create_wireless_gateway::CreateWirelessGatewayError) -> Self {
        match err {
            crate::operation::create_wireless_gateway::CreateWirelessGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_wireless_gateway::CreateWirelessGatewayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_wireless_gateway::CreateWirelessGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_wireless_gateway::CreateWirelessGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_wireless_gateway::CreateWirelessGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_wireless_gateway::CreateWirelessGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_wireless_gateway_task::CreateWirelessGatewayTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_wireless_gateway_task::CreateWirelessGatewayTaskError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_wireless_gateway_task::CreateWirelessGatewayTaskError> for Error {
    fn from(err: crate::operation::create_wireless_gateway_task::CreateWirelessGatewayTaskError) -> Self {
        match err {
            crate::operation::create_wireless_gateway_task::CreateWirelessGatewayTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_wireless_gateway_task::CreateWirelessGatewayTaskError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_wireless_gateway_task::CreateWirelessGatewayTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_wireless_gateway_task::CreateWirelessGatewayTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_wireless_gateway_task::CreateWirelessGatewayTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_wireless_gateway_task::CreateWirelessGatewayTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_wireless_gateway_task::CreateWirelessGatewayTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError> for Error {
    fn from(err: crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError) -> Self {
        match err {
            crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_wireless_gateway_task_definition::CreateWirelessGatewayTaskDefinitionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_destination::DeleteDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_destination::DeleteDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_destination::DeleteDestinationError> for Error {
    fn from(err: crate::operation::delete_destination::DeleteDestinationError) -> Self {
        match err {
            crate::operation::delete_destination::DeleteDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_destination::DeleteDestinationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_destination::DeleteDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_destination::DeleteDestinationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_destination::DeleteDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_destination::DeleteDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_destination::DeleteDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_device_profile::DeleteDeviceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_device_profile::DeleteDeviceProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_device_profile::DeleteDeviceProfileError> for Error {
    fn from(err: crate::operation::delete_device_profile::DeleteDeviceProfileError) -> Self {
        match err {
            crate::operation::delete_device_profile::DeleteDeviceProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_device_profile::DeleteDeviceProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_device_profile::DeleteDeviceProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_device_profile::DeleteDeviceProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_device_profile::DeleteDeviceProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_device_profile::DeleteDeviceProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_device_profile::DeleteDeviceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_fuota_task::DeleteFuotaTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_fuota_task::DeleteFuotaTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_fuota_task::DeleteFuotaTaskError> for Error {
    fn from(err: crate::operation::delete_fuota_task::DeleteFuotaTaskError) -> Self {
        match err {
            crate::operation::delete_fuota_task::DeleteFuotaTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_fuota_task::DeleteFuotaTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_fuota_task::DeleteFuotaTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_fuota_task::DeleteFuotaTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_fuota_task::DeleteFuotaTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_fuota_task::DeleteFuotaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_multicast_group::DeleteMulticastGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_multicast_group::DeleteMulticastGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_multicast_group::DeleteMulticastGroupError> for Error {
    fn from(err: crate::operation::delete_multicast_group::DeleteMulticastGroupError) -> Self {
        match err {
            crate::operation::delete_multicast_group::DeleteMulticastGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_multicast_group::DeleteMulticastGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_multicast_group::DeleteMulticastGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_multicast_group::DeleteMulticastGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_multicast_group::DeleteMulticastGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_multicast_group::DeleteMulticastGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_multicast_group::DeleteMulticastGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_network_analyzer_configuration::DeleteNetworkAnalyzerConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_network_analyzer_configuration::DeleteNetworkAnalyzerConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_network_analyzer_configuration::DeleteNetworkAnalyzerConfigurationError> for Error {
    fn from(err: crate::operation::delete_network_analyzer_configuration::DeleteNetworkAnalyzerConfigurationError) -> Self {
        match err {
            crate::operation::delete_network_analyzer_configuration::DeleteNetworkAnalyzerConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_network_analyzer_configuration::DeleteNetworkAnalyzerConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_network_analyzer_configuration::DeleteNetworkAnalyzerConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_network_analyzer_configuration::DeleteNetworkAnalyzerConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_network_analyzer_configuration::DeleteNetworkAnalyzerConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_network_analyzer_configuration::DeleteNetworkAnalyzerConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_network_analyzer_configuration::DeleteNetworkAnalyzerConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_queued_messages::DeleteQueuedMessagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_queued_messages::DeleteQueuedMessagesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_queued_messages::DeleteQueuedMessagesError> for Error {
    fn from(err: crate::operation::delete_queued_messages::DeleteQueuedMessagesError) -> Self {
        match err {
            crate::operation::delete_queued_messages::DeleteQueuedMessagesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_queued_messages::DeleteQueuedMessagesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_queued_messages::DeleteQueuedMessagesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_queued_messages::DeleteQueuedMessagesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_queued_messages::DeleteQueuedMessagesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_queued_messages::DeleteQueuedMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_service_profile::DeleteServiceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_service_profile::DeleteServiceProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_service_profile::DeleteServiceProfileError> for Error {
    fn from(err: crate::operation::delete_service_profile::DeleteServiceProfileError) -> Self {
        match err {
            crate::operation::delete_service_profile::DeleteServiceProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_service_profile::DeleteServiceProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_service_profile::DeleteServiceProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_service_profile::DeleteServiceProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_service_profile::DeleteServiceProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_service_profile::DeleteServiceProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_service_profile::DeleteServiceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_wireless_device::DeleteWirelessDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_wireless_device::DeleteWirelessDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_wireless_device::DeleteWirelessDeviceError> for Error {
    fn from(err: crate::operation::delete_wireless_device::DeleteWirelessDeviceError) -> Self {
        match err {
            crate::operation::delete_wireless_device::DeleteWirelessDeviceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_wireless_device::DeleteWirelessDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_wireless_device::DeleteWirelessDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_wireless_device::DeleteWirelessDeviceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_wireless_device::DeleteWirelessDeviceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_wireless_device::DeleteWirelessDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_wireless_device_import_task::DeleteWirelessDeviceImportTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_wireless_device_import_task::DeleteWirelessDeviceImportTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_wireless_device_import_task::DeleteWirelessDeviceImportTaskError> for Error {
    fn from(err: crate::operation::delete_wireless_device_import_task::DeleteWirelessDeviceImportTaskError) -> Self {
        match err {
            crate::operation::delete_wireless_device_import_task::DeleteWirelessDeviceImportTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_wireless_device_import_task::DeleteWirelessDeviceImportTaskError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_wireless_device_import_task::DeleteWirelessDeviceImportTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_wireless_device_import_task::DeleteWirelessDeviceImportTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_wireless_device_import_task::DeleteWirelessDeviceImportTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_wireless_device_import_task::DeleteWirelessDeviceImportTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_wireless_device_import_task::DeleteWirelessDeviceImportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_wireless_gateway::DeleteWirelessGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_wireless_gateway::DeleteWirelessGatewayError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_wireless_gateway::DeleteWirelessGatewayError> for Error {
    fn from(err: crate::operation::delete_wireless_gateway::DeleteWirelessGatewayError) -> Self {
        match err {
            crate::operation::delete_wireless_gateway::DeleteWirelessGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_wireless_gateway::DeleteWirelessGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_wireless_gateway::DeleteWirelessGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_wireless_gateway::DeleteWirelessGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_wireless_gateway::DeleteWirelessGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_wireless_gateway::DeleteWirelessGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_wireless_gateway_task::DeleteWirelessGatewayTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_wireless_gateway_task::DeleteWirelessGatewayTaskError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_wireless_gateway_task::DeleteWirelessGatewayTaskError> for Error {
    fn from(err: crate::operation::delete_wireless_gateway_task::DeleteWirelessGatewayTaskError) -> Self {
        match err {
            crate::operation::delete_wireless_gateway_task::DeleteWirelessGatewayTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_wireless_gateway_task::DeleteWirelessGatewayTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_wireless_gateway_task::DeleteWirelessGatewayTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_wireless_gateway_task::DeleteWirelessGatewayTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_wireless_gateway_task::DeleteWirelessGatewayTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_wireless_gateway_task::DeleteWirelessGatewayTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_wireless_gateway_task_definition::DeleteWirelessGatewayTaskDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_wireless_gateway_task_definition::DeleteWirelessGatewayTaskDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_wireless_gateway_task_definition::DeleteWirelessGatewayTaskDefinitionError> for Error {
    fn from(err: crate::operation::delete_wireless_gateway_task_definition::DeleteWirelessGatewayTaskDefinitionError) -> Self {
        match err {
            crate::operation::delete_wireless_gateway_task_definition::DeleteWirelessGatewayTaskDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_wireless_gateway_task_definition::DeleteWirelessGatewayTaskDefinitionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_wireless_gateway_task_definition::DeleteWirelessGatewayTaskDefinitionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_wireless_gateway_task_definition::DeleteWirelessGatewayTaskDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_wireless_gateway_task_definition::DeleteWirelessGatewayTaskDefinitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_wireless_gateway_task_definition::DeleteWirelessGatewayTaskDefinitionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deregister_wireless_device::DeregisterWirelessDeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deregister_wireless_device::DeregisterWirelessDeviceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deregister_wireless_device::DeregisterWirelessDeviceError> for Error {
    fn from(err: crate::operation::deregister_wireless_device::DeregisterWirelessDeviceError) -> Self {
        match err {
            crate::operation::deregister_wireless_device::DeregisterWirelessDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::deregister_wireless_device::DeregisterWirelessDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::deregister_wireless_device::DeregisterWirelessDeviceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::deregister_wireless_device::DeregisterWirelessDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::deregister_wireless_device::DeregisterWirelessDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_aws_account_from_partner_account::DisassociateAwsAccountFromPartnerAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_aws_account_from_partner_account::DisassociateAwsAccountFromPartnerAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_aws_account_from_partner_account::DisassociateAwsAccountFromPartnerAccountError> for Error {
    fn from(err: crate::operation::disassociate_aws_account_from_partner_account::DisassociateAwsAccountFromPartnerAccountError) -> Self {
        match err {
            crate::operation::disassociate_aws_account_from_partner_account::DisassociateAwsAccountFromPartnerAccountError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_aws_account_from_partner_account::DisassociateAwsAccountFromPartnerAccountError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_aws_account_from_partner_account::DisassociateAwsAccountFromPartnerAccountError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_aws_account_from_partner_account::DisassociateAwsAccountFromPartnerAccountError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_aws_account_from_partner_account::DisassociateAwsAccountFromPartnerAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_multicast_group_from_fuota_task::DisassociateMulticastGroupFromFuotaTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_multicast_group_from_fuota_task::DisassociateMulticastGroupFromFuotaTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_multicast_group_from_fuota_task::DisassociateMulticastGroupFromFuotaTaskError> for Error {
    fn from(err: crate::operation::disassociate_multicast_group_from_fuota_task::DisassociateMulticastGroupFromFuotaTaskError) -> Self {
        match err {
            crate::operation::disassociate_multicast_group_from_fuota_task::DisassociateMulticastGroupFromFuotaTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_multicast_group_from_fuota_task::DisassociateMulticastGroupFromFuotaTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_multicast_group_from_fuota_task::DisassociateMulticastGroupFromFuotaTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_multicast_group_from_fuota_task::DisassociateMulticastGroupFromFuotaTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_multicast_group_from_fuota_task::DisassociateMulticastGroupFromFuotaTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_multicast_group_from_fuota_task::DisassociateMulticastGroupFromFuotaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_wireless_device_from_fuota_task::DisassociateWirelessDeviceFromFuotaTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_wireless_device_from_fuota_task::DisassociateWirelessDeviceFromFuotaTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_wireless_device_from_fuota_task::DisassociateWirelessDeviceFromFuotaTaskError> for Error {
    fn from(err: crate::operation::disassociate_wireless_device_from_fuota_task::DisassociateWirelessDeviceFromFuotaTaskError) -> Self {
        match err {
            crate::operation::disassociate_wireless_device_from_fuota_task::DisassociateWirelessDeviceFromFuotaTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_wireless_device_from_fuota_task::DisassociateWirelessDeviceFromFuotaTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_wireless_device_from_fuota_task::DisassociateWirelessDeviceFromFuotaTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_wireless_device_from_fuota_task::DisassociateWirelessDeviceFromFuotaTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_wireless_device_from_fuota_task::DisassociateWirelessDeviceFromFuotaTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_wireless_device_from_fuota_task::DisassociateWirelessDeviceFromFuotaTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_wireless_device_from_fuota_task::DisassociateWirelessDeviceFromFuotaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_wireless_device_from_multicast_group::DisassociateWirelessDeviceFromMulticastGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_wireless_device_from_multicast_group::DisassociateWirelessDeviceFromMulticastGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_wireless_device_from_multicast_group::DisassociateWirelessDeviceFromMulticastGroupError> for Error {
    fn from(err: crate::operation::disassociate_wireless_device_from_multicast_group::DisassociateWirelessDeviceFromMulticastGroupError) -> Self {
        match err {
            crate::operation::disassociate_wireless_device_from_multicast_group::DisassociateWirelessDeviceFromMulticastGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_wireless_device_from_multicast_group::DisassociateWirelessDeviceFromMulticastGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_wireless_device_from_multicast_group::DisassociateWirelessDeviceFromMulticastGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_wireless_device_from_multicast_group::DisassociateWirelessDeviceFromMulticastGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_wireless_device_from_multicast_group::DisassociateWirelessDeviceFromMulticastGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_wireless_device_from_multicast_group::DisassociateWirelessDeviceFromMulticastGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_wireless_device_from_thing::DisassociateWirelessDeviceFromThingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_wireless_device_from_thing::DisassociateWirelessDeviceFromThingError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_wireless_device_from_thing::DisassociateWirelessDeviceFromThingError> for Error {
    fn from(err: crate::operation::disassociate_wireless_device_from_thing::DisassociateWirelessDeviceFromThingError) -> Self {
        match err {
            crate::operation::disassociate_wireless_device_from_thing::DisassociateWirelessDeviceFromThingError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_wireless_device_from_thing::DisassociateWirelessDeviceFromThingError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disassociate_wireless_device_from_thing::DisassociateWirelessDeviceFromThingError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_wireless_device_from_thing::DisassociateWirelessDeviceFromThingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_wireless_device_from_thing::DisassociateWirelessDeviceFromThingError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_wireless_device_from_thing::DisassociateWirelessDeviceFromThingError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_wireless_device_from_thing::DisassociateWirelessDeviceFromThingError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_wireless_gateway_from_certificate::DisassociateWirelessGatewayFromCertificateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_wireless_gateway_from_certificate::DisassociateWirelessGatewayFromCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_wireless_gateway_from_certificate::DisassociateWirelessGatewayFromCertificateError> for Error {
    fn from(err: crate::operation::disassociate_wireless_gateway_from_certificate::DisassociateWirelessGatewayFromCertificateError) -> Self {
        match err {
            crate::operation::disassociate_wireless_gateway_from_certificate::DisassociateWirelessGatewayFromCertificateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_wireless_gateway_from_certificate::DisassociateWirelessGatewayFromCertificateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_wireless_gateway_from_certificate::DisassociateWirelessGatewayFromCertificateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_wireless_gateway_from_certificate::DisassociateWirelessGatewayFromCertificateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_wireless_gateway_from_certificate::DisassociateWirelessGatewayFromCertificateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_wireless_gateway_from_certificate::DisassociateWirelessGatewayFromCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_wireless_gateway_from_thing::DisassociateWirelessGatewayFromThingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_wireless_gateway_from_thing::DisassociateWirelessGatewayFromThingError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_wireless_gateway_from_thing::DisassociateWirelessGatewayFromThingError> for Error {
    fn from(err: crate::operation::disassociate_wireless_gateway_from_thing::DisassociateWirelessGatewayFromThingError) -> Self {
        match err {
            crate::operation::disassociate_wireless_gateway_from_thing::DisassociateWirelessGatewayFromThingError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_wireless_gateway_from_thing::DisassociateWirelessGatewayFromThingError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disassociate_wireless_gateway_from_thing::DisassociateWirelessGatewayFromThingError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_wireless_gateway_from_thing::DisassociateWirelessGatewayFromThingError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_wireless_gateway_from_thing::DisassociateWirelessGatewayFromThingError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_wireless_gateway_from_thing::DisassociateWirelessGatewayFromThingError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_wireless_gateway_from_thing::DisassociateWirelessGatewayFromThingError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_destination::GetDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_destination::GetDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_destination::GetDestinationError> for Error {
    fn from(err: crate::operation::get_destination::GetDestinationError) -> Self {
        match err {
            crate::operation::get_destination::GetDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_destination::GetDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_destination::GetDestinationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_destination::GetDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_destination::GetDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_destination::GetDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_profile::GetDeviceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_profile::GetDeviceProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device_profile::GetDeviceProfileError> for Error {
    fn from(err: crate::operation::get_device_profile::GetDeviceProfileError) -> Self {
        match err {
            crate::operation::get_device_profile::GetDeviceProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_device_profile::GetDeviceProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_device_profile::GetDeviceProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_device_profile::GetDeviceProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_device_profile::GetDeviceProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_device_profile::GetDeviceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_event_configuration_by_resource_types::GetEventConfigurationByResourceTypesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_event_configuration_by_resource_types::GetEventConfigurationByResourceTypesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_event_configuration_by_resource_types::GetEventConfigurationByResourceTypesError> for Error {
    fn from(err: crate::operation::get_event_configuration_by_resource_types::GetEventConfigurationByResourceTypesError) -> Self {
        match err {
            crate::operation::get_event_configuration_by_resource_types::GetEventConfigurationByResourceTypesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_event_configuration_by_resource_types::GetEventConfigurationByResourceTypesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_event_configuration_by_resource_types::GetEventConfigurationByResourceTypesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_event_configuration_by_resource_types::GetEventConfigurationByResourceTypesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_fuota_task::GetFuotaTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_fuota_task::GetFuotaTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_fuota_task::GetFuotaTaskError> for Error {
    fn from(err: crate::operation::get_fuota_task::GetFuotaTaskError) -> Self {
        match err {
            crate::operation::get_fuota_task::GetFuotaTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_fuota_task::GetFuotaTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_fuota_task::GetFuotaTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_fuota_task::GetFuotaTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_fuota_task::GetFuotaTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_fuota_task::GetFuotaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_log_levels_by_resource_types::GetLogLevelsByResourceTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_log_levels_by_resource_types::GetLogLevelsByResourceTypesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_log_levels_by_resource_types::GetLogLevelsByResourceTypesError> for Error {
    fn from(err: crate::operation::get_log_levels_by_resource_types::GetLogLevelsByResourceTypesError) -> Self {
        match err {
            crate::operation::get_log_levels_by_resource_types::GetLogLevelsByResourceTypesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_log_levels_by_resource_types::GetLogLevelsByResourceTypesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_log_levels_by_resource_types::GetLogLevelsByResourceTypesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_log_levels_by_resource_types::GetLogLevelsByResourceTypesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_log_levels_by_resource_types::GetLogLevelsByResourceTypesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_log_levels_by_resource_types::GetLogLevelsByResourceTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_multicast_group::GetMulticastGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_multicast_group::GetMulticastGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_multicast_group::GetMulticastGroupError> for Error {
    fn from(err: crate::operation::get_multicast_group::GetMulticastGroupError) -> Self {
        match err {
            crate::operation::get_multicast_group::GetMulticastGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_multicast_group::GetMulticastGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_multicast_group::GetMulticastGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_multicast_group::GetMulticastGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_multicast_group::GetMulticastGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_multicast_group::GetMulticastGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_multicast_group_session::GetMulticastGroupSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_multicast_group_session::GetMulticastGroupSessionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_multicast_group_session::GetMulticastGroupSessionError> for Error {
    fn from(err: crate::operation::get_multicast_group_session::GetMulticastGroupSessionError) -> Self {
        match err {
            crate::operation::get_multicast_group_session::GetMulticastGroupSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_multicast_group_session::GetMulticastGroupSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_multicast_group_session::GetMulticastGroupSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_multicast_group_session::GetMulticastGroupSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_multicast_group_session::GetMulticastGroupSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_multicast_group_session::GetMulticastGroupSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_network_analyzer_configuration::GetNetworkAnalyzerConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_network_analyzer_configuration::GetNetworkAnalyzerConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_network_analyzer_configuration::GetNetworkAnalyzerConfigurationError> for Error {
    fn from(err: crate::operation::get_network_analyzer_configuration::GetNetworkAnalyzerConfigurationError) -> Self {
        match err {
            crate::operation::get_network_analyzer_configuration::GetNetworkAnalyzerConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_network_analyzer_configuration::GetNetworkAnalyzerConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_network_analyzer_configuration::GetNetworkAnalyzerConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_network_analyzer_configuration::GetNetworkAnalyzerConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_network_analyzer_configuration::GetNetworkAnalyzerConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_network_analyzer_configuration::GetNetworkAnalyzerConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_partner_account::GetPartnerAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_partner_account::GetPartnerAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_partner_account::GetPartnerAccountError> for Error {
    fn from(err: crate::operation::get_partner_account::GetPartnerAccountError) -> Self {
        match err {
            crate::operation::get_partner_account::GetPartnerAccountError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_partner_account::GetPartnerAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_partner_account::GetPartnerAccountError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_partner_account::GetPartnerAccountError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_partner_account::GetPartnerAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_position::GetPositionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_position::GetPositionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_position::GetPositionError> for Error {
    fn from(err: crate::operation::get_position::GetPositionError) -> Self {
        match err {
            crate::operation::get_position::GetPositionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_position::GetPositionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_position::GetPositionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_position::GetPositionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_position::GetPositionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_position::GetPositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_position_configuration::GetPositionConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_position_configuration::GetPositionConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_position_configuration::GetPositionConfigurationError> for Error {
    fn from(err: crate::operation::get_position_configuration::GetPositionConfigurationError) -> Self {
        match err {
            crate::operation::get_position_configuration::GetPositionConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_position_configuration::GetPositionConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_position_configuration::GetPositionConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_position_configuration::GetPositionConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_position_configuration::GetPositionConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_position_configuration::GetPositionConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_position_estimate::GetPositionEstimateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_position_estimate::GetPositionEstimateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_position_estimate::GetPositionEstimateError> for Error {
    fn from(err: crate::operation::get_position_estimate::GetPositionEstimateError) -> Self {
        match err {
            crate::operation::get_position_estimate::GetPositionEstimateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_position_estimate::GetPositionEstimateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_position_estimate::GetPositionEstimateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_position_estimate::GetPositionEstimateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_position_estimate::GetPositionEstimateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_position_estimate::GetPositionEstimateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_event_configuration::GetResourceEventConfigurationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_resource_event_configuration::GetResourceEventConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource_event_configuration::GetResourceEventConfigurationError> for Error {
    fn from(err: crate::operation::get_resource_event_configuration::GetResourceEventConfigurationError) -> Self {
        match err {
            crate::operation::get_resource_event_configuration::GetResourceEventConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_resource_event_configuration::GetResourceEventConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_resource_event_configuration::GetResourceEventConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resource_event_configuration::GetResourceEventConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_resource_event_configuration::GetResourceEventConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_resource_event_configuration::GetResourceEventConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_log_level::GetResourceLogLevelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_log_level::GetResourceLogLevelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource_log_level::GetResourceLogLevelError> for Error {
    fn from(err: crate::operation::get_resource_log_level::GetResourceLogLevelError) -> Self {
        match err {
            crate::operation::get_resource_log_level::GetResourceLogLevelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_resource_log_level::GetResourceLogLevelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_resource_log_level::GetResourceLogLevelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resource_log_level::GetResourceLogLevelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_resource_log_level::GetResourceLogLevelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_resource_log_level::GetResourceLogLevelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_position::GetResourcePositionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_position::GetResourcePositionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource_position::GetResourcePositionError> for Error {
    fn from(err: crate::operation::get_resource_position::GetResourcePositionError) -> Self {
        match err {
            crate::operation::get_resource_position::GetResourcePositionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_resource_position::GetResourcePositionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_resource_position::GetResourcePositionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resource_position::GetResourcePositionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_resource_position::GetResourcePositionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_resource_position::GetResourcePositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_service_endpoint::GetServiceEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_service_endpoint::GetServiceEndpointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service_endpoint::GetServiceEndpointError> for Error {
    fn from(err: crate::operation::get_service_endpoint::GetServiceEndpointError) -> Self {
        match err {
            crate::operation::get_service_endpoint::GetServiceEndpointError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_service_endpoint::GetServiceEndpointError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_service_endpoint::GetServiceEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_service_endpoint::GetServiceEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_service_endpoint::GetServiceEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_service_profile::GetServiceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_service_profile::GetServiceProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service_profile::GetServiceProfileError> for Error {
    fn from(err: crate::operation::get_service_profile::GetServiceProfileError) -> Self {
        match err {
            crate::operation::get_service_profile::GetServiceProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_service_profile::GetServiceProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_service_profile::GetServiceProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_service_profile::GetServiceProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_service_profile::GetServiceProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_service_profile::GetServiceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_wireless_device::GetWirelessDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_wireless_device::GetWirelessDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_wireless_device::GetWirelessDeviceError> for Error {
    fn from(err: crate::operation::get_wireless_device::GetWirelessDeviceError) -> Self {
        match err {
            crate::operation::get_wireless_device::GetWirelessDeviceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_wireless_device::GetWirelessDeviceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_wireless_device::GetWirelessDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_wireless_device::GetWirelessDeviceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_wireless_device::GetWirelessDeviceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_wireless_device::GetWirelessDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_wireless_device_import_task::GetWirelessDeviceImportTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_wireless_device_import_task::GetWirelessDeviceImportTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_wireless_device_import_task::GetWirelessDeviceImportTaskError> for Error {
    fn from(err: crate::operation::get_wireless_device_import_task::GetWirelessDeviceImportTaskError) -> Self {
        match err {
            crate::operation::get_wireless_device_import_task::GetWirelessDeviceImportTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_wireless_device_import_task::GetWirelessDeviceImportTaskError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_wireless_device_import_task::GetWirelessDeviceImportTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_wireless_device_import_task::GetWirelessDeviceImportTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_wireless_device_import_task::GetWirelessDeviceImportTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_wireless_device_import_task::GetWirelessDeviceImportTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_wireless_device_import_task::GetWirelessDeviceImportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_wireless_device_statistics::GetWirelessDeviceStatisticsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_wireless_device_statistics::GetWirelessDeviceStatisticsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_wireless_device_statistics::GetWirelessDeviceStatisticsError> for Error {
    fn from(err: crate::operation::get_wireless_device_statistics::GetWirelessDeviceStatisticsError) -> Self {
        match err {
            crate::operation::get_wireless_device_statistics::GetWirelessDeviceStatisticsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_wireless_device_statistics::GetWirelessDeviceStatisticsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_wireless_device_statistics::GetWirelessDeviceStatisticsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_wireless_device_statistics::GetWirelessDeviceStatisticsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_wireless_device_statistics::GetWirelessDeviceStatisticsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_wireless_device_statistics::GetWirelessDeviceStatisticsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_wireless_gateway::GetWirelessGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_wireless_gateway::GetWirelessGatewayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_wireless_gateway::GetWirelessGatewayError> for Error {
    fn from(err: crate::operation::get_wireless_gateway::GetWirelessGatewayError) -> Self {
        match err {
            crate::operation::get_wireless_gateway::GetWirelessGatewayError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_wireless_gateway::GetWirelessGatewayError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_wireless_gateway::GetWirelessGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_wireless_gateway::GetWirelessGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_wireless_gateway::GetWirelessGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_wireless_gateway::GetWirelessGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_wireless_gateway_certificate::GetWirelessGatewayCertificateError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_wireless_gateway_certificate::GetWirelessGatewayCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_wireless_gateway_certificate::GetWirelessGatewayCertificateError> for Error {
    fn from(err: crate::operation::get_wireless_gateway_certificate::GetWirelessGatewayCertificateError) -> Self {
        match err {
            crate::operation::get_wireless_gateway_certificate::GetWirelessGatewayCertificateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_wireless_gateway_certificate::GetWirelessGatewayCertificateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_wireless_gateway_certificate::GetWirelessGatewayCertificateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_wireless_gateway_certificate::GetWirelessGatewayCertificateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_wireless_gateway_certificate::GetWirelessGatewayCertificateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_wireless_gateway_certificate::GetWirelessGatewayCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_wireless_gateway_firmware_information::GetWirelessGatewayFirmwareInformationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_wireless_gateway_firmware_information::GetWirelessGatewayFirmwareInformationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_wireless_gateway_firmware_information::GetWirelessGatewayFirmwareInformationError> for Error {
    fn from(err: crate::operation::get_wireless_gateway_firmware_information::GetWirelessGatewayFirmwareInformationError) -> Self {
        match err {
            crate::operation::get_wireless_gateway_firmware_information::GetWirelessGatewayFirmwareInformationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_wireless_gateway_firmware_information::GetWirelessGatewayFirmwareInformationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_wireless_gateway_firmware_information::GetWirelessGatewayFirmwareInformationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_wireless_gateway_firmware_information::GetWirelessGatewayFirmwareInformationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_wireless_gateway_firmware_information::GetWirelessGatewayFirmwareInformationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_wireless_gateway_firmware_information::GetWirelessGatewayFirmwareInformationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_wireless_gateway_statistics::GetWirelessGatewayStatisticsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_wireless_gateway_statistics::GetWirelessGatewayStatisticsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_wireless_gateway_statistics::GetWirelessGatewayStatisticsError> for Error {
    fn from(err: crate::operation::get_wireless_gateway_statistics::GetWirelessGatewayStatisticsError) -> Self {
        match err {
            crate::operation::get_wireless_gateway_statistics::GetWirelessGatewayStatisticsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_wireless_gateway_statistics::GetWirelessGatewayStatisticsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_wireless_gateway_statistics::GetWirelessGatewayStatisticsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_wireless_gateway_statistics::GetWirelessGatewayStatisticsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_wireless_gateway_statistics::GetWirelessGatewayStatisticsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_wireless_gateway_statistics::GetWirelessGatewayStatisticsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskError> for Error {
    fn from(err: crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskError) -> Self {
        match err {
            crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionError> for Error {
    fn from(err: crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionError) -> Self {
        match err {
            crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_destinations::ListDestinationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_destinations::ListDestinationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_destinations::ListDestinationsError> for Error {
    fn from(err: crate::operation::list_destinations::ListDestinationsError) -> Self {
        match err {
            crate::operation::list_destinations::ListDestinationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_destinations::ListDestinationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_destinations::ListDestinationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_destinations::ListDestinationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_destinations::ListDestinationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_device_profiles::ListDeviceProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_device_profiles::ListDeviceProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_device_profiles::ListDeviceProfilesError> for Error {
    fn from(err: crate::operation::list_device_profiles::ListDeviceProfilesError) -> Self {
        match err {
            crate::operation::list_device_profiles::ListDeviceProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_device_profiles::ListDeviceProfilesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_device_profiles::ListDeviceProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_device_profiles::ListDeviceProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_device_profiles::ListDeviceProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_devices_for_wireless_device_import_task::ListDevicesForWirelessDeviceImportTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_devices_for_wireless_device_import_task::ListDevicesForWirelessDeviceImportTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_devices_for_wireless_device_import_task::ListDevicesForWirelessDeviceImportTaskError> for Error {
    fn from(err: crate::operation::list_devices_for_wireless_device_import_task::ListDevicesForWirelessDeviceImportTaskError) -> Self {
        match err {
            crate::operation::list_devices_for_wireless_device_import_task::ListDevicesForWirelessDeviceImportTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_devices_for_wireless_device_import_task::ListDevicesForWirelessDeviceImportTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_devices_for_wireless_device_import_task::ListDevicesForWirelessDeviceImportTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_devices_for_wireless_device_import_task::ListDevicesForWirelessDeviceImportTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_devices_for_wireless_device_import_task::ListDevicesForWirelessDeviceImportTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_devices_for_wireless_device_import_task::ListDevicesForWirelessDeviceImportTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_devices_for_wireless_device_import_task::ListDevicesForWirelessDeviceImportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_event_configurations::ListEventConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_event_configurations::ListEventConfigurationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_event_configurations::ListEventConfigurationsError> for Error {
    fn from(err: crate::operation::list_event_configurations::ListEventConfigurationsError) -> Self {
        match err {
            crate::operation::list_event_configurations::ListEventConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_event_configurations::ListEventConfigurationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_event_configurations::ListEventConfigurationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_event_configurations::ListEventConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_event_configurations::ListEventConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_fuota_tasks::ListFuotaTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_fuota_tasks::ListFuotaTasksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_fuota_tasks::ListFuotaTasksError> for Error {
    fn from(err: crate::operation::list_fuota_tasks::ListFuotaTasksError) -> Self {
        match err {
            crate::operation::list_fuota_tasks::ListFuotaTasksError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_fuota_tasks::ListFuotaTasksError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_fuota_tasks::ListFuotaTasksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_fuota_tasks::ListFuotaTasksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_fuota_tasks::ListFuotaTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_multicast_groups::ListMulticastGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_multicast_groups::ListMulticastGroupsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_multicast_groups::ListMulticastGroupsError> for Error {
    fn from(err: crate::operation::list_multicast_groups::ListMulticastGroupsError) -> Self {
        match err {
            crate::operation::list_multicast_groups::ListMulticastGroupsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_multicast_groups::ListMulticastGroupsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_multicast_groups::ListMulticastGroupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_multicast_groups::ListMulticastGroupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_multicast_groups::ListMulticastGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_multicast_groups_by_fuota_task::ListMulticastGroupsByFuotaTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_multicast_groups_by_fuota_task::ListMulticastGroupsByFuotaTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_multicast_groups_by_fuota_task::ListMulticastGroupsByFuotaTaskError> for Error {
    fn from(err: crate::operation::list_multicast_groups_by_fuota_task::ListMulticastGroupsByFuotaTaskError) -> Self {
        match err {
            crate::operation::list_multicast_groups_by_fuota_task::ListMulticastGroupsByFuotaTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_multicast_groups_by_fuota_task::ListMulticastGroupsByFuotaTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_multicast_groups_by_fuota_task::ListMulticastGroupsByFuotaTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_multicast_groups_by_fuota_task::ListMulticastGroupsByFuotaTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_multicast_groups_by_fuota_task::ListMulticastGroupsByFuotaTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_multicast_groups_by_fuota_task::ListMulticastGroupsByFuotaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_network_analyzer_configurations::ListNetworkAnalyzerConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_network_analyzer_configurations::ListNetworkAnalyzerConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_network_analyzer_configurations::ListNetworkAnalyzerConfigurationsError> for Error {
    fn from(err: crate::operation::list_network_analyzer_configurations::ListNetworkAnalyzerConfigurationsError) -> Self {
        match err {
            crate::operation::list_network_analyzer_configurations::ListNetworkAnalyzerConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_network_analyzer_configurations::ListNetworkAnalyzerConfigurationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_network_analyzer_configurations::ListNetworkAnalyzerConfigurationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_network_analyzer_configurations::ListNetworkAnalyzerConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_network_analyzer_configurations::ListNetworkAnalyzerConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_partner_accounts::ListPartnerAccountsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_partner_accounts::ListPartnerAccountsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_partner_accounts::ListPartnerAccountsError> for Error {
    fn from(err: crate::operation::list_partner_accounts::ListPartnerAccountsError) -> Self {
        match err {
            crate::operation::list_partner_accounts::ListPartnerAccountsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_partner_accounts::ListPartnerAccountsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_partner_accounts::ListPartnerAccountsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_partner_accounts::ListPartnerAccountsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_partner_accounts::ListPartnerAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_position_configurations::ListPositionConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_position_configurations::ListPositionConfigurationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_position_configurations::ListPositionConfigurationsError> for Error {
    fn from(err: crate::operation::list_position_configurations::ListPositionConfigurationsError) -> Self {
        match err {
            crate::operation::list_position_configurations::ListPositionConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_position_configurations::ListPositionConfigurationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_position_configurations::ListPositionConfigurationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_position_configurations::ListPositionConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_position_configurations::ListPositionConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queued_messages::ListQueuedMessagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queued_messages::ListQueuedMessagesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_queued_messages::ListQueuedMessagesError> for Error {
    fn from(err: crate::operation::list_queued_messages::ListQueuedMessagesError) -> Self {
        match err {
            crate::operation::list_queued_messages::ListQueuedMessagesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_queued_messages::ListQueuedMessagesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_queued_messages::ListQueuedMessagesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_queued_messages::ListQueuedMessagesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_queued_messages::ListQueuedMessagesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_queued_messages::ListQueuedMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_service_profiles::ListServiceProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_service_profiles::ListServiceProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_service_profiles::ListServiceProfilesError> for Error {
    fn from(err: crate::operation::list_service_profiles::ListServiceProfilesError) -> Self {
        match err {
            crate::operation::list_service_profiles::ListServiceProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_service_profiles::ListServiceProfilesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_service_profiles::ListServiceProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_service_profiles::ListServiceProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_service_profiles::ListServiceProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_wireless_device_import_tasks::ListWirelessDeviceImportTasksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_wireless_device_import_tasks::ListWirelessDeviceImportTasksError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_wireless_device_import_tasks::ListWirelessDeviceImportTasksError> for Error {
    fn from(err: crate::operation::list_wireless_device_import_tasks::ListWirelessDeviceImportTasksError) -> Self {
        match err {
            crate::operation::list_wireless_device_import_tasks::ListWirelessDeviceImportTasksError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_wireless_device_import_tasks::ListWirelessDeviceImportTasksError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_wireless_device_import_tasks::ListWirelessDeviceImportTasksError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_wireless_device_import_tasks::ListWirelessDeviceImportTasksError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_wireless_device_import_tasks::ListWirelessDeviceImportTasksError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_wireless_device_import_tasks::ListWirelessDeviceImportTasksError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_wireless_device_import_tasks::ListWirelessDeviceImportTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_wireless_devices::ListWirelessDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_wireless_devices::ListWirelessDevicesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_wireless_devices::ListWirelessDevicesError> for Error {
    fn from(err: crate::operation::list_wireless_devices::ListWirelessDevicesError) -> Self {
        match err {
            crate::operation::list_wireless_devices::ListWirelessDevicesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_wireless_devices::ListWirelessDevicesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_wireless_devices::ListWirelessDevicesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_wireless_devices::ListWirelessDevicesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_wireless_devices::ListWirelessDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_wireless_gateways::ListWirelessGatewaysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_wireless_gateways::ListWirelessGatewaysError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_wireless_gateways::ListWirelessGatewaysError> for Error {
    fn from(err: crate::operation::list_wireless_gateways::ListWirelessGatewaysError) -> Self {
        match err {
            crate::operation::list_wireless_gateways::ListWirelessGatewaysError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_wireless_gateways::ListWirelessGatewaysError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_wireless_gateways::ListWirelessGatewaysError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_wireless_gateways::ListWirelessGatewaysError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_wireless_gateways::ListWirelessGatewaysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_wireless_gateway_task_definitions::ListWirelessGatewayTaskDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_wireless_gateway_task_definitions::ListWirelessGatewayTaskDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_wireless_gateway_task_definitions::ListWirelessGatewayTaskDefinitionsError> for Error {
    fn from(err: crate::operation::list_wireless_gateway_task_definitions::ListWirelessGatewayTaskDefinitionsError) -> Self {
        match err {
            crate::operation::list_wireless_gateway_task_definitions::ListWirelessGatewayTaskDefinitionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_wireless_gateway_task_definitions::ListWirelessGatewayTaskDefinitionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_wireless_gateway_task_definitions::ListWirelessGatewayTaskDefinitionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_wireless_gateway_task_definitions::ListWirelessGatewayTaskDefinitionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_wireless_gateway_task_definitions::ListWirelessGatewayTaskDefinitionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_position_configuration::PutPositionConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_position_configuration::PutPositionConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_position_configuration::PutPositionConfigurationError> for Error {
    fn from(err: crate::operation::put_position_configuration::PutPositionConfigurationError) -> Self {
        match err {
            crate::operation::put_position_configuration::PutPositionConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_position_configuration::PutPositionConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_position_configuration::PutPositionConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_position_configuration::PutPositionConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_position_configuration::PutPositionConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_position_configuration::PutPositionConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_log_level::PutResourceLogLevelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_log_level::PutResourceLogLevelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_resource_log_level::PutResourceLogLevelError> for Error {
    fn from(err: crate::operation::put_resource_log_level::PutResourceLogLevelError) -> Self {
        match err {
            crate::operation::put_resource_log_level::PutResourceLogLevelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_resource_log_level::PutResourceLogLevelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_resource_log_level::PutResourceLogLevelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_resource_log_level::PutResourceLogLevelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_resource_log_level::PutResourceLogLevelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_resource_log_level::PutResourceLogLevelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_all_resource_log_levels::ResetAllResourceLogLevelsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_all_resource_log_levels::ResetAllResourceLogLevelsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reset_all_resource_log_levels::ResetAllResourceLogLevelsError> for Error {
    fn from(err: crate::operation::reset_all_resource_log_levels::ResetAllResourceLogLevelsError) -> Self {
        match err {
            crate::operation::reset_all_resource_log_levels::ResetAllResourceLogLevelsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::reset_all_resource_log_levels::ResetAllResourceLogLevelsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::reset_all_resource_log_levels::ResetAllResourceLogLevelsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::reset_all_resource_log_levels::ResetAllResourceLogLevelsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::reset_all_resource_log_levels::ResetAllResourceLogLevelsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::reset_all_resource_log_levels::ResetAllResourceLogLevelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_resource_log_level::ResetResourceLogLevelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_resource_log_level::ResetResourceLogLevelError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reset_resource_log_level::ResetResourceLogLevelError> for Error {
    fn from(err: crate::operation::reset_resource_log_level::ResetResourceLogLevelError) -> Self {
        match err {
            crate::operation::reset_resource_log_level::ResetResourceLogLevelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::reset_resource_log_level::ResetResourceLogLevelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::reset_resource_log_level::ResetResourceLogLevelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::reset_resource_log_level::ResetResourceLogLevelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reset_resource_log_level::ResetResourceLogLevelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reset_resource_log_level::ResetResourceLogLevelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupError> for Error {
    fn from(err: crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupError) -> Self {
        match err {
            crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceError> for Error {
    fn from(err: crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceError) -> Self {
        match err {
            crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_bulk_associate_wireless_device_with_multicast_group::StartBulkAssociateWirelessDeviceWithMulticastGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_bulk_associate_wireless_device_with_multicast_group::StartBulkAssociateWirelessDeviceWithMulticastGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_bulk_associate_wireless_device_with_multicast_group::StartBulkAssociateWirelessDeviceWithMulticastGroupError>
    for Error
{
    fn from(
        err: crate::operation::start_bulk_associate_wireless_device_with_multicast_group::StartBulkAssociateWirelessDeviceWithMulticastGroupError,
    ) -> Self {
        match err {
            crate::operation::start_bulk_associate_wireless_device_with_multicast_group::StartBulkAssociateWirelessDeviceWithMulticastGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_bulk_associate_wireless_device_with_multicast_group::StartBulkAssociateWirelessDeviceWithMulticastGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_bulk_associate_wireless_device_with_multicast_group::StartBulkAssociateWirelessDeviceWithMulticastGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_bulk_associate_wireless_device_with_multicast_group::StartBulkAssociateWirelessDeviceWithMulticastGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_bulk_associate_wireless_device_with_multicast_group::StartBulkAssociateWirelessDeviceWithMulticastGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_bulk_associate_wireless_device_with_multicast_group::StartBulkAssociateWirelessDeviceWithMulticastGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_bulk_disassociate_wireless_device_from_multicast_group::StartBulkDisassociateWirelessDeviceFromMulticastGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_bulk_disassociate_wireless_device_from_multicast_group::StartBulkDisassociateWirelessDeviceFromMulticastGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            ::aws_smithy_types::error::Unhandled::builder()
                                                .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::start_bulk_disassociate_wireless_device_from_multicast_group::StartBulkDisassociateWirelessDeviceFromMulticastGroupError>
    for Error
{
    fn from(
        err: crate::operation::start_bulk_disassociate_wireless_device_from_multicast_group::StartBulkDisassociateWirelessDeviceFromMulticastGroupError,
    ) -> Self {
        match err {
            crate::operation::start_bulk_disassociate_wireless_device_from_multicast_group::StartBulkDisassociateWirelessDeviceFromMulticastGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_bulk_disassociate_wireless_device_from_multicast_group::StartBulkDisassociateWirelessDeviceFromMulticastGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_bulk_disassociate_wireless_device_from_multicast_group::StartBulkDisassociateWirelessDeviceFromMulticastGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_bulk_disassociate_wireless_device_from_multicast_group::StartBulkDisassociateWirelessDeviceFromMulticastGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_bulk_disassociate_wireless_device_from_multicast_group::StartBulkDisassociateWirelessDeviceFromMulticastGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_bulk_disassociate_wireless_device_from_multicast_group::StartBulkDisassociateWirelessDeviceFromMulticastGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_fuota_task::StartFuotaTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_fuota_task::StartFuotaTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_fuota_task::StartFuotaTaskError> for Error {
    fn from(err: crate::operation::start_fuota_task::StartFuotaTaskError) -> Self {
        match err {
            crate::operation::start_fuota_task::StartFuotaTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_fuota_task::StartFuotaTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_fuota_task::StartFuotaTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_fuota_task::StartFuotaTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_fuota_task::StartFuotaTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_fuota_task::StartFuotaTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_fuota_task::StartFuotaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_multicast_group_session::StartMulticastGroupSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_multicast_group_session::StartMulticastGroupSessionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_multicast_group_session::StartMulticastGroupSessionError> for Error {
    fn from(err: crate::operation::start_multicast_group_session::StartMulticastGroupSessionError) -> Self {
        match err {
            crate::operation::start_multicast_group_session::StartMulticastGroupSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_multicast_group_session::StartMulticastGroupSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_multicast_group_session::StartMulticastGroupSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_multicast_group_session::StartMulticastGroupSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_multicast_group_session::StartMulticastGroupSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_multicast_group_session::StartMulticastGroupSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_multicast_group_session::StartMulticastGroupSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError> for Error {
    fn from(err: crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError) -> Self {
        match err {
            crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_single_wireless_device_import_task::StartSingleWirelessDeviceImportTaskError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError> for Error {
    fn from(err: crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError) -> Self {
        match err {
            crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_wireless_device_import_task::StartWirelessDeviceImportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_wireless_device::TestWirelessDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_wireless_device::TestWirelessDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::test_wireless_device::TestWirelessDeviceError> for Error {
    fn from(err: crate::operation::test_wireless_device::TestWirelessDeviceError) -> Self {
        match err {
            crate::operation::test_wireless_device::TestWirelessDeviceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::test_wireless_device::TestWirelessDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::test_wireless_device::TestWirelessDeviceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::test_wireless_device::TestWirelessDeviceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::test_wireless_device::TestWirelessDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_destination::UpdateDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_destination::UpdateDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_destination::UpdateDestinationError> for Error {
    fn from(err: crate::operation::update_destination::UpdateDestinationError) -> Self {
        match err {
            crate::operation::update_destination::UpdateDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_destination::UpdateDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_destination::UpdateDestinationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_destination::UpdateDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_destination::UpdateDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_destination::UpdateDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError> for Error {
    fn from(err: crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError) -> Self {
        match err {
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_fuota_task::UpdateFuotaTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_fuota_task::UpdateFuotaTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_fuota_task::UpdateFuotaTaskError> for Error {
    fn from(err: crate::operation::update_fuota_task::UpdateFuotaTaskError) -> Self {
        match err {
            crate::operation::update_fuota_task::UpdateFuotaTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_fuota_task::UpdateFuotaTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_fuota_task::UpdateFuotaTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_fuota_task::UpdateFuotaTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_fuota_task::UpdateFuotaTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_fuota_task::UpdateFuotaTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_fuota_task::UpdateFuotaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_log_levels_by_resource_types::UpdateLogLevelsByResourceTypesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_log_levels_by_resource_types::UpdateLogLevelsByResourceTypesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_log_levels_by_resource_types::UpdateLogLevelsByResourceTypesError> for Error {
    fn from(err: crate::operation::update_log_levels_by_resource_types::UpdateLogLevelsByResourceTypesError) -> Self {
        match err {
            crate::operation::update_log_levels_by_resource_types::UpdateLogLevelsByResourceTypesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_log_levels_by_resource_types::UpdateLogLevelsByResourceTypesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_log_levels_by_resource_types::UpdateLogLevelsByResourceTypesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_log_levels_by_resource_types::UpdateLogLevelsByResourceTypesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_log_levels_by_resource_types::UpdateLogLevelsByResourceTypesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_log_levels_by_resource_types::UpdateLogLevelsByResourceTypesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_log_levels_by_resource_types::UpdateLogLevelsByResourceTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_multicast_group::UpdateMulticastGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_multicast_group::UpdateMulticastGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_multicast_group::UpdateMulticastGroupError> for Error {
    fn from(err: crate::operation::update_multicast_group::UpdateMulticastGroupError) -> Self {
        match err {
            crate::operation::update_multicast_group::UpdateMulticastGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_multicast_group::UpdateMulticastGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_multicast_group::UpdateMulticastGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_multicast_group::UpdateMulticastGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_multicast_group::UpdateMulticastGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_multicast_group::UpdateMulticastGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_multicast_group::UpdateMulticastGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_network_analyzer_configuration::UpdateNetworkAnalyzerConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_network_analyzer_configuration::UpdateNetworkAnalyzerConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_network_analyzer_configuration::UpdateNetworkAnalyzerConfigurationError> for Error {
    fn from(err: crate::operation::update_network_analyzer_configuration::UpdateNetworkAnalyzerConfigurationError) -> Self {
        match err {
            crate::operation::update_network_analyzer_configuration::UpdateNetworkAnalyzerConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_network_analyzer_configuration::UpdateNetworkAnalyzerConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_network_analyzer_configuration::UpdateNetworkAnalyzerConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_network_analyzer_configuration::UpdateNetworkAnalyzerConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_network_analyzer_configuration::UpdateNetworkAnalyzerConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_network_analyzer_configuration::UpdateNetworkAnalyzerConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_partner_account::UpdatePartnerAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_partner_account::UpdatePartnerAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_partner_account::UpdatePartnerAccountError> for Error {
    fn from(err: crate::operation::update_partner_account::UpdatePartnerAccountError) -> Self {
        match err {
            crate::operation::update_partner_account::UpdatePartnerAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_partner_account::UpdatePartnerAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_partner_account::UpdatePartnerAccountError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_partner_account::UpdatePartnerAccountError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_partner_account::UpdatePartnerAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_position::UpdatePositionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_position::UpdatePositionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_position::UpdatePositionError> for Error {
    fn from(err: crate::operation::update_position::UpdatePositionError) -> Self {
        match err {
            crate::operation::update_position::UpdatePositionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_position::UpdatePositionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_position::UpdatePositionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_position::UpdatePositionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_position::UpdatePositionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_position::UpdatePositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError> for Error {
    fn from(err: crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError) -> Self {
        match err {
            crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resource_position::UpdateResourcePositionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resource_position::UpdateResourcePositionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_resource_position::UpdateResourcePositionError> for Error {
    fn from(err: crate::operation::update_resource_position::UpdateResourcePositionError) -> Self {
        match err {
            crate::operation::update_resource_position::UpdateResourcePositionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_resource_position::UpdateResourcePositionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_resource_position::UpdateResourcePositionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_resource_position::UpdateResourcePositionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_resource_position::UpdateResourcePositionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_resource_position::UpdateResourcePositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_wireless_device::UpdateWirelessDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_wireless_device::UpdateWirelessDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_wireless_device::UpdateWirelessDeviceError> for Error {
    fn from(err: crate::operation::update_wireless_device::UpdateWirelessDeviceError) -> Self {
        match err {
            crate::operation::update_wireless_device::UpdateWirelessDeviceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_wireless_device::UpdateWirelessDeviceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_wireless_device::UpdateWirelessDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_wireless_device::UpdateWirelessDeviceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_wireless_device::UpdateWirelessDeviceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_wireless_device::UpdateWirelessDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_wireless_device_import_task::UpdateWirelessDeviceImportTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_wireless_device_import_task::UpdateWirelessDeviceImportTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_wireless_device_import_task::UpdateWirelessDeviceImportTaskError> for Error {
    fn from(err: crate::operation::update_wireless_device_import_task::UpdateWirelessDeviceImportTaskError) -> Self {
        match err {
            crate::operation::update_wireless_device_import_task::UpdateWirelessDeviceImportTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_wireless_device_import_task::UpdateWirelessDeviceImportTaskError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_wireless_device_import_task::UpdateWirelessDeviceImportTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_wireless_device_import_task::UpdateWirelessDeviceImportTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_wireless_device_import_task::UpdateWirelessDeviceImportTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_wireless_device_import_task::UpdateWirelessDeviceImportTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_wireless_device_import_task::UpdateWirelessDeviceImportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_wireless_gateway::UpdateWirelessGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_wireless_gateway::UpdateWirelessGatewayError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_wireless_gateway::UpdateWirelessGatewayError> for Error {
    fn from(err: crate::operation::update_wireless_gateway::UpdateWirelessGatewayError) -> Self {
        match err {
            crate::operation::update_wireless_gateway::UpdateWirelessGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_wireless_gateway::UpdateWirelessGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_wireless_gateway::UpdateWirelessGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_wireless_gateway::UpdateWirelessGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_wireless_gateway::UpdateWirelessGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_wireless_gateway::UpdateWirelessGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::TooManyTagsException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
