// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Associates a partner account with your AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateAwsAccountWithPartnerAccount {
    _private: (),
}
impl AssociateAwsAccountWithPartnerAccount {
    /// Creates a new builder-style object to manufacture [`AssociateAwsAccountWithPartnerAccountInput`](crate::input::AssociateAwsAccountWithPartnerAccountInput)
    pub fn builder() -> crate::input::associate_aws_account_with_partner_account_input::Builder {
        crate::input::associate_aws_account_with_partner_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateAwsAccountWithPartnerAccount {
    type Output = std::result::Result<
        crate::output::AssociateAwsAccountWithPartnerAccountOutput,
        crate::error::AssociateAwsAccountWithPartnerAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_aws_account_with_partner_account_error(response)
        } else {
            crate::operation_deser::parse_associate_aws_account_with_partner_account_response(
                response,
            )
        }
    }
}

/// <p>Associates a wireless device with a thing.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateWirelessDeviceWithThing {
    _private: (),
}
impl AssociateWirelessDeviceWithThing {
    /// Creates a new builder-style object to manufacture [`AssociateWirelessDeviceWithThingInput`](crate::input::AssociateWirelessDeviceWithThingInput)
    pub fn builder() -> crate::input::associate_wireless_device_with_thing_input::Builder {
        crate::input::associate_wireless_device_with_thing_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateWirelessDeviceWithThing {
    type Output = std::result::Result<
        crate::output::AssociateWirelessDeviceWithThingOutput,
        crate::error::AssociateWirelessDeviceWithThingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_associate_wireless_device_with_thing_error(response)
        } else {
            crate::operation_deser::parse_associate_wireless_device_with_thing_response(response)
        }
    }
}

/// <p>Associates a wireless gateway with a certificate.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateWirelessGatewayWithCertificate {
    _private: (),
}
impl AssociateWirelessGatewayWithCertificate {
    /// Creates a new builder-style object to manufacture [`AssociateWirelessGatewayWithCertificateInput`](crate::input::AssociateWirelessGatewayWithCertificateInput)
    pub fn builder() -> crate::input::associate_wireless_gateway_with_certificate_input::Builder {
        crate::input::associate_wireless_gateway_with_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateWirelessGatewayWithCertificate {
    type Output = std::result::Result<
        crate::output::AssociateWirelessGatewayWithCertificateOutput,
        crate::error::AssociateWirelessGatewayWithCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_wireless_gateway_with_certificate_error(
                response,
            )
        } else {
            crate::operation_deser::parse_associate_wireless_gateway_with_certificate_response(
                response,
            )
        }
    }
}

/// <p>Associates a wireless gateway with a thing.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateWirelessGatewayWithThing {
    _private: (),
}
impl AssociateWirelessGatewayWithThing {
    /// Creates a new builder-style object to manufacture [`AssociateWirelessGatewayWithThingInput`](crate::input::AssociateWirelessGatewayWithThingInput)
    pub fn builder() -> crate::input::associate_wireless_gateway_with_thing_input::Builder {
        crate::input::associate_wireless_gateway_with_thing_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateWirelessGatewayWithThing {
    type Output = std::result::Result<
        crate::output::AssociateWirelessGatewayWithThingOutput,
        crate::error::AssociateWirelessGatewayWithThingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_associate_wireless_gateway_with_thing_error(response)
        } else {
            crate::operation_deser::parse_associate_wireless_gateway_with_thing_response(response)
        }
    }
}

/// <p>Creates a new destination that maps a device message to an AWS IoT rule.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDestination {
    _private: (),
}
impl CreateDestination {
    /// Creates a new builder-style object to manufacture [`CreateDestinationInput`](crate::input::CreateDestinationInput)
    pub fn builder() -> crate::input::create_destination_input::Builder {
        crate::input::create_destination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDestination {
    type Output = std::result::Result<
        crate::output::CreateDestinationOutput,
        crate::error::CreateDestinationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_destination_error(response)
        } else {
            crate::operation_deser::parse_create_destination_response(response)
        }
    }
}

/// <p>Creates a new device profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDeviceProfile {
    _private: (),
}
impl CreateDeviceProfile {
    /// Creates a new builder-style object to manufacture [`CreateDeviceProfileInput`](crate::input::CreateDeviceProfileInput)
    pub fn builder() -> crate::input::create_device_profile_input::Builder {
        crate::input::create_device_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDeviceProfile {
    type Output = std::result::Result<
        crate::output::CreateDeviceProfileOutput,
        crate::error::CreateDeviceProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_device_profile_error(response)
        } else {
            crate::operation_deser::parse_create_device_profile_response(response)
        }
    }
}

/// <p>Creates a new service profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateServiceProfile {
    _private: (),
}
impl CreateServiceProfile {
    /// Creates a new builder-style object to manufacture [`CreateServiceProfileInput`](crate::input::CreateServiceProfileInput)
    pub fn builder() -> crate::input::create_service_profile_input::Builder {
        crate::input::create_service_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateServiceProfile {
    type Output = std::result::Result<
        crate::output::CreateServiceProfileOutput,
        crate::error::CreateServiceProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_service_profile_error(response)
        } else {
            crate::operation_deser::parse_create_service_profile_response(response)
        }
    }
}

/// <p>Provisions a wireless device.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateWirelessDevice {
    _private: (),
}
impl CreateWirelessDevice {
    /// Creates a new builder-style object to manufacture [`CreateWirelessDeviceInput`](crate::input::CreateWirelessDeviceInput)
    pub fn builder() -> crate::input::create_wireless_device_input::Builder {
        crate::input::create_wireless_device_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateWirelessDevice {
    type Output = std::result::Result<
        crate::output::CreateWirelessDeviceOutput,
        crate::error::CreateWirelessDeviceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_wireless_device_error(response)
        } else {
            crate::operation_deser::parse_create_wireless_device_response(response)
        }
    }
}

/// <p>Provisions a wireless gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateWirelessGateway {
    _private: (),
}
impl CreateWirelessGateway {
    /// Creates a new builder-style object to manufacture [`CreateWirelessGatewayInput`](crate::input::CreateWirelessGatewayInput)
    pub fn builder() -> crate::input::create_wireless_gateway_input::Builder {
        crate::input::create_wireless_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateWirelessGateway {
    type Output = std::result::Result<
        crate::output::CreateWirelessGatewayOutput,
        crate::error::CreateWirelessGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_wireless_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_wireless_gateway_response(response)
        }
    }
}

/// <p>Creates a task for a wireless gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateWirelessGatewayTask {
    _private: (),
}
impl CreateWirelessGatewayTask {
    /// Creates a new builder-style object to manufacture [`CreateWirelessGatewayTaskInput`](crate::input::CreateWirelessGatewayTaskInput)
    pub fn builder() -> crate::input::create_wireless_gateway_task_input::Builder {
        crate::input::create_wireless_gateway_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateWirelessGatewayTask {
    type Output = std::result::Result<
        crate::output::CreateWirelessGatewayTaskOutput,
        crate::error::CreateWirelessGatewayTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_wireless_gateway_task_error(response)
        } else {
            crate::operation_deser::parse_create_wireless_gateway_task_response(response)
        }
    }
}

/// <p>Creates a gateway task definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateWirelessGatewayTaskDefinition {
    _private: (),
}
impl CreateWirelessGatewayTaskDefinition {
    /// Creates a new builder-style object to manufacture [`CreateWirelessGatewayTaskDefinitionInput`](crate::input::CreateWirelessGatewayTaskDefinitionInput)
    pub fn builder() -> crate::input::create_wireless_gateway_task_definition_input::Builder {
        crate::input::create_wireless_gateway_task_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateWirelessGatewayTaskDefinition {
    type Output = std::result::Result<
        crate::output::CreateWirelessGatewayTaskDefinitionOutput,
        crate::error::CreateWirelessGatewayTaskDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_wireless_gateway_task_definition_error(response)
        } else {
            crate::operation_deser::parse_create_wireless_gateway_task_definition_response(response)
        }
    }
}

/// <p>Deletes a destination.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDestination {
    _private: (),
}
impl DeleteDestination {
    /// Creates a new builder-style object to manufacture [`DeleteDestinationInput`](crate::input::DeleteDestinationInput)
    pub fn builder() -> crate::input::delete_destination_input::Builder {
        crate::input::delete_destination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDestination {
    type Output = std::result::Result<
        crate::output::DeleteDestinationOutput,
        crate::error::DeleteDestinationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_destination_error(response)
        } else {
            crate::operation_deser::parse_delete_destination_response(response)
        }
    }
}

/// <p>Deletes a device profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDeviceProfile {
    _private: (),
}
impl DeleteDeviceProfile {
    /// Creates a new builder-style object to manufacture [`DeleteDeviceProfileInput`](crate::input::DeleteDeviceProfileInput)
    pub fn builder() -> crate::input::delete_device_profile_input::Builder {
        crate::input::delete_device_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDeviceProfile {
    type Output = std::result::Result<
        crate::output::DeleteDeviceProfileOutput,
        crate::error::DeleteDeviceProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_device_profile_error(response)
        } else {
            crate::operation_deser::parse_delete_device_profile_response(response)
        }
    }
}

/// <p>Deletes a service profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteServiceProfile {
    _private: (),
}
impl DeleteServiceProfile {
    /// Creates a new builder-style object to manufacture [`DeleteServiceProfileInput`](crate::input::DeleteServiceProfileInput)
    pub fn builder() -> crate::input::delete_service_profile_input::Builder {
        crate::input::delete_service_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteServiceProfile {
    type Output = std::result::Result<
        crate::output::DeleteServiceProfileOutput,
        crate::error::DeleteServiceProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_service_profile_error(response)
        } else {
            crate::operation_deser::parse_delete_service_profile_response(response)
        }
    }
}

/// <p>Deletes a wireless device.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWirelessDevice {
    _private: (),
}
impl DeleteWirelessDevice {
    /// Creates a new builder-style object to manufacture [`DeleteWirelessDeviceInput`](crate::input::DeleteWirelessDeviceInput)
    pub fn builder() -> crate::input::delete_wireless_device_input::Builder {
        crate::input::delete_wireless_device_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteWirelessDevice {
    type Output = std::result::Result<
        crate::output::DeleteWirelessDeviceOutput,
        crate::error::DeleteWirelessDeviceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_wireless_device_error(response)
        } else {
            crate::operation_deser::parse_delete_wireless_device_response(response)
        }
    }
}

/// <p>Deletes a wireless gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWirelessGateway {
    _private: (),
}
impl DeleteWirelessGateway {
    /// Creates a new builder-style object to manufacture [`DeleteWirelessGatewayInput`](crate::input::DeleteWirelessGatewayInput)
    pub fn builder() -> crate::input::delete_wireless_gateway_input::Builder {
        crate::input::delete_wireless_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteWirelessGateway {
    type Output = std::result::Result<
        crate::output::DeleteWirelessGatewayOutput,
        crate::error::DeleteWirelessGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_wireless_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_wireless_gateway_response(response)
        }
    }
}

/// <p>Deletes a wireless gateway task.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWirelessGatewayTask {
    _private: (),
}
impl DeleteWirelessGatewayTask {
    /// Creates a new builder-style object to manufacture [`DeleteWirelessGatewayTaskInput`](crate::input::DeleteWirelessGatewayTaskInput)
    pub fn builder() -> crate::input::delete_wireless_gateway_task_input::Builder {
        crate::input::delete_wireless_gateway_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteWirelessGatewayTask {
    type Output = std::result::Result<
        crate::output::DeleteWirelessGatewayTaskOutput,
        crate::error::DeleteWirelessGatewayTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_wireless_gateway_task_error(response)
        } else {
            crate::operation_deser::parse_delete_wireless_gateway_task_response(response)
        }
    }
}

/// <p>Deletes a wireless gateway task definition. Deleting this task definition does not affect tasks that are currently in progress.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWirelessGatewayTaskDefinition {
    _private: (),
}
impl DeleteWirelessGatewayTaskDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteWirelessGatewayTaskDefinitionInput`](crate::input::DeleteWirelessGatewayTaskDefinitionInput)
    pub fn builder() -> crate::input::delete_wireless_gateway_task_definition_input::Builder {
        crate::input::delete_wireless_gateway_task_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteWirelessGatewayTaskDefinition {
    type Output = std::result::Result<
        crate::output::DeleteWirelessGatewayTaskDefinitionOutput,
        crate::error::DeleteWirelessGatewayTaskDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_wireless_gateway_task_definition_error(response)
        } else {
            crate::operation_deser::parse_delete_wireless_gateway_task_definition_response(response)
        }
    }
}

/// <p>Disassociates your AWS account from a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, disassociates your AWS account from all partner accounts.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateAwsAccountFromPartnerAccount {
    _private: (),
}
impl DisassociateAwsAccountFromPartnerAccount {
    /// Creates a new builder-style object to manufacture [`DisassociateAwsAccountFromPartnerAccountInput`](crate::input::DisassociateAwsAccountFromPartnerAccountInput)
    pub fn builder() -> crate::input::disassociate_aws_account_from_partner_account_input::Builder {
        crate::input::disassociate_aws_account_from_partner_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateAwsAccountFromPartnerAccount {
    type Output = std::result::Result<
        crate::output::DisassociateAwsAccountFromPartnerAccountOutput,
        crate::error::DisassociateAwsAccountFromPartnerAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_disassociate_aws_account_from_partner_account_error(
                response,
            )
        } else {
            crate::operation_deser::parse_disassociate_aws_account_from_partner_account_response(
                response,
            )
        }
    }
}

/// <p>Disassociates a wireless device from its currently associated thing.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateWirelessDeviceFromThing {
    _private: (),
}
impl DisassociateWirelessDeviceFromThing {
    /// Creates a new builder-style object to manufacture [`DisassociateWirelessDeviceFromThingInput`](crate::input::DisassociateWirelessDeviceFromThingInput)
    pub fn builder() -> crate::input::disassociate_wireless_device_from_thing_input::Builder {
        crate::input::disassociate_wireless_device_from_thing_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateWirelessDeviceFromThing {
    type Output = std::result::Result<
        crate::output::DisassociateWirelessDeviceFromThingOutput,
        crate::error::DisassociateWirelessDeviceFromThingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_disassociate_wireless_device_from_thing_error(response)
        } else {
            crate::operation_deser::parse_disassociate_wireless_device_from_thing_response(response)
        }
    }
}

/// <p>Disassociates a wireless gateway from its currently associated certificate.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateWirelessGatewayFromCertificate {
    _private: (),
}
impl DisassociateWirelessGatewayFromCertificate {
    /// Creates a new builder-style object to manufacture [`DisassociateWirelessGatewayFromCertificateInput`](crate::input::DisassociateWirelessGatewayFromCertificateInput)
    pub fn builder() -> crate::input::disassociate_wireless_gateway_from_certificate_input::Builder
    {
        crate::input::disassociate_wireless_gateway_from_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateWirelessGatewayFromCertificate {
    type Output = std::result::Result<
        crate::output::DisassociateWirelessGatewayFromCertificateOutput,
        crate::error::DisassociateWirelessGatewayFromCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_disassociate_wireless_gateway_from_certificate_error(
                response,
            )
        } else {
            crate::operation_deser::parse_disassociate_wireless_gateway_from_certificate_response(
                response,
            )
        }
    }
}

/// <p>Disassociates a wireless gateway from its currently associated thing.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateWirelessGatewayFromThing {
    _private: (),
}
impl DisassociateWirelessGatewayFromThing {
    /// Creates a new builder-style object to manufacture [`DisassociateWirelessGatewayFromThingInput`](crate::input::DisassociateWirelessGatewayFromThingInput)
    pub fn builder() -> crate::input::disassociate_wireless_gateway_from_thing_input::Builder {
        crate::input::disassociate_wireless_gateway_from_thing_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateWirelessGatewayFromThing {
    type Output = std::result::Result<
        crate::output::DisassociateWirelessGatewayFromThingOutput,
        crate::error::DisassociateWirelessGatewayFromThingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_disassociate_wireless_gateway_from_thing_error(response)
        } else {
            crate::operation_deser::parse_disassociate_wireless_gateway_from_thing_response(
                response,
            )
        }
    }
}

/// <p>Gets information about a destination.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDestination {
    _private: (),
}
impl GetDestination {
    /// Creates a new builder-style object to manufacture [`GetDestinationInput`](crate::input::GetDestinationInput)
    pub fn builder() -> crate::input::get_destination_input::Builder {
        crate::input::get_destination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDestination {
    type Output =
        std::result::Result<crate::output::GetDestinationOutput, crate::error::GetDestinationError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_destination_error(response)
        } else {
            crate::operation_deser::parse_get_destination_response(response)
        }
    }
}

/// <p>Gets information about a device profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDeviceProfile {
    _private: (),
}
impl GetDeviceProfile {
    /// Creates a new builder-style object to manufacture [`GetDeviceProfileInput`](crate::input::GetDeviceProfileInput)
    pub fn builder() -> crate::input::get_device_profile_input::Builder {
        crate::input::get_device_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDeviceProfile {
    type Output = std::result::Result<
        crate::output::GetDeviceProfileOutput,
        crate::error::GetDeviceProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_device_profile_error(response)
        } else {
            crate::operation_deser::parse_get_device_profile_response(response)
        }
    }
}

/// <p>Returns current default log levels or log levels by resource types. Based on resource types, log levels can be
/// for wireless device log options or wireless gateway log options.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetLogLevelsByResourceTypes {
    _private: (),
}
impl GetLogLevelsByResourceTypes {
    /// Creates a new builder-style object to manufacture [`GetLogLevelsByResourceTypesInput`](crate::input::GetLogLevelsByResourceTypesInput)
    pub fn builder() -> crate::input::get_log_levels_by_resource_types_input::Builder {
        crate::input::get_log_levels_by_resource_types_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetLogLevelsByResourceTypes {
    type Output = std::result::Result<
        crate::output::GetLogLevelsByResourceTypesOutput,
        crate::error::GetLogLevelsByResourceTypesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_log_levels_by_resource_types_error(response)
        } else {
            crate::operation_deser::parse_get_log_levels_by_resource_types_response(response)
        }
    }
}

/// <p>Gets information about a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, returns all partner accounts.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPartnerAccount {
    _private: (),
}
impl GetPartnerAccount {
    /// Creates a new builder-style object to manufacture [`GetPartnerAccountInput`](crate::input::GetPartnerAccountInput)
    pub fn builder() -> crate::input::get_partner_account_input::Builder {
        crate::input::get_partner_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPartnerAccount {
    type Output = std::result::Result<
        crate::output::GetPartnerAccountOutput,
        crate::error::GetPartnerAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_partner_account_error(response)
        } else {
            crate::operation_deser::parse_get_partner_account_response(response)
        }
    }
}

/// <p>Fetches the log-level override, if any, for a given resource-ID and resource-type. It can be used for
/// a wireless device or a wireless gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetResourceLogLevel {
    _private: (),
}
impl GetResourceLogLevel {
    /// Creates a new builder-style object to manufacture [`GetResourceLogLevelInput`](crate::input::GetResourceLogLevelInput)
    pub fn builder() -> crate::input::get_resource_log_level_input::Builder {
        crate::input::get_resource_log_level_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetResourceLogLevel {
    type Output = std::result::Result<
        crate::output::GetResourceLogLevelOutput,
        crate::error::GetResourceLogLevelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_resource_log_level_error(response)
        } else {
            crate::operation_deser::parse_get_resource_log_level_response(response)
        }
    }
}

/// <p>Gets the account-specific endpoint for Configuration and Update Server (CUPS) protocol or LoRaWAN Network Server (LNS) connections.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetServiceEndpoint {
    _private: (),
}
impl GetServiceEndpoint {
    /// Creates a new builder-style object to manufacture [`GetServiceEndpointInput`](crate::input::GetServiceEndpointInput)
    pub fn builder() -> crate::input::get_service_endpoint_input::Builder {
        crate::input::get_service_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetServiceEndpoint {
    type Output = std::result::Result<
        crate::output::GetServiceEndpointOutput,
        crate::error::GetServiceEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_service_endpoint_error(response)
        } else {
            crate::operation_deser::parse_get_service_endpoint_response(response)
        }
    }
}

/// <p>Gets information about a service profile.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetServiceProfile {
    _private: (),
}
impl GetServiceProfile {
    /// Creates a new builder-style object to manufacture [`GetServiceProfileInput`](crate::input::GetServiceProfileInput)
    pub fn builder() -> crate::input::get_service_profile_input::Builder {
        crate::input::get_service_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetServiceProfile {
    type Output = std::result::Result<
        crate::output::GetServiceProfileOutput,
        crate::error::GetServiceProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_service_profile_error(response)
        } else {
            crate::operation_deser::parse_get_service_profile_response(response)
        }
    }
}

/// <p>Gets information about a wireless device.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetWirelessDevice {
    _private: (),
}
impl GetWirelessDevice {
    /// Creates a new builder-style object to manufacture [`GetWirelessDeviceInput`](crate::input::GetWirelessDeviceInput)
    pub fn builder() -> crate::input::get_wireless_device_input::Builder {
        crate::input::get_wireless_device_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetWirelessDevice {
    type Output = std::result::Result<
        crate::output::GetWirelessDeviceOutput,
        crate::error::GetWirelessDeviceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_wireless_device_error(response)
        } else {
            crate::operation_deser::parse_get_wireless_device_response(response)
        }
    }
}

/// <p>Gets operating information about a wireless device.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetWirelessDeviceStatistics {
    _private: (),
}
impl GetWirelessDeviceStatistics {
    /// Creates a new builder-style object to manufacture [`GetWirelessDeviceStatisticsInput`](crate::input::GetWirelessDeviceStatisticsInput)
    pub fn builder() -> crate::input::get_wireless_device_statistics_input::Builder {
        crate::input::get_wireless_device_statistics_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetWirelessDeviceStatistics {
    type Output = std::result::Result<
        crate::output::GetWirelessDeviceStatisticsOutput,
        crate::error::GetWirelessDeviceStatisticsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_wireless_device_statistics_error(response)
        } else {
            crate::operation_deser::parse_get_wireless_device_statistics_response(response)
        }
    }
}

/// <p>Gets information about a wireless gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetWirelessGateway {
    _private: (),
}
impl GetWirelessGateway {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayInput`](crate::input::GetWirelessGatewayInput)
    pub fn builder() -> crate::input::get_wireless_gateway_input::Builder {
        crate::input::get_wireless_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetWirelessGateway {
    type Output = std::result::Result<
        crate::output::GetWirelessGatewayOutput,
        crate::error::GetWirelessGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_wireless_gateway_error(response)
        } else {
            crate::operation_deser::parse_get_wireless_gateway_response(response)
        }
    }
}

/// <p>Gets the ID of the certificate that is currently associated with a wireless gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetWirelessGatewayCertificate {
    _private: (),
}
impl GetWirelessGatewayCertificate {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayCertificateInput`](crate::input::GetWirelessGatewayCertificateInput)
    pub fn builder() -> crate::input::get_wireless_gateway_certificate_input::Builder {
        crate::input::get_wireless_gateway_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetWirelessGatewayCertificate {
    type Output = std::result::Result<
        crate::output::GetWirelessGatewayCertificateOutput,
        crate::error::GetWirelessGatewayCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_wireless_gateway_certificate_error(response)
        } else {
            crate::operation_deser::parse_get_wireless_gateway_certificate_response(response)
        }
    }
}

/// <p>Gets the firmware version and other information about a wireless gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetWirelessGatewayFirmwareInformation {
    _private: (),
}
impl GetWirelessGatewayFirmwareInformation {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayFirmwareInformationInput`](crate::input::GetWirelessGatewayFirmwareInformationInput)
    pub fn builder() -> crate::input::get_wireless_gateway_firmware_information_input::Builder {
        crate::input::get_wireless_gateway_firmware_information_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetWirelessGatewayFirmwareInformation {
    type Output = std::result::Result<
        crate::output::GetWirelessGatewayFirmwareInformationOutput,
        crate::error::GetWirelessGatewayFirmwareInformationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_wireless_gateway_firmware_information_error(response)
        } else {
            crate::operation_deser::parse_get_wireless_gateway_firmware_information_response(
                response,
            )
        }
    }
}

/// <p>Gets operating information about a wireless gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetWirelessGatewayStatistics {
    _private: (),
}
impl GetWirelessGatewayStatistics {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayStatisticsInput`](crate::input::GetWirelessGatewayStatisticsInput)
    pub fn builder() -> crate::input::get_wireless_gateway_statistics_input::Builder {
        crate::input::get_wireless_gateway_statistics_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetWirelessGatewayStatistics {
    type Output = std::result::Result<
        crate::output::GetWirelessGatewayStatisticsOutput,
        crate::error::GetWirelessGatewayStatisticsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_wireless_gateway_statistics_error(response)
        } else {
            crate::operation_deser::parse_get_wireless_gateway_statistics_response(response)
        }
    }
}

/// <p>Gets information about a wireless gateway task.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetWirelessGatewayTask {
    _private: (),
}
impl GetWirelessGatewayTask {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayTaskInput`](crate::input::GetWirelessGatewayTaskInput)
    pub fn builder() -> crate::input::get_wireless_gateway_task_input::Builder {
        crate::input::get_wireless_gateway_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetWirelessGatewayTask {
    type Output = std::result::Result<
        crate::output::GetWirelessGatewayTaskOutput,
        crate::error::GetWirelessGatewayTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_wireless_gateway_task_error(response)
        } else {
            crate::operation_deser::parse_get_wireless_gateway_task_response(response)
        }
    }
}

/// <p>Gets information about a wireless gateway task definition.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetWirelessGatewayTaskDefinition {
    _private: (),
}
impl GetWirelessGatewayTaskDefinition {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayTaskDefinitionInput`](crate::input::GetWirelessGatewayTaskDefinitionInput)
    pub fn builder() -> crate::input::get_wireless_gateway_task_definition_input::Builder {
        crate::input::get_wireless_gateway_task_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetWirelessGatewayTaskDefinition {
    type Output = std::result::Result<
        crate::output::GetWirelessGatewayTaskDefinitionOutput,
        crate::error::GetWirelessGatewayTaskDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_wireless_gateway_task_definition_error(response)
        } else {
            crate::operation_deser::parse_get_wireless_gateway_task_definition_response(response)
        }
    }
}

/// <p>Lists the destinations registered to your AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDestinations {
    _private: (),
}
impl ListDestinations {
    /// Creates a new builder-style object to manufacture [`ListDestinationsInput`](crate::input::ListDestinationsInput)
    pub fn builder() -> crate::input::list_destinations_input::Builder {
        crate::input::list_destinations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDestinations {
    type Output = std::result::Result<
        crate::output::ListDestinationsOutput,
        crate::error::ListDestinationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_destinations_error(response)
        } else {
            crate::operation_deser::parse_list_destinations_response(response)
        }
    }
}

/// <p>Lists the device profiles registered to your AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDeviceProfiles {
    _private: (),
}
impl ListDeviceProfiles {
    /// Creates a new builder-style object to manufacture [`ListDeviceProfilesInput`](crate::input::ListDeviceProfilesInput)
    pub fn builder() -> crate::input::list_device_profiles_input::Builder {
        crate::input::list_device_profiles_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDeviceProfiles {
    type Output = std::result::Result<
        crate::output::ListDeviceProfilesOutput,
        crate::error::ListDeviceProfilesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_device_profiles_error(response)
        } else {
            crate::operation_deser::parse_list_device_profiles_response(response)
        }
    }
}

/// <p>Lists the partner accounts associated with your AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPartnerAccounts {
    _private: (),
}
impl ListPartnerAccounts {
    /// Creates a new builder-style object to manufacture [`ListPartnerAccountsInput`](crate::input::ListPartnerAccountsInput)
    pub fn builder() -> crate::input::list_partner_accounts_input::Builder {
        crate::input::list_partner_accounts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPartnerAccounts {
    type Output = std::result::Result<
        crate::output::ListPartnerAccountsOutput,
        crate::error::ListPartnerAccountsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_partner_accounts_error(response)
        } else {
            crate::operation_deser::parse_list_partner_accounts_response(response)
        }
    }
}

/// <p>Lists the service profiles registered to your AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListServiceProfiles {
    _private: (),
}
impl ListServiceProfiles {
    /// Creates a new builder-style object to manufacture [`ListServiceProfilesInput`](crate::input::ListServiceProfilesInput)
    pub fn builder() -> crate::input::list_service_profiles_input::Builder {
        crate::input::list_service_profiles_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListServiceProfiles {
    type Output = std::result::Result<
        crate::output::ListServiceProfilesOutput,
        crate::error::ListServiceProfilesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_service_profiles_error(response)
        } else {
            crate::operation_deser::parse_list_service_profiles_response(response)
        }
    }
}

/// <p>Lists the tags (metadata) you have assigned to the resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Lists the wireless devices registered to your AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListWirelessDevices {
    _private: (),
}
impl ListWirelessDevices {
    /// Creates a new builder-style object to manufacture [`ListWirelessDevicesInput`](crate::input::ListWirelessDevicesInput)
    pub fn builder() -> crate::input::list_wireless_devices_input::Builder {
        crate::input::list_wireless_devices_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListWirelessDevices {
    type Output = std::result::Result<
        crate::output::ListWirelessDevicesOutput,
        crate::error::ListWirelessDevicesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_wireless_devices_error(response)
        } else {
            crate::operation_deser::parse_list_wireless_devices_response(response)
        }
    }
}

/// <p>Lists the wireless gateways registered to your AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListWirelessGateways {
    _private: (),
}
impl ListWirelessGateways {
    /// Creates a new builder-style object to manufacture [`ListWirelessGatewaysInput`](crate::input::ListWirelessGatewaysInput)
    pub fn builder() -> crate::input::list_wireless_gateways_input::Builder {
        crate::input::list_wireless_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListWirelessGateways {
    type Output = std::result::Result<
        crate::output::ListWirelessGatewaysOutput,
        crate::error::ListWirelessGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_wireless_gateways_error(response)
        } else {
            crate::operation_deser::parse_list_wireless_gateways_response(response)
        }
    }
}

/// <p>List the wireless gateway tasks definitions registered to your AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListWirelessGatewayTaskDefinitions {
    _private: (),
}
impl ListWirelessGatewayTaskDefinitions {
    /// Creates a new builder-style object to manufacture [`ListWirelessGatewayTaskDefinitionsInput`](crate::input::ListWirelessGatewayTaskDefinitionsInput)
    pub fn builder() -> crate::input::list_wireless_gateway_task_definitions_input::Builder {
        crate::input::list_wireless_gateway_task_definitions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListWirelessGatewayTaskDefinitions {
    type Output = std::result::Result<
        crate::output::ListWirelessGatewayTaskDefinitionsOutput,
        crate::error::ListWirelessGatewayTaskDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_wireless_gateway_task_definitions_error(response)
        } else {
            crate::operation_deser::parse_list_wireless_gateway_task_definitions_response(response)
        }
    }
}

/// <p>Sets the log-level override for a resource-ID and resource-type. This option can be specified for a wireless gateway
/// or a wireless device. A limit of 200 log level override can be set per account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutResourceLogLevel {
    _private: (),
}
impl PutResourceLogLevel {
    /// Creates a new builder-style object to manufacture [`PutResourceLogLevelInput`](crate::input::PutResourceLogLevelInput)
    pub fn builder() -> crate::input::put_resource_log_level_input::Builder {
        crate::input::put_resource_log_level_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutResourceLogLevel {
    type Output = std::result::Result<
        crate::output::PutResourceLogLevelOutput,
        crate::error::PutResourceLogLevelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_resource_log_level_error(response)
        } else {
            crate::operation_deser::parse_put_resource_log_level_response(response)
        }
    }
}

/// <p>Removes the log-level overrides for all resources; both wireless devices and wireless gateways.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetAllResourceLogLevels {
    _private: (),
}
impl ResetAllResourceLogLevels {
    /// Creates a new builder-style object to manufacture [`ResetAllResourceLogLevelsInput`](crate::input::ResetAllResourceLogLevelsInput)
    pub fn builder() -> crate::input::reset_all_resource_log_levels_input::Builder {
        crate::input::reset_all_resource_log_levels_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetAllResourceLogLevels {
    type Output = std::result::Result<
        crate::output::ResetAllResourceLogLevelsOutput,
        crate::error::ResetAllResourceLogLevelsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_reset_all_resource_log_levels_error(response)
        } else {
            crate::operation_deser::parse_reset_all_resource_log_levels_response(response)
        }
    }
}

/// <p>Removes the log-level override, if any, for a specific resource-ID and resource-type. It can be used for
/// a wireless device or a wireless gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetResourceLogLevel {
    _private: (),
}
impl ResetResourceLogLevel {
    /// Creates a new builder-style object to manufacture [`ResetResourceLogLevelInput`](crate::input::ResetResourceLogLevelInput)
    pub fn builder() -> crate::input::reset_resource_log_level_input::Builder {
        crate::input::reset_resource_log_level_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetResourceLogLevel {
    type Output = std::result::Result<
        crate::output::ResetResourceLogLevelOutput,
        crate::error::ResetResourceLogLevelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_reset_resource_log_level_error(response)
        } else {
            crate::operation_deser::parse_reset_resource_log_level_response(response)
        }
    }
}

/// <p>Sends a decrypted application data frame to a device.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendDataToWirelessDevice {
    _private: (),
}
impl SendDataToWirelessDevice {
    /// Creates a new builder-style object to manufacture [`SendDataToWirelessDeviceInput`](crate::input::SendDataToWirelessDeviceInput)
    pub fn builder() -> crate::input::send_data_to_wireless_device_input::Builder {
        crate::input::send_data_to_wireless_device_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendDataToWirelessDevice {
    type Output = std::result::Result<
        crate::output::SendDataToWirelessDeviceOutput,
        crate::error::SendDataToWirelessDeviceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_send_data_to_wireless_device_error(response)
        } else {
            crate::operation_deser::parse_send_data_to_wireless_device_response(response)
        }
    }
}

/// <p>Adds a tag to a resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Simulates a provisioned device by sending an uplink data payload of <code>Hello</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TestWirelessDevice {
    _private: (),
}
impl TestWirelessDevice {
    /// Creates a new builder-style object to manufacture [`TestWirelessDeviceInput`](crate::input::TestWirelessDeviceInput)
    pub fn builder() -> crate::input::test_wireless_device_input::Builder {
        crate::input::test_wireless_device_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TestWirelessDevice {
    type Output = std::result::Result<
        crate::output::TestWirelessDeviceOutput,
        crate::error::TestWirelessDeviceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_test_wireless_device_error(response)
        } else {
            crate::operation_deser::parse_test_wireless_device_response(response)
        }
    }
}

/// <p>Removes one or more tags from a resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates properties of a destination.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDestination {
    _private: (),
}
impl UpdateDestination {
    /// Creates a new builder-style object to manufacture [`UpdateDestinationInput`](crate::input::UpdateDestinationInput)
    pub fn builder() -> crate::input::update_destination_input::Builder {
        crate::input::update_destination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDestination {
    type Output = std::result::Result<
        crate::output::UpdateDestinationOutput,
        crate::error::UpdateDestinationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_destination_error(response)
        } else {
            crate::operation_deser::parse_update_destination_response(response)
        }
    }
}

/// <p>Set default log level, or log levels by resource types. This can be for wireless device log options or
/// wireless gateways log options and is used to control the log messages that'll be displayed in CloudWatch.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLogLevelsByResourceTypes {
    _private: (),
}
impl UpdateLogLevelsByResourceTypes {
    /// Creates a new builder-style object to manufacture [`UpdateLogLevelsByResourceTypesInput`](crate::input::UpdateLogLevelsByResourceTypesInput)
    pub fn builder() -> crate::input::update_log_levels_by_resource_types_input::Builder {
        crate::input::update_log_levels_by_resource_types_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateLogLevelsByResourceTypes {
    type Output = std::result::Result<
        crate::output::UpdateLogLevelsByResourceTypesOutput,
        crate::error::UpdateLogLevelsByResourceTypesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_log_levels_by_resource_types_error(response)
        } else {
            crate::operation_deser::parse_update_log_levels_by_resource_types_response(response)
        }
    }
}

/// <p>Updates properties of a partner account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePartnerAccount {
    _private: (),
}
impl UpdatePartnerAccount {
    /// Creates a new builder-style object to manufacture [`UpdatePartnerAccountInput`](crate::input::UpdatePartnerAccountInput)
    pub fn builder() -> crate::input::update_partner_account_input::Builder {
        crate::input::update_partner_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePartnerAccount {
    type Output = std::result::Result<
        crate::output::UpdatePartnerAccountOutput,
        crate::error::UpdatePartnerAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_partner_account_error(response)
        } else {
            crate::operation_deser::parse_update_partner_account_response(response)
        }
    }
}

/// <p>Updates properties of a wireless device.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWirelessDevice {
    _private: (),
}
impl UpdateWirelessDevice {
    /// Creates a new builder-style object to manufacture [`UpdateWirelessDeviceInput`](crate::input::UpdateWirelessDeviceInput)
    pub fn builder() -> crate::input::update_wireless_device_input::Builder {
        crate::input::update_wireless_device_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateWirelessDevice {
    type Output = std::result::Result<
        crate::output::UpdateWirelessDeviceOutput,
        crate::error::UpdateWirelessDeviceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_wireless_device_error(response)
        } else {
            crate::operation_deser::parse_update_wireless_device_response(response)
        }
    }
}

/// <p>Updates properties of a wireless gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWirelessGateway {
    _private: (),
}
impl UpdateWirelessGateway {
    /// Creates a new builder-style object to manufacture [`UpdateWirelessGatewayInput`](crate::input::UpdateWirelessGatewayInput)
    pub fn builder() -> crate::input::update_wireless_gateway_input::Builder {
        crate::input::update_wireless_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateWirelessGateway {
    type Output = std::result::Result<
        crate::output::UpdateWirelessGatewayOutput,
        crate::error::UpdateWirelessGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_wireless_gateway_error(response)
        } else {
            crate::operation_deser::parse_update_wireless_gateway_response(response)
        }
    }
}
