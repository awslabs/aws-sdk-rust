// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_gnss(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Gnss,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("Payload").string(input.payload.as_str());
    }
    if let Some(var_1) = &input.capture_time {
        object.key("CaptureTime").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.capture_time_accuracy {
        object.key("CaptureTimeAccuracy").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.assist_position {
        let mut array_4 = object.key("AssistPosition").start_array();
        for item_5 in var_3 {
            {
                array_4.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_5).into()),
                );
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.assist_altitude {
        object.key("AssistAltitude").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_6).into()),
        );
    }
    if input.use2_d_solver {
        object.key("Use2DSolver").boolean(input.use2_d_solver);
    }
    Ok(())
}
