// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_lo_ra_wan_device_profile(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::LoRaWanDeviceProfile,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if input.supports_class_b {
        object.key("SupportsClassB").boolean(input.supports_class_b);
    }
    if let Some(var_1) = &input.class_b_timeout {
        object.key("ClassBTimeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.ping_slot_period {
        object.key("PingSlotPeriod").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.ping_slot_dr {
        object.key("PingSlotDr").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.ping_slot_freq {
        object.key("PingSlotFreq").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if input.supports_class_c {
        object.key("SupportsClassC").boolean(input.supports_class_c);
    }
    if let Some(var_5) = &input.class_c_timeout {
        object.key("ClassCTimeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.mac_version {
        object.key("MacVersion").string(var_6.as_str());
    }
    if let Some(var_7) = &input.reg_params_revision {
        object.key("RegParamsRevision").string(var_7.as_str());
    }
    if let Some(var_8) = &input.rx_delay1 {
        object.key("RxDelay1").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.rx_dr_offset1 {
        object.key("RxDrOffset1").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.rx_data_rate2 {
        object.key("RxDataRate2").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.rx_freq2 {
        object.key("RxFreq2").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.factory_preset_freqs_list {
        let mut array_13 = object.key("FactoryPresetFreqsList").start_array();
        for item_14 in var_12 {
            {
                array_13.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::NegInt((*item_14).into()),
                );
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.max_eirp {
        object.key("MaxEirp").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.max_duty_cycle {
        object.key("MaxDutyCycle").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.rf_region {
        object.key("RfRegion").string(var_17.as_str());
    }
    if let Some(var_18) = &input.supports_join {
        object.key("SupportsJoin").boolean(*var_18);
    }
    if input.supports32_bit_f_cnt {
        object.key("Supports32BitFCnt").boolean(input.supports32_bit_f_cnt);
    }
    Ok(())
}

pub(crate) fn de_lo_ra_wan_device_profile<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::LoRaWanDeviceProfile>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::LoRaWanDeviceProfileBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "SupportsClassB" => {
                            builder = builder.set_supports_class_b(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ClassBTimeout" => {
                            builder = builder.set_class_b_timeout(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "PingSlotPeriod" => {
                            builder = builder.set_ping_slot_period(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "PingSlotDr" => {
                            builder = builder.set_ping_slot_dr(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "PingSlotFreq" => {
                            builder = builder.set_ping_slot_freq(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "SupportsClassC" => {
                            builder = builder.set_supports_class_c(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ClassCTimeout" => {
                            builder = builder.set_class_c_timeout(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "MacVersion" => {
                            builder = builder.set_mac_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RegParamsRevision" => {
                            builder = builder.set_reg_params_revision(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RxDelay1" => {
                            builder = builder.set_rx_delay1(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "RxDrOffset1" => {
                            builder = builder.set_rx_dr_offset1(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "RxDataRate2" => {
                            builder = builder.set_rx_data_rate2(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "RxFreq2" => {
                            builder = builder.set_rx_freq2(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "FactoryPresetFreqsList" => {
                            builder = builder.set_factory_preset_freqs_list(
                                crate::protocol_serde::shape_factory_preset_freqs_list::de_factory_preset_freqs_list(tokens)?,
                            );
                        }
                        "MaxEirp" => {
                            builder = builder.set_max_eirp(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "MaxDutyCycle" => {
                            builder = builder.set_max_duty_cycle(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "RfRegion" => {
                            builder = builder.set_rf_region(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SupportsJoin" => {
                            builder = builder.set_supports_join(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Supports32BitFCnt" => {
                            builder = builder.set_supports32_bit_f_cnt(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
