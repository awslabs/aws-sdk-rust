// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_lo_ra_wan_device(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::LoRaWanDevice,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.dev_eui {
        object.key("DevEui").string(var_1.as_str());
    }
    if let Some(var_2) = &input.device_profile_id {
        object.key("DeviceProfileId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.service_profile_id {
        object.key("ServiceProfileId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.otaa_v1_1 {
        #[allow(unused_mut)]
        let mut object_5 = object.key("OtaaV1_1").start_object();
        crate::protocol_serde::shape_otaa_v1_1::ser_otaa_v1_1(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.otaa_v1_0_x {
        #[allow(unused_mut)]
        let mut object_7 = object.key("OtaaV1_0_x").start_object();
        crate::protocol_serde::shape_otaa_v1_0_x::ser_otaa_v1_0_x(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.abp_v1_1 {
        #[allow(unused_mut)]
        let mut object_9 = object.key("AbpV1_1").start_object();
        crate::protocol_serde::shape_abp_v1_1::ser_abp_v1_1(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.abp_v1_0_x {
        #[allow(unused_mut)]
        let mut object_11 = object.key("AbpV1_0_x").start_object();
        crate::protocol_serde::shape_abp_v1_0_x::ser_abp_v1_0_x(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.f_ports {
        #[allow(unused_mut)]
        let mut object_13 = object.key("FPorts").start_object();
        crate::protocol_serde::shape_f_ports::ser_f_ports(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}

pub(crate) fn de_lo_ra_wan_device<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::LoRaWanDevice>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::LoRaWanDeviceBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DevEui" => {
                            builder = builder.set_dev_eui(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DeviceProfileId" => {
                            builder = builder.set_device_profile_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ServiceProfileId" => {
                            builder = builder.set_service_profile_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "OtaaV1_1" => {
                            builder = builder.set_otaa_v1_1(crate::protocol_serde::shape_otaa_v1_1::de_otaa_v1_1(tokens)?);
                        }
                        "OtaaV1_0_x" => {
                            builder = builder.set_otaa_v1_0_x(crate::protocol_serde::shape_otaa_v1_0_x::de_otaa_v1_0_x(tokens)?);
                        }
                        "AbpV1_1" => {
                            builder = builder.set_abp_v1_1(crate::protocol_serde::shape_abp_v1_1::de_abp_v1_1(tokens)?);
                        }
                        "AbpV1_0_x" => {
                            builder = builder.set_abp_v1_0_x(crate::protocol_serde::shape_abp_v1_0_x::de_abp_v1_0_x(tokens)?);
                        }
                        "FPorts" => {
                            builder = builder.set_f_ports(crate::protocol_serde::shape_f_ports::de_f_ports(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
