// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_cdma_obj(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CdmaObj,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.system_id {
        object.key("SystemId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.network_id {
        object.key("NetworkId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.base_station_id {
        object.key("BaseStationId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.registration_zone {
        object.key("RegistrationZone").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.cdma_local_id {
        #[allow(unused_mut)]
        let mut object_6 = object.key("CdmaLocalId").start_object();
        crate::protocol_serde::shape_cdma_local_id::ser_cdma_local_id(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.pilot_power {
        object.key("PilotPower").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.base_lat {
        object.key("BaseLat").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.base_lng {
        object.key("BaseLng").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.cdma_nmr {
        let mut array_11 = object.key("CdmaNmr").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_cdma_nmr_obj::ser_cdma_nmr_obj(
                    &mut object_13,
                    item_12,
                )?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}
