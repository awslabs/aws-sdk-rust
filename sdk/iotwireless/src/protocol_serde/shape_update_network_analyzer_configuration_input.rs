// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_network_analyzer_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_network_analyzer_configuration::UpdateNetworkAnalyzerConfigurationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.trace_content {
        #[allow(unused_mut)]
        let mut object_3 = object.key("TraceContent").start_object();
        crate::protocol_serde::shape_trace_content::ser_trace_content(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.wireless_devices_to_add {
        let mut array_5 = object.key("WirelessDevicesToAdd").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.wireless_devices_to_remove {
        let mut array_8 = object.key("WirelessDevicesToRemove").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.wireless_gateways_to_add {
        let mut array_11 = object.key("WirelessGatewaysToAdd").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.wireless_gateways_to_remove {
        let mut array_14 = object.key("WirelessGatewaysToRemove").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    Ok(())
}
