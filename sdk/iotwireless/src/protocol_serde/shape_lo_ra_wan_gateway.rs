// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_lo_ra_wan_gateway(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::LoRaWanGateway,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.gateway_eui {
        object.key("GatewayEui").string(var_1.as_str());
    }
    if let Some(var_2) = &input.rf_region {
        object.key("RfRegion").string(var_2.as_str());
    }
    if let Some(var_3) = &input.join_eui_filters {
        let mut array_4 = object.key("JoinEuiFilters").start_array();
        for item_5 in var_3 {
            {
                let mut array_6 = array_4.value().start_array();
                for item_7 in item_5 {
                    {
                        array_6.value().string(item_7.as_str());
                    }
                }
                array_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_8) = &input.net_id_filters {
        let mut array_9 = object.key("NetIdFilters").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.sub_bands {
        let mut array_12 = object.key("SubBands").start_array();
        for item_13 in var_11 {
            {
                array_12.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_13).into()),
                );
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.beaconing {
        #[allow(unused_mut)]
        let mut object_15 = object.key("Beaconing").start_object();
        crate::protocol_serde::shape_beaconing::ser_beaconing(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}

pub(crate) fn de_lo_ra_wan_gateway<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::LoRaWanGateway>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::LoRaWanGatewayBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "GatewayEui" => {
                                builder = builder.set_gateway_eui(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RfRegion" => {
                                builder = builder.set_rf_region(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "JoinEuiFilters" => {
                                builder = builder.set_join_eui_filters(
                                    crate::protocol_serde::shape_join_eui_filters::de_join_eui_filters(tokens)?
                                );
                            }
                            "NetIdFilters" => {
                                builder = builder.set_net_id_filters(
                                    crate::protocol_serde::shape_net_id_filters::de_net_id_filters(
                                        tokens,
                                    )?,
                                );
                            }
                            "SubBands" => {
                                builder = builder.set_sub_bands(
                                    crate::protocol_serde::shape_sub_bands::de_sub_bands(tokens)?,
                                );
                            }
                            "Beaconing" => {
                                builder = builder.set_beaconing(
                                    crate::protocol_serde::shape_beaconing::de_beaconing(tokens)?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
