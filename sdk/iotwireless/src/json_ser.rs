// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_aws_account_with_partner_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateAwsAccountWithPartnerAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.sidewalk {
        let mut object_3 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_account_info(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.tags {
        let mut array_5 = object.key("Tags").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_multicast_group_with_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateMulticastGroupWithFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.multicast_group_id {
        object.key("MulticastGroupId").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_device_with_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessDeviceWithFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.wireless_device_id {
        object.key("WirelessDeviceId").string(var_9.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_device_with_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessDeviceWithMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.wireless_device_id {
        object.key("WirelessDeviceId").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_device_with_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessDeviceWithThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.thing_arn {
        object.key("ThingArn").string(var_11.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_gateway_with_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessGatewayWithCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.iot_certificate_id {
        object.key("IotCertificateId").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_wireless_gateway_with_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWirelessGatewayWithThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.thing_arn {
        object.key("ThingArn").string(var_13.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_14.as_str());
    }
    if let Some(var_15) = &input.description {
        object.key("Description").string(var_15.as_str());
    }
    if let Some(var_16) = &input.expression {
        object.key("Expression").string(var_16.as_str());
    }
    if let Some(var_17) = &input.expression_type {
        object.key("ExpressionType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.name {
        object.key("Name").string(var_18.as_str());
    }
    if let Some(var_19) = &input.role_arn {
        object.key("RoleArn").string(var_19.as_str());
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_device_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_24.as_str());
    }
    if let Some(var_25) = &input.lo_ra_wan {
        let mut object_26 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_device_profile(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.name {
        object.key("Name").string(var_27.as_str());
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("Tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_32.as_str());
    }
    if let Some(var_33) = &input.description {
        object.key("Description").string(var_33.as_str());
    }
    if let Some(var_34) = &input.firmware_update_image {
        object.key("FirmwareUpdateImage").string(var_34.as_str());
    }
    if let Some(var_35) = &input.firmware_update_role {
        object.key("FirmwareUpdateRole").string(var_35.as_str());
    }
    if let Some(var_36) = &input.lo_ra_wan {
        let mut object_37 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_fuota_task(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if let Some(var_38) = &input.name {
        object.key("Name").string(var_38.as_str());
    }
    if let Some(var_39) = &input.tags {
        let mut array_40 = object.key("Tags").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_42, item_41)?;
                object_42.finish();
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_43.as_str());
    }
    if let Some(var_44) = &input.description {
        object.key("Description").string(var_44.as_str());
    }
    if let Some(var_45) = &input.lo_ra_wan {
        let mut object_46 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast(
            &mut object_46,
            var_45,
        )?;
        object_46.finish();
    }
    if let Some(var_47) = &input.name {
        object.key("Name").string(var_47.as_str());
    }
    if let Some(var_48) = &input.tags {
        let mut array_49 = object.key("Tags").start_array();
        for item_50 in var_48 {
            {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_51, item_50)?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_service_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServiceProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_52.as_str());
    }
    if let Some(var_53) = &input.lo_ra_wan {
        let mut object_54 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_service_profile(
            &mut object_54,
            var_53,
        )?;
        object_54.finish();
    }
    if let Some(var_55) = &input.name {
        object.key("Name").string(var_55.as_str());
    }
    if let Some(var_56) = &input.tags {
        let mut array_57 = object.key("Tags").start_array();
        for item_58 in var_56 {
            {
                let mut object_59 = array_57.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_59, item_58)?;
                object_59.finish();
            }
        }
        array_57.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_60.as_str());
    }
    if let Some(var_61) = &input.description {
        object.key("Description").string(var_61.as_str());
    }
    if let Some(var_62) = &input.destination_name {
        object.key("DestinationName").string(var_62.as_str());
    }
    if let Some(var_63) = &input.lo_ra_wan {
        let mut object_64 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_device(&mut object_64, var_63)?;
        object_64.finish();
    }
    if let Some(var_65) = &input.name {
        object.key("Name").string(var_65.as_str());
    }
    if let Some(var_66) = &input.tags {
        let mut array_67 = object.key("Tags").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_69, item_68)?;
                object_69.finish();
            }
        }
        array_67.finish();
    }
    if let Some(var_70) = &input.r#type {
        object.key("Type").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_gateway_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessGatewayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_71.as_str());
    }
    if let Some(var_72) = &input.description {
        object.key("Description").string(var_72.as_str());
    }
    if let Some(var_73) = &input.lo_ra_wan {
        let mut object_74 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_gateway(&mut object_74, var_73)?;
        object_74.finish();
    }
    if let Some(var_75) = &input.name {
        object.key("Name").string(var_75.as_str());
    }
    if let Some(var_76) = &input.tags {
        let mut array_77 = object.key("Tags").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_79, item_78)?;
                object_79.finish();
            }
        }
        array_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_gateway_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessGatewayTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.wireless_gateway_task_definition_id {
        object
            .key("WirelessGatewayTaskDefinitionId")
            .string(var_80.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_wireless_gateway_task_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWirelessGatewayTaskDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("AutoCreateTasks")
            .boolean(input.auto_create_tasks);
    }
    if let Some(var_81) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_81.as_str());
    }
    if let Some(var_82) = &input.name {
        object.key("Name").string(var_82.as_str());
    }
    if let Some(var_83) = &input.tags {
        let mut array_84 = object.key("Tags").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_86, item_85)?;
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.update {
        let mut object_88 = object.key("Update").start_object();
        crate::json_ser::serialize_structure_crate_model_update_wireless_gateway_task_create(
            &mut object_88,
            var_87,
        )?;
        object_88.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_log_level_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourceLogLevelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.log_level {
        object.key("LogLevel").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_data_to_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendDataToMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.payload_data {
        object.key("PayloadData").string(var_90.as_str());
    }
    if let Some(var_91) = &input.wireless_metadata {
        let mut object_92 = object.key("WirelessMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_multicast_wireless_metadata(
            &mut object_92,
            var_91,
        )?;
        object_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_data_to_wireless_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendDataToWirelessDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.payload_data {
        object.key("PayloadData").string(var_93.as_str());
    }
    if let Some(var_94) = &input.transmit_mode {
        object.key("TransmitMode").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    if let Some(var_95) = &input.wireless_metadata {
        let mut object_96 = object.key("WirelessMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_wireless_metadata(&mut object_96, var_95)?;
        object_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_bulk_associate_wireless_device_with_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBulkAssociateWirelessDeviceWithMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.query_string {
        object.key("QueryString").string(var_97.as_str());
    }
    if let Some(var_98) = &input.tags {
        let mut array_99 = object.key("Tags").start_array();
        for item_100 in var_98 {
            {
                let mut object_101 = array_99.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_101, item_100)?;
                object_101.finish();
            }
        }
        array_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_bulk_disassociate_wireless_device_from_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBulkDisassociateWirelessDeviceFromMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.query_string {
        object.key("QueryString").string(var_102.as_str());
    }
    if let Some(var_103) = &input.tags {
        let mut array_104 = object.key("Tags").start_array();
        for item_105 in var_103 {
            {
                let mut object_106 = array_104.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_106, item_105)?;
                object_106.finish();
            }
        }
        array_104.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.lo_ra_wan {
        let mut object_108 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_start_fuota_task(
            &mut object_108,
            var_107,
        )?;
        object_108.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_multicast_group_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMulticastGroupSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.lo_ra_wan {
        let mut object_110 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast_session(
            &mut object_110,
            var_109,
        )?;
        object_110.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.tags {
        let mut array_112 = object.key("Tags").start_array();
        for item_113 in var_111 {
            {
                let mut object_114 = array_112.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_114, item_113)?;
                object_114.finish();
            }
        }
        array_112.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.description {
        object.key("Description").string(var_115.as_str());
    }
    if let Some(var_116) = &input.expression {
        object.key("Expression").string(var_116.as_str());
    }
    if let Some(var_117) = &input.expression_type {
        object.key("ExpressionType").string(var_117.as_str());
    }
    if let Some(var_118) = &input.role_arn {
        object.key("RoleArn").string(var_118.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_fuota_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFuotaTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.description {
        object.key("Description").string(var_119.as_str());
    }
    if let Some(var_120) = &input.firmware_update_image {
        object.key("FirmwareUpdateImage").string(var_120.as_str());
    }
    if let Some(var_121) = &input.firmware_update_role {
        object.key("FirmwareUpdateRole").string(var_121.as_str());
    }
    if let Some(var_122) = &input.lo_ra_wan {
        let mut object_123 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_fuota_task(
            &mut object_123,
            var_122,
        )?;
        object_123.finish();
    }
    if let Some(var_124) = &input.name {
        object.key("Name").string(var_124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_log_levels_by_resource_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLogLevelsByResourceTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.default_log_level {
        object.key("DefaultLogLevel").string(var_125.as_str());
    }
    if let Some(var_126) = &input.wireless_device_log_options {
        let mut array_127 = object.key("WirelessDeviceLogOptions").start_array();
        for item_128 in var_126 {
            {
                let mut object_129 = array_127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_device_log_option(
                    &mut object_129,
                    item_128,
                )?;
                object_129.finish();
            }
        }
        array_127.finish();
    }
    if let Some(var_130) = &input.wireless_gateway_log_options {
        let mut array_131 = object.key("WirelessGatewayLogOptions").start_array();
        for item_132 in var_130 {
            {
                let mut object_133 = array_131.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_gateway_log_option(
                    &mut object_133,
                    item_132,
                )?;
                object_133.finish();
            }
        }
        array_131.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_multicast_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMulticastGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.description {
        object.key("Description").string(var_134.as_str());
    }
    if let Some(var_135) = &input.lo_ra_wan {
        let mut object_136 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast(
            &mut object_136,
            var_135,
        )?;
        object_136.finish();
    }
    if let Some(var_137) = &input.name {
        object.key("Name").string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_network_analyzer_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNetworkAnalyzerConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.trace_content {
        let mut object_139 = object.key("TraceContent").start_object();
        crate::json_ser::serialize_structure_crate_model_trace_content(&mut object_139, var_138)?;
        object_139.finish();
    }
    if let Some(var_140) = &input.wireless_devices_to_add {
        let mut array_141 = object.key("WirelessDevicesToAdd").start_array();
        for item_142 in var_140 {
            {
                array_141.value().string(item_142.as_str());
            }
        }
        array_141.finish();
    }
    if let Some(var_143) = &input.wireless_devices_to_remove {
        let mut array_144 = object.key("WirelessDevicesToRemove").start_array();
        for item_145 in var_143 {
            {
                array_144.value().string(item_145.as_str());
            }
        }
        array_144.finish();
    }
    if let Some(var_146) = &input.wireless_gateways_to_add {
        let mut array_147 = object.key("WirelessGatewaysToAdd").start_array();
        for item_148 in var_146 {
            {
                array_147.value().string(item_148.as_str());
            }
        }
        array_147.finish();
    }
    if let Some(var_149) = &input.wireless_gateways_to_remove {
        let mut array_150 = object.key("WirelessGatewaysToRemove").start_array();
        for item_151 in var_149 {
            {
                array_150.value().string(item_151.as_str());
            }
        }
        array_150.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partner_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePartnerAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.sidewalk {
        let mut object_153 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_update_account(
            &mut object_153,
            var_152,
        )?;
        object_153.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_event_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceEventConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_154) = &input.device_registration_state {
        let mut object_155 = object.key("DeviceRegistrationState").start_object();
        crate::json_ser::serialize_structure_crate_model_device_registration_state_event_configuration(&mut object_155, var_154)?;
        object_155.finish();
    }
    if let Some(var_156) = &input.proximity {
        let mut object_157 = object.key("Proximity").start_object();
        crate::json_ser::serialize_structure_crate_model_proximity_event_configuration(
            &mut object_157,
            var_156,
        )?;
        object_157.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_wireless_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWirelessDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.description {
        object.key("Description").string(var_158.as_str());
    }
    if let Some(var_159) = &input.destination_name {
        object.key("DestinationName").string(var_159.as_str());
    }
    if let Some(var_160) = &input.lo_ra_wan {
        let mut object_161 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_update_device(
            &mut object_161,
            var_160,
        )?;
        object_161.finish();
    }
    if let Some(var_162) = &input.name {
        object.key("Name").string(var_162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_wireless_gateway_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWirelessGatewayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.description {
        object.key("Description").string(var_163.as_str());
    }
    if let Some(var_164) = &input.join_eui_filters {
        let mut array_165 = object.key("JoinEuiFilters").start_array();
        for item_166 in var_164 {
            {
                let mut array_167 = array_165.value().start_array();
                for item_168 in item_166 {
                    {
                        array_167.value().string(item_168.as_str());
                    }
                }
                array_167.finish();
            }
        }
        array_165.finish();
    }
    if let Some(var_169) = &input.name {
        object.key("Name").string(var_169.as_str());
    }
    if let Some(var_170) = &input.net_id_filters {
        let mut array_171 = object.key("NetIdFilters").start_array();
        for item_172 in var_170 {
            {
                array_171.value().string(item_172.as_str());
            }
        }
        array_171.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_account_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkAccountInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.amazon_id {
        object.key("AmazonId").string(var_173.as_str());
    }
    if let Some(var_174) = &input.app_server_private_key {
        object.key("AppServerPrivateKey").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.key {
        object.key("Key").string(var_175.as_str());
    }
    if let Some(var_176) = &input.value {
        object.key("Value").string(var_176.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_device_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanDeviceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.supports_class_b {
        object.key("SupportsClassB").boolean(input.supports_class_b);
    }
    if let Some(var_177) = &input.class_b_timeout {
        object.key("ClassBTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_177).into()),
        );
    }
    if let Some(var_178) = &input.ping_slot_period {
        object.key("PingSlotPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_178).into()),
        );
    }
    if let Some(var_179) = &input.ping_slot_dr {
        object.key("PingSlotDr").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_179).into()),
        );
    }
    if let Some(var_180) = &input.ping_slot_freq {
        object.key("PingSlotFreq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_180).into()),
        );
    }
    if input.supports_class_c {
        object.key("SupportsClassC").boolean(input.supports_class_c);
    }
    if let Some(var_181) = &input.class_c_timeout {
        object.key("ClassCTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_181).into()),
        );
    }
    if let Some(var_182) = &input.mac_version {
        object.key("MacVersion").string(var_182.as_str());
    }
    if let Some(var_183) = &input.reg_params_revision {
        object.key("RegParamsRevision").string(var_183.as_str());
    }
    if let Some(var_184) = &input.rx_delay1 {
        object.key("RxDelay1").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_184).into()),
        );
    }
    if let Some(var_185) = &input.rx_dr_offset1 {
        object.key("RxDrOffset1").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_185).into()),
        );
    }
    if let Some(var_186) = &input.rx_data_rate2 {
        object.key("RxDataRate2").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_186).into()),
        );
    }
    if let Some(var_187) = &input.rx_freq2 {
        object.key("RxFreq2").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_187).into()),
        );
    }
    if let Some(var_188) = &input.factory_preset_freqs_list {
        let mut array_189 = object.key("FactoryPresetFreqsList").start_array();
        for item_190 in var_188 {
            {
                array_189.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_190).into()),
                );
            }
        }
        array_189.finish();
    }
    if let Some(var_191) = &input.max_eirp {
        object.key("MaxEirp").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    if let Some(var_192) = &input.max_duty_cycle {
        object.key("MaxDutyCycle").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_192).into()),
        );
    }
    if let Some(var_193) = &input.rf_region {
        object.key("RfRegion").string(var_193.as_str());
    }
    if let Some(var_194) = &input.supports_join {
        object.key("SupportsJoin").boolean(*var_194);
    }
    if input.supports32_bit_f_cnt {
        object
            .key("Supports32BitFCnt")
            .boolean(input.supports32_bit_f_cnt);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_fuota_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanFuotaTask,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.rf_region {
        object.key("RfRegion").string(var_195.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_multicast(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanMulticast,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.rf_region {
        object.key("RfRegion").string(var_196.as_str());
    }
    if let Some(var_197) = &input.dl_class {
        object.key("DlClass").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_service_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanServiceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.add_gw_metadata {
        object.key("AddGwMetadata").boolean(input.add_gw_metadata);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.dev_eui {
        object.key("DevEui").string(var_198.as_str());
    }
    if let Some(var_199) = &input.device_profile_id {
        object.key("DeviceProfileId").string(var_199.as_str());
    }
    if let Some(var_200) = &input.service_profile_id {
        object.key("ServiceProfileId").string(var_200.as_str());
    }
    if let Some(var_201) = &input.otaa_v1_1 {
        let mut object_202 = object.key("OtaaV1_1").start_object();
        crate::json_ser::serialize_structure_crate_model_otaa_v11(&mut object_202, var_201)?;
        object_202.finish();
    }
    if let Some(var_203) = &input.otaa_v1_0_x {
        let mut object_204 = object.key("OtaaV1_0_x").start_object();
        crate::json_ser::serialize_structure_crate_model_otaa_v10_x(&mut object_204, var_203)?;
        object_204.finish();
    }
    if let Some(var_205) = &input.abp_v1_1 {
        let mut object_206 = object.key("AbpV1_1").start_object();
        crate::json_ser::serialize_structure_crate_model_abp_v11(&mut object_206, var_205)?;
        object_206.finish();
    }
    if let Some(var_207) = &input.abp_v1_0_x {
        let mut object_208 = object.key("AbpV1_0_x").start_object();
        crate::json_ser::serialize_structure_crate_model_abp_v10_x(&mut object_208, var_207)?;
        object_208.finish();
    }
    if let Some(var_209) = &input.f_ports {
        let mut object_210 = object.key("FPorts").start_object();
        crate::json_ser::serialize_structure_crate_model_f_ports(&mut object_210, var_209)?;
        object_210.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_gateway(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanGateway,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.gateway_eui {
        object.key("GatewayEui").string(var_211.as_str());
    }
    if let Some(var_212) = &input.rf_region {
        object.key("RfRegion").string(var_212.as_str());
    }
    if let Some(var_213) = &input.join_eui_filters {
        let mut array_214 = object.key("JoinEuiFilters").start_array();
        for item_215 in var_213 {
            {
                let mut array_216 = array_214.value().start_array();
                for item_217 in item_215 {
                    {
                        array_216.value().string(item_217.as_str());
                    }
                }
                array_216.finish();
            }
        }
        array_214.finish();
    }
    if let Some(var_218) = &input.net_id_filters {
        let mut array_219 = object.key("NetIdFilters").start_array();
        for item_220 in var_218 {
            {
                array_219.value().string(item_220.as_str());
            }
        }
        array_219.finish();
    }
    if let Some(var_221) = &input.sub_bands {
        let mut array_222 = object.key("SubBands").start_array();
        for item_223 in var_221 {
            {
                array_222.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_223).into()),
                );
            }
        }
        array_222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_wireless_gateway_task_create(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateWirelessGatewayTaskCreate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.update_data_source {
        object.key("UpdateDataSource").string(var_224.as_str());
    }
    if let Some(var_225) = &input.update_data_role {
        object.key("UpdateDataRole").string(var_225.as_str());
    }
    if let Some(var_226) = &input.lo_ra_wan {
        let mut object_227 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_update_gateway_task_create(
            &mut object_227,
            var_226,
        )?;
        object_227.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multicast_wireless_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MulticastWirelessMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.lo_ra_wan {
        let mut object_229 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_multicast_metadata(
            &mut object_229,
            var_228,
        )?;
        object_229.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.lo_ra_wan {
        let mut object_231 = object.key("LoRaWAN").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_send_data_to_device(
            &mut object_231,
            var_230,
        )?;
        object_231.finish();
    }
    if let Some(var_232) = &input.sidewalk {
        let mut object_233 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_send_data_to_device(
            &mut object_233,
            var_232,
        )?;
        object_233.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_start_fuota_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanStartFuotaTask,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_234) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_234, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_multicast_session(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanMulticastSession,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.dl_dr {
        object.key("DlDr").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    if let Some(var_236) = &input.dl_freq {
        object.key("DlFreq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_236).into()),
        );
    }
    if let Some(var_237) = &input.session_start_time {
        object
            .key("SessionStartTime")
            .date_time(var_237, aws_smithy_types::date_time::Format::DateTime)?;
    }
    if let Some(var_238) = &input.session_timeout {
        object.key("SessionTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_238).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_device_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessDeviceLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_239) = &input.r#type {
        object.key("Type").string(var_239.as_str());
    }
    if let Some(var_240) = &input.log_level {
        object.key("LogLevel").string(var_240.as_str());
    }
    if let Some(var_241) = &input.events {
        let mut array_242 = object.key("Events").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_device_event_log_option(
                    &mut object_244,
                    item_243,
                )?;
                object_244.finish();
            }
        }
        array_242.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_gateway_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessGatewayLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_245) = &input.r#type {
        object.key("Type").string(var_245.as_str());
    }
    if let Some(var_246) = &input.log_level {
        object.key("LogLevel").string(var_246.as_str());
    }
    if let Some(var_247) = &input.events {
        let mut array_248 = object.key("Events").start_array();
        for item_249 in var_247 {
            {
                let mut object_250 = array_248.value().start_object();
                crate::json_ser::serialize_structure_crate_model_wireless_gateway_event_log_option(
                    &mut object_250,
                    item_249,
                )?;
                object_250.finish();
            }
        }
        array_248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trace_content(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TraceContent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.wireless_device_frame_info {
        object
            .key("WirelessDeviceFrameInfo")
            .string(var_251.as_str());
    }
    if let Some(var_252) = &input.log_level {
        object.key("LogLevel").string(var_252.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_update_account(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkUpdateAccount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_253) = &input.app_server_private_key {
        object.key("AppServerPrivateKey").string(var_253.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_registration_state_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeviceRegistrationStateEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.sidewalk {
        let mut object_255 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_event_notification_configurations(&mut object_255, var_254)?;
        object_255.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proximity_event_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProximityEventConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_256) = &input.sidewalk {
        let mut object_257 = object.key("Sidewalk").start_object();
        crate::json_ser::serialize_structure_crate_model_sidewalk_event_notification_configurations(&mut object_257, var_256)?;
        object_257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_update_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanUpdateDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_258) = &input.device_profile_id {
        object.key("DeviceProfileId").string(var_258.as_str());
    }
    if let Some(var_259) = &input.service_profile_id {
        object.key("ServiceProfileId").string(var_259.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_otaa_v11(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OtaaV11,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.app_key {
        object.key("AppKey").string(var_260.as_str());
    }
    if let Some(var_261) = &input.nwk_key {
        object.key("NwkKey").string(var_261.as_str());
    }
    if let Some(var_262) = &input.join_eui {
        object.key("JoinEui").string(var_262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_otaa_v10_x(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OtaaV10X,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.app_key {
        object.key("AppKey").string(var_263.as_str());
    }
    if let Some(var_264) = &input.app_eui {
        object.key("AppEui").string(var_264.as_str());
    }
    if let Some(var_265) = &input.gen_app_key {
        object.key("GenAppKey").string(var_265.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_abp_v11(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbpV11,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.dev_addr {
        object.key("DevAddr").string(var_266.as_str());
    }
    if let Some(var_267) = &input.session_keys {
        let mut object_268 = object.key("SessionKeys").start_object();
        crate::json_ser::serialize_structure_crate_model_session_keys_abp_v11(
            &mut object_268,
            var_267,
        )?;
        object_268.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_abp_v10_x(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbpV10X,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.dev_addr {
        object.key("DevAddr").string(var_269.as_str());
    }
    if let Some(var_270) = &input.session_keys {
        let mut object_271 = object.key("SessionKeys").start_object();
        crate::json_ser::serialize_structure_crate_model_session_keys_abp_v10_x(
            &mut object_271,
            var_270,
        )?;
        object_271.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_f_ports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FPorts,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.fuota {
        object.key("Fuota").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_272).into()),
        );
    }
    if let Some(var_273) = &input.multicast {
        object.key("Multicast").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_273).into()),
        );
    }
    if let Some(var_274) = &input.clock_sync {
        object.key("ClockSync").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_274).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_update_gateway_task_create(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanUpdateGatewayTaskCreate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.update_signature {
        object.key("UpdateSignature").string(var_275.as_str());
    }
    if let Some(var_276) = &input.sig_key_crc {
        object.key("SigKeyCrc").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_276).into()),
        );
    }
    if let Some(var_277) = &input.current_version {
        let mut object_278 = object.key("CurrentVersion").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_gateway_version(
            &mut object_278,
            var_277,
        )?;
        object_278.finish();
    }
    if let Some(var_279) = &input.update_version {
        let mut object_280 = object.key("UpdateVersion").start_object();
        crate::json_ser::serialize_structure_crate_model_lo_ra_wan_gateway_version(
            &mut object_280,
            var_279,
        )?;
        object_280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_multicast_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanMulticastMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.f_port {
        object.key("FPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_281).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_send_data_to_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanSendDataToDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.f_port {
        object.key("FPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_282).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_send_data_to_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkSendDataToDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.seq {
        object.key("Seq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_283).into()),
        );
    }
    if let Some(var_284) = &input.message_type {
        object.key("MessageType").string(var_284.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_device_event_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessDeviceEventLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.event {
        object.key("Event").string(var_285.as_str());
    }
    if let Some(var_286) = &input.log_level {
        object.key("LogLevel").string(var_286.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wireless_gateway_event_log_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WirelessGatewayEventLogOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_287) = &input.event {
        object.key("Event").string(var_287.as_str());
    }
    if let Some(var_288) = &input.log_level {
        object.key("LogLevel").string(var_288.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sidewalk_event_notification_configurations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SidewalkEventNotificationConfigurations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.amazon_id_event_topic {
        object.key("AmazonIdEventTopic").string(var_289.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_keys_abp_v11(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionKeysAbpV11,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_290) = &input.f_nwk_s_int_key {
        object.key("FNwkSIntKey").string(var_290.as_str());
    }
    if let Some(var_291) = &input.s_nwk_s_int_key {
        object.key("SNwkSIntKey").string(var_291.as_str());
    }
    if let Some(var_292) = &input.nwk_s_enc_key {
        object.key("NwkSEncKey").string(var_292.as_str());
    }
    if let Some(var_293) = &input.app_s_key {
        object.key("AppSKey").string(var_293.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_keys_abp_v10_x(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionKeysAbpV10X,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_294) = &input.nwk_s_key {
        object.key("NwkSKey").string(var_294.as_str());
    }
    if let Some(var_295) = &input.app_s_key {
        object.key("AppSKey").string(var_295.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lo_ra_wan_gateway_version(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoRaWanGatewayVersion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.package_version {
        object.key("PackageVersion").string(var_296.as_str());
    }
    if let Some(var_297) = &input.model {
        object.key("Model").string(var_297.as_str());
    }
    if let Some(var_298) = &input.station {
        object.key("Station").string(var_298.as_str());
    }
    Ok(())
}
