// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_event_configuration_by_resource_types::_update_event_configuration_by_resource_types_output::UpdateEventConfigurationByResourceTypesOutputBuilder;

pub use crate::operation::update_event_configuration_by_resource_types::_update_event_configuration_by_resource_types_input::UpdateEventConfigurationByResourceTypesInputBuilder;

impl UpdateEventConfigurationByResourceTypesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_event_configuration_by_resource_types();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateEventConfigurationByResourceTypes`.
///
/// <p>Update the event configuration based on resource types.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateEventConfigurationByResourceTypesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_event_configuration_by_resource_types::builders::UpdateEventConfigurationByResourceTypesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesOutput,
        crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError,
    > for UpdateEventConfigurationByResourceTypesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesOutput,
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateEventConfigurationByResourceTypesFluentBuilder {
    /// Creates a new `UpdateEventConfigurationByResourceTypes`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateEventConfigurationByResourceTypes as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::update_event_configuration_by_resource_types::builders::UpdateEventConfigurationByResourceTypesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypes::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypes::orchestrate(&runtime_plugins, input)
            .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesOutput,
        crate::operation::update_event_configuration_by_resource_types::UpdateEventConfigurationByResourceTypesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Device registration state resource type event configuration object for enabling and disabling wireless gateway topic.</p>
    pub fn device_registration_state(mut self, input: crate::types::DeviceRegistrationStateResourceTypeEventConfiguration) -> Self {
        self.inner = self.inner.device_registration_state(input);
        self
    }
    /// <p>Device registration state resource type event configuration object for enabling and disabling wireless gateway topic.</p>
    pub fn set_device_registration_state(
        mut self,
        input: ::std::option::Option<crate::types::DeviceRegistrationStateResourceTypeEventConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_device_registration_state(input);
        self
    }
    /// <p>Device registration state resource type event configuration object for enabling and disabling wireless gateway topic.</p>
    pub fn get_device_registration_state(&self) -> &::std::option::Option<crate::types::DeviceRegistrationStateResourceTypeEventConfiguration> {
        self.inner.get_device_registration_state()
    }
    /// <p>Proximity resource type event configuration object for enabling and disabling wireless gateway topic.</p>
    pub fn proximity(mut self, input: crate::types::ProximityResourceTypeEventConfiguration) -> Self {
        self.inner = self.inner.proximity(input);
        self
    }
    /// <p>Proximity resource type event configuration object for enabling and disabling wireless gateway topic.</p>
    pub fn set_proximity(mut self, input: ::std::option::Option<crate::types::ProximityResourceTypeEventConfiguration>) -> Self {
        self.inner = self.inner.set_proximity(input);
        self
    }
    /// <p>Proximity resource type event configuration object for enabling and disabling wireless gateway topic.</p>
    pub fn get_proximity(&self) -> &::std::option::Option<crate::types::ProximityResourceTypeEventConfiguration> {
        self.inner.get_proximity()
    }
    /// <p>Join resource type event configuration object for enabling and disabling wireless device topic.</p>
    pub fn join(mut self, input: crate::types::JoinResourceTypeEventConfiguration) -> Self {
        self.inner = self.inner.join(input);
        self
    }
    /// <p>Join resource type event configuration object for enabling and disabling wireless device topic.</p>
    pub fn set_join(mut self, input: ::std::option::Option<crate::types::JoinResourceTypeEventConfiguration>) -> Self {
        self.inner = self.inner.set_join(input);
        self
    }
    /// <p>Join resource type event configuration object for enabling and disabling wireless device topic.</p>
    pub fn get_join(&self) -> &::std::option::Option<crate::types::JoinResourceTypeEventConfiguration> {
        self.inner.get_join()
    }
    /// <p>Connection status resource type event configuration object for enabling and disabling wireless gateway topic.</p>
    pub fn connection_status(mut self, input: crate::types::ConnectionStatusResourceTypeEventConfiguration) -> Self {
        self.inner = self.inner.connection_status(input);
        self
    }
    /// <p>Connection status resource type event configuration object for enabling and disabling wireless gateway topic.</p>
    pub fn set_connection_status(mut self, input: ::std::option::Option<crate::types::ConnectionStatusResourceTypeEventConfiguration>) -> Self {
        self.inner = self.inner.set_connection_status(input);
        self
    }
    /// <p>Connection status resource type event configuration object for enabling and disabling wireless gateway topic.</p>
    pub fn get_connection_status(&self) -> &::std::option::Option<crate::types::ConnectionStatusResourceTypeEventConfiguration> {
        self.inner.get_connection_status()
    }
    /// <p>Message delivery status resource type event configuration object for enabling and disabling wireless device topic.</p>
    pub fn message_delivery_status(mut self, input: crate::types::MessageDeliveryStatusResourceTypeEventConfiguration) -> Self {
        self.inner = self.inner.message_delivery_status(input);
        self
    }
    /// <p>Message delivery status resource type event configuration object for enabling and disabling wireless device topic.</p>
    pub fn set_message_delivery_status(
        mut self,
        input: ::std::option::Option<crate::types::MessageDeliveryStatusResourceTypeEventConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_message_delivery_status(input);
        self
    }
    /// <p>Message delivery status resource type event configuration object for enabling and disabling wireless device topic.</p>
    pub fn get_message_delivery_status(&self) -> &::std::option::Option<crate::types::MessageDeliveryStatusResourceTypeEventConfiguration> {
        self.inner.get_message_delivery_status()
    }
}
