// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListWirelessDevicesInput {
    /// <p>The maximum number of results to return in this operation.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>A filter to list only the wireless devices that use this destination.</p>
    pub destination_name: ::std::option::Option<::std::string::String>,
    /// <p>A filter to list only the wireless devices that use this device profile.</p>
    pub device_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>A filter to list only the wireless devices that use this service profile.</p>
    pub service_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>A filter to list only the wireless devices that use this wireless device type.</p>
    pub wireless_device_type: ::std::option::Option<crate::types::WirelessDeviceType>,
    /// <p>The ID of a FUOTA task.</p>
    pub fuota_task_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the multicast group.</p>
    pub multicast_group_id: ::std::option::Option<::std::string::String>,
}
impl ListWirelessDevicesInput {
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A filter to list only the wireless devices that use this destination.</p>
    pub fn destination_name(&self) -> ::std::option::Option<&str> {
        self.destination_name.as_deref()
    }
    /// <p>A filter to list only the wireless devices that use this device profile.</p>
    pub fn device_profile_id(&self) -> ::std::option::Option<&str> {
        self.device_profile_id.as_deref()
    }
    /// <p>A filter to list only the wireless devices that use this service profile.</p>
    pub fn service_profile_id(&self) -> ::std::option::Option<&str> {
        self.service_profile_id.as_deref()
    }
    /// <p>A filter to list only the wireless devices that use this wireless device type.</p>
    pub fn wireless_device_type(&self) -> ::std::option::Option<&crate::types::WirelessDeviceType> {
        self.wireless_device_type.as_ref()
    }
    /// <p>The ID of a FUOTA task.</p>
    pub fn fuota_task_id(&self) -> ::std::option::Option<&str> {
        self.fuota_task_id.as_deref()
    }
    /// <p>The ID of the multicast group.</p>
    pub fn multicast_group_id(&self) -> ::std::option::Option<&str> {
        self.multicast_group_id.as_deref()
    }
}
impl ListWirelessDevicesInput {
    /// Creates a new builder-style object to manufacture [`ListWirelessDevicesInput`](crate::operation::list_wireless_devices::ListWirelessDevicesInput).
    pub fn builder() -> crate::operation::list_wireless_devices::builders::ListWirelessDevicesInputBuilder {
        crate::operation::list_wireless_devices::builders::ListWirelessDevicesInputBuilder::default()
    }
}

/// A builder for [`ListWirelessDevicesInput`](crate::operation::list_wireless_devices::ListWirelessDevicesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListWirelessDevicesInputBuilder {
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) destination_name: ::std::option::Option<::std::string::String>,
    pub(crate) device_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) service_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) wireless_device_type: ::std::option::Option<crate::types::WirelessDeviceType>,
    pub(crate) fuota_task_id: ::std::option::Option<::std::string::String>,
    pub(crate) multicast_group_id: ::std::option::Option<::std::string::String>,
}
impl ListWirelessDevicesInputBuilder {
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>A filter to list only the wireless devices that use this destination.</p>
    pub fn destination_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter to list only the wireless devices that use this destination.</p>
    pub fn set_destination_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_name = input;
        self
    }
    /// <p>A filter to list only the wireless devices that use this destination.</p>
    pub fn get_destination_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_name
    }
    /// <p>A filter to list only the wireless devices that use this device profile.</p>
    pub fn device_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter to list only the wireless devices that use this device profile.</p>
    pub fn set_device_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_profile_id = input;
        self
    }
    /// <p>A filter to list only the wireless devices that use this device profile.</p>
    pub fn get_device_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_profile_id
    }
    /// <p>A filter to list only the wireless devices that use this service profile.</p>
    pub fn service_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter to list only the wireless devices that use this service profile.</p>
    pub fn set_service_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_profile_id = input;
        self
    }
    /// <p>A filter to list only the wireless devices that use this service profile.</p>
    pub fn get_service_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_profile_id
    }
    /// <p>A filter to list only the wireless devices that use this wireless device type.</p>
    pub fn wireless_device_type(mut self, input: crate::types::WirelessDeviceType) -> Self {
        self.wireless_device_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter to list only the wireless devices that use this wireless device type.</p>
    pub fn set_wireless_device_type(mut self, input: ::std::option::Option<crate::types::WirelessDeviceType>) -> Self {
        self.wireless_device_type = input;
        self
    }
    /// <p>A filter to list only the wireless devices that use this wireless device type.</p>
    pub fn get_wireless_device_type(&self) -> &::std::option::Option<crate::types::WirelessDeviceType> {
        &self.wireless_device_type
    }
    /// <p>The ID of a FUOTA task.</p>
    pub fn fuota_task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fuota_task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a FUOTA task.</p>
    pub fn set_fuota_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fuota_task_id = input;
        self
    }
    /// <p>The ID of a FUOTA task.</p>
    pub fn get_fuota_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.fuota_task_id
    }
    /// <p>The ID of the multicast group.</p>
    pub fn multicast_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multicast_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the multicast group.</p>
    pub fn set_multicast_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multicast_group_id = input;
        self
    }
    /// <p>The ID of the multicast group.</p>
    pub fn get_multicast_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.multicast_group_id
    }
    /// Consumes the builder and constructs a [`ListWirelessDevicesInput`](crate::operation::list_wireless_devices::ListWirelessDevicesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_wireless_devices::ListWirelessDevicesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_wireless_devices::ListWirelessDevicesInput {
            max_results: self.max_results,
            next_token: self.next_token,
            destination_name: self.destination_name,
            device_profile_id: self.device_profile_id,
            service_profile_id: self.service_profile_id,
            wireless_device_type: self.wireless_device_type,
            fuota_task_id: self.fuota_task_id,
            multicast_group_id: self.multicast_group_id,
        })
    }
}
