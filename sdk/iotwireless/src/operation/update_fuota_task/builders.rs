// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_fuota_task::_update_fuota_task_output::UpdateFuotaTaskOutputBuilder;

pub use crate::operation::update_fuota_task::_update_fuota_task_input::UpdateFuotaTaskInputBuilder;

impl UpdateFuotaTaskInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_fuota_task::UpdateFuotaTaskOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_fuota_task::UpdateFuotaTaskError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_fuota_task();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateFuotaTask`.
///
/// <p>Updates properties of a FUOTA task.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateFuotaTaskFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_fuota_task::builders::UpdateFuotaTaskInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_fuota_task::UpdateFuotaTaskOutput,
        crate::operation::update_fuota_task::UpdateFuotaTaskError,
    > for UpdateFuotaTaskFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_fuota_task::UpdateFuotaTaskOutput,
            crate::operation::update_fuota_task::UpdateFuotaTaskError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateFuotaTaskFluentBuilder {
    /// Creates a new `UpdateFuotaTask`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateFuotaTask as a reference.
    pub fn as_input(&self) -> &crate::operation::update_fuota_task::builders::UpdateFuotaTaskInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_fuota_task::UpdateFuotaTaskOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_fuota_task::UpdateFuotaTaskError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_fuota_task::UpdateFuotaTask::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_fuota_task::UpdateFuotaTask::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_fuota_task::UpdateFuotaTaskOutput,
        crate::operation::update_fuota_task::UpdateFuotaTaskError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of a FUOTA task.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The ID of a FUOTA task.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The ID of a FUOTA task.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_id()
    }
    /// <p>The name of a FUOTA task.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of a FUOTA task.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of a FUOTA task.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The description of the new resource.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the new resource.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description of the new resource.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The LoRaWAN information used with a FUOTA task.</p>
    pub fn lo_ra_wan(mut self, input: crate::types::LoRaWanFuotaTask) -> Self {
        self.inner = self.inner.lo_ra_wan(input);
        self
    }
    /// <p>The LoRaWAN information used with a FUOTA task.</p>
    pub fn set_lo_ra_wan(mut self, input: ::std::option::Option<crate::types::LoRaWanFuotaTask>) -> Self {
        self.inner = self.inner.set_lo_ra_wan(input);
        self
    }
    /// <p>The LoRaWAN information used with a FUOTA task.</p>
    pub fn get_lo_ra_wan(&self) -> &::std::option::Option<crate::types::LoRaWanFuotaTask> {
        self.inner.get_lo_ra_wan()
    }
    /// <p>The S3 URI points to a firmware update image that is to be used with a FUOTA task.</p>
    pub fn firmware_update_image(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.firmware_update_image(input.into());
        self
    }
    /// <p>The S3 URI points to a firmware update image that is to be used with a FUOTA task.</p>
    pub fn set_firmware_update_image(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_firmware_update_image(input);
        self
    }
    /// <p>The S3 URI points to a firmware update image that is to be used with a FUOTA task.</p>
    pub fn get_firmware_update_image(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_firmware_update_image()
    }
    /// <p>The firmware update role that is to be used with a FUOTA task.</p>
    pub fn firmware_update_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.firmware_update_role(input.into());
        self
    }
    /// <p>The firmware update role that is to be used with a FUOTA task.</p>
    pub fn set_firmware_update_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_firmware_update_role(input);
        self
    }
    /// <p>The firmware update role that is to be used with a FUOTA task.</p>
    pub fn get_firmware_update_role(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_firmware_update_role()
    }
    /// <p>The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.</p>
    pub fn redundancy_percent(mut self, input: i32) -> Self {
        self.inner = self.inner.redundancy_percent(input);
        self
    }
    /// <p>The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.</p>
    pub fn set_redundancy_percent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_redundancy_percent(input);
        self
    }
    /// <p>The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.</p>
    pub fn get_redundancy_percent(&self) -> &::std::option::Option<i32> {
        self.inner.get_redundancy_percent()
    }
    /// <p>The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.</p>
    pub fn fragment_size_bytes(mut self, input: i32) -> Self {
        self.inner = self.inner.fragment_size_bytes(input);
        self
    }
    /// <p>The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.</p>
    pub fn set_fragment_size_bytes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_fragment_size_bytes(input);
        self
    }
    /// <p>The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.</p>
    pub fn get_fragment_size_bytes(&self) -> &::std::option::Option<i32> {
        self.inner.get_fragment_size_bytes()
    }
    /// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note>
    /// <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p>
    /// </note>
    pub fn fragment_interval_ms(mut self, input: i32) -> Self {
        self.inner = self.inner.fragment_interval_ms(input);
        self
    }
    /// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note>
    /// <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p>
    /// </note>
    pub fn set_fragment_interval_ms(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_fragment_interval_ms(input);
        self
    }
    /// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note>
    /// <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p>
    /// </note>
    pub fn get_fragment_interval_ms(&self) -> &::std::option::Option<i32> {
        self.inner.get_fragment_interval_ms()
    }
}
