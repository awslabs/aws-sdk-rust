// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetFuotaTaskOutput {
    /// <p>The arn of a FUOTA task.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of a FUOTA task.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The status of a FUOTA task.</p>
    pub status: ::std::option::Option<crate::types::FuotaTaskStatus>,
    /// <p>The name of a FUOTA task.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the new resource.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The LoRaWAN information returned from getting a FUOTA task.</p>
    pub lo_ra_wan: ::std::option::Option<crate::types::LoRaWanFuotaTaskGetInfo>,
    /// <p>The S3 URI points to a firmware update image that is to be used with a FUOTA task.</p>
    pub firmware_update_image: ::std::option::Option<::std::string::String>,
    /// <p>The firmware update role that is to be used with a FUOTA task.</p>
    pub firmware_update_role: ::std::option::Option<::std::string::String>,
    /// <p>Created at timestamp for the resource.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.</p>
    pub redundancy_percent: ::std::option::Option<i32>,
    /// <p>The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.</p>
    pub fragment_size_bytes: ::std::option::Option<i32>,
    /// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p><note>
    /// <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p>
    /// </note>
    pub fragment_interval_ms: ::std::option::Option<i32>,
    /// <p>The descriptor is the metadata about the file that is transferred to the device using FUOTA, such as the software version. It is a binary field encoded in base64.</p>
    pub descriptor: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetFuotaTaskOutput {
    /// <p>The arn of a FUOTA task.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of a FUOTA task.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The status of a FUOTA task.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::FuotaTaskStatus> {
        self.status.as_ref()
    }
    /// <p>The name of a FUOTA task.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the new resource.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The LoRaWAN information returned from getting a FUOTA task.</p>
    pub fn lo_ra_wan(&self) -> ::std::option::Option<&crate::types::LoRaWanFuotaTaskGetInfo> {
        self.lo_ra_wan.as_ref()
    }
    /// <p>The S3 URI points to a firmware update image that is to be used with a FUOTA task.</p>
    pub fn firmware_update_image(&self) -> ::std::option::Option<&str> {
        self.firmware_update_image.as_deref()
    }
    /// <p>The firmware update role that is to be used with a FUOTA task.</p>
    pub fn firmware_update_role(&self) -> ::std::option::Option<&str> {
        self.firmware_update_role.as_deref()
    }
    /// <p>Created at timestamp for the resource.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.</p>
    pub fn redundancy_percent(&self) -> ::std::option::Option<i32> {
        self.redundancy_percent
    }
    /// <p>The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.</p>
    pub fn fragment_size_bytes(&self) -> ::std::option::Option<i32> {
        self.fragment_size_bytes
    }
    /// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p><note>
    /// <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p>
    /// </note>
    pub fn fragment_interval_ms(&self) -> ::std::option::Option<i32> {
        self.fragment_interval_ms
    }
    /// <p>The descriptor is the metadata about the file that is transferred to the device using FUOTA, such as the software version. It is a binary field encoded in base64.</p>
    pub fn descriptor(&self) -> ::std::option::Option<&str> {
        self.descriptor.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetFuotaTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetFuotaTaskOutput {
    /// Creates a new builder-style object to manufacture [`GetFuotaTaskOutput`](crate::operation::get_fuota_task::GetFuotaTaskOutput).
    pub fn builder() -> crate::operation::get_fuota_task::builders::GetFuotaTaskOutputBuilder {
        crate::operation::get_fuota_task::builders::GetFuotaTaskOutputBuilder::default()
    }
}

/// A builder for [`GetFuotaTaskOutput`](crate::operation::get_fuota_task::GetFuotaTaskOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetFuotaTaskOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::FuotaTaskStatus>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) lo_ra_wan: ::std::option::Option<crate::types::LoRaWanFuotaTaskGetInfo>,
    pub(crate) firmware_update_image: ::std::option::Option<::std::string::String>,
    pub(crate) firmware_update_role: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) redundancy_percent: ::std::option::Option<i32>,
    pub(crate) fragment_size_bytes: ::std::option::Option<i32>,
    pub(crate) fragment_interval_ms: ::std::option::Option<i32>,
    pub(crate) descriptor: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetFuotaTaskOutputBuilder {
    /// <p>The arn of a FUOTA task.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The arn of a FUOTA task.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The arn of a FUOTA task.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ID of a FUOTA task.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a FUOTA task.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of a FUOTA task.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The status of a FUOTA task.</p>
    pub fn status(mut self, input: crate::types::FuotaTaskStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of a FUOTA task.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FuotaTaskStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of a FUOTA task.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FuotaTaskStatus> {
        &self.status
    }
    /// <p>The name of a FUOTA task.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a FUOTA task.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of a FUOTA task.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the new resource.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the new resource.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the new resource.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The LoRaWAN information returned from getting a FUOTA task.</p>
    pub fn lo_ra_wan(mut self, input: crate::types::LoRaWanFuotaTaskGetInfo) -> Self {
        self.lo_ra_wan = ::std::option::Option::Some(input);
        self
    }
    /// <p>The LoRaWAN information returned from getting a FUOTA task.</p>
    pub fn set_lo_ra_wan(mut self, input: ::std::option::Option<crate::types::LoRaWanFuotaTaskGetInfo>) -> Self {
        self.lo_ra_wan = input;
        self
    }
    /// <p>The LoRaWAN information returned from getting a FUOTA task.</p>
    pub fn get_lo_ra_wan(&self) -> &::std::option::Option<crate::types::LoRaWanFuotaTaskGetInfo> {
        &self.lo_ra_wan
    }
    /// <p>The S3 URI points to a firmware update image that is to be used with a FUOTA task.</p>
    pub fn firmware_update_image(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.firmware_update_image = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 URI points to a firmware update image that is to be used with a FUOTA task.</p>
    pub fn set_firmware_update_image(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.firmware_update_image = input;
        self
    }
    /// <p>The S3 URI points to a firmware update image that is to be used with a FUOTA task.</p>
    pub fn get_firmware_update_image(&self) -> &::std::option::Option<::std::string::String> {
        &self.firmware_update_image
    }
    /// <p>The firmware update role that is to be used with a FUOTA task.</p>
    pub fn firmware_update_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.firmware_update_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The firmware update role that is to be used with a FUOTA task.</p>
    pub fn set_firmware_update_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.firmware_update_role = input;
        self
    }
    /// <p>The firmware update role that is to be used with a FUOTA task.</p>
    pub fn get_firmware_update_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.firmware_update_role
    }
    /// <p>Created at timestamp for the resource.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Created at timestamp for the resource.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Created at timestamp for the resource.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.</p>
    pub fn redundancy_percent(mut self, input: i32) -> Self {
        self.redundancy_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.</p>
    pub fn set_redundancy_percent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.redundancy_percent = input;
        self
    }
    /// <p>The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.</p>
    pub fn get_redundancy_percent(&self) -> &::std::option::Option<i32> {
        &self.redundancy_percent
    }
    /// <p>The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.</p>
    pub fn fragment_size_bytes(mut self, input: i32) -> Self {
        self.fragment_size_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.</p>
    pub fn set_fragment_size_bytes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.fragment_size_bytes = input;
        self
    }
    /// <p>The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.</p>
    pub fn get_fragment_size_bytes(&self) -> &::std::option::Option<i32> {
        &self.fragment_size_bytes
    }
    /// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p><note>
    /// <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p>
    /// </note>
    pub fn fragment_interval_ms(mut self, input: i32) -> Self {
        self.fragment_interval_ms = ::std::option::Option::Some(input);
        self
    }
    /// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p><note>
    /// <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p>
    /// </note>
    pub fn set_fragment_interval_ms(mut self, input: ::std::option::Option<i32>) -> Self {
        self.fragment_interval_ms = input;
        self
    }
    /// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p><note>
    /// <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p>
    /// </note>
    pub fn get_fragment_interval_ms(&self) -> &::std::option::Option<i32> {
        &self.fragment_interval_ms
    }
    /// <p>The descriptor is the metadata about the file that is transferred to the device using FUOTA, such as the software version. It is a binary field encoded in base64.</p>
    pub fn descriptor(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.descriptor = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The descriptor is the metadata about the file that is transferred to the device using FUOTA, such as the software version. It is a binary field encoded in base64.</p>
    pub fn set_descriptor(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.descriptor = input;
        self
    }
    /// <p>The descriptor is the metadata about the file that is transferred to the device using FUOTA, such as the software version. It is a binary field encoded in base64.</p>
    pub fn get_descriptor(&self) -> &::std::option::Option<::std::string::String> {
        &self.descriptor
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetFuotaTaskOutput`](crate::operation::get_fuota_task::GetFuotaTaskOutput).
    pub fn build(self) -> crate::operation::get_fuota_task::GetFuotaTaskOutput {
        crate::operation::get_fuota_task::GetFuotaTaskOutput {
            arn: self.arn,
            id: self.id,
            status: self.status,
            name: self.name,
            description: self.description,
            lo_ra_wan: self.lo_ra_wan,
            firmware_update_image: self.firmware_update_image,
            firmware_update_role: self.firmware_update_role,
            created_at: self.created_at,
            redundancy_percent: self.redundancy_percent,
            fragment_size_bytes: self.fragment_size_bytes,
            fragment_interval_ms: self.fragment_interval_ms,
            descriptor: self.descriptor,
            _request_id: self._request_id,
        }
    }
}
