// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPartnerAccountOutput {
    /// <p>The Sidewalk account credentials.</p>
    #[doc(hidden)]
    pub sidewalk: std::option::Option<crate::types::SidewalkAccountInfoWithFingerprint>,
    /// <p>Whether the partner account is linked to the AWS account.</p>
    #[doc(hidden)]
    pub account_linked: bool,
    _request_id: Option<String>,
}
impl GetPartnerAccountOutput {
    /// <p>The Sidewalk account credentials.</p>
    pub fn sidewalk(
        &self,
    ) -> std::option::Option<&crate::types::SidewalkAccountInfoWithFingerprint> {
        self.sidewalk.as_ref()
    }
    /// <p>Whether the partner account is linked to the AWS account.</p>
    pub fn account_linked(&self) -> bool {
        self.account_linked
    }
}
impl aws_http::request_id::RequestId for GetPartnerAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPartnerAccountOutput {
    /// Creates a new builder-style object to manufacture [`GetPartnerAccountOutput`](crate::operation::get_partner_account::GetPartnerAccountOutput).
    pub fn builder(
    ) -> crate::operation::get_partner_account::builders::GetPartnerAccountOutputBuilder {
        crate::operation::get_partner_account::builders::GetPartnerAccountOutputBuilder::default()
    }
}

/// A builder for [`GetPartnerAccountOutput`](crate::operation::get_partner_account::GetPartnerAccountOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetPartnerAccountOutputBuilder {
    pub(crate) sidewalk: std::option::Option<crate::types::SidewalkAccountInfoWithFingerprint>,
    pub(crate) account_linked: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl GetPartnerAccountOutputBuilder {
    /// <p>The Sidewalk account credentials.</p>
    pub fn sidewalk(mut self, input: crate::types::SidewalkAccountInfoWithFingerprint) -> Self {
        self.sidewalk = Some(input);
        self
    }
    /// <p>The Sidewalk account credentials.</p>
    pub fn set_sidewalk(
        mut self,
        input: std::option::Option<crate::types::SidewalkAccountInfoWithFingerprint>,
    ) -> Self {
        self.sidewalk = input;
        self
    }
    /// <p>Whether the partner account is linked to the AWS account.</p>
    pub fn account_linked(mut self, input: bool) -> Self {
        self.account_linked = Some(input);
        self
    }
    /// <p>Whether the partner account is linked to the AWS account.</p>
    pub fn set_account_linked(mut self, input: std::option::Option<bool>) -> Self {
        self.account_linked = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPartnerAccountOutput`](crate::operation::get_partner_account::GetPartnerAccountOutput).
    pub fn build(self) -> crate::operation::get_partner_account::GetPartnerAccountOutput {
        crate::operation::get_partner_account::GetPartnerAccountOutput {
            sidewalk: self.sidewalk,
            account_linked: self.account_linked.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
