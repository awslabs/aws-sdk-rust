// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetServiceEndpointOutput {
    /// <p>The endpoint's service type.</p>
    #[doc(hidden)]
    pub service_type: std::option::Option<crate::types::WirelessGatewayServiceType>,
    /// <p>The service endpoint value.</p>
    #[doc(hidden)]
    pub service_endpoint: std::option::Option<std::string::String>,
    /// <p>The Root CA of the server trust certificate.</p>
    #[doc(hidden)]
    pub server_trust: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetServiceEndpointOutput {
    /// <p>The endpoint's service type.</p>
    pub fn service_type(&self) -> std::option::Option<&crate::types::WirelessGatewayServiceType> {
        self.service_type.as_ref()
    }
    /// <p>The service endpoint value.</p>
    pub fn service_endpoint(&self) -> std::option::Option<&str> {
        self.service_endpoint.as_deref()
    }
    /// <p>The Root CA of the server trust certificate.</p>
    pub fn server_trust(&self) -> std::option::Option<&str> {
        self.server_trust.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetServiceEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetServiceEndpointOutput {
    /// Creates a new builder-style object to manufacture [`GetServiceEndpointOutput`](crate::operation::get_service_endpoint::GetServiceEndpointOutput).
    pub fn builder(
    ) -> crate::operation::get_service_endpoint::builders::GetServiceEndpointOutputBuilder {
        crate::operation::get_service_endpoint::builders::GetServiceEndpointOutputBuilder::default()
    }
}

/// A builder for [`GetServiceEndpointOutput`](crate::operation::get_service_endpoint::GetServiceEndpointOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetServiceEndpointOutputBuilder {
    pub(crate) service_type: std::option::Option<crate::types::WirelessGatewayServiceType>,
    pub(crate) service_endpoint: std::option::Option<std::string::String>,
    pub(crate) server_trust: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetServiceEndpointOutputBuilder {
    /// <p>The endpoint's service type.</p>
    pub fn service_type(mut self, input: crate::types::WirelessGatewayServiceType) -> Self {
        self.service_type = Some(input);
        self
    }
    /// <p>The endpoint's service type.</p>
    pub fn set_service_type(
        mut self,
        input: std::option::Option<crate::types::WirelessGatewayServiceType>,
    ) -> Self {
        self.service_type = input;
        self
    }
    /// <p>The service endpoint value.</p>
    pub fn service_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_endpoint = Some(input.into());
        self
    }
    /// <p>The service endpoint value.</p>
    pub fn set_service_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_endpoint = input;
        self
    }
    /// <p>The Root CA of the server trust certificate.</p>
    pub fn server_trust(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_trust = Some(input.into());
        self
    }
    /// <p>The Root CA of the server trust certificate.</p>
    pub fn set_server_trust(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_trust = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetServiceEndpointOutput`](crate::operation::get_service_endpoint::GetServiceEndpointOutput).
    pub fn build(self) -> crate::operation::get_service_endpoint::GetServiceEndpointOutput {
        crate::operation::get_service_endpoint::GetServiceEndpointOutput {
            service_type: self.service_type,
            service_endpoint: self.service_endpoint,
            server_trust: self.server_trust,
            _request_id: self._request_id,
        }
    }
}
