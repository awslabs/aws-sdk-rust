// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdatePartnerAccountInput {
    /// <p>The Sidewalk account credentials.</p>
    pub sidewalk: ::std::option::Option<crate::types::SidewalkUpdateAccount>,
    /// <p>The ID of the partner account to update.</p>
    pub partner_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The partner type.</p>
    pub partner_type: ::std::option::Option<crate::types::PartnerType>,
}
impl UpdatePartnerAccountInput {
    /// <p>The Sidewalk account credentials.</p>
    pub fn sidewalk(&self) -> ::std::option::Option<&crate::types::SidewalkUpdateAccount> {
        self.sidewalk.as_ref()
    }
    /// <p>The ID of the partner account to update.</p>
    pub fn partner_account_id(&self) -> ::std::option::Option<&str> {
        self.partner_account_id.as_deref()
    }
    /// <p>The partner type.</p>
    pub fn partner_type(&self) -> ::std::option::Option<&crate::types::PartnerType> {
        self.partner_type.as_ref()
    }
}
impl UpdatePartnerAccountInput {
    /// Creates a new builder-style object to manufacture [`UpdatePartnerAccountInput`](crate::operation::update_partner_account::UpdatePartnerAccountInput).
    pub fn builder() -> crate::operation::update_partner_account::builders::UpdatePartnerAccountInputBuilder {
        crate::operation::update_partner_account::builders::UpdatePartnerAccountInputBuilder::default()
    }
}

/// A builder for [`UpdatePartnerAccountInput`](crate::operation::update_partner_account::UpdatePartnerAccountInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdatePartnerAccountInputBuilder {
    pub(crate) sidewalk: ::std::option::Option<crate::types::SidewalkUpdateAccount>,
    pub(crate) partner_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) partner_type: ::std::option::Option<crate::types::PartnerType>,
}
impl UpdatePartnerAccountInputBuilder {
    /// <p>The Sidewalk account credentials.</p>
    /// This field is required.
    pub fn sidewalk(mut self, input: crate::types::SidewalkUpdateAccount) -> Self {
        self.sidewalk = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Sidewalk account credentials.</p>
    pub fn set_sidewalk(mut self, input: ::std::option::Option<crate::types::SidewalkUpdateAccount>) -> Self {
        self.sidewalk = input;
        self
    }
    /// <p>The Sidewalk account credentials.</p>
    pub fn get_sidewalk(&self) -> &::std::option::Option<crate::types::SidewalkUpdateAccount> {
        &self.sidewalk
    }
    /// <p>The ID of the partner account to update.</p>
    /// This field is required.
    pub fn partner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.partner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the partner account to update.</p>
    pub fn set_partner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.partner_account_id = input;
        self
    }
    /// <p>The ID of the partner account to update.</p>
    pub fn get_partner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.partner_account_id
    }
    /// <p>The partner type.</p>
    /// This field is required.
    pub fn partner_type(mut self, input: crate::types::PartnerType) -> Self {
        self.partner_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The partner type.</p>
    pub fn set_partner_type(mut self, input: ::std::option::Option<crate::types::PartnerType>) -> Self {
        self.partner_type = input;
        self
    }
    /// <p>The partner type.</p>
    pub fn get_partner_type(&self) -> &::std::option::Option<crate::types::PartnerType> {
        &self.partner_type
    }
    /// Consumes the builder and constructs a [`UpdatePartnerAccountInput`](crate::operation::update_partner_account::UpdatePartnerAccountInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_partner_account::UpdatePartnerAccountInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_partner_account::UpdatePartnerAccountInput {
            sidewalk: self.sidewalk,
            partner_account_id: self.partner_account_id,
            partner_type: self.partner_type,
        })
    }
}
