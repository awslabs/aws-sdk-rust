// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendDataToWirelessDeviceInput {
    /// <p>The ID of the wireless device to receive the data.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The transmit mode to use to send data to the wireless device. Can be: <code>0</code> for UM (unacknowledge mode) or <code>1</code> for AM (acknowledge mode).</p>
    #[doc(hidden)]
    pub transmit_mode: std::option::Option<i32>,
    /// <p>The binary to be sent to the end device, encoded in base64.</p>
    #[doc(hidden)]
    pub payload_data: std::option::Option<std::string::String>,
    /// <p>Metadata about the message request.</p>
    #[doc(hidden)]
    pub wireless_metadata: std::option::Option<crate::types::WirelessMetadata>,
}
impl SendDataToWirelessDeviceInput {
    /// <p>The ID of the wireless device to receive the data.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The transmit mode to use to send data to the wireless device. Can be: <code>0</code> for UM (unacknowledge mode) or <code>1</code> for AM (acknowledge mode).</p>
    pub fn transmit_mode(&self) -> std::option::Option<i32> {
        self.transmit_mode
    }
    /// <p>The binary to be sent to the end device, encoded in base64.</p>
    pub fn payload_data(&self) -> std::option::Option<&str> {
        self.payload_data.as_deref()
    }
    /// <p>Metadata about the message request.</p>
    pub fn wireless_metadata(&self) -> std::option::Option<&crate::types::WirelessMetadata> {
        self.wireless_metadata.as_ref()
    }
}
impl SendDataToWirelessDeviceInput {
    /// Creates a new builder-style object to manufacture [`SendDataToWirelessDeviceInput`](crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceInput).
    pub fn builder() -> crate::operation::send_data_to_wireless_device::builders::SendDataToWirelessDeviceInputBuilder{
        crate::operation::send_data_to_wireless_device::builders::SendDataToWirelessDeviceInputBuilder::default()
    }
}

/// A builder for [`SendDataToWirelessDeviceInput`](crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendDataToWirelessDeviceInputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) transmit_mode: std::option::Option<i32>,
    pub(crate) payload_data: std::option::Option<std::string::String>,
    pub(crate) wireless_metadata: std::option::Option<crate::types::WirelessMetadata>,
}
impl SendDataToWirelessDeviceInputBuilder {
    /// <p>The ID of the wireless device to receive the data.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the wireless device to receive the data.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The transmit mode to use to send data to the wireless device. Can be: <code>0</code> for UM (unacknowledge mode) or <code>1</code> for AM (acknowledge mode).</p>
    pub fn transmit_mode(mut self, input: i32) -> Self {
        self.transmit_mode = Some(input);
        self
    }
    /// <p>The transmit mode to use to send data to the wireless device. Can be: <code>0</code> for UM (unacknowledge mode) or <code>1</code> for AM (acknowledge mode).</p>
    pub fn set_transmit_mode(mut self, input: std::option::Option<i32>) -> Self {
        self.transmit_mode = input;
        self
    }
    /// <p>The binary to be sent to the end device, encoded in base64.</p>
    pub fn payload_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.payload_data = Some(input.into());
        self
    }
    /// <p>The binary to be sent to the end device, encoded in base64.</p>
    pub fn set_payload_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.payload_data = input;
        self
    }
    /// <p>Metadata about the message request.</p>
    pub fn wireless_metadata(mut self, input: crate::types::WirelessMetadata) -> Self {
        self.wireless_metadata = Some(input);
        self
    }
    /// <p>Metadata about the message request.</p>
    pub fn set_wireless_metadata(
        mut self,
        input: std::option::Option<crate::types::WirelessMetadata>,
    ) -> Self {
        self.wireless_metadata = input;
        self
    }
    /// Consumes the builder and constructs a [`SendDataToWirelessDeviceInput`](crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::send_data_to_wireless_device::SendDataToWirelessDeviceInput {
                id: self.id,
                transmit_mode: self.transmit_mode,
                payload_data: self.payload_data,
                wireless_metadata: self.wireless_metadata,
            },
        )
    }
}
