// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetWirelessGatewayTaskDefinitionOutput {
    /// <p>Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.</p>
    #[doc(hidden)]
    pub auto_create_tasks: bool,
    /// <p>The name of the resource.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Information about the gateways to update.</p>
    #[doc(hidden)]
    pub update: std::option::Option<crate::types::UpdateWirelessGatewayTaskCreate>,
    /// <p>The Amazon Resource Name of the resource.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetWirelessGatewayTaskDefinitionOutput {
    /// <p>Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.</p>
    pub fn auto_create_tasks(&self) -> bool {
        self.auto_create_tasks
    }
    /// <p>The name of the resource.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Information about the gateways to update.</p>
    pub fn update(&self) -> std::option::Option<&crate::types::UpdateWirelessGatewayTaskCreate> {
        self.update.as_ref()
    }
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetWirelessGatewayTaskDefinitionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetWirelessGatewayTaskDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayTaskDefinitionOutput`](crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionOutput).
    pub fn builder() -> crate::operation::get_wireless_gateway_task_definition::builders::GetWirelessGatewayTaskDefinitionOutputBuilder{
        crate::operation::get_wireless_gateway_task_definition::builders::GetWirelessGatewayTaskDefinitionOutputBuilder::default()
    }
}

/// A builder for [`GetWirelessGatewayTaskDefinitionOutput`](crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetWirelessGatewayTaskDefinitionOutputBuilder {
    pub(crate) auto_create_tasks: std::option::Option<bool>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) update: std::option::Option<crate::types::UpdateWirelessGatewayTaskCreate>,
    pub(crate) arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetWirelessGatewayTaskDefinitionOutputBuilder {
    /// <p>Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.</p>
    pub fn auto_create_tasks(mut self, input: bool) -> Self {
        self.auto_create_tasks = Some(input);
        self
    }
    /// <p>Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.</p>
    pub fn set_auto_create_tasks(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_create_tasks = input;
        self
    }
    /// <p>The name of the resource.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the resource.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Information about the gateways to update.</p>
    pub fn update(mut self, input: crate::types::UpdateWirelessGatewayTaskCreate) -> Self {
        self.update = Some(input);
        self
    }
    /// <p>Information about the gateways to update.</p>
    pub fn set_update(
        mut self,
        input: std::option::Option<crate::types::UpdateWirelessGatewayTaskCreate>,
    ) -> Self {
        self.update = input;
        self
    }
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetWirelessGatewayTaskDefinitionOutput`](crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionOutput).
    pub fn build(self) -> crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionOutput{
        crate::operation::get_wireless_gateway_task_definition::GetWirelessGatewayTaskDefinitionOutput {
            auto_create_tasks: self.auto_create_tasks
                .unwrap_or_default()
            ,
            name: self.name
            ,
            update: self.update
            ,
            arn: self.arn
            ,
            _request_id: self._request_id,
        }
    }
}
