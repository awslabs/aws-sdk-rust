// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateWirelessGatewayInput {
    /// <p>The ID of the resource to update.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The new name of the resource.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A new description of the resource.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.</p>
    pub join_eui_filters: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
    /// <p>A list of NetId values that are used by LoRa gateways to filter the uplink frames.</p>
    pub net_id_filters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The MaxEIRP value.</p>
    pub max_eirp: ::std::option::Option<f32>,
}
impl UpdateWirelessGatewayInput {
    /// <p>The ID of the resource to update.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The new name of the resource.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A new description of the resource.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.join_eui_filters.is_none()`.
    pub fn join_eui_filters(&self) -> &[::std::vec::Vec<::std::string::String>] {
        self.join_eui_filters.as_deref().unwrap_or_default()
    }
    /// <p>A list of NetId values that are used by LoRa gateways to filter the uplink frames.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.net_id_filters.is_none()`.
    pub fn net_id_filters(&self) -> &[::std::string::String] {
        self.net_id_filters.as_deref().unwrap_or_default()
    }
    /// <p>The MaxEIRP value.</p>
    pub fn max_eirp(&self) -> ::std::option::Option<f32> {
        self.max_eirp
    }
}
impl UpdateWirelessGatewayInput {
    /// Creates a new builder-style object to manufacture [`UpdateWirelessGatewayInput`](crate::operation::update_wireless_gateway::UpdateWirelessGatewayInput).
    pub fn builder() -> crate::operation::update_wireless_gateway::builders::UpdateWirelessGatewayInputBuilder {
        crate::operation::update_wireless_gateway::builders::UpdateWirelessGatewayInputBuilder::default()
    }
}

/// A builder for [`UpdateWirelessGatewayInput`](crate::operation::update_wireless_gateway::UpdateWirelessGatewayInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateWirelessGatewayInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) join_eui_filters: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
    pub(crate) net_id_filters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) max_eirp: ::std::option::Option<f32>,
}
impl UpdateWirelessGatewayInputBuilder {
    /// <p>The ID of the resource to update.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the resource to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the resource to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The new name of the resource.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new name of the resource.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The new name of the resource.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A new description of the resource.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new description of the resource.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A new description of the resource.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `join_eui_filters`.
    ///
    /// To override the contents of this collection use [`set_join_eui_filters`](Self::set_join_eui_filters).
    ///
    /// <p>A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.</p>
    pub fn join_eui_filters(mut self, input: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut v = self.join_eui_filters.unwrap_or_default();
        v.push(input);
        self.join_eui_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.</p>
    pub fn set_join_eui_filters(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>) -> Self {
        self.join_eui_filters = input;
        self
    }
    /// <p>A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.</p>
    pub fn get_join_eui_filters(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>> {
        &self.join_eui_filters
    }
    /// Appends an item to `net_id_filters`.
    ///
    /// To override the contents of this collection use [`set_net_id_filters`](Self::set_net_id_filters).
    ///
    /// <p>A list of NetId values that are used by LoRa gateways to filter the uplink frames.</p>
    pub fn net_id_filters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.net_id_filters.unwrap_or_default();
        v.push(input.into());
        self.net_id_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of NetId values that are used by LoRa gateways to filter the uplink frames.</p>
    pub fn set_net_id_filters(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.net_id_filters = input;
        self
    }
    /// <p>A list of NetId values that are used by LoRa gateways to filter the uplink frames.</p>
    pub fn get_net_id_filters(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.net_id_filters
    }
    /// <p>The MaxEIRP value.</p>
    pub fn max_eirp(mut self, input: f32) -> Self {
        self.max_eirp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The MaxEIRP value.</p>
    pub fn set_max_eirp(mut self, input: ::std::option::Option<f32>) -> Self {
        self.max_eirp = input;
        self
    }
    /// <p>The MaxEIRP value.</p>
    pub fn get_max_eirp(&self) -> &::std::option::Option<f32> {
        &self.max_eirp
    }
    /// Consumes the builder and constructs a [`UpdateWirelessGatewayInput`](crate::operation::update_wireless_gateway::UpdateWirelessGatewayInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_wireless_gateway::UpdateWirelessGatewayInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_wireless_gateway::UpdateWirelessGatewayInput {
            id: self.id,
            name: self.name,
            description: self.description,
            join_eui_filters: self.join_eui_filters,
            net_id_filters: self.net_id_filters,
            max_eirp: self.max_eirp,
        })
    }
}
