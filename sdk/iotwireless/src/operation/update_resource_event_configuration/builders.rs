// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_resource_event_configuration::_update_resource_event_configuration_output::UpdateResourceEventConfigurationOutputBuilder;

pub use crate::operation::update_resource_event_configuration::_update_resource_event_configuration_input::UpdateResourceEventConfigurationInputBuilder;

/// Fluent builder constructing a request to `UpdateResourceEventConfiguration`.
///
/// <p>Update the event configuration for a particular resource identifier.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateResourceEventConfigurationFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_resource_event_configuration::builders::UpdateResourceEventConfigurationInputBuilder
            }
impl UpdateResourceEventConfigurationFluentBuilder {
    /// Creates a new `UpdateResourceEventConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_resource_event_configuration::UpdateResourceEventConfiguration, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationOutput, aws_smithy_http::result::SdkError<crate::operation::update_resource_event_configuration::UpdateResourceEventConfigurationError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Resource identifier to opt in for event messaging.</p>
    pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.identifier(input.into());
        self
    }
    /// <p>Resource identifier to opt in for event messaging.</p>
    pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_identifier(input);
        self
    }
    /// <p>Identifier type of the particular resource identifier for event configuration.</p>
    pub fn identifier_type(mut self, input: crate::types::IdentifierType) -> Self {
        self.inner = self.inner.identifier_type(input);
        self
    }
    /// <p>Identifier type of the particular resource identifier for event configuration.</p>
    pub fn set_identifier_type(
        mut self,
        input: std::option::Option<crate::types::IdentifierType>,
    ) -> Self {
        self.inner = self.inner.set_identifier_type(input);
        self
    }
    /// <p>Partner type of the resource if the identifier type is <code>PartnerAccountId</code> </p>
    pub fn partner_type(mut self, input: crate::types::EventNotificationPartnerType) -> Self {
        self.inner = self.inner.partner_type(input);
        self
    }
    /// <p>Partner type of the resource if the identifier type is <code>PartnerAccountId</code> </p>
    pub fn set_partner_type(
        mut self,
        input: std::option::Option<crate::types::EventNotificationPartnerType>,
    ) -> Self {
        self.inner = self.inner.set_partner_type(input);
        self
    }
    /// <p>Event configuration for the device registration state event.</p>
    pub fn device_registration_state(
        mut self,
        input: crate::types::DeviceRegistrationStateEventConfiguration,
    ) -> Self {
        self.inner = self.inner.device_registration_state(input);
        self
    }
    /// <p>Event configuration for the device registration state event.</p>
    pub fn set_device_registration_state(
        mut self,
        input: std::option::Option<crate::types::DeviceRegistrationStateEventConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_device_registration_state(input);
        self
    }
    /// <p>Event configuration for the proximity event.</p>
    pub fn proximity(mut self, input: crate::types::ProximityEventConfiguration) -> Self {
        self.inner = self.inner.proximity(input);
        self
    }
    /// <p>Event configuration for the proximity event.</p>
    pub fn set_proximity(
        mut self,
        input: std::option::Option<crate::types::ProximityEventConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_proximity(input);
        self
    }
    /// <p>Event configuration for the join event.</p>
    pub fn join(mut self, input: crate::types::JoinEventConfiguration) -> Self {
        self.inner = self.inner.join(input);
        self
    }
    /// <p>Event configuration for the join event.</p>
    pub fn set_join(
        mut self,
        input: std::option::Option<crate::types::JoinEventConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_join(input);
        self
    }
    /// <p>Event configuration for the connection status event.</p>
    pub fn connection_status(
        mut self,
        input: crate::types::ConnectionStatusEventConfiguration,
    ) -> Self {
        self.inner = self.inner.connection_status(input);
        self
    }
    /// <p>Event configuration for the connection status event.</p>
    pub fn set_connection_status(
        mut self,
        input: std::option::Option<crate::types::ConnectionStatusEventConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_connection_status(input);
        self
    }
    /// <p>Event configuration for the message delivery status event.</p>
    pub fn message_delivery_status(
        mut self,
        input: crate::types::MessageDeliveryStatusEventConfiguration,
    ) -> Self {
        self.inner = self.inner.message_delivery_status(input);
        self
    }
    /// <p>Event configuration for the message delivery status event.</p>
    pub fn set_message_delivery_status(
        mut self,
        input: std::option::Option<crate::types::MessageDeliveryStatusEventConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_message_delivery_status(input);
        self
    }
}
