// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeviceProfileOutput {
    /// <p>The Amazon Resource Name of the resource.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the resource.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the device profile.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>Information about the device profile.</p>
    #[doc(hidden)]
    pub lo_ra_wan: std::option::Option<crate::types::LoRaWanDeviceProfile>,
    _request_id: Option<String>,
}
impl GetDeviceProfileOutput {
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the resource.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the device profile.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Information about the device profile.</p>
    pub fn lo_ra_wan(&self) -> std::option::Option<&crate::types::LoRaWanDeviceProfile> {
        self.lo_ra_wan.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetDeviceProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDeviceProfileOutput {
    /// Creates a new builder-style object to manufacture [`GetDeviceProfileOutput`](crate::operation::get_device_profile::GetDeviceProfileOutput).
    pub fn builder() -> crate::operation::get_device_profile::builders::GetDeviceProfileOutputBuilder
    {
        crate::operation::get_device_profile::builders::GetDeviceProfileOutputBuilder::default()
    }
}

/// A builder for [`GetDeviceProfileOutput`](crate::operation::get_device_profile::GetDeviceProfileOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDeviceProfileOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) lo_ra_wan: std::option::Option<crate::types::LoRaWanDeviceProfile>,
    _request_id: Option<String>,
}
impl GetDeviceProfileOutputBuilder {
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the resource.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the resource.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ID of the device profile.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the device profile.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Information about the device profile.</p>
    pub fn lo_ra_wan(mut self, input: crate::types::LoRaWanDeviceProfile) -> Self {
        self.lo_ra_wan = Some(input);
        self
    }
    /// <p>Information about the device profile.</p>
    pub fn set_lo_ra_wan(
        mut self,
        input: std::option::Option<crate::types::LoRaWanDeviceProfile>,
    ) -> Self {
        self.lo_ra_wan = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDeviceProfileOutput`](crate::operation::get_device_profile::GetDeviceProfileOutput).
    pub fn build(self) -> crate::operation::get_device_profile::GetDeviceProfileOutput {
        crate::operation::get_device_profile::GetDeviceProfileOutput {
            arn: self.arn,
            name: self.name,
            id: self.id,
            lo_ra_wan: self.lo_ra_wan,
            _request_id: self._request_id,
        }
    }
}
