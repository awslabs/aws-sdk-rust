// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWirelessDeviceInput {
    /// <p>The ID of the resource to update.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the new destination for the device.</p>
    #[doc(hidden)]
    pub destination_name: std::option::Option<std::string::String>,
    /// <p>The new name of the resource.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A new description of the resource.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The updated wireless device's configuration.</p>
    #[doc(hidden)]
    pub lo_ra_wan: std::option::Option<crate::types::LoRaWanUpdateDevice>,
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    #[doc(hidden)]
    pub positioning: std::option::Option<crate::types::PositioningConfigStatus>,
}
impl UpdateWirelessDeviceInput {
    /// <p>The ID of the resource to update.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the new destination for the device.</p>
    pub fn destination_name(&self) -> std::option::Option<&str> {
        self.destination_name.as_deref()
    }
    /// <p>The new name of the resource.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A new description of the resource.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated wireless device's configuration.</p>
    pub fn lo_ra_wan(&self) -> std::option::Option<&crate::types::LoRaWanUpdateDevice> {
        self.lo_ra_wan.as_ref()
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn positioning(&self) -> std::option::Option<&crate::types::PositioningConfigStatus> {
        self.positioning.as_ref()
    }
}
impl UpdateWirelessDeviceInput {
    /// Creates a new builder-style object to manufacture [`UpdateWirelessDeviceInput`](crate::operation::update_wireless_device::UpdateWirelessDeviceInput).
    pub fn builder(
    ) -> crate::operation::update_wireless_device::builders::UpdateWirelessDeviceInputBuilder {
        crate::operation::update_wireless_device::builders::UpdateWirelessDeviceInputBuilder::default()
    }
}

/// A builder for [`UpdateWirelessDeviceInput`](crate::operation::update_wireless_device::UpdateWirelessDeviceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateWirelessDeviceInputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) destination_name: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) lo_ra_wan: std::option::Option<crate::types::LoRaWanUpdateDevice>,
    pub(crate) positioning: std::option::Option<crate::types::PositioningConfigStatus>,
}
impl UpdateWirelessDeviceInputBuilder {
    /// <p>The ID of the resource to update.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the resource to update.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the new destination for the device.</p>
    pub fn destination_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_name = Some(input.into());
        self
    }
    /// <p>The name of the new destination for the device.</p>
    pub fn set_destination_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_name = input;
        self
    }
    /// <p>The new name of the resource.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The new name of the resource.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A new description of the resource.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A new description of the resource.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated wireless device's configuration.</p>
    pub fn lo_ra_wan(mut self, input: crate::types::LoRaWanUpdateDevice) -> Self {
        self.lo_ra_wan = Some(input);
        self
    }
    /// <p>The updated wireless device's configuration.</p>
    pub fn set_lo_ra_wan(
        mut self,
        input: std::option::Option<crate::types::LoRaWanUpdateDevice>,
    ) -> Self {
        self.lo_ra_wan = input;
        self
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn positioning(mut self, input: crate::types::PositioningConfigStatus) -> Self {
        self.positioning = Some(input);
        self
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn set_positioning(
        mut self,
        input: std::option::Option<crate::types::PositioningConfigStatus>,
    ) -> Self {
        self.positioning = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateWirelessDeviceInput`](crate::operation::update_wireless_device::UpdateWirelessDeviceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_wireless_device::UpdateWirelessDeviceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_wireless_device::UpdateWirelessDeviceInput {
                id: self.id,
                destination_name: self.destination_name,
                name: self.name,
                description: self.description,
                lo_ra_wan: self.lo_ra_wan,
                positioning: self.positioning,
            },
        )
    }
}
