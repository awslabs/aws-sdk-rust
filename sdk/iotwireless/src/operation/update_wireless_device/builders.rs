// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_wireless_device::_update_wireless_device_output::UpdateWirelessDeviceOutputBuilder;

pub use crate::operation::update_wireless_device::_update_wireless_device_input::UpdateWirelessDeviceInputBuilder;

/// Fluent builder constructing a request to `UpdateWirelessDevice`.
///
/// <p>Updates properties of a wireless device.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWirelessDeviceFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_wireless_device::builders::UpdateWirelessDeviceInputBuilder,
}
impl UpdateWirelessDeviceFluentBuilder {
    /// Creates a new `UpdateWirelessDevice`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_wireless_device::UpdateWirelessDevice,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_wireless_device::UpdateWirelessDeviceError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_wireless_device::UpdateWirelessDeviceOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_wireless_device::UpdateWirelessDeviceError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the resource to update.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The ID of the resource to update.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The name of the new destination for the device.</p>
    pub fn destination_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_name(input.into());
        self
    }
    /// <p>The name of the new destination for the device.</p>
    pub fn set_destination_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_destination_name(input);
        self
    }
    /// <p>The new name of the resource.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The new name of the resource.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A new description of the resource.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A new description of the resource.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The updated wireless device's configuration.</p>
    pub fn lo_ra_wan(mut self, input: crate::types::LoRaWanUpdateDevice) -> Self {
        self.inner = self.inner.lo_ra_wan(input);
        self
    }
    /// <p>The updated wireless device's configuration.</p>
    pub fn set_lo_ra_wan(
        mut self,
        input: std::option::Option<crate::types::LoRaWanUpdateDevice>,
    ) -> Self {
        self.inner = self.inner.set_lo_ra_wan(input);
        self
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn positioning(mut self, input: crate::types::PositioningConfigStatus) -> Self {
        self.inner = self.inner.positioning(input);
        self
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn set_positioning(
        mut self,
        input: std::option::Option<crate::types::PositioningConfigStatus>,
    ) -> Self {
        self.inner = self.inner.set_positioning(input);
        self
    }
}
