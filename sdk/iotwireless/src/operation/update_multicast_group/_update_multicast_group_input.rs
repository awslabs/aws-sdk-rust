// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMulticastGroupInput {
    /// <p>The ID of the multicast group.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the multicast group.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the new resource.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The LoRaWAN information that is to be used with the multicast group.</p>
    pub lo_ra_wan: ::std::option::Option<crate::types::LoRaWanMulticast>,
}
impl UpdateMulticastGroupInput {
    /// <p>The ID of the multicast group.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the multicast group.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the new resource.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The LoRaWAN information that is to be used with the multicast group.</p>
    pub fn lo_ra_wan(&self) -> ::std::option::Option<&crate::types::LoRaWanMulticast> {
        self.lo_ra_wan.as_ref()
    }
}
impl UpdateMulticastGroupInput {
    /// Creates a new builder-style object to manufacture [`UpdateMulticastGroupInput`](crate::operation::update_multicast_group::UpdateMulticastGroupInput).
    pub fn builder() -> crate::operation::update_multicast_group::builders::UpdateMulticastGroupInputBuilder {
        crate::operation::update_multicast_group::builders::UpdateMulticastGroupInputBuilder::default()
    }
}

/// A builder for [`UpdateMulticastGroupInput`](crate::operation::update_multicast_group::UpdateMulticastGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateMulticastGroupInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) lo_ra_wan: ::std::option::Option<crate::types::LoRaWanMulticast>,
}
impl UpdateMulticastGroupInputBuilder {
    /// <p>The ID of the multicast group.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the multicast group.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the multicast group.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the multicast group.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the multicast group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the multicast group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the new resource.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the new resource.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the new resource.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The LoRaWAN information that is to be used with the multicast group.</p>
    pub fn lo_ra_wan(mut self, input: crate::types::LoRaWanMulticast) -> Self {
        self.lo_ra_wan = ::std::option::Option::Some(input);
        self
    }
    /// <p>The LoRaWAN information that is to be used with the multicast group.</p>
    pub fn set_lo_ra_wan(mut self, input: ::std::option::Option<crate::types::LoRaWanMulticast>) -> Self {
        self.lo_ra_wan = input;
        self
    }
    /// <p>The LoRaWAN information that is to be used with the multicast group.</p>
    pub fn get_lo_ra_wan(&self) -> &::std::option::Option<crate::types::LoRaWanMulticast> {
        &self.lo_ra_wan
    }
    /// Consumes the builder and constructs a [`UpdateMulticastGroupInput`](crate::operation::update_multicast_group::UpdateMulticastGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_multicast_group::UpdateMulticastGroupInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_multicast_group::UpdateMulticastGroupInput {
            id: self.id,
            name: self.name,
            description: self.description,
            lo_ra_wan: self.lo_ra_wan,
        })
    }
}
