// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListQueuedMessagesInput {
    /// <p>The ID of a given wireless device which the downlink message packets are being sent.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in this operation.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The wireless device type, whic can be either Sidewalk or LoRaWAN.</p>
    pub wireless_device_type: ::std::option::Option<crate::types::WirelessDeviceType>,
}
impl ListQueuedMessagesInput {
    /// <p>The ID of a given wireless device which the downlink message packets are being sent.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The wireless device type, whic can be either Sidewalk or LoRaWAN.</p>
    pub fn wireless_device_type(&self) -> ::std::option::Option<&crate::types::WirelessDeviceType> {
        self.wireless_device_type.as_ref()
    }
}
impl ListQueuedMessagesInput {
    /// Creates a new builder-style object to manufacture [`ListQueuedMessagesInput`](crate::operation::list_queued_messages::ListQueuedMessagesInput).
    pub fn builder() -> crate::operation::list_queued_messages::builders::ListQueuedMessagesInputBuilder {
        crate::operation::list_queued_messages::builders::ListQueuedMessagesInputBuilder::default()
    }
}

/// A builder for [`ListQueuedMessagesInput`](crate::operation::list_queued_messages::ListQueuedMessagesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListQueuedMessagesInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) wireless_device_type: ::std::option::Option<crate::types::WirelessDeviceType>,
}
impl ListQueuedMessagesInputBuilder {
    /// <p>The ID of a given wireless device which the downlink message packets are being sent.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a given wireless device which the downlink message packets are being sent.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of a given wireless device which the downlink message packets are being sent.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in this operation.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The wireless device type, whic can be either Sidewalk or LoRaWAN.</p>
    pub fn wireless_device_type(mut self, input: crate::types::WirelessDeviceType) -> Self {
        self.wireless_device_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The wireless device type, whic can be either Sidewalk or LoRaWAN.</p>
    pub fn set_wireless_device_type(mut self, input: ::std::option::Option<crate::types::WirelessDeviceType>) -> Self {
        self.wireless_device_type = input;
        self
    }
    /// <p>The wireless device type, whic can be either Sidewalk or LoRaWAN.</p>
    pub fn get_wireless_device_type(&self) -> &::std::option::Option<crate::types::WirelessDeviceType> {
        &self.wireless_device_type
    }
    /// Consumes the builder and constructs a [`ListQueuedMessagesInput`](crate::operation::list_queued_messages::ListQueuedMessagesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_queued_messages::ListQueuedMessagesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_queued_messages::ListQueuedMessagesInput {
            id: self.id,
            next_token: self.next_token,
            max_results: self.max_results,
            wireless_device_type: self.wireless_device_type,
        })
    }
}
