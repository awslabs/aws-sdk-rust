// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetResourceEventConfigurationOutput {
    /// <p>Event configuration for the device registration state event.</p>
    #[doc(hidden)]
    pub device_registration_state:
        std::option::Option<crate::types::DeviceRegistrationStateEventConfiguration>,
    /// <p>Event configuration for the proximity event.</p>
    #[doc(hidden)]
    pub proximity: std::option::Option<crate::types::ProximityEventConfiguration>,
    /// <p>Event configuration for the join event.</p>
    #[doc(hidden)]
    pub join: std::option::Option<crate::types::JoinEventConfiguration>,
    /// <p>Event configuration for the connection status event.</p>
    #[doc(hidden)]
    pub connection_status: std::option::Option<crate::types::ConnectionStatusEventConfiguration>,
    /// <p>Event configuration for the message delivery status event.</p>
    #[doc(hidden)]
    pub message_delivery_status:
        std::option::Option<crate::types::MessageDeliveryStatusEventConfiguration>,
    _request_id: Option<String>,
}
impl GetResourceEventConfigurationOutput {
    /// <p>Event configuration for the device registration state event.</p>
    pub fn device_registration_state(
        &self,
    ) -> std::option::Option<&crate::types::DeviceRegistrationStateEventConfiguration> {
        self.device_registration_state.as_ref()
    }
    /// <p>Event configuration for the proximity event.</p>
    pub fn proximity(&self) -> std::option::Option<&crate::types::ProximityEventConfiguration> {
        self.proximity.as_ref()
    }
    /// <p>Event configuration for the join event.</p>
    pub fn join(&self) -> std::option::Option<&crate::types::JoinEventConfiguration> {
        self.join.as_ref()
    }
    /// <p>Event configuration for the connection status event.</p>
    pub fn connection_status(
        &self,
    ) -> std::option::Option<&crate::types::ConnectionStatusEventConfiguration> {
        self.connection_status.as_ref()
    }
    /// <p>Event configuration for the message delivery status event.</p>
    pub fn message_delivery_status(
        &self,
    ) -> std::option::Option<&crate::types::MessageDeliveryStatusEventConfiguration> {
        self.message_delivery_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetResourceEventConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetResourceEventConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetResourceEventConfigurationOutput`](crate::operation::get_resource_event_configuration::GetResourceEventConfigurationOutput).
    pub fn builder() -> crate::operation::get_resource_event_configuration::builders::GetResourceEventConfigurationOutputBuilder{
        crate::operation::get_resource_event_configuration::builders::GetResourceEventConfigurationOutputBuilder::default()
    }
}

/// A builder for [`GetResourceEventConfigurationOutput`](crate::operation::get_resource_event_configuration::GetResourceEventConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetResourceEventConfigurationOutputBuilder {
    pub(crate) device_registration_state:
        std::option::Option<crate::types::DeviceRegistrationStateEventConfiguration>,
    pub(crate) proximity: std::option::Option<crate::types::ProximityEventConfiguration>,
    pub(crate) join: std::option::Option<crate::types::JoinEventConfiguration>,
    pub(crate) connection_status:
        std::option::Option<crate::types::ConnectionStatusEventConfiguration>,
    pub(crate) message_delivery_status:
        std::option::Option<crate::types::MessageDeliveryStatusEventConfiguration>,
    _request_id: Option<String>,
}
impl GetResourceEventConfigurationOutputBuilder {
    /// <p>Event configuration for the device registration state event.</p>
    pub fn device_registration_state(
        mut self,
        input: crate::types::DeviceRegistrationStateEventConfiguration,
    ) -> Self {
        self.device_registration_state = Some(input);
        self
    }
    /// <p>Event configuration for the device registration state event.</p>
    pub fn set_device_registration_state(
        mut self,
        input: std::option::Option<crate::types::DeviceRegistrationStateEventConfiguration>,
    ) -> Self {
        self.device_registration_state = input;
        self
    }
    /// <p>Event configuration for the proximity event.</p>
    pub fn proximity(mut self, input: crate::types::ProximityEventConfiguration) -> Self {
        self.proximity = Some(input);
        self
    }
    /// <p>Event configuration for the proximity event.</p>
    pub fn set_proximity(
        mut self,
        input: std::option::Option<crate::types::ProximityEventConfiguration>,
    ) -> Self {
        self.proximity = input;
        self
    }
    /// <p>Event configuration for the join event.</p>
    pub fn join(mut self, input: crate::types::JoinEventConfiguration) -> Self {
        self.join = Some(input);
        self
    }
    /// <p>Event configuration for the join event.</p>
    pub fn set_join(
        mut self,
        input: std::option::Option<crate::types::JoinEventConfiguration>,
    ) -> Self {
        self.join = input;
        self
    }
    /// <p>Event configuration for the connection status event.</p>
    pub fn connection_status(
        mut self,
        input: crate::types::ConnectionStatusEventConfiguration,
    ) -> Self {
        self.connection_status = Some(input);
        self
    }
    /// <p>Event configuration for the connection status event.</p>
    pub fn set_connection_status(
        mut self,
        input: std::option::Option<crate::types::ConnectionStatusEventConfiguration>,
    ) -> Self {
        self.connection_status = input;
        self
    }
    /// <p>Event configuration for the message delivery status event.</p>
    pub fn message_delivery_status(
        mut self,
        input: crate::types::MessageDeliveryStatusEventConfiguration,
    ) -> Self {
        self.message_delivery_status = Some(input);
        self
    }
    /// <p>Event configuration for the message delivery status event.</p>
    pub fn set_message_delivery_status(
        mut self,
        input: std::option::Option<crate::types::MessageDeliveryStatusEventConfiguration>,
    ) -> Self {
        self.message_delivery_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetResourceEventConfigurationOutput`](crate::operation::get_resource_event_configuration::GetResourceEventConfigurationOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_resource_event_configuration::GetResourceEventConfigurationOutput
    {
        crate::operation::get_resource_event_configuration::GetResourceEventConfigurationOutput {
            device_registration_state: self.device_registration_state,
            proximity: self.proximity,
            join: self.join,
            connection_status: self.connection_status,
            message_delivery_status: self.message_delivery_status,
            _request_id: self._request_id,
        }
    }
}
