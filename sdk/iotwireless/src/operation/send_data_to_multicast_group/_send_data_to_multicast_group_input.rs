// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SendDataToMulticastGroupInput {
    /// <p>The ID of the multicast group.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The binary to be sent to the end device, encoded in base64.</p>
    pub payload_data: ::std::option::Option<::std::string::String>,
    /// <p>Wireless metadata that is to be sent to multicast group.</p>
    pub wireless_metadata: ::std::option::Option<crate::types::MulticastWirelessMetadata>,
}
impl SendDataToMulticastGroupInput {
    /// <p>The ID of the multicast group.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The binary to be sent to the end device, encoded in base64.</p>
    pub fn payload_data(&self) -> ::std::option::Option<&str> {
        self.payload_data.as_deref()
    }
    /// <p>Wireless metadata that is to be sent to multicast group.</p>
    pub fn wireless_metadata(&self) -> ::std::option::Option<&crate::types::MulticastWirelessMetadata> {
        self.wireless_metadata.as_ref()
    }
}
impl SendDataToMulticastGroupInput {
    /// Creates a new builder-style object to manufacture [`SendDataToMulticastGroupInput`](crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupInput).
    pub fn builder() -> crate::operation::send_data_to_multicast_group::builders::SendDataToMulticastGroupInputBuilder {
        crate::operation::send_data_to_multicast_group::builders::SendDataToMulticastGroupInputBuilder::default()
    }
}

/// A builder for [`SendDataToMulticastGroupInput`](crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SendDataToMulticastGroupInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) payload_data: ::std::option::Option<::std::string::String>,
    pub(crate) wireless_metadata: ::std::option::Option<crate::types::MulticastWirelessMetadata>,
}
impl SendDataToMulticastGroupInputBuilder {
    /// <p>The ID of the multicast group.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the multicast group.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the multicast group.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The binary to be sent to the end device, encoded in base64.</p>
    /// This field is required.
    pub fn payload_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.payload_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The binary to be sent to the end device, encoded in base64.</p>
    pub fn set_payload_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.payload_data = input;
        self
    }
    /// <p>The binary to be sent to the end device, encoded in base64.</p>
    pub fn get_payload_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.payload_data
    }
    /// <p>Wireless metadata that is to be sent to multicast group.</p>
    /// This field is required.
    pub fn wireless_metadata(mut self, input: crate::types::MulticastWirelessMetadata) -> Self {
        self.wireless_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Wireless metadata that is to be sent to multicast group.</p>
    pub fn set_wireless_metadata(mut self, input: ::std::option::Option<crate::types::MulticastWirelessMetadata>) -> Self {
        self.wireless_metadata = input;
        self
    }
    /// <p>Wireless metadata that is to be sent to multicast group.</p>
    pub fn get_wireless_metadata(&self) -> &::std::option::Option<crate::types::MulticastWirelessMetadata> {
        &self.wireless_metadata
    }
    /// Consumes the builder and constructs a [`SendDataToMulticastGroupInput`](crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::send_data_to_multicast_group::SendDataToMulticastGroupInput {
            id: self.id,
            payload_data: self.payload_data,
            wireless_metadata: self.wireless_metadata,
        })
    }
}
