// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateWirelessDeviceWithMulticastGroupInput {
    /// <p>The ID of the multicast group.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The ID of the wireless device.</p>
    #[doc(hidden)]
    pub wireless_device_id: std::option::Option<std::string::String>,
}
impl AssociateWirelessDeviceWithMulticastGroupInput {
    /// <p>The ID of the multicast group.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the wireless device.</p>
    pub fn wireless_device_id(&self) -> std::option::Option<&str> {
        self.wireless_device_id.as_deref()
    }
}
impl AssociateWirelessDeviceWithMulticastGroupInput {
    /// Creates a new builder-style object to manufacture [`AssociateWirelessDeviceWithMulticastGroupInput`](crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupInput).
    pub fn builder() -> crate::operation::associate_wireless_device_with_multicast_group::builders::AssociateWirelessDeviceWithMulticastGroupInputBuilder{
        crate::operation::associate_wireless_device_with_multicast_group::builders::AssociateWirelessDeviceWithMulticastGroupInputBuilder::default()
    }
}

/// A builder for [`AssociateWirelessDeviceWithMulticastGroupInput`](crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociateWirelessDeviceWithMulticastGroupInputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) wireless_device_id: std::option::Option<std::string::String>,
}
impl AssociateWirelessDeviceWithMulticastGroupInputBuilder {
    /// <p>The ID of the multicast group.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the multicast group.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the wireless device.</p>
    pub fn wireless_device_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.wireless_device_id = Some(input.into());
        self
    }
    /// <p>The ID of the wireless device.</p>
    pub fn set_wireless_device_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.wireless_device_id = input;
        self
    }
    /// Consumes the builder and constructs a [`AssociateWirelessDeviceWithMulticastGroupInput`](crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupInput).
    pub fn build(self) -> Result<crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::associate_wireless_device_with_multicast_group::AssociateWirelessDeviceWithMulticastGroupInput {
                id: self.id
                ,
                wireless_device_id: self.wireless_device_id
                ,
            }
        )
    }
}
