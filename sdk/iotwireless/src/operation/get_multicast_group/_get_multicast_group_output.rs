// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMulticastGroupOutput {
    /// <p>The arn of the multicast group.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the multicast group.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the multicast group.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the new resource.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The status of the multicast group.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The LoRaWAN information that is to be returned from getting multicast group information.</p>
    #[doc(hidden)]
    pub lo_ra_wan: std::option::Option<crate::types::LoRaWanMulticastGet>,
    /// <p>Created at timestamp for the resource.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetMulticastGroupOutput {
    /// <p>The arn of the multicast group.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the multicast group.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the multicast group.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the new resource.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the multicast group.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The LoRaWAN information that is to be returned from getting multicast group information.</p>
    pub fn lo_ra_wan(&self) -> std::option::Option<&crate::types::LoRaWanMulticastGet> {
        self.lo_ra_wan.as_ref()
    }
    /// <p>Created at timestamp for the resource.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMulticastGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMulticastGroupOutput {
    /// Creates a new builder-style object to manufacture [`GetMulticastGroupOutput`](crate::operation::get_multicast_group::GetMulticastGroupOutput).
    pub fn builder(
    ) -> crate::operation::get_multicast_group::builders::GetMulticastGroupOutputBuilder {
        crate::operation::get_multicast_group::builders::GetMulticastGroupOutputBuilder::default()
    }
}

/// A builder for [`GetMulticastGroupOutput`](crate::operation::get_multicast_group::GetMulticastGroupOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetMulticastGroupOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) lo_ra_wan: std::option::Option<crate::types::LoRaWanMulticastGet>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetMulticastGroupOutputBuilder {
    /// <p>The arn of the multicast group.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The arn of the multicast group.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ID of the multicast group.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the multicast group.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the multicast group.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the multicast group.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the new resource.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the new resource.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The status of the multicast group.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the multicast group.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The LoRaWAN information that is to be returned from getting multicast group information.</p>
    pub fn lo_ra_wan(mut self, input: crate::types::LoRaWanMulticastGet) -> Self {
        self.lo_ra_wan = Some(input);
        self
    }
    /// <p>The LoRaWAN information that is to be returned from getting multicast group information.</p>
    pub fn set_lo_ra_wan(
        mut self,
        input: std::option::Option<crate::types::LoRaWanMulticastGet>,
    ) -> Self {
        self.lo_ra_wan = input;
        self
    }
    /// <p>Created at timestamp for the resource.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>Created at timestamp for the resource.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMulticastGroupOutput`](crate::operation::get_multicast_group::GetMulticastGroupOutput).
    pub fn build(self) -> crate::operation::get_multicast_group::GetMulticastGroupOutput {
        crate::operation::get_multicast_group::GetMulticastGroupOutput {
            arn: self.arn,
            id: self.id,
            name: self.name,
            description: self.description,
            status: self.status,
            lo_ra_wan: self.lo_ra_wan,
            created_at: self.created_at,
            _request_id: self._request_id,
        }
    }
}
