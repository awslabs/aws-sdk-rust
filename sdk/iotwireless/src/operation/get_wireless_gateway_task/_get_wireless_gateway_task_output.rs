// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetWirelessGatewayTaskOutput {
    /// <p>The ID of the wireless gateway.</p>
    #[doc(hidden)]
    pub wireless_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of the WirelessGatewayTask.</p>
    #[doc(hidden)]
    pub wireless_gateway_task_definition_id: std::option::Option<std::string::String>,
    /// <p>The date and time when the most recent uplink was received.</p>
    #[doc(hidden)]
    pub last_uplink_received_at: std::option::Option<std::string::String>,
    /// <p>The date and time when the task was created.</p>
    #[doc(hidden)]
    pub task_created_at: std::option::Option<std::string::String>,
    /// <p>The status of the request.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::WirelessGatewayTaskStatus>,
    _request_id: Option<String>,
}
impl GetWirelessGatewayTaskOutput {
    /// <p>The ID of the wireless gateway.</p>
    pub fn wireless_gateway_id(&self) -> std::option::Option<&str> {
        self.wireless_gateway_id.as_deref()
    }
    /// <p>The ID of the WirelessGatewayTask.</p>
    pub fn wireless_gateway_task_definition_id(&self) -> std::option::Option<&str> {
        self.wireless_gateway_task_definition_id.as_deref()
    }
    /// <p>The date and time when the most recent uplink was received.</p>
    pub fn last_uplink_received_at(&self) -> std::option::Option<&str> {
        self.last_uplink_received_at.as_deref()
    }
    /// <p>The date and time when the task was created.</p>
    pub fn task_created_at(&self) -> std::option::Option<&str> {
        self.task_created_at.as_deref()
    }
    /// <p>The status of the request.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::WirelessGatewayTaskStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetWirelessGatewayTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetWirelessGatewayTaskOutput {
    /// Creates a new builder-style object to manufacture [`GetWirelessGatewayTaskOutput`](crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskOutput).
    pub fn builder(
    ) -> crate::operation::get_wireless_gateway_task::builders::GetWirelessGatewayTaskOutputBuilder
    {
        crate::operation::get_wireless_gateway_task::builders::GetWirelessGatewayTaskOutputBuilder::default()
    }
}

/// A builder for [`GetWirelessGatewayTaskOutput`](crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetWirelessGatewayTaskOutputBuilder {
    pub(crate) wireless_gateway_id: std::option::Option<std::string::String>,
    pub(crate) wireless_gateway_task_definition_id: std::option::Option<std::string::String>,
    pub(crate) last_uplink_received_at: std::option::Option<std::string::String>,
    pub(crate) task_created_at: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::WirelessGatewayTaskStatus>,
    _request_id: Option<String>,
}
impl GetWirelessGatewayTaskOutputBuilder {
    /// <p>The ID of the wireless gateway.</p>
    pub fn wireless_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.wireless_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of the wireless gateway.</p>
    pub fn set_wireless_gateway_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.wireless_gateway_id = input;
        self
    }
    /// <p>The ID of the WirelessGatewayTask.</p>
    pub fn wireless_gateway_task_definition_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.wireless_gateway_task_definition_id = Some(input.into());
        self
    }
    /// <p>The ID of the WirelessGatewayTask.</p>
    pub fn set_wireless_gateway_task_definition_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.wireless_gateway_task_definition_id = input;
        self
    }
    /// <p>The date and time when the most recent uplink was received.</p>
    pub fn last_uplink_received_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_uplink_received_at = Some(input.into());
        self
    }
    /// <p>The date and time when the most recent uplink was received.</p>
    pub fn set_last_uplink_received_at(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_uplink_received_at = input;
        self
    }
    /// <p>The date and time when the task was created.</p>
    pub fn task_created_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_created_at = Some(input.into());
        self
    }
    /// <p>The date and time when the task was created.</p>
    pub fn set_task_created_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_created_at = input;
        self
    }
    /// <p>The status of the request.</p>
    pub fn status(mut self, input: crate::types::WirelessGatewayTaskStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the request.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::WirelessGatewayTaskStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetWirelessGatewayTaskOutput`](crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskOutput {
        crate::operation::get_wireless_gateway_task::GetWirelessGatewayTaskOutput {
            wireless_gateway_id: self.wireless_gateway_id,
            wireless_gateway_task_definition_id: self.wireless_gateway_task_definition_id,
            last_uplink_received_at: self.last_uplink_received_at,
            task_created_at: self.task_created_at,
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
