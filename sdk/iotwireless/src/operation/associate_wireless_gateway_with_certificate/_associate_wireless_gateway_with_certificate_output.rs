// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateWirelessGatewayWithCertificateOutput {
    /// <p>The ID of the certificate associated with the wireless gateway.</p>
    #[doc(hidden)]
    pub iot_certificate_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateWirelessGatewayWithCertificateOutput {
    /// <p>The ID of the certificate associated with the wireless gateway.</p>
    pub fn iot_certificate_id(&self) -> std::option::Option<&str> {
        self.iot_certificate_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateWirelessGatewayWithCertificateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociateWirelessGatewayWithCertificateOutput {
    /// Creates a new builder-style object to manufacture [`AssociateWirelessGatewayWithCertificateOutput`](crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateOutput).
    pub fn builder() -> crate::operation::associate_wireless_gateway_with_certificate::builders::AssociateWirelessGatewayWithCertificateOutputBuilder{
        crate::operation::associate_wireless_gateway_with_certificate::builders::AssociateWirelessGatewayWithCertificateOutputBuilder::default()
    }
}

/// A builder for [`AssociateWirelessGatewayWithCertificateOutput`](crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociateWirelessGatewayWithCertificateOutputBuilder {
    pub(crate) iot_certificate_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateWirelessGatewayWithCertificateOutputBuilder {
    /// <p>The ID of the certificate associated with the wireless gateway.</p>
    pub fn iot_certificate_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.iot_certificate_id = Some(input.into());
        self
    }
    /// <p>The ID of the certificate associated with the wireless gateway.</p>
    pub fn set_iot_certificate_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.iot_certificate_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AssociateWirelessGatewayWithCertificateOutput`](crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateOutput).
    pub fn build(self) -> crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateOutput{
        crate::operation::associate_wireless_gateway_with_certificate::AssociateWirelessGatewayWithCertificateOutput {
            iot_certificate_id: self.iot_certificate_id
            ,
            _request_id: self._request_id,
        }
    }
}
