// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `AmazonPinpointEmailService`.
///
/// This client allows ergonomic access to a `AmazonPinpointEmailService`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn create_configuration_set(&self) -> fluent_builders::CreateConfigurationSet<C, M, R> {
        fluent_builders::CreateConfigurationSet::new(self.handle.clone())
    }
    pub fn create_configuration_set_event_destination(
        &self,
    ) -> fluent_builders::CreateConfigurationSetEventDestination<C, M, R> {
        fluent_builders::CreateConfigurationSetEventDestination::new(self.handle.clone())
    }
    pub fn create_dedicated_ip_pool(&self) -> fluent_builders::CreateDedicatedIpPool<C, M, R> {
        fluent_builders::CreateDedicatedIpPool::new(self.handle.clone())
    }
    pub fn create_deliverability_test_report(
        &self,
    ) -> fluent_builders::CreateDeliverabilityTestReport<C, M, R> {
        fluent_builders::CreateDeliverabilityTestReport::new(self.handle.clone())
    }
    pub fn create_email_identity(&self) -> fluent_builders::CreateEmailIdentity<C, M, R> {
        fluent_builders::CreateEmailIdentity::new(self.handle.clone())
    }
    pub fn delete_configuration_set(&self) -> fluent_builders::DeleteConfigurationSet<C, M, R> {
        fluent_builders::DeleteConfigurationSet::new(self.handle.clone())
    }
    pub fn delete_configuration_set_event_destination(
        &self,
    ) -> fluent_builders::DeleteConfigurationSetEventDestination<C, M, R> {
        fluent_builders::DeleteConfigurationSetEventDestination::new(self.handle.clone())
    }
    pub fn delete_dedicated_ip_pool(&self) -> fluent_builders::DeleteDedicatedIpPool<C, M, R> {
        fluent_builders::DeleteDedicatedIpPool::new(self.handle.clone())
    }
    pub fn delete_email_identity(&self) -> fluent_builders::DeleteEmailIdentity<C, M, R> {
        fluent_builders::DeleteEmailIdentity::new(self.handle.clone())
    }
    pub fn get_account(&self) -> fluent_builders::GetAccount<C, M, R> {
        fluent_builders::GetAccount::new(self.handle.clone())
    }
    pub fn get_blacklist_reports(&self) -> fluent_builders::GetBlacklistReports<C, M, R> {
        fluent_builders::GetBlacklistReports::new(self.handle.clone())
    }
    pub fn get_configuration_set(&self) -> fluent_builders::GetConfigurationSet<C, M, R> {
        fluent_builders::GetConfigurationSet::new(self.handle.clone())
    }
    pub fn get_configuration_set_event_destinations(
        &self,
    ) -> fluent_builders::GetConfigurationSetEventDestinations<C, M, R> {
        fluent_builders::GetConfigurationSetEventDestinations::new(self.handle.clone())
    }
    pub fn get_dedicated_ip(&self) -> fluent_builders::GetDedicatedIp<C, M, R> {
        fluent_builders::GetDedicatedIp::new(self.handle.clone())
    }
    pub fn get_dedicated_ips(&self) -> fluent_builders::GetDedicatedIps<C, M, R> {
        fluent_builders::GetDedicatedIps::new(self.handle.clone())
    }
    pub fn get_deliverability_dashboard_options(
        &self,
    ) -> fluent_builders::GetDeliverabilityDashboardOptions<C, M, R> {
        fluent_builders::GetDeliverabilityDashboardOptions::new(self.handle.clone())
    }
    pub fn get_deliverability_test_report(
        &self,
    ) -> fluent_builders::GetDeliverabilityTestReport<C, M, R> {
        fluent_builders::GetDeliverabilityTestReport::new(self.handle.clone())
    }
    pub fn get_domain_deliverability_campaign(
        &self,
    ) -> fluent_builders::GetDomainDeliverabilityCampaign<C, M, R> {
        fluent_builders::GetDomainDeliverabilityCampaign::new(self.handle.clone())
    }
    pub fn get_domain_statistics_report(
        &self,
    ) -> fluent_builders::GetDomainStatisticsReport<C, M, R> {
        fluent_builders::GetDomainStatisticsReport::new(self.handle.clone())
    }
    pub fn get_email_identity(&self) -> fluent_builders::GetEmailIdentity<C, M, R> {
        fluent_builders::GetEmailIdentity::new(self.handle.clone())
    }
    pub fn list_configuration_sets(&self) -> fluent_builders::ListConfigurationSets<C, M, R> {
        fluent_builders::ListConfigurationSets::new(self.handle.clone())
    }
    pub fn list_dedicated_ip_pools(&self) -> fluent_builders::ListDedicatedIpPools<C, M, R> {
        fluent_builders::ListDedicatedIpPools::new(self.handle.clone())
    }
    pub fn list_deliverability_test_reports(
        &self,
    ) -> fluent_builders::ListDeliverabilityTestReports<C, M, R> {
        fluent_builders::ListDeliverabilityTestReports::new(self.handle.clone())
    }
    pub fn list_domain_deliverability_campaigns(
        &self,
    ) -> fluent_builders::ListDomainDeliverabilityCampaigns<C, M, R> {
        fluent_builders::ListDomainDeliverabilityCampaigns::new(self.handle.clone())
    }
    pub fn list_email_identities(&self) -> fluent_builders::ListEmailIdentities<C, M, R> {
        fluent_builders::ListEmailIdentities::new(self.handle.clone())
    }
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C, M, R> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    pub fn put_account_dedicated_ip_warmup_attributes(
        &self,
    ) -> fluent_builders::PutAccountDedicatedIpWarmupAttributes<C, M, R> {
        fluent_builders::PutAccountDedicatedIpWarmupAttributes::new(self.handle.clone())
    }
    pub fn put_account_sending_attributes(
        &self,
    ) -> fluent_builders::PutAccountSendingAttributes<C, M, R> {
        fluent_builders::PutAccountSendingAttributes::new(self.handle.clone())
    }
    pub fn put_configuration_set_delivery_options(
        &self,
    ) -> fluent_builders::PutConfigurationSetDeliveryOptions<C, M, R> {
        fluent_builders::PutConfigurationSetDeliveryOptions::new(self.handle.clone())
    }
    pub fn put_configuration_set_reputation_options(
        &self,
    ) -> fluent_builders::PutConfigurationSetReputationOptions<C, M, R> {
        fluent_builders::PutConfigurationSetReputationOptions::new(self.handle.clone())
    }
    pub fn put_configuration_set_sending_options(
        &self,
    ) -> fluent_builders::PutConfigurationSetSendingOptions<C, M, R> {
        fluent_builders::PutConfigurationSetSendingOptions::new(self.handle.clone())
    }
    pub fn put_configuration_set_tracking_options(
        &self,
    ) -> fluent_builders::PutConfigurationSetTrackingOptions<C, M, R> {
        fluent_builders::PutConfigurationSetTrackingOptions::new(self.handle.clone())
    }
    pub fn put_dedicated_ip_in_pool(&self) -> fluent_builders::PutDedicatedIpInPool<C, M, R> {
        fluent_builders::PutDedicatedIpInPool::new(self.handle.clone())
    }
    pub fn put_dedicated_ip_warmup_attributes(
        &self,
    ) -> fluent_builders::PutDedicatedIpWarmupAttributes<C, M, R> {
        fluent_builders::PutDedicatedIpWarmupAttributes::new(self.handle.clone())
    }
    pub fn put_deliverability_dashboard_option(
        &self,
    ) -> fluent_builders::PutDeliverabilityDashboardOption<C, M, R> {
        fluent_builders::PutDeliverabilityDashboardOption::new(self.handle.clone())
    }
    pub fn put_email_identity_dkim_attributes(
        &self,
    ) -> fluent_builders::PutEmailIdentityDkimAttributes<C, M, R> {
        fluent_builders::PutEmailIdentityDkimAttributes::new(self.handle.clone())
    }
    pub fn put_email_identity_feedback_attributes(
        &self,
    ) -> fluent_builders::PutEmailIdentityFeedbackAttributes<C, M, R> {
        fluent_builders::PutEmailIdentityFeedbackAttributes::new(self.handle.clone())
    }
    pub fn put_email_identity_mail_from_attributes(
        &self,
    ) -> fluent_builders::PutEmailIdentityMailFromAttributes<C, M, R> {
        fluent_builders::PutEmailIdentityMailFromAttributes::new(self.handle.clone())
    }
    pub fn send_email(&self) -> fluent_builders::SendEmail<C, M, R> {
        fluent_builders::SendEmail::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C, M, R> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C, M, R> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_configuration_set_event_destination(
        &self,
    ) -> fluent_builders::UpdateConfigurationSetEventDestination<C, M, R> {
        fluent_builders::UpdateConfigurationSetEventDestination::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct CreateConfigurationSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_configuration_set_input::Builder,
    }
    impl<C, M, R> CreateConfigurationSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateConfigurationSetOutput,
            smithy_http::result::SdkError<crate::error::CreateConfigurationSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateConfigurationSetInputOperationOutputAlias,
                crate::output::CreateConfigurationSetOutput,
                crate::error::CreateConfigurationSetError,
                crate::input::CreateConfigurationSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the configuration set.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
        /// <p>An object that defines the open and click tracking options for emails that you send
        /// using the configuration set.</p>
        pub fn tracking_options(mut self, inp: crate::model::TrackingOptions) -> Self {
            self.inner = self.inner.tracking_options(inp);
            self
        }
        pub fn set_tracking_options(
            mut self,
            input: std::option::Option<crate::model::TrackingOptions>,
        ) -> Self {
            self.inner = self.inner.set_tracking_options(input);
            self
        }
        /// <p>An object that defines the dedicated IP pool that is used to send emails that you send
        /// using the configuration set.</p>
        pub fn delivery_options(mut self, inp: crate::model::DeliveryOptions) -> Self {
            self.inner = self.inner.delivery_options(inp);
            self
        }
        pub fn set_delivery_options(
            mut self,
            input: std::option::Option<crate::model::DeliveryOptions>,
        ) -> Self {
            self.inner = self.inner.set_delivery_options(input);
            self
        }
        /// <p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails
        /// that you send that use the configuration set.</p>
        pub fn reputation_options(mut self, inp: crate::model::ReputationOptions) -> Self {
            self.inner = self.inner.reputation_options(inp);
            self
        }
        pub fn set_reputation_options(
            mut self,
            input: std::option::Option<crate::model::ReputationOptions>,
        ) -> Self {
            self.inner = self.inner.set_reputation_options(input);
            self
        }
        /// <p>An object that defines whether or not Amazon Pinpoint can send email that you send using the
        /// configuration set.</p>
        pub fn sending_options(mut self, inp: crate::model::SendingOptions) -> Self {
            self.inner = self.inner.sending_options(inp);
            self
        }
        pub fn set_sending_options(
            mut self,
            input: std::option::Option<crate::model::SendingOptions>,
        ) -> Self {
            self.inner = self.inner.set_sending_options(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>An array of objects that define the tags (keys and values) that you want to associate
        /// with the configuration set.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateConfigurationSetEventDestination<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_configuration_set_event_destination_input::Builder,
    }
    impl<C, M, R> CreateConfigurationSetEventDestination<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateConfigurationSetEventDestinationOutput,
            smithy_http::result::SdkError<
                crate::error::CreateConfigurationSetEventDestinationError,
            >,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateConfigurationSetEventDestinationInputOperationOutputAlias,
                crate::output::CreateConfigurationSetEventDestinationOutput,
                crate::error::CreateConfigurationSetEventDestinationError,
                crate::input::CreateConfigurationSetEventDestinationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the configuration set that you want to add an event destination to.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
        /// <p>A name that identifies the event destination within the configuration set.</p>
        pub fn event_destination_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.event_destination_name(inp);
            self
        }
        pub fn set_event_destination_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_event_destination_name(input);
            self
        }
        /// <p>An object that defines the event destination.</p>
        pub fn event_destination(mut self, inp: crate::model::EventDestinationDefinition) -> Self {
            self.inner = self.inner.event_destination(inp);
            self
        }
        pub fn set_event_destination(
            mut self,
            input: std::option::Option<crate::model::EventDestinationDefinition>,
        ) -> Self {
            self.inner = self.inner.set_event_destination(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateDedicatedIpPool<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_dedicated_ip_pool_input::Builder,
    }
    impl<C, M, R> CreateDedicatedIpPool<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateDedicatedIpPoolOutput,
            smithy_http::result::SdkError<crate::error::CreateDedicatedIpPoolError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateDedicatedIpPoolInputOperationOutputAlias,
                crate::output::CreateDedicatedIpPoolOutput,
                crate::error::CreateDedicatedIpPoolError,
                crate::input::CreateDedicatedIpPoolInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the dedicated IP pool.</p>
        pub fn pool_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pool_name(inp);
            self
        }
        pub fn set_pool_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_pool_name(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>An object that defines the tags (keys and values) that you want to associate with the
        /// pool.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateDeliverabilityTestReport<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_deliverability_test_report_input::Builder,
    }
    impl<C, M, R> CreateDeliverabilityTestReport<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateDeliverabilityTestReportOutput,
            smithy_http::result::SdkError<crate::error::CreateDeliverabilityTestReportError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateDeliverabilityTestReportInputOperationOutputAlias,
                crate::output::CreateDeliverabilityTestReportOutput,
                crate::error::CreateDeliverabilityTestReportError,
                crate::input::CreateDeliverabilityTestReportInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A unique name that helps you to identify the predictive inbox placement test when you retrieve the
        /// results.</p>
        pub fn report_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.report_name(inp);
            self
        }
        pub fn set_report_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_report_name(input);
            self
        }
        /// <p>The email address that the predictive inbox placement test email was sent from.</p>
        pub fn from_email_address(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.from_email_address(inp);
            self
        }
        pub fn set_from_email_address(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_from_email_address(input);
            self
        }
        /// <p>The HTML body of the message that you sent when you performed the predictive inbox placement test.</p>
        pub fn content(mut self, inp: crate::model::EmailContent) -> Self {
            self.inner = self.inner.content(inp);
            self
        }
        pub fn set_content(
            mut self,
            input: std::option::Option<crate::model::EmailContent>,
        ) -> Self {
            self.inner = self.inner.set_content(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>An array of objects that define the tags (keys and values) that you want to associate
        /// with the predictive inbox placement test.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateEmailIdentity<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_email_identity_input::Builder,
    }
    impl<C, M, R> CreateEmailIdentity<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateEmailIdentityOutput,
            smithy_http::result::SdkError<crate::error::CreateEmailIdentityError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateEmailIdentityInputOperationOutputAlias,
                crate::output::CreateEmailIdentityOutput,
                crate::error::CreateEmailIdentityError,
                crate::input::CreateEmailIdentityInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The email address or domain that you want to verify.</p>
        pub fn email_identity(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email_identity(inp);
            self
        }
        pub fn set_email_identity(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_email_identity(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>An array of objects that define the tags (keys and values) that you want to associate
        /// with the email identity.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteConfigurationSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_configuration_set_input::Builder,
    }
    impl<C, M, R> DeleteConfigurationSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteConfigurationSetOutput,
            smithy_http::result::SdkError<crate::error::DeleteConfigurationSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteConfigurationSetInputOperationOutputAlias,
                crate::output::DeleteConfigurationSetOutput,
                crate::error::DeleteConfigurationSetError,
                crate::input::DeleteConfigurationSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the configuration set that you want to delete.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteConfigurationSetEventDestination<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_configuration_set_event_destination_input::Builder,
    }
    impl<C, M, R> DeleteConfigurationSetEventDestination<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteConfigurationSetEventDestinationOutput,
            smithy_http::result::SdkError<
                crate::error::DeleteConfigurationSetEventDestinationError,
            >,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteConfigurationSetEventDestinationInputOperationOutputAlias,
                crate::output::DeleteConfigurationSetEventDestinationOutput,
                crate::error::DeleteConfigurationSetEventDestinationError,
                crate::input::DeleteConfigurationSetEventDestinationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the configuration set that contains the event destination that you want to
        /// delete.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
        /// <p>The name of the event destination that you want to delete.</p>
        pub fn event_destination_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.event_destination_name(inp);
            self
        }
        pub fn set_event_destination_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_event_destination_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteDedicatedIpPool<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_dedicated_ip_pool_input::Builder,
    }
    impl<C, M, R> DeleteDedicatedIpPool<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteDedicatedIpPoolOutput,
            smithy_http::result::SdkError<crate::error::DeleteDedicatedIpPoolError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteDedicatedIpPoolInputOperationOutputAlias,
                crate::output::DeleteDedicatedIpPoolOutput,
                crate::error::DeleteDedicatedIpPoolError,
                crate::input::DeleteDedicatedIpPoolInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the dedicated IP pool that you want to delete.</p>
        pub fn pool_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pool_name(inp);
            self
        }
        pub fn set_pool_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_pool_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteEmailIdentity<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_email_identity_input::Builder,
    }
    impl<C, M, R> DeleteEmailIdentity<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteEmailIdentityOutput,
            smithy_http::result::SdkError<crate::error::DeleteEmailIdentityError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteEmailIdentityInputOperationOutputAlias,
                crate::output::DeleteEmailIdentityOutput,
                crate::error::DeleteEmailIdentityError,
                crate::input::DeleteEmailIdentityInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identity (that is, the email address or domain) that you want to delete from your
        /// Amazon Pinpoint account.</p>
        pub fn email_identity(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email_identity(inp);
            self
        }
        pub fn set_email_identity(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_email_identity(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetAccount<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_account_input::Builder,
    }
    impl<C, M, R> GetAccount<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetAccountOutput,
            smithy_http::result::SdkError<crate::error::GetAccountError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetAccountInputOperationOutputAlias,
                crate::output::GetAccountOutput,
                crate::error::GetAccountError,
                crate::input::GetAccountInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetBlacklistReports<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_blacklist_reports_input::Builder,
    }
    impl<C, M, R> GetBlacklistReports<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetBlacklistReportsOutput,
            smithy_http::result::SdkError<crate::error::GetBlacklistReportsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetBlacklistReportsInputOperationOutputAlias,
                crate::output::GetBlacklistReportsOutput,
                crate::error::GetBlacklistReportsError,
                crate::input::GetBlacklistReportsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `BlacklistItemNames`.
        ///
        /// To override the contents of this collection use [`set_blacklist_item_names`](Self::set_blacklist_item_names).
        /// <p>A list of IP addresses that you want to retrieve blacklist information about. You can
        /// only specify the dedicated IP addresses that you use to send email using Amazon Pinpoint or
        /// Amazon SES.</p>
        pub fn blacklist_item_names(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.blacklist_item_names(inp);
            self
        }
        pub fn set_blacklist_item_names(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_blacklist_item_names(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetConfigurationSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_configuration_set_input::Builder,
    }
    impl<C, M, R> GetConfigurationSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetConfigurationSetOutput,
            smithy_http::result::SdkError<crate::error::GetConfigurationSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetConfigurationSetInputOperationOutputAlias,
                crate::output::GetConfigurationSetOutput,
                crate::error::GetConfigurationSetError,
                crate::input::GetConfigurationSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the configuration set that you want to obtain more information
        /// about.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetConfigurationSetEventDestinations<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_configuration_set_event_destinations_input::Builder,
    }
    impl<C, M, R> GetConfigurationSetEventDestinations<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetConfigurationSetEventDestinationsOutput,
            smithy_http::result::SdkError<crate::error::GetConfigurationSetEventDestinationsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetConfigurationSetEventDestinationsInputOperationOutputAlias,
                crate::output::GetConfigurationSetEventDestinationsOutput,
                crate::error::GetConfigurationSetEventDestinationsError,
                crate::input::GetConfigurationSetEventDestinationsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the configuration set that contains the event destination.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetDedicatedIp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_dedicated_ip_input::Builder,
    }
    impl<C, M, R> GetDedicatedIp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetDedicatedIpOutput,
            smithy_http::result::SdkError<crate::error::GetDedicatedIpError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetDedicatedIpInputOperationOutputAlias,
                crate::output::GetDedicatedIpOutput,
                crate::error::GetDedicatedIpError,
                crate::input::GetDedicatedIpInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The IP address that you want to obtain more information about. The value you specify
        /// has to be a dedicated IP address that's assocaited with your Amazon Pinpoint account.</p>
        pub fn ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ip(inp);
            self
        }
        pub fn set_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ip(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetDedicatedIps<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_dedicated_ips_input::Builder,
    }
    impl<C, M, R> GetDedicatedIps<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetDedicatedIpsOutput,
            smithy_http::result::SdkError<crate::error::GetDedicatedIpsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetDedicatedIpsInputOperationOutputAlias,
                crate::output::GetDedicatedIpsOutput,
                crate::error::GetDedicatedIpsError,
                crate::input::GetDedicatedIpsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the IP pool that the dedicated IP address is associated with.</p>
        pub fn pool_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pool_name(inp);
            self
        }
        pub fn set_pool_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_pool_name(input);
            self
        }
        /// <p>A token returned from a previous call to <code>GetDedicatedIps</code> to indicate the
        /// position of the dedicated IP pool in the list of IP pools.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of results to show in a single call to <code>GetDedicatedIpsRequest</code>.
        /// If the number of results is larger than the number you specified in this parameter, then
        /// the response includes a <code>NextToken</code> element, which you can use to obtain
        /// additional results.</p>
        pub fn page_size(mut self, inp: i32) -> Self {
            self.inner = self.inner.page_size(inp);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetDeliverabilityDashboardOptions<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_deliverability_dashboard_options_input::Builder,
    }
    impl<C, M, R> GetDeliverabilityDashboardOptions<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetDeliverabilityDashboardOptionsOutput,
            smithy_http::result::SdkError<crate::error::GetDeliverabilityDashboardOptionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetDeliverabilityDashboardOptionsInputOperationOutputAlias,
                crate::output::GetDeliverabilityDashboardOptionsOutput,
                crate::error::GetDeliverabilityDashboardOptionsError,
                crate::input::GetDeliverabilityDashboardOptionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetDeliverabilityTestReport<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_deliverability_test_report_input::Builder,
    }
    impl<C, M, R> GetDeliverabilityTestReport<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetDeliverabilityTestReportOutput,
            smithy_http::result::SdkError<crate::error::GetDeliverabilityTestReportError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetDeliverabilityTestReportInputOperationOutputAlias,
                crate::output::GetDeliverabilityTestReportOutput,
                crate::error::GetDeliverabilityTestReportError,
                crate::input::GetDeliverabilityTestReportInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A unique string that identifies the predictive inbox placement test.</p>
        pub fn report_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.report_id(inp);
            self
        }
        pub fn set_report_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_report_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetDomainDeliverabilityCampaign<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_domain_deliverability_campaign_input::Builder,
    }
    impl<C, M, R> GetDomainDeliverabilityCampaign<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetDomainDeliverabilityCampaignOutput,
            smithy_http::result::SdkError<crate::error::GetDomainDeliverabilityCampaignError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetDomainDeliverabilityCampaignInputOperationOutputAlias,
                crate::output::GetDomainDeliverabilityCampaignOutput,
                crate::error::GetDomainDeliverabilityCampaignError,
                crate::input::GetDomainDeliverabilityCampaignInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this
        /// identifier to a campaign. This value is not the same as the campaign identifier that
        /// Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the
        /// Amazon Pinpoint console.</p>
        pub fn campaign_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.campaign_id(inp);
            self
        }
        pub fn set_campaign_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_campaign_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetDomainStatisticsReport<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_domain_statistics_report_input::Builder,
    }
    impl<C, M, R> GetDomainStatisticsReport<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetDomainStatisticsReportOutput,
            smithy_http::result::SdkError<crate::error::GetDomainStatisticsReportError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetDomainStatisticsReportInputOperationOutputAlias,
                crate::output::GetDomainStatisticsReportOutput,
                crate::error::GetDomainStatisticsReportError,
                crate::input::GetDomainStatisticsReportInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The domain that you want to obtain deliverability metrics for.</p>
        pub fn domain(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain(inp);
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain(input);
            self
        }
        /// <p>The first day (in Unix time) that you want to obtain domain deliverability metrics
        /// for.</p>
        pub fn start_date(mut self, inp: smithy_types::Instant) -> Self {
            self.inner = self.inner.start_date(inp);
            self
        }
        pub fn set_start_date(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.inner = self.inner.set_start_date(input);
            self
        }
        /// <p>The last day (in Unix time) that you want to obtain domain deliverability metrics for.
        /// The <code>EndDate</code> that you specify has to be less than or equal to 30 days after
        /// the <code>StartDate</code>.</p>
        pub fn end_date(mut self, inp: smithy_types::Instant) -> Self {
            self.inner = self.inner.end_date(inp);
            self
        }
        pub fn set_end_date(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.inner = self.inner.set_end_date(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetEmailIdentity<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_email_identity_input::Builder,
    }
    impl<C, M, R> GetEmailIdentity<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetEmailIdentityOutput,
            smithy_http::result::SdkError<crate::error::GetEmailIdentityError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetEmailIdentityInputOperationOutputAlias,
                crate::output::GetEmailIdentityOutput,
                crate::error::GetEmailIdentityError,
                crate::input::GetEmailIdentityInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The email identity that you want to retrieve details for.</p>
        pub fn email_identity(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email_identity(inp);
            self
        }
        pub fn set_email_identity(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_email_identity(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListConfigurationSets<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_configuration_sets_input::Builder,
    }
    impl<C, M, R> ListConfigurationSets<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListConfigurationSetsOutput,
            smithy_http::result::SdkError<crate::error::ListConfigurationSetsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListConfigurationSetsInputOperationOutputAlias,
                crate::output::ListConfigurationSetsOutput,
                crate::error::ListConfigurationSetsError,
                crate::input::ListConfigurationSetsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A token returned from a previous call to <code>ListConfigurationSets</code> to
        /// indicate the position in the list of configuration sets.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of results to show in a single call to <code>ListConfigurationSets</code>.
        /// If the number of results is larger than the number you specified in this parameter, then
        /// the response includes a <code>NextToken</code> element, which you can use to obtain
        /// additional results.</p>
        pub fn page_size(mut self, inp: i32) -> Self {
            self.inner = self.inner.page_size(inp);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListDedicatedIpPools<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_dedicated_ip_pools_input::Builder,
    }
    impl<C, M, R> ListDedicatedIpPools<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDedicatedIpPoolsOutput,
            smithy_http::result::SdkError<crate::error::ListDedicatedIpPoolsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListDedicatedIpPoolsInputOperationOutputAlias,
                crate::output::ListDedicatedIpPoolsOutput,
                crate::error::ListDedicatedIpPoolsError,
                crate::input::ListDedicatedIpPoolsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A token returned from a previous call to <code>ListDedicatedIpPools</code> to indicate
        /// the position in the list of dedicated IP pools.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of results to show in a single call to <code>ListDedicatedIpPools</code>.
        /// If the number of results is larger than the number you specified in this parameter, then
        /// the response includes a <code>NextToken</code> element, which you can use to obtain
        /// additional results.</p>
        pub fn page_size(mut self, inp: i32) -> Self {
            self.inner = self.inner.page_size(inp);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListDeliverabilityTestReports<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_deliverability_test_reports_input::Builder,
    }
    impl<C, M, R> ListDeliverabilityTestReports<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDeliverabilityTestReportsOutput,
            smithy_http::result::SdkError<crate::error::ListDeliverabilityTestReportsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListDeliverabilityTestReportsInputOperationOutputAlias,
                crate::output::ListDeliverabilityTestReportsOutput,
                crate::error::ListDeliverabilityTestReportsError,
                crate::input::ListDeliverabilityTestReportsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A token returned from a previous call to <code>ListDeliverabilityTestReports</code> to
        /// indicate the position in the list of predictive inbox placement tests.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of results to show in a single call to
        /// <code>ListDeliverabilityTestReports</code>. If the number of results is larger than
        /// the number you specified in this parameter, then the response includes a
        /// <code>NextToken</code> element, which you can use to obtain additional
        /// results.</p>
        /// <p>The value you specify has to be at least 0, and can be no more than 1000.</p>
        pub fn page_size(mut self, inp: i32) -> Self {
            self.inner = self.inner.page_size(inp);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListDomainDeliverabilityCampaigns<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_domain_deliverability_campaigns_input::Builder,
    }
    impl<C, M, R> ListDomainDeliverabilityCampaigns<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDomainDeliverabilityCampaignsOutput,
            smithy_http::result::SdkError<crate::error::ListDomainDeliverabilityCampaignsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListDomainDeliverabilityCampaignsInputOperationOutputAlias,
                crate::output::ListDomainDeliverabilityCampaignsOutput,
                crate::error::ListDomainDeliverabilityCampaignsError,
                crate::input::ListDomainDeliverabilityCampaignsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The first day, in Unix time format, that you want to obtain deliverability data
        /// for.</p>
        pub fn start_date(mut self, inp: smithy_types::Instant) -> Self {
            self.inner = self.inner.start_date(inp);
            self
        }
        pub fn set_start_date(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.inner = self.inner.set_start_date(input);
            self
        }
        /// <p>The last day, in Unix time format, that you want to obtain deliverability data for.
        /// This value has to be less than or equal to 30 days after the value of the
        /// <code>StartDate</code> parameter.</p>
        pub fn end_date(mut self, inp: smithy_types::Instant) -> Self {
            self.inner = self.inner.end_date(inp);
            self
        }
        pub fn set_end_date(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.inner = self.inner.set_end_date(input);
            self
        }
        /// <p>The domain to obtain deliverability data for.</p>
        pub fn subscribed_domain(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subscribed_domain(inp);
            self
        }
        pub fn set_subscribed_domain(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_subscribed_domain(input);
            self
        }
        /// <p>A token that’s returned from a previous call to the
        /// <code>ListDomainDeliverabilityCampaigns</code> operation. This token indicates the
        /// position of a campaign in the list of campaigns.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results to include in response to a single call to the
        /// <code>ListDomainDeliverabilityCampaigns</code> operation. If the number of results
        /// is larger than the number that you specify in this parameter, the response includes a
        /// <code>NextToken</code> element, which you can use to obtain additional
        /// results.</p>
        pub fn page_size(mut self, inp: i32) -> Self {
            self.inner = self.inner.page_size(inp);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListEmailIdentities<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_email_identities_input::Builder,
    }
    impl<C, M, R> ListEmailIdentities<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListEmailIdentitiesOutput,
            smithy_http::result::SdkError<crate::error::ListEmailIdentitiesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListEmailIdentitiesInputOperationOutputAlias,
                crate::output::ListEmailIdentitiesOutput,
                crate::error::ListEmailIdentitiesError,
                crate::input::ListEmailIdentitiesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A token returned from a previous call to <code>ListEmailIdentities</code> to indicate
        /// the position in the list of identities.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of results to show in a single call to <code>ListEmailIdentities</code>. If
        /// the number of results is larger than the number you specified in this parameter, then
        /// the response includes a <code>NextToken</code> element, which you can use to obtain
        /// additional results.</p>
        /// <p>The value you specify has to be at least 0, and can be no more than 1000.</p>
        pub fn page_size(mut self, inp: i32) -> Self {
            self.inner = self.inner.page_size(inp);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C, M, R> ListTagsForResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTagsForResourceInputOperationOutputAlias,
                crate::output::ListTagsForResourceOutput,
                crate::error::ListTagsForResourceError,
                crate::input::ListTagsForResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the resource that you want to retrieve tag
        /// information for.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutAccountDedicatedIpWarmupAttributes<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_account_dedicated_ip_warmup_attributes_input::Builder,
    }
    impl<C, M, R> PutAccountDedicatedIpWarmupAttributes<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutAccountDedicatedIpWarmupAttributesOutput,
            smithy_http::result::SdkError<crate::error::PutAccountDedicatedIpWarmupAttributesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutAccountDedicatedIpWarmupAttributesInputOperationOutputAlias,
                crate::output::PutAccountDedicatedIpWarmupAttributesOutput,
                crate::error::PutAccountDedicatedIpWarmupAttributesError,
                crate::input::PutAccountDedicatedIpWarmupAttributesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Enables or disables the automatic warm-up feature for dedicated IP addresses that are
        /// associated with your Amazon Pinpoint account in the current AWS Region. Set to <code>true</code>
        /// to enable the automatic warm-up feature, or set to <code>false</code> to disable
        /// it.</p>
        pub fn auto_warmup_enabled(mut self, inp: bool) -> Self {
            self.inner = self.inner.auto_warmup_enabled(inp);
            self
        }
        pub fn set_auto_warmup_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_auto_warmup_enabled(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutAccountSendingAttributes<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_account_sending_attributes_input::Builder,
    }
    impl<C, M, R> PutAccountSendingAttributes<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutAccountSendingAttributesOutput,
            smithy_http::result::SdkError<crate::error::PutAccountSendingAttributesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutAccountSendingAttributesInputOperationOutputAlias,
                crate::output::PutAccountSendingAttributesOutput,
                crate::error::PutAccountSendingAttributesError,
                crate::input::PutAccountSendingAttributesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Enables or disables your account's ability to send email. Set to <code>true</code> to
        /// enable email sending, or set to <code>false</code> to disable email sending.</p>
        /// <note>
        /// <p>If AWS paused your account's ability to send email, you can't use this operation
        /// to resume your account's ability to send email.</p>
        /// </note>
        pub fn sending_enabled(mut self, inp: bool) -> Self {
            self.inner = self.inner.sending_enabled(inp);
            self
        }
        pub fn set_sending_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_sending_enabled(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutConfigurationSetDeliveryOptions<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_configuration_set_delivery_options_input::Builder,
    }
    impl<C, M, R> PutConfigurationSetDeliveryOptions<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutConfigurationSetDeliveryOptionsOutput,
            smithy_http::result::SdkError<crate::error::PutConfigurationSetDeliveryOptionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutConfigurationSetDeliveryOptionsInputOperationOutputAlias,
                crate::output::PutConfigurationSetDeliveryOptionsOutput,
                crate::error::PutConfigurationSetDeliveryOptionsError,
                crate::input::PutConfigurationSetDeliveryOptionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the configuration set that you want to associate with a dedicated IP
        /// pool.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
        /// <p>Specifies whether messages that use the configuration set are required to use
        /// Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only
        /// delivered if a TLS connection can be established. If the value is <code>Optional</code>,
        /// messages can be delivered in plain text if a TLS connection can't be established.</p>
        pub fn tls_policy(mut self, inp: crate::model::TlsPolicy) -> Self {
            self.inner = self.inner.tls_policy(inp);
            self
        }
        pub fn set_tls_policy(
            mut self,
            input: std::option::Option<crate::model::TlsPolicy>,
        ) -> Self {
            self.inner = self.inner.set_tls_policy(input);
            self
        }
        /// <p>The name of the dedicated IP pool that you want to associate with the configuration
        /// set.</p>
        pub fn sending_pool_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sending_pool_name(inp);
            self
        }
        pub fn set_sending_pool_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_sending_pool_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutConfigurationSetReputationOptions<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_configuration_set_reputation_options_input::Builder,
    }
    impl<C, M, R> PutConfigurationSetReputationOptions<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutConfigurationSetReputationOptionsOutput,
            smithy_http::result::SdkError<crate::error::PutConfigurationSetReputationOptionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutConfigurationSetReputationOptionsInputOperationOutputAlias,
                crate::output::PutConfigurationSetReputationOptionsOutput,
                crate::error::PutConfigurationSetReputationOptionsError,
                crate::input::PutConfigurationSetReputationOptionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the configuration set that you want to enable or disable reputation metric
        /// tracking for.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
        /// <p>If <code>true</code>, tracking of reputation metrics is enabled for the configuration
        /// set. If <code>false</code>, tracking of reputation metrics is disabled for the
        /// configuration set.</p>
        pub fn reputation_metrics_enabled(mut self, inp: bool) -> Self {
            self.inner = self.inner.reputation_metrics_enabled(inp);
            self
        }
        pub fn set_reputation_metrics_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_reputation_metrics_enabled(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutConfigurationSetSendingOptions<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_configuration_set_sending_options_input::Builder,
    }
    impl<C, M, R> PutConfigurationSetSendingOptions<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutConfigurationSetSendingOptionsOutput,
            smithy_http::result::SdkError<crate::error::PutConfigurationSetSendingOptionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutConfigurationSetSendingOptionsInputOperationOutputAlias,
                crate::output::PutConfigurationSetSendingOptionsOutput,
                crate::error::PutConfigurationSetSendingOptionsError,
                crate::input::PutConfigurationSetSendingOptionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the configuration set that you want to enable or disable email sending
        /// for.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
        /// <p>If <code>true</code>, email sending is enabled for the configuration set. If
        /// <code>false</code>, email sending is disabled for the configuration set.</p>
        pub fn sending_enabled(mut self, inp: bool) -> Self {
            self.inner = self.inner.sending_enabled(inp);
            self
        }
        pub fn set_sending_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_sending_enabled(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutConfigurationSetTrackingOptions<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_configuration_set_tracking_options_input::Builder,
    }
    impl<C, M, R> PutConfigurationSetTrackingOptions<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutConfigurationSetTrackingOptionsOutput,
            smithy_http::result::SdkError<crate::error::PutConfigurationSetTrackingOptionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutConfigurationSetTrackingOptionsInputOperationOutputAlias,
                crate::output::PutConfigurationSetTrackingOptionsOutput,
                crate::error::PutConfigurationSetTrackingOptionsError,
                crate::input::PutConfigurationSetTrackingOptionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the configuration set that you want to add a custom tracking domain
        /// to.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
        /// <p>The domain that you want to use to track open and click events.</p>
        pub fn custom_redirect_domain(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_redirect_domain(inp);
            self
        }
        pub fn set_custom_redirect_domain(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_redirect_domain(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutDedicatedIpInPool<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_dedicated_ip_in_pool_input::Builder,
    }
    impl<C, M, R> PutDedicatedIpInPool<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutDedicatedIpInPoolOutput,
            smithy_http::result::SdkError<crate::error::PutDedicatedIpInPoolError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutDedicatedIpInPoolInputOperationOutputAlias,
                crate::output::PutDedicatedIpInPoolOutput,
                crate::error::PutDedicatedIpInPoolError,
                crate::input::PutDedicatedIpInPoolInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The IP address that you want to move to the dedicated IP pool. The value you specify
        /// has to be a dedicated IP address that's associated with your Amazon Pinpoint account.</p>
        pub fn ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ip(inp);
            self
        }
        pub fn set_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ip(input);
            self
        }
        /// <p>The name of the IP pool that you want to add the dedicated IP address to. You have to
        /// specify an IP pool that already exists.</p>
        pub fn destination_pool_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.destination_pool_name(inp);
            self
        }
        pub fn set_destination_pool_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_destination_pool_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutDedicatedIpWarmupAttributes<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_dedicated_ip_warmup_attributes_input::Builder,
    }
    impl<C, M, R> PutDedicatedIpWarmupAttributes<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutDedicatedIpWarmupAttributesOutput,
            smithy_http::result::SdkError<crate::error::PutDedicatedIpWarmupAttributesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutDedicatedIpWarmupAttributesInputOperationOutputAlias,
                crate::output::PutDedicatedIpWarmupAttributesOutput,
                crate::error::PutDedicatedIpWarmupAttributesError,
                crate::input::PutDedicatedIpWarmupAttributesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The dedicated IP address that you want to update the warm-up attributes for.</p>
        pub fn ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ip(inp);
            self
        }
        pub fn set_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ip(input);
            self
        }
        /// <p>The warm-up percentage that you want to associate with the dedicated IP
        /// address.</p>
        pub fn warmup_percentage(mut self, inp: i32) -> Self {
            self.inner = self.inner.warmup_percentage(inp);
            self
        }
        pub fn set_warmup_percentage(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_warmup_percentage(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutDeliverabilityDashboardOption<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_deliverability_dashboard_option_input::Builder,
    }
    impl<C, M, R> PutDeliverabilityDashboardOption<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutDeliverabilityDashboardOptionOutput,
            smithy_http::result::SdkError<crate::error::PutDeliverabilityDashboardOptionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutDeliverabilityDashboardOptionInputOperationOutputAlias,
                crate::output::PutDeliverabilityDashboardOptionOutput,
                crate::error::PutDeliverabilityDashboardOptionError,
                crate::input::PutDeliverabilityDashboardOptionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies whether to enable the Deliverability dashboard for your Amazon Pinpoint account. To enable the
        /// dashboard, set this value to <code>true</code>.</p>
        pub fn dashboard_enabled(mut self, inp: bool) -> Self {
            self.inner = self.inner.dashboard_enabled(inp);
            self
        }
        pub fn set_dashboard_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dashboard_enabled(input);
            self
        }
        /// Appends an item to `SubscribedDomains`.
        ///
        /// To override the contents of this collection use [`set_subscribed_domains`](Self::set_subscribed_domains).
        /// <p>An array of objects, one for each verified domain that you use to send email and
        /// enabled the Deliverability dashboard for.</p>
        pub fn subscribed_domains(
            mut self,
            inp: impl Into<crate::model::DomainDeliverabilityTrackingOption>,
        ) -> Self {
            self.inner = self.inner.subscribed_domains(inp);
            self
        }
        pub fn set_subscribed_domains(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::DomainDeliverabilityTrackingOption>,
            >,
        ) -> Self {
            self.inner = self.inner.set_subscribed_domains(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutEmailIdentityDkimAttributes<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_email_identity_dkim_attributes_input::Builder,
    }
    impl<C, M, R> PutEmailIdentityDkimAttributes<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutEmailIdentityDkimAttributesOutput,
            smithy_http::result::SdkError<crate::error::PutEmailIdentityDkimAttributesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutEmailIdentityDkimAttributesInputOperationOutputAlias,
                crate::output::PutEmailIdentityDkimAttributesOutput,
                crate::error::PutEmailIdentityDkimAttributesError,
                crate::input::PutEmailIdentityDkimAttributesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The email identity that you want to change the DKIM settings for.</p>
        pub fn email_identity(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email_identity(inp);
            self
        }
        pub fn set_email_identity(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_email_identity(input);
            self
        }
        /// <p>Sets the DKIM signing configuration for the identity.</p>
        /// <p>When you set this value <code>true</code>, then the messages that Amazon Pinpoint sends from the
        /// identity are DKIM-signed. When you set this value to <code>false</code>, then the
        /// messages that Amazon Pinpoint sends from the identity aren't DKIM-signed.</p>
        pub fn signing_enabled(mut self, inp: bool) -> Self {
            self.inner = self.inner.signing_enabled(inp);
            self
        }
        pub fn set_signing_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_signing_enabled(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutEmailIdentityFeedbackAttributes<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_email_identity_feedback_attributes_input::Builder,
    }
    impl<C, M, R> PutEmailIdentityFeedbackAttributes<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutEmailIdentityFeedbackAttributesOutput,
            smithy_http::result::SdkError<crate::error::PutEmailIdentityFeedbackAttributesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutEmailIdentityFeedbackAttributesInputOperationOutputAlias,
                crate::output::PutEmailIdentityFeedbackAttributesOutput,
                crate::error::PutEmailIdentityFeedbackAttributesError,
                crate::input::PutEmailIdentityFeedbackAttributesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The email identity that you want to configure bounce and complaint feedback forwarding
        /// for.</p>
        pub fn email_identity(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email_identity(inp);
            self
        }
        pub fn set_email_identity(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_email_identity(input);
            self
        }
        /// <p>Sets the feedback forwarding configuration for the identity.</p>
        /// <p>If the value is <code>true</code>, Amazon Pinpoint sends you email notifications when bounce or
        /// complaint events occur. Amazon Pinpoint sends this notification to the address that you specified
        /// in the Return-Path header of the original email.</p>
        /// <p>When you set this value to <code>false</code>, Amazon Pinpoint sends notifications through other
        /// mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're
        /// required to have a method of tracking bounces and complaints. If you haven't set up
        /// another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email
        /// notification when these events occur (even if this setting is disabled).</p>
        pub fn email_forwarding_enabled(mut self, inp: bool) -> Self {
            self.inner = self.inner.email_forwarding_enabled(inp);
            self
        }
        pub fn set_email_forwarding_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_email_forwarding_enabled(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutEmailIdentityMailFromAttributes<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_email_identity_mail_from_attributes_input::Builder,
    }
    impl<C, M, R> PutEmailIdentityMailFromAttributes<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutEmailIdentityMailFromAttributesOutput,
            smithy_http::result::SdkError<crate::error::PutEmailIdentityMailFromAttributesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutEmailIdentityMailFromAttributesInputOperationOutputAlias,
                crate::output::PutEmailIdentityMailFromAttributesOutput,
                crate::error::PutEmailIdentityMailFromAttributesError,
                crate::input::PutEmailIdentityMailFromAttributesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The verified email identity that you want to set up the custom MAIL FROM domain
        /// for.</p>
        pub fn email_identity(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email_identity(inp);
            self
        }
        pub fn set_email_identity(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_email_identity(input);
            self
        }
        /// <p> The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM
        /// domain must meet the following criteria:</p>
        /// <ul>
        /// <li>
        /// <p>It has to be a subdomain of the verified identity.</p>
        /// </li>
        /// <li>
        /// <p>It can't be used to receive email.</p>
        /// </li>
        /// <li>
        /// <p>It can't be used in a "From" address if the MAIL FROM domain is a destination
        /// for feedback forwarding emails.</p>
        /// </li>
        /// </ul>
        pub fn mail_from_domain(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mail_from_domain(inp);
            self
        }
        pub fn set_mail_from_domain(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_mail_from_domain(input);
            self
        }
        /// <p>The action that you want Amazon Pinpoint to take if it can't read the required MX record when
        /// you send an email. When you set this value to <code>UseDefaultValue</code>, Amazon Pinpoint uses
        /// <i>amazonses.com</i> as the MAIL FROM domain. When you set this value
        /// to <code>RejectMessage</code>, Amazon Pinpoint returns a <code>MailFromDomainNotVerified</code>
        /// error, and doesn't attempt to deliver the email.</p>
        /// <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the
        /// <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code>
        /// states.</p>
        pub fn behavior_on_mx_failure(mut self, inp: crate::model::BehaviorOnMxFailure) -> Self {
            self.inner = self.inner.behavior_on_mx_failure(inp);
            self
        }
        pub fn set_behavior_on_mx_failure(
            mut self,
            input: std::option::Option<crate::model::BehaviorOnMxFailure>,
        ) -> Self {
            self.inner = self.inner.set_behavior_on_mx_failure(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SendEmail<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::send_email_input::Builder,
    }
    impl<C, M, R> SendEmail<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SendEmailOutput,
            smithy_http::result::SdkError<crate::error::SendEmailError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::SendEmailInputOperationOutputAlias,
                crate::output::SendEmailOutput,
                crate::error::SendEmailError,
                crate::input::SendEmailInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The email address that you want to use as the "From" address for the email. The
        /// address that you specify has to be verified.
        /// </p>
        pub fn from_email_address(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.from_email_address(inp);
            self
        }
        pub fn set_from_email_address(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_from_email_address(input);
            self
        }
        /// <p>An object that contains the recipients of the email message.</p>
        pub fn destination(mut self, inp: crate::model::Destination) -> Self {
            self.inner = self.inner.destination(inp);
            self
        }
        pub fn set_destination(
            mut self,
            input: std::option::Option<crate::model::Destination>,
        ) -> Self {
            self.inner = self.inner.set_destination(input);
            self
        }
        /// Appends an item to `ReplyToAddresses`.
        ///
        /// To override the contents of this collection use [`set_reply_to_addresses`](Self::set_reply_to_addresses).
        /// <p>The "Reply-to" email addresses for the message. When the recipient replies to the
        /// message, each Reply-to address receives the reply.</p>
        pub fn reply_to_addresses(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.reply_to_addresses(inp);
            self
        }
        pub fn set_reply_to_addresses(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_reply_to_addresses(input);
            self
        }
        /// <p>The address that Amazon Pinpoint should send bounce and complaint notifications to.</p>
        pub fn feedback_forwarding_email_address(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.feedback_forwarding_email_address(inp);
            self
        }
        pub fn set_feedback_forwarding_email_address(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_feedback_forwarding_email_address(input);
            self
        }
        /// <p>An object that contains the body of the message. You can send either a Simple message
        /// or a Raw message.</p>
        pub fn content(mut self, inp: crate::model::EmailContent) -> Self {
            self.inner = self.inner.content(inp);
            self
        }
        pub fn set_content(
            mut self,
            input: std::option::Option<crate::model::EmailContent>,
        ) -> Self {
            self.inner = self.inner.set_content(input);
            self
        }
        /// Appends an item to `EmailTags`.
        ///
        /// To override the contents of this collection use [`set_email_tags`](Self::set_email_tags).
        /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
        /// using the <code>SendEmail</code> operation. Tags correspond to characteristics of the
        /// email that you define, so that you can publish email sending events. </p>
        pub fn email_tags(mut self, inp: impl Into<crate::model::MessageTag>) -> Self {
            self.inner = self.inner.email_tags(inp);
            self
        }
        pub fn set_email_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MessageTag>>,
        ) -> Self {
            self.inner = self.inner.set_email_tags(input);
            self
        }
        /// <p>The name of the configuration set that you want to use when sending the email.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C, M, R> TagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TagResourceInputOperationOutputAlias,
                crate::output::TagResourceOutput,
                crate::error::TagResourceError,
                crate::input::TagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the resource that you want to add one or more tags
        /// to.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>A list of the tags that you want to add to the resource. A tag consists of a required
        /// tag key (<code>Key</code>) and an associated tag value (<code>Value</code>). The maximum
        /// length of a tag key is 128 characters. The maximum length of a tag value is 256
        /// characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C, M, R> UntagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UntagResourceInputOperationOutputAlias,
                crate::output::UntagResourceOutput,
                crate::error::UntagResourceError,
                crate::input::UntagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the resource that you want to remove one or more
        /// tags from.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        /// <p>The tags (tag keys) that you want to remove from the resource. When you specify a tag
        /// key, the action removes both that key and its associated tag value.</p>
        /// <p>To remove more than one tag from the resource, append the <code>TagKeys</code>
        /// parameter and argument for each additional tag to remove, separated by an ampersand. For
        /// example:
        /// <code>/v1/email/tags?ResourceArn=ResourceArn&TagKeys=Key1&TagKeys=Key2</code>
        /// </p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateConfigurationSetEventDestination<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_configuration_set_event_destination_input::Builder,
    }
    impl<C, M, R> UpdateConfigurationSetEventDestination<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateConfigurationSetEventDestinationOutput,
            smithy_http::result::SdkError<
                crate::error::UpdateConfigurationSetEventDestinationError,
            >,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateConfigurationSetEventDestinationInputOperationOutputAlias,
                crate::output::UpdateConfigurationSetEventDestinationOutput,
                crate::error::UpdateConfigurationSetEventDestinationError,
                crate::input::UpdateConfigurationSetEventDestinationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the configuration set that contains the event destination that you want to
        /// modify.</p>
        pub fn configuration_set_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_set_name(inp);
            self
        }
        pub fn set_configuration_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_set_name(input);
            self
        }
        /// <p>The name of the event destination that you want to modify.</p>
        pub fn event_destination_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.event_destination_name(inp);
            self
        }
        pub fn set_event_destination_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_event_destination_name(input);
            self
        }
        /// <p>An object that defines the event destination.</p>
        pub fn event_destination(mut self, inp: crate::model::EventDestinationDefinition) -> Self {
            self.inner = self.inner.event_destination(inp);
            self
        }
        pub fn set_event_destination(
            mut self,
            input: std::option::Option<crate::model::EventDestinationDefinition>,
        ) -> Self {
            self.inner = self.inner.set_event_destination(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
