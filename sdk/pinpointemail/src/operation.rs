// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Create a configuration set. <i>Configuration sets</i> are groups of
/// rules that you can apply to the emails you send using Amazon Pinpoint. You apply a configuration
/// set to an email by including a reference to the configuration set in the headers of the
/// email. When you apply a configuration set to an email, all of the rules in that
/// configuration set are applied to the email. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateConfigurationSet {
    _private: (),
}
impl CreateConfigurationSet {
    /// Creates a new builder-style object to manufacture [`CreateConfigurationSetInput`](crate::input::CreateConfigurationSetInput)
    pub fn builder() -> crate::input::create_configuration_set_input::Builder {
        crate::input::create_configuration_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateConfigurationSet {
    type Output = std::result::Result<
        crate::output::CreateConfigurationSetOutput,
        crate::error::CreateConfigurationSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_configuration_set_error(response)
        } else {
            crate::operation_deser::parse_create_configuration_set_response(response)
        }
    }
}

/// <p>Create an event destination. In Amazon Pinpoint, <i>events</i> include message
/// sends, deliveries, opens, clicks, bounces, and complaints. <i>Event
/// destinations</i> are places that you can send information about these events
/// to. For example, you can send event data to Amazon SNS to receive notifications when you
/// receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term
/// storage.</p>
/// <p>A single configuration set can include more than one event destination.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateConfigurationSetEventDestination {
    _private: (),
}
impl CreateConfigurationSetEventDestination {
    /// Creates a new builder-style object to manufacture [`CreateConfigurationSetEventDestinationInput`](crate::input::CreateConfigurationSetEventDestinationInput)
    pub fn builder() -> crate::input::create_configuration_set_event_destination_input::Builder {
        crate::input::create_configuration_set_event_destination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateConfigurationSetEventDestination {
    type Output = std::result::Result<
        crate::output::CreateConfigurationSetEventDestinationOutput,
        crate::error::CreateConfigurationSetEventDestinationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_configuration_set_event_destination_error(response)
        } else {
            crate::operation_deser::parse_create_configuration_set_event_destination_response(
                response,
            )
        }
    }
}

/// <p>Create a new pool of dedicated IP addresses. A pool can include one or more dedicated
/// IP addresses that are associated with your Amazon Pinpoint account. You can associate a pool with
/// a configuration set. When you send an email that uses that configuration set, Amazon Pinpoint
/// sends it using only the IP addresses in the associated pool.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDedicatedIpPool {
    _private: (),
}
impl CreateDedicatedIpPool {
    /// Creates a new builder-style object to manufacture [`CreateDedicatedIpPoolInput`](crate::input::CreateDedicatedIpPoolInput)
    pub fn builder() -> crate::input::create_dedicated_ip_pool_input::Builder {
        crate::input::create_dedicated_ip_pool_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDedicatedIpPool {
    type Output = std::result::Result<
        crate::output::CreateDedicatedIpPoolOutput,
        crate::error::CreateDedicatedIpPoolError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_dedicated_ip_pool_error(response)
        } else {
            crate::operation_deser::parse_create_dedicated_ip_pool_response(response)
        }
    }
}

/// <p>Create a new predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled
/// by various email providers around the world. When you perform a predictive inbox placement test, you provide a
/// sample message that contains the content that you plan to send to your customers. Amazon Pinpoint
/// then sends that message to special email addresses spread across several major email
/// providers. After about 24 hours, the test is complete, and you can use the
/// <code>GetDeliverabilityTestReport</code> operation to view the results of the
/// test.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDeliverabilityTestReport {
    _private: (),
}
impl CreateDeliverabilityTestReport {
    /// Creates a new builder-style object to manufacture [`CreateDeliverabilityTestReportInput`](crate::input::CreateDeliverabilityTestReportInput)
    pub fn builder() -> crate::input::create_deliverability_test_report_input::Builder {
        crate::input::create_deliverability_test_report_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDeliverabilityTestReport {
    type Output = std::result::Result<
        crate::output::CreateDeliverabilityTestReportOutput,
        crate::error::CreateDeliverabilityTestReportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_deliverability_test_report_error(response)
        } else {
            crate::operation_deser::parse_create_deliverability_test_report_response(response)
        }
    }
}

/// <p>Verifies an email identity for use with Amazon Pinpoint. In Amazon Pinpoint, an identity is an email
/// address or domain that you use when you send email. Before you can use an identity to
/// send email with Amazon Pinpoint, you first have to verify it. By verifying an address, you
/// demonstrate that you're the owner of the address, and that you've given Amazon Pinpoint permission
/// to send email from the address.</p>
/// <p>When you verify an email address, Amazon Pinpoint sends an email to the address. Your email
/// address is verified as soon as you follow the link in the verification email.
/// </p>
/// <p>When you verify a domain, this operation provides a set of DKIM tokens, which you can
/// convert into CNAME tokens. You add these CNAME tokens to the DNS configuration for your
/// domain. Your domain is verified when Amazon Pinpoint detects these records in the DNS
/// configuration for your domain. It usually takes around 72 hours to complete the domain
/// verification process.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEmailIdentity {
    _private: (),
}
impl CreateEmailIdentity {
    /// Creates a new builder-style object to manufacture [`CreateEmailIdentityInput`](crate::input::CreateEmailIdentityInput)
    pub fn builder() -> crate::input::create_email_identity_input::Builder {
        crate::input::create_email_identity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEmailIdentity {
    type Output = std::result::Result<
        crate::output::CreateEmailIdentityOutput,
        crate::error::CreateEmailIdentityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_email_identity_error(response)
        } else {
            crate::operation_deser::parse_create_email_identity_response(response)
        }
    }
}

/// <p>Delete an existing configuration set.</p>
/// <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can
/// apply to the emails you send. You apply a configuration set to an email by including a
/// reference to the configuration set in the headers of the email. When you apply a
/// configuration set to an email, all of the rules in that configuration set are applied to
/// the email.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConfigurationSet {
    _private: (),
}
impl DeleteConfigurationSet {
    /// Creates a new builder-style object to manufacture [`DeleteConfigurationSetInput`](crate::input::DeleteConfigurationSetInput)
    pub fn builder() -> crate::input::delete_configuration_set_input::Builder {
        crate::input::delete_configuration_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteConfigurationSet {
    type Output = std::result::Result<
        crate::output::DeleteConfigurationSetOutput,
        crate::error::DeleteConfigurationSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_configuration_set_error(response)
        } else {
            crate::operation_deser::parse_delete_configuration_set_response(response)
        }
    }
}

/// <p>Delete an event destination.</p>
/// <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
/// clicks, bounces, and complaints. <i>Event destinations</i> are places that
/// you can send information about these events to. For example, you can send event data to
/// Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
/// Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConfigurationSetEventDestination {
    _private: (),
}
impl DeleteConfigurationSetEventDestination {
    /// Creates a new builder-style object to manufacture [`DeleteConfigurationSetEventDestinationInput`](crate::input::DeleteConfigurationSetEventDestinationInput)
    pub fn builder() -> crate::input::delete_configuration_set_event_destination_input::Builder {
        crate::input::delete_configuration_set_event_destination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteConfigurationSetEventDestination {
    type Output = std::result::Result<
        crate::output::DeleteConfigurationSetEventDestinationOutput,
        crate::error::DeleteConfigurationSetEventDestinationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_configuration_set_event_destination_error(response)
        } else {
            crate::operation_deser::parse_delete_configuration_set_event_destination_response(
                response,
            )
        }
    }
}

/// <p>Delete a dedicated IP pool.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDedicatedIpPool {
    _private: (),
}
impl DeleteDedicatedIpPool {
    /// Creates a new builder-style object to manufacture [`DeleteDedicatedIpPoolInput`](crate::input::DeleteDedicatedIpPoolInput)
    pub fn builder() -> crate::input::delete_dedicated_ip_pool_input::Builder {
        crate::input::delete_dedicated_ip_pool_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDedicatedIpPool {
    type Output = std::result::Result<
        crate::output::DeleteDedicatedIpPoolOutput,
        crate::error::DeleteDedicatedIpPoolError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_dedicated_ip_pool_error(response)
        } else {
            crate::operation_deser::parse_delete_dedicated_ip_pool_response(response)
        }
    }
}

/// <p>Deletes an email identity that you previously verified for use with Amazon Pinpoint. An identity
/// can be either an email address or a domain name.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEmailIdentity {
    _private: (),
}
impl DeleteEmailIdentity {
    /// Creates a new builder-style object to manufacture [`DeleteEmailIdentityInput`](crate::input::DeleteEmailIdentityInput)
    pub fn builder() -> crate::input::delete_email_identity_input::Builder {
        crate::input::delete_email_identity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEmailIdentity {
    type Output = std::result::Result<
        crate::output::DeleteEmailIdentityOutput,
        crate::error::DeleteEmailIdentityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_email_identity_error(response)
        } else {
            crate::operation_deser::parse_delete_email_identity_response(response)
        }
    }
}

/// <p>Obtain information about the email-sending status and capabilities of your Amazon Pinpoint
/// account in the current AWS Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAccount {
    _private: (),
}
impl GetAccount {
    /// Creates a new builder-style object to manufacture [`GetAccountInput`](crate::input::GetAccountInput)
    pub fn builder() -> crate::input::get_account_input::Builder {
        crate::input::get_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAccount {
    type Output =
        std::result::Result<crate::output::GetAccountOutput, crate::error::GetAccountError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_account_error(response)
        } else {
            crate::operation_deser::parse_get_account_response(response)
        }
    }
}

/// <p>Retrieve a list of the blacklists that your dedicated IP addresses appear on.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBlacklistReports {
    _private: (),
}
impl GetBlacklistReports {
    /// Creates a new builder-style object to manufacture [`GetBlacklistReportsInput`](crate::input::GetBlacklistReportsInput)
    pub fn builder() -> crate::input::get_blacklist_reports_input::Builder {
        crate::input::get_blacklist_reports_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetBlacklistReports {
    type Output = std::result::Result<
        crate::output::GetBlacklistReportsOutput,
        crate::error::GetBlacklistReportsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_blacklist_reports_error(response)
        } else {
            crate::operation_deser::parse_get_blacklist_reports_response(response)
        }
    }
}

/// <p>Get information about an existing configuration set, including the dedicated IP pool
/// that it's associated with, whether or not it's enabled for sending email, and
/// more.</p>
/// <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can
/// apply to the emails you send. You apply a configuration set to an email by including a
/// reference to the configuration set in the headers of the email. When you apply a
/// configuration set to an email, all of the rules in that configuration set are applied to
/// the email.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetConfigurationSet {
    _private: (),
}
impl GetConfigurationSet {
    /// Creates a new builder-style object to manufacture [`GetConfigurationSetInput`](crate::input::GetConfigurationSetInput)
    pub fn builder() -> crate::input::get_configuration_set_input::Builder {
        crate::input::get_configuration_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetConfigurationSet {
    type Output = std::result::Result<
        crate::output::GetConfigurationSetOutput,
        crate::error::GetConfigurationSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_configuration_set_error(response)
        } else {
            crate::operation_deser::parse_get_configuration_set_response(response)
        }
    }
}

/// <p>Retrieve a list of event destinations that are associated with a configuration
/// set.</p>
/// <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
/// clicks, bounces, and complaints. <i>Event destinations</i> are places that
/// you can send information about these events to. For example, you can send event data to
/// Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
/// Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetConfigurationSetEventDestinations {
    _private: (),
}
impl GetConfigurationSetEventDestinations {
    /// Creates a new builder-style object to manufacture [`GetConfigurationSetEventDestinationsInput`](crate::input::GetConfigurationSetEventDestinationsInput)
    pub fn builder() -> crate::input::get_configuration_set_event_destinations_input::Builder {
        crate::input::get_configuration_set_event_destinations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetConfigurationSetEventDestinations {
    type Output = std::result::Result<
        crate::output::GetConfigurationSetEventDestinationsOutput,
        crate::error::GetConfigurationSetEventDestinationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_configuration_set_event_destinations_error(response)
        } else {
            crate::operation_deser::parse_get_configuration_set_event_destinations_response(
                response,
            )
        }
    }
}

/// <p>Get information about a dedicated IP address, including the name of the dedicated IP
/// pool that it's associated with, as well information about the automatic warm-up process
/// for the address.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDedicatedIp {
    _private: (),
}
impl GetDedicatedIp {
    /// Creates a new builder-style object to manufacture [`GetDedicatedIpInput`](crate::input::GetDedicatedIpInput)
    pub fn builder() -> crate::input::get_dedicated_ip_input::Builder {
        crate::input::get_dedicated_ip_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDedicatedIp {
    type Output =
        std::result::Result<crate::output::GetDedicatedIpOutput, crate::error::GetDedicatedIpError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_dedicated_ip_error(response)
        } else {
            crate::operation_deser::parse_get_dedicated_ip_response(response)
        }
    }
}

/// <p>List the dedicated IP addresses that are associated with your Amazon Pinpoint
/// account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDedicatedIps {
    _private: (),
}
impl GetDedicatedIps {
    /// Creates a new builder-style object to manufacture [`GetDedicatedIpsInput`](crate::input::GetDedicatedIpsInput)
    pub fn builder() -> crate::input::get_dedicated_ips_input::Builder {
        crate::input::get_dedicated_ips_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDedicatedIps {
    type Output = std::result::Result<
        crate::output::GetDedicatedIpsOutput,
        crate::error::GetDedicatedIpsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_dedicated_ips_error(response)
        } else {
            crate::operation_deser::parse_get_dedicated_ips_response(response)
        }
    }
}

/// <p>Retrieve information about the status of the Deliverability dashboard for your Amazon Pinpoint account.
/// When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and
/// other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the
/// ability to perform predictive inbox placement tests.</p>
/// <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
/// to any other fees that you accrue by using Amazon Pinpoint. For more information about the
/// features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDeliverabilityDashboardOptions {
    _private: (),
}
impl GetDeliverabilityDashboardOptions {
    /// Creates a new builder-style object to manufacture [`GetDeliverabilityDashboardOptionsInput`](crate::input::GetDeliverabilityDashboardOptionsInput)
    pub fn builder() -> crate::input::get_deliverability_dashboard_options_input::Builder {
        crate::input::get_deliverability_dashboard_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDeliverabilityDashboardOptions {
    type Output = std::result::Result<
        crate::output::GetDeliverabilityDashboardOptionsOutput,
        crate::error::GetDeliverabilityDashboardOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_deliverability_dashboard_options_error(response)
        } else {
            crate::operation_deser::parse_get_deliverability_dashboard_options_response(response)
        }
    }
}

/// <p>Retrieve the results of a predictive inbox placement test.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDeliverabilityTestReport {
    _private: (),
}
impl GetDeliverabilityTestReport {
    /// Creates a new builder-style object to manufacture [`GetDeliverabilityTestReportInput`](crate::input::GetDeliverabilityTestReportInput)
    pub fn builder() -> crate::input::get_deliverability_test_report_input::Builder {
        crate::input::get_deliverability_test_report_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDeliverabilityTestReport {
    type Output = std::result::Result<
        crate::output::GetDeliverabilityTestReportOutput,
        crate::error::GetDeliverabilityTestReportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_deliverability_test_report_error(response)
        } else {
            crate::operation_deser::parse_get_deliverability_test_report_response(response)
        }
    }
}

/// <p>Retrieve all the deliverability data for a specific campaign. This data is available
/// for a campaign only if the campaign sent email by using a domain that the
/// Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code>
/// operation).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDomainDeliverabilityCampaign {
    _private: (),
}
impl GetDomainDeliverabilityCampaign {
    /// Creates a new builder-style object to manufacture [`GetDomainDeliverabilityCampaignInput`](crate::input::GetDomainDeliverabilityCampaignInput)
    pub fn builder() -> crate::input::get_domain_deliverability_campaign_input::Builder {
        crate::input::get_domain_deliverability_campaign_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDomainDeliverabilityCampaign {
    type Output = std::result::Result<
        crate::output::GetDomainDeliverabilityCampaignOutput,
        crate::error::GetDomainDeliverabilityCampaignError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_domain_deliverability_campaign_error(response)
        } else {
            crate::operation_deser::parse_get_domain_deliverability_campaign_response(response)
        }
    }
}

/// <p>Retrieve inbox placement and engagement rates for the domains that you use to send
/// email.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDomainStatisticsReport {
    _private: (),
}
impl GetDomainStatisticsReport {
    /// Creates a new builder-style object to manufacture [`GetDomainStatisticsReportInput`](crate::input::GetDomainStatisticsReportInput)
    pub fn builder() -> crate::input::get_domain_statistics_report_input::Builder {
        crate::input::get_domain_statistics_report_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDomainStatisticsReport {
    type Output = std::result::Result<
        crate::output::GetDomainStatisticsReportOutput,
        crate::error::GetDomainStatisticsReportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_domain_statistics_report_error(response)
        } else {
            crate::operation_deser::parse_get_domain_statistics_report_response(response)
        }
    }
}

/// <p>Provides information about a specific identity associated with your Amazon Pinpoint account,
/// including the identity's verification status, its DKIM authentication status, and its
/// custom Mail-From settings.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEmailIdentity {
    _private: (),
}
impl GetEmailIdentity {
    /// Creates a new builder-style object to manufacture [`GetEmailIdentityInput`](crate::input::GetEmailIdentityInput)
    pub fn builder() -> crate::input::get_email_identity_input::Builder {
        crate::input::get_email_identity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEmailIdentity {
    type Output = std::result::Result<
        crate::output::GetEmailIdentityOutput,
        crate::error::GetEmailIdentityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_email_identity_error(response)
        } else {
            crate::operation_deser::parse_get_email_identity_response(response)
        }
    }
}

/// <p>List all of the configuration sets associated with your Amazon Pinpoint account in the current
/// region.</p>
/// <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can
/// apply to the emails you send. You apply a configuration set to an email by including a
/// reference to the configuration set in the headers of the email. When you apply a
/// configuration set to an email, all of the rules in that configuration set are applied to
/// the email.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListConfigurationSets {
    _private: (),
}
impl ListConfigurationSets {
    /// Creates a new builder-style object to manufacture [`ListConfigurationSetsInput`](crate::input::ListConfigurationSetsInput)
    pub fn builder() -> crate::input::list_configuration_sets_input::Builder {
        crate::input::list_configuration_sets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListConfigurationSets {
    type Output = std::result::Result<
        crate::output::ListConfigurationSetsOutput,
        crate::error::ListConfigurationSetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_configuration_sets_error(response)
        } else {
            crate::operation_deser::parse_list_configuration_sets_response(response)
        }
    }
}

/// <p>List all of the dedicated IP pools that exist in your Amazon Pinpoint account in the current
/// AWS Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDedicatedIpPools {
    _private: (),
}
impl ListDedicatedIpPools {
    /// Creates a new builder-style object to manufacture [`ListDedicatedIpPoolsInput`](crate::input::ListDedicatedIpPoolsInput)
    pub fn builder() -> crate::input::list_dedicated_ip_pools_input::Builder {
        crate::input::list_dedicated_ip_pools_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDedicatedIpPools {
    type Output = std::result::Result<
        crate::output::ListDedicatedIpPoolsOutput,
        crate::error::ListDedicatedIpPoolsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_dedicated_ip_pools_error(response)
        } else {
            crate::operation_deser::parse_list_dedicated_ip_pools_response(response)
        }
    }
}

/// <p>Show a list of the predictive inbox placement tests that you've performed, regardless of their statuses. For
/// predictive inbox placement tests that are complete, you can use the <code>GetDeliverabilityTestReport</code>
/// operation to view the results.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDeliverabilityTestReports {
    _private: (),
}
impl ListDeliverabilityTestReports {
    /// Creates a new builder-style object to manufacture [`ListDeliverabilityTestReportsInput`](crate::input::ListDeliverabilityTestReportsInput)
    pub fn builder() -> crate::input::list_deliverability_test_reports_input::Builder {
        crate::input::list_deliverability_test_reports_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDeliverabilityTestReports {
    type Output = std::result::Result<
        crate::output::ListDeliverabilityTestReportsOutput,
        crate::error::ListDeliverabilityTestReportsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_deliverability_test_reports_error(response)
        } else {
            crate::operation_deser::parse_list_deliverability_test_reports_response(response)
        }
    }
}

/// <p>Retrieve deliverability data for all the campaigns that used a specific domain to send
/// email during a specified time range. This data is available for a domain only if you
/// enabled the Deliverability dashboard (<code>PutDeliverabilityDashboardOption</code> operation)
/// for the domain.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDomainDeliverabilityCampaigns {
    _private: (),
}
impl ListDomainDeliverabilityCampaigns {
    /// Creates a new builder-style object to manufacture [`ListDomainDeliverabilityCampaignsInput`](crate::input::ListDomainDeliverabilityCampaignsInput)
    pub fn builder() -> crate::input::list_domain_deliverability_campaigns_input::Builder {
        crate::input::list_domain_deliverability_campaigns_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDomainDeliverabilityCampaigns {
    type Output = std::result::Result<
        crate::output::ListDomainDeliverabilityCampaignsOutput,
        crate::error::ListDomainDeliverabilityCampaignsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_domain_deliverability_campaigns_error(response)
        } else {
            crate::operation_deser::parse_list_domain_deliverability_campaigns_response(response)
        }
    }
}

/// <p>Returns a list of all of the email identities that are associated with your Amazon Pinpoint
/// account. An identity can be either an email address or a domain. This operation returns
/// identities that are verified as well as those that aren't.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEmailIdentities {
    _private: (),
}
impl ListEmailIdentities {
    /// Creates a new builder-style object to manufacture [`ListEmailIdentitiesInput`](crate::input::ListEmailIdentitiesInput)
    pub fn builder() -> crate::input::list_email_identities_input::Builder {
        crate::input::list_email_identities_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEmailIdentities {
    type Output = std::result::Result<
        crate::output::ListEmailIdentitiesOutput,
        crate::error::ListEmailIdentitiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_email_identities_error(response)
        } else {
            crate::operation_deser::parse_list_email_identities_response(response)
        }
    }
}

/// <p>Retrieve a list of the tags (keys and values) that are associated with a specified
/// resource. A <i>tag</i> is a label that you optionally define and associate
/// with a resource in Amazon Pinpoint. Each tag consists of a required <i>tag
/// key</i> and an optional associated <i>tag value</i>. A tag key
/// is a general label that acts as a category for more specific tag values. A tag value
/// acts as a descriptor within a tag key.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Enable or disable the automatic warm-up feature for dedicated IP addresses.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutAccountDedicatedIpWarmupAttributes {
    _private: (),
}
impl PutAccountDedicatedIpWarmupAttributes {
    /// Creates a new builder-style object to manufacture [`PutAccountDedicatedIpWarmupAttributesInput`](crate::input::PutAccountDedicatedIpWarmupAttributesInput)
    pub fn builder() -> crate::input::put_account_dedicated_ip_warmup_attributes_input::Builder {
        crate::input::put_account_dedicated_ip_warmup_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutAccountDedicatedIpWarmupAttributes {
    type Output = std::result::Result<
        crate::output::PutAccountDedicatedIpWarmupAttributesOutput,
        crate::error::PutAccountDedicatedIpWarmupAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_account_dedicated_ip_warmup_attributes_error(response)
        } else {
            crate::operation_deser::parse_put_account_dedicated_ip_warmup_attributes_response(
                response,
            )
        }
    }
}

/// <p>Enable or disable the ability of your account to send email.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutAccountSendingAttributes {
    _private: (),
}
impl PutAccountSendingAttributes {
    /// Creates a new builder-style object to manufacture [`PutAccountSendingAttributesInput`](crate::input::PutAccountSendingAttributesInput)
    pub fn builder() -> crate::input::put_account_sending_attributes_input::Builder {
        crate::input::put_account_sending_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutAccountSendingAttributes {
    type Output = std::result::Result<
        crate::output::PutAccountSendingAttributesOutput,
        crate::error::PutAccountSendingAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_account_sending_attributes_error(response)
        } else {
            crate::operation_deser::parse_put_account_sending_attributes_response(response)
        }
    }
}

/// <p>Associate a configuration set with a dedicated IP pool. You can use dedicated IP pools
/// to create groups of dedicated IP addresses for sending specific types of email.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutConfigurationSetDeliveryOptions {
    _private: (),
}
impl PutConfigurationSetDeliveryOptions {
    /// Creates a new builder-style object to manufacture [`PutConfigurationSetDeliveryOptionsInput`](crate::input::PutConfigurationSetDeliveryOptionsInput)
    pub fn builder() -> crate::input::put_configuration_set_delivery_options_input::Builder {
        crate::input::put_configuration_set_delivery_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutConfigurationSetDeliveryOptions {
    type Output = std::result::Result<
        crate::output::PutConfigurationSetDeliveryOptionsOutput,
        crate::error::PutConfigurationSetDeliveryOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_configuration_set_delivery_options_error(response)
        } else {
            crate::operation_deser::parse_put_configuration_set_delivery_options_response(response)
        }
    }
}

/// <p>Enable or disable collection of reputation metrics for emails that you send using a
/// particular configuration set in a specific AWS Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutConfigurationSetReputationOptions {
    _private: (),
}
impl PutConfigurationSetReputationOptions {
    /// Creates a new builder-style object to manufacture [`PutConfigurationSetReputationOptionsInput`](crate::input::PutConfigurationSetReputationOptionsInput)
    pub fn builder() -> crate::input::put_configuration_set_reputation_options_input::Builder {
        crate::input::put_configuration_set_reputation_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutConfigurationSetReputationOptions {
    type Output = std::result::Result<
        crate::output::PutConfigurationSetReputationOptionsOutput,
        crate::error::PutConfigurationSetReputationOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_configuration_set_reputation_options_error(response)
        } else {
            crate::operation_deser::parse_put_configuration_set_reputation_options_response(
                response,
            )
        }
    }
}

/// <p>Enable or disable email sending for messages that use a particular configuration set
/// in a specific AWS Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutConfigurationSetSendingOptions {
    _private: (),
}
impl PutConfigurationSetSendingOptions {
    /// Creates a new builder-style object to manufacture [`PutConfigurationSetSendingOptionsInput`](crate::input::PutConfigurationSetSendingOptionsInput)
    pub fn builder() -> crate::input::put_configuration_set_sending_options_input::Builder {
        crate::input::put_configuration_set_sending_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutConfigurationSetSendingOptions {
    type Output = std::result::Result<
        crate::output::PutConfigurationSetSendingOptionsOutput,
        crate::error::PutConfigurationSetSendingOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_configuration_set_sending_options_error(response)
        } else {
            crate::operation_deser::parse_put_configuration_set_sending_options_response(response)
        }
    }
}

/// <p>Specify a custom domain to use for open and click tracking elements in email that you
/// send using Amazon Pinpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutConfigurationSetTrackingOptions {
    _private: (),
}
impl PutConfigurationSetTrackingOptions {
    /// Creates a new builder-style object to manufacture [`PutConfigurationSetTrackingOptionsInput`](crate::input::PutConfigurationSetTrackingOptionsInput)
    pub fn builder() -> crate::input::put_configuration_set_tracking_options_input::Builder {
        crate::input::put_configuration_set_tracking_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutConfigurationSetTrackingOptions {
    type Output = std::result::Result<
        crate::output::PutConfigurationSetTrackingOptionsOutput,
        crate::error::PutConfigurationSetTrackingOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_configuration_set_tracking_options_error(response)
        } else {
            crate::operation_deser::parse_put_configuration_set_tracking_options_response(response)
        }
    }
}

/// <p>Move a dedicated IP address to an existing dedicated IP pool.</p>
/// <note>
/// <p>The dedicated IP address that you specify must already exist, and must be
/// associated with your Amazon Pinpoint account.
/// </p>
/// <p>The dedicated IP pool you specify must already exist. You can create a new pool by
/// using the <code>CreateDedicatedIpPool</code> operation.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutDedicatedIpInPool {
    _private: (),
}
impl PutDedicatedIpInPool {
    /// Creates a new builder-style object to manufacture [`PutDedicatedIpInPoolInput`](crate::input::PutDedicatedIpInPoolInput)
    pub fn builder() -> crate::input::put_dedicated_ip_in_pool_input::Builder {
        crate::input::put_dedicated_ip_in_pool_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutDedicatedIpInPool {
    type Output = std::result::Result<
        crate::output::PutDedicatedIpInPoolOutput,
        crate::error::PutDedicatedIpInPoolError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_dedicated_ip_in_pool_error(response)
        } else {
            crate::operation_deser::parse_put_dedicated_ip_in_pool_response(response)
        }
    }
}

/// <p></p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutDedicatedIpWarmupAttributes {
    _private: (),
}
impl PutDedicatedIpWarmupAttributes {
    /// Creates a new builder-style object to manufacture [`PutDedicatedIpWarmupAttributesInput`](crate::input::PutDedicatedIpWarmupAttributesInput)
    pub fn builder() -> crate::input::put_dedicated_ip_warmup_attributes_input::Builder {
        crate::input::put_dedicated_ip_warmup_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutDedicatedIpWarmupAttributes {
    type Output = std::result::Result<
        crate::output::PutDedicatedIpWarmupAttributesOutput,
        crate::error::PutDedicatedIpWarmupAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_dedicated_ip_warmup_attributes_error(response)
        } else {
            crate::operation_deser::parse_put_dedicated_ip_warmup_attributes_response(response)
        }
    }
}

/// <p>Enable or disable the Deliverability dashboard for your Amazon Pinpoint account. When you enable the
/// Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for
/// the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform
/// predictive inbox placement tests.</p>
/// <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
/// to any other fees that you accrue by using Amazon Pinpoint. For more information about the
/// features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutDeliverabilityDashboardOption {
    _private: (),
}
impl PutDeliverabilityDashboardOption {
    /// Creates a new builder-style object to manufacture [`PutDeliverabilityDashboardOptionInput`](crate::input::PutDeliverabilityDashboardOptionInput)
    pub fn builder() -> crate::input::put_deliverability_dashboard_option_input::Builder {
        crate::input::put_deliverability_dashboard_option_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutDeliverabilityDashboardOption {
    type Output = std::result::Result<
        crate::output::PutDeliverabilityDashboardOptionOutput,
        crate::error::PutDeliverabilityDashboardOptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_deliverability_dashboard_option_error(response)
        } else {
            crate::operation_deser::parse_put_deliverability_dashboard_option_response(response)
        }
    }
}

/// <p>Used to enable or disable DKIM authentication for an email identity.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutEmailIdentityDkimAttributes {
    _private: (),
}
impl PutEmailIdentityDkimAttributes {
    /// Creates a new builder-style object to manufacture [`PutEmailIdentityDkimAttributesInput`](crate::input::PutEmailIdentityDkimAttributesInput)
    pub fn builder() -> crate::input::put_email_identity_dkim_attributes_input::Builder {
        crate::input::put_email_identity_dkim_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutEmailIdentityDkimAttributes {
    type Output = std::result::Result<
        crate::output::PutEmailIdentityDkimAttributesOutput,
        crate::error::PutEmailIdentityDkimAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_email_identity_dkim_attributes_error(response)
        } else {
            crate::operation_deser::parse_put_email_identity_dkim_attributes_response(response)
        }
    }
}

/// <p>Used to enable or disable feedback forwarding for an identity. This setting determines
/// what happens when an identity is used to send an email that results in a bounce or
/// complaint event.</p>
/// <p>When you enable feedback forwarding, Amazon Pinpoint sends you email notifications when bounce
/// or complaint events occur. Amazon Pinpoint sends this notification to the address that you
/// specified in the Return-Path header of the original email.</p>
/// <p>When you disable feedback forwarding, Amazon Pinpoint sends notifications through other
/// mechanisms, such as by notifying an Amazon SNS topic. You're required to have a method of
/// tracking bounces and complaints. If you haven't set up another mechanism for receiving
/// bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events
/// occur (even if this setting is disabled).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutEmailIdentityFeedbackAttributes {
    _private: (),
}
impl PutEmailIdentityFeedbackAttributes {
    /// Creates a new builder-style object to manufacture [`PutEmailIdentityFeedbackAttributesInput`](crate::input::PutEmailIdentityFeedbackAttributesInput)
    pub fn builder() -> crate::input::put_email_identity_feedback_attributes_input::Builder {
        crate::input::put_email_identity_feedback_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutEmailIdentityFeedbackAttributes {
    type Output = std::result::Result<
        crate::output::PutEmailIdentityFeedbackAttributesOutput,
        crate::error::PutEmailIdentityFeedbackAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_email_identity_feedback_attributes_error(response)
        } else {
            crate::operation_deser::parse_put_email_identity_feedback_attributes_response(response)
        }
    }
}

/// <p>Used to enable or disable the custom Mail-From domain configuration for an email
/// identity.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutEmailIdentityMailFromAttributes {
    _private: (),
}
impl PutEmailIdentityMailFromAttributes {
    /// Creates a new builder-style object to manufacture [`PutEmailIdentityMailFromAttributesInput`](crate::input::PutEmailIdentityMailFromAttributesInput)
    pub fn builder() -> crate::input::put_email_identity_mail_from_attributes_input::Builder {
        crate::input::put_email_identity_mail_from_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutEmailIdentityMailFromAttributes {
    type Output = std::result::Result<
        crate::output::PutEmailIdentityMailFromAttributesOutput,
        crate::error::PutEmailIdentityMailFromAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_email_identity_mail_from_attributes_error(response)
        } else {
            crate::operation_deser::parse_put_email_identity_mail_from_attributes_response(response)
        }
    }
}

/// <p>Sends an email message. You can use the Amazon Pinpoint Email API to send two types of
/// messages:</p>
/// <ul>
/// <li>
/// <p>
/// <b>Simple</b> – A standard email message. When
/// you create this type of message, you specify the sender, the recipient, and the
/// message body, and Amazon Pinpoint assembles the message for you.</p>
/// </li>
/// <li>
/// <p>
/// <b>Raw</b> –  A raw, MIME-formatted email
/// message. When you send this type of email, you have to specify all of the
/// message headers, as well as the message body. You can use this message type to
/// send messages that contain attachments. The message that you specify has to be a
/// valid MIME message.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendEmail {
    _private: (),
}
impl SendEmail {
    /// Creates a new builder-style object to manufacture [`SendEmailInput`](crate::input::SendEmailInput)
    pub fn builder() -> crate::input::send_email_input::Builder {
        crate::input::send_email_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendEmail {
    type Output = std::result::Result<crate::output::SendEmailOutput, crate::error::SendEmailError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_email_error(response)
        } else {
            crate::operation_deser::parse_send_email_response(response)
        }
    }
}

/// <p>Add one or more tags (keys and values) to a specified resource. A
/// <i>tag</i> is a label that you optionally define and associate with a
/// resource in Amazon Pinpoint. Tags can help you categorize and manage resources in different ways,
/// such as by purpose, owner, environment, or other criteria. A resource can have as many
/// as 50 tags.</p>
/// <p>Each tag consists of a required <i>tag key</i> and an
/// associated <i>tag value</i>, both of which you define. A tag key is a
/// general label that acts as a category for more specific tag values. A tag value acts as
/// a descriptor within a tag key.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Remove one or more tags (keys and values) from a specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Update the configuration of an event destination for a configuration set.</p>
/// <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
/// clicks, bounces, and complaints. <i>Event destinations</i> are places that
/// you can send information about these events to. For example, you can send event data to
/// Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
/// Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConfigurationSetEventDestination {
    _private: (),
}
impl UpdateConfigurationSetEventDestination {
    /// Creates a new builder-style object to manufacture [`UpdateConfigurationSetEventDestinationInput`](crate::input::UpdateConfigurationSetEventDestinationInput)
    pub fn builder() -> crate::input::update_configuration_set_event_destination_input::Builder {
        crate::input::update_configuration_set_event_destination_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateConfigurationSetEventDestination {
    type Output = std::result::Result<
        crate::output::UpdateConfigurationSetEventDestinationOutput,
        crate::error::UpdateConfigurationSetEventDestinationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_configuration_set_event_destination_error(response)
        } else {
            crate::operation_deser::parse_update_configuration_set_event_destination_response(
                response,
            )
        }
    }
}
