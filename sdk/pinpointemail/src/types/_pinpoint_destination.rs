// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments for your campaigns.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PinpointDestination {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Pinpoint project that you want to send email events to.</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
}
impl PinpointDestination {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Pinpoint project that you want to send email events to.</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
}
impl PinpointDestination {
    /// Creates a new builder-style object to manufacture [`PinpointDestination`](crate::types::PinpointDestination).
    pub fn builder() -> crate::types::builders::PinpointDestinationBuilder {
        crate::types::builders::PinpointDestinationBuilder::default()
    }
}

/// A builder for [`PinpointDestination`](crate::types::PinpointDestination).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PinpointDestinationBuilder {
    pub(crate) application_arn: std::option::Option<std::string::String>,
}
impl PinpointDestinationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Amazon Pinpoint project that you want to send email events to.</p>
    pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Pinpoint project that you want to send email events to.</p>
    pub fn set_application_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`PinpointDestination`](crate::types::PinpointDestination).
    pub fn build(self) -> crate::types::PinpointDestination {
        crate::types::PinpointDestination {
            application_arn: self.application_arn,
        }
    }
}
