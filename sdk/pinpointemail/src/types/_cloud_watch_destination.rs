// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudWatchDestination {
    /// <p>An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch.</p>
    #[doc(hidden)]
    pub dimension_configurations:
        std::option::Option<std::vec::Vec<crate::types::CloudWatchDimensionConfiguration>>,
}
impl CloudWatchDestination {
    /// <p>An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch.</p>
    pub fn dimension_configurations(
        &self,
    ) -> std::option::Option<&[crate::types::CloudWatchDimensionConfiguration]> {
        self.dimension_configurations.as_deref()
    }
}
impl CloudWatchDestination {
    /// Creates a new builder-style object to manufacture [`CloudWatchDestination`](crate::types::CloudWatchDestination).
    pub fn builder() -> crate::types::builders::CloudWatchDestinationBuilder {
        crate::types::builders::CloudWatchDestinationBuilder::default()
    }
}

/// A builder for [`CloudWatchDestination`](crate::types::CloudWatchDestination).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CloudWatchDestinationBuilder {
    pub(crate) dimension_configurations:
        std::option::Option<std::vec::Vec<crate::types::CloudWatchDimensionConfiguration>>,
}
impl CloudWatchDestinationBuilder {
    /// Appends an item to `dimension_configurations`.
    ///
    /// To override the contents of this collection use [`set_dimension_configurations`](Self::set_dimension_configurations).
    ///
    /// <p>An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch.</p>
    pub fn dimension_configurations(
        mut self,
        input: crate::types::CloudWatchDimensionConfiguration,
    ) -> Self {
        let mut v = self.dimension_configurations.unwrap_or_default();
        v.push(input);
        self.dimension_configurations = Some(v);
        self
    }
    /// <p>An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch.</p>
    pub fn set_dimension_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CloudWatchDimensionConfiguration>>,
    ) -> Self {
        self.dimension_configurations = input;
        self
    }
    /// Consumes the builder and constructs a [`CloudWatchDestination`](crate::types::CloudWatchDestination).
    pub fn build(self) -> crate::types::CloudWatchDestination {
        crate::types::CloudWatchDestination {
            dimension_configurations: self.dimension_configurations,
        }
    }
}
