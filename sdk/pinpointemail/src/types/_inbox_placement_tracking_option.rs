// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about the inbox placement data settings for a verified domain thatâ€™s associated with your AWS account. This data is available only if you enabled the Deliverability dashboard for the domain (<code>PutDeliverabilityDashboardOption</code> operation).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InboxPlacementTrackingOption {
    /// <p>Specifies whether inbox placement data is being tracked for the domain.</p>
    pub global: bool,
    /// <p>An array of strings, one for each major email provider that the inbox placement data applies to.</p>
    pub tracked_isps: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl InboxPlacementTrackingOption {
    /// <p>Specifies whether inbox placement data is being tracked for the domain.</p>
    pub fn global(&self) -> bool {
        self.global
    }
    /// <p>An array of strings, one for each major email provider that the inbox placement data applies to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tracked_isps.is_none()`.
    pub fn tracked_isps(&self) -> &[::std::string::String] {
        self.tracked_isps.as_deref().unwrap_or_default()
    }
}
impl InboxPlacementTrackingOption {
    /// Creates a new builder-style object to manufacture [`InboxPlacementTrackingOption`](crate::types::InboxPlacementTrackingOption).
    pub fn builder() -> crate::types::builders::InboxPlacementTrackingOptionBuilder {
        crate::types::builders::InboxPlacementTrackingOptionBuilder::default()
    }
}

/// A builder for [`InboxPlacementTrackingOption`](crate::types::InboxPlacementTrackingOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InboxPlacementTrackingOptionBuilder {
    pub(crate) global: ::std::option::Option<bool>,
    pub(crate) tracked_isps: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl InboxPlacementTrackingOptionBuilder {
    /// <p>Specifies whether inbox placement data is being tracked for the domain.</p>
    pub fn global(mut self, input: bool) -> Self {
        self.global = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether inbox placement data is being tracked for the domain.</p>
    pub fn set_global(mut self, input: ::std::option::Option<bool>) -> Self {
        self.global = input;
        self
    }
    /// <p>Specifies whether inbox placement data is being tracked for the domain.</p>
    pub fn get_global(&self) -> &::std::option::Option<bool> {
        &self.global
    }
    /// Appends an item to `tracked_isps`.
    ///
    /// To override the contents of this collection use [`set_tracked_isps`](Self::set_tracked_isps).
    ///
    /// <p>An array of strings, one for each major email provider that the inbox placement data applies to.</p>
    pub fn tracked_isps(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tracked_isps.unwrap_or_default();
        v.push(input.into());
        self.tracked_isps = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of strings, one for each major email provider that the inbox placement data applies to.</p>
    pub fn set_tracked_isps(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tracked_isps = input;
        self
    }
    /// <p>An array of strings, one for each major email provider that the inbox placement data applies to.</p>
    pub fn get_tracked_isps(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tracked_isps
    }
    /// Consumes the builder and constructs a [`InboxPlacementTrackingOption`](crate::types::InboxPlacementTrackingOption).
    pub fn build(self) -> crate::types::InboxPlacementTrackingOption {
        crate::types::InboxPlacementTrackingOption {
            global: self.global.unwrap_or_default(),
            tracked_isps: self.tracked_isps,
        }
    }
}
