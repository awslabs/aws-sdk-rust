// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that defines the tracking options for a configuration set. When you use Amazon Pinpoint to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p>
/// <p>These images and links include references to a domain operated by AWS. You can optionally configure Amazon Pinpoint to use a domain that you operate for these images and links.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrackingOptions {
    /// <p>The domain that you want to use for tracking open and click events.</p>
    #[doc(hidden)]
    pub custom_redirect_domain: std::option::Option<std::string::String>,
}
impl TrackingOptions {
    /// <p>The domain that you want to use for tracking open and click events.</p>
    pub fn custom_redirect_domain(&self) -> std::option::Option<&str> {
        self.custom_redirect_domain.as_deref()
    }
}
impl TrackingOptions {
    /// Creates a new builder-style object to manufacture [`TrackingOptions`](crate::types::TrackingOptions).
    pub fn builder() -> crate::types::builders::TrackingOptionsBuilder {
        crate::types::builders::TrackingOptionsBuilder::default()
    }
}

/// A builder for [`TrackingOptions`](crate::types::TrackingOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrackingOptionsBuilder {
    pub(crate) custom_redirect_domain: std::option::Option<std::string::String>,
}
impl TrackingOptionsBuilder {
    /// <p>The domain that you want to use for tracking open and click events.</p>
    pub fn custom_redirect_domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_redirect_domain = Some(input.into());
        self
    }
    /// <p>The domain that you want to use for tracking open and click events.</p>
    pub fn set_custom_redirect_domain(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.custom_redirect_domain = input;
        self
    }
    /// Consumes the builder and constructs a [`TrackingOptions`](crate::types::TrackingOptions).
    pub fn build(self) -> crate::types::TrackingOptions {
        crate::types::TrackingOptions {
            custom_redirect_domain: self.custom_redirect_domain,
        }
    }
}
