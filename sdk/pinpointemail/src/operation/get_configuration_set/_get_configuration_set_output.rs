// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a configuration set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetConfigurationSetOutput {
    /// <p>The name of the configuration set.</p>
    pub configuration_set_name: ::std::option::Option<::std::string::String>,
    /// <p>An object that defines the open and click tracking options for emails that you send using the configuration set.</p>
    pub tracking_options: ::std::option::Option<crate::types::TrackingOptions>,
    /// <p>An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.</p>
    pub delivery_options: ::std::option::Option<crate::types::DeliveryOptions>,
    /// <p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.</p>
    pub reputation_options: ::std::option::Option<crate::types::ReputationOptions>,
    /// <p>An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.</p>
    pub sending_options: ::std::option::Option<crate::types::SendingOptions>,
    /// <p>An array of objects that define the tags (keys and values) that are associated with the configuration set.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    _request_id: Option<String>,
}
impl GetConfigurationSetOutput {
    /// <p>The name of the configuration set.</p>
    pub fn configuration_set_name(&self) -> ::std::option::Option<&str> {
        self.configuration_set_name.as_deref()
    }
    /// <p>An object that defines the open and click tracking options for emails that you send using the configuration set.</p>
    pub fn tracking_options(&self) -> ::std::option::Option<&crate::types::TrackingOptions> {
        self.tracking_options.as_ref()
    }
    /// <p>An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.</p>
    pub fn delivery_options(&self) -> ::std::option::Option<&crate::types::DeliveryOptions> {
        self.delivery_options.as_ref()
    }
    /// <p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.</p>
    pub fn reputation_options(&self) -> ::std::option::Option<&crate::types::ReputationOptions> {
        self.reputation_options.as_ref()
    }
    /// <p>An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.</p>
    pub fn sending_options(&self) -> ::std::option::Option<&crate::types::SendingOptions> {
        self.sending_options.as_ref()
    }
    /// <p>An array of objects that define the tags (keys and values) that are associated with the configuration set.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for GetConfigurationSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConfigurationSetOutput {
    /// Creates a new builder-style object to manufacture [`GetConfigurationSetOutput`](crate::operation::get_configuration_set::GetConfigurationSetOutput).
    pub fn builder() -> crate::operation::get_configuration_set::builders::GetConfigurationSetOutputBuilder {
        crate::operation::get_configuration_set::builders::GetConfigurationSetOutputBuilder::default()
    }
}

/// A builder for [`GetConfigurationSetOutput`](crate::operation::get_configuration_set::GetConfigurationSetOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetConfigurationSetOutputBuilder {
    pub(crate) configuration_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) tracking_options: ::std::option::Option<crate::types::TrackingOptions>,
    pub(crate) delivery_options: ::std::option::Option<crate::types::DeliveryOptions>,
    pub(crate) reputation_options: ::std::option::Option<crate::types::ReputationOptions>,
    pub(crate) sending_options: ::std::option::Option<crate::types::SendingOptions>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    _request_id: Option<String>,
}
impl GetConfigurationSetOutputBuilder {
    /// <p>The name of the configuration set.</p>
    pub fn configuration_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configuration set.</p>
    pub fn set_configuration_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_set_name = input;
        self
    }
    /// <p>The name of the configuration set.</p>
    pub fn get_configuration_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_set_name
    }
    /// <p>An object that defines the open and click tracking options for emails that you send using the configuration set.</p>
    pub fn tracking_options(mut self, input: crate::types::TrackingOptions) -> Self {
        self.tracking_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that defines the open and click tracking options for emails that you send using the configuration set.</p>
    pub fn set_tracking_options(mut self, input: ::std::option::Option<crate::types::TrackingOptions>) -> Self {
        self.tracking_options = input;
        self
    }
    /// <p>An object that defines the open and click tracking options for emails that you send using the configuration set.</p>
    pub fn get_tracking_options(&self) -> &::std::option::Option<crate::types::TrackingOptions> {
        &self.tracking_options
    }
    /// <p>An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.</p>
    pub fn delivery_options(mut self, input: crate::types::DeliveryOptions) -> Self {
        self.delivery_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.</p>
    pub fn set_delivery_options(mut self, input: ::std::option::Option<crate::types::DeliveryOptions>) -> Self {
        self.delivery_options = input;
        self
    }
    /// <p>An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.</p>
    pub fn get_delivery_options(&self) -> &::std::option::Option<crate::types::DeliveryOptions> {
        &self.delivery_options
    }
    /// <p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.</p>
    pub fn reputation_options(mut self, input: crate::types::ReputationOptions) -> Self {
        self.reputation_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.</p>
    pub fn set_reputation_options(mut self, input: ::std::option::Option<crate::types::ReputationOptions>) -> Self {
        self.reputation_options = input;
        self
    }
    /// <p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.</p>
    pub fn get_reputation_options(&self) -> &::std::option::Option<crate::types::ReputationOptions> {
        &self.reputation_options
    }
    /// <p>An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.</p>
    pub fn sending_options(mut self, input: crate::types::SendingOptions) -> Self {
        self.sending_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.</p>
    pub fn set_sending_options(mut self, input: ::std::option::Option<crate::types::SendingOptions>) -> Self {
        self.sending_options = input;
        self
    }
    /// <p>An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.</p>
    pub fn get_sending_options(&self) -> &::std::option::Option<crate::types::SendingOptions> {
        &self.sending_options
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of objects that define the tags (keys and values) that are associated with the configuration set.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that define the tags (keys and values) that are associated with the configuration set.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An array of objects that define the tags (keys and values) that are associated with the configuration set.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetConfigurationSetOutput`](crate::operation::get_configuration_set::GetConfigurationSetOutput).
    pub fn build(self) -> crate::operation::get_configuration_set::GetConfigurationSetOutput {
        crate::operation::get_configuration_set::GetConfigurationSetOutput {
            configuration_set_name: self.configuration_set_name,
            tracking_options: self.tracking_options,
            delivery_options: self.delivery_options,
            reputation_options: self.reputation_options,
            sending_options: self.sending_options,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
