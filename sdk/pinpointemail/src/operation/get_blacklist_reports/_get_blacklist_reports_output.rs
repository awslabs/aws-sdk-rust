// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about blacklist events.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetBlacklistReportsOutput {
    /// <p>An object that contains information about a blacklist that one of your dedicated IP addresses appears on.</p>
    #[doc(hidden)]
    pub blacklist_report: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::BlacklistEntry>>,
    >,
    _request_id: Option<String>,
}
impl GetBlacklistReportsOutput {
    /// <p>An object that contains information about a blacklist that one of your dedicated IP addresses appears on.</p>
    pub fn blacklist_report(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            std::vec::Vec<crate::types::BlacklistEntry>,
        >,
    > {
        self.blacklist_report.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetBlacklistReportsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetBlacklistReportsOutput {
    /// Creates a new builder-style object to manufacture [`GetBlacklistReportsOutput`](crate::operation::get_blacklist_reports::GetBlacklistReportsOutput).
    pub fn builder(
    ) -> crate::operation::get_blacklist_reports::builders::GetBlacklistReportsOutputBuilder {
        crate::operation::get_blacklist_reports::builders::GetBlacklistReportsOutputBuilder::default(
        )
    }
}

/// A builder for [`GetBlacklistReportsOutput`](crate::operation::get_blacklist_reports::GetBlacklistReportsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetBlacklistReportsOutputBuilder {
    pub(crate) blacklist_report: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::BlacklistEntry>>,
    >,
    _request_id: Option<String>,
}
impl GetBlacklistReportsOutputBuilder {
    /// Adds a key-value pair to `blacklist_report`.
    ///
    /// To override the contents of this collection use [`set_blacklist_report`](Self::set_blacklist_report).
    ///
    /// <p>An object that contains information about a blacklist that one of your dedicated IP addresses appears on.</p>
    pub fn blacklist_report(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<crate::types::BlacklistEntry>,
    ) -> Self {
        let mut hash_map = self.blacklist_report.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.blacklist_report = Some(hash_map);
        self
    }
    /// <p>An object that contains information about a blacklist that one of your dedicated IP addresses appears on.</p>
    pub fn set_blacklist_report(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::vec::Vec<crate::types::BlacklistEntry>,
            >,
        >,
    ) -> Self {
        self.blacklist_report = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetBlacklistReportsOutput`](crate::operation::get_blacklist_reports::GetBlacklistReportsOutput).
    pub fn build(self) -> crate::operation::get_blacklist_reports::GetBlacklistReportsOutput {
        crate::operation::get_blacklist_reports::GetBlacklistReportsOutput {
            blacklist_report: self.blacklist_report,
            _request_id: self._request_id,
        }
    }
}
