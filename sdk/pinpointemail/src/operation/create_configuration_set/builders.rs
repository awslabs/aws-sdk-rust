// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_configuration_set::_create_configuration_set_output::CreateConfigurationSetOutputBuilder;

pub use crate::operation::create_configuration_set::_create_configuration_set_input::CreateConfigurationSetInputBuilder;

/// Fluent builder constructing a request to `CreateConfigurationSet`.
///
/// <p>Create a configuration set. <i>Configuration sets</i> are groups of rules that you can apply to the emails you send using Amazon Pinpoint. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateConfigurationSetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_configuration_set::builders::CreateConfigurationSetInputBuilder,
}
impl CreateConfigurationSetFluentBuilder {
    /// Creates a new `CreateConfigurationSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_configuration_set::CreateConfigurationSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_configuration_set::CreateConfigurationSetError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_configuration_set::CreateConfigurationSetOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_configuration_set::CreateConfigurationSetError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the configuration set.</p>
    pub fn configuration_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configuration_set_name(input.into());
        self
    }
    /// <p>The name of the configuration set.</p>
    pub fn set_configuration_set_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_configuration_set_name(input);
        self
    }
    /// <p>An object that defines the open and click tracking options for emails that you send using the configuration set.</p>
    pub fn tracking_options(mut self, input: crate::types::TrackingOptions) -> Self {
        self.inner = self.inner.tracking_options(input);
        self
    }
    /// <p>An object that defines the open and click tracking options for emails that you send using the configuration set.</p>
    pub fn set_tracking_options(
        mut self,
        input: std::option::Option<crate::types::TrackingOptions>,
    ) -> Self {
        self.inner = self.inner.set_tracking_options(input);
        self
    }
    /// <p>An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.</p>
    pub fn delivery_options(mut self, input: crate::types::DeliveryOptions) -> Self {
        self.inner = self.inner.delivery_options(input);
        self
    }
    /// <p>An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.</p>
    pub fn set_delivery_options(
        mut self,
        input: std::option::Option<crate::types::DeliveryOptions>,
    ) -> Self {
        self.inner = self.inner.set_delivery_options(input);
        self
    }
    /// <p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.</p>
    pub fn reputation_options(mut self, input: crate::types::ReputationOptions) -> Self {
        self.inner = self.inner.reputation_options(input);
        self
    }
    /// <p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.</p>
    pub fn set_reputation_options(
        mut self,
        input: std::option::Option<crate::types::ReputationOptions>,
    ) -> Self {
        self.inner = self.inner.set_reputation_options(input);
        self
    }
    /// <p>An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.</p>
    pub fn sending_options(mut self, input: crate::types::SendingOptions) -> Self {
        self.inner = self.inner.sending_options(input);
        self
    }
    /// <p>An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.</p>
    pub fn set_sending_options(
        mut self,
        input: std::option::Option<crate::types::SendingOptions>,
    ) -> Self {
        self.inner = self.inner.set_sending_options(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of objects that define the tags (keys and values) that you want to associate with the configuration set.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of objects that define the tags (keys and values) that you want to associate with the configuration set.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
