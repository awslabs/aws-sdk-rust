// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_deliverability_test_report::_create_deliverability_test_report_output::CreateDeliverabilityTestReportOutputBuilder;

pub use crate::operation::create_deliverability_test_report::_create_deliverability_test_report_input::CreateDeliverabilityTestReportInputBuilder;

impl CreateDeliverabilityTestReportInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReportOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReportError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_deliverability_test_report();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateDeliverabilityTestReport`.
///
/// <p>Create a new predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. Amazon Pinpoint then sends that message to special email addresses spread across several major email providers. After about 24 hours, the test is complete, and you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateDeliverabilityTestReportFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_deliverability_test_report::builders::CreateDeliverabilityTestReportInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReportOutput,
        crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReportError,
    > for CreateDeliverabilityTestReportFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReportOutput,
            crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReportError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateDeliverabilityTestReportFluentBuilder {
    /// Creates a new `CreateDeliverabilityTestReport`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateDeliverabilityTestReport as a reference.
    pub fn as_input(&self) -> &crate::operation::create_deliverability_test_report::builders::CreateDeliverabilityTestReportInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReportOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReportError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReport::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReport::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReportOutput,
        crate::operation::create_deliverability_test_report::CreateDeliverabilityTestReportError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique name that helps you to identify the predictive inbox placement test when you retrieve the results.</p>
    pub fn report_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.report_name(input.into());
        self
    }
    /// <p>A unique name that helps you to identify the predictive inbox placement test when you retrieve the results.</p>
    pub fn set_report_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_report_name(input);
        self
    }
    /// <p>A unique name that helps you to identify the predictive inbox placement test when you retrieve the results.</p>
    pub fn get_report_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_report_name()
    }
    /// <p>The email address that the predictive inbox placement test email was sent from.</p>
    pub fn from_email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.from_email_address(input.into());
        self
    }
    /// <p>The email address that the predictive inbox placement test email was sent from.</p>
    pub fn set_from_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_from_email_address(input);
        self
    }
    /// <p>The email address that the predictive inbox placement test email was sent from.</p>
    pub fn get_from_email_address(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_from_email_address()
    }
    /// <p>The HTML body of the message that you sent when you performed the predictive inbox placement test.</p>
    pub fn content(mut self, input: crate::types::EmailContent) -> Self {
        self.inner = self.inner.content(input);
        self
    }
    /// <p>The HTML body of the message that you sent when you performed the predictive inbox placement test.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::EmailContent>) -> Self {
        self.inner = self.inner.set_content(input);
        self
    }
    /// <p>The HTML body of the message that you sent when you performed the predictive inbox placement test.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::EmailContent> {
        self.inner.get_content()
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
