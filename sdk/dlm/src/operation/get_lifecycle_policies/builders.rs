// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_lifecycle_policies::_get_lifecycle_policies_output::GetLifecyclePoliciesOutputBuilder;

pub use crate::operation::get_lifecycle_policies::_get_lifecycle_policies_input::GetLifecyclePoliciesInputBuilder;

/// Fluent builder constructing a request to `GetLifecyclePolicies`.
///
/// <p>Gets summary information about all or the specified data lifecycle policies.</p>
/// <p>To get complete information about a policy, use <code>GetLifecyclePolicy</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetLifecyclePoliciesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_lifecycle_policies::builders::GetLifecyclePoliciesInputBuilder,
}
impl GetLifecyclePoliciesFluentBuilder {
    /// Creates a new `GetLifecyclePolicies`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_lifecycle_policies::GetLifecyclePolicies,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_lifecycle_policies::GetLifecyclePoliciesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_lifecycle_policies::GetLifecyclePoliciesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_lifecycle_policies::GetLifecyclePoliciesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `PolicyIds`.
    ///
    /// To override the contents of this collection use [`set_policy_ids`](Self::set_policy_ids).
    ///
    /// <p>The identifiers of the data lifecycle policies.</p>
    pub fn policy_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.policy_ids(input.into());
        self
    }
    /// <p>The identifiers of the data lifecycle policies.</p>
    pub fn set_policy_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_policy_ids(input);
        self
    }
    /// <p>The activation state.</p>
    pub fn state(mut self, input: crate::types::GettablePolicyStateValues) -> Self {
        self.inner = self.inner.state(input);
        self
    }
    /// <p>The activation state.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::GettablePolicyStateValues>,
    ) -> Self {
        self.inner = self.inner.set_state(input);
        self
    }
    /// Appends an item to `ResourceTypes`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>The resource type.</p>
    pub fn resource_types(mut self, input: crate::types::ResourceTypeValues) -> Self {
        self.inner = self.inner.resource_types(input);
        self
    }
    /// <p>The resource type.</p>
    pub fn set_resource_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceTypeValues>>,
    ) -> Self {
        self.inner = self.inner.set_resource_types(input);
        self
    }
    /// Appends an item to `TargetTags`.
    ///
    /// To override the contents of this collection use [`set_target_tags`](Self::set_target_tags).
    ///
    /// <p>The target tag for a policy.</p>
    /// <p>Tags are strings in the format <code>key=value</code>.</p>
    pub fn target_tags(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_tags(input.into());
        self
    }
    /// <p>The target tag for a policy.</p>
    /// <p>Tags are strings in the format <code>key=value</code>.</p>
    pub fn set_target_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_target_tags(input);
        self
    }
    /// Appends an item to `TagsToAdd`.
    ///
    /// To override the contents of this collection use [`set_tags_to_add`](Self::set_tags_to_add).
    ///
    /// <p>The tags to add to objects created by the policy.</p>
    /// <p>Tags are strings in the format <code>key=value</code>.</p>
    /// <p>These user-defined tags are added in addition to the Amazon Web Services-added lifecycle tags.</p>
    pub fn tags_to_add(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tags_to_add(input.into());
        self
    }
    /// <p>The tags to add to objects created by the policy.</p>
    /// <p>Tags are strings in the format <code>key=value</code>.</p>
    /// <p>These user-defined tags are added in addition to the Amazon Web Services-added lifecycle tags.</p>
    pub fn set_tags_to_add(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tags_to_add(input);
        self
    }
}
