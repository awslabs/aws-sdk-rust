// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateLifecyclePolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The desired activation state of the lifecycle policy after creation.</p>
    pub state: ::std::option::Option<crate::types::SettablePolicyStateValues>,
    /// <p>The configuration details of the lifecycle policy.</p>
    pub policy_details: ::std::option::Option<crate::types::PolicyDetails>,
    /// <p>The tags to apply to the lifecycle policy during creation.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateLifecyclePolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The desired activation state of the lifecycle policy after creation.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::SettablePolicyStateValues> {
        self.state.as_ref()
    }
    /// <p>The configuration details of the lifecycle policy.</p>
    pub fn policy_details(&self) -> ::std::option::Option<&crate::types::PolicyDetails> {
        self.policy_details.as_ref()
    }
    /// <p>The tags to apply to the lifecycle policy during creation.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateLifecyclePolicyInput {
    /// Creates a new builder-style object to manufacture [`CreateLifecyclePolicyInput`](crate::operation::create_lifecycle_policy::CreateLifecyclePolicyInput).
    pub fn builder() -> crate::operation::create_lifecycle_policy::builders::CreateLifecyclePolicyInputBuilder {
        crate::operation::create_lifecycle_policy::builders::CreateLifecyclePolicyInputBuilder::default()
    }
}

/// A builder for [`CreateLifecyclePolicyInput`](crate::operation::create_lifecycle_policy::CreateLifecyclePolicyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateLifecyclePolicyInputBuilder {
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::SettablePolicyStateValues>,
    pub(crate) policy_details: ::std::option::Option<crate::types::PolicyDetails>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateLifecyclePolicyInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.</p>
    /// This field is required.
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// <p>A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The desired activation state of the lifecycle policy after creation.</p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::SettablePolicyStateValues) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired activation state of the lifecycle policy after creation.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::SettablePolicyStateValues>) -> Self {
        self.state = input;
        self
    }
    /// <p>The desired activation state of the lifecycle policy after creation.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::SettablePolicyStateValues> {
        &self.state
    }
    /// <p>The configuration details of the lifecycle policy.</p>
    /// This field is required.
    pub fn policy_details(mut self, input: crate::types::PolicyDetails) -> Self {
        self.policy_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration details of the lifecycle policy.</p>
    pub fn set_policy_details(mut self, input: ::std::option::Option<crate::types::PolicyDetails>) -> Self {
        self.policy_details = input;
        self
    }
    /// <p>The configuration details of the lifecycle policy.</p>
    pub fn get_policy_details(&self) -> &::std::option::Option<crate::types::PolicyDetails> {
        &self.policy_details
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to apply to the lifecycle policy during creation.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags to apply to the lifecycle policy during creation.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to apply to the lifecycle policy during creation.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateLifecyclePolicyInput`](crate::operation::create_lifecycle_policy::CreateLifecyclePolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_lifecycle_policy::CreateLifecyclePolicyInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_lifecycle_policy::CreateLifecyclePolicyInput {
            execution_role_arn: self.execution_role_arn,
            description: self.description,
            state: self.state,
            policy_details: self.policy_details,
            tags: self.tags,
        })
    }
}
