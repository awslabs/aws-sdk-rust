// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <b>[Event-based policies only]</b> Specifies an event that activates an event-based policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EventSource {
    /// <p>The source of the event. Currently only managed CloudWatch Events rules are supported.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::EventSourceValues>,
    /// <p>Information about the event.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<crate::types::EventParameters>,
}
impl EventSource {
    /// <p>The source of the event. Currently only managed CloudWatch Events rules are supported.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::EventSourceValues> {
        self.r#type.as_ref()
    }
    /// <p>Information about the event.</p>
    pub fn parameters(&self) -> std::option::Option<&crate::types::EventParameters> {
        self.parameters.as_ref()
    }
}
impl EventSource {
    /// Creates a new builder-style object to manufacture [`EventSource`](crate::types::EventSource).
    pub fn builder() -> crate::types::builders::EventSourceBuilder {
        crate::types::builders::EventSourceBuilder::default()
    }
}

/// A builder for [`EventSource`](crate::types::EventSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventSourceBuilder {
    pub(crate) r#type: std::option::Option<crate::types::EventSourceValues>,
    pub(crate) parameters: std::option::Option<crate::types::EventParameters>,
}
impl EventSourceBuilder {
    /// <p>The source of the event. Currently only managed CloudWatch Events rules are supported.</p>
    pub fn r#type(mut self, input: crate::types::EventSourceValues) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The source of the event. Currently only managed CloudWatch Events rules are supported.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::EventSourceValues>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Information about the event.</p>
    pub fn parameters(mut self, input: crate::types::EventParameters) -> Self {
        self.parameters = Some(input);
        self
    }
    /// <p>Information about the event.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<crate::types::EventParameters>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`EventSource`](crate::types::EventSource).
    pub fn build(self) -> crate::types::EventSource {
        crate::types::EventSource {
            r#type: self.r#type,
            parameters: self.parameters,
        }
    }
}
