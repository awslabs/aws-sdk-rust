// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <b>[Snapshot and AMI policies only]</b> Specifies a retention rule for snapshots created by snapshot policies, or for AMIs created by AMI policies.</p> <note>
/// <p>For snapshot policies that have an <code>ArchiveRule</code>, this retention rule applies to standard tier retention. When the retention threshold is met, snapshots are moved from the standard to the archive tier.</p>
/// <p>For snapshot policies that do not have an <b>ArchiveRule</b>, snapshots are permanently deleted when this retention threshold is met.</p>
/// </note>
/// <p>You can retain snapshots based on either a count or a time interval.</p>
/// <ul>
/// <li> <p> <b>Count-based retention</b> </p> <p>You must specify <b>Count</b>. If you specify an <code>ArchiveRule</code> for the schedule, then you can specify a retention count of <code>0</code> to archive snapshots immediately after creation. If you specify a <code>FastRestoreRule</code>, <code>ShareRule</code>, or a <code>CrossRegionCopyRule</code>, then you must specify a retention count of <code>1</code> or more.</p> </li>
/// <li> <p> <b>Age-based retention</b> </p> <p>You must specify <b>Interval</b> and <b>IntervalUnit</b>. If you specify an <code>ArchiveRule</code> for the schedule, then you can specify a retention interval of <code>0</code> days to archive snapshots immediately after creation. If you specify a <code>FastRestoreRule</code>, <code>ShareRule</code>, or a <code>CrossRegionCopyRule</code>, then you must specify a retention interval of <code>1</code> day or more.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RetainRule {
    /// <p>The number of snapshots to retain for each volume, up to a maximum of 1000. For example if you want to retain a maximum of three snapshots, specify <code>3</code>. When the fourth snapshot is created, the oldest retained snapshot is deleted, or it is moved to the archive tier if you have specified an <code>ArchiveRule</code>.</p>
    #[doc(hidden)]
    pub count: i32,
    /// <p>The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.</p>
    #[doc(hidden)]
    pub interval: i32,
    /// <p>The unit of time for time-based retention. For example, to retain snapshots for 3 months, specify <code>Interval=3</code> and <code>IntervalUnit=MONTHS</code>. Once the snapshot has been retained for 3 months, it is deleted, or it is moved to the archive tier if you have specified an <code>ArchiveRule</code>.</p>
    #[doc(hidden)]
    pub interval_unit: std::option::Option<crate::types::RetentionIntervalUnitValues>,
}
impl RetainRule {
    /// <p>The number of snapshots to retain for each volume, up to a maximum of 1000. For example if you want to retain a maximum of three snapshots, specify <code>3</code>. When the fourth snapshot is created, the oldest retained snapshot is deleted, or it is moved to the archive tier if you have specified an <code>ArchiveRule</code>.</p>
    pub fn count(&self) -> i32 {
        self.count
    }
    /// <p>The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.</p>
    pub fn interval(&self) -> i32 {
        self.interval
    }
    /// <p>The unit of time for time-based retention. For example, to retain snapshots for 3 months, specify <code>Interval=3</code> and <code>IntervalUnit=MONTHS</code>. Once the snapshot has been retained for 3 months, it is deleted, or it is moved to the archive tier if you have specified an <code>ArchiveRule</code>.</p>
    pub fn interval_unit(&self) -> std::option::Option<&crate::types::RetentionIntervalUnitValues> {
        self.interval_unit.as_ref()
    }
}
impl RetainRule {
    /// Creates a new builder-style object to manufacture [`RetainRule`](crate::types::RetainRule).
    pub fn builder() -> crate::types::builders::RetainRuleBuilder {
        crate::types::builders::RetainRuleBuilder::default()
    }
}

/// A builder for [`RetainRule`](crate::types::RetainRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RetainRuleBuilder {
    pub(crate) count: std::option::Option<i32>,
    pub(crate) interval: std::option::Option<i32>,
    pub(crate) interval_unit: std::option::Option<crate::types::RetentionIntervalUnitValues>,
}
impl RetainRuleBuilder {
    /// <p>The number of snapshots to retain for each volume, up to a maximum of 1000. For example if you want to retain a maximum of three snapshots, specify <code>3</code>. When the fourth snapshot is created, the oldest retained snapshot is deleted, or it is moved to the archive tier if you have specified an <code>ArchiveRule</code>.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>The number of snapshots to retain for each volume, up to a maximum of 1000. For example if you want to retain a maximum of three snapshots, specify <code>3</code>. When the fourth snapshot is created, the oldest retained snapshot is deleted, or it is moved to the archive tier if you have specified an <code>ArchiveRule</code>.</p>
    pub fn set_count(mut self, input: std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.</p>
    pub fn interval(mut self, input: i32) -> Self {
        self.interval = Some(input);
        self
    }
    /// <p>The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.</p>
    pub fn set_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.interval = input;
        self
    }
    /// <p>The unit of time for time-based retention. For example, to retain snapshots for 3 months, specify <code>Interval=3</code> and <code>IntervalUnit=MONTHS</code>. Once the snapshot has been retained for 3 months, it is deleted, or it is moved to the archive tier if you have specified an <code>ArchiveRule</code>.</p>
    pub fn interval_unit(mut self, input: crate::types::RetentionIntervalUnitValues) -> Self {
        self.interval_unit = Some(input);
        self
    }
    /// <p>The unit of time for time-based retention. For example, to retain snapshots for 3 months, specify <code>Interval=3</code> and <code>IntervalUnit=MONTHS</code>. Once the snapshot has been retained for 3 months, it is deleted, or it is moved to the archive tier if you have specified an <code>ArchiveRule</code>.</p>
    pub fn set_interval_unit(
        mut self,
        input: std::option::Option<crate::types::RetentionIntervalUnitValues>,
    ) -> Self {
        self.interval_unit = input;
        self
    }
    /// Consumes the builder and constructs a [`RetainRule`](crate::types::RetainRule).
    pub fn build(self) -> crate::types::RetainRule {
        crate::types::RetainRule {
            count: self.count.unwrap_or_default(),
            interval: self.interval.unwrap_or_default(),
            interval_unit: self.interval_unit,
        }
    }
}
