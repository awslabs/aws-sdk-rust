// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <b>[Snapshot policies only]</b> Specifies a snapshot archiving rule for a schedule.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ArchiveRule {
    /// <p>Information about the retention period for the snapshot archiving rule.</p>
    #[doc(hidden)]
    pub retain_rule: std::option::Option<crate::types::ArchiveRetainRule>,
}
impl ArchiveRule {
    /// <p>Information about the retention period for the snapshot archiving rule.</p>
    pub fn retain_rule(&self) -> std::option::Option<&crate::types::ArchiveRetainRule> {
        self.retain_rule.as_ref()
    }
}
impl ArchiveRule {
    /// Creates a new builder-style object to manufacture [`ArchiveRule`](crate::types::ArchiveRule).
    pub fn builder() -> crate::types::builders::ArchiveRuleBuilder {
        crate::types::builders::ArchiveRuleBuilder::default()
    }
}

/// A builder for [`ArchiveRule`](crate::types::ArchiveRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ArchiveRuleBuilder {
    pub(crate) retain_rule: std::option::Option<crate::types::ArchiveRetainRule>,
}
impl ArchiveRuleBuilder {
    /// <p>Information about the retention period for the snapshot archiving rule.</p>
    pub fn retain_rule(mut self, input: crate::types::ArchiveRetainRule) -> Self {
        self.retain_rule = Some(input);
        self
    }
    /// <p>Information about the retention period for the snapshot archiving rule.</p>
    pub fn set_retain_rule(
        mut self,
        input: std::option::Option<crate::types::ArchiveRetainRule>,
    ) -> Self {
        self.retain_rule = input;
        self
    }
    /// Consumes the builder and constructs a [`ArchiveRule`](crate::types::ArchiveRule).
    pub fn build(self) -> crate::types::ArchiveRule {
        crate::types::ArchiveRule {
            retain_rule: self.retain_rule,
        }
    }
}
