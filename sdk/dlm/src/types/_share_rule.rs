// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <b>[Snapshot policies only]</b> Specifies a rule for sharing snapshots across Amazon Web Services accounts.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ShareRule {
    /// <p>The IDs of the Amazon Web Services accounts with which to share the snapshots.</p>
    #[doc(hidden)]
    pub target_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The period after which snapshots that are shared with other Amazon Web Services accounts are automatically unshared.</p>
    #[doc(hidden)]
    pub unshare_interval: i32,
    /// <p>The unit of time for the automatic unsharing interval.</p>
    #[doc(hidden)]
    pub unshare_interval_unit: std::option::Option<crate::types::RetentionIntervalUnitValues>,
}
impl ShareRule {
    /// <p>The IDs of the Amazon Web Services accounts with which to share the snapshots.</p>
    pub fn target_accounts(&self) -> std::option::Option<&[std::string::String]> {
        self.target_accounts.as_deref()
    }
    /// <p>The period after which snapshots that are shared with other Amazon Web Services accounts are automatically unshared.</p>
    pub fn unshare_interval(&self) -> i32 {
        self.unshare_interval
    }
    /// <p>The unit of time for the automatic unsharing interval.</p>
    pub fn unshare_interval_unit(
        &self,
    ) -> std::option::Option<&crate::types::RetentionIntervalUnitValues> {
        self.unshare_interval_unit.as_ref()
    }
}
impl ShareRule {
    /// Creates a new builder-style object to manufacture [`ShareRule`](crate::types::ShareRule).
    pub fn builder() -> crate::types::builders::ShareRuleBuilder {
        crate::types::builders::ShareRuleBuilder::default()
    }
}

/// A builder for [`ShareRule`](crate::types::ShareRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ShareRuleBuilder {
    pub(crate) target_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) unshare_interval: std::option::Option<i32>,
    pub(crate) unshare_interval_unit:
        std::option::Option<crate::types::RetentionIntervalUnitValues>,
}
impl ShareRuleBuilder {
    /// Appends an item to `target_accounts`.
    ///
    /// To override the contents of this collection use [`set_target_accounts`](Self::set_target_accounts).
    ///
    /// <p>The IDs of the Amazon Web Services accounts with which to share the snapshots.</p>
    pub fn target_accounts(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.target_accounts.unwrap_or_default();
        v.push(input.into());
        self.target_accounts = Some(v);
        self
    }
    /// <p>The IDs of the Amazon Web Services accounts with which to share the snapshots.</p>
    pub fn set_target_accounts(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.target_accounts = input;
        self
    }
    /// <p>The period after which snapshots that are shared with other Amazon Web Services accounts are automatically unshared.</p>
    pub fn unshare_interval(mut self, input: i32) -> Self {
        self.unshare_interval = Some(input);
        self
    }
    /// <p>The period after which snapshots that are shared with other Amazon Web Services accounts are automatically unshared.</p>
    pub fn set_unshare_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.unshare_interval = input;
        self
    }
    /// <p>The unit of time for the automatic unsharing interval.</p>
    pub fn unshare_interval_unit(
        mut self,
        input: crate::types::RetentionIntervalUnitValues,
    ) -> Self {
        self.unshare_interval_unit = Some(input);
        self
    }
    /// <p>The unit of time for the automatic unsharing interval.</p>
    pub fn set_unshare_interval_unit(
        mut self,
        input: std::option::Option<crate::types::RetentionIntervalUnitValues>,
    ) -> Self {
        self.unshare_interval_unit = input;
        self
    }
    /// Consumes the builder and constructs a [`ShareRule`](crate::types::ShareRule).
    pub fn build(self) -> crate::types::ShareRule {
        crate::types::ShareRule {
            target_accounts: self.target_accounts,
            unshare_interval: self.unshare_interval.unwrap_or_default(),
            unshare_interval_unit: self.unshare_interval_unit,
        }
    }
}
