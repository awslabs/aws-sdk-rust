// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <b>[All policy types]</b> Specifies the configuration of a lifecycle policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PolicyDetails {
    /// <p> <b>[All policy types]</b> The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code> to create an event-based policy that performs specific actions when a defined event occurs in your Amazon Web Services account.</p>
    /// <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>
    #[doc(hidden)]
    pub policy_type: std::option::Option<crate::types::PolicyTypeValues>,
    /// <p> <b>[Snapshot policies only]</b> The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume snapshots from the volumes for an instance.</p>
    #[doc(hidden)]
    pub resource_types: std::option::Option<std::vec::Vec<crate::types::ResourceTypeValues>>,
    /// <p> <b>[Snapshot and AMI policies only]</b> The location of the resources to backup. If the source resources are located in an Amazon Web Services Region, specify <code>CLOUD</code>. If the source resources are located on an Outpost in your account, specify <code>OUTPOST</code>.</p>
    /// <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account.</p>
    #[doc(hidden)]
    pub resource_locations:
        std::option::Option<std::vec::Vec<crate::types::ResourceLocationValues>>,
    /// <p> <b>[Snapshot and AMI policies only]</b> The single tag that identifies targeted resources for this policy.</p>
    #[doc(hidden)]
    pub target_tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p> <b>[Snapshot and AMI policies only]</b> The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy can have up to four schedules—one mandatory schedule and up to three optional schedules.</p>
    #[doc(hidden)]
    pub schedules: std::option::Option<std::vec::Vec<crate::types::Schedule>>,
    /// <p> <b>[Snapshot and AMI policies only]</b> A set of optional parameters for snapshot and AMI lifecycle policies. </p> <note>
    /// <p>If you are modifying a policy that was created or previously modified using the Amazon Data Lifecycle Manager console, then you must include this parameter and specify either the default values or the new values that you require. You can't omit this parameter or set its values to null.</p>
    /// </note>
    #[doc(hidden)]
    pub parameters: std::option::Option<crate::types::Parameters>,
    /// <p> <b>[Event-based policies only]</b> The event that activates the event-based policy.</p>
    #[doc(hidden)]
    pub event_source: std::option::Option<crate::types::EventSource>,
    /// <p> <b>[Event-based policies only]</b> The actions to be performed when the event-based policy is activated. You can specify only one action per policy.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<std::vec::Vec<crate::types::Action>>,
}
impl PolicyDetails {
    /// <p> <b>[All policy types]</b> The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code> to create an event-based policy that performs specific actions when a defined event occurs in your Amazon Web Services account.</p>
    /// <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>
    pub fn policy_type(&self) -> std::option::Option<&crate::types::PolicyTypeValues> {
        self.policy_type.as_ref()
    }
    /// <p> <b>[Snapshot policies only]</b> The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume snapshots from the volumes for an instance.</p>
    pub fn resource_types(&self) -> std::option::Option<&[crate::types::ResourceTypeValues]> {
        self.resource_types.as_deref()
    }
    /// <p> <b>[Snapshot and AMI policies only]</b> The location of the resources to backup. If the source resources are located in an Amazon Web Services Region, specify <code>CLOUD</code>. If the source resources are located on an Outpost in your account, specify <code>OUTPOST</code>.</p>
    /// <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account.</p>
    pub fn resource_locations(
        &self,
    ) -> std::option::Option<&[crate::types::ResourceLocationValues]> {
        self.resource_locations.as_deref()
    }
    /// <p> <b>[Snapshot and AMI policies only]</b> The single tag that identifies targeted resources for this policy.</p>
    pub fn target_tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.target_tags.as_deref()
    }
    /// <p> <b>[Snapshot and AMI policies only]</b> The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy can have up to four schedules—one mandatory schedule and up to three optional schedules.</p>
    pub fn schedules(&self) -> std::option::Option<&[crate::types::Schedule]> {
        self.schedules.as_deref()
    }
    /// <p> <b>[Snapshot and AMI policies only]</b> A set of optional parameters for snapshot and AMI lifecycle policies. </p> <note>
    /// <p>If you are modifying a policy that was created or previously modified using the Amazon Data Lifecycle Manager console, then you must include this parameter and specify either the default values or the new values that you require. You can't omit this parameter or set its values to null.</p>
    /// </note>
    pub fn parameters(&self) -> std::option::Option<&crate::types::Parameters> {
        self.parameters.as_ref()
    }
    /// <p> <b>[Event-based policies only]</b> The event that activates the event-based policy.</p>
    pub fn event_source(&self) -> std::option::Option<&crate::types::EventSource> {
        self.event_source.as_ref()
    }
    /// <p> <b>[Event-based policies only]</b> The actions to be performed when the event-based policy is activated. You can specify only one action per policy.</p>
    pub fn actions(&self) -> std::option::Option<&[crate::types::Action]> {
        self.actions.as_deref()
    }
}
impl PolicyDetails {
    /// Creates a new builder-style object to manufacture [`PolicyDetails`](crate::types::PolicyDetails).
    pub fn builder() -> crate::types::builders::PolicyDetailsBuilder {
        crate::types::builders::PolicyDetailsBuilder::default()
    }
}

/// A builder for [`PolicyDetails`](crate::types::PolicyDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PolicyDetailsBuilder {
    pub(crate) policy_type: std::option::Option<crate::types::PolicyTypeValues>,
    pub(crate) resource_types: std::option::Option<std::vec::Vec<crate::types::ResourceTypeValues>>,
    pub(crate) resource_locations:
        std::option::Option<std::vec::Vec<crate::types::ResourceLocationValues>>,
    pub(crate) target_tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) schedules: std::option::Option<std::vec::Vec<crate::types::Schedule>>,
    pub(crate) parameters: std::option::Option<crate::types::Parameters>,
    pub(crate) event_source: std::option::Option<crate::types::EventSource>,
    pub(crate) actions: std::option::Option<std::vec::Vec<crate::types::Action>>,
}
impl PolicyDetailsBuilder {
    /// <p> <b>[All policy types]</b> The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code> to create an event-based policy that performs specific actions when a defined event occurs in your Amazon Web Services account.</p>
    /// <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>
    pub fn policy_type(mut self, input: crate::types::PolicyTypeValues) -> Self {
        self.policy_type = Some(input);
        self
    }
    /// <p> <b>[All policy types]</b> The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code> to create an event-based policy that performs specific actions when a defined event occurs in your Amazon Web Services account.</p>
    /// <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>
    pub fn set_policy_type(
        mut self,
        input: std::option::Option<crate::types::PolicyTypeValues>,
    ) -> Self {
        self.policy_type = input;
        self
    }
    /// Appends an item to `resource_types`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p> <b>[Snapshot policies only]</b> The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume snapshots from the volumes for an instance.</p>
    pub fn resource_types(mut self, input: crate::types::ResourceTypeValues) -> Self {
        let mut v = self.resource_types.unwrap_or_default();
        v.push(input);
        self.resource_types = Some(v);
        self
    }
    /// <p> <b>[Snapshot policies only]</b> The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume snapshots from the volumes for an instance.</p>
    pub fn set_resource_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceTypeValues>>,
    ) -> Self {
        self.resource_types = input;
        self
    }
    /// Appends an item to `resource_locations`.
    ///
    /// To override the contents of this collection use [`set_resource_locations`](Self::set_resource_locations).
    ///
    /// <p> <b>[Snapshot and AMI policies only]</b> The location of the resources to backup. If the source resources are located in an Amazon Web Services Region, specify <code>CLOUD</code>. If the source resources are located on an Outpost in your account, specify <code>OUTPOST</code>.</p>
    /// <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account.</p>
    pub fn resource_locations(mut self, input: crate::types::ResourceLocationValues) -> Self {
        let mut v = self.resource_locations.unwrap_or_default();
        v.push(input);
        self.resource_locations = Some(v);
        self
    }
    /// <p> <b>[Snapshot and AMI policies only]</b> The location of the resources to backup. If the source resources are located in an Amazon Web Services Region, specify <code>CLOUD</code>. If the source resources are located on an Outpost in your account, specify <code>OUTPOST</code>.</p>
    /// <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account.</p>
    pub fn set_resource_locations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceLocationValues>>,
    ) -> Self {
        self.resource_locations = input;
        self
    }
    /// Appends an item to `target_tags`.
    ///
    /// To override the contents of this collection use [`set_target_tags`](Self::set_target_tags).
    ///
    /// <p> <b>[Snapshot and AMI policies only]</b> The single tag that identifies targeted resources for this policy.</p>
    pub fn target_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.target_tags.unwrap_or_default();
        v.push(input);
        self.target_tags = Some(v);
        self
    }
    /// <p> <b>[Snapshot and AMI policies only]</b> The single tag that identifies targeted resources for this policy.</p>
    pub fn set_target_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.target_tags = input;
        self
    }
    /// Appends an item to `schedules`.
    ///
    /// To override the contents of this collection use [`set_schedules`](Self::set_schedules).
    ///
    /// <p> <b>[Snapshot and AMI policies only]</b> The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy can have up to four schedules—one mandatory schedule and up to three optional schedules.</p>
    pub fn schedules(mut self, input: crate::types::Schedule) -> Self {
        let mut v = self.schedules.unwrap_or_default();
        v.push(input);
        self.schedules = Some(v);
        self
    }
    /// <p> <b>[Snapshot and AMI policies only]</b> The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy can have up to four schedules—one mandatory schedule and up to three optional schedules.</p>
    pub fn set_schedules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Schedule>>,
    ) -> Self {
        self.schedules = input;
        self
    }
    /// <p> <b>[Snapshot and AMI policies only]</b> A set of optional parameters for snapshot and AMI lifecycle policies. </p> <note>
    /// <p>If you are modifying a policy that was created or previously modified using the Amazon Data Lifecycle Manager console, then you must include this parameter and specify either the default values or the new values that you require. You can't omit this parameter or set its values to null.</p>
    /// </note>
    pub fn parameters(mut self, input: crate::types::Parameters) -> Self {
        self.parameters = Some(input);
        self
    }
    /// <p> <b>[Snapshot and AMI policies only]</b> A set of optional parameters for snapshot and AMI lifecycle policies. </p> <note>
    /// <p>If you are modifying a policy that was created or previously modified using the Amazon Data Lifecycle Manager console, then you must include this parameter and specify either the default values or the new values that you require. You can't omit this parameter or set its values to null.</p>
    /// </note>
    pub fn set_parameters(mut self, input: std::option::Option<crate::types::Parameters>) -> Self {
        self.parameters = input;
        self
    }
    /// <p> <b>[Event-based policies only]</b> The event that activates the event-based policy.</p>
    pub fn event_source(mut self, input: crate::types::EventSource) -> Self {
        self.event_source = Some(input);
        self
    }
    /// <p> <b>[Event-based policies only]</b> The event that activates the event-based policy.</p>
    pub fn set_event_source(
        mut self,
        input: std::option::Option<crate::types::EventSource>,
    ) -> Self {
        self.event_source = input;
        self
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p> <b>[Event-based policies only]</b> The actions to be performed when the event-based policy is activated. You can specify only one action per policy.</p>
    pub fn actions(mut self, input: crate::types::Action) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = Some(v);
        self
    }
    /// <p> <b>[Event-based policies only]</b> The actions to be performed when the event-based policy is activated. You can specify only one action per policy.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Action>>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// Consumes the builder and constructs a [`PolicyDetails`](crate::types::PolicyDetails).
    pub fn build(self) -> crate::types::PolicyDetails {
        crate::types::PolicyDetails {
            policy_type: self.policy_type,
            resource_types: self.resource_types,
            resource_locations: self.resource_locations,
            target_tags: self.target_tags,
            schedules: self.schedules,
            parameters: self.parameters,
            event_source: self.event_source,
            actions: self.actions,
        }
    }
}
