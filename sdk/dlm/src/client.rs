// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Data Lifecycle Manager
///
/// Client for invoking operations on Amazon Data Lifecycle Manager. Each operation on Amazon Data Lifecycle Manager is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_dlm::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_dlm::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_dlm::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateLifecyclePolicy`](crate::client::fluent_builders::CreateLifecyclePolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`execution_role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateLifecyclePolicy::execution_role_arn) / [`set_execution_role_arn(Option<String>)`](crate::client::fluent_builders::CreateLifecyclePolicy::set_execution_role_arn): <p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateLifecyclePolicy::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateLifecyclePolicy::set_description): <p>A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.</p>
    ///   - [`state(SettablePolicyStateValues)`](crate::client::fluent_builders::CreateLifecyclePolicy::state) / [`set_state(Option<SettablePolicyStateValues>)`](crate::client::fluent_builders::CreateLifecyclePolicy::set_state): <p>The desired activation state of the lifecycle policy after creation.</p>
    ///   - [`policy_details(PolicyDetails)`](crate::client::fluent_builders::CreateLifecyclePolicy::policy_details) / [`set_policy_details(Option<PolicyDetails>)`](crate::client::fluent_builders::CreateLifecyclePolicy::set_policy_details): <p>The configuration details of the lifecycle policy.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateLifecyclePolicy::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateLifecyclePolicy::set_tags): <p>The tags to apply to the lifecycle policy during creation.</p>
    /// - On success, responds with [`CreateLifecyclePolicyOutput`](crate::output::CreateLifecyclePolicyOutput) with field(s):
    ///   - [`policy_id(Option<String>)`](crate::output::CreateLifecyclePolicyOutput::policy_id): <p>The identifier of the lifecycle policy.</p>
    /// - On failure, responds with [`SdkError<CreateLifecyclePolicyError>`](crate::error::CreateLifecyclePolicyError)
    pub fn create_lifecycle_policy(&self) -> crate::client::fluent_builders::CreateLifecyclePolicy {
        crate::client::fluent_builders::CreateLifecyclePolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLifecyclePolicy`](crate::client::fluent_builders::DeleteLifecyclePolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`policy_id(impl Into<String>)`](crate::client::fluent_builders::DeleteLifecyclePolicy::policy_id) / [`set_policy_id(Option<String>)`](crate::client::fluent_builders::DeleteLifecyclePolicy::set_policy_id): <p>The identifier of the lifecycle policy.</p>
    /// - On success, responds with [`DeleteLifecyclePolicyOutput`](crate::output::DeleteLifecyclePolicyOutput)

    /// - On failure, responds with [`SdkError<DeleteLifecyclePolicyError>`](crate::error::DeleteLifecyclePolicyError)
    pub fn delete_lifecycle_policy(&self) -> crate::client::fluent_builders::DeleteLifecyclePolicy {
        crate::client::fluent_builders::DeleteLifecyclePolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLifecyclePolicies`](crate::client::fluent_builders::GetLifecyclePolicies) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`policy_ids(Vec<String>)`](crate::client::fluent_builders::GetLifecyclePolicies::policy_ids) / [`set_policy_ids(Option<Vec<String>>)`](crate::client::fluent_builders::GetLifecyclePolicies::set_policy_ids): <p>The identifiers of the data lifecycle policies.</p>
    ///   - [`state(GettablePolicyStateValues)`](crate::client::fluent_builders::GetLifecyclePolicies::state) / [`set_state(Option<GettablePolicyStateValues>)`](crate::client::fluent_builders::GetLifecyclePolicies::set_state): <p>The activation state.</p>
    ///   - [`resource_types(Vec<ResourceTypeValues>)`](crate::client::fluent_builders::GetLifecyclePolicies::resource_types) / [`set_resource_types(Option<Vec<ResourceTypeValues>>)`](crate::client::fluent_builders::GetLifecyclePolicies::set_resource_types): <p>The resource type.</p>
    ///   - [`target_tags(Vec<String>)`](crate::client::fluent_builders::GetLifecyclePolicies::target_tags) / [`set_target_tags(Option<Vec<String>>)`](crate::client::fluent_builders::GetLifecyclePolicies::set_target_tags): <p>The target tag for a policy.</p>  <p>Tags are strings in the format <code>key=value</code>.</p>
    ///   - [`tags_to_add(Vec<String>)`](crate::client::fluent_builders::GetLifecyclePolicies::tags_to_add) / [`set_tags_to_add(Option<Vec<String>>)`](crate::client::fluent_builders::GetLifecyclePolicies::set_tags_to_add): <p>The tags to add to objects created by the policy.</p>  <p>Tags are strings in the format <code>key=value</code>.</p>  <p>These user-defined tags are added in addition to the Amazon Web Services-added lifecycle tags.</p>
    /// - On success, responds with [`GetLifecyclePoliciesOutput`](crate::output::GetLifecyclePoliciesOutput) with field(s):
    ///   - [`policies(Option<Vec<LifecyclePolicySummary>>)`](crate::output::GetLifecyclePoliciesOutput::policies): <p>Summary information about the lifecycle policies.</p>
    /// - On failure, responds with [`SdkError<GetLifecyclePoliciesError>`](crate::error::GetLifecyclePoliciesError)
    pub fn get_lifecycle_policies(&self) -> crate::client::fluent_builders::GetLifecyclePolicies {
        crate::client::fluent_builders::GetLifecyclePolicies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLifecyclePolicy`](crate::client::fluent_builders::GetLifecyclePolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`policy_id(impl Into<String>)`](crate::client::fluent_builders::GetLifecyclePolicy::policy_id) / [`set_policy_id(Option<String>)`](crate::client::fluent_builders::GetLifecyclePolicy::set_policy_id): <p>The identifier of the lifecycle policy.</p>
    /// - On success, responds with [`GetLifecyclePolicyOutput`](crate::output::GetLifecyclePolicyOutput) with field(s):
    ///   - [`policy(Option<LifecyclePolicy>)`](crate::output::GetLifecyclePolicyOutput::policy): <p>Detailed information about the lifecycle policy.</p>
    /// - On failure, responds with [`SdkError<GetLifecyclePolicyError>`](crate::error::GetLifecyclePolicyError)
    pub fn get_lifecycle_policy(&self) -> crate::client::fluent_builders::GetLifecyclePolicy {
        crate::client::fluent_builders::GetLifecyclePolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>Information about the tags.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>One or more tags.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The tag keys.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateLifecyclePolicy`](crate::client::fluent_builders::UpdateLifecyclePolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`policy_id(impl Into<String>)`](crate::client::fluent_builders::UpdateLifecyclePolicy::policy_id) / [`set_policy_id(Option<String>)`](crate::client::fluent_builders::UpdateLifecyclePolicy::set_policy_id): <p>The identifier of the lifecycle policy.</p>
    ///   - [`execution_role_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateLifecyclePolicy::execution_role_arn) / [`set_execution_role_arn(Option<String>)`](crate::client::fluent_builders::UpdateLifecyclePolicy::set_execution_role_arn): <p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.</p>
    ///   - [`state(SettablePolicyStateValues)`](crate::client::fluent_builders::UpdateLifecyclePolicy::state) / [`set_state(Option<SettablePolicyStateValues>)`](crate::client::fluent_builders::UpdateLifecyclePolicy::set_state): <p>The desired activation state of the lifecycle policy after creation.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateLifecyclePolicy::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateLifecyclePolicy::set_description): <p>A description of the lifecycle policy.</p>
    ///   - [`policy_details(PolicyDetails)`](crate::client::fluent_builders::UpdateLifecyclePolicy::policy_details) / [`set_policy_details(Option<PolicyDetails>)`](crate::client::fluent_builders::UpdateLifecyclePolicy::set_policy_details): <p>The configuration of the lifecycle policy. You cannot update the policy type or the resource type.</p>
    /// - On success, responds with [`UpdateLifecyclePolicyOutput`](crate::output::UpdateLifecyclePolicyOutput)

    /// - On failure, responds with [`SdkError<UpdateLifecyclePolicyError>`](crate::error::UpdateLifecyclePolicyError)
    pub fn update_lifecycle_policy(&self) -> crate::client::fluent_builders::UpdateLifecyclePolicy {
        crate::client::fluent_builders::UpdateLifecyclePolicy::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
