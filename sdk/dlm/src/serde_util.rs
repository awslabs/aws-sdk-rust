// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn event_source_correct_errors(mut builder: crate::types::builders::EventSourceBuilder) -> crate::types::builders::EventSourceBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EventSourceValues>().ok()
    }
    builder
}

pub(crate) fn action_correct_errors(mut builder: crate::types::builders::ActionBuilder) -> crate::types::builders::ActionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.cross_region_copy.is_none() {
        builder.cross_region_copy = Some(Default::default())
    }
    builder
}

pub(crate) fn event_parameters_correct_errors(
    mut builder: crate::types::builders::EventParametersBuilder,
) -> crate::types::builders::EventParametersBuilder {
    if builder.event_type.is_none() {
        builder.event_type = "no value was set".parse::<crate::types::EventTypeValues>().ok()
    }
    if builder.snapshot_owner.is_none() {
        builder.snapshot_owner = Some(Default::default())
    }
    if builder.description_regex.is_none() {
        builder.description_regex = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn archive_rule_correct_errors(mut builder: crate::types::builders::ArchiveRuleBuilder) -> crate::types::builders::ArchiveRuleBuilder {
    if builder.retain_rule.is_none() {
        builder.retain_rule = {
            let builder = crate::types::builders::ArchiveRetainRuleBuilder::default();
            Some(crate::serde_util::archive_retain_rule_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn fast_restore_rule_correct_errors(
    mut builder: crate::types::builders::FastRestoreRuleBuilder,
) -> crate::types::builders::FastRestoreRuleBuilder {
    if builder.availability_zones.is_none() {
        builder.availability_zones = Some(Default::default())
    }
    builder
}

pub(crate) fn archive_retain_rule_correct_errors(
    mut builder: crate::types::builders::ArchiveRetainRuleBuilder,
) -> crate::types::builders::ArchiveRetainRuleBuilder {
    if builder.retention_archive_tier.is_none() {
        builder.retention_archive_tier = {
            let builder = crate::types::builders::RetentionArchiveTierBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn cross_region_copy_action_correct_errors(
    mut builder: crate::types::builders::CrossRegionCopyActionBuilder,
) -> crate::types::builders::CrossRegionCopyActionBuilder {
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    if builder.encryption_configuration.is_none() {
        builder.encryption_configuration = {
            let builder = crate::types::builders::EncryptionConfigurationBuilder::default();
            Some(crate::serde_util::encryption_configuration_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn cross_region_copy_rule_correct_errors(
    mut builder: crate::types::builders::CrossRegionCopyRuleBuilder,
) -> crate::types::builders::CrossRegionCopyRuleBuilder {
    if builder.encrypted.is_none() {
        builder.encrypted = Some(Default::default())
    }
    builder
}

pub(crate) fn share_rule_correct_errors(mut builder: crate::types::builders::ShareRuleBuilder) -> crate::types::builders::ShareRuleBuilder {
    if builder.target_accounts.is_none() {
        builder.target_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_configuration_correct_errors(
    mut builder: crate::types::builders::EncryptionConfigurationBuilder,
) -> crate::types::builders::EncryptionConfigurationBuilder {
    if builder.encrypted.is_none() {
        builder.encrypted = Some(Default::default())
    }
    builder
}
