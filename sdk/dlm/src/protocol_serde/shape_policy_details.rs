// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_policy_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PolicyDetails,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.policy_type {
        object.key("PolicyType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_types {
        let mut array_3 = object.key("ResourceTypes").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.resource_locations {
        let mut array_6 = object.key("ResourceLocations").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.target_tags {
        let mut array_9 = object.key("TargetTags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.schedules {
        let mut array_13 = object.key("Schedules").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_schedule::ser_schedule(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_17 = object.key("Parameters").start_object();
        crate::protocol_serde::shape_parameters::ser_parameters(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.event_source {
        #[allow(unused_mut)]
        let mut object_19 = object.key("EventSource").start_object();
        crate::protocol_serde::shape_event_source::ser_event_source(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.actions {
        let mut array_21 = object.key("Actions").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_action::ser_action(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.policy_language {
        object.key("PolicyLanguage").string(var_24.as_str());
    }
    if let Some(var_25) = &input.resource_type {
        object.key("ResourceType").string(var_25.as_str());
    }
    if let Some(var_26) = &input.create_interval {
        object.key("CreateInterval").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_26).into()),
        );
    }
    if let Some(var_27) = &input.retain_interval {
        object.key("RetainInterval").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_27).into()),
        );
    }
    if let Some(var_28) = &input.copy_tags {
        object.key("CopyTags").boolean(*var_28);
    }
    if let Some(var_29) = &input.cross_region_copy_targets {
        let mut array_30 = object.key("CrossRegionCopyTargets").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_cross_region_copy_target::ser_cross_region_copy_target(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.extend_deletion {
        object.key("ExtendDeletion").boolean(*var_33);
    }
    if let Some(var_34) = &input.exclusions {
        #[allow(unused_mut)]
        let mut object_35 = object.key("Exclusions").start_object();
        crate::protocol_serde::shape_exclusions::ser_exclusions(&mut object_35, var_34)?;
        object_35.finish();
    }
    Ok(())
}

pub(crate) fn de_policy_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::PolicyDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PolicyDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "PolicyType" => {
                            builder = builder.set_policy_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PolicyTypeValues::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ResourceTypes" => {
                            builder = builder.set_resource_types(
                                crate::protocol_serde::shape_resource_type_values_list::de_resource_type_values_list(tokens)?,
                            );
                        }
                        "ResourceLocations" => {
                            builder = builder
                                .set_resource_locations(crate::protocol_serde::shape_resource_location_list::de_resource_location_list(tokens)?);
                        }
                        "TargetTags" => {
                            builder = builder.set_target_tags(crate::protocol_serde::shape_target_tag_list::de_target_tag_list(tokens)?);
                        }
                        "Schedules" => {
                            builder = builder.set_schedules(crate::protocol_serde::shape_schedule_list::de_schedule_list(tokens)?);
                        }
                        "Parameters" => {
                            builder = builder.set_parameters(crate::protocol_serde::shape_parameters::de_parameters(tokens)?);
                        }
                        "EventSource" => {
                            builder = builder.set_event_source(crate::protocol_serde::shape_event_source::de_event_source(tokens)?);
                        }
                        "Actions" => {
                            builder = builder.set_actions(crate::protocol_serde::shape_action_list::de_action_list(tokens)?);
                        }
                        "PolicyLanguage" => {
                            builder = builder.set_policy_language(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PolicyLanguageValues::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ResourceType" => {
                            builder = builder.set_resource_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ResourceTypeValues::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CreateInterval" => {
                            builder = builder.set_create_interval(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "RetainInterval" => {
                            builder = builder.set_retain_interval(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "CopyTags" => {
                            builder = builder.set_copy_tags(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "CrossRegionCopyTargets" => {
                            builder = builder.set_cross_region_copy_targets(
                                crate::protocol_serde::shape_cross_region_copy_target_list::de_cross_region_copy_target_list(tokens)?,
                            );
                        }
                        "ExtendDeletion" => {
                            builder = builder.set_extend_deletion(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Exclusions" => {
                            builder = builder.set_exclusions(crate::protocol_serde::shape_exclusions::de_exclusions(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
