// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_schedule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Schedule,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if input.copy_tags {
        object.key("CopyTags").boolean(input.copy_tags);
    }
    if let Some(var_2) = &input.tags_to_add {
        let mut array_3 = object.key("TagsToAdd").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.variable_tags {
        let mut array_7 = object.key("VariableTags").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.create_rule {
        #[allow(unused_mut)]
        let mut object_11 = object.key("CreateRule").start_object();
        crate::protocol_serde::shape_create_rule::ser_create_rule(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.retain_rule {
        #[allow(unused_mut)]
        let mut object_13 = object.key("RetainRule").start_object();
        crate::protocol_serde::shape_retain_rule::ser_retain_rule(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.fast_restore_rule {
        #[allow(unused_mut)]
        let mut object_15 = object.key("FastRestoreRule").start_object();
        crate::protocol_serde::shape_fast_restore_rule::ser_fast_restore_rule(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.cross_region_copy_rules {
        let mut array_17 = object.key("CrossRegionCopyRules").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_cross_region_copy_rule::ser_cross_region_copy_rule(
                    &mut object_19,
                    item_18,
                )?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.share_rules {
        let mut array_21 = object.key("ShareRules").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_share_rule::ser_share_rule(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.deprecate_rule {
        #[allow(unused_mut)]
        let mut object_25 = object.key("DeprecateRule").start_object();
        crate::protocol_serde::shape_deprecate_rule::ser_deprecate_rule(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.archive_rule {
        #[allow(unused_mut)]
        let mut object_27 = object.key("ArchiveRule").start_object();
        crate::protocol_serde::shape_archive_rule::ser_archive_rule(&mut object_27, var_26)?;
        object_27.finish();
    }
    Ok(())
}

pub(crate) fn de_schedule<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Schedule>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ScheduleBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Name" => {
                                builder = builder.set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CopyTags" => {
                                builder = builder.set_copy_tags(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "TagsToAdd" => {
                                builder = builder.set_tags_to_add(
                                    crate::protocol_serde::shape_tags_to_add_list::de_tags_to_add_list(tokens)?
                                );
                            }
                            "VariableTags" => {
                                builder = builder.set_variable_tags(
                                    crate::protocol_serde::shape_variable_tags_list::de_variable_tags_list(tokens)?
                                );
                            }
                            "CreateRule" => {
                                builder = builder.set_create_rule(
                                    crate::protocol_serde::shape_create_rule::de_create_rule(
                                        tokens,
                                    )?,
                                );
                            }
                            "RetainRule" => {
                                builder = builder.set_retain_rule(
                                    crate::protocol_serde::shape_retain_rule::de_retain_rule(
                                        tokens,
                                    )?,
                                );
                            }
                            "FastRestoreRule" => {
                                builder = builder.set_fast_restore_rule(
                                    crate::protocol_serde::shape_fast_restore_rule::de_fast_restore_rule(tokens)?
                                );
                            }
                            "CrossRegionCopyRules" => {
                                builder = builder.set_cross_region_copy_rules(
                                    crate::protocol_serde::shape_cross_region_copy_rules::de_cross_region_copy_rules(tokens)?
                                );
                            }
                            "ShareRules" => {
                                builder = builder.set_share_rules(
                                    crate::protocol_serde::shape_share_rules::de_share_rules(
                                        tokens,
                                    )?,
                                );
                            }
                            "DeprecateRule" => {
                                builder = builder.set_deprecate_rule(
                                    crate::protocol_serde::shape_deprecate_rule::de_deprecate_rule(
                                        tokens,
                                    )?,
                                );
                            }
                            "ArchiveRule" => {
                                builder = builder.set_archive_rule(
                                    crate::protocol_serde::shape_archive_rule::de_archive_rule(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
