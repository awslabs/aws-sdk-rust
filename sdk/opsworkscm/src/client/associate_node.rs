// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AssociateNode`](crate::operation::associate_node::builders::AssociateNodeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_name(impl Into<String>)`](crate::operation::associate_node::builders::AssociateNodeFluentBuilder::server_name) / [`set_server_name(Option<String>)`](crate::operation::associate_node::builders::AssociateNodeFluentBuilder::set_server_name):<br>required: **true**<br><p>The name of the server with which to associate the node. </p><br>
    ///   - [`node_name(impl Into<String>)`](crate::operation::associate_node::builders::AssociateNodeFluentBuilder::node_name) / [`set_node_name(Option<String>)`](crate::operation::associate_node::builders::AssociateNodeFluentBuilder::set_node_name):<br>required: **true**<br><p>The name of the node. </p><br>
    ///   - [`engine_attributes(EngineAttribute)`](crate::operation::associate_node::builders::AssociateNodeFluentBuilder::engine_attributes) / [`set_engine_attributes(Option<Vec::<EngineAttribute>>)`](crate::operation::associate_node::builders::AssociateNodeFluentBuilder::set_engine_attributes):<br>required: **true**<br><p>Engine attributes used for associating the node. </p>  <p class="title"> <b>Attributes accepted in a AssociateNode request for Chef</b> </p>  <ul>   <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node is associated. By default only one organization named <code>default</code> can exist. </p> </li>   <li> <p> <code>CHEF_NODE_PUBLIC_KEY</code>: A PEM-formatted public key. This key is required for the <code>chef-client</code> agent to access the Chef API. </p> </li>  </ul>  <p class="title"> <b>Attributes accepted in a AssociateNode request for Puppet</b> </p>  <ul>   <li> <p> <code>PUPPET_NODE_CSR</code>: A PEM-formatted certificate-signing request (CSR) that is created by the node. </p> </li>  </ul><br>
    /// - On success, responds with [`AssociateNodeOutput`](crate::operation::associate_node::AssociateNodeOutput) with field(s):
    ///   - [`node_association_status_token(Option<String>)`](crate::operation::associate_node::AssociateNodeOutput::node_association_status_token): <p>Contains a token which can be passed to the <code>DescribeNodeAssociationStatus</code> API call to get the status of the association request. </p>
    /// - On failure, responds with [`SdkError<AssociateNodeError>`](crate::operation::associate_node::AssociateNodeError)
    pub fn associate_node(&self) -> crate::operation::associate_node::builders::AssociateNodeFluentBuilder {
        crate::operation::associate_node::builders::AssociateNodeFluentBuilder::new(self.handle.clone())
    }
}
