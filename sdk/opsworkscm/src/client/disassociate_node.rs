// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DisassociateNode`](crate::client::fluent_builders::DisassociateNode) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::DisassociateNode::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::DisassociateNode::set_server_name): <p>The name of the server from which to disassociate the node. </p>
    ///   - [`node_name(impl Into<String>)`](crate::client::fluent_builders::DisassociateNode::node_name) / [`set_node_name(Option<String>)`](crate::client::fluent_builders::DisassociateNode::set_node_name): <p>The name of the client node. </p>
    ///   - [`engine_attributes(Vec<EngineAttribute>)`](crate::client::fluent_builders::DisassociateNode::engine_attributes) / [`set_engine_attributes(Option<Vec<EngineAttribute>>)`](crate::client::fluent_builders::DisassociateNode::set_engine_attributes): <p>Engine attributes that are used for disassociating the node. No attributes are required for Puppet. </p>  <p class="title"> <b>Attributes required in a DisassociateNode request for Chef</b> </p>  <ul>   <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node was associated. By default only one organization named <code>default</code> can exist. </p> </li>  </ul>
    /// - On success, responds with [`DisassociateNodeOutput`](crate::output::DisassociateNodeOutput) with field(s):
    ///   - [`node_association_status_token(Option<String>)`](crate::output::DisassociateNodeOutput::node_association_status_token): <p>Contains a token which can be passed to the <code>DescribeNodeAssociationStatus</code> API call to get the status of the disassociation request. </p>
    /// - On failure, responds with [`SdkError<DisassociateNodeError>`](crate::error::DisassociateNodeError)
    pub fn disassociate_node(&self) -> crate::client::fluent_builders::DisassociateNode {
        crate::client::fluent_builders::DisassociateNode::new(self.handle.clone())
    }
}
