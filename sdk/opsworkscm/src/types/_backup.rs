// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a single backup. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Backup {
    /// <p>The ARN of the backup. </p>
    #[doc(hidden)]
    pub backup_arn: std::option::Option<std::string::String>,
    /// <p> The generated ID of the backup. Example: <code>myServerName-yyyyMMddHHmmssSSS</code> </p>
    #[doc(hidden)]
    pub backup_id: std::option::Option<std::string::String>,
    /// <p> The backup type. Valid values are <code>automated</code> or <code>manual</code>. </p>
    #[doc(hidden)]
    pub backup_type: std::option::Option<crate::types::BackupType>,
    /// <p> The time stamp when the backup was created in the database. Example: <code>2016-07-29T13:38:47.520Z</code> </p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> A user-provided description for a manual backup. This field is empty for automated backups. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p> The engine type that is obtained from the server when the backup is created. </p>
    #[doc(hidden)]
    pub engine: std::option::Option<std::string::String>,
    /// <p> The engine model that is obtained from the server when the backup is created. </p>
    #[doc(hidden)]
    pub engine_model: std::option::Option<std::string::String>,
    /// <p> The engine version that is obtained from the server when the backup is created. </p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p> The EC2 instance profile ARN that is obtained from the server when the backup is created. Because this value is stored, you are not required to provide the InstanceProfileArn again if you restore a backup. </p>
    #[doc(hidden)]
    pub instance_profile_arn: std::option::Option<std::string::String>,
    /// <p> The instance type that is obtained from the server when the backup is created. </p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p> The key pair that is obtained from the server when the backup is created. </p>
    #[doc(hidden)]
    pub key_pair: std::option::Option<std::string::String>,
    /// <p> The preferred backup period that is obtained from the server when the backup is created. </p>
    #[doc(hidden)]
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p> The preferred maintenance period that is obtained from the server when the backup is created. </p>
    #[doc(hidden)]
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p> This field is deprecated and is no longer used. </p>
    #[deprecated]
    #[doc(hidden)]
    pub s3_data_size: std::option::Option<i32>,
    /// <p> This field is deprecated and is no longer used. </p>
    #[deprecated]
    #[doc(hidden)]
    pub s3_data_url: std::option::Option<std::string::String>,
    /// <p> The Amazon S3 URL of the backup's log file. </p>
    #[doc(hidden)]
    pub s3_log_url: std::option::Option<std::string::String>,
    /// <p> The security group IDs that are obtained from the server when the backup is created. </p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> The name of the server from which the backup was made. </p>
    #[doc(hidden)]
    pub server_name: std::option::Option<std::string::String>,
    /// <p> The service role ARN that is obtained from the server when the backup is created. </p>
    #[doc(hidden)]
    pub service_role_arn: std::option::Option<std::string::String>,
    /// <p>The status of a backup while in progress. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::BackupStatus>,
    /// <p> An informational message about backup status. </p>
    #[doc(hidden)]
    pub status_description: std::option::Option<std::string::String>,
    /// <p> The subnet IDs that are obtained from the server when the backup is created. </p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> The version of AWS OpsWorks CM-specific tools that is obtained from the server when the backup is created. </p>
    #[doc(hidden)]
    pub tools_version: std::option::Option<std::string::String>,
    /// <p> The IAM user ARN of the requester for manual backups. This field is empty for automated backups. </p>
    #[doc(hidden)]
    pub user_arn: std::option::Option<std::string::String>,
}
impl Backup {
    /// <p>The ARN of the backup. </p>
    pub fn backup_arn(&self) -> std::option::Option<&str> {
        self.backup_arn.as_deref()
    }
    /// <p> The generated ID of the backup. Example: <code>myServerName-yyyyMMddHHmmssSSS</code> </p>
    pub fn backup_id(&self) -> std::option::Option<&str> {
        self.backup_id.as_deref()
    }
    /// <p> The backup type. Valid values are <code>automated</code> or <code>manual</code>. </p>
    pub fn backup_type(&self) -> std::option::Option<&crate::types::BackupType> {
        self.backup_type.as_ref()
    }
    /// <p> The time stamp when the backup was created in the database. Example: <code>2016-07-29T13:38:47.520Z</code> </p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p> A user-provided description for a manual backup. This field is empty for automated backups. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The engine type that is obtained from the server when the backup is created. </p>
    pub fn engine(&self) -> std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p> The engine model that is obtained from the server when the backup is created. </p>
    pub fn engine_model(&self) -> std::option::Option<&str> {
        self.engine_model.as_deref()
    }
    /// <p> The engine version that is obtained from the server when the backup is created. </p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p> The EC2 instance profile ARN that is obtained from the server when the backup is created. Because this value is stored, you are not required to provide the InstanceProfileArn again if you restore a backup. </p>
    pub fn instance_profile_arn(&self) -> std::option::Option<&str> {
        self.instance_profile_arn.as_deref()
    }
    /// <p> The instance type that is obtained from the server when the backup is created. </p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p> The key pair that is obtained from the server when the backup is created. </p>
    pub fn key_pair(&self) -> std::option::Option<&str> {
        self.key_pair.as_deref()
    }
    /// <p> The preferred backup period that is obtained from the server when the backup is created. </p>
    pub fn preferred_backup_window(&self) -> std::option::Option<&str> {
        self.preferred_backup_window.as_deref()
    }
    /// <p> The preferred maintenance period that is obtained from the server when the backup is created. </p>
    pub fn preferred_maintenance_window(&self) -> std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p> This field is deprecated and is no longer used. </p>
    #[deprecated]
    pub fn s3_data_size(&self) -> std::option::Option<i32> {
        self.s3_data_size
    }
    /// <p> This field is deprecated and is no longer used. </p>
    #[deprecated]
    pub fn s3_data_url(&self) -> std::option::Option<&str> {
        self.s3_data_url.as_deref()
    }
    /// <p> The Amazon S3 URL of the backup's log file. </p>
    pub fn s3_log_url(&self) -> std::option::Option<&str> {
        self.s3_log_url.as_deref()
    }
    /// <p> The security group IDs that are obtained from the server when the backup is created. </p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p> The name of the server from which the backup was made. </p>
    pub fn server_name(&self) -> std::option::Option<&str> {
        self.server_name.as_deref()
    }
    /// <p> The service role ARN that is obtained from the server when the backup is created. </p>
    pub fn service_role_arn(&self) -> std::option::Option<&str> {
        self.service_role_arn.as_deref()
    }
    /// <p>The status of a backup while in progress. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::BackupStatus> {
        self.status.as_ref()
    }
    /// <p> An informational message about backup status. </p>
    pub fn status_description(&self) -> std::option::Option<&str> {
        self.status_description.as_deref()
    }
    /// <p> The subnet IDs that are obtained from the server when the backup is created. </p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p> The version of AWS OpsWorks CM-specific tools that is obtained from the server when the backup is created. </p>
    pub fn tools_version(&self) -> std::option::Option<&str> {
        self.tools_version.as_deref()
    }
    /// <p> The IAM user ARN of the requester for manual backups. This field is empty for automated backups. </p>
    pub fn user_arn(&self) -> std::option::Option<&str> {
        self.user_arn.as_deref()
    }
}
impl Backup {
    /// Creates a new builder-style object to manufacture [`Backup`](crate::types::Backup).
    pub fn builder() -> crate::types::builders::BackupBuilder {
        crate::types::builders::BackupBuilder::default()
    }
}

/// A builder for [`Backup`](crate::types::Backup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BackupBuilder {
    pub(crate) backup_arn: std::option::Option<std::string::String>,
    pub(crate) backup_id: std::option::Option<std::string::String>,
    pub(crate) backup_type: std::option::Option<crate::types::BackupType>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) engine: std::option::Option<std::string::String>,
    pub(crate) engine_model: std::option::Option<std::string::String>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) instance_profile_arn: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) key_pair: std::option::Option<std::string::String>,
    pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
    pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
    pub(crate) s3_data_size: std::option::Option<i32>,
    pub(crate) s3_data_url: std::option::Option<std::string::String>,
    pub(crate) s3_log_url: std::option::Option<std::string::String>,
    pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) server_name: std::option::Option<std::string::String>,
    pub(crate) service_role_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::BackupStatus>,
    pub(crate) status_description: std::option::Option<std::string::String>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tools_version: std::option::Option<std::string::String>,
    pub(crate) user_arn: std::option::Option<std::string::String>,
}
impl BackupBuilder {
    /// <p>The ARN of the backup. </p>
    pub fn backup_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.backup_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the backup. </p>
    pub fn set_backup_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.backup_arn = input;
        self
    }
    /// <p> The generated ID of the backup. Example: <code>myServerName-yyyyMMddHHmmssSSS</code> </p>
    pub fn backup_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.backup_id = Some(input.into());
        self
    }
    /// <p> The generated ID of the backup. Example: <code>myServerName-yyyyMMddHHmmssSSS</code> </p>
    pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.backup_id = input;
        self
    }
    /// <p> The backup type. Valid values are <code>automated</code> or <code>manual</code>. </p>
    pub fn backup_type(mut self, input: crate::types::BackupType) -> Self {
        self.backup_type = Some(input);
        self
    }
    /// <p> The backup type. Valid values are <code>automated</code> or <code>manual</code>. </p>
    pub fn set_backup_type(mut self, input: std::option::Option<crate::types::BackupType>) -> Self {
        self.backup_type = input;
        self
    }
    /// <p> The time stamp when the backup was created in the database. Example: <code>2016-07-29T13:38:47.520Z</code> </p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p> The time stamp when the backup was created in the database. Example: <code>2016-07-29T13:38:47.520Z</code> </p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p> A user-provided description for a manual backup. This field is empty for automated backups. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p> A user-provided description for a manual backup. This field is empty for automated backups. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The engine type that is obtained from the server when the backup is created. </p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine = Some(input.into());
        self
    }
    /// <p> The engine type that is obtained from the server when the backup is created. </p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p> The engine model that is obtained from the server when the backup is created. </p>
    pub fn engine_model(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_model = Some(input.into());
        self
    }
    /// <p> The engine model that is obtained from the server when the backup is created. </p>
    pub fn set_engine_model(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_model = input;
        self
    }
    /// <p> The engine version that is obtained from the server when the backup is created. </p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p> The engine version that is obtained from the server when the backup is created. </p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p> The EC2 instance profile ARN that is obtained from the server when the backup is created. Because this value is stored, you are not required to provide the InstanceProfileArn again if you restore a backup. </p>
    pub fn instance_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_profile_arn = Some(input.into());
        self
    }
    /// <p> The EC2 instance profile ARN that is obtained from the server when the backup is created. Because this value is stored, you are not required to provide the InstanceProfileArn again if you restore a backup. </p>
    pub fn set_instance_profile_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.instance_profile_arn = input;
        self
    }
    /// <p> The instance type that is obtained from the server when the backup is created. </p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p> The instance type that is obtained from the server when the backup is created. </p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p> The key pair that is obtained from the server when the backup is created. </p>
    pub fn key_pair(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_pair = Some(input.into());
        self
    }
    /// <p> The key pair that is obtained from the server when the backup is created. </p>
    pub fn set_key_pair(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_pair = input;
        self
    }
    /// <p> The preferred backup period that is obtained from the server when the backup is created. </p>
    pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_backup_window = Some(input.into());
        self
    }
    /// <p> The preferred backup period that is obtained from the server when the backup is created. </p>
    pub fn set_preferred_backup_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_backup_window = input;
        self
    }
    /// <p> The preferred maintenance period that is obtained from the server when the backup is created. </p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_maintenance_window = Some(input.into());
        self
    }
    /// <p> The preferred maintenance period that is obtained from the server when the backup is created. </p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p> This field is deprecated and is no longer used. </p>
    #[deprecated]
    pub fn s3_data_size(mut self, input: i32) -> Self {
        self.s3_data_size = Some(input);
        self
    }
    /// <p> This field is deprecated and is no longer used. </p>
    #[deprecated]
    pub fn set_s3_data_size(mut self, input: std::option::Option<i32>) -> Self {
        self.s3_data_size = input;
        self
    }
    /// <p> This field is deprecated and is no longer used. </p>
    #[deprecated]
    pub fn s3_data_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_data_url = Some(input.into());
        self
    }
    /// <p> This field is deprecated and is no longer used. </p>
    #[deprecated]
    pub fn set_s3_data_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_data_url = input;
        self
    }
    /// <p> The Amazon S3 URL of the backup's log file. </p>
    pub fn s3_log_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_log_url = Some(input.into());
        self
    }
    /// <p> The Amazon S3 URL of the backup's log file. </p>
    pub fn set_s3_log_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_log_url = input;
        self
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p> The security group IDs that are obtained from the server when the backup is created. </p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = Some(v);
        self
    }
    /// <p> The security group IDs that are obtained from the server when the backup is created. </p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p> The name of the server from which the backup was made. </p>
    pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_name = Some(input.into());
        self
    }
    /// <p> The name of the server from which the backup was made. </p>
    pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_name = input;
        self
    }
    /// <p> The service role ARN that is obtained from the server when the backup is created. </p>
    pub fn service_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_role_arn = Some(input.into());
        self
    }
    /// <p> The service role ARN that is obtained from the server when the backup is created. </p>
    pub fn set_service_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_role_arn = input;
        self
    }
    /// <p>The status of a backup while in progress. </p>
    pub fn status(mut self, input: crate::types::BackupStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of a backup while in progress. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::BackupStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> An informational message about backup status. </p>
    pub fn status_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_description = Some(input.into());
        self
    }
    /// <p> An informational message about backup status. </p>
    pub fn set_status_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.status_description = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p> The subnet IDs that are obtained from the server when the backup is created. </p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p> The subnet IDs that are obtained from the server when the backup is created. </p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p> The version of AWS OpsWorks CM-specific tools that is obtained from the server when the backup is created. </p>
    pub fn tools_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.tools_version = Some(input.into());
        self
    }
    /// <p> The version of AWS OpsWorks CM-specific tools that is obtained from the server when the backup is created. </p>
    pub fn set_tools_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tools_version = input;
        self
    }
    /// <p> The IAM user ARN of the requester for manual backups. This field is empty for automated backups. </p>
    pub fn user_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_arn = Some(input.into());
        self
    }
    /// <p> The IAM user ARN of the requester for manual backups. This field is empty for automated backups. </p>
    pub fn set_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`Backup`](crate::types::Backup).
    pub fn build(self) -> crate::types::Backup {
        crate::types::Backup {
            backup_arn: self.backup_arn,
            backup_id: self.backup_id,
            backup_type: self.backup_type,
            created_at: self.created_at,
            description: self.description,
            engine: self.engine,
            engine_model: self.engine_model,
            engine_version: self.engine_version,
            instance_profile_arn: self.instance_profile_arn,
            instance_type: self.instance_type,
            key_pair: self.key_pair,
            preferred_backup_window: self.preferred_backup_window,
            preferred_maintenance_window: self.preferred_maintenance_window,
            s3_data_size: self.s3_data_size,
            s3_data_url: self.s3_data_url,
            s3_log_url: self.s3_log_url,
            security_group_ids: self.security_group_ids,
            server_name: self.server_name,
            service_role_arn: self.service_role_arn,
            status: self.status,
            status_description: self.status_description,
            subnet_ids: self.subnet_ids,
            tools_version: self.tools_version,
            user_arn: self.user_arn,
        }
    }
}
