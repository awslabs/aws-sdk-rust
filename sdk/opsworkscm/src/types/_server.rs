// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a configuration management server. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Server {
    /// <p>Associate a public IP address with a server that you are launching. </p>
    #[doc(hidden)]
    pub associate_public_ip_address: std::option::Option<bool>,
    /// <p>The number of automated backups to keep. </p>
    #[doc(hidden)]
    pub backup_retention_count: std::option::Option<i32>,
    /// <p>The name of the server. </p>
    #[doc(hidden)]
    pub server_name: std::option::Option<std::string::String>,
    /// <p>Time stamp of server creation. Example <code>2016-07-29T13:38:47.520Z</code> </p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ARN of the CloudFormation stack that was used to create the server. </p>
    #[doc(hidden)]
    pub cloud_formation_stack_arn: std::option::Option<std::string::String>,
    /// <p>An optional public endpoint of a server, such as <code>https://aws.my-company.com</code>. You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified.</p>
    #[doc(hidden)]
    pub custom_domain: std::option::Option<std::string::String>,
    /// <p>Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount. </p>
    #[doc(hidden)]
    pub disable_automated_backup: std::option::Option<bool>,
    /// <p> A DNS name that can be used to access the engine. Example: <code>myserver-asdfghjkl.us-east-1.opsworks.io</code>. You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified. </p>
    #[doc(hidden)]
    pub endpoint: std::option::Option<std::string::String>,
    /// <p>The engine type of the server. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>. </p>
    #[doc(hidden)]
    pub engine: std::option::Option<std::string::String>,
    /// <p>The engine model of the server. Valid values in this release include <code>Monolithic</code> for Puppet and <code>Single</code> for Chef. </p>
    #[doc(hidden)]
    pub engine_model: std::option::Option<std::string::String>,
    /// <p>The response of a createServer() request returns the master credential to access the server in EngineAttributes. These credentials are not stored by AWS OpsWorks CM; they are returned only as part of the result of createServer(). </p>
    /// <p class="title"> <b>Attributes returned in a createServer response for Chef</b> </p>
    /// <ul>
    /// <li> <p> <code>CHEF_AUTOMATE_PIVOTAL_KEY</code>: A base64-encoded RSA private key that is generated by AWS OpsWorks for Chef Automate. This private key is required to access the Chef API.</p> </li>
    /// <li> <p> <code>CHEF_STARTER_KIT</code>: A base64-encoded ZIP file. The ZIP file contains a Chef starter kit, which includes a README, a configuration file, and the required RSA private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents. From this directory, you can run Knife commands.</p> </li>
    /// </ul>
    /// <p class="title"> <b>Attributes returned in a createServer response for Puppet</b> </p>
    /// <ul>
    /// <li> <p> <code>PUPPET_STARTER_KIT</code>: A base64-encoded ZIP file. The ZIP file contains a Puppet starter kit, including a README and a required private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents.</p> </li>
    /// <li> <p> <code>PUPPET_ADMIN_PASSWORD</code>: An administrator password that you can use to sign in to the Puppet Enterprise console after the server is online.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub engine_attributes: std::option::Option<std::vec::Vec<crate::types::EngineAttribute>>,
    /// <p>The engine version of the server. For a Chef server, the valid value for EngineVersion is currently <code>2</code>. For a Puppet server, specify either <code>2019</code> or <code>2017</code>. </p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The instance profile ARN of the server. </p>
    #[doc(hidden)]
    pub instance_profile_arn: std::option::Option<std::string::String>,
    /// <p> The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console. </p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The key pair associated with the server. </p>
    #[doc(hidden)]
    pub key_pair: std::option::Option<std::string::String>,
    /// <p>The status of the most recent server maintenance run. Shows <code>SUCCESS</code> or <code>FAILED</code>. </p>
    #[doc(hidden)]
    pub maintenance_status: std::option::Option<crate::types::MaintenanceStatus>,
    /// <p>The preferred maintenance period specified for the server. </p>
    #[doc(hidden)]
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>The preferred backup period specified for the server. </p>
    #[doc(hidden)]
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p> The security group IDs for the server, as specified in the CloudFormation stack. These might not be the same security groups that are shown in the EC2 console. </p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The service role ARN used to create the server. </p>
    #[doc(hidden)]
    pub service_role_arn: std::option::Option<std::string::String>,
    /// <p> The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server, as well as the server's health state. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ServerStatus>,
    /// <p> Depending on the server status, this field has either a human-readable message (such as a create or backup error), or an escaped block of JSON (used for health check results). </p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p> The subnet IDs specified in a CreateServer request. </p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The ARN of the server. </p>
    #[doc(hidden)]
    pub server_arn: std::option::Option<std::string::String>,
}
impl Server {
    /// <p>Associate a public IP address with a server that you are launching. </p>
    pub fn associate_public_ip_address(&self) -> std::option::Option<bool> {
        self.associate_public_ip_address
    }
    /// <p>The number of automated backups to keep. </p>
    pub fn backup_retention_count(&self) -> std::option::Option<i32> {
        self.backup_retention_count
    }
    /// <p>The name of the server. </p>
    pub fn server_name(&self) -> std::option::Option<&str> {
        self.server_name.as_deref()
    }
    /// <p>Time stamp of server creation. Example <code>2016-07-29T13:38:47.520Z</code> </p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The ARN of the CloudFormation stack that was used to create the server. </p>
    pub fn cloud_formation_stack_arn(&self) -> std::option::Option<&str> {
        self.cloud_formation_stack_arn.as_deref()
    }
    /// <p>An optional public endpoint of a server, such as <code>https://aws.my-company.com</code>. You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified.</p>
    pub fn custom_domain(&self) -> std::option::Option<&str> {
        self.custom_domain.as_deref()
    }
    /// <p>Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount. </p>
    pub fn disable_automated_backup(&self) -> std::option::Option<bool> {
        self.disable_automated_backup
    }
    /// <p> A DNS name that can be used to access the engine. Example: <code>myserver-asdfghjkl.us-east-1.opsworks.io</code>. You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified. </p>
    pub fn endpoint(&self) -> std::option::Option<&str> {
        self.endpoint.as_deref()
    }
    /// <p>The engine type of the server. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>. </p>
    pub fn engine(&self) -> std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The engine model of the server. Valid values in this release include <code>Monolithic</code> for Puppet and <code>Single</code> for Chef. </p>
    pub fn engine_model(&self) -> std::option::Option<&str> {
        self.engine_model.as_deref()
    }
    /// <p>The response of a createServer() request returns the master credential to access the server in EngineAttributes. These credentials are not stored by AWS OpsWorks CM; they are returned only as part of the result of createServer(). </p>
    /// <p class="title"> <b>Attributes returned in a createServer response for Chef</b> </p>
    /// <ul>
    /// <li> <p> <code>CHEF_AUTOMATE_PIVOTAL_KEY</code>: A base64-encoded RSA private key that is generated by AWS OpsWorks for Chef Automate. This private key is required to access the Chef API.</p> </li>
    /// <li> <p> <code>CHEF_STARTER_KIT</code>: A base64-encoded ZIP file. The ZIP file contains a Chef starter kit, which includes a README, a configuration file, and the required RSA private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents. From this directory, you can run Knife commands.</p> </li>
    /// </ul>
    /// <p class="title"> <b>Attributes returned in a createServer response for Puppet</b> </p>
    /// <ul>
    /// <li> <p> <code>PUPPET_STARTER_KIT</code>: A base64-encoded ZIP file. The ZIP file contains a Puppet starter kit, including a README and a required private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents.</p> </li>
    /// <li> <p> <code>PUPPET_ADMIN_PASSWORD</code>: An administrator password that you can use to sign in to the Puppet Enterprise console after the server is online.</p> </li>
    /// </ul>
    pub fn engine_attributes(&self) -> std::option::Option<&[crate::types::EngineAttribute]> {
        self.engine_attributes.as_deref()
    }
    /// <p>The engine version of the server. For a Chef server, the valid value for EngineVersion is currently <code>2</code>. For a Puppet server, specify either <code>2019</code> or <code>2017</code>. </p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The instance profile ARN of the server. </p>
    pub fn instance_profile_arn(&self) -> std::option::Option<&str> {
        self.instance_profile_arn.as_deref()
    }
    /// <p> The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console. </p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The key pair associated with the server. </p>
    pub fn key_pair(&self) -> std::option::Option<&str> {
        self.key_pair.as_deref()
    }
    /// <p>The status of the most recent server maintenance run. Shows <code>SUCCESS</code> or <code>FAILED</code>. </p>
    pub fn maintenance_status(&self) -> std::option::Option<&crate::types::MaintenanceStatus> {
        self.maintenance_status.as_ref()
    }
    /// <p>The preferred maintenance period specified for the server. </p>
    pub fn preferred_maintenance_window(&self) -> std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>The preferred backup period specified for the server. </p>
    pub fn preferred_backup_window(&self) -> std::option::Option<&str> {
        self.preferred_backup_window.as_deref()
    }
    /// <p> The security group IDs for the server, as specified in the CloudFormation stack. These might not be the same security groups that are shown in the EC2 console. </p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p>The service role ARN used to create the server. </p>
    pub fn service_role_arn(&self) -> std::option::Option<&str> {
        self.service_role_arn.as_deref()
    }
    /// <p> The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server, as well as the server's health state. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::ServerStatus> {
        self.status.as_ref()
    }
    /// <p> Depending on the server status, this field has either a human-readable message (such as a create or backup error), or an escaped block of JSON (used for health check results). </p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p> The subnet IDs specified in a CreateServer request. </p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>The ARN of the server. </p>
    pub fn server_arn(&self) -> std::option::Option<&str> {
        self.server_arn.as_deref()
    }
}
impl Server {
    /// Creates a new builder-style object to manufacture [`Server`](crate::types::Server).
    pub fn builder() -> crate::types::builders::ServerBuilder {
        crate::types::builders::ServerBuilder::default()
    }
}

/// A builder for [`Server`](crate::types::Server).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServerBuilder {
    pub(crate) associate_public_ip_address: std::option::Option<bool>,
    pub(crate) backup_retention_count: std::option::Option<i32>,
    pub(crate) server_name: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) cloud_formation_stack_arn: std::option::Option<std::string::String>,
    pub(crate) custom_domain: std::option::Option<std::string::String>,
    pub(crate) disable_automated_backup: std::option::Option<bool>,
    pub(crate) endpoint: std::option::Option<std::string::String>,
    pub(crate) engine: std::option::Option<std::string::String>,
    pub(crate) engine_model: std::option::Option<std::string::String>,
    pub(crate) engine_attributes: std::option::Option<std::vec::Vec<crate::types::EngineAttribute>>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) instance_profile_arn: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) key_pair: std::option::Option<std::string::String>,
    pub(crate) maintenance_status: std::option::Option<crate::types::MaintenanceStatus>,
    pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
    pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
    pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) service_role_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ServerStatus>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) server_arn: std::option::Option<std::string::String>,
}
impl ServerBuilder {
    /// <p>Associate a public IP address with a server that you are launching. </p>
    pub fn associate_public_ip_address(mut self, input: bool) -> Self {
        self.associate_public_ip_address = Some(input);
        self
    }
    /// <p>Associate a public IP address with a server that you are launching. </p>
    pub fn set_associate_public_ip_address(mut self, input: std::option::Option<bool>) -> Self {
        self.associate_public_ip_address = input;
        self
    }
    /// <p>The number of automated backups to keep. </p>
    pub fn backup_retention_count(mut self, input: i32) -> Self {
        self.backup_retention_count = Some(input);
        self
    }
    /// <p>The number of automated backups to keep. </p>
    pub fn set_backup_retention_count(mut self, input: std::option::Option<i32>) -> Self {
        self.backup_retention_count = input;
        self
    }
    /// <p>The name of the server. </p>
    pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_name = Some(input.into());
        self
    }
    /// <p>The name of the server. </p>
    pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_name = input;
        self
    }
    /// <p>Time stamp of server creation. Example <code>2016-07-29T13:38:47.520Z</code> </p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>Time stamp of server creation. Example <code>2016-07-29T13:38:47.520Z</code> </p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The ARN of the CloudFormation stack that was used to create the server. </p>
    pub fn cloud_formation_stack_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.cloud_formation_stack_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the CloudFormation stack that was used to create the server. </p>
    pub fn set_cloud_formation_stack_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cloud_formation_stack_arn = input;
        self
    }
    /// <p>An optional public endpoint of a server, such as <code>https://aws.my-company.com</code>. You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified.</p>
    pub fn custom_domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_domain = Some(input.into());
        self
    }
    /// <p>An optional public endpoint of a server, such as <code>https://aws.my-company.com</code>. You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified.</p>
    pub fn set_custom_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.custom_domain = input;
        self
    }
    /// <p>Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount. </p>
    pub fn disable_automated_backup(mut self, input: bool) -> Self {
        self.disable_automated_backup = Some(input);
        self
    }
    /// <p>Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount. </p>
    pub fn set_disable_automated_backup(mut self, input: std::option::Option<bool>) -> Self {
        self.disable_automated_backup = input;
        self
    }
    /// <p> A DNS name that can be used to access the engine. Example: <code>myserver-asdfghjkl.us-east-1.opsworks.io</code>. You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified. </p>
    pub fn endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint = Some(input.into());
        self
    }
    /// <p> A DNS name that can be used to access the engine. Example: <code>myserver-asdfghjkl.us-east-1.opsworks.io</code>. You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified. </p>
    pub fn set_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The engine type of the server. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>. </p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine = Some(input.into());
        self
    }
    /// <p>The engine type of the server. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>. </p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The engine model of the server. Valid values in this release include <code>Monolithic</code> for Puppet and <code>Single</code> for Chef. </p>
    pub fn engine_model(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_model = Some(input.into());
        self
    }
    /// <p>The engine model of the server. Valid values in this release include <code>Monolithic</code> for Puppet and <code>Single</code> for Chef. </p>
    pub fn set_engine_model(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_model = input;
        self
    }
    /// Appends an item to `engine_attributes`.
    ///
    /// To override the contents of this collection use [`set_engine_attributes`](Self::set_engine_attributes).
    ///
    /// <p>The response of a createServer() request returns the master credential to access the server in EngineAttributes. These credentials are not stored by AWS OpsWorks CM; they are returned only as part of the result of createServer(). </p>
    /// <p class="title"> <b>Attributes returned in a createServer response for Chef</b> </p>
    /// <ul>
    /// <li> <p> <code>CHEF_AUTOMATE_PIVOTAL_KEY</code>: A base64-encoded RSA private key that is generated by AWS OpsWorks for Chef Automate. This private key is required to access the Chef API.</p> </li>
    /// <li> <p> <code>CHEF_STARTER_KIT</code>: A base64-encoded ZIP file. The ZIP file contains a Chef starter kit, which includes a README, a configuration file, and the required RSA private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents. From this directory, you can run Knife commands.</p> </li>
    /// </ul>
    /// <p class="title"> <b>Attributes returned in a createServer response for Puppet</b> </p>
    /// <ul>
    /// <li> <p> <code>PUPPET_STARTER_KIT</code>: A base64-encoded ZIP file. The ZIP file contains a Puppet starter kit, including a README and a required private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents.</p> </li>
    /// <li> <p> <code>PUPPET_ADMIN_PASSWORD</code>: An administrator password that you can use to sign in to the Puppet Enterprise console after the server is online.</p> </li>
    /// </ul>
    pub fn engine_attributes(mut self, input: crate::types::EngineAttribute) -> Self {
        let mut v = self.engine_attributes.unwrap_or_default();
        v.push(input);
        self.engine_attributes = Some(v);
        self
    }
    /// <p>The response of a createServer() request returns the master credential to access the server in EngineAttributes. These credentials are not stored by AWS OpsWorks CM; they are returned only as part of the result of createServer(). </p>
    /// <p class="title"> <b>Attributes returned in a createServer response for Chef</b> </p>
    /// <ul>
    /// <li> <p> <code>CHEF_AUTOMATE_PIVOTAL_KEY</code>: A base64-encoded RSA private key that is generated by AWS OpsWorks for Chef Automate. This private key is required to access the Chef API.</p> </li>
    /// <li> <p> <code>CHEF_STARTER_KIT</code>: A base64-encoded ZIP file. The ZIP file contains a Chef starter kit, which includes a README, a configuration file, and the required RSA private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents. From this directory, you can run Knife commands.</p> </li>
    /// </ul>
    /// <p class="title"> <b>Attributes returned in a createServer response for Puppet</b> </p>
    /// <ul>
    /// <li> <p> <code>PUPPET_STARTER_KIT</code>: A base64-encoded ZIP file. The ZIP file contains a Puppet starter kit, including a README and a required private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents.</p> </li>
    /// <li> <p> <code>PUPPET_ADMIN_PASSWORD</code>: An administrator password that you can use to sign in to the Puppet Enterprise console after the server is online.</p> </li>
    /// </ul>
    pub fn set_engine_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EngineAttribute>>,
    ) -> Self {
        self.engine_attributes = input;
        self
    }
    /// <p>The engine version of the server. For a Chef server, the valid value for EngineVersion is currently <code>2</code>. For a Puppet server, specify either <code>2019</code> or <code>2017</code>. </p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The engine version of the server. For a Chef server, the valid value for EngineVersion is currently <code>2</code>. For a Puppet server, specify either <code>2019</code> or <code>2017</code>. </p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The instance profile ARN of the server. </p>
    pub fn instance_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_profile_arn = Some(input.into());
        self
    }
    /// <p>The instance profile ARN of the server. </p>
    pub fn set_instance_profile_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.instance_profile_arn = input;
        self
    }
    /// <p> The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console. </p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p> The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console. </p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The key pair associated with the server. </p>
    pub fn key_pair(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_pair = Some(input.into());
        self
    }
    /// <p>The key pair associated with the server. </p>
    pub fn set_key_pair(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_pair = input;
        self
    }
    /// <p>The status of the most recent server maintenance run. Shows <code>SUCCESS</code> or <code>FAILED</code>. </p>
    pub fn maintenance_status(mut self, input: crate::types::MaintenanceStatus) -> Self {
        self.maintenance_status = Some(input);
        self
    }
    /// <p>The status of the most recent server maintenance run. Shows <code>SUCCESS</code> or <code>FAILED</code>. </p>
    pub fn set_maintenance_status(
        mut self,
        input: std::option::Option<crate::types::MaintenanceStatus>,
    ) -> Self {
        self.maintenance_status = input;
        self
    }
    /// <p>The preferred maintenance period specified for the server. </p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_maintenance_window = Some(input.into());
        self
    }
    /// <p>The preferred maintenance period specified for the server. </p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>The preferred backup period specified for the server. </p>
    pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_backup_window = Some(input.into());
        self
    }
    /// <p>The preferred backup period specified for the server. </p>
    pub fn set_preferred_backup_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_backup_window = input;
        self
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p> The security group IDs for the server, as specified in the CloudFormation stack. These might not be the same security groups that are shown in the EC2 console. </p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = Some(v);
        self
    }
    /// <p> The security group IDs for the server, as specified in the CloudFormation stack. These might not be the same security groups that are shown in the EC2 console. </p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The service role ARN used to create the server. </p>
    pub fn service_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_role_arn = Some(input.into());
        self
    }
    /// <p>The service role ARN used to create the server. </p>
    pub fn set_service_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_role_arn = input;
        self
    }
    /// <p> The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server, as well as the server's health state. </p>
    pub fn status(mut self, input: crate::types::ServerStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server, as well as the server's health state. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ServerStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> Depending on the server status, this field has either a human-readable message (such as a create or backup error), or an escaped block of JSON (used for health check results). </p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p> Depending on the server status, this field has either a human-readable message (such as a create or backup error), or an escaped block of JSON (used for health check results). </p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p> The subnet IDs specified in a CreateServer request. </p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p> The subnet IDs specified in a CreateServer request. </p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The ARN of the server. </p>
    pub fn server_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the server. </p>
    pub fn set_server_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`Server`](crate::types::Server).
    pub fn build(self) -> crate::types::Server {
        crate::types::Server {
            associate_public_ip_address: self.associate_public_ip_address,
            backup_retention_count: self.backup_retention_count,
            server_name: self.server_name,
            created_at: self.created_at,
            cloud_formation_stack_arn: self.cloud_formation_stack_arn,
            custom_domain: self.custom_domain,
            disable_automated_backup: self.disable_automated_backup,
            endpoint: self.endpoint,
            engine: self.engine,
            engine_model: self.engine_model,
            engine_attributes: self.engine_attributes,
            engine_version: self.engine_version,
            instance_profile_arn: self.instance_profile_arn,
            instance_type: self.instance_type,
            key_pair: self.key_pair,
            maintenance_status: self.maintenance_status,
            preferred_maintenance_window: self.preferred_maintenance_window,
            preferred_backup_window: self.preferred_backup_window,
            security_group_ids: self.security_group_ids,
            service_role_arn: self.service_role_arn,
            status: self.status,
            status_reason: self.status_reason,
            subnet_ids: self.subnet_ids,
            server_arn: self.server_arn,
        }
    }
}
