// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_server::_update_server_output::UpdateServerOutputBuilder;

pub use crate::operation::update_server::_update_server_input::UpdateServerInputBuilder;

/// Fluent builder constructing a request to `UpdateServer`.
///
/// <p> Updates settings for a server. </p>
/// <p> This operation is synchronous. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServerFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_server::builders::UpdateServerInputBuilder,
}
impl UpdateServerFluentBuilder {
    /// Creates a new `UpdateServer`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_server::UpdateServer,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_server::UpdateServerError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_server::UpdateServerOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_server::UpdateServerError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Setting DisableAutomatedBackup to <code>true</code> disables automated or scheduled backups. Automated backups are enabled by default. </p>
    pub fn disable_automated_backup(mut self, input: bool) -> Self {
        self.inner = self.inner.disable_automated_backup(input);
        self
    }
    /// <p>Setting DisableAutomatedBackup to <code>true</code> disables automated or scheduled backups. Automated backups are enabled by default. </p>
    pub fn set_disable_automated_backup(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_disable_automated_backup(input);
        self
    }
    /// <p>Sets the number of automated backups that you want to keep. </p>
    pub fn backup_retention_count(mut self, input: i32) -> Self {
        self.inner = self.inner.backup_retention_count(input);
        self
    }
    /// <p>Sets the number of automated backups that you want to keep. </p>
    pub fn set_backup_retention_count(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_backup_retention_count(input);
        self
    }
    /// <p>The name of the server to update. </p>
    pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.server_name(input.into());
        self
    }
    /// <p>The name of the server to update. </p>
    pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_server_name(input);
        self
    }
    /// <p> <code>DDD:HH:MM</code> (weekly start time) or <code>HH:MM</code> (daily start time). </p>
    /// <p> Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.preferred_maintenance_window(input.into());
        self
    }
    /// <p> <code>DDD:HH:MM</code> (weekly start time) or <code>HH:MM</code> (daily start time). </p>
    /// <p> Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_preferred_maintenance_window(input);
        self
    }
    /// <p> <code>DDD:HH:MM</code> (weekly start time) or <code>HH:MM</code> (daily start time). </p>
    /// <p> Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
    pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.preferred_backup_window(input.into());
        self
    }
    /// <p> <code>DDD:HH:MM</code> (weekly start time) or <code>HH:MM</code> (daily start time). </p>
    /// <p> Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
    pub fn set_preferred_backup_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_preferred_backup_window(input);
        self
    }
}
