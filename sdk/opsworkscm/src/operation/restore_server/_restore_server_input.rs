// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreServerInput {
    /// <p> The ID of the backup that you want to use to restore a server. </p>
    #[doc(hidden)]
    pub backup_id: std::option::Option<std::string::String>,
    /// <p> The name of the server that you want to restore. </p>
    #[doc(hidden)]
    pub server_name: std::option::Option<std::string::String>,
    /// <p> The type of instance to restore. Valid values must be specified in the following format: <code>^([cm][34]|t2).*</code> For example, <code>m5.large</code>. Valid values are <code>m5.large</code>, <code>r5.xlarge</code>, and <code>r5.2xlarge</code>. If you do not specify this parameter, RestoreServer uses the instance type from the specified backup. </p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p> The name of the key pair to set on the new EC2 instance. This can be helpful if the administrator no longer has the SSH key. </p>
    #[doc(hidden)]
    pub key_pair: std::option::Option<std::string::String>,
}
impl RestoreServerInput {
    /// <p> The ID of the backup that you want to use to restore a server. </p>
    pub fn backup_id(&self) -> std::option::Option<&str> {
        self.backup_id.as_deref()
    }
    /// <p> The name of the server that you want to restore. </p>
    pub fn server_name(&self) -> std::option::Option<&str> {
        self.server_name.as_deref()
    }
    /// <p> The type of instance to restore. Valid values must be specified in the following format: <code>^([cm][34]|t2).*</code> For example, <code>m5.large</code>. Valid values are <code>m5.large</code>, <code>r5.xlarge</code>, and <code>r5.2xlarge</code>. If you do not specify this parameter, RestoreServer uses the instance type from the specified backup. </p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p> The name of the key pair to set on the new EC2 instance. This can be helpful if the administrator no longer has the SSH key. </p>
    pub fn key_pair(&self) -> std::option::Option<&str> {
        self.key_pair.as_deref()
    }
}
impl RestoreServerInput {
    /// Creates a new builder-style object to manufacture [`RestoreServerInput`](crate::operation::restore_server::RestoreServerInput).
    pub fn builder() -> crate::operation::restore_server::builders::RestoreServerInputBuilder {
        crate::operation::restore_server::builders::RestoreServerInputBuilder::default()
    }
}

/// A builder for [`RestoreServerInput`](crate::operation::restore_server::RestoreServerInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RestoreServerInputBuilder {
    pub(crate) backup_id: std::option::Option<std::string::String>,
    pub(crate) server_name: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) key_pair: std::option::Option<std::string::String>,
}
impl RestoreServerInputBuilder {
    /// <p> The ID of the backup that you want to use to restore a server. </p>
    pub fn backup_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.backup_id = Some(input.into());
        self
    }
    /// <p> The ID of the backup that you want to use to restore a server. </p>
    pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.backup_id = input;
        self
    }
    /// <p> The name of the server that you want to restore. </p>
    pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_name = Some(input.into());
        self
    }
    /// <p> The name of the server that you want to restore. </p>
    pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_name = input;
        self
    }
    /// <p> The type of instance to restore. Valid values must be specified in the following format: <code>^([cm][34]|t2).*</code> For example, <code>m5.large</code>. Valid values are <code>m5.large</code>, <code>r5.xlarge</code>, and <code>r5.2xlarge</code>. If you do not specify this parameter, RestoreServer uses the instance type from the specified backup. </p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p> The type of instance to restore. Valid values must be specified in the following format: <code>^([cm][34]|t2).*</code> For example, <code>m5.large</code>. Valid values are <code>m5.large</code>, <code>r5.xlarge</code>, and <code>r5.2xlarge</code>. If you do not specify this parameter, RestoreServer uses the instance type from the specified backup. </p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p> The name of the key pair to set on the new EC2 instance. This can be helpful if the administrator no longer has the SSH key. </p>
    pub fn key_pair(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_pair = Some(input.into());
        self
    }
    /// <p> The name of the key pair to set on the new EC2 instance. This can be helpful if the administrator no longer has the SSH key. </p>
    pub fn set_key_pair(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_pair = input;
        self
    }
    /// Consumes the builder and constructs a [`RestoreServerInput`](crate::operation::restore_server::RestoreServerInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::restore_server::RestoreServerInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::restore_server::RestoreServerInput {
            backup_id: self.backup_id,
            server_name: self.server_name,
            instance_type: self.instance_type,
            key_pair: self.key_pair,
        })
    }
}
