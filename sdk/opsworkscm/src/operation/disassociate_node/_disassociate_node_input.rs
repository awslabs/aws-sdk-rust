// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateNodeInput {
    /// <p>The name of the server from which to disassociate the node. </p>
    #[doc(hidden)]
    pub server_name: std::option::Option<std::string::String>,
    /// <p>The name of the client node. </p>
    #[doc(hidden)]
    pub node_name: std::option::Option<std::string::String>,
    /// <p>Engine attributes that are used for disassociating the node. No attributes are required for Puppet. </p>
    /// <p class="title"> <b>Attributes required in a DisassociateNode request for Chef</b> </p>
    /// <ul>
    /// <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node was associated. By default only one organization named <code>default</code> can exist. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub engine_attributes: std::option::Option<std::vec::Vec<crate::types::EngineAttribute>>,
}
impl DisassociateNodeInput {
    /// <p>The name of the server from which to disassociate the node. </p>
    pub fn server_name(&self) -> std::option::Option<&str> {
        self.server_name.as_deref()
    }
    /// <p>The name of the client node. </p>
    pub fn node_name(&self) -> std::option::Option<&str> {
        self.node_name.as_deref()
    }
    /// <p>Engine attributes that are used for disassociating the node. No attributes are required for Puppet. </p>
    /// <p class="title"> <b>Attributes required in a DisassociateNode request for Chef</b> </p>
    /// <ul>
    /// <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node was associated. By default only one organization named <code>default</code> can exist. </p> </li>
    /// </ul>
    pub fn engine_attributes(&self) -> std::option::Option<&[crate::types::EngineAttribute]> {
        self.engine_attributes.as_deref()
    }
}
impl DisassociateNodeInput {
    /// Creates a new builder-style object to manufacture [`DisassociateNodeInput`](crate::operation::disassociate_node::DisassociateNodeInput).
    pub fn builder() -> crate::operation::disassociate_node::builders::DisassociateNodeInputBuilder
    {
        crate::operation::disassociate_node::builders::DisassociateNodeInputBuilder::default()
    }
}

/// A builder for [`DisassociateNodeInput`](crate::operation::disassociate_node::DisassociateNodeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DisassociateNodeInputBuilder {
    pub(crate) server_name: std::option::Option<std::string::String>,
    pub(crate) node_name: std::option::Option<std::string::String>,
    pub(crate) engine_attributes: std::option::Option<std::vec::Vec<crate::types::EngineAttribute>>,
}
impl DisassociateNodeInputBuilder {
    /// <p>The name of the server from which to disassociate the node. </p>
    pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_name = Some(input.into());
        self
    }
    /// <p>The name of the server from which to disassociate the node. </p>
    pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_name = input;
        self
    }
    /// <p>The name of the client node. </p>
    pub fn node_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.node_name = Some(input.into());
        self
    }
    /// <p>The name of the client node. </p>
    pub fn set_node_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.node_name = input;
        self
    }
    /// Appends an item to `engine_attributes`.
    ///
    /// To override the contents of this collection use [`set_engine_attributes`](Self::set_engine_attributes).
    ///
    /// <p>Engine attributes that are used for disassociating the node. No attributes are required for Puppet. </p>
    /// <p class="title"> <b>Attributes required in a DisassociateNode request for Chef</b> </p>
    /// <ul>
    /// <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node was associated. By default only one organization named <code>default</code> can exist. </p> </li>
    /// </ul>
    pub fn engine_attributes(mut self, input: crate::types::EngineAttribute) -> Self {
        let mut v = self.engine_attributes.unwrap_or_default();
        v.push(input);
        self.engine_attributes = Some(v);
        self
    }
    /// <p>Engine attributes that are used for disassociating the node. No attributes are required for Puppet. </p>
    /// <p class="title"> <b>Attributes required in a DisassociateNode request for Chef</b> </p>
    /// <ul>
    /// <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node was associated. By default only one organization named <code>default</code> can exist. </p> </li>
    /// </ul>
    pub fn set_engine_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EngineAttribute>>,
    ) -> Self {
        self.engine_attributes = input;
        self
    }
    /// Consumes the builder and constructs a [`DisassociateNodeInput`](crate::operation::disassociate_node::DisassociateNodeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::disassociate_node::DisassociateNodeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::disassociate_node::DisassociateNodeInput {
            server_name: self.server_name,
            node_name: self.node_name,
            engine_attributes: self.engine_attributes,
        })
    }
}
