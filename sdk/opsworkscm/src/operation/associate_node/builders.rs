// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_node::_associate_node_output::AssociateNodeOutputBuilder;

pub use crate::operation::associate_node::_associate_node_input::AssociateNodeInputBuilder;

impl AssociateNodeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::associate_node::AssociateNodeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_node::AssociateNodeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.associate_node();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `AssociateNode`.
///
/// <p> Associates a new node with the server. For more information about how to disassociate a node, see <code>DisassociateNode</code>.</p>
/// <p> On a Chef server: This command is an alternative to <code>knife bootstrap</code>.</p>
/// <p> Example (Chef): <code>aws opsworks-cm associate-node --server-name <i>MyServer</i> --node-name <i>MyManagedNode</i> --engine-attributes "Name=<i>CHEF_ORGANIZATION</i>,Value=default" "Name=<i>CHEF_NODE_PUBLIC_KEY</i>,Value=<i>public-key-pem</i>"</code> </p>
/// <p> On a Puppet server, this command is an alternative to the <code>puppet cert sign</code> command that signs a Puppet node CSR. </p>
/// <p> Example (Puppet): <code>aws opsworks-cm associate-node --server-name <i>MyServer</i> --node-name <i>MyManagedNode</i> --engine-attributes "Name=<i>PUPPET_NODE_CSR</i>,Value=<i>csr-pem</i>"</code> </p>
/// <p> A node can can only be associated with servers that are in a <code>HEALTHY</code> state. Otherwise, an <code>InvalidStateException</code> is thrown. A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid. The AssociateNode API call can be integrated into Auto Scaling configurations, AWS Cloudformation templates, or the user data of a server's instance. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AssociateNodeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::associate_node::builders::AssociateNodeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::associate_node::AssociateNodeOutput,
        crate::operation::associate_node::AssociateNodeError,
    > for AssociateNodeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::associate_node::AssociateNodeOutput,
            crate::operation::associate_node::AssociateNodeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl AssociateNodeFluentBuilder {
    /// Creates a new `AssociateNode`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the AssociateNode as a reference.
    pub fn as_input(&self) -> &crate::operation::associate_node::builders::AssociateNodeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_node::AssociateNodeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_node::AssociateNodeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::associate_node::AssociateNode::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::associate_node::AssociateNode::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::associate_node::AssociateNodeOutput,
        crate::operation::associate_node::AssociateNodeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the server with which to associate the node. </p>
    pub fn server_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.server_name(input.into());
        self
    }
    /// <p>The name of the server with which to associate the node. </p>
    pub fn set_server_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_server_name(input);
        self
    }
    /// <p>The name of the server with which to associate the node. </p>
    pub fn get_server_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_server_name()
    }
    /// <p>The name of the node. </p>
    pub fn node_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.node_name(input.into());
        self
    }
    /// <p>The name of the node. </p>
    pub fn set_node_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_node_name(input);
        self
    }
    /// <p>The name of the node. </p>
    pub fn get_node_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_node_name()
    }
    /// Appends an item to `EngineAttributes`.
    ///
    /// To override the contents of this collection use [`set_engine_attributes`](Self::set_engine_attributes).
    ///
    /// <p>Engine attributes used for associating the node. </p>
    /// <p class="title"> <b>Attributes accepted in a AssociateNode request for Chef</b> </p>
    /// <ul>
    /// <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node is associated. By default only one organization named <code>default</code> can exist. </p> </li>
    /// <li> <p> <code>CHEF_NODE_PUBLIC_KEY</code>: A PEM-formatted public key. This key is required for the <code>chef-client</code> agent to access the Chef API. </p> </li>
    /// </ul>
    /// <p class="title"> <b>Attributes accepted in a AssociateNode request for Puppet</b> </p>
    /// <ul>
    /// <li> <p> <code>PUPPET_NODE_CSR</code>: A PEM-formatted certificate-signing request (CSR) that is created by the node. </p> </li>
    /// </ul>
    pub fn engine_attributes(mut self, input: crate::types::EngineAttribute) -> Self {
        self.inner = self.inner.engine_attributes(input);
        self
    }
    /// <p>Engine attributes used for associating the node. </p>
    /// <p class="title"> <b>Attributes accepted in a AssociateNode request for Chef</b> </p>
    /// <ul>
    /// <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node is associated. By default only one organization named <code>default</code> can exist. </p> </li>
    /// <li> <p> <code>CHEF_NODE_PUBLIC_KEY</code>: A PEM-formatted public key. This key is required for the <code>chef-client</code> agent to access the Chef API. </p> </li>
    /// </ul>
    /// <p class="title"> <b>Attributes accepted in a AssociateNode request for Puppet</b> </p>
    /// <ul>
    /// <li> <p> <code>PUPPET_NODE_CSR</code>: A PEM-formatted certificate-signing request (CSR) that is created by the node. </p> </li>
    /// </ul>
    pub fn set_engine_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EngineAttribute>>) -> Self {
        self.inner = self.inner.set_engine_attributes(input);
        self
    }
    /// <p>Engine attributes used for associating the node. </p>
    /// <p class="title"> <b>Attributes accepted in a AssociateNode request for Chef</b> </p>
    /// <ul>
    /// <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node is associated. By default only one organization named <code>default</code> can exist. </p> </li>
    /// <li> <p> <code>CHEF_NODE_PUBLIC_KEY</code>: A PEM-formatted public key. This key is required for the <code>chef-client</code> agent to access the Chef API. </p> </li>
    /// </ul>
    /// <p class="title"> <b>Attributes accepted in a AssociateNode request for Puppet</b> </p>
    /// <ul>
    /// <li> <p> <code>PUPPET_NODE_CSR</code>: A PEM-formatted certificate-signing request (CSR) that is created by the node. </p> </li>
    /// </ul>
    pub fn get_engine_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EngineAttribute>> {
        self.inner.get_engine_attributes()
    }
}
