// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = aws_smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    client: aws_smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// Client for AWS OpsWorks CM
///
/// Client for invoking operations on AWS OpsWorks CM. Each operation on AWS OpsWorks CM is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_opsworkscm::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operationname>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::RetryConfig;
/// # async fn docs() {
///     let shared_config = aws_config::load_from_env().await;
///     let config = aws_sdk_opsworkscm::config::Builder::from(&shared_config)
///         .retry_config(RetryConfig::disabled())
///         .build();
///     let client = aws_sdk_opsworkscm::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client<
    C = aws_smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl<C, M, R> From<aws_smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: aws_smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    /// Creates a client with the given service configuration.
    pub fn with_config(client: aws_smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: aws_smithy_client::bounds::SmithyConnector,
    M: aws_smithy_client::bounds::SmithyMiddleware<C>,
    R: aws_smithy_client::retry::NewRequestPolicy,
{
    /// Constructs a fluent builder for the `AssociateNode` operation.
    ///
    /// See [`AssociateNode`](crate::client::fluent_builders::AssociateNode) for more information about the
    /// operation and its arguments.
    pub fn associate_node(&self) -> fluent_builders::AssociateNode<C, M, R> {
        fluent_builders::AssociateNode::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateBackup` operation.
    ///
    /// See [`CreateBackup`](crate::client::fluent_builders::CreateBackup) for more information about the
    /// operation and its arguments.
    pub fn create_backup(&self) -> fluent_builders::CreateBackup<C, M, R> {
        fluent_builders::CreateBackup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateServer` operation.
    ///
    /// See [`CreateServer`](crate::client::fluent_builders::CreateServer) for more information about the
    /// operation and its arguments.
    pub fn create_server(&self) -> fluent_builders::CreateServer<C, M, R> {
        fluent_builders::CreateServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteBackup` operation.
    ///
    /// See [`DeleteBackup`](crate::client::fluent_builders::DeleteBackup) for more information about the
    /// operation and its arguments.
    pub fn delete_backup(&self) -> fluent_builders::DeleteBackup<C, M, R> {
        fluent_builders::DeleteBackup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteServer` operation.
    ///
    /// See [`DeleteServer`](crate::client::fluent_builders::DeleteServer) for more information about the
    /// operation and its arguments.
    pub fn delete_server(&self) -> fluent_builders::DeleteServer<C, M, R> {
        fluent_builders::DeleteServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeAccountAttributes` operation.
    ///
    /// See [`DescribeAccountAttributes`](crate::client::fluent_builders::DescribeAccountAttributes) for more information about the
    /// operation and its arguments.
    pub fn describe_account_attributes(
        &self,
    ) -> fluent_builders::DescribeAccountAttributes<C, M, R> {
        fluent_builders::DescribeAccountAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeBackups` operation.
    ///
    /// See [`DescribeBackups`](crate::client::fluent_builders::DescribeBackups) for more information about the
    /// operation and its arguments.
    pub fn describe_backups(&self) -> fluent_builders::DescribeBackups<C, M, R> {
        fluent_builders::DescribeBackups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeEvents` operation.
    ///
    /// See [`DescribeEvents`](crate::client::fluent_builders::DescribeEvents) for more information about the
    /// operation and its arguments.
    pub fn describe_events(&self) -> fluent_builders::DescribeEvents<C, M, R> {
        fluent_builders::DescribeEvents::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeNodeAssociationStatus` operation.
    ///
    /// See [`DescribeNodeAssociationStatus`](crate::client::fluent_builders::DescribeNodeAssociationStatus) for more information about the
    /// operation and its arguments.
    pub fn describe_node_association_status(
        &self,
    ) -> fluent_builders::DescribeNodeAssociationStatus<C, M, R> {
        fluent_builders::DescribeNodeAssociationStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeServers` operation.
    ///
    /// See [`DescribeServers`](crate::client::fluent_builders::DescribeServers) for more information about the
    /// operation and its arguments.
    pub fn describe_servers(&self) -> fluent_builders::DescribeServers<C, M, R> {
        fluent_builders::DescribeServers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DisassociateNode` operation.
    ///
    /// See [`DisassociateNode`](crate::client::fluent_builders::DisassociateNode) for more information about the
    /// operation and its arguments.
    pub fn disassociate_node(&self) -> fluent_builders::DisassociateNode<C, M, R> {
        fluent_builders::DisassociateNode::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ExportServerEngineAttribute` operation.
    ///
    /// See [`ExportServerEngineAttribute`](crate::client::fluent_builders::ExportServerEngineAttribute) for more information about the
    /// operation and its arguments.
    pub fn export_server_engine_attribute(
        &self,
    ) -> fluent_builders::ExportServerEngineAttribute<C, M, R> {
        fluent_builders::ExportServerEngineAttribute::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListTagsForResource` operation.
    ///
    /// See [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) for more information about the
    /// operation and its arguments.
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C, M, R> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `RestoreServer` operation.
    ///
    /// See [`RestoreServer`](crate::client::fluent_builders::RestoreServer) for more information about the
    /// operation and its arguments.
    pub fn restore_server(&self) -> fluent_builders::RestoreServer<C, M, R> {
        fluent_builders::RestoreServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `StartMaintenance` operation.
    ///
    /// See [`StartMaintenance`](crate::client::fluent_builders::StartMaintenance) for more information about the
    /// operation and its arguments.
    pub fn start_maintenance(&self) -> fluent_builders::StartMaintenance<C, M, R> {
        fluent_builders::StartMaintenance::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `TagResource` operation.
    ///
    /// See [`TagResource`](crate::client::fluent_builders::TagResource) for more information about the
    /// operation and its arguments.
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C, M, R> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UntagResource` operation.
    ///
    /// See [`UntagResource`](crate::client::fluent_builders::UntagResource) for more information about the
    /// operation and its arguments.
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C, M, R> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateServer` operation.
    ///
    /// See [`UpdateServer`](crate::client::fluent_builders::UpdateServer) for more information about the
    /// operation and its arguments.
    pub fn update_server(&self) -> fluent_builders::UpdateServer<C, M, R> {
        fluent_builders::UpdateServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateServerEngineAttributes` operation.
    ///
    /// See [`UpdateServerEngineAttributes`](crate::client::fluent_builders::UpdateServerEngineAttributes) for more information about the
    /// operation and its arguments.
    pub fn update_server_engine_attributes(
        &self,
    ) -> fluent_builders::UpdateServerEngineAttributes<C, M, R> {
        fluent_builders::UpdateServerEngineAttributes::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    //!
    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    //!
    /// Fluent builder constructing a request to `AssociateNode`.
    ///
    /// <p> Associates a new node with the server. For more information about how to disassociate a node, see <a>DisassociateNode</a>.</p>
    /// <p>
    /// On a Chef server: This command is an alternative to  <code>knife bootstrap</code>.</p>
    /// <p>
    /// Example (Chef): <code>aws opsworks-cm associate-node --server-name <i>MyServer</i> --node-name <i>MyManagedNode</i> --engine-attributes "Name=<i>CHEF_ORGANIZATION</i>,Value=default" "Name=<i>CHEF_NODE_PUBLIC_KEY</i>,Value=<i>public-key-pem</i>"</code>
    /// </p>
    /// <p>
    /// On a Puppet server, this command is an alternative to the <code>puppet cert sign</code> command that signs a Puppet node CSR.
    /// </p>
    /// <p>
    /// Example (Puppet): <code>aws opsworks-cm associate-node --server-name <i>MyServer</i> --node-name <i>MyManagedNode</i> --engine-attributes "Name=<i>PUPPET_NODE_CSR</i>,Value=<i>csr-pem</i>"</code>
    /// </p>
    /// <p>
    /// A node can can only be associated with servers that are in a <code>HEALTHY</code> state. Otherwise, an <code>InvalidStateException</code> is thrown.
    /// A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
    /// The AssociateNode API call can be integrated into Auto Scaling configurations, AWS Cloudformation templates, or the user data of a server's instance.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct AssociateNode<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::associate_node_input::Builder,
    }
    impl<C, M, R> AssociateNode<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `AssociateNode`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateNodeOutput,
            aws_smithy_http::result::SdkError<crate::error::AssociateNodeError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssociateNodeInputOperationOutputAlias,
                crate::output::AssociateNodeOutput,
                crate::error::AssociateNodeError,
                crate::input::AssociateNodeInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server with which to associate the node.
        /// </p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>The name of the server with which to associate the node.
        /// </p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>The name of the node.
        /// </p>
        pub fn node_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.node_name(inp);
            self
        }
        /// <p>The name of the node.
        /// </p>
        pub fn set_node_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_node_name(input);
            self
        }
        /// Appends an item to `EngineAttributes`.
        ///
        /// To override the contents of this collection use [`set_engine_attributes`](Self::set_engine_attributes).
        ///
        /// <p>Engine attributes used for associating the node.
        /// </p>
        /// <p class="title">
        /// <b>Attributes accepted in a AssociateNode request for Chef</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_ORGANIZATION</code>: The Chef organization
        /// with which the node is associated. By default only one organization
        /// named <code>default</code> can exist.
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CHEF_NODE_PUBLIC_KEY</code>: A PEM-formatted public key. This key is required for the <code>chef-client</code> agent to access the Chef API.
        /// </p>
        /// </li>
        /// </ul>
        /// <p class="title">
        /// <b>Attributes accepted in a AssociateNode request for Puppet</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>PUPPET_NODE_CSR</code>: A PEM-formatted certificate-signing request (CSR) that is created by the node.
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine_attributes(mut self, inp: impl Into<crate::model::EngineAttribute>) -> Self {
            self.inner = self.inner.engine_attributes(inp);
            self
        }
        /// <p>Engine attributes used for associating the node.
        /// </p>
        /// <p class="title">
        /// <b>Attributes accepted in a AssociateNode request for Chef</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_ORGANIZATION</code>: The Chef organization
        /// with which the node is associated. By default only one organization
        /// named <code>default</code> can exist.
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CHEF_NODE_PUBLIC_KEY</code>: A PEM-formatted public key. This key is required for the <code>chef-client</code> agent to access the Chef API.
        /// </p>
        /// </li>
        /// </ul>
        /// <p class="title">
        /// <b>Attributes accepted in a AssociateNode request for Puppet</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>PUPPET_NODE_CSR</code>: A PEM-formatted certificate-signing request (CSR) that is created by the node.
        /// </p>
        /// </li>
        /// </ul>
        pub fn set_engine_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EngineAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_engine_attributes(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateBackup`.
    ///
    /// <p>
    /// Creates an application-level backup of a server. While the
    /// server is in the <code>BACKING_UP</code> state, the server cannot be
    /// changed, and no additional backup can be created.
    /// </p>
    /// <p>
    /// Backups can be created for servers in <code>RUNNING</code>, <code>HEALTHY</code>, and <code>UNHEALTHY</code> states. By default, you can create a maximum of 50
    /// manual backups.
    /// </p>
    /// <p>
    /// This operation is asynchronous.
    /// </p>
    /// <p>
    /// A <code>LimitExceededException</code> is thrown when the maximum number of manual backups is reached.
    /// An <code>InvalidStateException</code> is thrown when the server is not in any of the following states: RUNNING, HEALTHY, or UNHEALTHY.
    /// A <code>ResourceNotFoundException</code> is thrown when the server is not found.
    /// A <code>ValidationException</code> is thrown when parameters of the request are not valid.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct CreateBackup<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_backup_input::Builder,
    }
    impl<C, M, R> CreateBackup<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateBackup`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateBackupOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateBackupError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateBackupInputOperationOutputAlias,
                crate::output::CreateBackupOutput,
                crate::error::CreateBackupError,
                crate::input::CreateBackupInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server that you want to back up.
        /// </p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>The name of the server that you want to back up.
        /// </p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>
        /// A user-defined description of the backup.
        /// </p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        /// <p>
        /// A user-defined description of the backup.
        /// </p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map that contains tag keys and tag values to attach to an AWS OpsWorks-CM server backup.</p>
        /// <ul>
        /// <li>
        /// <p>The key cannot be empty.</p>
        /// </li>
        /// <li>
        /// <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
        /// </li>
        /// <li>
        /// <p>A maximum of 50 user-applied tags is allowed for tag-supported AWS OpsWorks-CM resources.</p>
        /// </li>
        /// </ul>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>A map that contains tag keys and tag values to attach to an AWS OpsWorks-CM server backup.</p>
        /// <ul>
        /// <li>
        /// <p>The key cannot be empty.</p>
        /// </li>
        /// <li>
        /// <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
        /// </li>
        /// <li>
        /// <p>A maximum of 50 user-applied tags is allowed for tag-supported AWS OpsWorks-CM resources.</p>
        /// </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateServer`.
    ///
    /// <p>
    /// Creates and immedately starts a new server. The server is ready to use when it is in the <code>HEALTHY</code> state. By default, you can create a maximum of 10 servers.
    /// </p>
    /// <p>
    /// This operation is asynchronous.
    /// </p>
    /// <p>
    /// A <code>LimitExceededException</code> is thrown when you have created the maximum number of servers (10). A <code>ResourceAlreadyExistsException</code>
    /// is thrown when a server with the same name already exists in the account. A <code>ResourceNotFoundException</code> is thrown when you
    /// specify a backup ID that is not valid or is for a backup that does not exist. A <code>ValidationException</code> is thrown when parameters
    /// of the request are not valid.
    /// </p>
    /// <p>
    /// If you do not specify a security group by adding the <code>SecurityGroupIds</code> parameter, AWS OpsWorks creates a new security group.
    /// </p>
    /// <p>
    /// <i>Chef Automate:</i> The default security group opens the Chef server to the world on TCP port 443. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22.
    /// </p>
    /// <p>
    /// <i>Puppet Enterprise:</i> The default security group opens TCP ports 22, 443, 4433, 8140, 8142, 8143, and 8170. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22.
    /// </p>
    /// <p>By default, your server is accessible from any IP address. We
    /// recommend that you update your security group rules to allow
    /// access from known IP addresses and address ranges only. To edit security group rules, open Security Groups
    /// in the navigation pane of the EC2 management console.
    /// </p>
    /// <p>To specify your own domain for a server, and provide your own self-signed or CA-signed certificate and private key, specify values for <code>CustomDomain</code>,
    /// <code>CustomCertificate</code>, and <code>CustomPrivateKey</code>.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateServer<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_server_input::Builder,
    }
    impl<C, M, R> CreateServer<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateServer`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateServerOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateServerError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateServerInputOperationOutputAlias,
                crate::output::CreateServerOutput,
                crate::error::CreateServerError,
                crate::input::CreateServerInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>
        /// Associate a public IP address with a server that you are launching. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>.
        /// </p>
        pub fn associate_public_ip_address(mut self, inp: bool) -> Self {
            self.inner = self.inner.associate_public_ip_address(inp);
            self
        }
        /// <p>
        /// Associate a public IP address with a server that you are launching. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>.
        /// </p>
        pub fn set_associate_public_ip_address(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_associate_public_ip_address(input);
            self
        }
        /// <p>An optional public endpoint of a server, such as <code>https://aws.my-company.com</code>. To access the server, create a CNAME DNS record in your preferred DNS service that points the custom
        /// domain to the endpoint that is generated when the server is created (the value of the CreateServer Endpoint attribute). You cannot access the server by using the
        /// generated <code>Endpoint</code> value if the server is using a custom domain. If you specify a custom domain, you must also specify values for <code>CustomCertificate</code>
        /// and <code>CustomPrivateKey</code>.</p>
        pub fn custom_domain(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_domain(inp);
            self
        }
        /// <p>An optional public endpoint of a server, such as <code>https://aws.my-company.com</code>. To access the server, create a CNAME DNS record in your preferred DNS service that points the custom
        /// domain to the endpoint that is generated when the server is created (the value of the CreateServer Endpoint attribute). You cannot access the server by using the
        /// generated <code>Endpoint</code> value if the server is using a custom domain. If you specify a custom domain, you must also specify values for <code>CustomCertificate</code>
        /// and <code>CustomPrivateKey</code>.</p>
        pub fn set_custom_domain(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_domain(input);
            self
        }
        /// <p>A PEM-formatted HTTPS certificate. The value can be be a single, self-signed certificate, or a certificate chain. If you specify a
        /// custom certificate, you must also specify values for <code>CustomDomain</code> and <code>CustomPrivateKey</code>. The following are requirements for the <code>CustomCertificate</code> value:</p>
        /// <ul>
        /// <li>
        /// <p>You can provide either a self-signed, custom certificate, or the full certificate chain.</p>
        /// </li>
        /// <li>
        /// <p>The certificate must be a valid X509 certificate, or a certificate chain in PEM format.</p>
        /// </li>
        /// <li>
        /// <p>The certificate must be valid at the time of upload. A certificate can't be used before its validity period begins (the certificate's <code>NotBefore</code> date), or after it expires
        /// (the certificate's <code>NotAfter</code> date).</p>
        /// </li>
        /// <li>
        /// <p>The certificate’s common name or subject alternative names (SANs), if present, must match the value of <code>CustomDomain</code>.</p>
        /// </li>
        /// <li>
        /// <p>The certificate must match the value of <code>CustomPrivateKey</code>.</p>
        /// </li>
        /// </ul>
        pub fn custom_certificate(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_certificate(inp);
            self
        }
        /// <p>A PEM-formatted HTTPS certificate. The value can be be a single, self-signed certificate, or a certificate chain. If you specify a
        /// custom certificate, you must also specify values for <code>CustomDomain</code> and <code>CustomPrivateKey</code>. The following are requirements for the <code>CustomCertificate</code> value:</p>
        /// <ul>
        /// <li>
        /// <p>You can provide either a self-signed, custom certificate, or the full certificate chain.</p>
        /// </li>
        /// <li>
        /// <p>The certificate must be a valid X509 certificate, or a certificate chain in PEM format.</p>
        /// </li>
        /// <li>
        /// <p>The certificate must be valid at the time of upload. A certificate can't be used before its validity period begins (the certificate's <code>NotBefore</code> date), or after it expires
        /// (the certificate's <code>NotAfter</code> date).</p>
        /// </li>
        /// <li>
        /// <p>The certificate’s common name or subject alternative names (SANs), if present, must match the value of <code>CustomDomain</code>.</p>
        /// </li>
        /// <li>
        /// <p>The certificate must match the value of <code>CustomPrivateKey</code>.</p>
        /// </li>
        /// </ul>
        pub fn set_custom_certificate(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_certificate(input);
            self
        }
        /// <p>A private key in PEM format for connecting to the server by using HTTPS. The private key must not be encrypted; it cannot be protected by a password or passphrase.
        /// If you specify a custom private key, you must also specify values for <code>CustomDomain</code> and <code>CustomCertificate</code>.</p>
        pub fn custom_private_key(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_private_key(inp);
            self
        }
        /// <p>A private key in PEM format for connecting to the server by using HTTPS. The private key must not be encrypted; it cannot be protected by a password or passphrase.
        /// If you specify a custom private key, you must also specify values for <code>CustomDomain</code> and <code>CustomCertificate</code>.</p>
        pub fn set_custom_private_key(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_private_key(input);
            self
        }
        /// <p>
        /// Enable or disable scheduled backups. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>.
        /// </p>
        pub fn disable_automated_backup(mut self, inp: bool) -> Self {
            self.inner = self.inner.disable_automated_backup(inp);
            self
        }
        /// <p>
        /// Enable or disable scheduled backups. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>.
        /// </p>
        pub fn set_disable_automated_backup(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_disable_automated_backup(input);
            self
        }
        /// <p>
        /// The configuration management engine to use. Valid values include <code>ChefAutomate</code> and <code>Puppet</code>.
        /// </p>
        pub fn engine(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.engine(inp);
            self
        }
        /// <p>
        /// The configuration management engine to use. Valid values include <code>ChefAutomate</code> and <code>Puppet</code>.
        /// </p>
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_engine(input);
            self
        }
        /// <p>
        /// The engine model of the server. Valid values in this release include <code>Monolithic</code> for Puppet and <code>Single</code> for Chef.
        /// </p>
        pub fn engine_model(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.engine_model(inp);
            self
        }
        /// <p>
        /// The engine model of the server. Valid values in this release include <code>Monolithic</code> for Puppet and <code>Single</code> for Chef.
        /// </p>
        pub fn set_engine_model(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_engine_model(input);
            self
        }
        /// <p>
        /// The major release version of the engine that you want to use. For a Chef server, the valid value for EngineVersion
        /// is currently <code>2</code>. For a Puppet server, valid values are <code>2019</code> or <code>2017</code>.
        /// </p>
        pub fn engine_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.engine_version(inp);
            self
        }
        /// <p>
        /// The major release version of the engine that you want to use. For a Chef server, the valid value for EngineVersion
        /// is currently <code>2</code>. For a Puppet server, valid values are <code>2019</code> or <code>2017</code>.
        /// </p>
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_engine_version(input);
            self
        }
        /// Appends an item to `EngineAttributes`.
        ///
        /// To override the contents of this collection use [`set_engine_attributes`](Self::set_engine_attributes).
        ///
        /// <p>Optional engine attributes on a specified server.
        /// </p>
        /// <p class="title">
        /// <b>Attributes accepted in a Chef createServer request:</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_AUTOMATE_PIVOTAL_KEY</code>: A
        /// base64-encoded RSA public key. The corresponding private key is required to
        /// access the Chef API. When no CHEF_AUTOMATE_PIVOTAL_KEY is set, a private key is
        /// generated and returned in the response.
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CHEF_AUTOMATE_ADMIN_PASSWORD</code>:
        /// The password for the administrative user in the Chef Automate web-based dashboard. The
        /// password length is a minimum of eight characters, and a maximum of 32. The
        /// password can contain letters, numbers, and special characters
        /// (!/@#$%^&+=_). The password must contain at least one lower case letter, one upper
        /// case letter, one number, and one special character. When no CHEF_AUTOMATE_ADMIN_PASSWORD is set, one is
        /// generated and returned in the response.</p>
        /// </li>
        /// </ul>
        /// <p class="title">
        /// <b>Attributes accepted in a Puppet createServer request:</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>PUPPET_ADMIN_PASSWORD</code>: To work with the Puppet Enterprise console, a password must use ASCII characters.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PUPPET_R10K_REMOTE</code>: The r10k remote is the URL of your control repository
        /// (for example, ssh://git@your.git-repo.com:user/control-repo.git). Specifying an r10k remote opens TCP port 8170.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PUPPET_R10K_PRIVATE_KEY</code>: If you are using a private Git repository, add
        /// PUPPET_R10K_PRIVATE_KEY to specify a PEM-encoded private SSH key.</p>
        /// </li>
        /// </ul>
        pub fn engine_attributes(mut self, inp: impl Into<crate::model::EngineAttribute>) -> Self {
            self.inner = self.inner.engine_attributes(inp);
            self
        }
        /// <p>Optional engine attributes on a specified server.
        /// </p>
        /// <p class="title">
        /// <b>Attributes accepted in a Chef createServer request:</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_AUTOMATE_PIVOTAL_KEY</code>: A
        /// base64-encoded RSA public key. The corresponding private key is required to
        /// access the Chef API. When no CHEF_AUTOMATE_PIVOTAL_KEY is set, a private key is
        /// generated and returned in the response.
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CHEF_AUTOMATE_ADMIN_PASSWORD</code>:
        /// The password for the administrative user in the Chef Automate web-based dashboard. The
        /// password length is a minimum of eight characters, and a maximum of 32. The
        /// password can contain letters, numbers, and special characters
        /// (!/@#$%^&+=_). The password must contain at least one lower case letter, one upper
        /// case letter, one number, and one special character. When no CHEF_AUTOMATE_ADMIN_PASSWORD is set, one is
        /// generated and returned in the response.</p>
        /// </li>
        /// </ul>
        /// <p class="title">
        /// <b>Attributes accepted in a Puppet createServer request:</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>PUPPET_ADMIN_PASSWORD</code>: To work with the Puppet Enterprise console, a password must use ASCII characters.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PUPPET_R10K_REMOTE</code>: The r10k remote is the URL of your control repository
        /// (for example, ssh://git@your.git-repo.com:user/control-repo.git). Specifying an r10k remote opens TCP port 8170.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PUPPET_R10K_PRIVATE_KEY</code>: If you are using a private Git repository, add
        /// PUPPET_R10K_PRIVATE_KEY to specify a PEM-encoded private SSH key.</p>
        /// </li>
        /// </ul>
        pub fn set_engine_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EngineAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_engine_attributes(input);
            self
        }
        /// <p>
        /// The number of automated backups that you want to keep. Whenever a new backup is created, AWS OpsWorks CM deletes the oldest backups if this number is exceeded.
        /// The default value is <code>1</code>.
        /// </p>
        pub fn backup_retention_count(mut self, inp: i32) -> Self {
            self.inner = self.inner.backup_retention_count(inp);
            self
        }
        /// <p>
        /// The number of automated backups that you want to keep. Whenever a new backup is created, AWS OpsWorks CM deletes the oldest backups if this number is exceeded.
        /// The default value is <code>1</code>.
        /// </p>
        pub fn set_backup_retention_count(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_backup_retention_count(input);
            self
        }
        /// <p>
        /// The name of the server. The server name must be unique within your AWS account, within each region.
        /// Server names must start with a letter; then letters, numbers, or hyphens (-) are allowed, up to a maximum of 40 characters.
        /// </p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>
        /// The name of the server. The server name must be unique within your AWS account, within each region.
        /// Server names must start with a letter; then letters, numbers, or hyphens (-) are allowed, up to a maximum of 40 characters.
        /// </p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>
        /// The ARN of the instance profile that your Amazon EC2
        /// instances use. Although the AWS OpsWorks console typically creates
        /// the instance profile for you, if you are using API commands instead, run the service-role-creation.yaml
        /// AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml.
        /// This template creates a CloudFormation stack that includes the instance profile you need.
        ///
        /// </p>
        pub fn instance_profile_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_profile_arn(inp);
            self
        }
        /// <p>
        /// The ARN of the instance profile that your Amazon EC2
        /// instances use. Although the AWS OpsWorks console typically creates
        /// the instance profile for you, if you are using API commands instead, run the service-role-creation.yaml
        /// AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml.
        /// This template creates a CloudFormation stack that includes the instance profile you need.
        ///
        /// </p>
        pub fn set_instance_profile_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_profile_arn(input);
            self
        }
        /// <p>
        /// The Amazon EC2 instance type to use. For example, <code>m5.large</code>.
        /// </p>
        pub fn instance_type(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_type(inp);
            self
        }
        /// <p>
        /// The Amazon EC2 instance type to use. For example, <code>m5.large</code>.
        /// </p>
        pub fn set_instance_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_type(input);
            self
        }
        /// <p>
        /// The Amazon EC2 key pair to set for the instance. This parameter is optional; if desired, you may specify this parameter to connect to your instances by using SSH.
        /// </p>
        pub fn key_pair(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.key_pair(inp);
            self
        }
        /// <p>
        /// The Amazon EC2 key pair to set for the instance. This parameter is optional; if desired, you may specify this parameter to connect to your instances by using SSH.
        /// </p>
        pub fn set_key_pair(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_key_pair(input);
            self
        }
        /// <p>
        /// The start time for a one-hour period each week during which AWS OpsWorks CM performs maintenance on the instance.
        /// Valid values must be specified in the following format: <code>DDD:HH:MM</code>. <code>MM</code> must be specified as <code>00</code>. The specified time is in coordinated universal time (UTC).
        /// The default value is a random one-hour period on Tuesday, Wednesday, or Friday. See <code>TimeWindowDefinition</code> for more information.
        /// </p>
        /// <p>
        /// <b>Example:</b>
        /// <code>Mon:08:00</code>,
        /// which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.)
        /// </p>
        pub fn preferred_maintenance_window(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.preferred_maintenance_window(inp);
            self
        }
        /// <p>
        /// The start time for a one-hour period each week during which AWS OpsWorks CM performs maintenance on the instance.
        /// Valid values must be specified in the following format: <code>DDD:HH:MM</code>. <code>MM</code> must be specified as <code>00</code>. The specified time is in coordinated universal time (UTC).
        /// The default value is a random one-hour period on Tuesday, Wednesday, or Friday. See <code>TimeWindowDefinition</code> for more information.
        /// </p>
        /// <p>
        /// <b>Example:</b>
        /// <code>Mon:08:00</code>,
        /// which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.)
        /// </p>
        pub fn set_preferred_maintenance_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_preferred_maintenance_window(input);
            self
        }
        /// <p>
        /// The start time for a one-hour period during which AWS OpsWorks CM backs up application-level data on your server
        /// if automated backups are enabled. Valid values must be specified in one of the following formats:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>HH:MM</code> for daily backups</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DDD:HH:MM</code> for weekly backups</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <code>MM</code> must be specified as <code>00</code>. The specified time is in coordinated universal time (UTC). The default value is a random, daily start time.</p>
        /// <p>
        /// <b>Example:</b>
        /// <code>08:00</code>, which represents a daily start time of 08:00 UTC.</p>
        /// <p>
        /// <b>Example:</b>
        /// <code>Mon:08:00</code>, which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.)</p>
        pub fn preferred_backup_window(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.preferred_backup_window(inp);
            self
        }
        /// <p>
        /// The start time for a one-hour period during which AWS OpsWorks CM backs up application-level data on your server
        /// if automated backups are enabled. Valid values must be specified in one of the following formats:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>HH:MM</code> for daily backups</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DDD:HH:MM</code> for weekly backups</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <code>MM</code> must be specified as <code>00</code>. The specified time is in coordinated universal time (UTC). The default value is a random, daily start time.</p>
        /// <p>
        /// <b>Example:</b>
        /// <code>08:00</code>, which represents a daily start time of 08:00 UTC.</p>
        /// <p>
        /// <b>Example:</b>
        /// <code>Mon:08:00</code>, which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.)</p>
        pub fn set_preferred_backup_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_preferred_backup_window(input);
            self
        }
        /// Appends an item to `SecurityGroupIds`.
        ///
        /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
        ///
        /// <p>
        /// A list of security group IDs to attach to the Amazon EC2 instance. If you add this parameter, the specified security groups
        /// must be within the VPC that is specified by <code>SubnetIds</code>.
        /// </p>
        /// <p>
        /// If you do not specify this parameter, AWS OpsWorks CM creates one new security group that uses TCP ports 22 and 443, open to
        /// 0.0.0.0/0 (everyone).
        /// </p>
        pub fn security_group_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.security_group_ids(inp);
            self
        }
        /// <p>
        /// A list of security group IDs to attach to the Amazon EC2 instance. If you add this parameter, the specified security groups
        /// must be within the VPC that is specified by <code>SubnetIds</code>.
        /// </p>
        /// <p>
        /// If you do not specify this parameter, AWS OpsWorks CM creates one new security group that uses TCP ports 22 and 443, open to
        /// 0.0.0.0/0 (everyone).
        /// </p>
        pub fn set_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_security_group_ids(input);
            self
        }
        /// <p>
        /// The service role that the AWS OpsWorks CM service backend uses to work with your account. Although the AWS OpsWorks management console typically creates
        /// the service role for you, if you are using the AWS CLI or API commands,
        /// run the service-role-creation.yaml AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml.
        /// This template creates a CloudFormation stack that includes the service role and instance profile that you need.
        /// </p>
        pub fn service_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_role_arn(inp);
            self
        }
        /// <p>
        /// The service role that the AWS OpsWorks CM service backend uses to work with your account. Although the AWS OpsWorks management console typically creates
        /// the service role for you, if you are using the AWS CLI or API commands,
        /// run the service-role-creation.yaml AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml.
        /// This template creates a CloudFormation stack that includes the service role and instance profile that you need.
        /// </p>
        pub fn set_service_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_role_arn(input);
            self
        }
        /// Appends an item to `SubnetIds`.
        ///
        /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
        ///
        /// <p>
        /// The IDs of subnets in which to launch the server EC2 instance.
        /// </p>
        /// <p>
        /// Amazon EC2-Classic customers: This field is required. All servers must run within a VPC. The VPC must have "Auto Assign Public IP" enabled.
        /// </p>
        /// <p>
        /// EC2-VPC customers: This field is optional. If you do not specify subnet IDs, your EC2 instances are created in a default subnet that is selected by Amazon EC2. If you specify subnet IDs, the VPC must have "Auto Assign Public IP" enabled.
        /// </p>
        /// <p>For more information about supported Amazon EC2 platforms, see
        /// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a>.</p>
        pub fn subnet_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnet_ids(inp);
            self
        }
        /// <p>
        /// The IDs of subnets in which to launch the server EC2 instance.
        /// </p>
        /// <p>
        /// Amazon EC2-Classic customers: This field is required. All servers must run within a VPC. The VPC must have "Auto Assign Public IP" enabled.
        /// </p>
        /// <p>
        /// EC2-VPC customers: This field is optional. If you do not specify subnet IDs, your EC2 instances are created in a default subnet that is selected by Amazon EC2. If you specify subnet IDs, the VPC must have "Auto Assign Public IP" enabled.
        /// </p>
        /// <p>For more information about supported Amazon EC2 platforms, see
        /// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a>.</p>
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_subnet_ids(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map that contains tag keys and tag values to attach to an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server.</p>
        /// <ul>
        /// <li>
        /// <p>The key cannot be empty.</p>
        /// </li>
        /// <li>
        /// <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : / @</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : / @</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
        /// </li>
        /// <li>
        /// <p>A maximum of 50 user-applied tags is allowed for any AWS OpsWorks-CM server.</p>
        /// </li>
        /// </ul>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>A map that contains tag keys and tag values to attach to an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server.</p>
        /// <ul>
        /// <li>
        /// <p>The key cannot be empty.</p>
        /// </li>
        /// <li>
        /// <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : / @</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : / @</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
        /// </li>
        /// <li>
        /// <p>A maximum of 50 user-applied tags is allowed for any AWS OpsWorks-CM server.</p>
        /// </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>
        /// If you specify this field, AWS OpsWorks CM creates the server by using the backup represented by BackupId.
        /// </p>
        pub fn backup_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_id(inp);
            self
        }
        /// <p>
        /// If you specify this field, AWS OpsWorks CM creates the server by using the backup represented by BackupId.
        /// </p>
        pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_backup_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteBackup`.
    ///
    /// <p>
    /// Deletes a backup. You can delete both manual and automated backups. This operation is asynchronous.
    /// </p>
    /// <p>
    /// An <code>InvalidStateException</code> is thrown when a backup deletion is already in progress.
    /// A <code>ResourceNotFoundException</code> is thrown when the backup does not exist.
    /// A <code>ValidationException</code> is thrown when parameters of the request are not valid.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteBackup<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_backup_input::Builder,
    }
    impl<C, M, R> DeleteBackup<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteBackup`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteBackupOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteBackupError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteBackupInputOperationOutputAlias,
                crate::output::DeleteBackupOutput,
                crate::error::DeleteBackupError,
                crate::input::DeleteBackupInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the backup to delete. Run the DescribeBackups command to get a list of backup IDs.
        /// Backup IDs are in the format <code>ServerName-yyyyMMddHHmmssSSS</code>.
        /// </p>
        pub fn backup_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_id(inp);
            self
        }
        /// <p>The ID of the backup to delete. Run the DescribeBackups command to get a list of backup IDs.
        /// Backup IDs are in the format <code>ServerName-yyyyMMddHHmmssSSS</code>.
        /// </p>
        pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_backup_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteServer`.
    ///
    /// <p>
    /// Deletes the server and the underlying AWS CloudFormation stacks
    /// (including the server's EC2 instance). When you run this command, the server state is updated
    /// to <code>DELETING</code>. After the server is deleted, it is no longer returned by
    /// <code>DescribeServer</code> requests. If the AWS CloudFormation stack cannot be deleted, the server cannot be deleted.
    /// </p>
    /// <p>
    /// This operation is asynchronous.
    /// </p>
    /// <p>
    /// An <code>InvalidStateException</code> is thrown when a server deletion is already in progress.
    /// A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
    /// A <code>ValidationException</code> is raised when parameters of the request are not valid.
    /// </p>
    /// <p>
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteServer<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_server_input::Builder,
    }
    impl<C, M, R> DeleteServer<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteServer`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteServerOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteServerError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteServerInputOperationOutputAlias,
                crate::output::DeleteServerOutput,
                crate::error::DeleteServerError,
                crate::input::DeleteServerInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the server to delete.</p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>The ID of the server to delete.</p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeAccountAttributes`.
    ///
    /// <p>
    /// Describes your OpsWorks-CM account attributes.
    /// </p>
    /// <p>
    /// This operation is synchronous.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeAccountAttributes<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_account_attributes_input::Builder,
    }
    impl<C, M, R> DescribeAccountAttributes<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeAccountAttributes`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeAccountAttributesOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeAccountAttributesInputOperationOutputAlias,
                crate::output::DescribeAccountAttributesOutput,
                crate::error::DescribeAccountAttributesError,
                crate::input::DescribeAccountAttributesInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
    }
    /// Fluent builder constructing a request to `DescribeBackups`.
    ///
    /// <p>
    /// Describes backups. The results are ordered by time, with newest backups first.
    /// If you do not specify a BackupId or ServerName, the command returns all backups.
    /// </p>
    /// <p>
    /// This operation is synchronous.
    /// </p>
    /// <p>
    /// A <code>ResourceNotFoundException</code> is thrown when the backup does not exist.
    /// A <code>ValidationException</code> is raised when parameters of the request are not valid.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeBackups<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_backups_input::Builder,
    }
    impl<C, M, R> DescribeBackups<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeBackups`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeBackupsOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeBackupsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeBackupsInputOperationOutputAlias,
                crate::output::DescribeBackupsOutput,
                crate::error::DescribeBackupsError,
                crate::input::DescribeBackupsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Describes a single backup.
        /// </p>
        pub fn backup_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_id(inp);
            self
        }
        /// <p>Describes a single backup.
        /// </p>
        pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_backup_id(input);
            self
        }
        /// <p>Returns backups for the server with the specified ServerName.
        /// </p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>Returns backups for the server with the specified ServerName.
        /// </p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeEvents`.
    ///
    /// <p>
    /// Describes events for a specified server. Results are ordered by time, with newest events first.
    /// </p>
    /// <p>
    /// This operation is synchronous.
    /// </p>
    /// <p>
    /// A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
    /// A <code>ValidationException</code> is raised when parameters of the request are not valid.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeEvents<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_events_input::Builder,
    }
    impl<C, M, R> DescribeEvents<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeEvents`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeEventsOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeEventsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeEventsInputOperationOutputAlias,
                crate::output::DescribeEventsOutput,
                crate::error::DescribeEventsError,
                crate::input::DescribeEventsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server for which you want to view events.</p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>The name of the server for which you want to view events.</p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>NextToken is a string that is returned in some command responses. It indicates that
        /// not all entries have been returned, and that you must run at least one more request to get remaining
        /// items. To get remaining results, call <code>DescribeEvents</code> again, and assign the token from the previous
        /// results as the value of the <code>nextToken</code> parameter. If there are no more results,
        /// the response object's <code>nextToken</code> parameter value is <code>null</code>.
        /// Setting a <code>nextToken</code> value that was not returned in
        /// your previous results causes an <code>InvalidNextTokenException</code> to occur.
        /// </p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>NextToken is a string that is returned in some command responses. It indicates that
        /// not all entries have been returned, and that you must run at least one more request to get remaining
        /// items. To get remaining results, call <code>DescribeEvents</code> again, and assign the token from the previous
        /// results as the value of the <code>nextToken</code> parameter. If there are no more results,
        /// the response object's <code>nextToken</code> parameter value is <code>null</code>.
        /// Setting a <code>nextToken</code> value that was not returned in
        /// your previous results causes an <code>InvalidNextTokenException</code> to occur.
        /// </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>To receive a paginated response, use this parameter to specify the maximum number
        /// of results to be returned with a single call. If the number of available results exceeds
        /// this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code>
        /// request parameter to get the next set of results.
        /// </p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>To receive a paginated response, use this parameter to specify the maximum number
        /// of results to be returned with a single call. If the number of available results exceeds
        /// this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code>
        /// request parameter to get the next set of results.
        /// </p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeNodeAssociationStatus`.
    ///
    /// <p>
    /// Returns the current status of an existing association or disassociation request.
    /// </p>
    /// <p>
    /// A <code>ResourceNotFoundException</code> is thrown when no recent association or disassociation request with the specified token is found,
    /// or when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeNodeAssociationStatus<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_node_association_status_input::Builder,
    }
    impl<C, M, R> DescribeNodeAssociationStatus<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeNodeAssociationStatus`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeNodeAssociationStatusOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeNodeAssociationStatusError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeNodeAssociationStatusInputOperationOutputAlias,
                crate::output::DescribeNodeAssociationStatusOutput,
                crate::error::DescribeNodeAssociationStatusError,
                crate::input::DescribeNodeAssociationStatusInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The token returned in either the AssociateNodeResponse or the DisassociateNodeResponse.
        /// </p>
        pub fn node_association_status_token(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.node_association_status_token(inp);
            self
        }
        /// <p>The token returned in either the AssociateNodeResponse or the DisassociateNodeResponse.
        /// </p>
        pub fn set_node_association_status_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_node_association_status_token(input);
            self
        }
        /// <p>The name of the server from which to disassociate the node.
        /// </p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>The name of the server from which to disassociate the node.
        /// </p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeServers`.
    ///
    /// <p>
    /// Lists all configuration management servers that are identified with your account.
    /// Only the stored results from Amazon DynamoDB
    /// are returned. AWS OpsWorks CM does not query other services.
    /// </p>
    /// <p>
    /// This operation is synchronous.
    /// </p>
    /// <p>
    /// A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
    /// A <code>ValidationException</code> is raised when parameters of the request are not valid.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeServers<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_servers_input::Builder,
    }
    impl<C, M, R> DescribeServers<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeServers`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeServersOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeServersError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeServersInputOperationOutputAlias,
                crate::output::DescribeServersOutput,
                crate::error::DescribeServersError,
                crate::input::DescribeServersInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Describes the server with the specified ServerName.</p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>Describes the server with the specified ServerName.</p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeServers</code> requests.
        /// </p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeServers</code> requests.
        /// </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeServers</code> requests.
        /// </p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeServers</code> requests.
        /// </p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DisassociateNode`.
    ///
    /// <p>
    /// Disassociates a node from an AWS OpsWorks CM server, and removes the node from the server's managed nodes. After a node is disassociated,
    /// the node key pair is no longer valid for accessing the configuration manager's API. For more information about how to associate a node, see <a>AssociateNode</a>.
    /// </p>
    /// <p>A node can can only be disassociated from a server that is in a <code>HEALTHY</code> state. Otherwise, an <code>InvalidStateException</code> is thrown.
    /// A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
    /// A <code>ValidationException</code> is raised when parameters of the request are not valid.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct DisassociateNode<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::disassociate_node_input::Builder,
    }
    impl<C, M, R> DisassociateNode<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DisassociateNode`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateNodeOutput,
            aws_smithy_http::result::SdkError<crate::error::DisassociateNodeError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DisassociateNodeInputOperationOutputAlias,
                crate::output::DisassociateNodeOutput,
                crate::error::DisassociateNodeError,
                crate::input::DisassociateNodeInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server from which to disassociate the node.
        /// </p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>The name of the server from which to disassociate the node.
        /// </p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>The name of the client node.
        /// </p>
        pub fn node_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.node_name(inp);
            self
        }
        /// <p>The name of the client node.
        /// </p>
        pub fn set_node_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_node_name(input);
            self
        }
        /// Appends an item to `EngineAttributes`.
        ///
        /// To override the contents of this collection use [`set_engine_attributes`](Self::set_engine_attributes).
        ///
        /// <p>Engine attributes that are used for disassociating the node. No attributes are required for Puppet.
        /// </p>
        /// <p class="title">
        /// <b>Attributes required in a DisassociateNode request for Chef</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_ORGANIZATION</code>: The Chef organization
        /// with which the node was associated. By default only one organization
        /// named <code>default</code> can exist.
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine_attributes(mut self, inp: impl Into<crate::model::EngineAttribute>) -> Self {
            self.inner = self.inner.engine_attributes(inp);
            self
        }
        /// <p>Engine attributes that are used for disassociating the node. No attributes are required for Puppet.
        /// </p>
        /// <p class="title">
        /// <b>Attributes required in a DisassociateNode request for Chef</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_ORGANIZATION</code>: The Chef organization
        /// with which the node was associated. By default only one organization
        /// named <code>default</code> can exist.
        /// </p>
        /// </li>
        /// </ul>
        pub fn set_engine_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EngineAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_engine_attributes(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ExportServerEngineAttribute`.
    ///
    /// <p>
    /// Exports a specified server engine attribute as a base64-encoded string. For example, you can export user data that you can use in EC2 to associate nodes with a server.
    /// </p>
    /// <p>
    /// This operation is synchronous.
    /// </p>
    /// <p>
    /// A <code>ValidationException</code> is raised when parameters of the request are not valid.
    /// A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
    /// An <code>InvalidStateException</code> is thrown when the server is in any of the following states: CREATING, TERMINATED,
    /// FAILED or DELETING.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct ExportServerEngineAttribute<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::export_server_engine_attribute_input::Builder,
    }
    impl<C, M, R> ExportServerEngineAttribute<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ExportServerEngineAttribute`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExportServerEngineAttributeOutput,
            aws_smithy_http::result::SdkError<crate::error::ExportServerEngineAttributeError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ExportServerEngineAttributeInputOperationOutputAlias,
                crate::output::ExportServerEngineAttributeOutput,
                crate::error::ExportServerEngineAttributeError,
                crate::input::ExportServerEngineAttributeInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the export attribute. Currently, the supported export attribute is <code>Userdata</code>.
        /// This exports a user data script that includes parameters and values provided in the <code>InputAttributes</code> list.</p>
        pub fn export_attribute_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.export_attribute_name(inp);
            self
        }
        /// <p>The name of the export attribute. Currently, the supported export attribute is <code>Userdata</code>.
        /// This exports a user data script that includes parameters and values provided in the <code>InputAttributes</code> list.</p>
        pub fn set_export_attribute_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_export_attribute_name(input);
            self
        }
        /// <p>The name of the server from which you are exporting the attribute.</p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>The name of the server from which you are exporting the attribute.</p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// Appends an item to `InputAttributes`.
        ///
        /// To override the contents of this collection use [`set_input_attributes`](Self::set_input_attributes).
        ///
        /// <p>The list of engine attributes. The list type is <code>EngineAttribute</code>. An <code>EngineAttribute</code> list item
        /// is a pair that includes an attribute name and its value. For the <code>Userdata</code> ExportAttributeName, the following are
        /// supported engine attribute names.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>RunList</b> In Chef, a list of roles or recipes that are run in the specified order.
        /// In Puppet, this parameter is ignored.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>OrganizationName</b> In Chef, an organization name. AWS OpsWorks for Chef Automate
        /// always creates the organization <code>default</code>. In Puppet, this parameter is ignored.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>NodeEnvironment</b> In Chef, a node environment (for example, development, staging, or one-box).
        /// In Puppet, this parameter is ignored.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>NodeClientVersion</b> In Chef, the version of the Chef engine (three numbers separated
        /// by dots, such as 13.8.5). If this attribute is empty, OpsWorks for Chef Automate uses the most current version. In Puppet,
        /// this parameter is ignored.</p>
        /// </li>
        /// </ul>
        pub fn input_attributes(mut self, inp: impl Into<crate::model::EngineAttribute>) -> Self {
            self.inner = self.inner.input_attributes(inp);
            self
        }
        /// <p>The list of engine attributes. The list type is <code>EngineAttribute</code>. An <code>EngineAttribute</code> list item
        /// is a pair that includes an attribute name and its value. For the <code>Userdata</code> ExportAttributeName, the following are
        /// supported engine attribute names.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>RunList</b> In Chef, a list of roles or recipes that are run in the specified order.
        /// In Puppet, this parameter is ignored.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>OrganizationName</b> In Chef, an organization name. AWS OpsWorks for Chef Automate
        /// always creates the organization <code>default</code>. In Puppet, this parameter is ignored.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>NodeEnvironment</b> In Chef, a node environment (for example, development, staging, or one-box).
        /// In Puppet, this parameter is ignored.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>NodeClientVersion</b> In Chef, the version of the Chef engine (three numbers separated
        /// by dots, such as 13.8.5). If this attribute is empty, OpsWorks for Chef Automate uses the most current version. In Puppet,
        /// this parameter is ignored.</p>
        /// </li>
        /// </ul>
        pub fn set_input_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EngineAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_input_attributes(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTagsForResource`.
    ///
    /// <p>Returns a list of tags that are applied to the specified AWS OpsWorks for Chef Automate or
    /// AWS OpsWorks for Puppet Enterprise servers or backups.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C, M, R> ListTagsForResource<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListTagsForResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTagsForResourceInputOperationOutputAlias,
                crate::output::ListTagsForResourceOutput,
                crate::error::ListTagsForResourceError,
                crate::input::ListTagsForResourceInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Number (ARN) of an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server for which you want to show applied tags. For example,
        /// <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        /// <p>The Amazon Resource Number (ARN) of an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server for which you want to show applied tags. For example,
        /// <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>NextToken is a string that is returned in some command responses. It indicates that
        /// not all entries have been returned, and that you must run at least one more request to get remaining
        /// items. To get remaining results, call <code>ListTagsForResource</code> again, and assign the token from the previous
        /// results as the value of the <code>nextToken</code> parameter. If there are no more results,
        /// the response object's <code>nextToken</code> parameter value is <code>null</code>.
        /// Setting a <code>nextToken</code> value that was not returned in
        /// your previous results causes an <code>InvalidNextTokenException</code> to occur.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>NextToken is a string that is returned in some command responses. It indicates that
        /// not all entries have been returned, and that you must run at least one more request to get remaining
        /// items. To get remaining results, call <code>ListTagsForResource</code> again, and assign the token from the previous
        /// results as the value of the <code>nextToken</code> parameter. If there are no more results,
        /// the response object's <code>nextToken</code> parameter value is <code>null</code>.
        /// Setting a <code>nextToken</code> value that was not returned in
        /// your previous results causes an <code>InvalidNextTokenException</code> to occur.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>To receive a paginated response, use this parameter to specify the maximum number
        /// of results to be returned with a single call. If the number of available results exceeds
        /// this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code>
        /// request parameter to get the next set of results.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>To receive a paginated response, use this parameter to specify the maximum number
        /// of results to be returned with a single call. If the number of available results exceeds
        /// this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code>
        /// request parameter to get the next set of results.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RestoreServer`.
    ///
    /// <p>
    /// Restores a backup to a server that is in a <code>CONNECTION_LOST</code>, <code>HEALTHY</code>, <code>RUNNING</code>, <code>UNHEALTHY</code>, or <code>TERMINATED</code> state.
    /// When you run RestoreServer, the server's EC2 instance is deleted, and a new EC2 instance is configured. RestoreServer maintains
    /// the existing server endpoint, so configuration management of the server's client devices (nodes) should continue to work.
    /// </p>
    /// <p>Restoring from a backup is performed by creating a new EC2 instance. If restoration is successful, and the server is in a <code>HEALTHY</code> state,
    /// AWS OpsWorks CM switches traffic over to the new instance. After restoration is finished, the old EC2 instance is maintained in a
    /// <code>Running</code> or <code>Stopped</code> state, but is eventually terminated.</p>
    /// <p>
    /// This operation is asynchronous.
    /// </p>
    /// <p>
    /// An <code>InvalidStateException</code> is thrown when the server is not in a valid state. A <code>ResourceNotFoundException</code> is thrown
    /// when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct RestoreServer<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::restore_server_input::Builder,
    }
    impl<C, M, R> RestoreServer<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `RestoreServer`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RestoreServerOutput,
            aws_smithy_http::result::SdkError<crate::error::RestoreServerError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RestoreServerInputOperationOutputAlias,
                crate::output::RestoreServerOutput,
                crate::error::RestoreServerError,
                crate::input::RestoreServerInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p> The ID of the backup that you want to use to restore a server.
        /// </p>
        pub fn backup_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_id(inp);
            self
        }
        /// <p> The ID of the backup that you want to use to restore a server.
        /// </p>
        pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_backup_id(input);
            self
        }
        /// <p> The name of the server that you want to restore.
        /// </p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p> The name of the server that you want to restore.
        /// </p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p> The type of instance to restore. Valid values must be specified in the following format: <code>^([cm][34]|t2).*</code>
        /// For example, <code>m5.large</code>. Valid values are <code>m5.large</code>, <code>r5.xlarge</code>, and <code>r5.2xlarge</code>. If you do not specify this parameter,
        /// RestoreServer uses the instance type from the specified backup.
        /// </p>
        pub fn instance_type(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_type(inp);
            self
        }
        /// <p> The type of instance to restore. Valid values must be specified in the following format: <code>^([cm][34]|t2).*</code>
        /// For example, <code>m5.large</code>. Valid values are <code>m5.large</code>, <code>r5.xlarge</code>, and <code>r5.2xlarge</code>. If you do not specify this parameter,
        /// RestoreServer uses the instance type from the specified backup.
        /// </p>
        pub fn set_instance_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_type(input);
            self
        }
        /// <p> The name of the key pair to set on the new EC2 instance. This can be helpful
        /// if the administrator no longer has the SSH key.
        /// </p>
        pub fn key_pair(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.key_pair(inp);
            self
        }
        /// <p> The name of the key pair to set on the new EC2 instance. This can be helpful
        /// if the administrator no longer has the SSH key.
        /// </p>
        pub fn set_key_pair(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_key_pair(input);
            self
        }
    }
    /// Fluent builder constructing a request to `StartMaintenance`.
    ///
    /// <p>
    /// Manually starts server maintenance. This command can be useful if an earlier maintenance attempt failed, and the underlying
    /// cause of maintenance failure has been resolved. The server is in an <code>UNDER_MAINTENANCE</code> state while maintenance is in progress.
    /// </p>
    /// <p>
    /// Maintenance can only be started on servers in <code>HEALTHY</code> and <code>UNHEALTHY</code> states. Otherwise, an <code>InvalidStateException</code> is thrown.
    /// A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct StartMaintenance<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_maintenance_input::Builder,
    }
    impl<C, M, R> StartMaintenance<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `StartMaintenance`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartMaintenanceOutput,
            aws_smithy_http::result::SdkError<crate::error::StartMaintenanceError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartMaintenanceInputOperationOutputAlias,
                crate::output::StartMaintenanceOutput,
                crate::error::StartMaintenanceError,
                crate::input::StartMaintenanceInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server on which to run maintenance.
        /// </p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>The name of the server on which to run maintenance.
        /// </p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// Appends an item to `EngineAttributes`.
        ///
        /// To override the contents of this collection use [`set_engine_attributes`](Self::set_engine_attributes).
        ///
        /// <p>Engine attributes that are specific to the server on which you want to run maintenance.</p>
        /// <p class="title">
        /// <b>Attributes accepted in a StartMaintenance request for Chef</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_MAJOR_UPGRADE</code>: If a Chef Automate server is eligible for upgrade to Chef Automate 2,
        /// add this engine attribute to a <code>StartMaintenance</code> request and set the value to <code>true</code> to upgrade the server to Chef Automate 2. For more information, see
        /// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opscm-a2upgrade.html">Upgrade an AWS OpsWorks for Chef Automate Server to Chef Automate 2</a>.
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine_attributes(mut self, inp: impl Into<crate::model::EngineAttribute>) -> Self {
            self.inner = self.inner.engine_attributes(inp);
            self
        }
        /// <p>Engine attributes that are specific to the server on which you want to run maintenance.</p>
        /// <p class="title">
        /// <b>Attributes accepted in a StartMaintenance request for Chef</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_MAJOR_UPGRADE</code>: If a Chef Automate server is eligible for upgrade to Chef Automate 2,
        /// add this engine attribute to a <code>StartMaintenance</code> request and set the value to <code>true</code> to upgrade the server to Chef Automate 2. For more information, see
        /// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opscm-a2upgrade.html">Upgrade an AWS OpsWorks for Chef Automate Server to Chef Automate 2</a>.
        /// </p>
        /// </li>
        /// </ul>
        pub fn set_engine_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EngineAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_engine_attributes(input);
            self
        }
    }
    /// Fluent builder constructing a request to `TagResource`.
    ///
    /// <p>Applies tags to an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server, or to server backups.</p>
    #[derive(std::fmt::Debug)]
    pub struct TagResource<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C, M, R> TagResource<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `TagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TagResourceInputOperationOutputAlias,
                crate::output::TagResourceOutput,
                crate::error::TagResourceError,
                crate::input::TagResourceInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Number (ARN) of a resource to which you want to apply tags. For example,
        /// <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        /// <p>The Amazon Resource Number (ARN) of a resource to which you want to apply tags. For example,
        /// <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map that contains tag keys and tag values to attach to AWS OpsWorks-CM servers or backups.</p>
        /// <ul>
        /// <li>
        /// <p>The key cannot be empty.</p>
        /// </li>
        /// <li>
        /// <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
        /// </li>
        /// <li>
        /// <p>A maximum of 50 user-applied tags is allowed for any AWS OpsWorks-CM server or backup.</p>
        /// </li>
        /// </ul>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>A map that contains tag keys and tag values to attach to AWS OpsWorks-CM servers or backups.</p>
        /// <ul>
        /// <li>
        /// <p>The key cannot be empty.</p>
        /// </li>
        /// <li>
        /// <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
        /// </li>
        /// <li>
        /// <p>A maximum of 50 user-applied tags is allowed for any AWS OpsWorks-CM server or backup.</p>
        /// </li>
        /// </ul>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UntagResource`.
    ///
    /// <p>Removes specified tags from an AWS OpsWorks-CM server or backup.</p>
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C, M, R> UntagResource<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UntagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UntagResourceInputOperationOutputAlias,
                crate::output::UntagResourceOutput,
                crate::error::UntagResourceError,
                crate::input::UntagResourceInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Number (ARN) of a resource from which you want to remove tags. For example,
        /// <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        /// <p>The Amazon Resource Number (ARN) of a resource from which you want to remove tags. For example,
        /// <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        ///
        /// <p>The keys of tags that you want to remove.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        /// <p>The keys of tags that you want to remove.</p>
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateServer`.
    ///
    /// <p>
    /// Updates settings for a server.
    /// </p>
    /// <p>
    /// This operation is synchronous.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateServer<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_server_input::Builder,
    }
    impl<C, M, R> UpdateServer<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateServer`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateServerOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateServerError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateServerInputOperationOutputAlias,
                crate::output::UpdateServerOutput,
                crate::error::UpdateServerError,
                crate::input::UpdateServerInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Setting DisableAutomatedBackup to <code>true</code> disables automated or scheduled backups. Automated backups are enabled by default.
        /// </p>
        pub fn disable_automated_backup(mut self, inp: bool) -> Self {
            self.inner = self.inner.disable_automated_backup(inp);
            self
        }
        /// <p>Setting DisableAutomatedBackup to <code>true</code> disables automated or scheduled backups. Automated backups are enabled by default.
        /// </p>
        pub fn set_disable_automated_backup(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_disable_automated_backup(input);
            self
        }
        /// <p>Sets the number of automated backups that you want to keep.
        /// </p>
        pub fn backup_retention_count(mut self, inp: i32) -> Self {
            self.inner = self.inner.backup_retention_count(inp);
            self
        }
        /// <p>Sets the number of automated backups that you want to keep.
        /// </p>
        pub fn set_backup_retention_count(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_backup_retention_count(input);
            self
        }
        /// <p>The name of the server to update.
        /// </p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>The name of the server to update.
        /// </p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>
        /// <code>DDD:HH:MM</code> (weekly start time) or
        /// <code>HH:MM</code> (daily start time).
        /// </p>
        /// <p>
        /// Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>,
        /// <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
        pub fn preferred_maintenance_window(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.preferred_maintenance_window(inp);
            self
        }
        /// <p>
        /// <code>DDD:HH:MM</code> (weekly start time) or
        /// <code>HH:MM</code> (daily start time).
        /// </p>
        /// <p>
        /// Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>,
        /// <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
        pub fn set_preferred_maintenance_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_preferred_maintenance_window(input);
            self
        }
        /// <p>
        /// <code>DDD:HH:MM</code> (weekly start time) or
        /// <code>HH:MM</code> (daily start time).
        /// </p>
        /// <p>
        /// Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>,
        /// <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
        pub fn preferred_backup_window(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.preferred_backup_window(inp);
            self
        }
        /// <p>
        /// <code>DDD:HH:MM</code> (weekly start time) or
        /// <code>HH:MM</code> (daily start time).
        /// </p>
        /// <p>
        /// Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>,
        /// <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
        pub fn set_preferred_backup_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_preferred_backup_window(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateServerEngineAttributes`.
    ///
    /// <p>
    /// Updates engine-specific attributes on a specified server. The server
    /// enters the <code>MODIFYING</code> state when this operation
    /// is in progress. Only one update can occur at a time.
    /// You can use this command to reset a Chef server's public key (<code>CHEF_PIVOTAL_KEY</code>) or a Puppet server's
    /// admin password (<code>PUPPET_ADMIN_PASSWORD</code>).
    /// </p>
    /// <p>
    /// This operation is asynchronous.
    /// </p>
    /// <p>
    /// This operation can only be called for servers in <code>HEALTHY</code> or <code>UNHEALTHY</code> states. Otherwise, an <code>InvalidStateException</code> is raised.
    /// A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateServerEngineAttributes<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_server_engine_attributes_input::Builder,
    }
    impl<C, M, R> UpdateServerEngineAttributes<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateServerEngineAttributes`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateServerEngineAttributesOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateServerEngineAttributesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateServerEngineAttributesInputOperationOutputAlias,
                crate::output::UpdateServerEngineAttributesOutput,
                crate::error::UpdateServerEngineAttributesError,
                crate::input::UpdateServerEngineAttributesInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server to update.
        /// </p>
        pub fn server_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(inp);
            self
        }
        /// <p>The name of the server to update.
        /// </p>
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>The name of the engine attribute to update.
        /// </p>
        pub fn attribute_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.attribute_name(inp);
            self
        }
        /// <p>The name of the engine attribute to update.
        /// </p>
        pub fn set_attribute_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_attribute_name(input);
            self
        }
        /// <p>The value to set for the attribute.
        /// </p>
        pub fn attribute_value(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.attribute_value(inp);
            self
        }
        /// <p>The value to set for the attribute.
        /// </p>
        pub fn set_attribute_value(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_attribute_value(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, aws_smithy_client::retry::Standard> {
    /// Creates a client with the given service config and connector override.
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut client = aws_hyper::Client::new(conn)
            .with_retry_config(retry_config.into())
            .with_timeout_config(timeout_config);

        client.set_sleep_impl(sleep_impl);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        aws_smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        aws_smithy_client::retry::Standard,
    >
{
    /// Creates a new client from a shared config.
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut client = aws_hyper::Client::https()
            .with_retry_config(retry_config.into())
            .with_timeout_config(timeout_config);

        client.set_sleep_impl(sleep_impl);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
