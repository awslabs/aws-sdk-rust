// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn associate_node(&self) -> fluent_builders::AssociateNode<C> {
        fluent_builders::AssociateNode::new(self.handle.clone())
    }
    pub fn create_backup(&self) -> fluent_builders::CreateBackup<C> {
        fluent_builders::CreateBackup::new(self.handle.clone())
    }
    pub fn create_server(&self) -> fluent_builders::CreateServer<C> {
        fluent_builders::CreateServer::new(self.handle.clone())
    }
    pub fn delete_backup(&self) -> fluent_builders::DeleteBackup<C> {
        fluent_builders::DeleteBackup::new(self.handle.clone())
    }
    pub fn delete_server(&self) -> fluent_builders::DeleteServer<C> {
        fluent_builders::DeleteServer::new(self.handle.clone())
    }
    pub fn describe_account_attributes(&self) -> fluent_builders::DescribeAccountAttributes<C> {
        fluent_builders::DescribeAccountAttributes::new(self.handle.clone())
    }
    pub fn describe_backups(&self) -> fluent_builders::DescribeBackups<C> {
        fluent_builders::DescribeBackups::new(self.handle.clone())
    }
    pub fn describe_events(&self) -> fluent_builders::DescribeEvents<C> {
        fluent_builders::DescribeEvents::new(self.handle.clone())
    }
    pub fn describe_node_association_status(
        &self,
    ) -> fluent_builders::DescribeNodeAssociationStatus<C> {
        fluent_builders::DescribeNodeAssociationStatus::new(self.handle.clone())
    }
    pub fn describe_servers(&self) -> fluent_builders::DescribeServers<C> {
        fluent_builders::DescribeServers::new(self.handle.clone())
    }
    pub fn disassociate_node(&self) -> fluent_builders::DisassociateNode<C> {
        fluent_builders::DisassociateNode::new(self.handle.clone())
    }
    pub fn export_server_engine_attribute(
        &self,
    ) -> fluent_builders::ExportServerEngineAttribute<C> {
        fluent_builders::ExportServerEngineAttribute::new(self.handle.clone())
    }
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    pub fn restore_server(&self) -> fluent_builders::RestoreServer<C> {
        fluent_builders::RestoreServer::new(self.handle.clone())
    }
    pub fn start_maintenance(&self) -> fluent_builders::StartMaintenance<C> {
        fluent_builders::StartMaintenance::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_server(&self) -> fluent_builders::UpdateServer<C> {
        fluent_builders::UpdateServer::new(self.handle.clone())
    }
    pub fn update_server_engine_attributes(
        &self,
    ) -> fluent_builders::UpdateServerEngineAttributes<C> {
        fluent_builders::UpdateServerEngineAttributes::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AssociateNode<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::associate_node_input::Builder,
    }
    impl<C> AssociateNode<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateNodeOutput,
            smithy_http::result::SdkError<crate::error::AssociateNodeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server with which to associate the node.
        /// </p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>The name of the node.
        /// </p>
        pub fn node_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.node_name(input);
            self
        }
        pub fn set_node_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_node_name(input);
            self
        }
        /// <p>Engine attributes used for associating the node.
        /// </p>
        /// <p class="title">
        /// <b>Attributes accepted in a AssociateNode request for Chef</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_ORGANIZATION</code>: The Chef organization
        /// with which the node is associated. By default only one organization
        /// named <code>default</code> can exist.
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CHEF_NODE_PUBLIC_KEY</code>: A PEM-formatted public key. This key is required for the <code>chef-client</code> agent to access the Chef API.
        /// </p>
        /// </li>
        /// </ul>
        /// <p class="title">
        /// <b>Attributes accepted in a AssociateNode request for Puppet</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>PUPPET_NODE_CSR</code>: A PEM-formatted certificate-signing request (CSR) that is created by the node.
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine_attributes(mut self, inp: impl Into<crate::model::EngineAttribute>) -> Self {
            self.inner = self.inner.engine_attributes(inp);
            self
        }
        pub fn set_engine_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EngineAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_engine_attributes(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateBackup<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_backup_input::Builder,
    }
    impl<C> CreateBackup<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateBackupOutput,
            smithy_http::result::SdkError<crate::error::CreateBackupError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server that you want to back up.
        /// </p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>
        /// A user-defined description of the backup.
        /// </p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>A map that contains tag keys and tag values to attach to an AWS OpsWorks-CM server backup.</p>
        /// <ul>
        /// <li>
        /// <p>The key cannot be empty.</p>
        /// </li>
        /// <li>
        /// <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
        /// </li>
        /// <li>
        /// <p>A maximum of 50 user-applied tags is allowed for tag-supported AWS OpsWorks-CM resources.</p>
        /// </li>
        /// </ul>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateServer<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_server_input::Builder,
    }
    impl<C> CreateServer<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateServerOutput,
            smithy_http::result::SdkError<crate::error::CreateServerError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>
        /// Associate a public IP address with a server that you are launching. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>.
        /// </p>
        pub fn associate_public_ip_address(mut self, input: bool) -> Self {
            self.inner = self.inner.associate_public_ip_address(input);
            self
        }
        pub fn set_associate_public_ip_address(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_associate_public_ip_address(input);
            self
        }
        /// <p>An optional public endpoint of a server, such as <code>https://aws.my-company.com</code>. To access the server, create a CNAME DNS record in your preferred DNS service that points the custom
        /// domain to the endpoint that is generated when the server is created (the value of the CreateServer Endpoint attribute). You cannot access the server by using the
        /// generated <code>Endpoint</code> value if the server is using a custom domain. If you specify a custom domain, you must also specify values for <code>CustomCertificate</code>
        /// and <code>CustomPrivateKey</code>.</p>
        pub fn custom_domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_domain(input);
            self
        }
        pub fn set_custom_domain(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_domain(input);
            self
        }
        /// <p>A PEM-formatted HTTPS certificate. The value can be be a single, self-signed certificate, or a certificate chain. If you specify a
        /// custom certificate, you must also specify values for <code>CustomDomain</code> and <code>CustomPrivateKey</code>. The following are requirements for the <code>CustomCertificate</code> value:</p>
        /// <ul>
        /// <li>
        /// <p>You can provide either a self-signed, custom certificate, or the full certificate chain.</p>
        /// </li>
        /// <li>
        /// <p>The certificate must be a valid X509 certificate, or a certificate chain in PEM format.</p>
        /// </li>
        /// <li>
        /// <p>The certificate must be valid at the time of upload. A certificate can't be used before its validity period begins (the certificate's <code>NotBefore</code> date), or after it expires
        /// (the certificate's <code>NotAfter</code> date).</p>
        /// </li>
        /// <li>
        /// <p>The certificate’s common name or subject alternative names (SANs), if present, must match the value of <code>CustomDomain</code>.</p>
        /// </li>
        /// <li>
        /// <p>The certificate must match the value of <code>CustomPrivateKey</code>.</p>
        /// </li>
        /// </ul>
        pub fn custom_certificate(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_certificate(input);
            self
        }
        pub fn set_custom_certificate(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_certificate(input);
            self
        }
        /// <p>A private key in PEM format for connecting to the server by using HTTPS. The private key must not be encrypted; it cannot be protected by a password or passphrase.
        /// If you specify a custom private key, you must also specify values for <code>CustomDomain</code> and <code>CustomCertificate</code>.</p>
        pub fn custom_private_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_private_key(input);
            self
        }
        pub fn set_custom_private_key(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_private_key(input);
            self
        }
        /// <p>
        /// Enable or disable scheduled backups. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>.
        /// </p>
        pub fn disable_automated_backup(mut self, input: bool) -> Self {
            self.inner = self.inner.disable_automated_backup(input);
            self
        }
        pub fn set_disable_automated_backup(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_disable_automated_backup(input);
            self
        }
        /// <p>
        /// The configuration management engine to use. Valid values include <code>ChefAutomate</code> and <code>Puppet</code>.
        /// </p>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.engine(input);
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_engine(input);
            self
        }
        /// <p>
        /// The engine model of the server. Valid values in this release include <code>Monolithic</code> for Puppet and <code>Single</code> for Chef.
        /// </p>
        pub fn engine_model(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.engine_model(input);
            self
        }
        pub fn set_engine_model(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_engine_model(input);
            self
        }
        /// <p>
        /// The major release version of the engine that you want to use. For a Chef server, the valid value for EngineVersion
        /// is currently <code>2</code>. For a Puppet server, valid values are <code>2019</code> or <code>2017</code>.
        /// </p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.engine_version(input);
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_engine_version(input);
            self
        }
        /// <p>Optional engine attributes on a specified server.
        /// </p>
        /// <p class="title">
        /// <b>Attributes accepted in a Chef createServer request:</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_AUTOMATE_PIVOTAL_KEY</code>: A
        /// base64-encoded RSA public key. The corresponding private key is required to
        /// access the Chef API. When no CHEF_AUTOMATE_PIVOTAL_KEY is set, a private key is
        /// generated and returned in the response.
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CHEF_AUTOMATE_ADMIN_PASSWORD</code>:
        /// The password for the administrative user in the Chef Automate web-based dashboard. The
        /// password length is a minimum of eight characters, and a maximum of 32. The
        /// password can contain letters, numbers, and special characters
        /// (!/@#$%^&+=_). The password must contain at least one lower case letter, one upper
        /// case letter, one number, and one special character. When no CHEF_AUTOMATE_ADMIN_PASSWORD is set, one is
        /// generated and returned in the response.</p>
        /// </li>
        /// </ul>
        /// <p class="title">
        /// <b>Attributes accepted in a Puppet createServer request:</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>PUPPET_ADMIN_PASSWORD</code>: To work with the Puppet Enterprise console, a password must use ASCII characters.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PUPPET_R10K_REMOTE</code>: The r10k remote is the URL of your control repository
        /// (for example, ssh://git@your.git-repo.com:user/control-repo.git). Specifying an r10k remote opens TCP port 8170.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PUPPET_R10K_PRIVATE_KEY</code>: If you are using a private Git repository, add
        /// PUPPET_R10K_PRIVATE_KEY to specify a PEM-encoded private SSH key.</p>
        /// </li>
        /// </ul>
        pub fn engine_attributes(mut self, inp: impl Into<crate::model::EngineAttribute>) -> Self {
            self.inner = self.inner.engine_attributes(inp);
            self
        }
        pub fn set_engine_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EngineAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_engine_attributes(input);
            self
        }
        /// <p>
        /// The number of automated backups that you want to keep. Whenever a new backup is created, AWS OpsWorks CM deletes the oldest backups if this number is exceeded.
        /// The default value is <code>1</code>.
        /// </p>
        pub fn backup_retention_count(mut self, input: i32) -> Self {
            self.inner = self.inner.backup_retention_count(input);
            self
        }
        pub fn set_backup_retention_count(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_backup_retention_count(input);
            self
        }
        /// <p>
        /// The name of the server. The server name must be unique within your AWS account, within each region.
        /// Server names must start with a letter; then letters, numbers, or hyphens (-) are allowed, up to a maximum of 40 characters.
        /// </p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>
        /// The ARN of the instance profile that your Amazon EC2
        /// instances use. Although the AWS OpsWorks console typically creates
        /// the instance profile for you, if you are using API commands instead, run the service-role-creation.yaml
        /// AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml.
        /// This template creates a CloudFormation stack that includes the instance profile you need.
        /// </p>
        pub fn instance_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_profile_arn(input);
            self
        }
        pub fn set_instance_profile_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_profile_arn(input);
            self
        }
        /// <p>
        /// The Amazon EC2 instance type to use. For example, <code>m5.large</code>.
        /// </p>
        pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_type(input);
            self
        }
        pub fn set_instance_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_type(input);
            self
        }
        /// <p>
        /// The Amazon EC2 key pair to set for the instance. This parameter is optional; if desired, you may specify this parameter to connect to your instances by using SSH.
        /// </p>
        pub fn key_pair(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.key_pair(input);
            self
        }
        pub fn set_key_pair(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_key_pair(input);
            self
        }
        /// <p>
        /// The start time for a one-hour period each week during which AWS OpsWorks CM performs maintenance on the instance.
        /// Valid values must be specified in the following format: <code>DDD:HH:MM</code>. <code>MM</code> must be specified as <code>00</code>. The specified time is in coordinated universal time (UTC).
        /// The default value is a random one-hour period on Tuesday, Wednesday, or Friday. See <code>TimeWindowDefinition</code> for more information.
        /// </p>
        /// <p>
        /// <b>Example:</b>
        /// <code>Mon:08:00</code>,
        /// which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.)
        /// </p>
        pub fn preferred_maintenance_window(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.preferred_maintenance_window(input);
            self
        }
        pub fn set_preferred_maintenance_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_preferred_maintenance_window(input);
            self
        }
        /// <p>
        /// The start time for a one-hour period during which AWS OpsWorks CM backs up application-level data on your server
        /// if automated backups are enabled. Valid values must be specified in one of the following formats:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>HH:MM</code> for daily backups</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DDD:HH:MM</code> for weekly backups</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <code>MM</code> must be specified as <code>00</code>. The specified time is in coordinated universal time (UTC). The default value is a random, daily start time.</p>
        /// <p>
        /// <b>Example:</b>
        /// <code>08:00</code>, which represents a daily start time of 08:00 UTC.</p>
        /// <p>
        /// <b>Example:</b>
        /// <code>Mon:08:00</code>, which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.)</p>
        pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.preferred_backup_window(input);
            self
        }
        pub fn set_preferred_backup_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_preferred_backup_window(input);
            self
        }
        /// <p>
        /// A list of security group IDs to attach to the Amazon EC2 instance. If you add this parameter, the specified security groups
        /// must be within the VPC that is specified by <code>SubnetIds</code>.
        /// </p>
        /// <p>
        /// If you do not specify this parameter, AWS OpsWorks CM creates one new security group that uses TCP ports 22 and 443, open to
        /// 0.0.0.0/0 (everyone).
        /// </p>
        pub fn security_group_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.security_group_ids(inp);
            self
        }
        pub fn set_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_security_group_ids(input);
            self
        }
        /// <p>
        /// The service role that the AWS OpsWorks CM service backend uses to work with your account. Although the AWS OpsWorks management console typically creates
        /// the service role for you, if you are using the AWS CLI or API commands,
        /// run the service-role-creation.yaml AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml.
        /// This template creates a CloudFormation stack that includes the service role and instance profile that you need.
        /// </p>
        pub fn service_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_role_arn(input);
            self
        }
        pub fn set_service_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_role_arn(input);
            self
        }
        /// <p>
        /// The IDs of subnets in which to launch the server EC2 instance.
        /// </p>
        /// <p>
        /// Amazon EC2-Classic customers: This field is required. All servers must run within a VPC. The VPC must have "Auto Assign Public IP" enabled.
        /// </p>
        /// <p>
        /// EC2-VPC customers: This field is optional. If you do not specify subnet IDs, your EC2 instances are created in a default subnet that is selected by Amazon EC2. If you specify subnet IDs, the VPC must have "Auto Assign Public IP" enabled.
        /// </p>
        /// <p>For more information about supported Amazon EC2 platforms, see
        /// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a>.</p>
        pub fn subnet_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnet_ids(inp);
            self
        }
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_subnet_ids(input);
            self
        }
        /// <p>A map that contains tag keys and tag values to attach to an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server.</p>
        /// <ul>
        /// <li>
        /// <p>The key cannot be empty.</p>
        /// </li>
        /// <li>
        /// <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : / @</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : / @</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
        /// </li>
        /// <li>
        /// <p>A maximum of 50 user-applied tags is allowed for any AWS OpsWorks-CM server.</p>
        /// </li>
        /// </ul>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>
        /// If you specify this field, AWS OpsWorks CM creates the server by using the backup represented by BackupId.
        /// </p>
        pub fn backup_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_id(input);
            self
        }
        pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_backup_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteBackup<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_backup_input::Builder,
    }
    impl<C> DeleteBackup<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteBackupOutput,
            smithy_http::result::SdkError<crate::error::DeleteBackupError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the backup to delete. Run the DescribeBackups command to get a list of backup IDs.
        /// Backup IDs are in the format <code>ServerName-yyyyMMddHHmmssSSS</code>.
        /// </p>
        pub fn backup_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_id(input);
            self
        }
        pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_backup_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteServer<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_server_input::Builder,
    }
    impl<C> DeleteServer<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteServerOutput,
            smithy_http::result::SdkError<crate::error::DeleteServerError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the server to delete.</p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeAccountAttributes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_account_attributes_input::Builder,
    }
    impl<C> DescribeAccountAttributes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeAccountAttributesOutput,
            smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeBackups<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_backups_input::Builder,
    }
    impl<C> DescribeBackups<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeBackupsOutput,
            smithy_http::result::SdkError<crate::error::DescribeBackupsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Describes a single backup.
        /// </p>
        pub fn backup_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_id(input);
            self
        }
        pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_backup_id(input);
            self
        }
        /// <p>Returns backups for the server with the specified ServerName.
        /// </p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeEvents<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_events_input::Builder,
    }
    impl<C> DescribeEvents<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeEventsOutput,
            smithy_http::result::SdkError<crate::error::DescribeEventsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server for which you want to view events.</p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>NextToken is a string that is returned in some command responses. It indicates that
        /// not all entries have been returned, and that you must run at least one more request to get remaining
        /// items. To get remaining results, call <code>DescribeEvents</code> again, and assign the token from the previous
        /// results as the value of the <code>nextToken</code> parameter. If there are no more results,
        /// the response object's <code>nextToken</code> parameter value is <code>null</code>.
        /// Setting a <code>nextToken</code> value that was not returned in
        /// your previous results causes an <code>InvalidNextTokenException</code> to occur.
        /// </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>To receive a paginated response, use this parameter to specify the maximum number
        /// of results to be returned with a single call. If the number of available results exceeds
        /// this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code>
        /// request parameter to get the next set of results.
        /// </p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeNodeAssociationStatus<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_node_association_status_input::Builder,
    }
    impl<C> DescribeNodeAssociationStatus<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeNodeAssociationStatusOutput,
            smithy_http::result::SdkError<crate::error::DescribeNodeAssociationStatusError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The token returned in either the AssociateNodeResponse or the DisassociateNodeResponse.
        /// </p>
        pub fn node_association_status_token(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.node_association_status_token(input);
            self
        }
        pub fn set_node_association_status_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_node_association_status_token(input);
            self
        }
        /// <p>The name of the server from which to disassociate the node.
        /// </p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeServers<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_servers_input::Builder,
    }
    impl<C> DescribeServers<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeServersOutput,
            smithy_http::result::SdkError<crate::error::DescribeServersError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Describes the server with the specified ServerName.</p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeServers</code> requests.
        /// </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>This is not currently implemented for <code>DescribeServers</code> requests.
        /// </p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateNode<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::disassociate_node_input::Builder,
    }
    impl<C> DisassociateNode<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateNodeOutput,
            smithy_http::result::SdkError<crate::error::DisassociateNodeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server from which to disassociate the node.
        /// </p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>The name of the client node.
        /// </p>
        pub fn node_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.node_name(input);
            self
        }
        pub fn set_node_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_node_name(input);
            self
        }
        /// <p>Engine attributes that are used for disassociating the node. No attributes are required for Puppet.
        /// </p>
        /// <p class="title">
        /// <b>Attributes required in a DisassociateNode request for Chef</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_ORGANIZATION</code>: The Chef organization
        /// with which the node was associated. By default only one organization
        /// named <code>default</code> can exist.
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine_attributes(mut self, inp: impl Into<crate::model::EngineAttribute>) -> Self {
            self.inner = self.inner.engine_attributes(inp);
            self
        }
        pub fn set_engine_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EngineAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_engine_attributes(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExportServerEngineAttribute<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::export_server_engine_attribute_input::Builder,
    }
    impl<C> ExportServerEngineAttribute<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExportServerEngineAttributeOutput,
            smithy_http::result::SdkError<crate::error::ExportServerEngineAttributeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the export attribute. Currently, the supported export attribute is <code>Userdata</code>.
        /// This exports a user data script that includes parameters and values provided in the <code>InputAttributes</code> list.</p>
        pub fn export_attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.export_attribute_name(input);
            self
        }
        pub fn set_export_attribute_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_export_attribute_name(input);
            self
        }
        /// <p>The name of the server from which you are exporting the attribute.</p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>The list of engine attributes. The list type is <code>EngineAttribute</code>. An <code>EngineAttribute</code> list item
        /// is a pair that includes an attribute name and its value. For the <code>Userdata</code> ExportAttributeName, the following are
        /// supported engine attribute names.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>RunList</b> In Chef, a list of roles or recipes that are run in the specified order.
        /// In Puppet, this parameter is ignored.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>OrganizationName</b> In Chef, an organization name. AWS OpsWorks for Chef Automate
        /// always creates the organization <code>default</code>. In Puppet, this parameter is ignored.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>NodeEnvironment</b> In Chef, a node environment (for example, development, staging, or one-box).
        /// In Puppet, this parameter is ignored.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>NodeClientVersion</b> In Chef, the version of the Chef engine (three numbers separated
        /// by dots, such as 13.8.5). If this attribute is empty, OpsWorks for Chef Automate uses the most current version. In Puppet,
        /// this parameter is ignored.</p>
        /// </li>
        /// </ul>
        pub fn input_attributes(mut self, inp: impl Into<crate::model::EngineAttribute>) -> Self {
            self.inner = self.inner.input_attributes(inp);
            self
        }
        pub fn set_input_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EngineAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_input_attributes(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C> ListTagsForResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Number (ARN) of an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server for which you want to show applied tags. For example,
        /// <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>NextToken is a string that is returned in some command responses. It indicates that
        /// not all entries have been returned, and that you must run at least one more request to get remaining
        /// items. To get remaining results, call <code>ListTagsForResource</code> again, and assign the token from the previous
        /// results as the value of the <code>nextToken</code> parameter. If there are no more results,
        /// the response object's <code>nextToken</code> parameter value is <code>null</code>.
        /// Setting a <code>nextToken</code> value that was not returned in
        /// your previous results causes an <code>InvalidNextTokenException</code> to occur.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>To receive a paginated response, use this parameter to specify the maximum number
        /// of results to be returned with a single call. If the number of available results exceeds
        /// this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code>
        /// request parameter to get the next set of results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RestoreServer<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::restore_server_input::Builder,
    }
    impl<C> RestoreServer<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RestoreServerOutput,
            smithy_http::result::SdkError<crate::error::RestoreServerError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p> The ID of the backup that you want to use to restore a server.
        /// </p>
        pub fn backup_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_id(input);
            self
        }
        pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_backup_id(input);
            self
        }
        /// <p> The name of the server that you want to restore.
        /// </p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p> The type of instance to restore. Valid values must be specified in the following format: <code>^([cm][34]|t2).*</code>
        /// For example, <code>m5.large</code>. Valid values are <code>m5.large</code>, <code>r5.xlarge</code>, and <code>r5.2xlarge</code>. If you do not specify this parameter,
        /// RestoreServer uses the instance type from the specified backup.
        /// </p>
        pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_type(input);
            self
        }
        pub fn set_instance_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_type(input);
            self
        }
        /// <p> The name of the key pair to set on the new EC2 instance. This can be helpful
        /// if the administrator no longer has the SSH key.
        /// </p>
        pub fn key_pair(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.key_pair(input);
            self
        }
        pub fn set_key_pair(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_key_pair(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartMaintenance<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::start_maintenance_input::Builder,
    }
    impl<C> StartMaintenance<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartMaintenanceOutput,
            smithy_http::result::SdkError<crate::error::StartMaintenanceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server on which to run maintenance.
        /// </p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>Engine attributes that are specific to the server on which you want to run maintenance.</p>
        /// <p class="title">
        /// <b>Attributes accepted in a StartMaintenance request for Chef</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CHEF_MAJOR_UPGRADE</code>: If a Chef Automate server is eligible for upgrade to Chef Automate 2,
        /// add this engine attribute to a <code>StartMaintenance</code> request and set the value to <code>true</code> to upgrade the server to Chef Automate 2. For more information, see
        /// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opscm-a2upgrade.html">Upgrade an AWS OpsWorks for Chef Automate Server to Chef Automate 2</a>.
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine_attributes(mut self, inp: impl Into<crate::model::EngineAttribute>) -> Self {
            self.inner = self.inner.engine_attributes(inp);
            self
        }
        pub fn set_engine_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EngineAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_engine_attributes(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C> TagResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Number (ARN) of a resource to which you want to apply tags. For example,
        /// <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>A map that contains tag keys and tag values to attach to AWS OpsWorks-CM servers or backups.</p>
        /// <ul>
        /// <li>
        /// <p>The key cannot be empty.</p>
        /// </li>
        /// <li>
        /// <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
        /// </li>
        /// <li>
        /// <p>A maximum of 50 user-applied tags is allowed for any AWS OpsWorks-CM server or backup.</p>
        /// </li>
        /// </ul>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C> UntagResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Number (ARN) of a resource from which you want to remove tags. For example,
        /// <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>The keys of tags that you want to remove.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateServer<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_server_input::Builder,
    }
    impl<C> UpdateServer<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateServerOutput,
            smithy_http::result::SdkError<crate::error::UpdateServerError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Setting DisableAutomatedBackup to <code>true</code> disables automated or scheduled backups. Automated backups are enabled by default.
        /// </p>
        pub fn disable_automated_backup(mut self, input: bool) -> Self {
            self.inner = self.inner.disable_automated_backup(input);
            self
        }
        pub fn set_disable_automated_backup(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_disable_automated_backup(input);
            self
        }
        /// <p>Sets the number of automated backups that you want to keep.
        /// </p>
        pub fn backup_retention_count(mut self, input: i32) -> Self {
            self.inner = self.inner.backup_retention_count(input);
            self
        }
        pub fn set_backup_retention_count(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_backup_retention_count(input);
            self
        }
        /// <p>The name of the server to update.
        /// </p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>
        /// <code>DDD:HH:MM</code> (weekly start time) or
        /// <code>HH:MM</code> (daily start time).
        /// </p>
        /// <p>
        /// Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>,
        /// <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
        pub fn preferred_maintenance_window(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.preferred_maintenance_window(input);
            self
        }
        pub fn set_preferred_maintenance_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_preferred_maintenance_window(input);
            self
        }
        /// <p>
        /// <code>DDD:HH:MM</code> (weekly start time) or
        /// <code>HH:MM</code> (daily start time).
        /// </p>
        /// <p>
        /// Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>,
        /// <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
        pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.preferred_backup_window(input);
            self
        }
        pub fn set_preferred_backup_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_preferred_backup_window(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateServerEngineAttributes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_server_engine_attributes_input::Builder,
    }
    impl<C> UpdateServerEngineAttributes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateServerEngineAttributesOutput,
            smithy_http::result::SdkError<crate::error::UpdateServerEngineAttributesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the server to update.
        /// </p>
        pub fn server_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_name(input);
            self
        }
        pub fn set_server_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_name(input);
            self
        }
        /// <p>The name of the engine attribute to update.
        /// </p>
        pub fn attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.attribute_name(input);
            self
        }
        pub fn set_attribute_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_attribute_name(input);
            self
        }
        /// <p>The value to set for the attribute.
        /// </p>
        pub fn attribute_value(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.attribute_value(input);
            self
        }
        pub fn set_attribute_value(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_attribute_value(input);
            self
        }
    }
}
