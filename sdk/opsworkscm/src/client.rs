// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS OpsWorks CM
///
/// Client for invoking operations on AWS OpsWorks CM. Each operation on AWS OpsWorks CM is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_opsworkscm::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_opsworkscm::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_opsworkscm::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AssociateNode`](crate::client::fluent_builders::AssociateNode) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::AssociateNode::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::AssociateNode::set_server_name): <p>The name of the server with which to associate the node. </p>
    ///   - [`node_name(impl Into<String>)`](crate::client::fluent_builders::AssociateNode::node_name) / [`set_node_name(Option<String>)`](crate::client::fluent_builders::AssociateNode::set_node_name): <p>The name of the node. </p>
    ///   - [`engine_attributes(Vec<EngineAttribute>)`](crate::client::fluent_builders::AssociateNode::engine_attributes) / [`set_engine_attributes(Option<Vec<EngineAttribute>>)`](crate::client::fluent_builders::AssociateNode::set_engine_attributes): <p>Engine attributes used for associating the node. </p>  <p class="title"> <b>Attributes accepted in a AssociateNode request for Chef</b> </p>  <ul>   <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node is associated. By default only one organization named <code>default</code> can exist. </p> </li>   <li> <p> <code>CHEF_NODE_PUBLIC_KEY</code>: A PEM-formatted public key. This key is required for the <code>chef-client</code> agent to access the Chef API. </p> </li>  </ul>  <p class="title"> <b>Attributes accepted in a AssociateNode request for Puppet</b> </p>  <ul>   <li> <p> <code>PUPPET_NODE_CSR</code>: A PEM-formatted certificate-signing request (CSR) that is created by the node. </p> </li>  </ul>
    /// - On success, responds with [`AssociateNodeOutput`](crate::output::AssociateNodeOutput) with field(s):
    ///   - [`node_association_status_token(Option<String>)`](crate::output::AssociateNodeOutput::node_association_status_token): <p>Contains a token which can be passed to the <code>DescribeNodeAssociationStatus</code> API call to get the status of the association request. </p>
    /// - On failure, responds with [`SdkError<AssociateNodeError>`](crate::error::AssociateNodeError)
    pub fn associate_node(&self) -> crate::client::fluent_builders::AssociateNode {
        crate::client::fluent_builders::AssociateNode::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateBackup`](crate::client::fluent_builders::CreateBackup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::CreateBackup::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::CreateBackup::set_server_name): <p>The name of the server that you want to back up. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateBackup::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateBackup::set_description): <p> A user-defined description of the backup. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateBackup::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateBackup::set_tags): <p>A map that contains tag keys and tag values to attach to an AWS OpsWorks-CM server backup.</p>  <ul>   <li> <p>The key cannot be empty.</p> </li>   <li> <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code> </p> </li>   <li> <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code> </p> </li>   <li> <p>Leading and trailing white spaces are trimmed from both the key and value.</p> </li>   <li> <p>A maximum of 50 user-applied tags is allowed for tag-supported AWS OpsWorks-CM resources.</p> </li>  </ul>
    /// - On success, responds with [`CreateBackupOutput`](crate::output::CreateBackupOutput) with field(s):
    ///   - [`backup(Option<Backup>)`](crate::output::CreateBackupOutput::backup): <p>Backup created by request.</p>
    /// - On failure, responds with [`SdkError<CreateBackupError>`](crate::error::CreateBackupError)
    pub fn create_backup(&self) -> crate::client::fluent_builders::CreateBackup {
        crate::client::fluent_builders::CreateBackup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateServer`](crate::client::fluent_builders::CreateServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`associate_public_ip_address(bool)`](crate::client::fluent_builders::CreateServer::associate_public_ip_address) / [`set_associate_public_ip_address(Option<bool>)`](crate::client::fluent_builders::CreateServer::set_associate_public_ip_address): <p> Associate a public IP address with a server that you are launching. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>. </p>
    ///   - [`custom_domain(impl Into<String>)`](crate::client::fluent_builders::CreateServer::custom_domain) / [`set_custom_domain(Option<String>)`](crate::client::fluent_builders::CreateServer::set_custom_domain): <p>An optional public endpoint of a server, such as <code>https://aws.my-company.com</code>. To access the server, create a CNAME DNS record in your preferred DNS service that points the custom domain to the endpoint that is generated when the server is created (the value of the CreateServer Endpoint attribute). You cannot access the server by using the generated <code>Endpoint</code> value if the server is using a custom domain. If you specify a custom domain, you must also specify values for <code>CustomCertificate</code> and <code>CustomPrivateKey</code>.</p>
    ///   - [`custom_certificate(impl Into<String>)`](crate::client::fluent_builders::CreateServer::custom_certificate) / [`set_custom_certificate(Option<String>)`](crate::client::fluent_builders::CreateServer::set_custom_certificate): <p>A PEM-formatted HTTPS certificate. The value can be be a single, self-signed certificate, or a certificate chain. If you specify a custom certificate, you must also specify values for <code>CustomDomain</code> and <code>CustomPrivateKey</code>. The following are requirements for the <code>CustomCertificate</code> value:</p>  <ul>   <li> <p>You can provide either a self-signed, custom certificate, or the full certificate chain.</p> </li>   <li> <p>The certificate must be a valid X509 certificate, or a certificate chain in PEM format.</p> </li>   <li> <p>The certificate must be valid at the time of upload. A certificate can't be used before its validity period begins (the certificate's <code>NotBefore</code> date), or after it expires (the certificate's <code>NotAfter</code> date).</p> </li>   <li> <p>The certificateâ€™s common name or subject alternative names (SANs), if present, must match the value of <code>CustomDomain</code>.</p> </li>   <li> <p>The certificate must match the value of <code>CustomPrivateKey</code>.</p> </li>  </ul>
    ///   - [`custom_private_key(impl Into<String>)`](crate::client::fluent_builders::CreateServer::custom_private_key) / [`set_custom_private_key(Option<String>)`](crate::client::fluent_builders::CreateServer::set_custom_private_key): <p>A private key in PEM format for connecting to the server by using HTTPS. The private key must not be encrypted; it cannot be protected by a password or passphrase. If you specify a custom private key, you must also specify values for <code>CustomDomain</code> and <code>CustomCertificate</code>.</p>
    ///   - [`disable_automated_backup(bool)`](crate::client::fluent_builders::CreateServer::disable_automated_backup) / [`set_disable_automated_backup(Option<bool>)`](crate::client::fluent_builders::CreateServer::set_disable_automated_backup): <p> Enable or disable scheduled backups. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>. </p>
    ///   - [`engine(impl Into<String>)`](crate::client::fluent_builders::CreateServer::engine) / [`set_engine(Option<String>)`](crate::client::fluent_builders::CreateServer::set_engine): <p> The configuration management engine to use. Valid values include <code>ChefAutomate</code> and <code>Puppet</code>. </p>
    ///   - [`engine_model(impl Into<String>)`](crate::client::fluent_builders::CreateServer::engine_model) / [`set_engine_model(Option<String>)`](crate::client::fluent_builders::CreateServer::set_engine_model): <p> The engine model of the server. Valid values in this release include <code>Monolithic</code> for Puppet and <code>Single</code> for Chef. </p>
    ///   - [`engine_version(impl Into<String>)`](crate::client::fluent_builders::CreateServer::engine_version) / [`set_engine_version(Option<String>)`](crate::client::fluent_builders::CreateServer::set_engine_version): <p> The major release version of the engine that you want to use. For a Chef server, the valid value for EngineVersion is currently <code>2</code>. For a Puppet server, valid values are <code>2019</code> or <code>2017</code>. </p>
    ///   - [`engine_attributes(Vec<EngineAttribute>)`](crate::client::fluent_builders::CreateServer::engine_attributes) / [`set_engine_attributes(Option<Vec<EngineAttribute>>)`](crate::client::fluent_builders::CreateServer::set_engine_attributes): <p>Optional engine attributes on a specified server. </p>  <p class="title"> <b>Attributes accepted in a Chef createServer request:</b> </p>  <ul>   <li> <p> <code>CHEF_AUTOMATE_PIVOTAL_KEY</code>: A base64-encoded RSA public key. The corresponding private key is required to access the Chef API. When no CHEF_AUTOMATE_PIVOTAL_KEY is set, a private key is generated and returned in the response. </p> </li>   <li> <p> <code>CHEF_AUTOMATE_ADMIN_PASSWORD</code>: The password for the administrative user in the Chef Automate web-based dashboard. The password length is a minimum of eight characters, and a maximum of 32. The password can contain letters, numbers, and special characters (!/@#$%^&amp;+=_). The password must contain at least one lower case letter, one upper case letter, one number, and one special character. When no CHEF_AUTOMATE_ADMIN_PASSWORD is set, one is generated and returned in the response.</p> </li>  </ul>  <p class="title"> <b>Attributes accepted in a Puppet createServer request:</b> </p>  <ul>   <li> <p> <code>PUPPET_ADMIN_PASSWORD</code>: To work with the Puppet Enterprise console, a password must use ASCII characters.</p> </li>   <li> <p> <code>PUPPET_R10K_REMOTE</code>: The r10k remote is the URL of your control repository (for example, ssh://git@your.git-repo.com:user/control-repo.git). Specifying an r10k remote opens TCP port 8170.</p> </li>   <li> <p> <code>PUPPET_R10K_PRIVATE_KEY</code>: If you are using a private Git repository, add PUPPET_R10K_PRIVATE_KEY to specify a PEM-encoded private SSH key.</p> </li>  </ul>
    ///   - [`backup_retention_count(i32)`](crate::client::fluent_builders::CreateServer::backup_retention_count) / [`set_backup_retention_count(Option<i32>)`](crate::client::fluent_builders::CreateServer::set_backup_retention_count): <p> The number of automated backups that you want to keep. Whenever a new backup is created, AWS OpsWorks CM deletes the oldest backups if this number is exceeded. The default value is <code>1</code>. </p>
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::CreateServer::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::CreateServer::set_server_name): <p> The name of the server. The server name must be unique within your AWS account, within each region. Server names must start with a letter; then letters, numbers, or hyphens (-) are allowed, up to a maximum of 40 characters. </p>
    ///   - [`instance_profile_arn(impl Into<String>)`](crate::client::fluent_builders::CreateServer::instance_profile_arn) / [`set_instance_profile_arn(Option<String>)`](crate::client::fluent_builders::CreateServer::set_instance_profile_arn): <p> The ARN of the instance profile that your Amazon EC2 instances use. Although the AWS OpsWorks console typically creates the instance profile for you, if you are using API commands instead, run the service-role-creation.yaml AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml. This template creates a CloudFormation stack that includes the instance profile you need. </p>
    ///   - [`instance_type(impl Into<String>)`](crate::client::fluent_builders::CreateServer::instance_type) / [`set_instance_type(Option<String>)`](crate::client::fluent_builders::CreateServer::set_instance_type): <p> The Amazon EC2 instance type to use. For example, <code>m5.large</code>. </p>
    ///   - [`key_pair(impl Into<String>)`](crate::client::fluent_builders::CreateServer::key_pair) / [`set_key_pair(Option<String>)`](crate::client::fluent_builders::CreateServer::set_key_pair): <p> The Amazon EC2 key pair to set for the instance. This parameter is optional; if desired, you may specify this parameter to connect to your instances by using SSH. </p>
    ///   - [`preferred_maintenance_window(impl Into<String>)`](crate::client::fluent_builders::CreateServer::preferred_maintenance_window) / [`set_preferred_maintenance_window(Option<String>)`](crate::client::fluent_builders::CreateServer::set_preferred_maintenance_window): <p> The start time for a one-hour period each week during which AWS OpsWorks CM performs maintenance on the instance. Valid values must be specified in the following format: <code>DDD:HH:MM</code>. <code>MM</code> must be specified as <code>00</code>. The specified time is in coordinated universal time (UTC). The default value is a random one-hour period on Tuesday, Wednesday, or Friday. See <code>TimeWindowDefinition</code> for more information. </p>  <p> <b>Example:</b> <code>Mon:08:00</code>, which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.) </p>
    ///   - [`preferred_backup_window(impl Into<String>)`](crate::client::fluent_builders::CreateServer::preferred_backup_window) / [`set_preferred_backup_window(Option<String>)`](crate::client::fluent_builders::CreateServer::set_preferred_backup_window): <p> The start time for a one-hour period during which AWS OpsWorks CM backs up application-level data on your server if automated backups are enabled. Valid values must be specified in one of the following formats: </p>  <ul>   <li> <p> <code>HH:MM</code> for daily backups</p> </li>   <li> <p> <code>DDD:HH:MM</code> for weekly backups</p> </li>  </ul>  <p> <code>MM</code> must be specified as <code>00</code>. The specified time is in coordinated universal time (UTC). The default value is a random, daily start time.</p>  <p> <b>Example:</b> <code>08:00</code>, which represents a daily start time of 08:00 UTC.</p>  <p> <b>Example:</b> <code>Mon:08:00</code>, which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.)</p>
    ///   - [`security_group_ids(Vec<String>)`](crate::client::fluent_builders::CreateServer::security_group_ids) / [`set_security_group_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreateServer::set_security_group_ids): <p> A list of security group IDs to attach to the Amazon EC2 instance. If you add this parameter, the specified security groups must be within the VPC that is specified by <code>SubnetIds</code>. </p>  <p> If you do not specify this parameter, AWS OpsWorks CM creates one new security group that uses TCP ports 22 and 443, open to 0.0.0.0/0 (everyone). </p>
    ///   - [`service_role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateServer::service_role_arn) / [`set_service_role_arn(Option<String>)`](crate::client::fluent_builders::CreateServer::set_service_role_arn): <p> The service role that the AWS OpsWorks CM service backend uses to work with your account. Although the AWS OpsWorks management console typically creates the service role for you, if you are using the AWS CLI or API commands, run the service-role-creation.yaml AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml. This template creates a CloudFormation stack that includes the service role and instance profile that you need. </p>
    ///   - [`subnet_ids(Vec<String>)`](crate::client::fluent_builders::CreateServer::subnet_ids) / [`set_subnet_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreateServer::set_subnet_ids): <p> The IDs of subnets in which to launch the server EC2 instance. </p>  <p> Amazon EC2-Classic customers: This field is required. All servers must run within a VPC. The VPC must have "Auto Assign Public IP" enabled. </p>  <p> EC2-VPC customers: This field is optional. If you do not specify subnet IDs, your EC2 instances are created in a default subnet that is selected by Amazon EC2. If you specify subnet IDs, the VPC must have "Auto Assign Public IP" enabled. </p>  <p>For more information about supported Amazon EC2 platforms, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateServer::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateServer::set_tags): <p>A map that contains tag keys and tag values to attach to an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server.</p>  <ul>   <li> <p>The key cannot be empty.</p> </li>   <li> <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : / @</code> </p> </li>   <li> <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : / @</code> </p> </li>   <li> <p>Leading and trailing white spaces are trimmed from both the key and value.</p> </li>   <li> <p>A maximum of 50 user-applied tags is allowed for any AWS OpsWorks-CM server.</p> </li>  </ul>
    ///   - [`backup_id(impl Into<String>)`](crate::client::fluent_builders::CreateServer::backup_id) / [`set_backup_id(Option<String>)`](crate::client::fluent_builders::CreateServer::set_backup_id): <p> If you specify this field, AWS OpsWorks CM creates the server by using the backup represented by BackupId. </p>
    /// - On success, responds with [`CreateServerOutput`](crate::output::CreateServerOutput) with field(s):
    ///   - [`server(Option<Server>)`](crate::output::CreateServerOutput::server): <p>The server that is created by the request. </p>
    /// - On failure, responds with [`SdkError<CreateServerError>`](crate::error::CreateServerError)
    pub fn create_server(&self) -> crate::client::fluent_builders::CreateServer {
        crate::client::fluent_builders::CreateServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteBackup`](crate::client::fluent_builders::DeleteBackup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_id(impl Into<String>)`](crate::client::fluent_builders::DeleteBackup::backup_id) / [`set_backup_id(Option<String>)`](crate::client::fluent_builders::DeleteBackup::set_backup_id): <p>The ID of the backup to delete. Run the DescribeBackups command to get a list of backup IDs. Backup IDs are in the format <code>ServerName-yyyyMMddHHmmssSSS</code>. </p>
    /// - On success, responds with [`DeleteBackupOutput`](crate::output::DeleteBackupOutput)

    /// - On failure, responds with [`SdkError<DeleteBackupError>`](crate::error::DeleteBackupError)
    pub fn delete_backup(&self) -> crate::client::fluent_builders::DeleteBackup {
        crate::client::fluent_builders::DeleteBackup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteServer`](crate::client::fluent_builders::DeleteServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::DeleteServer::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::DeleteServer::set_server_name): <p>The ID of the server to delete.</p>
    /// - On success, responds with [`DeleteServerOutput`](crate::output::DeleteServerOutput)

    /// - On failure, responds with [`SdkError<DeleteServerError>`](crate::error::DeleteServerError)
    pub fn delete_server(&self) -> crate::client::fluent_builders::DeleteServer {
        crate::client::fluent_builders::DeleteServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeAccountAttributes`](crate::client::fluent_builders::DescribeAccountAttributes) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DescribeAccountAttributes::send) it.

    /// - On success, responds with [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput) with field(s):
    ///   - [`attributes(Option<Vec<AccountAttribute>>)`](crate::output::DescribeAccountAttributesOutput::attributes): <p> The attributes that are currently set for the account. </p>
    /// - On failure, responds with [`SdkError<DescribeAccountAttributesError>`](crate::error::DescribeAccountAttributesError)
    pub fn describe_account_attributes(
        &self,
    ) -> crate::client::fluent_builders::DescribeAccountAttributes {
        crate::client::fluent_builders::DescribeAccountAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeBackups`](crate::client::fluent_builders::DescribeBackups) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeBackups::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBackups::backup_id) / [`set_backup_id(Option<String>)`](crate::client::fluent_builders::DescribeBackups::set_backup_id): <p>Describes a single backup. </p>
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::DescribeBackups::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::DescribeBackups::set_server_name): <p>Returns backups for the server with the specified ServerName. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeBackups::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeBackups::set_next_token): <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeBackups::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeBackups::set_max_results): <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
    /// - On success, responds with [`DescribeBackupsOutput`](crate::output::DescribeBackupsOutput) with field(s):
    ///   - [`backups(Option<Vec<Backup>>)`](crate::output::DescribeBackupsOutput::backups): <p>Contains the response to a <code>DescribeBackups</code> request. </p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeBackupsOutput::next_token): <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
    /// - On failure, responds with [`SdkError<DescribeBackupsError>`](crate::error::DescribeBackupsError)
    pub fn describe_backups(&self) -> crate::client::fluent_builders::DescribeBackups {
        crate::client::fluent_builders::DescribeBackups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeEvents`](crate::client::fluent_builders::DescribeEvents) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeEvents::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::DescribeEvents::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::DescribeEvents::set_server_name): <p>The name of the server for which you want to view events.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeEvents::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeEvents::set_next_token): <p>NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call <code>DescribeEvents</code> again, and assign the token from the previous results as the value of the <code>nextToken</code> parameter. If there are no more results, the response object's <code>nextToken</code> parameter value is <code>null</code>. Setting a <code>nextToken</code> value that was not returned in your previous results causes an <code>InvalidNextTokenException</code> to occur. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeEvents::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeEvents::set_max_results): <p>To receive a paginated response, use this parameter to specify the maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results. </p>
    /// - On success, responds with [`DescribeEventsOutput`](crate::output::DescribeEventsOutput) with field(s):
    ///   - [`server_events(Option<Vec<ServerEvent>>)`](crate::output::DescribeEventsOutput::server_events): <p>Contains the response to a <code>DescribeEvents</code> request. </p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeEventsOutput::next_token): <p>NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call <code>DescribeEvents</code> again, and assign the token from the previous results as the value of the <code>nextToken</code> parameter. If there are no more results, the response object's <code>nextToken</code> parameter value is <code>null</code>. Setting a <code>nextToken</code> value that was not returned in your previous results causes an <code>InvalidNextTokenException</code> to occur. </p>
    /// - On failure, responds with [`SdkError<DescribeEventsError>`](crate::error::DescribeEventsError)
    pub fn describe_events(&self) -> crate::client::fluent_builders::DescribeEvents {
        crate::client::fluent_builders::DescribeEvents::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeNodeAssociationStatus`](crate::client::fluent_builders::DescribeNodeAssociationStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`node_association_status_token(impl Into<String>)`](crate::client::fluent_builders::DescribeNodeAssociationStatus::node_association_status_token) / [`set_node_association_status_token(Option<String>)`](crate::client::fluent_builders::DescribeNodeAssociationStatus::set_node_association_status_token): <p>The token returned in either the AssociateNodeResponse or the DisassociateNodeResponse. </p>
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::DescribeNodeAssociationStatus::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::DescribeNodeAssociationStatus::set_server_name): <p>The name of the server from which to disassociate the node. </p>
    /// - On success, responds with [`DescribeNodeAssociationStatusOutput`](crate::output::DescribeNodeAssociationStatusOutput) with field(s):
    ///   - [`node_association_status(Option<NodeAssociationStatus>)`](crate::output::DescribeNodeAssociationStatusOutput::node_association_status): <p>The status of the association or disassociation request. </p>  <p class="title"> <b>Possible values:</b> </p>  <ul>   <li> <p> <code>SUCCESS</code>: The association or disassociation succeeded. </p> </li>   <li> <p> <code>FAILED</code>: The association or disassociation failed. </p> </li>   <li> <p> <code>IN_PROGRESS</code>: The association or disassociation is still in progress. </p> </li>  </ul>
    ///   - [`engine_attributes(Option<Vec<EngineAttribute>>)`](crate::output::DescribeNodeAssociationStatusOutput::engine_attributes): <p>Attributes specific to the node association. In Puppet, the attibute PUPPET_NODE_CERT contains the signed certificate (the result of the CSR). </p>
    /// - On failure, responds with [`SdkError<DescribeNodeAssociationStatusError>`](crate::error::DescribeNodeAssociationStatusError)
    pub fn describe_node_association_status(
        &self,
    ) -> crate::client::fluent_builders::DescribeNodeAssociationStatus {
        crate::client::fluent_builders::DescribeNodeAssociationStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeServers`](crate::client::fluent_builders::DescribeServers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeServers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::DescribeServers::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::DescribeServers::set_server_name): <p>Describes the server with the specified ServerName.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeServers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeServers::set_next_token): <p>This is not currently implemented for <code>DescribeServers</code> requests. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeServers::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeServers::set_max_results): <p>This is not currently implemented for <code>DescribeServers</code> requests. </p>
    /// - On success, responds with [`DescribeServersOutput`](crate::output::DescribeServersOutput) with field(s):
    ///   - [`servers(Option<Vec<Server>>)`](crate::output::DescribeServersOutput::servers): <p>Contains the response to a <code>DescribeServers</code> request.</p>  <p> <i>For Chef Automate servers:</i> If <code>DescribeServersResponse$Servers$EngineAttributes</code> includes CHEF_MAJOR_UPGRADE_AVAILABLE, you can upgrade the Chef Automate server to Chef Automate 2. To be eligible for upgrade, a server running Chef Automate 1 must have had at least one successful maintenance run after November 1, 2019.</p>  <p> <i>For Puppet servers:</i> <code>DescribeServersResponse$Servers$EngineAttributes</code> contains the following two responses:</p>  <ul>   <li> <p> <code>PUPPET_API_CA_CERT</code>, the PEM-encoded CA certificate that is used by the Puppet API over TCP port number 8140. The CA certificate is also used to sign node certificates.</p> </li>   <li> <p> <code>PUPPET_API_CRL</code>, a certificate revocation list. The certificate revocation list is for internal maintenance purposes only. For more information about the Puppet certificate revocation list, see <a href="https://puppet.com/docs/puppet/5.5/man/certificate_revocation_list.html">Man Page: puppet certificate_revocation_list</a> in the Puppet documentation.</p> </li>  </ul>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeServersOutput::next_token): <p>This is not currently implemented for <code>DescribeServers</code> requests. </p>
    /// - On failure, responds with [`SdkError<DescribeServersError>`](crate::error::DescribeServersError)
    pub fn describe_servers(&self) -> crate::client::fluent_builders::DescribeServers {
        crate::client::fluent_builders::DescribeServers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateNode`](crate::client::fluent_builders::DisassociateNode) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::DisassociateNode::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::DisassociateNode::set_server_name): <p>The name of the server from which to disassociate the node. </p>
    ///   - [`node_name(impl Into<String>)`](crate::client::fluent_builders::DisassociateNode::node_name) / [`set_node_name(Option<String>)`](crate::client::fluent_builders::DisassociateNode::set_node_name): <p>The name of the client node. </p>
    ///   - [`engine_attributes(Vec<EngineAttribute>)`](crate::client::fluent_builders::DisassociateNode::engine_attributes) / [`set_engine_attributes(Option<Vec<EngineAttribute>>)`](crate::client::fluent_builders::DisassociateNode::set_engine_attributes): <p>Engine attributes that are used for disassociating the node. No attributes are required for Puppet. </p>  <p class="title"> <b>Attributes required in a DisassociateNode request for Chef</b> </p>  <ul>   <li> <p> <code>CHEF_ORGANIZATION</code>: The Chef organization with which the node was associated. By default only one organization named <code>default</code> can exist. </p> </li>  </ul>
    /// - On success, responds with [`DisassociateNodeOutput`](crate::output::DisassociateNodeOutput) with field(s):
    ///   - [`node_association_status_token(Option<String>)`](crate::output::DisassociateNodeOutput::node_association_status_token): <p>Contains a token which can be passed to the <code>DescribeNodeAssociationStatus</code> API call to get the status of the disassociation request. </p>
    /// - On failure, responds with [`SdkError<DisassociateNodeError>`](crate::error::DisassociateNodeError)
    pub fn disassociate_node(&self) -> crate::client::fluent_builders::DisassociateNode {
        crate::client::fluent_builders::DisassociateNode::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExportServerEngineAttribute`](crate::client::fluent_builders::ExportServerEngineAttribute) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`export_attribute_name(impl Into<String>)`](crate::client::fluent_builders::ExportServerEngineAttribute::export_attribute_name) / [`set_export_attribute_name(Option<String>)`](crate::client::fluent_builders::ExportServerEngineAttribute::set_export_attribute_name): <p>The name of the export attribute. Currently, the supported export attribute is <code>Userdata</code>. This exports a user data script that includes parameters and values provided in the <code>InputAttributes</code> list.</p>
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::ExportServerEngineAttribute::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::ExportServerEngineAttribute::set_server_name): <p>The name of the server from which you are exporting the attribute.</p>
    ///   - [`input_attributes(Vec<EngineAttribute>)`](crate::client::fluent_builders::ExportServerEngineAttribute::input_attributes) / [`set_input_attributes(Option<Vec<EngineAttribute>>)`](crate::client::fluent_builders::ExportServerEngineAttribute::set_input_attributes): <p>The list of engine attributes. The list type is <code>EngineAttribute</code>. An <code>EngineAttribute</code> list item is a pair that includes an attribute name and its value. For the <code>Userdata</code> ExportAttributeName, the following are supported engine attribute names.</p>  <ul>   <li> <p> <b>RunList</b> In Chef, a list of roles or recipes that are run in the specified order. In Puppet, this parameter is ignored.</p> </li>   <li> <p> <b>OrganizationName</b> In Chef, an organization name. AWS OpsWorks for Chef Automate always creates the organization <code>default</code>. In Puppet, this parameter is ignored.</p> </li>   <li> <p> <b>NodeEnvironment</b> In Chef, a node environment (for example, development, staging, or one-box). In Puppet, this parameter is ignored.</p> </li>   <li> <p> <b>NodeClientVersion</b> In Chef, the version of the Chef engine (three numbers separated by dots, such as 13.8.5). If this attribute is empty, OpsWorks for Chef Automate uses the most current version. In Puppet, this parameter is ignored.</p> </li>  </ul>
    /// - On success, responds with [`ExportServerEngineAttributeOutput`](crate::output::ExportServerEngineAttributeOutput) with field(s):
    ///   - [`engine_attribute(Option<EngineAttribute>)`](crate::output::ExportServerEngineAttributeOutput::engine_attribute): <p>The requested engine attribute pair with attribute name and value.</p>
    ///   - [`server_name(Option<String>)`](crate::output::ExportServerEngineAttributeOutput::server_name): <p>The server name used in the request.</p>
    /// - On failure, responds with [`SdkError<ExportServerEngineAttributeError>`](crate::error::ExportServerEngineAttributeError)
    pub fn export_server_engine_attribute(
        &self,
    ) -> crate::client::fluent_builders::ExportServerEngineAttribute {
        crate::client::fluent_builders::ExportServerEngineAttribute::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTagsForResource::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Number (ARN) of an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server for which you want to show applied tags. For example, <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_next_token): <p>NextToken is a string that is returned in some command responses. It indicates that not all entries have been returned, and that you must run at least one more request to get remaining items. To get remaining results, call <code>ListTagsForResource</code> again, and assign the token from the previous results as the value of the <code>nextToken</code> parameter. If there are no more results, the response object's <code>nextToken</code> parameter value is <code>null</code>. Setting a <code>nextToken</code> value that was not returned in your previous results causes an <code>InvalidNextTokenException</code> to occur.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTagsForResource::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTagsForResource::set_max_results): <p>To receive a paginated response, use this parameter to specify the maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>Tags that have been applied to the resource.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTagsForResourceOutput::next_token): <p>A token that you can use as the value of <code>NextToken</code> in subsequent calls to the API to show more results.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RestoreServer`](crate::client::fluent_builders::RestoreServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_id(impl Into<String>)`](crate::client::fluent_builders::RestoreServer::backup_id) / [`set_backup_id(Option<String>)`](crate::client::fluent_builders::RestoreServer::set_backup_id): <p> The ID of the backup that you want to use to restore a server. </p>
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::RestoreServer::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::RestoreServer::set_server_name): <p> The name of the server that you want to restore. </p>
    ///   - [`instance_type(impl Into<String>)`](crate::client::fluent_builders::RestoreServer::instance_type) / [`set_instance_type(Option<String>)`](crate::client::fluent_builders::RestoreServer::set_instance_type): <p> The type of instance to restore. Valid values must be specified in the following format: <code>^([cm][34]|t2).*</code> For example, <code>m5.large</code>. Valid values are <code>m5.large</code>, <code>r5.xlarge</code>, and <code>r5.2xlarge</code>. If you do not specify this parameter, RestoreServer uses the instance type from the specified backup. </p>
    ///   - [`key_pair(impl Into<String>)`](crate::client::fluent_builders::RestoreServer::key_pair) / [`set_key_pair(Option<String>)`](crate::client::fluent_builders::RestoreServer::set_key_pair): <p> The name of the key pair to set on the new EC2 instance. This can be helpful if the administrator no longer has the SSH key. </p>
    /// - On success, responds with [`RestoreServerOutput`](crate::output::RestoreServerOutput) with field(s):
    ///   - [`server(Option<Server>)`](crate::output::RestoreServerOutput::server): <p>Describes a configuration management server. </p>
    /// - On failure, responds with [`SdkError<RestoreServerError>`](crate::error::RestoreServerError)
    pub fn restore_server(&self) -> crate::client::fluent_builders::RestoreServer {
        crate::client::fluent_builders::RestoreServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartMaintenance`](crate::client::fluent_builders::StartMaintenance) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::StartMaintenance::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::StartMaintenance::set_server_name): <p>The name of the server on which to run maintenance. </p>
    ///   - [`engine_attributes(Vec<EngineAttribute>)`](crate::client::fluent_builders::StartMaintenance::engine_attributes) / [`set_engine_attributes(Option<Vec<EngineAttribute>>)`](crate::client::fluent_builders::StartMaintenance::set_engine_attributes): <p>Engine attributes that are specific to the server on which you want to run maintenance.</p>  <p class="title"> <b>Attributes accepted in a StartMaintenance request for Chef</b> </p>  <ul>   <li> <p> <code>CHEF_MAJOR_UPGRADE</code>: If a Chef Automate server is eligible for upgrade to Chef Automate 2, add this engine attribute to a <code>StartMaintenance</code> request and set the value to <code>true</code> to upgrade the server to Chef Automate 2. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opscm-a2upgrade.html">Upgrade an AWS OpsWorks for Chef Automate Server to Chef Automate 2</a>. </p> </li>  </ul>
    /// - On success, responds with [`StartMaintenanceOutput`](crate::output::StartMaintenanceOutput) with field(s):
    ///   - [`server(Option<Server>)`](crate::output::StartMaintenanceOutput::server): <p>Contains the response to a <code>StartMaintenance</code> request. </p>
    /// - On failure, responds with [`SdkError<StartMaintenanceError>`](crate::error::StartMaintenanceError)
    pub fn start_maintenance(&self) -> crate::client::fluent_builders::StartMaintenance {
        crate::client::fluent_builders::StartMaintenance::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Number (ARN) of a resource to which you want to apply tags. For example, <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>A map that contains tag keys and tag values to attach to AWS OpsWorks-CM servers or backups.</p>  <ul>   <li> <p>The key cannot be empty.</p> </li>   <li> <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code> </p> </li>   <li> <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code> </p> </li>   <li> <p>Leading and trailing white spaces are trimmed from both the key and value.</p> </li>   <li> <p>A maximum of 50 user-applied tags is allowed for any AWS OpsWorks-CM server or backup.</p> </li>  </ul>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Number (ARN) of a resource from which you want to remove tags. For example, <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The keys of tags that you want to remove.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateServer`](crate::client::fluent_builders::UpdateServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`disable_automated_backup(bool)`](crate::client::fluent_builders::UpdateServer::disable_automated_backup) / [`set_disable_automated_backup(Option<bool>)`](crate::client::fluent_builders::UpdateServer::set_disable_automated_backup): <p>Setting DisableAutomatedBackup to <code>true</code> disables automated or scheduled backups. Automated backups are enabled by default. </p>
    ///   - [`backup_retention_count(i32)`](crate::client::fluent_builders::UpdateServer::backup_retention_count) / [`set_backup_retention_count(Option<i32>)`](crate::client::fluent_builders::UpdateServer::set_backup_retention_count): <p>Sets the number of automated backups that you want to keep. </p>
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::UpdateServer::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::UpdateServer::set_server_name): <p>The name of the server to update. </p>
    ///   - [`preferred_maintenance_window(impl Into<String>)`](crate::client::fluent_builders::UpdateServer::preferred_maintenance_window) / [`set_preferred_maintenance_window(Option<String>)`](crate::client::fluent_builders::UpdateServer::set_preferred_maintenance_window): <p> <code>DDD:HH:MM</code> (weekly start time) or <code>HH:MM</code> (daily start time). </p>  <p> Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
    ///   - [`preferred_backup_window(impl Into<String>)`](crate::client::fluent_builders::UpdateServer::preferred_backup_window) / [`set_preferred_backup_window(Option<String>)`](crate::client::fluent_builders::UpdateServer::set_preferred_backup_window): <p> <code>DDD:HH:MM</code> (weekly start time) or <code>HH:MM</code> (daily start time). </p>  <p> Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
    /// - On success, responds with [`UpdateServerOutput`](crate::output::UpdateServerOutput) with field(s):
    ///   - [`server(Option<Server>)`](crate::output::UpdateServerOutput::server): <p>Contains the response to a <code>UpdateServer</code> request. </p>
    /// - On failure, responds with [`SdkError<UpdateServerError>`](crate::error::UpdateServerError)
    pub fn update_server(&self) -> crate::client::fluent_builders::UpdateServer {
        crate::client::fluent_builders::UpdateServer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateServerEngineAttributes`](crate::client::fluent_builders::UpdateServerEngineAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_name(impl Into<String>)`](crate::client::fluent_builders::UpdateServerEngineAttributes::server_name) / [`set_server_name(Option<String>)`](crate::client::fluent_builders::UpdateServerEngineAttributes::set_server_name): <p>The name of the server to update. </p>
    ///   - [`attribute_name(impl Into<String>)`](crate::client::fluent_builders::UpdateServerEngineAttributes::attribute_name) / [`set_attribute_name(Option<String>)`](crate::client::fluent_builders::UpdateServerEngineAttributes::set_attribute_name): <p>The name of the engine attribute to update. </p>
    ///   - [`attribute_value(impl Into<String>)`](crate::client::fluent_builders::UpdateServerEngineAttributes::attribute_value) / [`set_attribute_value(Option<String>)`](crate::client::fluent_builders::UpdateServerEngineAttributes::set_attribute_value): <p>The value to set for the attribute. </p>
    /// - On success, responds with [`UpdateServerEngineAttributesOutput`](crate::output::UpdateServerEngineAttributesOutput) with field(s):
    ///   - [`server(Option<Server>)`](crate::output::UpdateServerEngineAttributesOutput::server): <p>Contains the response to an <code>UpdateServerEngineAttributes</code> request. </p>
    /// - On failure, responds with [`SdkError<UpdateServerEngineAttributesError>`](crate::error::UpdateServerEngineAttributesError)
    pub fn update_server_engine_attributes(
        &self,
    ) -> crate::client::fluent_builders::UpdateServerEngineAttributes {
        crate::client::fluent_builders::UpdateServerEngineAttributes::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
