// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The OAuth2.0 token or user ID that was used to generate the workload access token used for initiating the user authorization flow to retrieve OAuth2.0 tokens.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum UserIdentifier {
    /// <p>The ID of the user for whom you have retrieved a workload access token for</p>
    UserId(::std::string::String),
    /// <p>The OAuth2.0 token issued by the userâ€™s identity provider</p>
    UserToken(::std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl UserIdentifier {
    /// Tries to convert the enum instance into [`UserId`](crate::types::UserIdentifier::UserId), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_user_id(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let UserIdentifier::UserId(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UserId`](crate::types::UserIdentifier::UserId).
    pub fn is_user_id(&self) -> bool {
        self.as_user_id().is_ok()
    }
    /// Tries to convert the enum instance into [`UserToken`](crate::types::UserIdentifier::UserToken), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_user_token(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let UserIdentifier::UserToken(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UserToken`](crate::types::UserIdentifier::UserToken).
    pub fn is_user_token(&self) -> bool {
        self.as_user_token().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for UserIdentifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            UserIdentifier::UserId(val) => f.debug_tuple("UserId").field(&val).finish(),
            UserIdentifier::UserToken(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            UserIdentifier::Unknown => f.debug_tuple("Unknown").finish(),
        }
    }
}
