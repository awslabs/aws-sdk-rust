// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetResourceOauth2TokenInput {
    /// <p>The identity token of the workload from which you want to retrieve the OAuth2 token.</p>
    pub workload_identity_token: ::std::option::Option<::std::string::String>,
    /// <p>The name of the resource's credential provider.</p>
    pub resource_credential_provider_name: ::std::option::Option<::std::string::String>,
    /// <p>The OAuth scopes being requested.</p>
    pub scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The type of flow to be performed.</p>
    pub oauth2_flow: ::std::option::Option<crate::types::Oauth2FlowType>,
    /// <p>Unique identifier for the user's authentication session for retrieving OAuth2 tokens. This ID tracks the authorization flow state across multiple requests and responses during the OAuth2 authentication process.</p>
    pub session_uri: ::std::option::Option<::std::string::String>,
    /// <p>The callback URL to redirect to after the OAuth 2.0 token retrieval is complete. This URL must be one of the provided URLs configured for the workload identity.</p>
    pub resource_oauth2_return_url: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether to always initiate a new three-legged OAuth (3LO) flow, regardless of any existing session.</p>
    pub force_authentication: ::std::option::Option<bool>,
    /// <p>A map of custom parameters to include in the authorization request to the resource credential provider. These parameters are in addition to the standard OAuth 2.0 flow parameters, and will not override them.</p>
    pub custom_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>An opaque string that will be sent back to the callback URL provided in resourceOauth2ReturnUrl. This state should be used to protect the callback URL of your application against CSRF attacks by ensuring the response corresponds to the original request.</p>
    pub custom_state: ::std::option::Option<::std::string::String>,
}
impl GetResourceOauth2TokenInput {
    /// <p>The identity token of the workload from which you want to retrieve the OAuth2 token.</p>
    pub fn workload_identity_token(&self) -> ::std::option::Option<&str> {
        self.workload_identity_token.as_deref()
    }
    /// <p>The name of the resource's credential provider.</p>
    pub fn resource_credential_provider_name(&self) -> ::std::option::Option<&str> {
        self.resource_credential_provider_name.as_deref()
    }
    /// <p>The OAuth scopes being requested.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scopes.is_none()`.
    pub fn scopes(&self) -> &[::std::string::String] {
        self.scopes.as_deref().unwrap_or_default()
    }
    /// <p>The type of flow to be performed.</p>
    pub fn oauth2_flow(&self) -> ::std::option::Option<&crate::types::Oauth2FlowType> {
        self.oauth2_flow.as_ref()
    }
    /// <p>Unique identifier for the user's authentication session for retrieving OAuth2 tokens. This ID tracks the authorization flow state across multiple requests and responses during the OAuth2 authentication process.</p>
    pub fn session_uri(&self) -> ::std::option::Option<&str> {
        self.session_uri.as_deref()
    }
    /// <p>The callback URL to redirect to after the OAuth 2.0 token retrieval is complete. This URL must be one of the provided URLs configured for the workload identity.</p>
    pub fn resource_oauth2_return_url(&self) -> ::std::option::Option<&str> {
        self.resource_oauth2_return_url.as_deref()
    }
    /// <p>Indicates whether to always initiate a new three-legged OAuth (3LO) flow, regardless of any existing session.</p>
    pub fn force_authentication(&self) -> ::std::option::Option<bool> {
        self.force_authentication
    }
    /// <p>A map of custom parameters to include in the authorization request to the resource credential provider. These parameters are in addition to the standard OAuth 2.0 flow parameters, and will not override them.</p>
    pub fn custom_parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.custom_parameters.as_ref()
    }
    /// <p>An opaque string that will be sent back to the callback URL provided in resourceOauth2ReturnUrl. This state should be used to protect the callback URL of your application against CSRF attacks by ensuring the response corresponds to the original request.</p>
    pub fn custom_state(&self) -> ::std::option::Option<&str> {
        self.custom_state.as_deref()
    }
}
impl ::std::fmt::Debug for GetResourceOauth2TokenInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetResourceOauth2TokenInput");
        formatter.field("workload_identity_token", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_credential_provider_name", &self.resource_credential_provider_name);
        formatter.field("scopes", &self.scopes);
        formatter.field("oauth2_flow", &self.oauth2_flow);
        formatter.field("session_uri", &self.session_uri);
        formatter.field("resource_oauth2_return_url", &self.resource_oauth2_return_url);
        formatter.field("force_authentication", &self.force_authentication);
        formatter.field("custom_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("custom_state", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GetResourceOauth2TokenInput {
    /// Creates a new builder-style object to manufacture [`GetResourceOauth2TokenInput`](crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenInput).
    pub fn builder() -> crate::operation::get_resource_oauth2_token::builders::GetResourceOauth2TokenInputBuilder {
        crate::operation::get_resource_oauth2_token::builders::GetResourceOauth2TokenInputBuilder::default()
    }
}

/// A builder for [`GetResourceOauth2TokenInput`](crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetResourceOauth2TokenInputBuilder {
    pub(crate) workload_identity_token: ::std::option::Option<::std::string::String>,
    pub(crate) resource_credential_provider_name: ::std::option::Option<::std::string::String>,
    pub(crate) scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) oauth2_flow: ::std::option::Option<crate::types::Oauth2FlowType>,
    pub(crate) session_uri: ::std::option::Option<::std::string::String>,
    pub(crate) resource_oauth2_return_url: ::std::option::Option<::std::string::String>,
    pub(crate) force_authentication: ::std::option::Option<bool>,
    pub(crate) custom_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) custom_state: ::std::option::Option<::std::string::String>,
}
impl GetResourceOauth2TokenInputBuilder {
    /// <p>The identity token of the workload from which you want to retrieve the OAuth2 token.</p>
    /// This field is required.
    pub fn workload_identity_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_identity_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identity token of the workload from which you want to retrieve the OAuth2 token.</p>
    pub fn set_workload_identity_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_identity_token = input;
        self
    }
    /// <p>The identity token of the workload from which you want to retrieve the OAuth2 token.</p>
    pub fn get_workload_identity_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_identity_token
    }
    /// <p>The name of the resource's credential provider.</p>
    /// This field is required.
    pub fn resource_credential_provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_credential_provider_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the resource's credential provider.</p>
    pub fn set_resource_credential_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_credential_provider_name = input;
        self
    }
    /// <p>The name of the resource's credential provider.</p>
    pub fn get_resource_credential_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_credential_provider_name
    }
    /// Appends an item to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>The OAuth scopes being requested.</p>
    pub fn scopes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.scopes.unwrap_or_default();
        v.push(input.into());
        self.scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The OAuth scopes being requested.</p>
    pub fn set_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.scopes = input;
        self
    }
    /// <p>The OAuth scopes being requested.</p>
    pub fn get_scopes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.scopes
    }
    /// <p>The type of flow to be performed.</p>
    /// This field is required.
    pub fn oauth2_flow(mut self, input: crate::types::Oauth2FlowType) -> Self {
        self.oauth2_flow = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of flow to be performed.</p>
    pub fn set_oauth2_flow(mut self, input: ::std::option::Option<crate::types::Oauth2FlowType>) -> Self {
        self.oauth2_flow = input;
        self
    }
    /// <p>The type of flow to be performed.</p>
    pub fn get_oauth2_flow(&self) -> &::std::option::Option<crate::types::Oauth2FlowType> {
        &self.oauth2_flow
    }
    /// <p>Unique identifier for the user's authentication session for retrieving OAuth2 tokens. This ID tracks the authorization flow state across multiple requests and responses during the OAuth2 authentication process.</p>
    pub fn session_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the user's authentication session for retrieving OAuth2 tokens. This ID tracks the authorization flow state across multiple requests and responses during the OAuth2 authentication process.</p>
    pub fn set_session_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_uri = input;
        self
    }
    /// <p>Unique identifier for the user's authentication session for retrieving OAuth2 tokens. This ID tracks the authorization flow state across multiple requests and responses during the OAuth2 authentication process.</p>
    pub fn get_session_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_uri
    }
    /// <p>The callback URL to redirect to after the OAuth 2.0 token retrieval is complete. This URL must be one of the provided URLs configured for the workload identity.</p>
    pub fn resource_oauth2_return_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_oauth2_return_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The callback URL to redirect to after the OAuth 2.0 token retrieval is complete. This URL must be one of the provided URLs configured for the workload identity.</p>
    pub fn set_resource_oauth2_return_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_oauth2_return_url = input;
        self
    }
    /// <p>The callback URL to redirect to after the OAuth 2.0 token retrieval is complete. This URL must be one of the provided URLs configured for the workload identity.</p>
    pub fn get_resource_oauth2_return_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_oauth2_return_url
    }
    /// <p>Indicates whether to always initiate a new three-legged OAuth (3LO) flow, regardless of any existing session.</p>
    pub fn force_authentication(mut self, input: bool) -> Self {
        self.force_authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to always initiate a new three-legged OAuth (3LO) flow, regardless of any existing session.</p>
    pub fn set_force_authentication(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force_authentication = input;
        self
    }
    /// <p>Indicates whether to always initiate a new three-legged OAuth (3LO) flow, regardless of any existing session.</p>
    pub fn get_force_authentication(&self) -> &::std::option::Option<bool> {
        &self.force_authentication
    }
    /// Adds a key-value pair to `custom_parameters`.
    ///
    /// To override the contents of this collection use [`set_custom_parameters`](Self::set_custom_parameters).
    ///
    /// <p>A map of custom parameters to include in the authorization request to the resource credential provider. These parameters are in addition to the standard OAuth 2.0 flow parameters, and will not override them.</p>
    pub fn custom_parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.custom_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.custom_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of custom parameters to include in the authorization request to the resource credential provider. These parameters are in addition to the standard OAuth 2.0 flow parameters, and will not override them.</p>
    pub fn set_custom_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.custom_parameters = input;
        self
    }
    /// <p>A map of custom parameters to include in the authorization request to the resource credential provider. These parameters are in addition to the standard OAuth 2.0 flow parameters, and will not override them.</p>
    pub fn get_custom_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.custom_parameters
    }
    /// <p>An opaque string that will be sent back to the callback URL provided in resourceOauth2ReturnUrl. This state should be used to protect the callback URL of your application against CSRF attacks by ensuring the response corresponds to the original request.</p>
    pub fn custom_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An opaque string that will be sent back to the callback URL provided in resourceOauth2ReturnUrl. This state should be used to protect the callback URL of your application against CSRF attacks by ensuring the response corresponds to the original request.</p>
    pub fn set_custom_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_state = input;
        self
    }
    /// <p>An opaque string that will be sent back to the callback URL provided in resourceOauth2ReturnUrl. This state should be used to protect the callback URL of your application against CSRF attacks by ensuring the response corresponds to the original request.</p>
    pub fn get_custom_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_state
    }
    /// Consumes the builder and constructs a [`GetResourceOauth2TokenInput`](crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenInput {
            workload_identity_token: self.workload_identity_token,
            resource_credential_provider_name: self.resource_credential_provider_name,
            scopes: self.scopes,
            oauth2_flow: self.oauth2_flow,
            session_uri: self.session_uri,
            resource_oauth2_return_url: self.resource_oauth2_return_url,
            force_authentication: self.force_authentication,
            custom_parameters: self.custom_parameters,
            custom_state: self.custom_state,
        })
    }
}
impl ::std::fmt::Debug for GetResourceOauth2TokenInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetResourceOauth2TokenInputBuilder");
        formatter.field("workload_identity_token", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_credential_provider_name", &self.resource_credential_provider_name);
        formatter.field("scopes", &self.scopes);
        formatter.field("oauth2_flow", &self.oauth2_flow);
        formatter.field("session_uri", &self.session_uri);
        formatter.field("resource_oauth2_return_url", &self.resource_oauth2_return_url);
        formatter.field("force_authentication", &self.force_authentication);
        formatter.field("custom_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("custom_state", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
