// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The exception that occurs when you do not have sufficient permissions to perform an action. Verify that your IAM policy includes the necessary permissions for the operation you are trying to perform.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The exception that occurs when the request conflicts with the current state of the resource. This can happen when trying to modify a resource that is currently being modified by another request, or when trying to create a resource that already exists.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The exception that occurs when the service encounters an unexpected internal error. This is a temporary condition that will resolve itself with retries. We recommend implementing exponential backoff retry logic in your application.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The input fails to satisfy the constraints specified by AgentCore. Check your input values and try again.</p>
    InvalidInputException(crate::types::error::InvalidInputException),
    /// <p>The exception that occurs when the specified resource does not exist. This can happen when using an invalid identifier or when trying to access a resource that has been deleted.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The exception that occurs when there is an error in the runtime client. This can happen due to network issues, invalid configuration, or other client-side problems. Check the error message for specific details about the error.</p>
    RuntimeClientError(crate::types::error::RuntimeClientError),
    /// <p>The service encountered an internal error. Try your request again later.</p>
    ServiceException(crate::types::error::ServiceException),
    /// <p>The exception that occurs when the request would cause a service quota to be exceeded. Review your service quotas and either reduce your request rate or request a quota increase.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling. Reduce the frequency of requests and try again.</p>
    ThrottledException(crate::types::error::ThrottledException),
    /// <p>The exception that occurs when the request was denied due to request throttling. This happens when you exceed the allowed request rate for an operation. Reduce the frequency of requests or implement exponential backoff retry logic in your application.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>This exception is thrown when the JWT bearer token is invalid or not found for OAuth bearer token based access</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// <p>The exception that occurs when the input fails to satisfy the constraints specified by the service. Check the error message for details about which input parameter is invalid and correct your request.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::RuntimeClientError(inner) => inner.fmt(f),
            Error::ServiceException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottledException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::InvalidInputException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::RuntimeClientError(inner) => inner.meta(),
            Self::ServiceException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottledException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::UnauthorizedException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsError> for Error {
    fn from(err: crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsError) -> Self {
        match err {
            crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsError::ThrottledException(inner) => {
                Error::ThrottledException(inner)
            }
            crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete_memory_records::BatchDeleteMemoryRecordsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete_memory_records::BatchDeleteMemoryRecordsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_delete_memory_records::BatchDeleteMemoryRecordsError> for Error {
    fn from(err: crate::operation::batch_delete_memory_records::BatchDeleteMemoryRecordsError) -> Self {
        match err {
            crate::operation::batch_delete_memory_records::BatchDeleteMemoryRecordsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_delete_memory_records::BatchDeleteMemoryRecordsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_delete_memory_records::BatchDeleteMemoryRecordsError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::batch_delete_memory_records::BatchDeleteMemoryRecordsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::batch_delete_memory_records::BatchDeleteMemoryRecordsError::ThrottledException(inner) => {
                Error::ThrottledException(inner)
            }
            crate::operation::batch_delete_memory_records::BatchDeleteMemoryRecordsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_delete_memory_records::BatchDeleteMemoryRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_memory_records::BatchUpdateMemoryRecordsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_memory_records::BatchUpdateMemoryRecordsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_update_memory_records::BatchUpdateMemoryRecordsError> for Error {
    fn from(err: crate::operation::batch_update_memory_records::BatchUpdateMemoryRecordsError) -> Self {
        match err {
            crate::operation::batch_update_memory_records::BatchUpdateMemoryRecordsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_update_memory_records::BatchUpdateMemoryRecordsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_update_memory_records::BatchUpdateMemoryRecordsError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::batch_update_memory_records::BatchUpdateMemoryRecordsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::batch_update_memory_records::BatchUpdateMemoryRecordsError::ThrottledException(inner) => {
                Error::ThrottledException(inner)
            }
            crate::operation::batch_update_memory_records::BatchUpdateMemoryRecordsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_update_memory_records::BatchUpdateMemoryRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::complete_resource_token_auth::CompleteResourceTokenAuthError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::complete_resource_token_auth::CompleteResourceTokenAuthError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::complete_resource_token_auth::CompleteResourceTokenAuthError> for Error {
    fn from(err: crate::operation::complete_resource_token_auth::CompleteResourceTokenAuthError) -> Self {
        match err {
            crate::operation::complete_resource_token_auth::CompleteResourceTokenAuthError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::complete_resource_token_auth::CompleteResourceTokenAuthError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::complete_resource_token_auth::CompleteResourceTokenAuthError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::complete_resource_token_auth::CompleteResourceTokenAuthError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::complete_resource_token_auth::CompleteResourceTokenAuthError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::complete_resource_token_auth::CompleteResourceTokenAuthError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::complete_resource_token_auth::CompleteResourceTokenAuthError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_event::CreateEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_event::CreateEventError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_event::CreateEventError> for Error {
    fn from(err: crate::operation::create_event::CreateEventError) -> Self {
        match err {
            crate::operation::create_event::CreateEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_event::CreateEventError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_event::CreateEventError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_event::CreateEventError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::create_event::CreateEventError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_event::CreateEventError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::create_event::CreateEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_event::CreateEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event::DeleteEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event::DeleteEventError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_event::DeleteEventError> for Error {
    fn from(err: crate::operation::delete_event::DeleteEventError) -> Self {
        match err {
            crate::operation::delete_event::DeleteEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_event::DeleteEventError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_event::DeleteEventError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_event::DeleteEventError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::delete_event::DeleteEventError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_event::DeleteEventError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::delete_event::DeleteEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_event::DeleteEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_memory_record::DeleteMemoryRecordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_memory_record::DeleteMemoryRecordError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_memory_record::DeleteMemoryRecordError> for Error {
    fn from(err: crate::operation::delete_memory_record::DeleteMemoryRecordError) -> Self {
        match err {
            crate::operation::delete_memory_record::DeleteMemoryRecordError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_memory_record::DeleteMemoryRecordError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_memory_record::DeleteMemoryRecordError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_memory_record::DeleteMemoryRecordError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::delete_memory_record::DeleteMemoryRecordError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_memory_record::DeleteMemoryRecordError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::delete_memory_record::DeleteMemoryRecordError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_memory_record::DeleteMemoryRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_card::GetAgentCardError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_card::GetAgentCardError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_agent_card::GetAgentCardError> for Error {
    fn from(err: crate::operation::get_agent_card::GetAgentCardError) -> Self {
        match err {
            crate::operation::get_agent_card::GetAgentCardError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_agent_card::GetAgentCardError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_agent_card::GetAgentCardError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_agent_card::GetAgentCardError::RuntimeClientError(inner) => Error::RuntimeClientError(inner),
            crate::operation::get_agent_card::GetAgentCardError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_agent_card::GetAgentCardError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_agent_card::GetAgentCardError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_agent_card::GetAgentCardError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_browser_session::GetBrowserSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_browser_session::GetBrowserSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_browser_session::GetBrowserSessionError> for Error {
    fn from(err: crate::operation::get_browser_session::GetBrowserSessionError) -> Self {
        match err {
            crate::operation::get_browser_session::GetBrowserSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_browser_session::GetBrowserSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_browser_session::GetBrowserSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_browser_session::GetBrowserSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_browser_session::GetBrowserSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_browser_session::GetBrowserSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionError> for Error {
    fn from(err: crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionError) -> Self {
        match err {
            crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event::GetEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event::GetEventError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_event::GetEventError> for Error {
    fn from(err: crate::operation::get_event::GetEventError) -> Self {
        match err {
            crate::operation::get_event::GetEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_event::GetEventError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_event::GetEventError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_event::GetEventError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::get_event::GetEventError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_event::GetEventError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::get_event::GetEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_event::GetEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_memory_record::GetMemoryRecordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_memory_record::GetMemoryRecordError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_memory_record::GetMemoryRecordError> for Error {
    fn from(err: crate::operation::get_memory_record::GetMemoryRecordError) -> Self {
        match err {
            crate::operation::get_memory_record::GetMemoryRecordError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_memory_record::GetMemoryRecordError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_memory_record::GetMemoryRecordError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_memory_record::GetMemoryRecordError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::get_memory_record::GetMemoryRecordError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_memory_record::GetMemoryRecordError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::get_memory_record::GetMemoryRecordError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_memory_record::GetMemoryRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_api_key::GetResourceApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_api_key::GetResourceApiKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_resource_api_key::GetResourceApiKeyError> for Error {
    fn from(err: crate::operation::get_resource_api_key::GetResourceApiKeyError) -> Self {
        match err {
            crate::operation::get_resource_api_key::GetResourceApiKeyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_resource_api_key::GetResourceApiKeyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_resource_api_key::GetResourceApiKeyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resource_api_key::GetResourceApiKeyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_resource_api_key::GetResourceApiKeyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_resource_api_key::GetResourceApiKeyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_resource_api_key::GetResourceApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenError> for Error {
    fn from(err: crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenError) -> Self {
        match err {
            crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workload_access_token::GetWorkloadAccessTokenError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workload_access_token::GetWorkloadAccessTokenError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_workload_access_token::GetWorkloadAccessTokenError> for Error {
    fn from(err: crate::operation::get_workload_access_token::GetWorkloadAccessTokenError) -> Self {
        match err {
            crate::operation::get_workload_access_token::GetWorkloadAccessTokenError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_workload_access_token::GetWorkloadAccessTokenError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_workload_access_token::GetWorkloadAccessTokenError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_workload_access_token::GetWorkloadAccessTokenError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_workload_access_token::GetWorkloadAccessTokenError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_workload_access_token::GetWorkloadAccessTokenError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_workload_access_token::GetWorkloadAccessTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError> for Error {
    fn from(err: crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError) -> Self {
        match err {
            crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdError> for Error {
    fn from(err: crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdError) -> Self {
        match err {
            crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError> for Error {
    fn from(err: crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError) -> Self {
        match err {
            crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError::RuntimeClientError(inner) => Error::RuntimeClientError(inner),
            crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::invoke_agent_runtime::InvokeAgentRuntimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError> for Error {
    fn from(err: crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError) -> Self {
        match err {
            crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::invoke_code_interpreter::InvokeCodeInterpreterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_actors::ListActorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_actors::ListActorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_actors::ListActorsError> for Error {
    fn from(err: crate::operation::list_actors::ListActorsError) -> Self {
        match err {
            crate::operation::list_actors::ListActorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_actors::ListActorsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_actors::ListActorsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_actors::ListActorsError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::list_actors::ListActorsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_actors::ListActorsError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::list_actors::ListActorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_actors::ListActorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_browser_sessions::ListBrowserSessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_browser_sessions::ListBrowserSessionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_browser_sessions::ListBrowserSessionsError> for Error {
    fn from(err: crate::operation::list_browser_sessions::ListBrowserSessionsError) -> Self {
        match err {
            crate::operation::list_browser_sessions::ListBrowserSessionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_browser_sessions::ListBrowserSessionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_browser_sessions::ListBrowserSessionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_browser_sessions::ListBrowserSessionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_browser_sessions::ListBrowserSessionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_browser_sessions::ListBrowserSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsError> for Error {
    fn from(err: crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsError) -> Self {
        match err {
            crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_events::ListEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_events::ListEventsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_events::ListEventsError> for Error {
    fn from(err: crate::operation::list_events::ListEventsError) -> Self {
        match err {
            crate::operation::list_events::ListEventsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_events::ListEventsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_events::ListEventsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_events::ListEventsError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::list_events::ListEventsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_events::ListEventsError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::list_events::ListEventsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_events::ListEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_memory_records::ListMemoryRecordsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_memory_records::ListMemoryRecordsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_memory_records::ListMemoryRecordsError> for Error {
    fn from(err: crate::operation::list_memory_records::ListMemoryRecordsError) -> Self {
        match err {
            crate::operation::list_memory_records::ListMemoryRecordsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_memory_records::ListMemoryRecordsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_memory_records::ListMemoryRecordsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_memory_records::ListMemoryRecordsError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::list_memory_records::ListMemoryRecordsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_memory_records::ListMemoryRecordsError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::list_memory_records::ListMemoryRecordsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_memory_records::ListMemoryRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sessions::ListSessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sessions::ListSessionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_sessions::ListSessionsError> for Error {
    fn from(err: crate::operation::list_sessions::ListSessionsError) -> Self {
        match err {
            crate::operation::list_sessions::ListSessionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_sessions::ListSessionsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_sessions::ListSessionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_sessions::ListSessionsError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::list_sessions::ListSessionsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_sessions::ListSessionsError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::list_sessions::ListSessionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_sessions::ListSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError> for Error {
    fn from(err: crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError) -> Self {
        match err {
            crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError::ServiceException(inner) => Error::ServiceException(inner),
            crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError::ThrottledException(inner) => Error::ThrottledException(inner),
            crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::retrieve_memory_records::RetrieveMemoryRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_browser_session::StartBrowserSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_browser_session::StartBrowserSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_browser_session::StartBrowserSessionError> for Error {
    fn from(err: crate::operation::start_browser_session::StartBrowserSessionError) -> Self {
        match err {
            crate::operation::start_browser_session::StartBrowserSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_browser_session::StartBrowserSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_browser_session::StartBrowserSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_browser_session::StartBrowserSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_browser_session::StartBrowserSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_browser_session::StartBrowserSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_browser_session::StartBrowserSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_browser_session::StartBrowserSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError> for Error {
    fn from(err: crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError) -> Self {
        match err {
            crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_code_interpreter_session::StartCodeInterpreterSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_browser_session::StopBrowserSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_browser_session::StopBrowserSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_browser_session::StopBrowserSessionError> for Error {
    fn from(err: crate::operation::stop_browser_session::StopBrowserSessionError) -> Self {
        match err {
            crate::operation::stop_browser_session::StopBrowserSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_browser_session::StopBrowserSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_browser_session::StopBrowserSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_browser_session::StopBrowserSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_browser_session::StopBrowserSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::stop_browser_session::StopBrowserSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_browser_session::StopBrowserSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_browser_session::StopBrowserSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError> for Error {
    fn from(err: crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError) -> Self {
        match err {
            crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::stop_code_interpreter_session::StopCodeInterpreterSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_runtime_session::StopRuntimeSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_runtime_session::StopRuntimeSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_runtime_session::StopRuntimeSessionError> for Error {
    fn from(err: crate::operation::stop_runtime_session::StopRuntimeSessionError) -> Self {
        match err {
            crate::operation::stop_runtime_session::StopRuntimeSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_runtime_session::StopRuntimeSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_runtime_session::StopRuntimeSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_runtime_session::StopRuntimeSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_runtime_session::StopRuntimeSessionError::RuntimeClientError(inner) => Error::RuntimeClientError(inner),
            crate::operation::stop_runtime_session::StopRuntimeSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::stop_runtime_session::StopRuntimeSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_runtime_session::StopRuntimeSessionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::stop_runtime_session::StopRuntimeSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_runtime_session::StopRuntimeSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_browser_stream::UpdateBrowserStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_browser_stream::UpdateBrowserStreamError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_browser_stream::UpdateBrowserStreamError> for Error {
    fn from(err: crate::operation::update_browser_stream::UpdateBrowserStreamError) -> Self {
        match err {
            crate::operation::update_browser_stream::UpdateBrowserStreamError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_browser_stream::UpdateBrowserStreamError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_browser_stream::UpdateBrowserStreamError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_browser_stream::UpdateBrowserStreamError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_browser_stream::UpdateBrowserStreamError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_browser_stream::UpdateBrowserStreamError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_browser_stream::UpdateBrowserStreamError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_browser_stream::UpdateBrowserStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::types::error::CodeInterpreterStreamOutputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::types::error::CodeInterpreterStreamOutputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::types::error::CodeInterpreterStreamOutputError> for Error {
    fn from(err: crate::types::error::CodeInterpreterStreamOutputError) -> Self {
        match err {
            crate::types::error::CodeInterpreterStreamOutputError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::types::error::CodeInterpreterStreamOutputError::ConflictException(inner) => Error::ConflictException(inner),
            crate::types::error::CodeInterpreterStreamOutputError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::types::error::CodeInterpreterStreamOutputError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::types::error::CodeInterpreterStreamOutputError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::types::error::CodeInterpreterStreamOutputError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::types::error::CodeInterpreterStreamOutputError::ValidationException(inner) => Error::ValidationException(inner),
            crate::types::error::CodeInterpreterStreamOutputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::InvalidInputException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::RuntimeClientError(inner) => inner.source(),
            Error::ServiceException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottledException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::UnauthorizedException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::RuntimeClientError(e) => e.request_id(),
            Self::ServiceException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottledException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
