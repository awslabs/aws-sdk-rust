// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_sessions_statistics_aggregation::_start_sessions_statistics_aggregation_output::StartSessionsStatisticsAggregationOutputBuilder;

pub use crate::operation::start_sessions_statistics_aggregation::_start_sessions_statistics_aggregation_input::StartSessionsStatisticsAggregationInputBuilder;

impl crate::operation::start_sessions_statistics_aggregation::builders::StartSessionsStatisticsAggregationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_sessions_statistics_aggregation();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartSessionsStatisticsAggregation`.
///
/// <p>Starts an asynchronous request for getting aggregated statistics about queues and farms. Get the statistics using the <code>GetSessionsStatisticsAggregation</code> operation. Statistics are available for 1 hour after you call the <code>StartSessionsStatisticsAggregation</code> operation.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartSessionsStatisticsAggregationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_sessions_statistics_aggregation::builders::StartSessionsStatisticsAggregationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationOutput,
        crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError,
    > for StartSessionsStatisticsAggregationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationOutput,
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartSessionsStatisticsAggregationFluentBuilder {
    /// Creates a new `StartSessionsStatisticsAggregation`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartSessionsStatisticsAggregation as a reference.
    pub fn as_input(&self) -> &crate::operation::start_sessions_statistics_aggregation::builders::StartSessionsStatisticsAggregationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregation::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationOutput,
        crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the farm that contains queues or fleets to return statistics for.</p>
    pub fn farm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.farm_id(input.into());
        self
    }
    /// <p>The identifier of the farm that contains queues or fleets to return statistics for.</p>
    pub fn set_farm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_farm_id(input);
        self
    }
    /// <p>The identifier of the farm that contains queues or fleets to return statistics for.</p>
    pub fn get_farm_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_farm_id()
    }
    /// <p>A list of fleet IDs or queue IDs to gather statistics for.</p>
    pub fn resource_ids(mut self, input: crate::types::SessionsStatisticsResources) -> Self {
        self.inner = self.inner.resource_ids(input);
        self
    }
    /// <p>A list of fleet IDs or queue IDs to gather statistics for.</p>
    pub fn set_resource_ids(mut self, input: ::std::option::Option<crate::types::SessionsStatisticsResources>) -> Self {
        self.inner = self.inner.set_resource_ids(input);
        self
    }
    /// <p>A list of fleet IDs or queue IDs to gather statistics for.</p>
    pub fn get_resource_ids(&self) -> &::std::option::Option<crate::types::SessionsStatisticsResources> {
        self.inner.get_resource_ids()
    }
    /// <p>The Linux timestamp of the date and time that the statistics start.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>The Linux timestamp of the date and time that the statistics start.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>The Linux timestamp of the date and time that the statistics start.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_start_time()
    }
    /// <p>The Linux timestamp of the date and time that the statistics end.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p>The Linux timestamp of the date and time that the statistics end.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// <p>The Linux timestamp of the date and time that the statistics end.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_end_time()
    }
    /// <p>The timezone to use for the statistics. Use UTC notation such as "UTC+8."</p>
    pub fn timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.timezone(input.into());
        self
    }
    /// <p>The timezone to use for the statistics. Use UTC notation such as "UTC+8."</p>
    pub fn set_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_timezone(input);
        self
    }
    /// <p>The timezone to use for the statistics. Use UTC notation such as "UTC+8."</p>
    pub fn get_timezone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_timezone()
    }
    /// <p>The period to aggregate the statistics.</p>
    pub fn period(mut self, input: crate::types::Period) -> Self {
        self.inner = self.inner.period(input);
        self
    }
    /// <p>The period to aggregate the statistics.</p>
    pub fn set_period(mut self, input: ::std::option::Option<crate::types::Period>) -> Self {
        self.inner = self.inner.set_period(input);
        self
    }
    /// <p>The period to aggregate the statistics.</p>
    pub fn get_period(&self) -> &::std::option::Option<crate::types::Period> {
        self.inner.get_period()
    }
    ///
    /// Appends an item to `groupBy`.
    ///
    /// To override the contents of this collection use [`set_group_by`](Self::set_group_by).
    ///
    /// <p>The field to use to group the statistics.</p>
    pub fn group_by(mut self, input: crate::types::UsageGroupByField) -> Self {
        self.inner = self.inner.group_by(input);
        self
    }
    /// <p>The field to use to group the statistics.</p>
    pub fn set_group_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UsageGroupByField>>) -> Self {
        self.inner = self.inner.set_group_by(input);
        self
    }
    /// <p>The field to use to group the statistics.</p>
    pub fn get_group_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UsageGroupByField>> {
        self.inner.get_group_by()
    }
    ///
    /// Appends an item to `statistics`.
    ///
    /// To override the contents of this collection use [`set_statistics`](Self::set_statistics).
    ///
    /// <p>One to four statistics to return.</p>
    pub fn statistics(mut self, input: crate::types::UsageStatistic) -> Self {
        self.inner = self.inner.statistics(input);
        self
    }
    /// <p>One to four statistics to return.</p>
    pub fn set_statistics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UsageStatistic>>) -> Self {
        self.inner = self.inner.set_statistics(input);
        self
    }
    /// <p>One to four statistics to return.</p>
    pub fn get_statistics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UsageStatistic>> {
        self.inner.get_statistics()
    }
}
