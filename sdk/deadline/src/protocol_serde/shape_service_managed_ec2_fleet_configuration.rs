// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_service_managed_ec2_fleet_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ServiceManagedEc2FleetConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.instance_capabilities {
        #[allow(unused_mut)]
        let mut object_2 = object.key("instanceCapabilities").start_object();
        crate::protocol_serde::shape_service_managed_ec2_instance_capabilities::ser_service_managed_ec2_instance_capabilities(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.instance_market_options {
        #[allow(unused_mut)]
        let mut object_4 = object.key("instanceMarketOptions").start_object();
        crate::protocol_serde::shape_service_managed_ec2_instance_market_options::ser_service_managed_ec2_instance_market_options(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("vpcConfiguration").start_object();
        crate::protocol_serde::shape_vpc_configuration::ser_vpc_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.storage_profile_id {
        object.key("storageProfileId").string(var_7.as_str());
    }
    Ok(())
}

pub(crate) fn de_service_managed_ec2_fleet_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::ServiceManagedEc2FleetConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ServiceManagedEc2FleetConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "instanceCapabilities" => {
                            builder = builder.set_instance_capabilities(
                                crate::protocol_serde::shape_service_managed_ec2_instance_capabilities::de_service_managed_ec2_instance_capabilities(
                                    tokens,
                                )?,
                            );
                        }
                        "instanceMarketOptions" => {
                            builder = builder.set_instance_market_options(
                                    crate::protocol_serde::shape_service_managed_ec2_instance_market_options::de_service_managed_ec2_instance_market_options(tokens)?
                                );
                        }
                        "vpcConfiguration" => {
                            builder = builder.set_vpc_configuration(crate::protocol_serde::shape_vpc_configuration::de_vpc_configuration(tokens)?);
                        }
                        "storageProfileId" => {
                            builder = builder.set_storage_profile_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::service_managed_ec2_fleet_configuration_correct_errors(builder).build(),
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
