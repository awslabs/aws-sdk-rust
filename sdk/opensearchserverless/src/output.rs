// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVpcEndpointsOutput {
    /// <p>Details about each VPC endpoint, including the name and current status.</p>
    #[doc(hidden)]
    pub vpc_endpoint_summaries:
        std::option::Option<std::vec::Vec<crate::model::VpcEndpointSummary>>,
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListVpcEndpointsOutput {
    /// <p>Details about each VPC endpoint, including the name and current status.</p>
    pub fn vpc_endpoint_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::VpcEndpointSummary]> {
        self.vpc_endpoint_summaries.as_deref()
    }
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVpcEndpointsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListVpcEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`ListVpcEndpointsOutput`](crate::output::ListVpcEndpointsOutput).
    pub fn builder() -> crate::output::list_vpc_endpoints_output::Builder {
        crate::output::list_vpc_endpoints_output::Builder::default()
    }
}

/// See [`ListVpcEndpointsOutput`](crate::output::ListVpcEndpointsOutput).
pub mod list_vpc_endpoints_output {

    /// A builder for [`ListVpcEndpointsOutput`](crate::output::ListVpcEndpointsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_endpoint_summaries:
            std::option::Option<std::vec::Vec<crate::model::VpcEndpointSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpc_endpoint_summaries`.
        ///
        /// To override the contents of this collection use [`set_vpc_endpoint_summaries`](Self::set_vpc_endpoint_summaries).
        ///
        /// <p>Details about each VPC endpoint, including the name and current status.</p>
        pub fn vpc_endpoint_summaries(mut self, input: crate::model::VpcEndpointSummary) -> Self {
            let mut v = self.vpc_endpoint_summaries.unwrap_or_default();
            v.push(input);
            self.vpc_endpoint_summaries = Some(v);
            self
        }
        /// <p>Details about each VPC endpoint, including the name and current status.</p>
        pub fn set_vpc_endpoint_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcEndpointSummary>>,
        ) -> Self {
            self.vpc_endpoint_summaries = input;
            self
        }
        /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListVpcEndpointsOutput`](crate::output::ListVpcEndpointsOutput).
        pub fn build(self) -> crate::output::ListVpcEndpointsOutput {
            crate::output::ListVpcEndpointsOutput {
                vpc_endpoint_summaries: self.vpc_endpoint_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpcEndpointOutput {
    /// <p>Details about the created interface VPC endpoint.</p>
    #[doc(hidden)]
    pub create_vpc_endpoint_detail: std::option::Option<crate::model::CreateVpcEndpointDetail>,
    _request_id: Option<String>,
}
impl CreateVpcEndpointOutput {
    /// <p>Details about the created interface VPC endpoint.</p>
    pub fn create_vpc_endpoint_detail(
        &self,
    ) -> std::option::Option<&crate::model::CreateVpcEndpointDetail> {
        self.create_vpc_endpoint_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVpcEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateVpcEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput).
    pub fn builder() -> crate::output::create_vpc_endpoint_output::Builder {
        crate::output::create_vpc_endpoint_output::Builder::default()
    }
}

/// See [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput).
pub mod create_vpc_endpoint_output {

    /// A builder for [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) create_vpc_endpoint_detail:
            std::option::Option<crate::model::CreateVpcEndpointDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the created interface VPC endpoint.</p>
        pub fn create_vpc_endpoint_detail(
            mut self,
            input: crate::model::CreateVpcEndpointDetail,
        ) -> Self {
            self.create_vpc_endpoint_detail = Some(input);
            self
        }
        /// <p>Details about the created interface VPC endpoint.</p>
        pub fn set_create_vpc_endpoint_detail(
            mut self,
            input: std::option::Option<crate::model::CreateVpcEndpointDetail>,
        ) -> Self {
            self.create_vpc_endpoint_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput).
        pub fn build(self) -> crate::output::CreateVpcEndpointOutput {
            crate::output::CreateVpcEndpointOutput {
                create_vpc_endpoint_detail: self.create_vpc_endpoint_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpcEndpointOutput {
    /// <p>Details about the deleted endpoint.</p>
    #[doc(hidden)]
    pub delete_vpc_endpoint_detail: std::option::Option<crate::model::DeleteVpcEndpointDetail>,
    _request_id: Option<String>,
}
impl DeleteVpcEndpointOutput {
    /// <p>Details about the deleted endpoint.</p>
    pub fn delete_vpc_endpoint_detail(
        &self,
    ) -> std::option::Option<&crate::model::DeleteVpcEndpointDetail> {
        self.delete_vpc_endpoint_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteVpcEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVpcEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointOutput`](crate::output::DeleteVpcEndpointOutput).
    pub fn builder() -> crate::output::delete_vpc_endpoint_output::Builder {
        crate::output::delete_vpc_endpoint_output::Builder::default()
    }
}

/// See [`DeleteVpcEndpointOutput`](crate::output::DeleteVpcEndpointOutput).
pub mod delete_vpc_endpoint_output {

    /// A builder for [`DeleteVpcEndpointOutput`](crate::output::DeleteVpcEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) delete_vpc_endpoint_detail:
            std::option::Option<crate::model::DeleteVpcEndpointDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the deleted endpoint.</p>
        pub fn delete_vpc_endpoint_detail(
            mut self,
            input: crate::model::DeleteVpcEndpointDetail,
        ) -> Self {
            self.delete_vpc_endpoint_detail = Some(input);
            self
        }
        /// <p>Details about the deleted endpoint.</p>
        pub fn set_delete_vpc_endpoint_detail(
            mut self,
            input: std::option::Option<crate::model::DeleteVpcEndpointDetail>,
        ) -> Self {
            self.delete_vpc_endpoint_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcEndpointOutput`](crate::output::DeleteVpcEndpointOutput).
        pub fn build(self) -> crate::output::DeleteVpcEndpointOutput {
            crate::output::DeleteVpcEndpointOutput {
                delete_vpc_endpoint_detail: self.delete_vpc_endpoint_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSecurityPoliciesOutput {
    /// <p>Details about the security policies in your account.</p>
    #[doc(hidden)]
    pub security_policy_summaries:
        std::option::Option<std::vec::Vec<crate::model::SecurityPolicySummary>>,
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSecurityPoliciesOutput {
    /// <p>Details about the security policies in your account.</p>
    pub fn security_policy_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::SecurityPolicySummary]> {
        self.security_policy_summaries.as_deref()
    }
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSecurityPoliciesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSecurityPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`ListSecurityPoliciesOutput`](crate::output::ListSecurityPoliciesOutput).
    pub fn builder() -> crate::output::list_security_policies_output::Builder {
        crate::output::list_security_policies_output::Builder::default()
    }
}

/// See [`ListSecurityPoliciesOutput`](crate::output::ListSecurityPoliciesOutput).
pub mod list_security_policies_output {

    /// A builder for [`ListSecurityPoliciesOutput`](crate::output::ListSecurityPoliciesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_policy_summaries:
            std::option::Option<std::vec::Vec<crate::model::SecurityPolicySummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `security_policy_summaries`.
        ///
        /// To override the contents of this collection use [`set_security_policy_summaries`](Self::set_security_policy_summaries).
        ///
        /// <p>Details about the security policies in your account.</p>
        pub fn security_policy_summaries(
            mut self,
            input: crate::model::SecurityPolicySummary,
        ) -> Self {
            let mut v = self.security_policy_summaries.unwrap_or_default();
            v.push(input);
            self.security_policy_summaries = Some(v);
            self
        }
        /// <p>Details about the security policies in your account.</p>
        pub fn set_security_policy_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SecurityPolicySummary>>,
        ) -> Self {
            self.security_policy_summaries = input;
            self
        }
        /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSecurityPoliciesOutput`](crate::output::ListSecurityPoliciesOutput).
        pub fn build(self) -> crate::output::ListSecurityPoliciesOutput {
            crate::output::ListSecurityPoliciesOutput {
                security_policy_summaries: self.security_policy_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSecurityPolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSecurityPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteSecurityPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSecurityPolicyOutput`](crate::output::DeleteSecurityPolicyOutput).
    pub fn builder() -> crate::output::delete_security_policy_output::Builder {
        crate::output::delete_security_policy_output::Builder::default()
    }
}

/// See [`DeleteSecurityPolicyOutput`](crate::output::DeleteSecurityPolicyOutput).
pub mod delete_security_policy_output {

    /// A builder for [`DeleteSecurityPolicyOutput`](crate::output::DeleteSecurityPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSecurityPolicyOutput`](crate::output::DeleteSecurityPolicyOutput).
        pub fn build(self) -> crate::output::DeleteSecurityPolicyOutput {
            crate::output::DeleteSecurityPolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSecurityPolicyOutput {
    /// <p>Details about the updated security policy.</p>
    #[doc(hidden)]
    pub security_policy_detail: std::option::Option<crate::model::SecurityPolicyDetail>,
    _request_id: Option<String>,
}
impl UpdateSecurityPolicyOutput {
    /// <p>Details about the updated security policy.</p>
    pub fn security_policy_detail(
        &self,
    ) -> std::option::Option<&crate::model::SecurityPolicyDetail> {
        self.security_policy_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateSecurityPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSecurityPolicyOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityPolicyOutput`](crate::output::UpdateSecurityPolicyOutput).
    pub fn builder() -> crate::output::update_security_policy_output::Builder {
        crate::output::update_security_policy_output::Builder::default()
    }
}

/// See [`UpdateSecurityPolicyOutput`](crate::output::UpdateSecurityPolicyOutput).
pub mod update_security_policy_output {

    /// A builder for [`UpdateSecurityPolicyOutput`](crate::output::UpdateSecurityPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_policy_detail: std::option::Option<crate::model::SecurityPolicyDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the updated security policy.</p>
        pub fn security_policy_detail(mut self, input: crate::model::SecurityPolicyDetail) -> Self {
            self.security_policy_detail = Some(input);
            self
        }
        /// <p>Details about the updated security policy.</p>
        pub fn set_security_policy_detail(
            mut self,
            input: std::option::Option<crate::model::SecurityPolicyDetail>,
        ) -> Self {
            self.security_policy_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSecurityPolicyOutput`](crate::output::UpdateSecurityPolicyOutput).
        pub fn build(self) -> crate::output::UpdateSecurityPolicyOutput {
            crate::output::UpdateSecurityPolicyOutput {
                security_policy_detail: self.security_policy_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSecurityPolicyOutput {
    /// <p>Details about the requested security policy.</p>
    #[doc(hidden)]
    pub security_policy_detail: std::option::Option<crate::model::SecurityPolicyDetail>,
    _request_id: Option<String>,
}
impl GetSecurityPolicyOutput {
    /// <p>Details about the requested security policy.</p>
    pub fn security_policy_detail(
        &self,
    ) -> std::option::Option<&crate::model::SecurityPolicyDetail> {
        self.security_policy_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSecurityPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSecurityPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetSecurityPolicyOutput`](crate::output::GetSecurityPolicyOutput).
    pub fn builder() -> crate::output::get_security_policy_output::Builder {
        crate::output::get_security_policy_output::Builder::default()
    }
}

/// See [`GetSecurityPolicyOutput`](crate::output::GetSecurityPolicyOutput).
pub mod get_security_policy_output {

    /// A builder for [`GetSecurityPolicyOutput`](crate::output::GetSecurityPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_policy_detail: std::option::Option<crate::model::SecurityPolicyDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the requested security policy.</p>
        pub fn security_policy_detail(mut self, input: crate::model::SecurityPolicyDetail) -> Self {
            self.security_policy_detail = Some(input);
            self
        }
        /// <p>Details about the requested security policy.</p>
        pub fn set_security_policy_detail(
            mut self,
            input: std::option::Option<crate::model::SecurityPolicyDetail>,
        ) -> Self {
            self.security_policy_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSecurityPolicyOutput`](crate::output::GetSecurityPolicyOutput).
        pub fn build(self) -> crate::output::GetSecurityPolicyOutput {
            crate::output::GetSecurityPolicyOutput {
                security_policy_detail: self.security_policy_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSecurityConfigsOutput {
    /// <p>Details about the security configurations in your account.</p>
    #[doc(hidden)]
    pub security_config_summaries:
        std::option::Option<std::vec::Vec<crate::model::SecurityConfigSummary>>,
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSecurityConfigsOutput {
    /// <p>Details about the security configurations in your account.</p>
    pub fn security_config_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::SecurityConfigSummary]> {
        self.security_config_summaries.as_deref()
    }
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSecurityConfigsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSecurityConfigsOutput {
    /// Creates a new builder-style object to manufacture [`ListSecurityConfigsOutput`](crate::output::ListSecurityConfigsOutput).
    pub fn builder() -> crate::output::list_security_configs_output::Builder {
        crate::output::list_security_configs_output::Builder::default()
    }
}

/// See [`ListSecurityConfigsOutput`](crate::output::ListSecurityConfigsOutput).
pub mod list_security_configs_output {

    /// A builder for [`ListSecurityConfigsOutput`](crate::output::ListSecurityConfigsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_config_summaries:
            std::option::Option<std::vec::Vec<crate::model::SecurityConfigSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `security_config_summaries`.
        ///
        /// To override the contents of this collection use [`set_security_config_summaries`](Self::set_security_config_summaries).
        ///
        /// <p>Details about the security configurations in your account.</p>
        pub fn security_config_summaries(
            mut self,
            input: crate::model::SecurityConfigSummary,
        ) -> Self {
            let mut v = self.security_config_summaries.unwrap_or_default();
            v.push(input);
            self.security_config_summaries = Some(v);
            self
        }
        /// <p>Details about the security configurations in your account.</p>
        pub fn set_security_config_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SecurityConfigSummary>>,
        ) -> Self {
            self.security_config_summaries = input;
            self
        }
        /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSecurityConfigsOutput`](crate::output::ListSecurityConfigsOutput).
        pub fn build(self) -> crate::output::ListSecurityConfigsOutput {
            crate::output::ListSecurityConfigsOutput {
                security_config_summaries: self.security_config_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSecurityConfigOutput {
    /// <p>Details about the created security configuration. </p>
    #[doc(hidden)]
    pub security_config_detail: std::option::Option<crate::model::SecurityConfigDetail>,
    _request_id: Option<String>,
}
impl CreateSecurityConfigOutput {
    /// <p>Details about the created security configuration. </p>
    pub fn security_config_detail(
        &self,
    ) -> std::option::Option<&crate::model::SecurityConfigDetail> {
        self.security_config_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSecurityConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSecurityConfigOutput {
    /// Creates a new builder-style object to manufacture [`CreateSecurityConfigOutput`](crate::output::CreateSecurityConfigOutput).
    pub fn builder() -> crate::output::create_security_config_output::Builder {
        crate::output::create_security_config_output::Builder::default()
    }
}

/// See [`CreateSecurityConfigOutput`](crate::output::CreateSecurityConfigOutput).
pub mod create_security_config_output {

    /// A builder for [`CreateSecurityConfigOutput`](crate::output::CreateSecurityConfigOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_config_detail: std::option::Option<crate::model::SecurityConfigDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the created security configuration. </p>
        pub fn security_config_detail(mut self, input: crate::model::SecurityConfigDetail) -> Self {
            self.security_config_detail = Some(input);
            self
        }
        /// <p>Details about the created security configuration. </p>
        pub fn set_security_config_detail(
            mut self,
            input: std::option::Option<crate::model::SecurityConfigDetail>,
        ) -> Self {
            self.security_config_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSecurityConfigOutput`](crate::output::CreateSecurityConfigOutput).
        pub fn build(self) -> crate::output::CreateSecurityConfigOutput {
            crate::output::CreateSecurityConfigOutput {
                security_config_detail: self.security_config_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSecurityConfigOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSecurityConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteSecurityConfigOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSecurityConfigOutput`](crate::output::DeleteSecurityConfigOutput).
    pub fn builder() -> crate::output::delete_security_config_output::Builder {
        crate::output::delete_security_config_output::Builder::default()
    }
}

/// See [`DeleteSecurityConfigOutput`](crate::output::DeleteSecurityConfigOutput).
pub mod delete_security_config_output {

    /// A builder for [`DeleteSecurityConfigOutput`](crate::output::DeleteSecurityConfigOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSecurityConfigOutput`](crate::output::DeleteSecurityConfigOutput).
        pub fn build(self) -> crate::output::DeleteSecurityConfigOutput {
            crate::output::DeleteSecurityConfigOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSecurityConfigOutput {
    /// <p>Details about the updated security configuration. </p>
    #[doc(hidden)]
    pub security_config_detail: std::option::Option<crate::model::SecurityConfigDetail>,
    _request_id: Option<String>,
}
impl UpdateSecurityConfigOutput {
    /// <p>Details about the updated security configuration. </p>
    pub fn security_config_detail(
        &self,
    ) -> std::option::Option<&crate::model::SecurityConfigDetail> {
        self.security_config_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateSecurityConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSecurityConfigOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityConfigOutput`](crate::output::UpdateSecurityConfigOutput).
    pub fn builder() -> crate::output::update_security_config_output::Builder {
        crate::output::update_security_config_output::Builder::default()
    }
}

/// See [`UpdateSecurityConfigOutput`](crate::output::UpdateSecurityConfigOutput).
pub mod update_security_config_output {

    /// A builder for [`UpdateSecurityConfigOutput`](crate::output::UpdateSecurityConfigOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_config_detail: std::option::Option<crate::model::SecurityConfigDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the updated security configuration. </p>
        pub fn security_config_detail(mut self, input: crate::model::SecurityConfigDetail) -> Self {
            self.security_config_detail = Some(input);
            self
        }
        /// <p>Details about the updated security configuration. </p>
        pub fn set_security_config_detail(
            mut self,
            input: std::option::Option<crate::model::SecurityConfigDetail>,
        ) -> Self {
            self.security_config_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSecurityConfigOutput`](crate::output::UpdateSecurityConfigOutput).
        pub fn build(self) -> crate::output::UpdateSecurityConfigOutput {
            crate::output::UpdateSecurityConfigOutput {
                security_config_detail: self.security_config_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSecurityConfigOutput {
    /// <p>Details of the requested security configuration.</p>
    #[doc(hidden)]
    pub security_config_detail: std::option::Option<crate::model::SecurityConfigDetail>,
    _request_id: Option<String>,
}
impl GetSecurityConfigOutput {
    /// <p>Details of the requested security configuration.</p>
    pub fn security_config_detail(
        &self,
    ) -> std::option::Option<&crate::model::SecurityConfigDetail> {
        self.security_config_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSecurityConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSecurityConfigOutput {
    /// Creates a new builder-style object to manufacture [`GetSecurityConfigOutput`](crate::output::GetSecurityConfigOutput).
    pub fn builder() -> crate::output::get_security_config_output::Builder {
        crate::output::get_security_config_output::Builder::default()
    }
}

/// See [`GetSecurityConfigOutput`](crate::output::GetSecurityConfigOutput).
pub mod get_security_config_output {

    /// A builder for [`GetSecurityConfigOutput`](crate::output::GetSecurityConfigOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_config_detail: std::option::Option<crate::model::SecurityConfigDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details of the requested security configuration.</p>
        pub fn security_config_detail(mut self, input: crate::model::SecurityConfigDetail) -> Self {
            self.security_config_detail = Some(input);
            self
        }
        /// <p>Details of the requested security configuration.</p>
        pub fn set_security_config_detail(
            mut self,
            input: std::option::Option<crate::model::SecurityConfigDetail>,
        ) -> Self {
            self.security_config_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSecurityConfigOutput`](crate::output::GetSecurityConfigOutput).
        pub fn build(self) -> crate::output::GetSecurityConfigOutput {
            crate::output::GetSecurityConfigOutput {
                security_config_detail: self.security_config_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCollectionsOutput {
    /// <p>Details about each collection.</p>
    #[doc(hidden)]
    pub collection_summaries: std::option::Option<std::vec::Vec<crate::model::CollectionSummary>>,
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListCollectionsOutput {
    /// <p>Details about each collection.</p>
    pub fn collection_summaries(&self) -> std::option::Option<&[crate::model::CollectionSummary]> {
        self.collection_summaries.as_deref()
    }
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCollectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListCollectionsOutput {
    /// Creates a new builder-style object to manufacture [`ListCollectionsOutput`](crate::output::ListCollectionsOutput).
    pub fn builder() -> crate::output::list_collections_output::Builder {
        crate::output::list_collections_output::Builder::default()
    }
}

/// See [`ListCollectionsOutput`](crate::output::ListCollectionsOutput).
pub mod list_collections_output {

    /// A builder for [`ListCollectionsOutput`](crate::output::ListCollectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) collection_summaries:
            std::option::Option<std::vec::Vec<crate::model::CollectionSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `collection_summaries`.
        ///
        /// To override the contents of this collection use [`set_collection_summaries`](Self::set_collection_summaries).
        ///
        /// <p>Details about each collection.</p>
        pub fn collection_summaries(mut self, input: crate::model::CollectionSummary) -> Self {
            let mut v = self.collection_summaries.unwrap_or_default();
            v.push(input);
            self.collection_summaries = Some(v);
            self
        }
        /// <p>Details about each collection.</p>
        pub fn set_collection_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CollectionSummary>>,
        ) -> Self {
            self.collection_summaries = input;
            self
        }
        /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListCollectionsOutput`](crate::output::ListCollectionsOutput).
        pub fn build(self) -> crate::output::ListCollectionsOutput {
            crate::output::ListCollectionsOutput {
                collection_summaries: self.collection_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCollectionOutput {
    /// <p>Details about the collection.</p>
    #[doc(hidden)]
    pub create_collection_detail: std::option::Option<crate::model::CreateCollectionDetail>,
    _request_id: Option<String>,
}
impl CreateCollectionOutput {
    /// <p>Details about the collection.</p>
    pub fn create_collection_detail(
        &self,
    ) -> std::option::Option<&crate::model::CreateCollectionDetail> {
        self.create_collection_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateCollectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateCollectionOutput {
    /// Creates a new builder-style object to manufacture [`CreateCollectionOutput`](crate::output::CreateCollectionOutput).
    pub fn builder() -> crate::output::create_collection_output::Builder {
        crate::output::create_collection_output::Builder::default()
    }
}

/// See [`CreateCollectionOutput`](crate::output::CreateCollectionOutput).
pub mod create_collection_output {

    /// A builder for [`CreateCollectionOutput`](crate::output::CreateCollectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) create_collection_detail:
            std::option::Option<crate::model::CreateCollectionDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the collection.</p>
        pub fn create_collection_detail(
            mut self,
            input: crate::model::CreateCollectionDetail,
        ) -> Self {
            self.create_collection_detail = Some(input);
            self
        }
        /// <p>Details about the collection.</p>
        pub fn set_create_collection_detail(
            mut self,
            input: std::option::Option<crate::model::CreateCollectionDetail>,
        ) -> Self {
            self.create_collection_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateCollectionOutput`](crate::output::CreateCollectionOutput).
        pub fn build(self) -> crate::output::CreateCollectionOutput {
            crate::output::CreateCollectionOutput {
                create_collection_detail: self.create_collection_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCollectionOutput {
    /// <p>Details of the deleted collection.</p>
    #[doc(hidden)]
    pub delete_collection_detail: std::option::Option<crate::model::DeleteCollectionDetail>,
    _request_id: Option<String>,
}
impl DeleteCollectionOutput {
    /// <p>Details of the deleted collection.</p>
    pub fn delete_collection_detail(
        &self,
    ) -> std::option::Option<&crate::model::DeleteCollectionDetail> {
        self.delete_collection_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteCollectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteCollectionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCollectionOutput`](crate::output::DeleteCollectionOutput).
    pub fn builder() -> crate::output::delete_collection_output::Builder {
        crate::output::delete_collection_output::Builder::default()
    }
}

/// See [`DeleteCollectionOutput`](crate::output::DeleteCollectionOutput).
pub mod delete_collection_output {

    /// A builder for [`DeleteCollectionOutput`](crate::output::DeleteCollectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) delete_collection_detail:
            std::option::Option<crate::model::DeleteCollectionDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details of the deleted collection.</p>
        pub fn delete_collection_detail(
            mut self,
            input: crate::model::DeleteCollectionDetail,
        ) -> Self {
            self.delete_collection_detail = Some(input);
            self
        }
        /// <p>Details of the deleted collection.</p>
        pub fn set_delete_collection_detail(
            mut self,
            input: std::option::Option<crate::model::DeleteCollectionDetail>,
        ) -> Self {
            self.delete_collection_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCollectionOutput`](crate::output::DeleteCollectionOutput).
        pub fn build(self) -> crate::output::DeleteCollectionOutput {
            crate::output::DeleteCollectionOutput {
                delete_collection_detail: self.delete_collection_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCollectionOutput {
    /// <p>Details about the updated collection.</p>
    #[doc(hidden)]
    pub update_collection_detail: std::option::Option<crate::model::UpdateCollectionDetail>,
    _request_id: Option<String>,
}
impl UpdateCollectionOutput {
    /// <p>Details about the updated collection.</p>
    pub fn update_collection_detail(
        &self,
    ) -> std::option::Option<&crate::model::UpdateCollectionDetail> {
        self.update_collection_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateCollectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateCollectionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCollectionOutput`](crate::output::UpdateCollectionOutput).
    pub fn builder() -> crate::output::update_collection_output::Builder {
        crate::output::update_collection_output::Builder::default()
    }
}

/// See [`UpdateCollectionOutput`](crate::output::UpdateCollectionOutput).
pub mod update_collection_output {

    /// A builder for [`UpdateCollectionOutput`](crate::output::UpdateCollectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) update_collection_detail:
            std::option::Option<crate::model::UpdateCollectionDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the updated collection.</p>
        pub fn update_collection_detail(
            mut self,
            input: crate::model::UpdateCollectionDetail,
        ) -> Self {
            self.update_collection_detail = Some(input);
            self
        }
        /// <p>Details about the updated collection.</p>
        pub fn set_update_collection_detail(
            mut self,
            input: std::option::Option<crate::model::UpdateCollectionDetail>,
        ) -> Self {
            self.update_collection_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateCollectionOutput`](crate::output::UpdateCollectionOutput).
        pub fn build(self) -> crate::output::UpdateCollectionOutput {
            crate::output::UpdateCollectionOutput {
                update_collection_detail: self.update_collection_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAccessPoliciesOutput {
    /// <p>Details about the requested access policies.</p>
    #[doc(hidden)]
    pub access_policy_summaries:
        std::option::Option<std::vec::Vec<crate::model::AccessPolicySummary>>,
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAccessPoliciesOutput {
    /// <p>Details about the requested access policies.</p>
    pub fn access_policy_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::AccessPolicySummary]> {
        self.access_policy_summaries.as_deref()
    }
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAccessPoliciesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAccessPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`ListAccessPoliciesOutput`](crate::output::ListAccessPoliciesOutput).
    pub fn builder() -> crate::output::list_access_policies_output::Builder {
        crate::output::list_access_policies_output::Builder::default()
    }
}

/// See [`ListAccessPoliciesOutput`](crate::output::ListAccessPoliciesOutput).
pub mod list_access_policies_output {

    /// A builder for [`ListAccessPoliciesOutput`](crate::output::ListAccessPoliciesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) access_policy_summaries:
            std::option::Option<std::vec::Vec<crate::model::AccessPolicySummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `access_policy_summaries`.
        ///
        /// To override the contents of this collection use [`set_access_policy_summaries`](Self::set_access_policy_summaries).
        ///
        /// <p>Details about the requested access policies.</p>
        pub fn access_policy_summaries(mut self, input: crate::model::AccessPolicySummary) -> Self {
            let mut v = self.access_policy_summaries.unwrap_or_default();
            v.push(input);
            self.access_policy_summaries = Some(v);
            self
        }
        /// <p>Details about the requested access policies.</p>
        pub fn set_access_policy_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AccessPolicySummary>>,
        ) -> Self {
            self.access_policy_summaries = input;
            self
        }
        /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAccessPoliciesOutput`](crate::output::ListAccessPoliciesOutput).
        pub fn build(self) -> crate::output::ListAccessPoliciesOutput {
            crate::output::ListAccessPoliciesOutput {
                access_policy_summaries: self.access_policy_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAccessPolicyOutput {
    /// <p>Details about the created access policy.</p>
    #[doc(hidden)]
    pub access_policy_detail: std::option::Option<crate::model::AccessPolicyDetail>,
    _request_id: Option<String>,
}
impl CreateAccessPolicyOutput {
    /// <p>Details about the created access policy.</p>
    pub fn access_policy_detail(&self) -> std::option::Option<&crate::model::AccessPolicyDetail> {
        self.access_policy_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateAccessPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAccessPolicyOutput {
    /// Creates a new builder-style object to manufacture [`CreateAccessPolicyOutput`](crate::output::CreateAccessPolicyOutput).
    pub fn builder() -> crate::output::create_access_policy_output::Builder {
        crate::output::create_access_policy_output::Builder::default()
    }
}

/// See [`CreateAccessPolicyOutput`](crate::output::CreateAccessPolicyOutput).
pub mod create_access_policy_output {

    /// A builder for [`CreateAccessPolicyOutput`](crate::output::CreateAccessPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) access_policy_detail: std::option::Option<crate::model::AccessPolicyDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the created access policy.</p>
        pub fn access_policy_detail(mut self, input: crate::model::AccessPolicyDetail) -> Self {
            self.access_policy_detail = Some(input);
            self
        }
        /// <p>Details about the created access policy.</p>
        pub fn set_access_policy_detail(
            mut self,
            input: std::option::Option<crate::model::AccessPolicyDetail>,
        ) -> Self {
            self.access_policy_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAccessPolicyOutput`](crate::output::CreateAccessPolicyOutput).
        pub fn build(self) -> crate::output::CreateAccessPolicyOutput {
            crate::output::CreateAccessPolicyOutput {
                access_policy_detail: self.access_policy_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAccessPolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAccessPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteAccessPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAccessPolicyOutput`](crate::output::DeleteAccessPolicyOutput).
    pub fn builder() -> crate::output::delete_access_policy_output::Builder {
        crate::output::delete_access_policy_output::Builder::default()
    }
}

/// See [`DeleteAccessPolicyOutput`](crate::output::DeleteAccessPolicyOutput).
pub mod delete_access_policy_output {

    /// A builder for [`DeleteAccessPolicyOutput`](crate::output::DeleteAccessPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAccessPolicyOutput`](crate::output::DeleteAccessPolicyOutput).
        pub fn build(self) -> crate::output::DeleteAccessPolicyOutput {
            crate::output::DeleteAccessPolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAccessPolicyOutput {
    /// <p>Details about the updated access policy.</p>
    #[doc(hidden)]
    pub access_policy_detail: std::option::Option<crate::model::AccessPolicyDetail>,
    _request_id: Option<String>,
}
impl UpdateAccessPolicyOutput {
    /// <p>Details about the updated access policy.</p>
    pub fn access_policy_detail(&self) -> std::option::Option<&crate::model::AccessPolicyDetail> {
        self.access_policy_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateAccessPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAccessPolicyOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAccessPolicyOutput`](crate::output::UpdateAccessPolicyOutput).
    pub fn builder() -> crate::output::update_access_policy_output::Builder {
        crate::output::update_access_policy_output::Builder::default()
    }
}

/// See [`UpdateAccessPolicyOutput`](crate::output::UpdateAccessPolicyOutput).
pub mod update_access_policy_output {

    /// A builder for [`UpdateAccessPolicyOutput`](crate::output::UpdateAccessPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) access_policy_detail: std::option::Option<crate::model::AccessPolicyDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the updated access policy.</p>
        pub fn access_policy_detail(mut self, input: crate::model::AccessPolicyDetail) -> Self {
            self.access_policy_detail = Some(input);
            self
        }
        /// <p>Details about the updated access policy.</p>
        pub fn set_access_policy_detail(
            mut self,
            input: std::option::Option<crate::model::AccessPolicyDetail>,
        ) -> Self {
            self.access_policy_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAccessPolicyOutput`](crate::output::UpdateAccessPolicyOutput).
        pub fn build(self) -> crate::output::UpdateAccessPolicyOutput {
            crate::output::UpdateAccessPolicyOutput {
                access_policy_detail: self.access_policy_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAccessPolicyOutput {
    /// <p>Details about the requested access policy.</p>
    #[doc(hidden)]
    pub access_policy_detail: std::option::Option<crate::model::AccessPolicyDetail>,
    _request_id: Option<String>,
}
impl GetAccessPolicyOutput {
    /// <p>Details about the requested access policy.</p>
    pub fn access_policy_detail(&self) -> std::option::Option<&crate::model::AccessPolicyDetail> {
        self.access_policy_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAccessPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAccessPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetAccessPolicyOutput`](crate::output::GetAccessPolicyOutput).
    pub fn builder() -> crate::output::get_access_policy_output::Builder {
        crate::output::get_access_policy_output::Builder::default()
    }
}

/// See [`GetAccessPolicyOutput`](crate::output::GetAccessPolicyOutput).
pub mod get_access_policy_output {

    /// A builder for [`GetAccessPolicyOutput`](crate::output::GetAccessPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) access_policy_detail: std::option::Option<crate::model::AccessPolicyDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the requested access policy.</p>
        pub fn access_policy_detail(mut self, input: crate::model::AccessPolicyDetail) -> Self {
            self.access_policy_detail = Some(input);
            self
        }
        /// <p>Details about the requested access policy.</p>
        pub fn set_access_policy_detail(
            mut self,
            input: std::option::Option<crate::model::AccessPolicyDetail>,
        ) -> Self {
            self.access_policy_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAccessPolicyOutput`](crate::output::GetAccessPolicyOutput).
        pub fn build(self) -> crate::output::GetAccessPolicyOutput {
            crate::output::GetAccessPolicyOutput {
                access_policy_detail: self.access_policy_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVpcEndpointOutput {
    /// <p>Details about the updated VPC endpoint.</p>
    #[doc(hidden)]
    pub update_vpc_endpoint_detail: std::option::Option<crate::model::UpdateVpcEndpointDetail>,
    _request_id: Option<String>,
}
impl UpdateVpcEndpointOutput {
    /// <p>Details about the updated VPC endpoint.</p>
    pub fn update_vpc_endpoint_detail(
        &self,
    ) -> std::option::Option<&crate::model::UpdateVpcEndpointDetail> {
        self.update_vpc_endpoint_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateVpcEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateVpcEndpointOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVpcEndpointOutput`](crate::output::UpdateVpcEndpointOutput).
    pub fn builder() -> crate::output::update_vpc_endpoint_output::Builder {
        crate::output::update_vpc_endpoint_output::Builder::default()
    }
}

/// See [`UpdateVpcEndpointOutput`](crate::output::UpdateVpcEndpointOutput).
pub mod update_vpc_endpoint_output {

    /// A builder for [`UpdateVpcEndpointOutput`](crate::output::UpdateVpcEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) update_vpc_endpoint_detail:
            std::option::Option<crate::model::UpdateVpcEndpointDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the updated VPC endpoint.</p>
        pub fn update_vpc_endpoint_detail(
            mut self,
            input: crate::model::UpdateVpcEndpointDetail,
        ) -> Self {
            self.update_vpc_endpoint_detail = Some(input);
            self
        }
        /// <p>Details about the updated VPC endpoint.</p>
        pub fn set_update_vpc_endpoint_detail(
            mut self,
            input: std::option::Option<crate::model::UpdateVpcEndpointDetail>,
        ) -> Self {
            self.update_vpc_endpoint_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVpcEndpointOutput`](crate::output::UpdateVpcEndpointOutput).
        pub fn build(self) -> crate::output::UpdateVpcEndpointOutput {
            crate::output::UpdateVpcEndpointOutput {
                update_vpc_endpoint_detail: self.update_vpc_endpoint_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAccountSettingsOutput {
    /// <p>OpenSearch Serverless-related settings for the current Amazon Web Services account. </p>
    #[doc(hidden)]
    pub account_settings_detail: std::option::Option<crate::model::AccountSettingsDetail>,
    _request_id: Option<String>,
}
impl UpdateAccountSettingsOutput {
    /// <p>OpenSearch Serverless-related settings for the current Amazon Web Services account. </p>
    pub fn account_settings_detail(
        &self,
    ) -> std::option::Option<&crate::model::AccountSettingsDetail> {
        self.account_settings_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateAccountSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAccountSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAccountSettingsOutput`](crate::output::UpdateAccountSettingsOutput).
    pub fn builder() -> crate::output::update_account_settings_output::Builder {
        crate::output::update_account_settings_output::Builder::default()
    }
}

/// See [`UpdateAccountSettingsOutput`](crate::output::UpdateAccountSettingsOutput).
pub mod update_account_settings_output {

    /// A builder for [`UpdateAccountSettingsOutput`](crate::output::UpdateAccountSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_settings_detail:
            std::option::Option<crate::model::AccountSettingsDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>OpenSearch Serverless-related settings for the current Amazon Web Services account. </p>
        pub fn account_settings_detail(
            mut self,
            input: crate::model::AccountSettingsDetail,
        ) -> Self {
            self.account_settings_detail = Some(input);
            self
        }
        /// <p>OpenSearch Serverless-related settings for the current Amazon Web Services account. </p>
        pub fn set_account_settings_detail(
            mut self,
            input: std::option::Option<crate::model::AccountSettingsDetail>,
        ) -> Self {
            self.account_settings_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAccountSettingsOutput`](crate::output::UpdateAccountSettingsOutput).
        pub fn build(self) -> crate::output::UpdateAccountSettingsOutput {
            crate::output::UpdateAccountSettingsOutput {
                account_settings_detail: self.account_settings_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags associated with the resource.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags associated with the resource.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags associated with the resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The tags associated with the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPoliciesStatsOutput {
    /// <p>Information about the data access policies in your account.</p>
    #[doc(hidden)]
    pub access_policy_stats: std::option::Option<crate::model::AccessPolicyStats>,
    /// <p>Information about the security policies in your account.</p>
    #[doc(hidden)]
    pub security_policy_stats: std::option::Option<crate::model::SecurityPolicyStats>,
    /// <p>Information about the security configurations in your account.</p>
    #[doc(hidden)]
    pub security_config_stats: std::option::Option<crate::model::SecurityConfigStats>,
    /// <p>The total number of OpenSearch Serverless security policies and configurations in your account.</p>
    #[doc(hidden)]
    pub total_policy_count: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl GetPoliciesStatsOutput {
    /// <p>Information about the data access policies in your account.</p>
    pub fn access_policy_stats(&self) -> std::option::Option<&crate::model::AccessPolicyStats> {
        self.access_policy_stats.as_ref()
    }
    /// <p>Information about the security policies in your account.</p>
    pub fn security_policy_stats(&self) -> std::option::Option<&crate::model::SecurityPolicyStats> {
        self.security_policy_stats.as_ref()
    }
    /// <p>Information about the security configurations in your account.</p>
    pub fn security_config_stats(&self) -> std::option::Option<&crate::model::SecurityConfigStats> {
        self.security_config_stats.as_ref()
    }
    /// <p>The total number of OpenSearch Serverless security policies and configurations in your account.</p>
    pub fn total_policy_count(&self) -> std::option::Option<i64> {
        self.total_policy_count
    }
}
impl aws_http::request_id::RequestId for GetPoliciesStatsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPoliciesStatsOutput {
    /// Creates a new builder-style object to manufacture [`GetPoliciesStatsOutput`](crate::output::GetPoliciesStatsOutput).
    pub fn builder() -> crate::output::get_policies_stats_output::Builder {
        crate::output::get_policies_stats_output::Builder::default()
    }
}

/// See [`GetPoliciesStatsOutput`](crate::output::GetPoliciesStatsOutput).
pub mod get_policies_stats_output {

    /// A builder for [`GetPoliciesStatsOutput`](crate::output::GetPoliciesStatsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) access_policy_stats: std::option::Option<crate::model::AccessPolicyStats>,
        pub(crate) security_policy_stats: std::option::Option<crate::model::SecurityPolicyStats>,
        pub(crate) security_config_stats: std::option::Option<crate::model::SecurityConfigStats>,
        pub(crate) total_policy_count: std::option::Option<i64>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the data access policies in your account.</p>
        pub fn access_policy_stats(mut self, input: crate::model::AccessPolicyStats) -> Self {
            self.access_policy_stats = Some(input);
            self
        }
        /// <p>Information about the data access policies in your account.</p>
        pub fn set_access_policy_stats(
            mut self,
            input: std::option::Option<crate::model::AccessPolicyStats>,
        ) -> Self {
            self.access_policy_stats = input;
            self
        }
        /// <p>Information about the security policies in your account.</p>
        pub fn security_policy_stats(mut self, input: crate::model::SecurityPolicyStats) -> Self {
            self.security_policy_stats = Some(input);
            self
        }
        /// <p>Information about the security policies in your account.</p>
        pub fn set_security_policy_stats(
            mut self,
            input: std::option::Option<crate::model::SecurityPolicyStats>,
        ) -> Self {
            self.security_policy_stats = input;
            self
        }
        /// <p>Information about the security configurations in your account.</p>
        pub fn security_config_stats(mut self, input: crate::model::SecurityConfigStats) -> Self {
            self.security_config_stats = Some(input);
            self
        }
        /// <p>Information about the security configurations in your account.</p>
        pub fn set_security_config_stats(
            mut self,
            input: std::option::Option<crate::model::SecurityConfigStats>,
        ) -> Self {
            self.security_config_stats = input;
            self
        }
        /// <p>The total number of OpenSearch Serverless security policies and configurations in your account.</p>
        pub fn total_policy_count(mut self, input: i64) -> Self {
            self.total_policy_count = Some(input);
            self
        }
        /// <p>The total number of OpenSearch Serverless security policies and configurations in your account.</p>
        pub fn set_total_policy_count(mut self, input: std::option::Option<i64>) -> Self {
            self.total_policy_count = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetPoliciesStatsOutput`](crate::output::GetPoliciesStatsOutput).
        pub fn build(self) -> crate::output::GetPoliciesStatsOutput {
            crate::output::GetPoliciesStatsOutput {
                access_policy_stats: self.access_policy_stats,
                security_policy_stats: self.security_policy_stats,
                security_config_stats: self.security_config_stats,
                total_policy_count: self.total_policy_count,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAccountSettingsOutput {
    /// <p>OpenSearch Serverless-related details for the current account.</p>
    #[doc(hidden)]
    pub account_settings_detail: std::option::Option<crate::model::AccountSettingsDetail>,
    _request_id: Option<String>,
}
impl GetAccountSettingsOutput {
    /// <p>OpenSearch Serverless-related details for the current account.</p>
    pub fn account_settings_detail(
        &self,
    ) -> std::option::Option<&crate::model::AccountSettingsDetail> {
        self.account_settings_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAccountSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAccountSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetAccountSettingsOutput`](crate::output::GetAccountSettingsOutput).
    pub fn builder() -> crate::output::get_account_settings_output::Builder {
        crate::output::get_account_settings_output::Builder::default()
    }
}

/// See [`GetAccountSettingsOutput`](crate::output::GetAccountSettingsOutput).
pub mod get_account_settings_output {

    /// A builder for [`GetAccountSettingsOutput`](crate::output::GetAccountSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_settings_detail:
            std::option::Option<crate::model::AccountSettingsDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>OpenSearch Serverless-related details for the current account.</p>
        pub fn account_settings_detail(
            mut self,
            input: crate::model::AccountSettingsDetail,
        ) -> Self {
            self.account_settings_detail = Some(input);
            self
        }
        /// <p>OpenSearch Serverless-related details for the current account.</p>
        pub fn set_account_settings_detail(
            mut self,
            input: std::option::Option<crate::model::AccountSettingsDetail>,
        ) -> Self {
            self.account_settings_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAccountSettingsOutput`](crate::output::GetAccountSettingsOutput).
        pub fn build(self) -> crate::output::GetAccountSettingsOutput {
            crate::output::GetAccountSettingsOutput {
                account_settings_detail: self.account_settings_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSecurityPolicyOutput {
    /// <p>Details about the created security policy.</p>
    #[doc(hidden)]
    pub security_policy_detail: std::option::Option<crate::model::SecurityPolicyDetail>,
    _request_id: Option<String>,
}
impl CreateSecurityPolicyOutput {
    /// <p>Details about the created security policy.</p>
    pub fn security_policy_detail(
        &self,
    ) -> std::option::Option<&crate::model::SecurityPolicyDetail> {
        self.security_policy_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSecurityPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSecurityPolicyOutput {
    /// Creates a new builder-style object to manufacture [`CreateSecurityPolicyOutput`](crate::output::CreateSecurityPolicyOutput).
    pub fn builder() -> crate::output::create_security_policy_output::Builder {
        crate::output::create_security_policy_output::Builder::default()
    }
}

/// See [`CreateSecurityPolicyOutput`](crate::output::CreateSecurityPolicyOutput).
pub mod create_security_policy_output {

    /// A builder for [`CreateSecurityPolicyOutput`](crate::output::CreateSecurityPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_policy_detail: std::option::Option<crate::model::SecurityPolicyDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details about the created security policy.</p>
        pub fn security_policy_detail(mut self, input: crate::model::SecurityPolicyDetail) -> Self {
            self.security_policy_detail = Some(input);
            self
        }
        /// <p>Details about the created security policy.</p>
        pub fn set_security_policy_detail(
            mut self,
            input: std::option::Option<crate::model::SecurityPolicyDetail>,
        ) -> Self {
            self.security_policy_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSecurityPolicyOutput`](crate::output::CreateSecurityPolicyOutput).
        pub fn build(self) -> crate::output::CreateSecurityPolicyOutput {
            crate::output::CreateSecurityPolicyOutput {
                security_policy_detail: self.security_policy_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetVpcEndpointOutput {
    /// <p>Details about the specified VPC endpoint.</p>
    #[doc(hidden)]
    pub vpc_endpoint_details: std::option::Option<std::vec::Vec<crate::model::VpcEndpointDetail>>,
    /// <p>Error information for a failed request.</p>
    #[doc(hidden)]
    pub vpc_endpoint_error_details:
        std::option::Option<std::vec::Vec<crate::model::VpcEndpointErrorDetail>>,
    _request_id: Option<String>,
}
impl BatchGetVpcEndpointOutput {
    /// <p>Details about the specified VPC endpoint.</p>
    pub fn vpc_endpoint_details(&self) -> std::option::Option<&[crate::model::VpcEndpointDetail]> {
        self.vpc_endpoint_details.as_deref()
    }
    /// <p>Error information for a failed request.</p>
    pub fn vpc_endpoint_error_details(
        &self,
    ) -> std::option::Option<&[crate::model::VpcEndpointErrorDetail]> {
        self.vpc_endpoint_error_details.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchGetVpcEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetVpcEndpointOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetVpcEndpointOutput`](crate::output::BatchGetVpcEndpointOutput).
    pub fn builder() -> crate::output::batch_get_vpc_endpoint_output::Builder {
        crate::output::batch_get_vpc_endpoint_output::Builder::default()
    }
}

/// See [`BatchGetVpcEndpointOutput`](crate::output::BatchGetVpcEndpointOutput).
pub mod batch_get_vpc_endpoint_output {

    /// A builder for [`BatchGetVpcEndpointOutput`](crate::output::BatchGetVpcEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_endpoint_details:
            std::option::Option<std::vec::Vec<crate::model::VpcEndpointDetail>>,
        pub(crate) vpc_endpoint_error_details:
            std::option::Option<std::vec::Vec<crate::model::VpcEndpointErrorDetail>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpc_endpoint_details`.
        ///
        /// To override the contents of this collection use [`set_vpc_endpoint_details`](Self::set_vpc_endpoint_details).
        ///
        /// <p>Details about the specified VPC endpoint.</p>
        pub fn vpc_endpoint_details(mut self, input: crate::model::VpcEndpointDetail) -> Self {
            let mut v = self.vpc_endpoint_details.unwrap_or_default();
            v.push(input);
            self.vpc_endpoint_details = Some(v);
            self
        }
        /// <p>Details about the specified VPC endpoint.</p>
        pub fn set_vpc_endpoint_details(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcEndpointDetail>>,
        ) -> Self {
            self.vpc_endpoint_details = input;
            self
        }
        /// Appends an item to `vpc_endpoint_error_details`.
        ///
        /// To override the contents of this collection use [`set_vpc_endpoint_error_details`](Self::set_vpc_endpoint_error_details).
        ///
        /// <p>Error information for a failed request.</p>
        pub fn vpc_endpoint_error_details(
            mut self,
            input: crate::model::VpcEndpointErrorDetail,
        ) -> Self {
            let mut v = self.vpc_endpoint_error_details.unwrap_or_default();
            v.push(input);
            self.vpc_endpoint_error_details = Some(v);
            self
        }
        /// <p>Error information for a failed request.</p>
        pub fn set_vpc_endpoint_error_details(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcEndpointErrorDetail>>,
        ) -> Self {
            self.vpc_endpoint_error_details = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchGetVpcEndpointOutput`](crate::output::BatchGetVpcEndpointOutput).
        pub fn build(self) -> crate::output::BatchGetVpcEndpointOutput {
            crate::output::BatchGetVpcEndpointOutput {
                vpc_endpoint_details: self.vpc_endpoint_details,
                vpc_endpoint_error_details: self.vpc_endpoint_error_details,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetCollectionOutput {
    /// <p>Details about each collection.</p>
    #[doc(hidden)]
    pub collection_details: std::option::Option<std::vec::Vec<crate::model::CollectionDetail>>,
    /// <p>Error information for the request.</p>
    #[doc(hidden)]
    pub collection_error_details:
        std::option::Option<std::vec::Vec<crate::model::CollectionErrorDetail>>,
    _request_id: Option<String>,
}
impl BatchGetCollectionOutput {
    /// <p>Details about each collection.</p>
    pub fn collection_details(&self) -> std::option::Option<&[crate::model::CollectionDetail]> {
        self.collection_details.as_deref()
    }
    /// <p>Error information for the request.</p>
    pub fn collection_error_details(
        &self,
    ) -> std::option::Option<&[crate::model::CollectionErrorDetail]> {
        self.collection_error_details.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchGetCollectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetCollectionOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetCollectionOutput`](crate::output::BatchGetCollectionOutput).
    pub fn builder() -> crate::output::batch_get_collection_output::Builder {
        crate::output::batch_get_collection_output::Builder::default()
    }
}

/// See [`BatchGetCollectionOutput`](crate::output::BatchGetCollectionOutput).
pub mod batch_get_collection_output {

    /// A builder for [`BatchGetCollectionOutput`](crate::output::BatchGetCollectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) collection_details:
            std::option::Option<std::vec::Vec<crate::model::CollectionDetail>>,
        pub(crate) collection_error_details:
            std::option::Option<std::vec::Vec<crate::model::CollectionErrorDetail>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `collection_details`.
        ///
        /// To override the contents of this collection use [`set_collection_details`](Self::set_collection_details).
        ///
        /// <p>Details about each collection.</p>
        pub fn collection_details(mut self, input: crate::model::CollectionDetail) -> Self {
            let mut v = self.collection_details.unwrap_or_default();
            v.push(input);
            self.collection_details = Some(v);
            self
        }
        /// <p>Details about each collection.</p>
        pub fn set_collection_details(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CollectionDetail>>,
        ) -> Self {
            self.collection_details = input;
            self
        }
        /// Appends an item to `collection_error_details`.
        ///
        /// To override the contents of this collection use [`set_collection_error_details`](Self::set_collection_error_details).
        ///
        /// <p>Error information for the request.</p>
        pub fn collection_error_details(
            mut self,
            input: crate::model::CollectionErrorDetail,
        ) -> Self {
            let mut v = self.collection_error_details.unwrap_or_default();
            v.push(input);
            self.collection_error_details = Some(v);
            self
        }
        /// <p>Error information for the request.</p>
        pub fn set_collection_error_details(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CollectionErrorDetail>>,
        ) -> Self {
            self.collection_error_details = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchGetCollectionOutput`](crate::output::BatchGetCollectionOutput).
        pub fn build(self) -> crate::output::BatchGetCollectionOutput {
            crate::output::BatchGetCollectionOutput {
                collection_details: self.collection_details,
                collection_error_details: self.collection_error_details,
                _request_id: self._request_id,
            }
        }
    }
}
