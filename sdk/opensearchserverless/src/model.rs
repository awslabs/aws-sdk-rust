// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The VPC endpoint object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VpcEndpointSummary {
    /// <p>The unique identifier of the endpoint.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the endpoint.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status of the endpoint.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::VpcEndpointStatus>,
}
impl VpcEndpointSummary {
    /// <p>The unique identifier of the endpoint.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the endpoint.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the endpoint.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::VpcEndpointStatus> {
        self.status.as_ref()
    }
}
/// See [`VpcEndpointSummary`](crate::model::VpcEndpointSummary).
pub mod vpc_endpoint_summary {

    /// A builder for [`VpcEndpointSummary`](crate::model::VpcEndpointSummary).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::VpcEndpointStatus>,
    }
    impl Builder {
        /// <p>The unique identifier of the endpoint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the endpoint.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the endpoint.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the endpoint.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The current status of the endpoint.</p>
        pub fn status(mut self, input: crate::model::VpcEndpointStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the endpoint.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::VpcEndpointStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`VpcEndpointSummary`](crate::model::VpcEndpointSummary).
        pub fn build(self) -> crate::model::VpcEndpointSummary {
            crate::model::VpcEndpointSummary {
                id: self.id,
                name: self.name,
                status: self.status,
            }
        }
    }
}
impl VpcEndpointSummary {
    /// Creates a new builder-style object to manufacture [`VpcEndpointSummary`](crate::model::VpcEndpointSummary).
    pub fn builder() -> crate::model::vpc_endpoint_summary::Builder {
        crate::model::vpc_endpoint_summary::Builder::default()
    }
}

/// When writing a match expression against `VpcEndpointStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let vpcendpointstatus = unimplemented!();
/// match vpcendpointstatus {
///     VpcEndpointStatus::Active => { /* ... */ },
///     VpcEndpointStatus::Deleting => { /* ... */ },
///     VpcEndpointStatus::Failed => { /* ... */ },
///     VpcEndpointStatus::Pending => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `vpcendpointstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `VpcEndpointStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `VpcEndpointStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `VpcEndpointStatus::NewFeature` is defined.
/// Specifically, when `vpcendpointstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `VpcEndpointStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum VpcEndpointStatus {
    /// VPCEndpoint resource is ready to use
    Active,
    /// Deleting VPCEndpoint resource
    Deleting,
    /// VPCEndpoint resource create or delete failed
    Failed,
    /// Pending VPCEndpoint resource
    Pending,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for VpcEndpointStatus {
    fn from(s: &str) -> Self {
        match s {
            "ACTIVE" => VpcEndpointStatus::Active,
            "DELETING" => VpcEndpointStatus::Deleting,
            "FAILED" => VpcEndpointStatus::Failed,
            "PENDING" => VpcEndpointStatus::Pending,
            other => {
                VpcEndpointStatus::Unknown(crate::types::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for VpcEndpointStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(VpcEndpointStatus::from(s))
    }
}
impl VpcEndpointStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            VpcEndpointStatus::Active => "ACTIVE",
            VpcEndpointStatus::Deleting => "DELETING",
            VpcEndpointStatus::Failed => "FAILED",
            VpcEndpointStatus::Pending => "PENDING",
            VpcEndpointStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["ACTIVE", "DELETING", "FAILED", "PENDING"]
    }
}
impl AsRef<str> for VpcEndpointStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Filter the results of a <code>ListVpcEndpoints</code> request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VpcEndpointFilters {
    /// <p>The current status of the endpoint.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::VpcEndpointStatus>,
}
impl VpcEndpointFilters {
    /// <p>The current status of the endpoint.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::VpcEndpointStatus> {
        self.status.as_ref()
    }
}
/// See [`VpcEndpointFilters`](crate::model::VpcEndpointFilters).
pub mod vpc_endpoint_filters {

    /// A builder for [`VpcEndpointFilters`](crate::model::VpcEndpointFilters).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::VpcEndpointStatus>,
    }
    impl Builder {
        /// <p>The current status of the endpoint.</p>
        pub fn status(mut self, input: crate::model::VpcEndpointStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the endpoint.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::VpcEndpointStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`VpcEndpointFilters`](crate::model::VpcEndpointFilters).
        pub fn build(self) -> crate::model::VpcEndpointFilters {
            crate::model::VpcEndpointFilters {
                status: self.status,
            }
        }
    }
}
impl VpcEndpointFilters {
    /// Creates a new builder-style object to manufacture [`VpcEndpointFilters`](crate::model::VpcEndpointFilters).
    pub fn builder() -> crate::model::vpc_endpoint_filters::Builder {
        crate::model::vpc_endpoint_filters::Builder::default()
    }
}

/// <p>Creation details for an OpenSearch Serverless-managed interface endpoint. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-vpc.html">Access Amazon OpenSearch Serverless using an interface endpoint</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpcEndpointDetail {
    /// <p>The unique identifier of the endpoint.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the endpoint.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status in the endpoint creation process.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::VpcEndpointStatus>,
}
impl CreateVpcEndpointDetail {
    /// <p>The unique identifier of the endpoint.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the endpoint.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status in the endpoint creation process.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::VpcEndpointStatus> {
        self.status.as_ref()
    }
}
/// See [`CreateVpcEndpointDetail`](crate::model::CreateVpcEndpointDetail).
pub mod create_vpc_endpoint_detail {

    /// A builder for [`CreateVpcEndpointDetail`](crate::model::CreateVpcEndpointDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::VpcEndpointStatus>,
    }
    impl Builder {
        /// <p>The unique identifier of the endpoint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the endpoint.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the endpoint.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the endpoint.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The current status in the endpoint creation process.</p>
        pub fn status(mut self, input: crate::model::VpcEndpointStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status in the endpoint creation process.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::VpcEndpointStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcEndpointDetail`](crate::model::CreateVpcEndpointDetail).
        pub fn build(self) -> crate::model::CreateVpcEndpointDetail {
            crate::model::CreateVpcEndpointDetail {
                id: self.id,
                name: self.name,
                status: self.status,
            }
        }
    }
}
impl CreateVpcEndpointDetail {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointDetail`](crate::model::CreateVpcEndpointDetail).
    pub fn builder() -> crate::model::create_vpc_endpoint_detail::Builder {
        crate::model::create_vpc_endpoint_detail::Builder::default()
    }
}

/// <p>Deletion details for an OpenSearch Serverless-managed interface endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpcEndpointDetail {
    /// <p>The unique identifier of the endpoint.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the endpoint.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status of the endpoint deletion process.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::VpcEndpointStatus>,
}
impl DeleteVpcEndpointDetail {
    /// <p>The unique identifier of the endpoint.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the endpoint.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the endpoint deletion process.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::VpcEndpointStatus> {
        self.status.as_ref()
    }
}
/// See [`DeleteVpcEndpointDetail`](crate::model::DeleteVpcEndpointDetail).
pub mod delete_vpc_endpoint_detail {

    /// A builder for [`DeleteVpcEndpointDetail`](crate::model::DeleteVpcEndpointDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::VpcEndpointStatus>,
    }
    impl Builder {
        /// <p>The unique identifier of the endpoint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the endpoint.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the endpoint.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the endpoint.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The current status of the endpoint deletion process.</p>
        pub fn status(mut self, input: crate::model::VpcEndpointStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the endpoint deletion process.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::VpcEndpointStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcEndpointDetail`](crate::model::DeleteVpcEndpointDetail).
        pub fn build(self) -> crate::model::DeleteVpcEndpointDetail {
            crate::model::DeleteVpcEndpointDetail {
                id: self.id,
                name: self.name,
                status: self.status,
            }
        }
    }
}
impl DeleteVpcEndpointDetail {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointDetail`](crate::model::DeleteVpcEndpointDetail).
    pub fn builder() -> crate::model::delete_vpc_endpoint_detail::Builder {
        crate::model::delete_vpc_endpoint_detail::Builder::default()
    }
}

/// <p>A summary of a security policy for OpenSearch Serverless.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityPolicySummary {
    /// <p>The type of security policy.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::SecurityPolicyType>,
    /// <p>The name of the policy.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The version of the policy.</p>
    #[doc(hidden)]
    pub policy_version: std::option::Option<std::string::String>,
    /// <p>The description of the security policy.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The date the policy was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<i64>,
    /// <p>The timestamp of when the policy was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
}
impl SecurityPolicySummary {
    /// <p>The type of security policy.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::SecurityPolicyType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the policy.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version of the policy.</p>
    pub fn policy_version(&self) -> std::option::Option<&str> {
        self.policy_version.as_deref()
    }
    /// <p>The description of the security policy.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date the policy was created.</p>
    pub fn created_date(&self) -> std::option::Option<i64> {
        self.created_date
    }
    /// <p>The timestamp of when the policy was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
}
/// See [`SecurityPolicySummary`](crate::model::SecurityPolicySummary).
pub mod security_policy_summary {

    /// A builder for [`SecurityPolicySummary`](crate::model::SecurityPolicySummary).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#type: std::option::Option<crate::model::SecurityPolicyType>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) policy_version: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) created_date: std::option::Option<i64>,
        pub(crate) last_modified_date: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The type of security policy.</p>
        pub fn r#type(mut self, input: crate::model::SecurityPolicyType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of security policy.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::SecurityPolicyType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The name of the policy.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the policy.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The version of the policy.</p>
        pub fn policy_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_version = Some(input.into());
            self
        }
        /// <p>The version of the policy.</p>
        pub fn set_policy_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.policy_version = input;
            self
        }
        /// <p>The description of the security policy.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the security policy.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The date the policy was created.</p>
        pub fn created_date(mut self, input: i64) -> Self {
            self.created_date = Some(input);
            self
        }
        /// <p>The date the policy was created.</p>
        pub fn set_created_date(mut self, input: std::option::Option<i64>) -> Self {
            self.created_date = input;
            self
        }
        /// <p>The timestamp of when the policy was last modified.</p>
        pub fn last_modified_date(mut self, input: i64) -> Self {
            self.last_modified_date = Some(input);
            self
        }
        /// <p>The timestamp of when the policy was last modified.</p>
        pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
            self.last_modified_date = input;
            self
        }
        /// Consumes the builder and constructs a [`SecurityPolicySummary`](crate::model::SecurityPolicySummary).
        pub fn build(self) -> crate::model::SecurityPolicySummary {
            crate::model::SecurityPolicySummary {
                r#type: self.r#type,
                name: self.name,
                policy_version: self.policy_version,
                description: self.description,
                created_date: self.created_date,
                last_modified_date: self.last_modified_date,
            }
        }
    }
}
impl SecurityPolicySummary {
    /// Creates a new builder-style object to manufacture [`SecurityPolicySummary`](crate::model::SecurityPolicySummary).
    pub fn builder() -> crate::model::security_policy_summary::Builder {
        crate::model::security_policy_summary::Builder::default()
    }
}

/// When writing a match expression against `SecurityPolicyType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let securitypolicytype = unimplemented!();
/// match securitypolicytype {
///     SecurityPolicyType::Encryption => { /* ... */ },
///     SecurityPolicyType::Network => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `securitypolicytype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `SecurityPolicyType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `SecurityPolicyType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `SecurityPolicyType::NewFeature` is defined.
/// Specifically, when `securitypolicytype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `SecurityPolicyType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum SecurityPolicyType {
    /// encryption policy type
    Encryption,
    /// network policy type
    Network,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for SecurityPolicyType {
    fn from(s: &str) -> Self {
        match s {
            "encryption" => SecurityPolicyType::Encryption,
            "network" => SecurityPolicyType::Network,
            other => {
                SecurityPolicyType::Unknown(crate::types::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for SecurityPolicyType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(SecurityPolicyType::from(s))
    }
}
impl SecurityPolicyType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            SecurityPolicyType::Encryption => "encryption",
            SecurityPolicyType::Network => "network",
            SecurityPolicyType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["encryption", "network"]
    }
}
impl AsRef<str> for SecurityPolicyType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Details about an OpenSearch Serverless security policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityPolicyDetail {
    /// <p>The type of security policy.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::SecurityPolicyType>,
    /// <p>The name of the policy.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The version of the policy.</p>
    #[doc(hidden)]
    pub policy_version: std::option::Option<std::string::String>,
    /// <p>The description of the security policy.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The JSON policy document without any whitespaces.</p>
    #[doc(hidden)]
    pub policy: std::option::Option<aws_smithy_types::Document>,
    /// <p>The date the policy was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<i64>,
    /// <p>The timestamp of when the policy was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
}
impl SecurityPolicyDetail {
    /// <p>The type of security policy.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::SecurityPolicyType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the policy.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version of the policy.</p>
    pub fn policy_version(&self) -> std::option::Option<&str> {
        self.policy_version.as_deref()
    }
    /// <p>The description of the security policy.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The JSON policy document without any whitespaces.</p>
    pub fn policy(&self) -> std::option::Option<&aws_smithy_types::Document> {
        self.policy.as_ref()
    }
    /// <p>The date the policy was created.</p>
    pub fn created_date(&self) -> std::option::Option<i64> {
        self.created_date
    }
    /// <p>The timestamp of when the policy was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
}
/// See [`SecurityPolicyDetail`](crate::model::SecurityPolicyDetail).
pub mod security_policy_detail {

    /// A builder for [`SecurityPolicyDetail`](crate::model::SecurityPolicyDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#type: std::option::Option<crate::model::SecurityPolicyType>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) policy_version: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) policy: std::option::Option<aws_smithy_types::Document>,
        pub(crate) created_date: std::option::Option<i64>,
        pub(crate) last_modified_date: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The type of security policy.</p>
        pub fn r#type(mut self, input: crate::model::SecurityPolicyType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of security policy.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::SecurityPolicyType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The name of the policy.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the policy.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The version of the policy.</p>
        pub fn policy_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_version = Some(input.into());
            self
        }
        /// <p>The version of the policy.</p>
        pub fn set_policy_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.policy_version = input;
            self
        }
        /// <p>The description of the security policy.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the security policy.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The JSON policy document without any whitespaces.</p>
        pub fn policy(mut self, input: aws_smithy_types::Document) -> Self {
            self.policy = Some(input);
            self
        }
        /// <p>The JSON policy document without any whitespaces.</p>
        pub fn set_policy(
            mut self,
            input: std::option::Option<aws_smithy_types::Document>,
        ) -> Self {
            self.policy = input;
            self
        }
        /// <p>The date the policy was created.</p>
        pub fn created_date(mut self, input: i64) -> Self {
            self.created_date = Some(input);
            self
        }
        /// <p>The date the policy was created.</p>
        pub fn set_created_date(mut self, input: std::option::Option<i64>) -> Self {
            self.created_date = input;
            self
        }
        /// <p>The timestamp of when the policy was last modified.</p>
        pub fn last_modified_date(mut self, input: i64) -> Self {
            self.last_modified_date = Some(input);
            self
        }
        /// <p>The timestamp of when the policy was last modified.</p>
        pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
            self.last_modified_date = input;
            self
        }
        /// Consumes the builder and constructs a [`SecurityPolicyDetail`](crate::model::SecurityPolicyDetail).
        pub fn build(self) -> crate::model::SecurityPolicyDetail {
            crate::model::SecurityPolicyDetail {
                r#type: self.r#type,
                name: self.name,
                policy_version: self.policy_version,
                description: self.description,
                policy: self.policy,
                created_date: self.created_date,
                last_modified_date: self.last_modified_date,
            }
        }
    }
}
impl SecurityPolicyDetail {
    /// Creates a new builder-style object to manufacture [`SecurityPolicyDetail`](crate::model::SecurityPolicyDetail).
    pub fn builder() -> crate::model::security_policy_detail::Builder {
        crate::model::security_policy_detail::Builder::default()
    }
}

/// <p>A summary of a security configuration for OpenSearch Serverless.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityConfigSummary {
    /// <p>The unique identifier of the security configuration.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of security configuration.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::SecurityConfigType>,
    /// <p>The version of the security configuration.</p>
    #[doc(hidden)]
    pub config_version: std::option::Option<std::string::String>,
    /// <p>The description of the security configuration.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Epoch time when the security configuration was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<i64>,
    /// <p>The timestamp of when the configuration was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
}
impl SecurityConfigSummary {
    /// <p>The unique identifier of the security configuration.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of security configuration.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::SecurityConfigType> {
        self.r#type.as_ref()
    }
    /// <p>The version of the security configuration.</p>
    pub fn config_version(&self) -> std::option::Option<&str> {
        self.config_version.as_deref()
    }
    /// <p>The description of the security configuration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Epoch time when the security configuration was created.</p>
    pub fn created_date(&self) -> std::option::Option<i64> {
        self.created_date
    }
    /// <p>The timestamp of when the configuration was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
}
/// See [`SecurityConfigSummary`](crate::model::SecurityConfigSummary).
pub mod security_config_summary {

    /// A builder for [`SecurityConfigSummary`](crate::model::SecurityConfigSummary).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) r#type: std::option::Option<crate::model::SecurityConfigType>,
        pub(crate) config_version: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) created_date: std::option::Option<i64>,
        pub(crate) last_modified_date: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The unique identifier of the security configuration.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the security configuration.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The type of security configuration.</p>
        pub fn r#type(mut self, input: crate::model::SecurityConfigType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of security configuration.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::SecurityConfigType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The version of the security configuration.</p>
        pub fn config_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.config_version = Some(input.into());
            self
        }
        /// <p>The version of the security configuration.</p>
        pub fn set_config_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.config_version = input;
            self
        }
        /// <p>The description of the security configuration.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the security configuration.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Epoch time when the security configuration was created.</p>
        pub fn created_date(mut self, input: i64) -> Self {
            self.created_date = Some(input);
            self
        }
        /// <p>The Epoch time when the security configuration was created.</p>
        pub fn set_created_date(mut self, input: std::option::Option<i64>) -> Self {
            self.created_date = input;
            self
        }
        /// <p>The timestamp of when the configuration was last modified.</p>
        pub fn last_modified_date(mut self, input: i64) -> Self {
            self.last_modified_date = Some(input);
            self
        }
        /// <p>The timestamp of when the configuration was last modified.</p>
        pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
            self.last_modified_date = input;
            self
        }
        /// Consumes the builder and constructs a [`SecurityConfigSummary`](crate::model::SecurityConfigSummary).
        pub fn build(self) -> crate::model::SecurityConfigSummary {
            crate::model::SecurityConfigSummary {
                id: self.id,
                r#type: self.r#type,
                config_version: self.config_version,
                description: self.description,
                created_date: self.created_date,
                last_modified_date: self.last_modified_date,
            }
        }
    }
}
impl SecurityConfigSummary {
    /// Creates a new builder-style object to manufacture [`SecurityConfigSummary`](crate::model::SecurityConfigSummary).
    pub fn builder() -> crate::model::security_config_summary::Builder {
        crate::model::security_config_summary::Builder::default()
    }
}

/// When writing a match expression against `SecurityConfigType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let securityconfigtype = unimplemented!();
/// match securityconfigtype {
///     SecurityConfigType::Saml => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `securityconfigtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `SecurityConfigType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `SecurityConfigType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `SecurityConfigType::NewFeature` is defined.
/// Specifically, when `securityconfigtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `SecurityConfigType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum SecurityConfigType {
    /// saml provider
    Saml,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for SecurityConfigType {
    fn from(s: &str) -> Self {
        match s {
            "saml" => SecurityConfigType::Saml,
            other => {
                SecurityConfigType::Unknown(crate::types::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for SecurityConfigType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(SecurityConfigType::from(s))
    }
}
impl SecurityConfigType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            SecurityConfigType::Saml => "saml",
            SecurityConfigType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["saml"]
    }
}
impl AsRef<str> for SecurityConfigType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Details about a security configuration for OpenSearch Serverless. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityConfigDetail {
    /// <p>The unique identifier of the security configuration.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of security configuration.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::SecurityConfigType>,
    /// <p>The version of the security configuration.</p>
    #[doc(hidden)]
    pub config_version: std::option::Option<std::string::String>,
    /// <p>The description of the security configuration.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>SAML options for the security configuration in the form of a key-value map.</p>
    #[doc(hidden)]
    pub saml_options: std::option::Option<crate::model::SamlConfigOptions>,
    /// <p>The date the configuration was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<i64>,
    /// <p>The timestamp of when the configuration was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
}
impl SecurityConfigDetail {
    /// <p>The unique identifier of the security configuration.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of security configuration.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::SecurityConfigType> {
        self.r#type.as_ref()
    }
    /// <p>The version of the security configuration.</p>
    pub fn config_version(&self) -> std::option::Option<&str> {
        self.config_version.as_deref()
    }
    /// <p>The description of the security configuration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>SAML options for the security configuration in the form of a key-value map.</p>
    pub fn saml_options(&self) -> std::option::Option<&crate::model::SamlConfigOptions> {
        self.saml_options.as_ref()
    }
    /// <p>The date the configuration was created.</p>
    pub fn created_date(&self) -> std::option::Option<i64> {
        self.created_date
    }
    /// <p>The timestamp of when the configuration was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
}
/// See [`SecurityConfigDetail`](crate::model::SecurityConfigDetail).
pub mod security_config_detail {

    /// A builder for [`SecurityConfigDetail`](crate::model::SecurityConfigDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) r#type: std::option::Option<crate::model::SecurityConfigType>,
        pub(crate) config_version: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) saml_options: std::option::Option<crate::model::SamlConfigOptions>,
        pub(crate) created_date: std::option::Option<i64>,
        pub(crate) last_modified_date: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The unique identifier of the security configuration.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the security configuration.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The type of security configuration.</p>
        pub fn r#type(mut self, input: crate::model::SecurityConfigType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of security configuration.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::SecurityConfigType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The version of the security configuration.</p>
        pub fn config_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.config_version = Some(input.into());
            self
        }
        /// <p>The version of the security configuration.</p>
        pub fn set_config_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.config_version = input;
            self
        }
        /// <p>The description of the security configuration.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the security configuration.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>SAML options for the security configuration in the form of a key-value map.</p>
        pub fn saml_options(mut self, input: crate::model::SamlConfigOptions) -> Self {
            self.saml_options = Some(input);
            self
        }
        /// <p>SAML options for the security configuration in the form of a key-value map.</p>
        pub fn set_saml_options(
            mut self,
            input: std::option::Option<crate::model::SamlConfigOptions>,
        ) -> Self {
            self.saml_options = input;
            self
        }
        /// <p>The date the configuration was created.</p>
        pub fn created_date(mut self, input: i64) -> Self {
            self.created_date = Some(input);
            self
        }
        /// <p>The date the configuration was created.</p>
        pub fn set_created_date(mut self, input: std::option::Option<i64>) -> Self {
            self.created_date = input;
            self
        }
        /// <p>The timestamp of when the configuration was last modified.</p>
        pub fn last_modified_date(mut self, input: i64) -> Self {
            self.last_modified_date = Some(input);
            self
        }
        /// <p>The timestamp of when the configuration was last modified.</p>
        pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
            self.last_modified_date = input;
            self
        }
        /// Consumes the builder and constructs a [`SecurityConfigDetail`](crate::model::SecurityConfigDetail).
        pub fn build(self) -> crate::model::SecurityConfigDetail {
            crate::model::SecurityConfigDetail {
                id: self.id,
                r#type: self.r#type,
                config_version: self.config_version,
                description: self.description,
                saml_options: self.saml_options,
                created_date: self.created_date,
                last_modified_date: self.last_modified_date,
            }
        }
    }
}
impl SecurityConfigDetail {
    /// Creates a new builder-style object to manufacture [`SecurityConfigDetail`](crate::model::SecurityConfigDetail).
    pub fn builder() -> crate::model::security_config_detail::Builder {
        crate::model::security_config_detail::Builder::default()
    }
}

/// <p>Describes SAML options for an OpenSearch Serverless security configuration in the form of a key-value map.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SamlConfigOptions {
    /// <p>The XML IdP metadata file generated from your identity provider.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<std::string::String>,
    /// <p>A user attribute for this SAML integration.</p>
    #[doc(hidden)]
    pub user_attribute: std::option::Option<std::string::String>,
    /// <p>The group attribute for this SAML integration.</p>
    #[doc(hidden)]
    pub group_attribute: std::option::Option<std::string::String>,
    /// <p>The session timeout, in minutes. Minimum is 15 minutes and maximum is 1440 minutes (24 hours or 1 day). Default is 60 minutes.</p>
    #[doc(hidden)]
    pub session_timeout: std::option::Option<i32>,
}
impl SamlConfigOptions {
    /// <p>The XML IdP metadata file generated from your identity provider.</p>
    pub fn metadata(&self) -> std::option::Option<&str> {
        self.metadata.as_deref()
    }
    /// <p>A user attribute for this SAML integration.</p>
    pub fn user_attribute(&self) -> std::option::Option<&str> {
        self.user_attribute.as_deref()
    }
    /// <p>The group attribute for this SAML integration.</p>
    pub fn group_attribute(&self) -> std::option::Option<&str> {
        self.group_attribute.as_deref()
    }
    /// <p>The session timeout, in minutes. Minimum is 15 minutes and maximum is 1440 minutes (24 hours or 1 day). Default is 60 minutes.</p>
    pub fn session_timeout(&self) -> std::option::Option<i32> {
        self.session_timeout
    }
}
/// See [`SamlConfigOptions`](crate::model::SamlConfigOptions).
pub mod saml_config_options {

    /// A builder for [`SamlConfigOptions`](crate::model::SamlConfigOptions).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) metadata: std::option::Option<std::string::String>,
        pub(crate) user_attribute: std::option::Option<std::string::String>,
        pub(crate) group_attribute: std::option::Option<std::string::String>,
        pub(crate) session_timeout: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The XML IdP metadata file generated from your identity provider.</p>
        pub fn metadata(mut self, input: impl Into<std::string::String>) -> Self {
            self.metadata = Some(input.into());
            self
        }
        /// <p>The XML IdP metadata file generated from your identity provider.</p>
        pub fn set_metadata(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.metadata = input;
            self
        }
        /// <p>A user attribute for this SAML integration.</p>
        pub fn user_attribute(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_attribute = Some(input.into());
            self
        }
        /// <p>A user attribute for this SAML integration.</p>
        pub fn set_user_attribute(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.user_attribute = input;
            self
        }
        /// <p>The group attribute for this SAML integration.</p>
        pub fn group_attribute(mut self, input: impl Into<std::string::String>) -> Self {
            self.group_attribute = Some(input.into());
            self
        }
        /// <p>The group attribute for this SAML integration.</p>
        pub fn set_group_attribute(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.group_attribute = input;
            self
        }
        /// <p>The session timeout, in minutes. Minimum is 15 minutes and maximum is 1440 minutes (24 hours or 1 day). Default is 60 minutes.</p>
        pub fn session_timeout(mut self, input: i32) -> Self {
            self.session_timeout = Some(input);
            self
        }
        /// <p>The session timeout, in minutes. Minimum is 15 minutes and maximum is 1440 minutes (24 hours or 1 day). Default is 60 minutes.</p>
        pub fn set_session_timeout(mut self, input: std::option::Option<i32>) -> Self {
            self.session_timeout = input;
            self
        }
        /// Consumes the builder and constructs a [`SamlConfigOptions`](crate::model::SamlConfigOptions).
        pub fn build(self) -> crate::model::SamlConfigOptions {
            crate::model::SamlConfigOptions {
                metadata: self.metadata,
                user_attribute: self.user_attribute,
                group_attribute: self.group_attribute,
                session_timeout: self.session_timeout,
            }
        }
    }
}
impl SamlConfigOptions {
    /// Creates a new builder-style object to manufacture [`SamlConfigOptions`](crate::model::SamlConfigOptions).
    pub fn builder() -> crate::model::saml_config_options::Builder {
        crate::model::saml_config_options::Builder::default()
    }
}

/// <p>Details about each OpenSearch Serverless collection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CollectionSummary {
    /// <p>The unique identifier of the collection.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the collection.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status of the collection.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::CollectionStatus>,
    /// <p>The Amazon Resource Name (ARN) of the collection.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
}
impl CollectionSummary {
    /// <p>The unique identifier of the collection.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the collection.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the collection.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::CollectionStatus> {
        self.status.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the collection.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
/// See [`CollectionSummary`](crate::model::CollectionSummary).
pub mod collection_summary {

    /// A builder for [`CollectionSummary`](crate::model::CollectionSummary).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::CollectionStatus>,
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier of the collection.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the collection.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the collection.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the collection.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn status(mut self, input: crate::model::CollectionStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::CollectionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the collection.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the collection.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CollectionSummary`](crate::model::CollectionSummary).
        pub fn build(self) -> crate::model::CollectionSummary {
            crate::model::CollectionSummary {
                id: self.id,
                name: self.name,
                status: self.status,
                arn: self.arn,
            }
        }
    }
}
impl CollectionSummary {
    /// Creates a new builder-style object to manufacture [`CollectionSummary`](crate::model::CollectionSummary).
    pub fn builder() -> crate::model::collection_summary::Builder {
        crate::model::collection_summary::Builder::default()
    }
}

/// When writing a match expression against `CollectionStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let collectionstatus = unimplemented!();
/// match collectionstatus {
///     CollectionStatus::Active => { /* ... */ },
///     CollectionStatus::Creating => { /* ... */ },
///     CollectionStatus::Deleting => { /* ... */ },
///     CollectionStatus::Failed => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `collectionstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `CollectionStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `CollectionStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `CollectionStatus::NewFeature` is defined.
/// Specifically, when `collectionstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `CollectionStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CollectionStatus {
    /// Collection resource is ready to use
    Active,
    /// Creating collection resource
    Creating,
    /// Deleting collection resource
    Deleting,
    /// Collection resource create or delete failed
    Failed,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for CollectionStatus {
    fn from(s: &str) -> Self {
        match s {
            "ACTIVE" => CollectionStatus::Active,
            "CREATING" => CollectionStatus::Creating,
            "DELETING" => CollectionStatus::Deleting,
            "FAILED" => CollectionStatus::Failed,
            other => CollectionStatus::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for CollectionStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CollectionStatus::from(s))
    }
}
impl CollectionStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            CollectionStatus::Active => "ACTIVE",
            CollectionStatus::Creating => "CREATING",
            CollectionStatus::Deleting => "DELETING",
            CollectionStatus::Failed => "FAILED",
            CollectionStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["ACTIVE", "CREATING", "DELETING", "FAILED"]
    }
}
impl AsRef<str> for CollectionStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>List of filter keys that you can use for LIST, UPDATE, and DELETE requests to OpenSearch Serverless collections.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CollectionFilters {
    /// <p>The name of the collection.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status of the collection.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::CollectionStatus>,
}
impl CollectionFilters {
    /// <p>The name of the collection.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the collection.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::CollectionStatus> {
        self.status.as_ref()
    }
}
/// See [`CollectionFilters`](crate::model::CollectionFilters).
pub mod collection_filters {

    /// A builder for [`CollectionFilters`](crate::model::CollectionFilters).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::CollectionStatus>,
    }
    impl Builder {
        /// <p>The name of the collection.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the collection.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn status(mut self, input: crate::model::CollectionStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::CollectionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`CollectionFilters`](crate::model::CollectionFilters).
        pub fn build(self) -> crate::model::CollectionFilters {
            crate::model::CollectionFilters {
                name: self.name,
                status: self.status,
            }
        }
    }
}
impl CollectionFilters {
    /// Creates a new builder-style object to manufacture [`CollectionFilters`](crate::model::CollectionFilters).
    pub fn builder() -> crate::model::collection_filters::Builder {
        crate::model::collection_filters::Builder::default()
    }
}

/// <p>Details about the created OpenSearch Serverless collection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCollectionDetail {
    /// <p>The unique identifier of the collection.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the collection.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status of the collection.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::CollectionStatus>,
    /// <p>The type of collection.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::CollectionType>,
    /// <p>A description of the collection.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the collection.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key with which to encrypt the collection.</p>
    #[doc(hidden)]
    pub kms_key_arn: std::option::Option<std::string::String>,
    /// <p>The Epoch time when the collection was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<i64>,
    /// <p>The date and time when the collection was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
}
impl CreateCollectionDetail {
    /// <p>The unique identifier of the collection.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the collection.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the collection.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::CollectionStatus> {
        self.status.as_ref()
    }
    /// <p>The type of collection.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::CollectionType> {
        self.r#type.as_ref()
    }
    /// <p>A description of the collection.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the collection.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key with which to encrypt the collection.</p>
    pub fn kms_key_arn(&self) -> std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The Epoch time when the collection was created.</p>
    pub fn created_date(&self) -> std::option::Option<i64> {
        self.created_date
    }
    /// <p>The date and time when the collection was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
}
/// See [`CreateCollectionDetail`](crate::model::CreateCollectionDetail).
pub mod create_collection_detail {

    /// A builder for [`CreateCollectionDetail`](crate::model::CreateCollectionDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::CollectionStatus>,
        pub(crate) r#type: std::option::Option<crate::model::CollectionType>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) kms_key_arn: std::option::Option<std::string::String>,
        pub(crate) created_date: std::option::Option<i64>,
        pub(crate) last_modified_date: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The unique identifier of the collection.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the collection.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the collection.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the collection.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn status(mut self, input: crate::model::CollectionStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::CollectionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The type of collection.</p>
        pub fn r#type(mut self, input: crate::model::CollectionType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of collection.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::CollectionType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>A description of the collection.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>A description of the collection.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the collection.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the collection.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the KMS key with which to encrypt the collection.</p>
        pub fn kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the KMS key with which to encrypt the collection.</p>
        pub fn set_kms_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_arn = input;
            self
        }
        /// <p>The Epoch time when the collection was created.</p>
        pub fn created_date(mut self, input: i64) -> Self {
            self.created_date = Some(input);
            self
        }
        /// <p>The Epoch time when the collection was created.</p>
        pub fn set_created_date(mut self, input: std::option::Option<i64>) -> Self {
            self.created_date = input;
            self
        }
        /// <p>The date and time when the collection was last modified.</p>
        pub fn last_modified_date(mut self, input: i64) -> Self {
            self.last_modified_date = Some(input);
            self
        }
        /// <p>The date and time when the collection was last modified.</p>
        pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
            self.last_modified_date = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateCollectionDetail`](crate::model::CreateCollectionDetail).
        pub fn build(self) -> crate::model::CreateCollectionDetail {
            crate::model::CreateCollectionDetail {
                id: self.id,
                name: self.name,
                status: self.status,
                r#type: self.r#type,
                description: self.description,
                arn: self.arn,
                kms_key_arn: self.kms_key_arn,
                created_date: self.created_date,
                last_modified_date: self.last_modified_date,
            }
        }
    }
}
impl CreateCollectionDetail {
    /// Creates a new builder-style object to manufacture [`CreateCollectionDetail`](crate::model::CreateCollectionDetail).
    pub fn builder() -> crate::model::create_collection_detail::Builder {
        crate::model::create_collection_detail::Builder::default()
    }
}

/// When writing a match expression against `CollectionType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let collectiontype = unimplemented!();
/// match collectiontype {
///     CollectionType::Search => { /* ... */ },
///     CollectionType::Timeseries => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `collectiontype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `CollectionType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `CollectionType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `CollectionType::NewFeature` is defined.
/// Specifically, when `collectiontype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `CollectionType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CollectionType {
    /// Search collection type
    Search,
    /// Timeseries collection type
    Timeseries,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for CollectionType {
    fn from(s: &str) -> Self {
        match s {
            "SEARCH" => CollectionType::Search,
            "TIMESERIES" => CollectionType::Timeseries,
            other => CollectionType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for CollectionType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CollectionType::from(s))
    }
}
impl CollectionType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            CollectionType::Search => "SEARCH",
            CollectionType::Timeseries => "TIMESERIES",
            CollectionType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["SEARCH", "TIMESERIES"]
    }
}
impl AsRef<str> for CollectionType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>A map of key-value pairs associated to an OpenSearch Serverless resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Tag {
    /// <p>The key to use in the tag.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The value of the tag.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl Tag {
    /// <p>The key to use in the tag.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The value of the tag.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
/// See [`Tag`](crate::model::Tag).
pub mod tag {

    /// A builder for [`Tag`](crate::model::Tag).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key: std::option::Option<std::string::String>,
        pub(crate) value: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The key to use in the tag.</p>
        pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
            self.key = Some(input.into());
            self
        }
        /// <p>The key to use in the tag.</p>
        pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key = input;
            self
        }
        /// <p>The value of the tag.</p>
        pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
            self.value = Some(input.into());
            self
        }
        /// <p>The value of the tag.</p>
        pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.value = input;
            self
        }
        /// Consumes the builder and constructs a [`Tag`](crate::model::Tag).
        pub fn build(self) -> crate::model::Tag {
            crate::model::Tag {
                key: self.key,
                value: self.value,
            }
        }
    }
}
impl Tag {
    /// Creates a new builder-style object to manufacture [`Tag`](crate::model::Tag).
    pub fn builder() -> crate::model::tag::Builder {
        crate::model::tag::Builder::default()
    }
}

/// <p>Details about a deleted OpenSearch Serverless collection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCollectionDetail {
    /// <p>The unique identifier of the collection.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the collection.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status of the collection.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::CollectionStatus>,
}
impl DeleteCollectionDetail {
    /// <p>The unique identifier of the collection.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the collection.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the collection.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::CollectionStatus> {
        self.status.as_ref()
    }
}
/// See [`DeleteCollectionDetail`](crate::model::DeleteCollectionDetail).
pub mod delete_collection_detail {

    /// A builder for [`DeleteCollectionDetail`](crate::model::DeleteCollectionDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::CollectionStatus>,
    }
    impl Builder {
        /// <p>The unique identifier of the collection.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the collection.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the collection.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the collection.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn status(mut self, input: crate::model::CollectionStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::CollectionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCollectionDetail`](crate::model::DeleteCollectionDetail).
        pub fn build(self) -> crate::model::DeleteCollectionDetail {
            crate::model::DeleteCollectionDetail {
                id: self.id,
                name: self.name,
                status: self.status,
            }
        }
    }
}
impl DeleteCollectionDetail {
    /// Creates a new builder-style object to manufacture [`DeleteCollectionDetail`](crate::model::DeleteCollectionDetail).
    pub fn builder() -> crate::model::delete_collection_detail::Builder {
        crate::model::delete_collection_detail::Builder::default()
    }
}

/// <p>Details about an updated OpenSearch Serverless collection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCollectionDetail {
    /// <p>The unique identifier of the collection.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the collection.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status of the collection.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::CollectionStatus>,
    /// <p>The collection type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::CollectionType>,
    /// <p>The description of the collection.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the collection.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The date and time when the collection was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<i64>,
    /// <p>The date and time when the collection was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
}
impl UpdateCollectionDetail {
    /// <p>The unique identifier of the collection.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the collection.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the collection.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::CollectionStatus> {
        self.status.as_ref()
    }
    /// <p>The collection type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::CollectionType> {
        self.r#type.as_ref()
    }
    /// <p>The description of the collection.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the collection.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time when the collection was created.</p>
    pub fn created_date(&self) -> std::option::Option<i64> {
        self.created_date
    }
    /// <p>The date and time when the collection was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
}
/// See [`UpdateCollectionDetail`](crate::model::UpdateCollectionDetail).
pub mod update_collection_detail {

    /// A builder for [`UpdateCollectionDetail`](crate::model::UpdateCollectionDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::CollectionStatus>,
        pub(crate) r#type: std::option::Option<crate::model::CollectionType>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_date: std::option::Option<i64>,
        pub(crate) last_modified_date: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The unique identifier of the collection.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the collection.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the collection.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the collection.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn status(mut self, input: crate::model::CollectionStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::CollectionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The collection type.</p>
        pub fn r#type(mut self, input: crate::model::CollectionType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The collection type.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::CollectionType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The description of the collection.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the collection.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the collection.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the collection.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The date and time when the collection was created.</p>
        pub fn created_date(mut self, input: i64) -> Self {
            self.created_date = Some(input);
            self
        }
        /// <p>The date and time when the collection was created.</p>
        pub fn set_created_date(mut self, input: std::option::Option<i64>) -> Self {
            self.created_date = input;
            self
        }
        /// <p>The date and time when the collection was last modified.</p>
        pub fn last_modified_date(mut self, input: i64) -> Self {
            self.last_modified_date = Some(input);
            self
        }
        /// <p>The date and time when the collection was last modified.</p>
        pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
            self.last_modified_date = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateCollectionDetail`](crate::model::UpdateCollectionDetail).
        pub fn build(self) -> crate::model::UpdateCollectionDetail {
            crate::model::UpdateCollectionDetail {
                id: self.id,
                name: self.name,
                status: self.status,
                r#type: self.r#type,
                description: self.description,
                arn: self.arn,
                created_date: self.created_date,
                last_modified_date: self.last_modified_date,
            }
        }
    }
}
impl UpdateCollectionDetail {
    /// Creates a new builder-style object to manufacture [`UpdateCollectionDetail`](crate::model::UpdateCollectionDetail).
    pub fn builder() -> crate::model::update_collection_detail::Builder {
        crate::model::update_collection_detail::Builder::default()
    }
}

/// <p>A summary of the data access policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccessPolicySummary {
    /// <p>The type of access policy. Currently the only available type is <code>data</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::AccessPolicyType>,
    /// <p>The name of the access policy.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The version of the policy.</p>
    #[doc(hidden)]
    pub policy_version: std::option::Option<std::string::String>,
    /// <p>The description of the access policy.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Epoch time when the access policy was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<i64>,
    /// <p>The date and time when the collection was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
}
impl AccessPolicySummary {
    /// <p>The type of access policy. Currently the only available type is <code>data</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::AccessPolicyType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the access policy.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version of the policy.</p>
    pub fn policy_version(&self) -> std::option::Option<&str> {
        self.policy_version.as_deref()
    }
    /// <p>The description of the access policy.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Epoch time when the access policy was created.</p>
    pub fn created_date(&self) -> std::option::Option<i64> {
        self.created_date
    }
    /// <p>The date and time when the collection was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
}
/// See [`AccessPolicySummary`](crate::model::AccessPolicySummary).
pub mod access_policy_summary {

    /// A builder for [`AccessPolicySummary`](crate::model::AccessPolicySummary).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#type: std::option::Option<crate::model::AccessPolicyType>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) policy_version: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) created_date: std::option::Option<i64>,
        pub(crate) last_modified_date: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The type of access policy. Currently the only available type is <code>data</code>.</p>
        pub fn r#type(mut self, input: crate::model::AccessPolicyType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of access policy. Currently the only available type is <code>data</code>.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::AccessPolicyType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The name of the access policy.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the access policy.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The version of the policy.</p>
        pub fn policy_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_version = Some(input.into());
            self
        }
        /// <p>The version of the policy.</p>
        pub fn set_policy_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.policy_version = input;
            self
        }
        /// <p>The description of the access policy.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the access policy.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Epoch time when the access policy was created.</p>
        pub fn created_date(mut self, input: i64) -> Self {
            self.created_date = Some(input);
            self
        }
        /// <p>The Epoch time when the access policy was created.</p>
        pub fn set_created_date(mut self, input: std::option::Option<i64>) -> Self {
            self.created_date = input;
            self
        }
        /// <p>The date and time when the collection was last modified.</p>
        pub fn last_modified_date(mut self, input: i64) -> Self {
            self.last_modified_date = Some(input);
            self
        }
        /// <p>The date and time when the collection was last modified.</p>
        pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
            self.last_modified_date = input;
            self
        }
        /// Consumes the builder and constructs a [`AccessPolicySummary`](crate::model::AccessPolicySummary).
        pub fn build(self) -> crate::model::AccessPolicySummary {
            crate::model::AccessPolicySummary {
                r#type: self.r#type,
                name: self.name,
                policy_version: self.policy_version,
                description: self.description,
                created_date: self.created_date,
                last_modified_date: self.last_modified_date,
            }
        }
    }
}
impl AccessPolicySummary {
    /// Creates a new builder-style object to manufacture [`AccessPolicySummary`](crate::model::AccessPolicySummary).
    pub fn builder() -> crate::model::access_policy_summary::Builder {
        crate::model::access_policy_summary::Builder::default()
    }
}

/// When writing a match expression against `AccessPolicyType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let accesspolicytype = unimplemented!();
/// match accesspolicytype {
///     AccessPolicyType::Data => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `accesspolicytype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AccessPolicyType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AccessPolicyType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AccessPolicyType::NewFeature` is defined.
/// Specifically, when `accesspolicytype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AccessPolicyType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AccessPolicyType {
    /// data policy type
    Data,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for AccessPolicyType {
    fn from(s: &str) -> Self {
        match s {
            "data" => AccessPolicyType::Data,
            other => AccessPolicyType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for AccessPolicyType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AccessPolicyType::from(s))
    }
}
impl AccessPolicyType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AccessPolicyType::Data => "data",
            AccessPolicyType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["data"]
    }
}
impl AsRef<str> for AccessPolicyType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Details about an OpenSearch Serverless access policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccessPolicyDetail {
    /// <p>The type of access policy.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::AccessPolicyType>,
    /// <p>The name of the policy.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The version of the policy.</p>
    #[doc(hidden)]
    pub policy_version: std::option::Option<std::string::String>,
    /// <p>The description of the policy.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The JSON policy document without any whitespaces.</p>
    #[doc(hidden)]
    pub policy: std::option::Option<aws_smithy_types::Document>,
    /// <p>The date the policy was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<i64>,
    /// <p>The timestamp of when the policy was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
}
impl AccessPolicyDetail {
    /// <p>The type of access policy.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::AccessPolicyType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the policy.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version of the policy.</p>
    pub fn policy_version(&self) -> std::option::Option<&str> {
        self.policy_version.as_deref()
    }
    /// <p>The description of the policy.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The JSON policy document without any whitespaces.</p>
    pub fn policy(&self) -> std::option::Option<&aws_smithy_types::Document> {
        self.policy.as_ref()
    }
    /// <p>The date the policy was created.</p>
    pub fn created_date(&self) -> std::option::Option<i64> {
        self.created_date
    }
    /// <p>The timestamp of when the policy was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
}
/// See [`AccessPolicyDetail`](crate::model::AccessPolicyDetail).
pub mod access_policy_detail {

    /// A builder for [`AccessPolicyDetail`](crate::model::AccessPolicyDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#type: std::option::Option<crate::model::AccessPolicyType>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) policy_version: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) policy: std::option::Option<aws_smithy_types::Document>,
        pub(crate) created_date: std::option::Option<i64>,
        pub(crate) last_modified_date: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The type of access policy.</p>
        pub fn r#type(mut self, input: crate::model::AccessPolicyType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of access policy.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::AccessPolicyType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The name of the policy.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the policy.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The version of the policy.</p>
        pub fn policy_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_version = Some(input.into());
            self
        }
        /// <p>The version of the policy.</p>
        pub fn set_policy_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.policy_version = input;
            self
        }
        /// <p>The description of the policy.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the policy.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The JSON policy document without any whitespaces.</p>
        pub fn policy(mut self, input: aws_smithy_types::Document) -> Self {
            self.policy = Some(input);
            self
        }
        /// <p>The JSON policy document without any whitespaces.</p>
        pub fn set_policy(
            mut self,
            input: std::option::Option<aws_smithy_types::Document>,
        ) -> Self {
            self.policy = input;
            self
        }
        /// <p>The date the policy was created.</p>
        pub fn created_date(mut self, input: i64) -> Self {
            self.created_date = Some(input);
            self
        }
        /// <p>The date the policy was created.</p>
        pub fn set_created_date(mut self, input: std::option::Option<i64>) -> Self {
            self.created_date = input;
            self
        }
        /// <p>The timestamp of when the policy was last modified.</p>
        pub fn last_modified_date(mut self, input: i64) -> Self {
            self.last_modified_date = Some(input);
            self
        }
        /// <p>The timestamp of when the policy was last modified.</p>
        pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
            self.last_modified_date = input;
            self
        }
        /// Consumes the builder and constructs a [`AccessPolicyDetail`](crate::model::AccessPolicyDetail).
        pub fn build(self) -> crate::model::AccessPolicyDetail {
            crate::model::AccessPolicyDetail {
                r#type: self.r#type,
                name: self.name,
                policy_version: self.policy_version,
                description: self.description,
                policy: self.policy,
                created_date: self.created_date,
                last_modified_date: self.last_modified_date,
            }
        }
    }
}
impl AccessPolicyDetail {
    /// Creates a new builder-style object to manufacture [`AccessPolicyDetail`](crate::model::AccessPolicyDetail).
    pub fn builder() -> crate::model::access_policy_detail::Builder {
        crate::model::access_policy_detail::Builder::default()
    }
}

/// <p>Update details for an OpenSearch Serverless-managed interface endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVpcEndpointDetail {
    /// <p>The unique identifier of the endpoint.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the endpoint.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status of the endpoint update process.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::VpcEndpointStatus>,
    /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The timestamp of when the endpoint was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
}
impl UpdateVpcEndpointDetail {
    /// <p>The unique identifier of the endpoint.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the endpoint.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the endpoint update process.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::VpcEndpointStatus> {
        self.status.as_ref()
    }
    /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p>The timestamp of when the endpoint was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
}
/// See [`UpdateVpcEndpointDetail`](crate::model::UpdateVpcEndpointDetail).
pub mod update_vpc_endpoint_detail {

    /// A builder for [`UpdateVpcEndpointDetail`](crate::model::UpdateVpcEndpointDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::VpcEndpointStatus>,
        pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) last_modified_date: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The unique identifier of the endpoint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the endpoint.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the endpoint.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the endpoint.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The current status of the endpoint update process.</p>
        pub fn status(mut self, input: crate::model::VpcEndpointStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the endpoint update process.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::VpcEndpointStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Appends an item to `subnet_ids`.
        ///
        /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
        ///
        /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
        pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.subnet_ids.unwrap_or_default();
            v.push(input.into());
            self.subnet_ids = Some(v);
            self
        }
        /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.subnet_ids = input;
            self
        }
        /// Appends an item to `security_group_ids`.
        ///
        /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
        ///
        /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
        pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.security_group_ids = Some(v);
            self
        }
        /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
        pub fn set_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.security_group_ids = input;
            self
        }
        /// <p>The timestamp of when the endpoint was last modified.</p>
        pub fn last_modified_date(mut self, input: i64) -> Self {
            self.last_modified_date = Some(input);
            self
        }
        /// <p>The timestamp of when the endpoint was last modified.</p>
        pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
            self.last_modified_date = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVpcEndpointDetail`](crate::model::UpdateVpcEndpointDetail).
        pub fn build(self) -> crate::model::UpdateVpcEndpointDetail {
            crate::model::UpdateVpcEndpointDetail {
                id: self.id,
                name: self.name,
                status: self.status,
                subnet_ids: self.subnet_ids,
                security_group_ids: self.security_group_ids,
                last_modified_date: self.last_modified_date,
            }
        }
    }
}
impl UpdateVpcEndpointDetail {
    /// Creates a new builder-style object to manufacture [`UpdateVpcEndpointDetail`](crate::model::UpdateVpcEndpointDetail).
    pub fn builder() -> crate::model::update_vpc_endpoint_detail::Builder {
        crate::model::update_vpc_endpoint_detail::Builder::default()
    }
}

/// <p>OpenSearch Serverless-related information for the current account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccountSettingsDetail {
    /// <p>The maximum capacity limits for all OpenSearch Serverless collections, in OpenSearch Compute Units (OCUs). These limits are used to scale your collections based on the current workload. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html#serverless-scaling">Autoscaling</a>.</p>
    #[doc(hidden)]
    pub capacity_limits: std::option::Option<crate::model::CapacityLimits>,
}
impl AccountSettingsDetail {
    /// <p>The maximum capacity limits for all OpenSearch Serverless collections, in OpenSearch Compute Units (OCUs). These limits are used to scale your collections based on the current workload. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html#serverless-scaling">Autoscaling</a>.</p>
    pub fn capacity_limits(&self) -> std::option::Option<&crate::model::CapacityLimits> {
        self.capacity_limits.as_ref()
    }
}
/// See [`AccountSettingsDetail`](crate::model::AccountSettingsDetail).
pub mod account_settings_detail {

    /// A builder for [`AccountSettingsDetail`](crate::model::AccountSettingsDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) capacity_limits: std::option::Option<crate::model::CapacityLimits>,
    }
    impl Builder {
        /// <p>The maximum capacity limits for all OpenSearch Serverless collections, in OpenSearch Compute Units (OCUs). These limits are used to scale your collections based on the current workload. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html#serverless-scaling">Autoscaling</a>.</p>
        pub fn capacity_limits(mut self, input: crate::model::CapacityLimits) -> Self {
            self.capacity_limits = Some(input);
            self
        }
        /// <p>The maximum capacity limits for all OpenSearch Serverless collections, in OpenSearch Compute Units (OCUs). These limits are used to scale your collections based on the current workload. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html#serverless-scaling">Autoscaling</a>.</p>
        pub fn set_capacity_limits(
            mut self,
            input: std::option::Option<crate::model::CapacityLimits>,
        ) -> Self {
            self.capacity_limits = input;
            self
        }
        /// Consumes the builder and constructs a [`AccountSettingsDetail`](crate::model::AccountSettingsDetail).
        pub fn build(self) -> crate::model::AccountSettingsDetail {
            crate::model::AccountSettingsDetail {
                capacity_limits: self.capacity_limits,
            }
        }
    }
}
impl AccountSettingsDetail {
    /// Creates a new builder-style object to manufacture [`AccountSettingsDetail`](crate::model::AccountSettingsDetail).
    pub fn builder() -> crate::model::account_settings_detail::Builder {
        crate::model::account_settings_detail::Builder::default()
    }
}

/// <p>The maximum capacity limits for all OpenSearch Serverless collections, in OpenSearch Compute Units (OCUs). These limits are used to scale your collections based on the current workload. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html#serverless-scaling">Autoscaling</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CapacityLimits {
    /// <p>The maximum indexing capacity for collections.</p>
    #[doc(hidden)]
    pub max_indexing_capacity_in_ocu: std::option::Option<i32>,
    /// <p>The maximum search capacity for collections.</p>
    #[doc(hidden)]
    pub max_search_capacity_in_ocu: std::option::Option<i32>,
}
impl CapacityLimits {
    /// <p>The maximum indexing capacity for collections.</p>
    pub fn max_indexing_capacity_in_ocu(&self) -> std::option::Option<i32> {
        self.max_indexing_capacity_in_ocu
    }
    /// <p>The maximum search capacity for collections.</p>
    pub fn max_search_capacity_in_ocu(&self) -> std::option::Option<i32> {
        self.max_search_capacity_in_ocu
    }
}
/// See [`CapacityLimits`](crate::model::CapacityLimits).
pub mod capacity_limits {

    /// A builder for [`CapacityLimits`](crate::model::CapacityLimits).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) max_indexing_capacity_in_ocu: std::option::Option<i32>,
        pub(crate) max_search_capacity_in_ocu: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The maximum indexing capacity for collections.</p>
        pub fn max_indexing_capacity_in_ocu(mut self, input: i32) -> Self {
            self.max_indexing_capacity_in_ocu = Some(input);
            self
        }
        /// <p>The maximum indexing capacity for collections.</p>
        pub fn set_max_indexing_capacity_in_ocu(mut self, input: std::option::Option<i32>) -> Self {
            self.max_indexing_capacity_in_ocu = input;
            self
        }
        /// <p>The maximum search capacity for collections.</p>
        pub fn max_search_capacity_in_ocu(mut self, input: i32) -> Self {
            self.max_search_capacity_in_ocu = Some(input);
            self
        }
        /// <p>The maximum search capacity for collections.</p>
        pub fn set_max_search_capacity_in_ocu(mut self, input: std::option::Option<i32>) -> Self {
            self.max_search_capacity_in_ocu = input;
            self
        }
        /// Consumes the builder and constructs a [`CapacityLimits`](crate::model::CapacityLimits).
        pub fn build(self) -> crate::model::CapacityLimits {
            crate::model::CapacityLimits {
                max_indexing_capacity_in_ocu: self.max_indexing_capacity_in_ocu,
                max_search_capacity_in_ocu: self.max_search_capacity_in_ocu,
            }
        }
    }
}
impl CapacityLimits {
    /// Creates a new builder-style object to manufacture [`CapacityLimits`](crate::model::CapacityLimits).
    pub fn builder() -> crate::model::capacity_limits::Builder {
        crate::model::capacity_limits::Builder::default()
    }
}

/// <p>Statistics for an OpenSearch Serverless security configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityConfigStats {
    /// <p>The number of security configurations in the current account.</p>
    #[doc(hidden)]
    pub saml_config_count: std::option::Option<i64>,
}
impl SecurityConfigStats {
    /// <p>The number of security configurations in the current account.</p>
    pub fn saml_config_count(&self) -> std::option::Option<i64> {
        self.saml_config_count
    }
}
/// See [`SecurityConfigStats`](crate::model::SecurityConfigStats).
pub mod security_config_stats {

    /// A builder for [`SecurityConfigStats`](crate::model::SecurityConfigStats).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) saml_config_count: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The number of security configurations in the current account.</p>
        pub fn saml_config_count(mut self, input: i64) -> Self {
            self.saml_config_count = Some(input);
            self
        }
        /// <p>The number of security configurations in the current account.</p>
        pub fn set_saml_config_count(mut self, input: std::option::Option<i64>) -> Self {
            self.saml_config_count = input;
            self
        }
        /// Consumes the builder and constructs a [`SecurityConfigStats`](crate::model::SecurityConfigStats).
        pub fn build(self) -> crate::model::SecurityConfigStats {
            crate::model::SecurityConfigStats {
                saml_config_count: self.saml_config_count,
            }
        }
    }
}
impl SecurityConfigStats {
    /// Creates a new builder-style object to manufacture [`SecurityConfigStats`](crate::model::SecurityConfigStats).
    pub fn builder() -> crate::model::security_config_stats::Builder {
        crate::model::security_config_stats::Builder::default()
    }
}

/// <p>Statistics for an OpenSearch Serverless security policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityPolicyStats {
    /// <p>The number of encryption policies in the current account.</p>
    #[doc(hidden)]
    pub encryption_policy_count: std::option::Option<i64>,
    /// <p>The number of network policies in the current account.</p>
    #[doc(hidden)]
    pub network_policy_count: std::option::Option<i64>,
}
impl SecurityPolicyStats {
    /// <p>The number of encryption policies in the current account.</p>
    pub fn encryption_policy_count(&self) -> std::option::Option<i64> {
        self.encryption_policy_count
    }
    /// <p>The number of network policies in the current account.</p>
    pub fn network_policy_count(&self) -> std::option::Option<i64> {
        self.network_policy_count
    }
}
/// See [`SecurityPolicyStats`](crate::model::SecurityPolicyStats).
pub mod security_policy_stats {

    /// A builder for [`SecurityPolicyStats`](crate::model::SecurityPolicyStats).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) encryption_policy_count: std::option::Option<i64>,
        pub(crate) network_policy_count: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The number of encryption policies in the current account.</p>
        pub fn encryption_policy_count(mut self, input: i64) -> Self {
            self.encryption_policy_count = Some(input);
            self
        }
        /// <p>The number of encryption policies in the current account.</p>
        pub fn set_encryption_policy_count(mut self, input: std::option::Option<i64>) -> Self {
            self.encryption_policy_count = input;
            self
        }
        /// <p>The number of network policies in the current account.</p>
        pub fn network_policy_count(mut self, input: i64) -> Self {
            self.network_policy_count = Some(input);
            self
        }
        /// <p>The number of network policies in the current account.</p>
        pub fn set_network_policy_count(mut self, input: std::option::Option<i64>) -> Self {
            self.network_policy_count = input;
            self
        }
        /// Consumes the builder and constructs a [`SecurityPolicyStats`](crate::model::SecurityPolicyStats).
        pub fn build(self) -> crate::model::SecurityPolicyStats {
            crate::model::SecurityPolicyStats {
                encryption_policy_count: self.encryption_policy_count,
                network_policy_count: self.network_policy_count,
            }
        }
    }
}
impl SecurityPolicyStats {
    /// Creates a new builder-style object to manufacture [`SecurityPolicyStats`](crate::model::SecurityPolicyStats).
    pub fn builder() -> crate::model::security_policy_stats::Builder {
        crate::model::security_policy_stats::Builder::default()
    }
}

/// <p>Statistics for an OpenSearch Serverless access policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccessPolicyStats {
    /// <p>The number of data access policies in the current account.</p>
    #[doc(hidden)]
    pub data_policy_count: std::option::Option<i64>,
}
impl AccessPolicyStats {
    /// <p>The number of data access policies in the current account.</p>
    pub fn data_policy_count(&self) -> std::option::Option<i64> {
        self.data_policy_count
    }
}
/// See [`AccessPolicyStats`](crate::model::AccessPolicyStats).
pub mod access_policy_stats {

    /// A builder for [`AccessPolicyStats`](crate::model::AccessPolicyStats).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data_policy_count: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The number of data access policies in the current account.</p>
        pub fn data_policy_count(mut self, input: i64) -> Self {
            self.data_policy_count = Some(input);
            self
        }
        /// <p>The number of data access policies in the current account.</p>
        pub fn set_data_policy_count(mut self, input: std::option::Option<i64>) -> Self {
            self.data_policy_count = input;
            self
        }
        /// Consumes the builder and constructs a [`AccessPolicyStats`](crate::model::AccessPolicyStats).
        pub fn build(self) -> crate::model::AccessPolicyStats {
            crate::model::AccessPolicyStats {
                data_policy_count: self.data_policy_count,
            }
        }
    }
}
impl AccessPolicyStats {
    /// Creates a new builder-style object to manufacture [`AccessPolicyStats`](crate::model::AccessPolicyStats).
    pub fn builder() -> crate::model::access_policy_stats::Builder {
        crate::model::access_policy_stats::Builder::default()
    }
}

/// <p>Error information for a failed <code>BatchGetVpcEndpoint</code> request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VpcEndpointErrorDetail {
    /// <p>The unique identifier of the VPC endpoint.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>An error message describing the reason for the failure.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The error code for the failed request.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
}
impl VpcEndpointErrorDetail {
    /// <p>The unique identifier of the VPC endpoint.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>An error message describing the reason for the failure.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The error code for the failed request.</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
}
/// See [`VpcEndpointErrorDetail`](crate::model::VpcEndpointErrorDetail).
pub mod vpc_endpoint_error_detail {

    /// A builder for [`VpcEndpointErrorDetail`](crate::model::VpcEndpointErrorDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) error_message: std::option::Option<std::string::String>,
        pub(crate) error_code: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier of the VPC endpoint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the VPC endpoint.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>An error message describing the reason for the failure.</p>
        pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_message = Some(input.into());
            self
        }
        /// <p>An error message describing the reason for the failure.</p>
        pub fn set_error_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.error_message = input;
            self
        }
        /// <p>The error code for the failed request.</p>
        pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_code = Some(input.into());
            self
        }
        /// <p>The error code for the failed request.</p>
        pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.error_code = input;
            self
        }
        /// Consumes the builder and constructs a [`VpcEndpointErrorDetail`](crate::model::VpcEndpointErrorDetail).
        pub fn build(self) -> crate::model::VpcEndpointErrorDetail {
            crate::model::VpcEndpointErrorDetail {
                id: self.id,
                error_message: self.error_message,
                error_code: self.error_code,
            }
        }
    }
}
impl VpcEndpointErrorDetail {
    /// Creates a new builder-style object to manufacture [`VpcEndpointErrorDetail`](crate::model::VpcEndpointErrorDetail).
    pub fn builder() -> crate::model::vpc_endpoint_error_detail::Builder {
        crate::model::vpc_endpoint_error_detail::Builder::default()
    }
}

/// <p>Details about an OpenSearch Serverless-managed interface endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VpcEndpointDetail {
    /// <p>The unique identifier of the endpoint.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the endpoint.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the VPC from which you access OpenSearch Serverless</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The current status of the endpoint.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::VpcEndpointStatus>,
    /// <p>The date the endpoint was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<i64>,
}
impl VpcEndpointDetail {
    /// <p>The unique identifier of the endpoint.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the endpoint.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the VPC from which you access OpenSearch Serverless</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p>The current status of the endpoint.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::VpcEndpointStatus> {
        self.status.as_ref()
    }
    /// <p>The date the endpoint was created.</p>
    pub fn created_date(&self) -> std::option::Option<i64> {
        self.created_date
    }
}
/// See [`VpcEndpointDetail`](crate::model::VpcEndpointDetail).
pub mod vpc_endpoint_detail {

    /// A builder for [`VpcEndpointDetail`](crate::model::VpcEndpointDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) vpc_id: std::option::Option<std::string::String>,
        pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) status: std::option::Option<crate::model::VpcEndpointStatus>,
        pub(crate) created_date: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The unique identifier of the endpoint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier of the endpoint.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the endpoint.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the endpoint.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The ID of the VPC from which you access OpenSearch Serverless</p>
        pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.vpc_id = Some(input.into());
            self
        }
        /// <p>The ID of the VPC from which you access OpenSearch Serverless</p>
        pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.vpc_id = input;
            self
        }
        /// Appends an item to `subnet_ids`.
        ///
        /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
        ///
        /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
        pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.subnet_ids.unwrap_or_default();
            v.push(input.into());
            self.subnet_ids = Some(v);
            self
        }
        /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.subnet_ids = input;
            self
        }
        /// Appends an item to `security_group_ids`.
        ///
        /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
        ///
        /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
        pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.security_group_ids = Some(v);
            self
        }
        /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
        pub fn set_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.security_group_ids = input;
            self
        }
        /// <p>The current status of the endpoint.</p>
        pub fn status(mut self, input: crate::model::VpcEndpointStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the endpoint.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::VpcEndpointStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The date the endpoint was created.</p>
        pub fn created_date(mut self, input: i64) -> Self {
            self.created_date = Some(input);
            self
        }
        /// <p>The date the endpoint was created.</p>
        pub fn set_created_date(mut self, input: std::option::Option<i64>) -> Self {
            self.created_date = input;
            self
        }
        /// Consumes the builder and constructs a [`VpcEndpointDetail`](crate::model::VpcEndpointDetail).
        pub fn build(self) -> crate::model::VpcEndpointDetail {
            crate::model::VpcEndpointDetail {
                id: self.id,
                name: self.name,
                vpc_id: self.vpc_id,
                subnet_ids: self.subnet_ids,
                security_group_ids: self.security_group_ids,
                status: self.status,
                created_date: self.created_date,
            }
        }
    }
}
impl VpcEndpointDetail {
    /// Creates a new builder-style object to manufacture [`VpcEndpointDetail`](crate::model::VpcEndpointDetail).
    pub fn builder() -> crate::model::vpc_endpoint_detail::Builder {
        crate::model::vpc_endpoint_detail::Builder::default()
    }
}

/// <p>Error information for an OpenSearch Serverless request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CollectionErrorDetail {
    /// <p>If the request contains collection IDs, the response includes the IDs provided in the request.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>If the request contains collection names, the response includes the names provided in the request.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the error. For example, <code>The specified Collection is not found.</code> </p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The error code for the request. For example, <code>NOT_FOUND</code>.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
}
impl CollectionErrorDetail {
    /// <p>If the request contains collection IDs, the response includes the IDs provided in the request.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>If the request contains collection names, the response includes the names provided in the request.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the error. For example, <code>The specified Collection is not found.</code> </p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The error code for the request. For example, <code>NOT_FOUND</code>.</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
}
/// See [`CollectionErrorDetail`](crate::model::CollectionErrorDetail).
pub mod collection_error_detail {

    /// A builder for [`CollectionErrorDetail`](crate::model::CollectionErrorDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) error_message: std::option::Option<std::string::String>,
        pub(crate) error_code: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>If the request contains collection IDs, the response includes the IDs provided in the request.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>If the request contains collection IDs, the response includes the IDs provided in the request.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>If the request contains collection names, the response includes the names provided in the request.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>If the request contains collection names, the response includes the names provided in the request.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>A description of the error. For example, <code>The specified Collection is not found.</code> </p>
        pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_message = Some(input.into());
            self
        }
        /// <p>A description of the error. For example, <code>The specified Collection is not found.</code> </p>
        pub fn set_error_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.error_message = input;
            self
        }
        /// <p>The error code for the request. For example, <code>NOT_FOUND</code>.</p>
        pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_code = Some(input.into());
            self
        }
        /// <p>The error code for the request. For example, <code>NOT_FOUND</code>.</p>
        pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.error_code = input;
            self
        }
        /// Consumes the builder and constructs a [`CollectionErrorDetail`](crate::model::CollectionErrorDetail).
        pub fn build(self) -> crate::model::CollectionErrorDetail {
            crate::model::CollectionErrorDetail {
                id: self.id,
                name: self.name,
                error_message: self.error_message,
                error_code: self.error_code,
            }
        }
    }
}
impl CollectionErrorDetail {
    /// Creates a new builder-style object to manufacture [`CollectionErrorDetail`](crate::model::CollectionErrorDetail).
    pub fn builder() -> crate::model::collection_error_detail::Builder {
        crate::model::collection_error_detail::Builder::default()
    }
}

/// <p>Details about each OpenSearch Serverless collection, including the collection endpoint and the OpenSearch Dashboards endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CollectionDetail {
    /// <p>A unique identifier for the collection.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the collection.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status of the collection.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::CollectionStatus>,
    /// <p>The type of collection.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::CollectionType>,
    /// <p>A description of the collection.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the collection.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the Amazon Web Services KMS key used to encrypt the collection.</p>
    #[doc(hidden)]
    pub kms_key_arn: std::option::Option<std::string::String>,
    /// <p>The Epoch time when the collection was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<i64>,
    /// <p>The date and time when the collection was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
    /// <p>Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.</p>
    #[doc(hidden)]
    pub collection_endpoint: std::option::Option<std::string::String>,
    /// <p>Collection-specific endpoint used to access OpenSearch Dashboards.</p>
    #[doc(hidden)]
    pub dashboard_endpoint: std::option::Option<std::string::String>,
}
impl CollectionDetail {
    /// <p>A unique identifier for the collection.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the collection.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the collection.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::CollectionStatus> {
        self.status.as_ref()
    }
    /// <p>The type of collection.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::CollectionType> {
        self.r#type.as_ref()
    }
    /// <p>A description of the collection.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the collection.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ARN of the Amazon Web Services KMS key used to encrypt the collection.</p>
    pub fn kms_key_arn(&self) -> std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The Epoch time when the collection was created.</p>
    pub fn created_date(&self) -> std::option::Option<i64> {
        self.created_date
    }
    /// <p>The date and time when the collection was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
    /// <p>Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.</p>
    pub fn collection_endpoint(&self) -> std::option::Option<&str> {
        self.collection_endpoint.as_deref()
    }
    /// <p>Collection-specific endpoint used to access OpenSearch Dashboards.</p>
    pub fn dashboard_endpoint(&self) -> std::option::Option<&str> {
        self.dashboard_endpoint.as_deref()
    }
}
/// See [`CollectionDetail`](crate::model::CollectionDetail).
pub mod collection_detail {

    /// A builder for [`CollectionDetail`](crate::model::CollectionDetail).
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::CollectionStatus>,
        pub(crate) r#type: std::option::Option<crate::model::CollectionType>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) kms_key_arn: std::option::Option<std::string::String>,
        pub(crate) created_date: std::option::Option<i64>,
        pub(crate) last_modified_date: std::option::Option<i64>,
        pub(crate) collection_endpoint: std::option::Option<std::string::String>,
        pub(crate) dashboard_endpoint: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the collection.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>A unique identifier for the collection.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the collection.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the collection.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn status(mut self, input: crate::model::CollectionStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the collection.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::CollectionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The type of collection.</p>
        pub fn r#type(mut self, input: crate::model::CollectionType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of collection.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::CollectionType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>A description of the collection.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>A description of the collection.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the collection.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the collection.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The ARN of the Amazon Web Services KMS key used to encrypt the collection.</p>
        pub fn kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the Amazon Web Services KMS key used to encrypt the collection.</p>
        pub fn set_kms_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_arn = input;
            self
        }
        /// <p>The Epoch time when the collection was created.</p>
        pub fn created_date(mut self, input: i64) -> Self {
            self.created_date = Some(input);
            self
        }
        /// <p>The Epoch time when the collection was created.</p>
        pub fn set_created_date(mut self, input: std::option::Option<i64>) -> Self {
            self.created_date = input;
            self
        }
        /// <p>The date and time when the collection was last modified.</p>
        pub fn last_modified_date(mut self, input: i64) -> Self {
            self.last_modified_date = Some(input);
            self
        }
        /// <p>The date and time when the collection was last modified.</p>
        pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
            self.last_modified_date = input;
            self
        }
        /// <p>Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.</p>
        pub fn collection_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
            self.collection_endpoint = Some(input.into());
            self
        }
        /// <p>Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.</p>
        pub fn set_collection_endpoint(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.collection_endpoint = input;
            self
        }
        /// <p>Collection-specific endpoint used to access OpenSearch Dashboards.</p>
        pub fn dashboard_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
            self.dashboard_endpoint = Some(input.into());
            self
        }
        /// <p>Collection-specific endpoint used to access OpenSearch Dashboards.</p>
        pub fn set_dashboard_endpoint(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.dashboard_endpoint = input;
            self
        }
        /// Consumes the builder and constructs a [`CollectionDetail`](crate::model::CollectionDetail).
        pub fn build(self) -> crate::model::CollectionDetail {
            crate::model::CollectionDetail {
                id: self.id,
                name: self.name,
                status: self.status,
                r#type: self.r#type,
                description: self.description,
                arn: self.arn,
                kms_key_arn: self.kms_key_arn,
                created_date: self.created_date,
                last_modified_date: self.last_modified_date,
                collection_endpoint: self.collection_endpoint,
                dashboard_endpoint: self.dashboard_endpoint,
            }
        }
    }
}
impl CollectionDetail {
    /// Creates a new builder-style object to manufacture [`CollectionDetail`](crate::model::CollectionDetail).
    pub fn builder() -> crate::model::collection_detail::Builder {
        crate::model::collection_detail::Builder::default()
    }
}
