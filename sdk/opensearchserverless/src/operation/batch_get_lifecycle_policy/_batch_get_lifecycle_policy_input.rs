// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetLifecyclePolicyInput {
    /// <p>The unique identifiers of policy types and policy names.</p>
    pub identifiers: ::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyIdentifier>>,
}
impl BatchGetLifecyclePolicyInput {
    /// <p>The unique identifiers of policy types and policy names.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.identifiers.is_none()`.
    pub fn identifiers(&self) -> &[crate::types::LifecyclePolicyIdentifier] {
        self.identifiers.as_deref().unwrap_or_default()
    }
}
impl BatchGetLifecyclePolicyInput {
    /// Creates a new builder-style object to manufacture [`BatchGetLifecyclePolicyInput`](crate::operation::batch_get_lifecycle_policy::BatchGetLifecyclePolicyInput).
    pub fn builder() -> crate::operation::batch_get_lifecycle_policy::builders::BatchGetLifecyclePolicyInputBuilder {
        crate::operation::batch_get_lifecycle_policy::builders::BatchGetLifecyclePolicyInputBuilder::default()
    }
}

/// A builder for [`BatchGetLifecyclePolicyInput`](crate::operation::batch_get_lifecycle_policy::BatchGetLifecyclePolicyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetLifecyclePolicyInputBuilder {
    pub(crate) identifiers: ::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyIdentifier>>,
}
impl BatchGetLifecyclePolicyInputBuilder {
    /// Appends an item to `identifiers`.
    ///
    /// To override the contents of this collection use [`set_identifiers`](Self::set_identifiers).
    ///
    /// <p>The unique identifiers of policy types and policy names.</p>
    pub fn identifiers(mut self, input: crate::types::LifecyclePolicyIdentifier) -> Self {
        let mut v = self.identifiers.unwrap_or_default();
        v.push(input);
        self.identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique identifiers of policy types and policy names.</p>
    pub fn set_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyIdentifier>>) -> Self {
        self.identifiers = input;
        self
    }
    /// <p>The unique identifiers of policy types and policy names.</p>
    pub fn get_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyIdentifier>> {
        &self.identifiers
    }
    /// Consumes the builder and constructs a [`BatchGetLifecyclePolicyInput`](crate::operation::batch_get_lifecycle_policy::BatchGetLifecyclePolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_get_lifecycle_policy::BatchGetLifecyclePolicyInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_get_lifecycle_policy::BatchGetLifecyclePolicyInput {
            identifiers: self.identifiers,
        })
    }
}
