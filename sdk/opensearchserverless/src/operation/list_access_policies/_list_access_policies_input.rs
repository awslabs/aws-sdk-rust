// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAccessPoliciesInput {
    /// <p>The type of access policy.</p>
    pub r#type: ::std::option::Option<crate::types::AccessPolicyType>,
    /// <p>Resource filters (can be collections or indexes) that policies can apply to.</p>
    pub resource: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>If your initial <code>ListAccessPolicies</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListAccessPolicies</code> operations, which returns results in the next page. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 20.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListAccessPoliciesInput {
    /// <p>The type of access policy.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::AccessPolicyType> {
        self.r#type.as_ref()
    }
    /// <p>Resource filters (can be collections or indexes) that policies can apply to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource.is_none()`.
    pub fn resource(&self) -> &[::std::string::String] {
        self.resource.as_deref().unwrap_or_default()
    }
    /// <p>If your initial <code>ListAccessPolicies</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListAccessPolicies</code> operations, which returns results in the next page. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 20.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListAccessPoliciesInput {
    /// Creates a new builder-style object to manufacture [`ListAccessPoliciesInput`](crate::operation::list_access_policies::ListAccessPoliciesInput).
    pub fn builder() -> crate::operation::list_access_policies::builders::ListAccessPoliciesInputBuilder {
        crate::operation::list_access_policies::builders::ListAccessPoliciesInputBuilder::default()
    }
}

/// A builder for [`ListAccessPoliciesInput`](crate::operation::list_access_policies::ListAccessPoliciesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListAccessPoliciesInputBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::AccessPolicyType>,
    pub(crate) resource: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListAccessPoliciesInputBuilder {
    /// <p>The type of access policy.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AccessPolicyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of access policy.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AccessPolicyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of access policy.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AccessPolicyType> {
        &self.r#type
    }
    /// Appends an item to `resource`.
    ///
    /// To override the contents of this collection use [`set_resource`](Self::set_resource).
    ///
    /// <p>Resource filters (can be collections or indexes) that policies can apply to.</p>
    pub fn resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resource.unwrap_or_default();
        v.push(input.into());
        self.resource = ::std::option::Option::Some(v);
        self
    }
    /// <p>Resource filters (can be collections or indexes) that policies can apply to.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resource = input;
        self
    }
    /// <p>Resource filters (can be collections or indexes) that policies can apply to.</p>
    pub fn get_resource(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resource
    }
    /// <p>If your initial <code>ListAccessPolicies</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListAccessPolicies</code> operations, which returns results in the next page. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If your initial <code>ListAccessPolicies</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListAccessPolicies</code> operations, which returns results in the next page. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If your initial <code>ListAccessPolicies</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListAccessPolicies</code> operations, which returns results in the next page. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 20.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 20.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 20.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListAccessPoliciesInput`](crate::operation::list_access_policies::ListAccessPoliciesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_access_policies::ListAccessPoliciesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_access_policies::ListAccessPoliciesInput {
            r#type: self.r#type,
            resource: self.resource,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
