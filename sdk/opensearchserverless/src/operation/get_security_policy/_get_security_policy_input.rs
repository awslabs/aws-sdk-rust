// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSecurityPolicyInput {
    /// <p>The type of security policy.</p>
    pub r#type: ::std::option::Option<crate::types::SecurityPolicyType>,
    /// <p>The name of the security policy.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl GetSecurityPolicyInput {
    /// <p>The type of security policy.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::SecurityPolicyType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the security policy.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl GetSecurityPolicyInput {
    /// Creates a new builder-style object to manufacture [`GetSecurityPolicyInput`](crate::operation::get_security_policy::GetSecurityPolicyInput).
    pub fn builder() -> crate::operation::get_security_policy::builders::GetSecurityPolicyInputBuilder {
        crate::operation::get_security_policy::builders::GetSecurityPolicyInputBuilder::default()
    }
}

/// A builder for [`GetSecurityPolicyInput`](crate::operation::get_security_policy::GetSecurityPolicyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSecurityPolicyInputBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::SecurityPolicyType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl GetSecurityPolicyInputBuilder {
    /// <p>The type of security policy.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SecurityPolicyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of security policy.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SecurityPolicyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of security policy.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SecurityPolicyType> {
        &self.r#type
    }
    /// <p>The name of the security policy.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the security policy.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the security policy.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`GetSecurityPolicyInput`](crate::operation::get_security_policy::GetSecurityPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_security_policy::GetSecurityPolicyInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_security_policy::GetSecurityPolicyInput {
            r#type: self.r#type,
            name: self.name,
        })
    }
}
