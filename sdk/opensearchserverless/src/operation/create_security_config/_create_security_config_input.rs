// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSecurityConfigInput {
    /// <p>The type of security configuration.</p>
    pub r#type: ::std::option::Option<crate::types::SecurityConfigType>,
    /// <p>The name of the security configuration.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the security configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Describes SAML options in in the form of a key-value map. This field is required if you specify <code>saml</code> for the <code>type</code> parameter.</p>
    pub saml_options: ::std::option::Option<crate::types::SamlConfigOptions>,
    /// <p>Unique, case-sensitive identifier to ensure idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateSecurityConfigInput {
    /// <p>The type of security configuration.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::SecurityConfigType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the security configuration.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the security configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Describes SAML options in in the form of a key-value map. This field is required if you specify <code>saml</code> for the <code>type</code> parameter.</p>
    pub fn saml_options(&self) -> ::std::option::Option<&crate::types::SamlConfigOptions> {
        self.saml_options.as_ref()
    }
    /// <p>Unique, case-sensitive identifier to ensure idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateSecurityConfigInput {
    /// Creates a new builder-style object to manufacture [`CreateSecurityConfigInput`](crate::operation::create_security_config::CreateSecurityConfigInput).
    pub fn builder() -> crate::operation::create_security_config::builders::CreateSecurityConfigInputBuilder {
        crate::operation::create_security_config::builders::CreateSecurityConfigInputBuilder::default()
    }
}

/// A builder for [`CreateSecurityConfigInput`](crate::operation::create_security_config::CreateSecurityConfigInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateSecurityConfigInputBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::SecurityConfigType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) saml_options: ::std::option::Option<crate::types::SamlConfigOptions>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateSecurityConfigInputBuilder {
    /// <p>The type of security configuration.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SecurityConfigType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of security configuration.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SecurityConfigType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of security configuration.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SecurityConfigType> {
        &self.r#type
    }
    /// <p>The name of the security configuration.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the security configuration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the security configuration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the security configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the security configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the security configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Describes SAML options in in the form of a key-value map. This field is required if you specify <code>saml</code> for the <code>type</code> parameter.</p>
    pub fn saml_options(mut self, input: crate::types::SamlConfigOptions) -> Self {
        self.saml_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes SAML options in in the form of a key-value map. This field is required if you specify <code>saml</code> for the <code>type</code> parameter.</p>
    pub fn set_saml_options(mut self, input: ::std::option::Option<crate::types::SamlConfigOptions>) -> Self {
        self.saml_options = input;
        self
    }
    /// <p>Describes SAML options in in the form of a key-value map. This field is required if you specify <code>saml</code> for the <code>type</code> parameter.</p>
    pub fn get_saml_options(&self) -> &::std::option::Option<crate::types::SamlConfigOptions> {
        &self.saml_options
    }
    /// <p>Unique, case-sensitive identifier to ensure idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier to ensure idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier to ensure idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateSecurityConfigInput`](crate::operation::create_security_config::CreateSecurityConfigInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_security_config::CreateSecurityConfigInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_security_config::CreateSecurityConfigInput {
            r#type: self.r#type,
            name: self.name,
            description: self.description,
            saml_options: self.saml_options,
            client_token: self.client_token,
        })
    }
}
