// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Update details for an OpenSearch Serverless-managed interface endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVpcEndpointDetail {
    /// <p>The unique identifier of the endpoint.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the endpoint.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status of the endpoint update process.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::VpcEndpointStatus>,
    /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The timestamp of when the endpoint was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
}
impl UpdateVpcEndpointDetail {
    /// <p>The unique identifier of the endpoint.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the endpoint.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the endpoint update process.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::VpcEndpointStatus> {
        self.status.as_ref()
    }
    /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p>The timestamp of when the endpoint was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
}
impl UpdateVpcEndpointDetail {
    /// Creates a new builder-style object to manufacture [`UpdateVpcEndpointDetail`](crate::types::UpdateVpcEndpointDetail).
    pub fn builder() -> crate::types::builders::UpdateVpcEndpointDetailBuilder {
        crate::types::builders::UpdateVpcEndpointDetailBuilder::default()
    }
}

/// A builder for [`UpdateVpcEndpointDetail`](crate::types::UpdateVpcEndpointDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateVpcEndpointDetailBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::VpcEndpointStatus>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) last_modified_date: std::option::Option<i64>,
}
impl UpdateVpcEndpointDetailBuilder {
    /// <p>The unique identifier of the endpoint.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the endpoint.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the endpoint.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the endpoint.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The current status of the endpoint update process.</p>
    pub fn status(mut self, input: crate::types::VpcEndpointStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the endpoint update process.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::VpcEndpointStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>The ID of the subnets from which you access OpenSearch Serverless.</p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = Some(v);
        self
    }
    /// <p>The unique identifiers of the security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.</p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The timestamp of when the endpoint was last modified.</p>
    pub fn last_modified_date(mut self, input: i64) -> Self {
        self.last_modified_date = Some(input);
        self
    }
    /// <p>The timestamp of when the endpoint was last modified.</p>
    pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateVpcEndpointDetail`](crate::types::UpdateVpcEndpointDetail).
    pub fn build(self) -> crate::types::UpdateVpcEndpointDetail {
        crate::types::UpdateVpcEndpointDetail {
            id: self.id,
            name: self.name,
            status: self.status,
            subnet_ids: self.subnet_ids,
            security_group_ids: self.security_group_ids,
            last_modified_date: self.last_modified_date,
        }
    }
}
