// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The maximum capacity limits for all OpenSearch Serverless collections, in OpenSearch Compute Units (OCUs). These limits are used to scale your collections based on the current workload. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html#serverless-scaling">Autoscaling</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CapacityLimits {
    /// <p>The maximum indexing capacity for collections.</p>
    #[doc(hidden)]
    pub max_indexing_capacity_in_ocu: std::option::Option<i32>,
    /// <p>The maximum search capacity for collections.</p>
    #[doc(hidden)]
    pub max_search_capacity_in_ocu: std::option::Option<i32>,
}
impl CapacityLimits {
    /// <p>The maximum indexing capacity for collections.</p>
    pub fn max_indexing_capacity_in_ocu(&self) -> std::option::Option<i32> {
        self.max_indexing_capacity_in_ocu
    }
    /// <p>The maximum search capacity for collections.</p>
    pub fn max_search_capacity_in_ocu(&self) -> std::option::Option<i32> {
        self.max_search_capacity_in_ocu
    }
}
impl CapacityLimits {
    /// Creates a new builder-style object to manufacture [`CapacityLimits`](crate::types::CapacityLimits).
    pub fn builder() -> crate::types::builders::CapacityLimitsBuilder {
        crate::types::builders::CapacityLimitsBuilder::default()
    }
}

/// A builder for [`CapacityLimits`](crate::types::CapacityLimits).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CapacityLimitsBuilder {
    pub(crate) max_indexing_capacity_in_ocu: std::option::Option<i32>,
    pub(crate) max_search_capacity_in_ocu: std::option::Option<i32>,
}
impl CapacityLimitsBuilder {
    /// <p>The maximum indexing capacity for collections.</p>
    pub fn max_indexing_capacity_in_ocu(mut self, input: i32) -> Self {
        self.max_indexing_capacity_in_ocu = Some(input);
        self
    }
    /// <p>The maximum indexing capacity for collections.</p>
    pub fn set_max_indexing_capacity_in_ocu(mut self, input: std::option::Option<i32>) -> Self {
        self.max_indexing_capacity_in_ocu = input;
        self
    }
    /// <p>The maximum search capacity for collections.</p>
    pub fn max_search_capacity_in_ocu(mut self, input: i32) -> Self {
        self.max_search_capacity_in_ocu = Some(input);
        self
    }
    /// <p>The maximum search capacity for collections.</p>
    pub fn set_max_search_capacity_in_ocu(mut self, input: std::option::Option<i32>) -> Self {
        self.max_search_capacity_in_ocu = input;
        self
    }
    /// Consumes the builder and constructs a [`CapacityLimits`](crate::types::CapacityLimits).
    pub fn build(self) -> crate::types::CapacityLimits {
        crate::types::CapacityLimits {
            max_indexing_capacity_in_ocu: self.max_indexing_capacity_in_ocu,
            max_search_capacity_in_ocu: self.max_search_capacity_in_ocu,
        }
    }
}
