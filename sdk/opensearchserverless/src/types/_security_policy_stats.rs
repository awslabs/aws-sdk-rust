// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Statistics for an OpenSearch Serverless security policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityPolicyStats {
    /// <p>The number of encryption policies in the current account.</p>
    #[doc(hidden)]
    pub encryption_policy_count: std::option::Option<i64>,
    /// <p>The number of network policies in the current account.</p>
    #[doc(hidden)]
    pub network_policy_count: std::option::Option<i64>,
}
impl SecurityPolicyStats {
    /// <p>The number of encryption policies in the current account.</p>
    pub fn encryption_policy_count(&self) -> std::option::Option<i64> {
        self.encryption_policy_count
    }
    /// <p>The number of network policies in the current account.</p>
    pub fn network_policy_count(&self) -> std::option::Option<i64> {
        self.network_policy_count
    }
}
impl SecurityPolicyStats {
    /// Creates a new builder-style object to manufacture [`SecurityPolicyStats`](crate::types::SecurityPolicyStats).
    pub fn builder() -> crate::types::builders::SecurityPolicyStatsBuilder {
        crate::types::builders::SecurityPolicyStatsBuilder::default()
    }
}

/// A builder for [`SecurityPolicyStats`](crate::types::SecurityPolicyStats).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SecurityPolicyStatsBuilder {
    pub(crate) encryption_policy_count: std::option::Option<i64>,
    pub(crate) network_policy_count: std::option::Option<i64>,
}
impl SecurityPolicyStatsBuilder {
    /// <p>The number of encryption policies in the current account.</p>
    pub fn encryption_policy_count(mut self, input: i64) -> Self {
        self.encryption_policy_count = Some(input);
        self
    }
    /// <p>The number of encryption policies in the current account.</p>
    pub fn set_encryption_policy_count(mut self, input: std::option::Option<i64>) -> Self {
        self.encryption_policy_count = input;
        self
    }
    /// <p>The number of network policies in the current account.</p>
    pub fn network_policy_count(mut self, input: i64) -> Self {
        self.network_policy_count = Some(input);
        self
    }
    /// <p>The number of network policies in the current account.</p>
    pub fn set_network_policy_count(mut self, input: std::option::Option<i64>) -> Self {
        self.network_policy_count = input;
        self
    }
    /// Consumes the builder and constructs a [`SecurityPolicyStats`](crate::types::SecurityPolicyStats).
    pub fn build(self) -> crate::types::SecurityPolicyStats {
        crate::types::SecurityPolicyStats {
            encryption_policy_count: self.encryption_policy_count,
            network_policy_count: self.network_policy_count,
        }
    }
}
