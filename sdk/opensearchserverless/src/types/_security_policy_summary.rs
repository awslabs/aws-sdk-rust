// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a security policy for OpenSearch Serverless.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityPolicySummary {
    /// <p>The type of security policy.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::SecurityPolicyType>,
    /// <p>The name of the policy.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The version of the policy.</p>
    #[doc(hidden)]
    pub policy_version: std::option::Option<std::string::String>,
    /// <p>The description of the security policy.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The date the policy was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<i64>,
    /// <p>The timestamp of when the policy was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<i64>,
}
impl SecurityPolicySummary {
    /// <p>The type of security policy.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::SecurityPolicyType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the policy.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version of the policy.</p>
    pub fn policy_version(&self) -> std::option::Option<&str> {
        self.policy_version.as_deref()
    }
    /// <p>The description of the security policy.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date the policy was created.</p>
    pub fn created_date(&self) -> std::option::Option<i64> {
        self.created_date
    }
    /// <p>The timestamp of when the policy was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<i64> {
        self.last_modified_date
    }
}
impl SecurityPolicySummary {
    /// Creates a new builder-style object to manufacture [`SecurityPolicySummary`](crate::types::SecurityPolicySummary).
    pub fn builder() -> crate::types::builders::SecurityPolicySummaryBuilder {
        crate::types::builders::SecurityPolicySummaryBuilder::default()
    }
}

/// A builder for [`SecurityPolicySummary`](crate::types::SecurityPolicySummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SecurityPolicySummaryBuilder {
    pub(crate) r#type: std::option::Option<crate::types::SecurityPolicyType>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) policy_version: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) created_date: std::option::Option<i64>,
    pub(crate) last_modified_date: std::option::Option<i64>,
}
impl SecurityPolicySummaryBuilder {
    /// <p>The type of security policy.</p>
    pub fn r#type(mut self, input: crate::types::SecurityPolicyType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of security policy.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::SecurityPolicyType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The name of the policy.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the policy.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The version of the policy.</p>
    pub fn policy_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_version = Some(input.into());
        self
    }
    /// <p>The version of the policy.</p>
    pub fn set_policy_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy_version = input;
        self
    }
    /// <p>The description of the security policy.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the security policy.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The date the policy was created.</p>
    pub fn created_date(mut self, input: i64) -> Self {
        self.created_date = Some(input);
        self
    }
    /// <p>The date the policy was created.</p>
    pub fn set_created_date(mut self, input: std::option::Option<i64>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The timestamp of when the policy was last modified.</p>
    pub fn last_modified_date(mut self, input: i64) -> Self {
        self.last_modified_date = Some(input);
        self
    }
    /// <p>The timestamp of when the policy was last modified.</p>
    pub fn set_last_modified_date(mut self, input: std::option::Option<i64>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// Consumes the builder and constructs a [`SecurityPolicySummary`](crate::types::SecurityPolicySummary).
    pub fn build(self) -> crate::types::SecurityPolicySummary {
        crate::types::SecurityPolicySummary {
            r#type: self.r#type,
            name: self.name,
            policy_version: self.policy_version,
            description: self.description,
            created_date: self.created_date,
            last_modified_date: self.last_modified_date,
        }
    }
}
