// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Deletes the specified report definition in AWS Application Cost Profiler. This stops the report from being
/// generated.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteReportDefinition {
    _private: (),
}
impl DeleteReportDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteReportDefinitionInput`](crate::input::DeleteReportDefinitionInput)
    pub fn builder() -> crate::input::delete_report_definition_input::Builder {
        crate::input::delete_report_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteReportDefinition {
    type Output = std::result::Result<
        crate::output::DeleteReportDefinitionOutput,
        crate::error::DeleteReportDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_report_definition_error(response)
        } else {
            crate::operation_deser::parse_delete_report_definition_response(response)
        }
    }
}

/// <p>Retrieves the definition of a report already configured in AWS Application Cost Profiler.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetReportDefinition {
    _private: (),
}
impl GetReportDefinition {
    /// Creates a new builder-style object to manufacture [`GetReportDefinitionInput`](crate::input::GetReportDefinitionInput)
    pub fn builder() -> crate::input::get_report_definition_input::Builder {
        crate::input::get_report_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetReportDefinition {
    type Output = std::result::Result<
        crate::output::GetReportDefinitionOutput,
        crate::error::GetReportDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_report_definition_error(response)
        } else {
            crate::operation_deser::parse_get_report_definition_response(response)
        }
    }
}

/// <p>Ingests application usage data from Amazon Simple Storage Service (Amazon S3).</p>
/// <p>The data must already exist in the S3 location. As part of the action, AWS Application Cost Profiler
/// copies the object from your S3 bucket to an S3 bucket owned by Amazon for processing
/// asynchronously.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportApplicationUsage {
    _private: (),
}
impl ImportApplicationUsage {
    /// Creates a new builder-style object to manufacture [`ImportApplicationUsageInput`](crate::input::ImportApplicationUsageInput)
    pub fn builder() -> crate::input::import_application_usage_input::Builder {
        crate::input::import_application_usage_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportApplicationUsage {
    type Output = std::result::Result<
        crate::output::ImportApplicationUsageOutput,
        crate::error::ImportApplicationUsageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_application_usage_error(response)
        } else {
            crate::operation_deser::parse_import_application_usage_response(response)
        }
    }
}

/// <p>Retrieves a list of all reports and their configurations for your AWS account.</p>
/// <p>The maximum number of reports is one.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListReportDefinitions {
    _private: (),
}
impl ListReportDefinitions {
    /// Creates a new builder-style object to manufacture [`ListReportDefinitionsInput`](crate::input::ListReportDefinitionsInput)
    pub fn builder() -> crate::input::list_report_definitions_input::Builder {
        crate::input::list_report_definitions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListReportDefinitions {
    type Output = std::result::Result<
        crate::output::ListReportDefinitionsOutput,
        crate::error::ListReportDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_report_definitions_error(response)
        } else {
            crate::operation_deser::parse_list_report_definitions_response(response)
        }
    }
}

/// <p>Creates the report definition for a report in Application Cost Profiler.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutReportDefinition {
    _private: (),
}
impl PutReportDefinition {
    /// Creates a new builder-style object to manufacture [`PutReportDefinitionInput`](crate::input::PutReportDefinitionInput)
    pub fn builder() -> crate::input::put_report_definition_input::Builder {
        crate::input::put_report_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutReportDefinition {
    type Output = std::result::Result<
        crate::output::PutReportDefinitionOutput,
        crate::error::PutReportDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_report_definition_error(response)
        } else {
            crate::operation_deser::parse_put_report_definition_response(response)
        }
    }
}

/// <p>Updates existing report in AWS Application Cost Profiler.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateReportDefinition {
    _private: (),
}
impl UpdateReportDefinition {
    /// Creates a new builder-style object to manufacture [`UpdateReportDefinitionInput`](crate::input::UpdateReportDefinitionInput)
    pub fn builder() -> crate::input::update_report_definition_input::Builder {
        crate::input::update_report_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateReportDefinition {
    type Output = std::result::Result<
        crate::output::UpdateReportDefinitionOutput,
        crate::error::UpdateReportDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_report_definition_error(response)
        } else {
            crate::operation_deser::parse_update_report_definition_response(response)
        }
    }
}
