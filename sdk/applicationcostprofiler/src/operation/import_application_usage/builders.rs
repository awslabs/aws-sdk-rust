// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_application_usage::_import_application_usage_output::ImportApplicationUsageOutputBuilder;

pub use crate::operation::import_application_usage::_import_application_usage_input::ImportApplicationUsageInputBuilder;

/// Fluent builder constructing a request to `ImportApplicationUsage`.
///
/// <p>Ingests application usage data from Amazon Simple Storage Service (Amazon S3).</p>
/// <p>The data must already exist in the S3 location. As part of the action, AWS Application Cost Profiler copies the object from your S3 bucket to an S3 bucket owned by Amazon for processing asynchronously.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ImportApplicationUsageFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::import_application_usage::builders::ImportApplicationUsageInputBuilder,
}
impl ImportApplicationUsageFluentBuilder {
    /// Creates a new `ImportApplicationUsage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::import_application_usage::ImportApplicationUsage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::import_application_usage::ImportApplicationUsageError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::import_application_usage::ImportApplicationUsageOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::import_application_usage::ImportApplicationUsageError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Amazon S3 location to import application usage data from.</p>
    pub fn source_s3_location(mut self, input: crate::types::SourceS3Location) -> Self {
        self.inner = self.inner.source_s3_location(input);
        self
    }
    /// <p>Amazon S3 location to import application usage data from.</p>
    pub fn set_source_s3_location(
        mut self,
        input: std::option::Option<crate::types::SourceS3Location>,
    ) -> Self {
        self.inner = self.inner.set_source_s3_location(input);
        self
    }
}
