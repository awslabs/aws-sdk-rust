// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn get_report_definition_output_correct_errors(
    mut builder: crate::operation::get_report_definition::builders::GetReportDefinitionOutputBuilder,
) -> crate::operation::get_report_definition::builders::GetReportDefinitionOutputBuilder {
    if builder.report_id.is_none() {
        builder.report_id = Some(Default::default())
    }
    if builder.report_description.is_none() {
        builder.report_description = Some(Default::default())
    }
    if builder.report_frequency.is_none() {
        builder.report_frequency = "no value was set".parse::<crate::types::ReportFrequency>().ok()
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::Format>().ok()
    }
    if builder.destination_s3_location.is_none() {
        builder.destination_s3_location = {
            let builder = crate::types::builders::S3LocationBuilder::default();
            crate::serde_util::s3_location_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated.is_none() {
        builder.last_updated = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn import_application_usage_output_correct_errors(
    mut builder: crate::operation::import_application_usage::builders::ImportApplicationUsageOutputBuilder,
) -> crate::operation::import_application_usage::builders::ImportApplicationUsageOutputBuilder {
    if builder.import_id.is_none() {
        builder.import_id = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_location_correct_errors(mut builder: crate::types::builders::S3LocationBuilder) -> crate::types::builders::S3LocationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.prefix.is_none() {
        builder.prefix = Some(Default::default())
    }
    builder
}
