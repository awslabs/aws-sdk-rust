// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have permission to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>An internal server error occurred. Retry your request.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>Your request exceeds one or more of the service quotas.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The calls to AWS Application Cost Profiler API are throttled. The request was denied.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints for the API.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteReportDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteReportDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteReportDefinitionError> for Error {
    fn from(err: crate::error::DeleteReportDefinitionError) -> Self {
        match err {
            crate::error::DeleteReportDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteReportDefinitionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteReportDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteReportDefinitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteReportDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetReportDefinitionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetReportDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetReportDefinitionError> for Error {
    fn from(err: crate::error::GetReportDefinitionError) -> Self {
        match err {
            crate::error::GetReportDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetReportDefinitionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetReportDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetReportDefinitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetReportDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportApplicationUsageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportApplicationUsageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportApplicationUsageError> for Error {
    fn from(err: crate::error::ImportApplicationUsageError) -> Self {
        match err {
            crate::error::ImportApplicationUsageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ImportApplicationUsageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ImportApplicationUsageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ImportApplicationUsageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ImportApplicationUsageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListReportDefinitionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListReportDefinitionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListReportDefinitionsError> for Error {
    fn from(err: crate::error::ListReportDefinitionsError) -> Self {
        match err {
            crate::error::ListReportDefinitionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListReportDefinitionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListReportDefinitionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListReportDefinitionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListReportDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutReportDefinitionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutReportDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutReportDefinitionError> for Error {
    fn from(err: crate::error::PutReportDefinitionError) -> Self {
        match err {
            crate::error::PutReportDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutReportDefinitionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutReportDefinitionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::PutReportDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutReportDefinitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutReportDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateReportDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateReportDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateReportDefinitionError> for Error {
    fn from(err: crate::error::UpdateReportDefinitionError) -> Self {
        match err {
            crate::error::UpdateReportDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateReportDefinitionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateReportDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateReportDefinitionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateReportDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
