// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// An exception thrown when a bulk publish operation is requested less than 24 hours after a previous bulk publish operation completed successfully.
    AlreadyStreamedException(crate::error::AlreadyStreamedException),
    /// <p>Thrown if there are parallel requests to modify a resource.</p>
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    /// An exception thrown when there is an IN_PROGRESS bulk publish operation for the given identity pool.
    DuplicateRequestException(crate::error::DuplicateRequestException),
    /// Indicates an internal service error.
    InternalErrorException(crate::error::InternalErrorException),
    #[allow(missing_docs)] // documentation missing in model
    InvalidConfigurationException(crate::error::InvalidConfigurationException),
    /// <p>The AWS Lambda function returned invalid output or an exception.</p>
    InvalidLambdaFunctionOutputException(crate::error::InvalidLambdaFunctionOutputException),
    /// Thrown when a request parameter does not comply with the associated constraints.
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>AWS Lambda throttled your account, please contact AWS Support</p>
    LambdaThrottledException(crate::error::LambdaThrottledException),
    /// Thrown when the limit on the number of objects or operations has been exceeded.
    LimitExceededException(crate::error::LimitExceededException),
    /// Thrown when a user is not authorized to access the requested resource.
    NotAuthorizedException(crate::error::NotAuthorizedException),
    /// Thrown if an update can't be applied because the resource was changed by another call and this would result in a conflict.
    ResourceConflictException(crate::error::ResourceConflictException),
    /// Thrown if the resource doesn't exist.
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// Thrown if the request is throttled.
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AlreadyStreamedException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::DuplicateRequestException(inner) => inner.fmt(f),
            Error::InternalErrorException(inner) => inner.fmt(f),
            Error::InvalidConfigurationException(inner) => inner.fmt(f),
            Error::InvalidLambdaFunctionOutputException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::LambdaThrottledException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotAuthorizedException(inner) => inner.fmt(f),
            Error::ResourceConflictException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BulkPublishError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BulkPublishError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BulkPublishError> for Error {
    fn from(err: crate::error::BulkPublishError) -> Self {
        match err {
            crate::error::BulkPublishError::AlreadyStreamedException(inner) => {
                Error::AlreadyStreamedException(inner)
            }
            crate::error::BulkPublishError::DuplicateRequestException(inner) => {
                Error::DuplicateRequestException(inner)
            }
            crate::error::BulkPublishError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::BulkPublishError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::BulkPublishError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::BulkPublishError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BulkPublishError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDatasetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDatasetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDatasetError> for Error {
    fn from(err: crate::error::DeleteDatasetError) -> Self {
        match err {
            crate::error::DeleteDatasetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteDatasetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteDatasetError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DeleteDatasetError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::DeleteDatasetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDatasetError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDatasetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDatasetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDatasetError> for Error {
    fn from(err: crate::error::DescribeDatasetError) -> Self {
        match err {
            crate::error::DescribeDatasetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeDatasetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeDatasetError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DescribeDatasetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDatasetError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeIdentityPoolUsageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeIdentityPoolUsageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeIdentityPoolUsageError> for Error {
    fn from(err: crate::error::DescribeIdentityPoolUsageError) -> Self {
        match err {
            crate::error::DescribeIdentityPoolUsageError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeIdentityPoolUsageError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeIdentityPoolUsageError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DescribeIdentityPoolUsageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeIdentityPoolUsageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeIdentityPoolUsageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeIdentityUsageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeIdentityUsageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeIdentityUsageError> for Error {
    fn from(err: crate::error::DescribeIdentityUsageError) -> Self {
        match err {
            crate::error::DescribeIdentityUsageError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeIdentityUsageError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeIdentityUsageError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DescribeIdentityUsageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeIdentityUsageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeIdentityUsageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBulkPublishDetailsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBulkPublishDetailsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBulkPublishDetailsError> for Error {
    fn from(err: crate::error::GetBulkPublishDetailsError) -> Self {
        match err {
            crate::error::GetBulkPublishDetailsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetBulkPublishDetailsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetBulkPublishDetailsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetBulkPublishDetailsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetBulkPublishDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCognitoEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCognitoEventsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCognitoEventsError> for Error {
    fn from(err: crate::error::GetCognitoEventsError) -> Self {
        match err {
            crate::error::GetCognitoEventsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetCognitoEventsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetCognitoEventsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetCognitoEventsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCognitoEventsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetCognitoEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetIdentityPoolConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetIdentityPoolConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetIdentityPoolConfigurationError> for Error {
    fn from(err: crate::error::GetIdentityPoolConfigurationError) -> Self {
        match err {
            crate::error::GetIdentityPoolConfigurationError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetIdentityPoolConfigurationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetIdentityPoolConfigurationError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetIdentityPoolConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetIdentityPoolConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetIdentityPoolConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDatasetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDatasetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDatasetsError> for Error {
    fn from(err: crate::error::ListDatasetsError) -> Self {
        match err {
            crate::error::ListDatasetsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListDatasetsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListDatasetsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListDatasetsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListDatasetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListIdentityPoolUsageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListIdentityPoolUsageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListIdentityPoolUsageError> for Error {
    fn from(err: crate::error::ListIdentityPoolUsageError) -> Self {
        match err {
            crate::error::ListIdentityPoolUsageError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListIdentityPoolUsageError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListIdentityPoolUsageError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListIdentityPoolUsageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListIdentityPoolUsageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRecordsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRecordsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRecordsError> for Error {
    fn from(err: crate::error::ListRecordsError) -> Self {
        match err {
            crate::error::ListRecordsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListRecordsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListRecordsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListRecordsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RegisterDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterDeviceError> for Error {
    fn from(err: crate::error::RegisterDeviceError) -> Self {
        match err {
            crate::error::RegisterDeviceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::RegisterDeviceError::InvalidConfigurationException(inner) => {
                Error::InvalidConfigurationException(inner)
            }
            crate::error::RegisterDeviceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::RegisterDeviceError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::RegisterDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RegisterDeviceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::RegisterDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetCognitoEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetCognitoEventsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetCognitoEventsError> for Error {
    fn from(err: crate::error::SetCognitoEventsError) -> Self {
        match err {
            crate::error::SetCognitoEventsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::SetCognitoEventsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SetCognitoEventsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::SetCognitoEventsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SetCognitoEventsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SetCognitoEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetIdentityPoolConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetIdentityPoolConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetIdentityPoolConfigurationError> for Error {
    fn from(err: crate::error::SetIdentityPoolConfigurationError) -> Self {
        match err {
            crate::error::SetIdentityPoolConfigurationError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::error::SetIdentityPoolConfigurationError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::SetIdentityPoolConfigurationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SetIdentityPoolConfigurationError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::SetIdentityPoolConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SetIdentityPoolConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SetIdentityPoolConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SubscribeToDatasetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SubscribeToDatasetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SubscribeToDatasetError> for Error {
    fn from(err: crate::error::SubscribeToDatasetError) -> Self {
        match err {
            crate::error::SubscribeToDatasetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::SubscribeToDatasetError::InvalidConfigurationException(inner) => {
                Error::InvalidConfigurationException(inner)
            }
            crate::error::SubscribeToDatasetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SubscribeToDatasetError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::SubscribeToDatasetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SubscribeToDatasetError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SubscribeToDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UnsubscribeFromDatasetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UnsubscribeFromDatasetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UnsubscribeFromDatasetError> for Error {
    fn from(err: crate::error::UnsubscribeFromDatasetError) -> Self {
        match err {
            crate::error::UnsubscribeFromDatasetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UnsubscribeFromDatasetError::InvalidConfigurationException(inner) => {
                Error::InvalidConfigurationException(inner)
            }
            crate::error::UnsubscribeFromDatasetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UnsubscribeFromDatasetError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UnsubscribeFromDatasetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UnsubscribeFromDatasetError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UnsubscribeFromDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRecordsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateRecordsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRecordsError> for Error {
    fn from(err: crate::error::UpdateRecordsError) -> Self {
        match err {
            crate::error::UpdateRecordsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateRecordsError::InvalidLambdaFunctionOutputException(inner) => {
                Error::InvalidLambdaFunctionOutputException(inner)
            }
            crate::error::UpdateRecordsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateRecordsError::LambdaThrottledException(inner) => {
                Error::LambdaThrottledException(inner)
            }
            crate::error::UpdateRecordsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateRecordsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UpdateRecordsError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::error::UpdateRecordsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateRecordsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AlreadyStreamedException(e) => e.request_id(),
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::DuplicateRequestException(e) => e.request_id(),
            Self::InternalErrorException(e) => e.request_id(),
            Self::InvalidConfigurationException(e) => e.request_id(),
            Self::InvalidLambdaFunctionOutputException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::LambdaThrottledException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotAuthorizedException(e) => e.request_id(),
            Self::ResourceConflictException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
