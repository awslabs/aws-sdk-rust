// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Returned for a successful ListDatasets request.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDatasetsOutput {
    /// A set of datasets.
    pub datasets: ::std::option::Option<::std::vec::Vec<crate::types::Dataset>>,
    /// Number of datasets returned.
    pub count: i32,
    /// A pagination token for obtaining the next page of results.
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListDatasetsOutput {
    /// A set of datasets.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.datasets.is_none()`.
    pub fn datasets(&self) -> &[crate::types::Dataset] {
        self.datasets.as_deref().unwrap_or_default()
    }
    /// Number of datasets returned.
    pub fn count(&self) -> i32 {
        self.count
    }
    /// A pagination token for obtaining the next page of results.
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListDatasetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListDatasetsOutput {
    /// Creates a new builder-style object to manufacture [`ListDatasetsOutput`](crate::operation::list_datasets::ListDatasetsOutput).
    pub fn builder() -> crate::operation::list_datasets::builders::ListDatasetsOutputBuilder {
        crate::operation::list_datasets::builders::ListDatasetsOutputBuilder::default()
    }
}

/// A builder for [`ListDatasetsOutput`](crate::operation::list_datasets::ListDatasetsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListDatasetsOutputBuilder {
    pub(crate) datasets: ::std::option::Option<::std::vec::Vec<crate::types::Dataset>>,
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListDatasetsOutputBuilder {
    /// Appends an item to `datasets`.
    ///
    /// To override the contents of this collection use [`set_datasets`](Self::set_datasets).
    ///
    /// A set of datasets.
    pub fn datasets(mut self, input: crate::types::Dataset) -> Self {
        let mut v = self.datasets.unwrap_or_default();
        v.push(input);
        self.datasets = ::std::option::Option::Some(v);
        self
    }
    /// A set of datasets.
    pub fn set_datasets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Dataset>>) -> Self {
        self.datasets = input;
        self
    }
    /// A set of datasets.
    pub fn get_datasets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Dataset>> {
        &self.datasets
    }
    /// Number of datasets returned.
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// Number of datasets returned.
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// Number of datasets returned.
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// A pagination token for obtaining the next page of results.
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// A pagination token for obtaining the next page of results.
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// A pagination token for obtaining the next page of results.
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListDatasetsOutput`](crate::operation::list_datasets::ListDatasetsOutput).
    pub fn build(self) -> crate::operation::list_datasets::ListDatasetsOutput {
        crate::operation::list_datasets::ListDatasetsOutput {
            datasets: self.datasets,
            count: self.count.unwrap_or_default(),
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
