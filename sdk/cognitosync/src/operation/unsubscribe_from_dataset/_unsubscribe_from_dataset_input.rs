// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A request to UnsubscribeFromDataset.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnsubscribeFromDatasetInput {
    /// <p>A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which this identity belongs.</p>
    #[doc(hidden)]
    pub identity_pool_id: std::option::Option<std::string::String>,
    /// <p>Unique ID for this identity.</p>
    #[doc(hidden)]
    pub identity_id: std::option::Option<std::string::String>,
    /// <p>The name of the dataset from which to unsubcribe.</p>
    #[doc(hidden)]
    pub dataset_name: std::option::Option<std::string::String>,
    /// <p>The unique ID generated for this device by Cognito.</p>
    #[doc(hidden)]
    pub device_id: std::option::Option<std::string::String>,
}
impl UnsubscribeFromDatasetInput {
    /// <p>A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which this identity belongs.</p>
    pub fn identity_pool_id(&self) -> std::option::Option<&str> {
        self.identity_pool_id.as_deref()
    }
    /// <p>Unique ID for this identity.</p>
    pub fn identity_id(&self) -> std::option::Option<&str> {
        self.identity_id.as_deref()
    }
    /// <p>The name of the dataset from which to unsubcribe.</p>
    pub fn dataset_name(&self) -> std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>The unique ID generated for this device by Cognito.</p>
    pub fn device_id(&self) -> std::option::Option<&str> {
        self.device_id.as_deref()
    }
}
impl UnsubscribeFromDatasetInput {
    /// Creates a new builder-style object to manufacture [`UnsubscribeFromDatasetInput`](crate::operation::unsubscribe_from_dataset::UnsubscribeFromDatasetInput).
    pub fn builder(
    ) -> crate::operation::unsubscribe_from_dataset::builders::UnsubscribeFromDatasetInputBuilder
    {
        crate::operation::unsubscribe_from_dataset::builders::UnsubscribeFromDatasetInputBuilder::default()
    }
}

/// A builder for [`UnsubscribeFromDatasetInput`](crate::operation::unsubscribe_from_dataset::UnsubscribeFromDatasetInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UnsubscribeFromDatasetInputBuilder {
    pub(crate) identity_pool_id: std::option::Option<std::string::String>,
    pub(crate) identity_id: std::option::Option<std::string::String>,
    pub(crate) dataset_name: std::option::Option<std::string::String>,
    pub(crate) device_id: std::option::Option<std::string::String>,
}
impl UnsubscribeFromDatasetInputBuilder {
    /// <p>A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which this identity belongs.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_pool_id = Some(input.into());
        self
    }
    /// <p>A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which this identity belongs.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_pool_id = input;
        self
    }
    /// <p>Unique ID for this identity.</p>
    pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_id = Some(input.into());
        self
    }
    /// <p>Unique ID for this identity.</p>
    pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_id = input;
        self
    }
    /// <p>The name of the dataset from which to unsubcribe.</p>
    pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_name = Some(input.into());
        self
    }
    /// <p>The name of the dataset from which to unsubcribe.</p>
    pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p>The unique ID generated for this device by Cognito.</p>
    pub fn device_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_id = Some(input.into());
        self
    }
    /// <p>The unique ID generated for this device by Cognito.</p>
    pub fn set_device_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_id = input;
        self
    }
    /// Consumes the builder and constructs a [`UnsubscribeFromDatasetInput`](crate::operation::unsubscribe_from_dataset::UnsubscribeFromDatasetInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::unsubscribe_from_dataset::UnsubscribeFromDatasetInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::unsubscribe_from_dataset::UnsubscribeFromDatasetInput {
                identity_pool_id: self.identity_pool_id,
                identity_id: self.identity_id,
                dataset_name: self.dataset_name,
                device_id: self.device_id,
            },
        )
    }
}
