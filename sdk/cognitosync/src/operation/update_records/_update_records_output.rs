// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Returned for a successful UpdateRecordsRequest.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateRecordsOutput {
    /// A list of records that have been updated.
    pub records: ::std::option::Option<::std::vec::Vec<crate::types::Record>>,
    _request_id: Option<String>,
}
impl UpdateRecordsOutput {
    /// A list of records that have been updated.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.records.is_none()`.
    pub fn records(&self) -> &[crate::types::Record] {
        self.records.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for UpdateRecordsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateRecordsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRecordsOutput`](crate::operation::update_records::UpdateRecordsOutput).
    pub fn builder() -> crate::operation::update_records::builders::UpdateRecordsOutputBuilder {
        crate::operation::update_records::builders::UpdateRecordsOutputBuilder::default()
    }
}

/// A builder for [`UpdateRecordsOutput`](crate::operation::update_records::UpdateRecordsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateRecordsOutputBuilder {
    pub(crate) records: ::std::option::Option<::std::vec::Vec<crate::types::Record>>,
    _request_id: Option<String>,
}
impl UpdateRecordsOutputBuilder {
    /// Appends an item to `records`.
    ///
    /// To override the contents of this collection use [`set_records`](Self::set_records).
    ///
    /// A list of records that have been updated.
    pub fn records(mut self, input: crate::types::Record) -> Self {
        let mut v = self.records.unwrap_or_default();
        v.push(input);
        self.records = ::std::option::Option::Some(v);
        self
    }
    /// A list of records that have been updated.
    pub fn set_records(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Record>>) -> Self {
        self.records = input;
        self
    }
    /// A list of records that have been updated.
    pub fn get_records(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Record>> {
        &self.records
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRecordsOutput`](crate::operation::update_records::UpdateRecordsOutput).
    pub fn build(self) -> crate::operation::update_records::UpdateRecordsOutput {
        crate::operation::update_records::UpdateRecordsOutput {
            records: self.records,
            _request_id: self._request_id,
        }
    }
}
