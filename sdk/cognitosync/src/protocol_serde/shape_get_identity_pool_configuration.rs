// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_get_identity_pool_configuration_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationOutput,
    crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalErrorException" => crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::InternalErrorException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalErrorExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_error_exception::de_internal_error_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::internal_error_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?
            };
            tmp
        }),
        "InvalidParameterException" => {
            crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::InvalidParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(_response_body, output)
                            .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::invalid_parameter_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?
                };
                tmp
            })
        }
        "NotAuthorizedException" => crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::NotAuthorizedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::NotAuthorizedExceptionBuilder::default();
                output = crate::protocol_serde::shape_not_authorized_exception::de_not_authorized_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::not_authorized_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?
            };
            tmp
        }),
        "ResourceNotFoundException" => {
            crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(_response_body, output)
                            .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::resource_not_found_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?
                };
                tmp
            })
        }
        "TooManyRequestsException" => {
            crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::TooManyRequestsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyRequestsExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_too_many_requests_exception::de_too_many_requests_exception_json_err(_response_body, output)
                            .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::too_many_requests_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?
                };
                tmp
            })
        }
        _ => crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_identity_pool_configuration_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationOutput,
    crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_identity_pool_configuration::builders::GetIdentityPoolConfigurationOutputBuilder::default();
        output = crate::protocol_serde::shape_get_identity_pool_configuration::de_get_identity_pool_configuration(_response_body, output)
            .map_err(crate::operation::get_identity_pool_configuration::GetIdentityPoolConfigurationError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub(crate) fn de_get_identity_pool_configuration(
    value: &[u8],
    mut builder: crate::operation::get_identity_pool_configuration::builders::GetIdentityPoolConfigurationOutputBuilder,
) -> Result<
    crate::operation::get_identity_pool_configuration::builders::GetIdentityPoolConfigurationOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "CognitoStreams" => {
                    builder = builder.set_cognito_streams(crate::protocol_serde::shape_cognito_streams::de_cognito_streams(tokens)?);
                }
                "IdentityPoolId" => {
                    builder = builder.set_identity_pool_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "PushSync" => {
                    builder = builder.set_push_sync(crate::protocol_serde::shape_push_sync::de_push_sync(tokens)?);
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
