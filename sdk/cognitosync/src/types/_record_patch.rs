// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An update operation for a record.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecordPatch {
    /// An operation, either replace or remove.
    pub op: crate::types::Operation,
    /// The key associated with the record patch.
    pub key: ::std::string::String,
    /// The value associated with the record patch.
    pub value: ::std::option::Option<::std::string::String>,
    /// Last known server sync count for this record. Set to 0 if unknown.
    pub sync_count: i64,
    /// The last modified date of the client device.
    pub device_last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RecordPatch {
    /// An operation, either replace or remove.
    pub fn op(&self) -> &crate::types::Operation {
        &self.op
    }
    /// The key associated with the record patch.
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// The value associated with the record patch.
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// Last known server sync count for this record. Set to 0 if unknown.
    pub fn sync_count(&self) -> i64 {
        self.sync_count
    }
    /// The last modified date of the client device.
    pub fn device_last_modified_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.device_last_modified_date.as_ref()
    }
}
impl RecordPatch {
    /// Creates a new builder-style object to manufacture [`RecordPatch`](crate::types::RecordPatch).
    pub fn builder() -> crate::types::builders::RecordPatchBuilder {
        crate::types::builders::RecordPatchBuilder::default()
    }
}

/// A builder for [`RecordPatch`](crate::types::RecordPatch).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecordPatchBuilder {
    pub(crate) op: ::std::option::Option<crate::types::Operation>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) sync_count: ::std::option::Option<i64>,
    pub(crate) device_last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RecordPatchBuilder {
    /// An operation, either replace or remove.
    /// This field is required.
    pub fn op(mut self, input: crate::types::Operation) -> Self {
        self.op = ::std::option::Option::Some(input);
        self
    }
    /// An operation, either replace or remove.
    pub fn set_op(mut self, input: ::std::option::Option<crate::types::Operation>) -> Self {
        self.op = input;
        self
    }
    /// An operation, either replace or remove.
    pub fn get_op(&self) -> &::std::option::Option<crate::types::Operation> {
        &self.op
    }
    /// The key associated with the record patch.
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// The key associated with the record patch.
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// The key associated with the record patch.
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// The value associated with the record patch.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// The value associated with the record patch.
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// The value associated with the record patch.
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Last known server sync count for this record. Set to 0 if unknown.
    /// This field is required.
    pub fn sync_count(mut self, input: i64) -> Self {
        self.sync_count = ::std::option::Option::Some(input);
        self
    }
    /// Last known server sync count for this record. Set to 0 if unknown.
    pub fn set_sync_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.sync_count = input;
        self
    }
    /// Last known server sync count for this record. Set to 0 if unknown.
    pub fn get_sync_count(&self) -> &::std::option::Option<i64> {
        &self.sync_count
    }
    /// The last modified date of the client device.
    pub fn device_last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.device_last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// The last modified date of the client device.
    pub fn set_device_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.device_last_modified_date = input;
        self
    }
    /// The last modified date of the client device.
    pub fn get_device_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.device_last_modified_date
    }
    /// Consumes the builder and constructs a [`RecordPatch`](crate::types::RecordPatch).
    /// This method will fail if any of the following fields are not set:
    /// - [`op`](crate::types::builders::RecordPatchBuilder::op)
    /// - [`key`](crate::types::builders::RecordPatchBuilder::key)
    /// - [`sync_count`](crate::types::builders::RecordPatchBuilder::sync_count)
    pub fn build(self) -> ::std::result::Result<crate::types::RecordPatch, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RecordPatch {
            op: self.op.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "op",
                    "op was not specified but it is required when building RecordPatch",
                )
            })?,
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building RecordPatch",
                )
            })?,
            value: self.value,
            sync_count: self.sync_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sync_count",
                    "sync_count was not specified but it is required when building RecordPatch",
                )
            })?,
            device_last_modified_date: self.device_last_modified_date,
        })
    }
}
