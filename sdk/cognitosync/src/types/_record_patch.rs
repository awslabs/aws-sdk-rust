// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An update operation for a record.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecordPatch {
    /// An operation, either replace or remove.
    #[doc(hidden)]
    pub op: std::option::Option<crate::types::Operation>,
    /// The key associated with the record patch.
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// The value associated with the record patch.
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// Last known server sync count for this record. Set to 0 if unknown.
    #[doc(hidden)]
    pub sync_count: std::option::Option<i64>,
    /// The last modified date of the client device.
    #[doc(hidden)]
    pub device_last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl RecordPatch {
    /// An operation, either replace or remove.
    pub fn op(&self) -> std::option::Option<&crate::types::Operation> {
        self.op.as_ref()
    }
    /// The key associated with the record patch.
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// The value associated with the record patch.
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// Last known server sync count for this record. Set to 0 if unknown.
    pub fn sync_count(&self) -> std::option::Option<i64> {
        self.sync_count
    }
    /// The last modified date of the client device.
    pub fn device_last_modified_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.device_last_modified_date.as_ref()
    }
}
impl RecordPatch {
    /// Creates a new builder-style object to manufacture [`RecordPatch`](crate::types::RecordPatch).
    pub fn builder() -> crate::types::builders::RecordPatchBuilder {
        crate::types::builders::RecordPatchBuilder::default()
    }
}

/// A builder for [`RecordPatch`](crate::types::RecordPatch).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecordPatchBuilder {
    pub(crate) op: std::option::Option<crate::types::Operation>,
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) sync_count: std::option::Option<i64>,
    pub(crate) device_last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl RecordPatchBuilder {
    /// An operation, either replace or remove.
    pub fn op(mut self, input: crate::types::Operation) -> Self {
        self.op = Some(input);
        self
    }
    /// An operation, either replace or remove.
    pub fn set_op(mut self, input: std::option::Option<crate::types::Operation>) -> Self {
        self.op = input;
        self
    }
    /// The key associated with the record patch.
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// The key associated with the record patch.
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// The value associated with the record patch.
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// The value associated with the record patch.
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Last known server sync count for this record. Set to 0 if unknown.
    pub fn sync_count(mut self, input: i64) -> Self {
        self.sync_count = Some(input);
        self
    }
    /// Last known server sync count for this record. Set to 0 if unknown.
    pub fn set_sync_count(mut self, input: std::option::Option<i64>) -> Self {
        self.sync_count = input;
        self
    }
    /// The last modified date of the client device.
    pub fn device_last_modified_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.device_last_modified_date = Some(input);
        self
    }
    /// The last modified date of the client device.
    pub fn set_device_last_modified_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.device_last_modified_date = input;
        self
    }
    /// Consumes the builder and constructs a [`RecordPatch`](crate::types::RecordPatch).
    pub fn build(self) -> crate::types::RecordPatch {
        crate::types::RecordPatch {
            op: self.op,
            key: self.key,
            value: self.value,
            sync_count: self.sync_count,
            device_last_modified_date: self.device_last_modified_date,
        }
    }
}
