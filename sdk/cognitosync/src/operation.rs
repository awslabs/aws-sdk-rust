// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Initiates a bulk publish of all existing datasets for an Identity Pool to the configured stream. Customers are limited to one successful bulk publish per 24 hours. Bulk publish is an asynchronous request, customers can see the status of the request via the GetBulkPublishDetails operation.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BulkPublish {
    _private: (),
}
impl BulkPublish {
    /// Creates a new builder-style object to manufacture [`BulkPublishInput`](crate::input::BulkPublishInput)
    pub fn builder() -> crate::input::bulk_publish_input::Builder {
        crate::input::bulk_publish_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BulkPublish {
    type Output =
        std::result::Result<crate::output::BulkPublishOutput, crate::error::BulkPublishError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_bulk_publish_error(response)
        } else {
            crate::operation_deser::parse_bulk_publish_response(response)
        }
    }
}

/// <p>Deletes the specific dataset. The dataset will be deleted permanently, and the action can't
/// be undone. Datasets that this dataset was merged with will no longer report the merge. Any
/// subsequent operation on this dataset will result in a
/// ResourceNotFoundException.</p>
/// <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDataset {
    _private: (),
}
impl DeleteDataset {
    /// Creates a new builder-style object to manufacture [`DeleteDatasetInput`](crate::input::DeleteDatasetInput)
    pub fn builder() -> crate::input::delete_dataset_input::Builder {
        crate::input::delete_dataset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDataset {
    type Output =
        std::result::Result<crate::output::DeleteDatasetOutput, crate::error::DeleteDatasetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_dataset_error(response)
        } else {
            crate::operation_deser::parse_delete_dataset_response(response)
        }
    }
}

/// <p>Gets meta data about a dataset by identity and dataset name. With Amazon Cognito Sync, each
/// identity has access only to its own data. Thus, the credentials used to make this API call
/// need to have access to the identity data.</p>
/// <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials. You should use Cognito Identity credentials to make this API call.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDataset {
    _private: (),
}
impl DescribeDataset {
    /// Creates a new builder-style object to manufacture [`DescribeDatasetInput`](crate::input::DescribeDatasetInput)
    pub fn builder() -> crate::input::describe_dataset_input::Builder {
        crate::input::describe_dataset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDataset {
    type Output = std::result::Result<
        crate::output::DescribeDatasetOutput,
        crate::error::DescribeDatasetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_dataset_error(response)
        } else {
            crate::operation_deser::parse_describe_dataset_response(response)
        }
    }
}

/// <p>Gets usage details (for example, data storage) about a particular identity pool.</p>
/// <p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
/// <examples>
/// <example>
/// <name>DescribeIdentityPoolUsage</name>
/// <description>The following examples have been edited for readability.</description>
/// <request>
/// POST / HTTP/1.1
/// CONTENT-TYPE: application/json
/// X-AMZN-REQUESTID: 8dc0e749-c8cd-48bd-8520-da6be00d528b
/// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.DescribeIdentityPoolUsage
/// HOST: cognito-sync.us-east-1.amazonaws.com:443
/// X-AMZ-DATE: 20141111T205737Z
/// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;host;x-amz-date;x-amz-target;x-amzn-requestid, Signature=<signature>
/// {
/// "Operation": "com.amazonaws.cognito.sync.model#DescribeIdentityPoolUsage",
/// "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
/// "Input":
/// {
/// "IdentityPoolId": "IDENTITY_POOL_ID"
/// }
/// }
/// </request>
/// <response>
/// 1.1 200 OK
/// x-amzn-requestid: 8dc0e749-c8cd-48bd-8520-da6be00d528b
/// content-type: application/json
/// content-length: 271
/// date: Tue, 11 Nov 2014 20:57:37 GMT
/// {
/// "Output":
/// {
/// "__type": "com.amazonaws.cognito.sync.model#DescribeIdentityPoolUsageResponse",
/// "IdentityPoolUsage":
/// {
/// "DataStorage": 0,
/// "IdentityPoolId": "IDENTITY_POOL_ID",
/// "LastModifiedDate": 1.413231134115E9,
/// "SyncSessionsCount": null
/// }
/// },
/// "Version": "1.0"
/// }
/// </response>
/// </example>
/// </examples>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeIdentityPoolUsage {
    _private: (),
}
impl DescribeIdentityPoolUsage {
    /// Creates a new builder-style object to manufacture [`DescribeIdentityPoolUsageInput`](crate::input::DescribeIdentityPoolUsageInput)
    pub fn builder() -> crate::input::describe_identity_pool_usage_input::Builder {
        crate::input::describe_identity_pool_usage_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeIdentityPoolUsage {
    type Output = std::result::Result<
        crate::output::DescribeIdentityPoolUsageOutput,
        crate::error::DescribeIdentityPoolUsageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_identity_pool_usage_error(response)
        } else {
            crate::operation_deser::parse_describe_identity_pool_usage_response(response)
        }
    }
}

/// <p>Gets usage information for an identity, including number of datasets and data usage.</p>
/// <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
/// <examples>
/// <example>
/// <name>DescribeIdentityUsage</name>
/// <description>The following examples have been edited for readability.</description>
/// <request>
/// POST / HTTP/1.1
/// CONTENT-TYPE: application/json
/// X-AMZN-REQUESTID: 33f9b4e4-a177-4aad-a3bb-6edb7980b283
/// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.DescribeIdentityUsage
/// HOST: cognito-sync.us-east-1.amazonaws.com:443
/// X-AMZ-DATE: 20141111T215129Z
/// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;host;x-amz-date;x-amz-target;x-amzn-requestid, Signature=<signature>
/// {
/// "Operation": "com.amazonaws.cognito.sync.model#DescribeIdentityUsage",
/// "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
/// "Input":
/// {
/// "IdentityPoolId": "IDENTITY_POOL_ID",
/// "IdentityId": "IDENTITY_ID"
/// }
/// }
/// </request>
/// <response>
/// 1.1 200 OK
/// x-amzn-requestid: 33f9b4e4-a177-4aad-a3bb-6edb7980b283
/// content-type: application/json
/// content-length: 318
/// date: Tue, 11 Nov 2014 21:51:29 GMT
/// {
/// "Output":
/// {
/// "__type": "com.amazonaws.cognito.sync.model#DescribeIdentityUsageResponse",
/// "IdentityUsage":
/// {
/// "DataStorage": 16,
/// "DatasetCount": 1,
/// "IdentityId": "IDENTITY_ID",
/// "IdentityPoolId": "IDENTITY_POOL_ID",
/// "LastModifiedDate": 1.412974081336E9
/// }
/// },
/// "Version": "1.0"
/// }
/// </response>
/// </example>
/// </examples>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeIdentityUsage {
    _private: (),
}
impl DescribeIdentityUsage {
    /// Creates a new builder-style object to manufacture [`DescribeIdentityUsageInput`](crate::input::DescribeIdentityUsageInput)
    pub fn builder() -> crate::input::describe_identity_usage_input::Builder {
        crate::input::describe_identity_usage_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeIdentityUsage {
    type Output = std::result::Result<
        crate::output::DescribeIdentityUsageOutput,
        crate::error::DescribeIdentityUsageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_identity_usage_error(response)
        } else {
            crate::operation_deser::parse_describe_identity_usage_response(response)
        }
    }
}

/// <p>Get the status of the last BulkPublish operation for an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetBulkPublishDetails {
    _private: (),
}
impl GetBulkPublishDetails {
    /// Creates a new builder-style object to manufacture [`GetBulkPublishDetailsInput`](crate::input::GetBulkPublishDetailsInput)
    pub fn builder() -> crate::input::get_bulk_publish_details_input::Builder {
        crate::input::get_bulk_publish_details_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetBulkPublishDetails {
    type Output = std::result::Result<
        crate::output::GetBulkPublishDetailsOutput,
        crate::error::GetBulkPublishDetailsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_bulk_publish_details_error(response)
        } else {
            crate::operation_deser::parse_get_bulk_publish_details_response(response)
        }
    }
}

/// <p>Gets the events and the corresponding Lambda functions associated with an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCognitoEvents {
    _private: (),
}
impl GetCognitoEvents {
    /// Creates a new builder-style object to manufacture [`GetCognitoEventsInput`](crate::input::GetCognitoEventsInput)
    pub fn builder() -> crate::input::get_cognito_events_input::Builder {
        crate::input::get_cognito_events_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCognitoEvents {
    type Output = std::result::Result<
        crate::output::GetCognitoEventsOutput,
        crate::error::GetCognitoEventsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_cognito_events_error(response)
        } else {
            crate::operation_deser::parse_get_cognito_events_response(response)
        }
    }
}

/// <p>Gets the configuration settings of an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
/// <examples>
/// <example>
/// <name>GetIdentityPoolConfiguration</name>
/// <description>The following examples have been edited for readability.</description>
/// <request>
/// POST / HTTP/1.1
/// CONTENT-TYPE: application/json
/// X-AMZN-REQUESTID: b1cfdd4b-f620-4fe4-be0f-02024a1d33da
/// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.GetIdentityPoolConfiguration
/// HOST: cognito-sync.us-east-1.amazonaws.com
/// X-AMZ-DATE: 20141004T195722Z
/// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;content-length;host;x-amz-date;x-amz-target, Signature=<signature>
/// {
/// "Operation": "com.amazonaws.cognito.sync.model#GetIdentityPoolConfiguration",
/// "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
/// "Input":
/// {
/// "IdentityPoolId": "ID_POOL_ID"
/// }
/// }
/// </request>
/// <response>
/// 1.1 200 OK
/// x-amzn-requestid: b1cfdd4b-f620-4fe4-be0f-02024a1d33da
/// date: Sat, 04 Oct 2014 19:57:22 GMT
/// content-type: application/json
/// content-length: 332
/// {
/// "Output":
/// {
/// "__type": "com.amazonaws.cognito.sync.model#GetIdentityPoolConfigurationResponse",
/// "IdentityPoolId": "ID_POOL_ID",
/// "PushSync":
/// {
/// "ApplicationArns": ["PLATFORMARN1", "PLATFORMARN2"],
/// "RoleArn": "ROLEARN"
/// }
/// },
/// "Version": "1.0"
/// }
/// </response>
/// </example>
/// </examples>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetIdentityPoolConfiguration {
    _private: (),
}
impl GetIdentityPoolConfiguration {
    /// Creates a new builder-style object to manufacture [`GetIdentityPoolConfigurationInput`](crate::input::GetIdentityPoolConfigurationInput)
    pub fn builder() -> crate::input::get_identity_pool_configuration_input::Builder {
        crate::input::get_identity_pool_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetIdentityPoolConfiguration {
    type Output = std::result::Result<
        crate::output::GetIdentityPoolConfigurationOutput,
        crate::error::GetIdentityPoolConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_identity_pool_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_identity_pool_configuration_response(response)
        }
    }
}

/// <p>Lists datasets for an identity. With Amazon Cognito Sync, each identity has access only to
/// its own data. Thus, the credentials used to make this API call need to have access to the
/// identity data.</p>
/// <p>ListDatasets can be called with temporary user credentials provided by Cognito
/// Identity or with developer credentials. You should use the Cognito Identity credentials to
/// make this API call.</p>
/// <examples>
/// <example>
/// <name>ListDatasets</name>
/// <description>The following examples have been edited for readability.</description>
/// <request>
/// POST / HTTP/1.1
/// CONTENT-TYPE: application/json
/// X-AMZN-REQUESTID: 15225768-209f-4078-aaed-7494ace9f2db
/// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.ListDatasets
/// HOST: cognito-sync.us-east-1.amazonaws.com:443
/// X-AMZ-DATE: 20141111T215640Z
/// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;host;x-amz-date;x-amz-target;x-amzn-requestid, Signature=<signature>
/// {
/// "Operation": "com.amazonaws.cognito.sync.model#ListDatasets",
/// "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
/// "Input":
/// {
/// "IdentityPoolId": "IDENTITY_POOL_ID",
/// "IdentityId": "IDENTITY_ID",
/// "MaxResults": "3"
/// }
/// }
/// </request>
/// <response>
/// 1.1 200 OK
/// x-amzn-requestid: 15225768-209f-4078-aaed-7494ace9f2db, 15225768-209f-4078-aaed-7494ace9f2db
/// content-type: application/json
/// content-length: 355
/// date: Tue, 11 Nov 2014 21:56:40 GMT
/// {
/// "Output":
/// {
/// "__type": "com.amazonaws.cognito.sync.model#ListDatasetsResponse",
/// "Count": 1,
/// "Datasets": [
/// {
/// "CreationDate": 1.412974057151E9,
/// "DataStorage": 16,
/// "DatasetName": "my_list",
/// "IdentityId": "IDENTITY_ID",
/// "LastModifiedBy": "123456789012",
/// "LastModifiedDate": 1.412974057244E9,
/// "NumRecords": 1
/// }],
/// "NextToken": null
/// },
/// "Version": "1.0"
/// }
/// </response>
/// </example>
/// </examples>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDatasets {
    _private: (),
}
impl ListDatasets {
    /// Creates a new builder-style object to manufacture [`ListDatasetsInput`](crate::input::ListDatasetsInput)
    pub fn builder() -> crate::input::list_datasets_input::Builder {
        crate::input::list_datasets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDatasets {
    type Output =
        std::result::Result<crate::output::ListDatasetsOutput, crate::error::ListDatasetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_datasets_error(response)
        } else {
            crate::operation_deser::parse_list_datasets_response(response)
        }
    }
}

/// <p>Gets a list of identity pools registered with Cognito.</p>
/// <p>ListIdentityPoolUsage can only be called with developer credentials. You
/// cannot make this API call with the temporary user credentials provided by Cognito
/// Identity.</p>
/// <examples>
/// <example>
/// <name>ListIdentityPoolUsage</name>
/// <description>The following examples have been edited for readability.</description>
/// <request>
/// POST / HTTP/1.1
/// CONTENT-TYPE: application/json
/// X-AMZN-REQUESTID: 9be7c425-ef05-48c0-aef3-9f0ff2fe17d3
/// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.ListIdentityPoolUsage
/// HOST: cognito-sync.us-east-1.amazonaws.com:443
/// X-AMZ-DATE: 20141111T211414Z
/// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;host;x-amz-date;x-amz-target;x-amzn-requestid, Signature=<signature>
/// {
/// "Operation": "com.amazonaws.cognito.sync.model#ListIdentityPoolUsage",
/// "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
/// "Input":
/// {
/// "MaxResults": "2"
/// }
/// }
/// </request>
/// <response>
/// 1.1 200 OK
/// x-amzn-requestid: 9be7c425-ef05-48c0-aef3-9f0ff2fe17d3
/// content-type: application/json
/// content-length: 519
/// date: Tue, 11 Nov 2014 21:14:14 GMT
/// {
/// "Output":
/// {
/// "__type": "com.amazonaws.cognito.sync.model#ListIdentityPoolUsageResponse",
/// "Count": 2,
/// "IdentityPoolUsages": [
/// {
/// "DataStorage": 0,
/// "IdentityPoolId": "IDENTITY_POOL_ID",
/// "LastModifiedDate": 1.413836234607E9,
/// "SyncSessionsCount": null
/// },
/// {
/// "DataStorage": 0,
/// "IdentityPoolId": "IDENTITY_POOL_ID",
/// "LastModifiedDate": 1.410892165601E9,
/// "SyncSessionsCount": null
/// }],
/// "MaxResults": 2,
/// "NextToken": "dXMtZWFzdC0xOjBjMWJhMDUyLWUwOTgtNDFmYS1hNzZlLWVhYTJjMTI1Zjg2MQ=="
/// },
/// "Version": "1.0"
/// }               
/// </response>
/// </example>
/// </examples>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListIdentityPoolUsage {
    _private: (),
}
impl ListIdentityPoolUsage {
    /// Creates a new builder-style object to manufacture [`ListIdentityPoolUsageInput`](crate::input::ListIdentityPoolUsageInput)
    pub fn builder() -> crate::input::list_identity_pool_usage_input::Builder {
        crate::input::list_identity_pool_usage_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListIdentityPoolUsage {
    type Output = std::result::Result<
        crate::output::ListIdentityPoolUsageOutput,
        crate::error::ListIdentityPoolUsageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_identity_pool_usage_error(response)
        } else {
            crate::operation_deser::parse_list_identity_pool_usage_response(response)
        }
    }
}

/// <p>Gets paginated records, optionally changed after a particular sync count for a dataset and
/// identity. With Amazon Cognito Sync, each identity has access only to its own data. Thus,
/// the credentials used to make this API call need to have access to the identity data.</p>
/// <p>ListRecords can be called with temporary user credentials provided by Cognito
/// Identity or with developer credentials. You should use Cognito Identity credentials to make
/// this API call.</p>
/// <examples>
/// <example>
/// <name>ListRecords</name>
/// <description>The following examples have been edited for readability.</description>
/// <request>
/// POST / HTTP/1.1
/// CONTENT-TYPE: application/json
/// X-AMZN-REQUESTID: b3d2e31e-d6b7-4612-8e84-c9ba288dab5d
/// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.ListRecords
/// HOST: cognito-sync.us-east-1.amazonaws.com:443
/// X-AMZ-DATE: 20141111T183230Z
/// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;host;x-amz-date;x-amz-target;x-amzn-requestid, Signature=<signature>
/// {
/// "Operation": "com.amazonaws.cognito.sync.model#ListRecords",
/// "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
/// "Input":
/// {
/// "IdentityPoolId": "IDENTITY_POOL_ID",
/// "IdentityId": "IDENTITY_ID",
/// "DatasetName": "newDataSet"
/// }
/// }
/// </request>
/// <response>
/// 1.1 200 OK
/// x-amzn-requestid: b3d2e31e-d6b7-4612-8e84-c9ba288dab5d
/// content-type: application/json
/// content-length: 623
/// date: Tue, 11 Nov 2014 18:32:30 GMT
/// {
/// "Output":
/// {
/// "__type": "com.amazonaws.cognito.sync.model#ListRecordsResponse",
/// "Count": 0,
/// "DatasetDeletedAfterRequestedSyncCount": false,
/// "DatasetExists": false,
/// "DatasetSyncCount": 0,
/// "LastModifiedBy": null,
/// "MergedDatasetNames": null,
/// "NextToken": null,
/// "Records": [],
/// "SyncSessionToken": "SYNC_SESSION_TOKEN"
/// },
/// "Version": "1.0"
/// }
/// </response>
/// </example>
/// </examples>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRecords {
    _private: (),
}
impl ListRecords {
    /// Creates a new builder-style object to manufacture [`ListRecordsInput`](crate::input::ListRecordsInput)
    pub fn builder() -> crate::input::list_records_input::Builder {
        crate::input::list_records_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRecords {
    type Output =
        std::result::Result<crate::output::ListRecordsOutput, crate::error::ListRecordsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_records_error(response)
        } else {
            crate::operation_deser::parse_list_records_response(response)
        }
    }
}

/// <p>Registers a device to receive push sync notifications.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
/// <examples>
/// <example>
/// <name>RegisterDevice</name>
/// <description>The following examples have been edited for readability.</description>
/// <request>
/// POST / HTTP/1.1
/// CONTENT-TYPE: application/json
/// X-AMZN-REQUESTID: 368f9200-3eca-449e-93b3-7b9c08d8e185
/// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.RegisterDevice
/// HOST: cognito-sync.us-east-1.amazonaws.com
/// X-AMZ-DATE: 20141004T194643Z
/// X-AMZ-SECURITY-TOKEN: <securitytoken>
/// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;content-length;host;x-amz-date;x-amz-target, Signature=<signature>
/// {
/// "Operation": "com.amazonaws.cognito.sync.model#RegisterDevice",
/// "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
/// "Input":
/// {
/// "IdentityPoolId": "ID_POOL_ID",
/// "IdentityId": "IDENTITY_ID",
/// "Platform": "GCM",
/// "Token": "PUSH_TOKEN"
/// }
/// }
/// </request>
/// <response>
/// 1.1 200 OK
/// x-amzn-requestid: 368f9200-3eca-449e-93b3-7b9c08d8e185
/// date: Sat, 04 Oct 2014 19:46:44 GMT
/// content-type: application/json
/// content-length: 145
/// {
/// "Output":
/// {
/// "__type": "com.amazonaws.cognito.sync.model#RegisterDeviceResponse",
/// "DeviceId": "5cd28fbe-dd83-47ab-9f83-19093a5fb014"
/// },
/// "Version": "1.0"
/// }
/// </response>
/// </example>
/// </examples>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterDevice {
    _private: (),
}
impl RegisterDevice {
    /// Creates a new builder-style object to manufacture [`RegisterDeviceInput`](crate::input::RegisterDeviceInput)
    pub fn builder() -> crate::input::register_device_input::Builder {
        crate::input::register_device_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterDevice {
    type Output =
        std::result::Result<crate::output::RegisterDeviceOutput, crate::error::RegisterDeviceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_device_error(response)
        } else {
            crate::operation_deser::parse_register_device_response(response)
        }
    }
}

/// <p>Sets the AWS Lambda function for a given event type for an identity pool. This request only updates the key/value pair specified. Other key/values pairs are not updated. To remove a key value pair, pass a empty value for the particular key.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetCognitoEvents {
    _private: (),
}
impl SetCognitoEvents {
    /// Creates a new builder-style object to manufacture [`SetCognitoEventsInput`](crate::input::SetCognitoEventsInput)
    pub fn builder() -> crate::input::set_cognito_events_input::Builder {
        crate::input::set_cognito_events_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SetCognitoEvents {
    type Output = std::result::Result<
        crate::output::SetCognitoEventsOutput,
        crate::error::SetCognitoEventsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_set_cognito_events_error(response)
        } else {
            crate::operation_deser::parse_set_cognito_events_response(response)
        }
    }
}

/// <p>Sets the necessary configuration for push sync.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
/// <examples>
/// <example>
/// <name>SetIdentityPoolConfiguration</name>
/// <description>The following examples have been edited for readability.</description>
/// <request>
/// POST / HTTP/1.1
/// CONTENT-TYPE: application/json
/// X-AMZN-REQUESTID: a46db021-f5dd-45d6-af5b-7069fa4a211b
/// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.SetIdentityPoolConfiguration
/// HOST: cognito-sync.us-east-1.amazonaws.com
/// X-AMZ-DATE: 20141004T200006Z
/// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;content-length;host;x-amz-date;x-amz-target, Signature=<signature>
/// {
/// "Operation": "com.amazonaws.cognito.sync.model#SetIdentityPoolConfiguration",
/// "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
/// "Input":
/// {
/// "IdentityPoolId": "ID_POOL_ID",
/// "PushSync":
/// {
/// "ApplicationArns": ["PLATFORMARN1", "PLATFORMARN2"],
/// "RoleArn": "ROLEARN"
/// }
/// }
/// }
/// </request>
/// <response>
/// 1.1 200 OK
/// x-amzn-requestid: a46db021-f5dd-45d6-af5b-7069fa4a211b
/// date: Sat, 04 Oct 2014 20:00:06 GMT
/// content-type: application/json
/// content-length: 332
/// {
/// "Output":
/// {
/// "__type": "com.amazonaws.cognito.sync.model#SetIdentityPoolConfigurationResponse",
/// "IdentityPoolId": "ID_POOL_ID",
/// "PushSync":
/// {
/// "ApplicationArns": ["PLATFORMARN1", "PLATFORMARN2"],
/// "RoleArn": "ROLEARN"
/// }
/// },
/// "Version": "1.0"
/// }
/// </response>
/// </example>
/// </examples>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetIdentityPoolConfiguration {
    _private: (),
}
impl SetIdentityPoolConfiguration {
    /// Creates a new builder-style object to manufacture [`SetIdentityPoolConfigurationInput`](crate::input::SetIdentityPoolConfigurationInput)
    pub fn builder() -> crate::input::set_identity_pool_configuration_input::Builder {
        crate::input::set_identity_pool_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SetIdentityPoolConfiguration {
    type Output = std::result::Result<
        crate::output::SetIdentityPoolConfigurationOutput,
        crate::error::SetIdentityPoolConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_set_identity_pool_configuration_error(response)
        } else {
            crate::operation_deser::parse_set_identity_pool_configuration_response(response)
        }
    }
}

/// <p>Subscribes to receive notifications when a dataset is modified by another device.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
/// <examples>
/// <example>
/// <name>SubscribeToDataset</name>
/// <description>The following examples have been edited for readability.</description>
/// <request>
/// POST / HTTP/1.1
/// CONTENT-TYPE: application/json
/// X-AMZN-REQUESTID: 8b9932b7-201d-4418-a960-0a470e11de9f
/// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.SubscribeToDataset
/// HOST: cognito-sync.us-east-1.amazonaws.com
/// X-AMZ-DATE: 20141004T195350Z
/// X-AMZ-SECURITY-TOKEN: <securitytoken>
/// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;content-length;host;x-amz-date;x-amz-target, Signature=<signature>
/// {
/// "Operation": "com.amazonaws.cognito.sync.model#SubscribeToDataset",
/// "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
/// "Input":
/// {
/// "IdentityPoolId": "ID_POOL_ID",
/// "IdentityId": "IDENTITY_ID",
/// "DatasetName": "Rufus",
/// "DeviceId": "5cd28fbe-dd83-47ab-9f83-19093a5fb014"
/// }
/// }
/// </request>
/// <response>
/// 1.1 200 OK
/// x-amzn-requestid: 8b9932b7-201d-4418-a960-0a470e11de9f
/// date: Sat, 04 Oct 2014 19:53:50 GMT
/// content-type: application/json
/// content-length: 99
/// {
/// "Output":
/// {
/// "__type": "com.amazonaws.cognito.sync.model#SubscribeToDatasetResponse"
/// },
/// "Version": "1.0"
/// }
/// </response>
/// </example>
/// </examples>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SubscribeToDataset {
    _private: (),
}
impl SubscribeToDataset {
    /// Creates a new builder-style object to manufacture [`SubscribeToDatasetInput`](crate::input::SubscribeToDatasetInput)
    pub fn builder() -> crate::input::subscribe_to_dataset_input::Builder {
        crate::input::subscribe_to_dataset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SubscribeToDataset {
    type Output = std::result::Result<
        crate::output::SubscribeToDatasetOutput,
        crate::error::SubscribeToDatasetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_subscribe_to_dataset_error(response)
        } else {
            crate::operation_deser::parse_subscribe_to_dataset_response(response)
        }
    }
}

/// <p>Unsubscribes from receiving notifications when a dataset is modified by another device.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
/// <examples>
/// <example>
/// <name>UnsubscribeFromDataset</name>
/// <description>The following examples have been edited for readability.</description>
/// <request>
/// POST / HTTP/1.1
/// CONTENT-TYPE: application/json
/// X-AMZ-REQUESTSUPERTRACE: true
/// X-AMZN-REQUESTID: 676896d6-14ca-45b1-8029-6d36b10a077e
/// X-AMZ-TARGET: com.amazonaws.cognito.sync.model.AWSCognitoSyncService.UnsubscribeFromDataset
/// HOST: cognito-sync.us-east-1.amazonaws.com
/// X-AMZ-DATE: 20141004T195446Z
/// X-AMZ-SECURITY-TOKEN: <securitytoken>
/// AUTHORIZATION: AWS4-HMAC-SHA256 Credential=<credential>, SignedHeaders=content-type;content-length;host;x-amz-date;x-amz-target, Signature=<signature>
/// {
/// "Operation": "com.amazonaws.cognito.sync.model#UnsubscribeFromDataset",
/// "Service": "com.amazonaws.cognito.sync.model#AWSCognitoSyncService",
/// "Input":
/// {
/// "IdentityPoolId": "ID_POOL_ID",
/// "IdentityId": "IDENTITY_ID",
/// "DatasetName": "Rufus",
/// "DeviceId": "5cd28fbe-dd83-47ab-9f83-19093a5fb014"
/// }
/// }
/// </request>
/// <response>
/// 1.1 200 OK
/// x-amzn-requestid: 676896d6-14ca-45b1-8029-6d36b10a077e
/// date: Sat, 04 Oct 2014 19:54:46 GMT
/// content-type: application/json
/// content-length: 103
/// {
/// "Output":
/// {
/// "__type": "com.amazonaws.cognito.sync.model#UnsubscribeFromDatasetResponse"
/// },
/// "Version": "1.0"
/// }
/// </response>
/// </example>
/// </examples>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnsubscribeFromDataset {
    _private: (),
}
impl UnsubscribeFromDataset {
    /// Creates a new builder-style object to manufacture [`UnsubscribeFromDatasetInput`](crate::input::UnsubscribeFromDatasetInput)
    pub fn builder() -> crate::input::unsubscribe_from_dataset_input::Builder {
        crate::input::unsubscribe_from_dataset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UnsubscribeFromDataset {
    type Output = std::result::Result<
        crate::output::UnsubscribeFromDatasetOutput,
        crate::error::UnsubscribeFromDatasetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_unsubscribe_from_dataset_error(response)
        } else {
            crate::operation_deser::parse_unsubscribe_from_dataset_response(response)
        }
    }
}

/// <p>Posts updates to records and adds and deletes records for a dataset and user.</p>
/// <p>The sync count in the record patch is your last known sync count for that record. The server will reject an UpdateRecords request with a ResourceConflictException if you try to patch a record with a new value but a stale sync count.</p><p>For example, if the sync count on the server is 5 for a key called highScore and you try and submit a new highScore with sync count of 4, the request will be rejected. To obtain the current sync count for a record, call ListRecords. On a successful update of the record, the response returns the new sync count for that record. You should present that sync count the next time you try to update that same record. When the record does not exist, specify the sync count as 0.</p>
/// <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRecords {
    _private: (),
}
impl UpdateRecords {
    /// Creates a new builder-style object to manufacture [`UpdateRecordsInput`](crate::input::UpdateRecordsInput)
    pub fn builder() -> crate::input::update_records_input::Builder {
        crate::input::update_records_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateRecords {
    type Output =
        std::result::Result<crate::output::UpdateRecordsOutput, crate::error::UpdateRecordsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_records_error(response)
        } else {
            crate::operation_deser::parse_update_records_response(response)
        }
    }
}
