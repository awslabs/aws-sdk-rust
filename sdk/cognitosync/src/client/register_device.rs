// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RegisterDevice`](crate::operation::register_device::builders::RegisterDeviceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identity_pool_id(impl Into<String>)`](crate::operation::register_device::builders::RegisterDeviceFluentBuilder::identity_pool_id) / [`set_identity_pool_id(Option<String>)`](crate::operation::register_device::builders::RegisterDeviceFluentBuilder::set_identity_pool_id): <p>A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. Here, the ID of the pool that the identity belongs to.</p>
    ///   - [`identity_id(impl Into<String>)`](crate::operation::register_device::builders::RegisterDeviceFluentBuilder::identity_id) / [`set_identity_id(Option<String>)`](crate::operation::register_device::builders::RegisterDeviceFluentBuilder::set_identity_id): <p>The unique ID for this identity.</p>
    ///   - [`platform(Platform)`](crate::operation::register_device::builders::RegisterDeviceFluentBuilder::platform) / [`set_platform(Option<Platform>)`](crate::operation::register_device::builders::RegisterDeviceFluentBuilder::set_platform): <p>The SNS platform type (e.g. GCM, SDM, APNS, APNS_SANDBOX).</p>
    ///   - [`token(impl Into<String>)`](crate::operation::register_device::builders::RegisterDeviceFluentBuilder::token) / [`set_token(Option<String>)`](crate::operation::register_device::builders::RegisterDeviceFluentBuilder::set_token): <p>The push token.</p>
    /// - On success, responds with [`RegisterDeviceOutput`](crate::operation::register_device::RegisterDeviceOutput) with field(s):
    ///   - [`device_id(Option<String>)`](crate::operation::register_device::RegisterDeviceOutput::device_id): <p>The unique ID generated for this device by Cognito.</p>
    /// - On failure, responds with [`SdkError<RegisterDeviceError>`](crate::operation::register_device::RegisterDeviceError)
    pub fn register_device(
        &self,
    ) -> crate::operation::register_device::builders::RegisterDeviceFluentBuilder {
        crate::operation::register_device::builders::RegisterDeviceFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
