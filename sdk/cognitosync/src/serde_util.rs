// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn already_streamed_exception_correct_errors(
    mut builder: crate::types::error::builders::AlreadyStreamedExceptionBuilder,
) -> crate::types::error::builders::AlreadyStreamedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn duplicate_request_exception_correct_errors(
    mut builder: crate::types::error::builders::DuplicateRequestExceptionBuilder,
) -> crate::types::error::builders::DuplicateRequestExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_error_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalErrorExceptionBuilder,
) -> crate::types::error::builders::InternalErrorExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_parameter_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidParameterExceptionBuilder,
) -> crate::types::error::builders::InvalidParameterExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn not_authorized_exception_correct_errors(
    mut builder: crate::types::error::builders::NotAuthorizedExceptionBuilder,
) -> crate::types::error::builders::NotAuthorizedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceConflictExceptionBuilder,
) -> crate::types::error::builders::ResourceConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn too_many_requests_exception_correct_errors(
    mut builder: crate::types::error::builders::TooManyRequestsExceptionBuilder,
) -> crate::types::error::builders::TooManyRequestsExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_configuration_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidConfigurationExceptionBuilder,
) -> crate::types::error::builders::InvalidConfigurationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn concurrent_modification_exception_correct_errors(
    mut builder: crate::types::error::builders::ConcurrentModificationExceptionBuilder,
) -> crate::types::error::builders::ConcurrentModificationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_lambda_function_output_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidLambdaFunctionOutputExceptionBuilder,
) -> crate::types::error::builders::InvalidLambdaFunctionOutputExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_throttled_exception_correct_errors(
    mut builder: crate::types::error::builders::LambdaThrottledExceptionBuilder,
) -> crate::types::error::builders::LambdaThrottledExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::LimitExceededExceptionBuilder,
) -> crate::types::error::builders::LimitExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}
