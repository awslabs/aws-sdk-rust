// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeFraudsterRegistrationJob`](crate::operation::describe_fraudster_registration_job::builders::DescribeFraudsterRegistrationJobFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_id(impl Into<String>)`](crate::operation::describe_fraudster_registration_job::builders::DescribeFraudsterRegistrationJobFluentBuilder::domain_id) / [`set_domain_id(Option<String>)`](crate::operation::describe_fraudster_registration_job::builders::DescribeFraudsterRegistrationJobFluentBuilder::set_domain_id): <p>The identifier for the domain containing the fraudster registration job.</p>
    ///   - [`job_id(impl Into<String>)`](crate::operation::describe_fraudster_registration_job::builders::DescribeFraudsterRegistrationJobFluentBuilder::job_id) / [`set_job_id(Option<String>)`](crate::operation::describe_fraudster_registration_job::builders::DescribeFraudsterRegistrationJobFluentBuilder::set_job_id): <p>The identifier for the fraudster registration job you are describing.</p>
    /// - On success, responds with [`DescribeFraudsterRegistrationJobOutput`](crate::operation::describe_fraudster_registration_job::DescribeFraudsterRegistrationJobOutput) with field(s):
    ///   - [`job(Option<FraudsterRegistrationJob>)`](crate::operation::describe_fraudster_registration_job::DescribeFraudsterRegistrationJobOutput::job): <p>Contains details about the specified fraudster registration job.</p>
    /// - On failure, responds with [`SdkError<DescribeFraudsterRegistrationJobError>`](crate::operation::describe_fraudster_registration_job::DescribeFraudsterRegistrationJobError)
    pub fn describe_fraudster_registration_job(&self) -> crate::operation::describe_fraudster_registration_job::builders::DescribeFraudsterRegistrationJobFluentBuilder{
        crate::operation::describe_fraudster_registration_job::builders::DescribeFraudsterRegistrationJobFluentBuilder::new(self.handle.clone())
    }
}
