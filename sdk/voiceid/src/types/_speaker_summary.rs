// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a summary of information about a speaker.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SpeakerSummary {
    /// <p>The identifier of the domain that contains the speaker.</p>
    #[doc(hidden)]
    pub domain_id: std::option::Option<std::string::String>,
    /// <p>The client-provided identifier for the speaker.</p>
    #[doc(hidden)]
    pub customer_speaker_id: std::option::Option<std::string::String>,
    /// <p>The service-generated identifier for the speaker. </p>
    #[doc(hidden)]
    pub generated_speaker_id: std::option::Option<std::string::String>,
    /// <p>The current status of the speaker.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SpeakerStatus>,
    /// <p>A timestamp showing the speaker's creation time. </p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A timestamp showing the speaker's last update.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp when the speaker was last accessed for enrollment, re-enrollment or a successful authentication. This timestamp is accurate to one hour.</p>
    #[doc(hidden)]
    pub last_accessed_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl SpeakerSummary {
    /// <p>The identifier of the domain that contains the speaker.</p>
    pub fn domain_id(&self) -> std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The client-provided identifier for the speaker.</p>
    pub fn customer_speaker_id(&self) -> std::option::Option<&str> {
        self.customer_speaker_id.as_deref()
    }
    /// <p>The service-generated identifier for the speaker. </p>
    pub fn generated_speaker_id(&self) -> std::option::Option<&str> {
        self.generated_speaker_id.as_deref()
    }
    /// <p>The current status of the speaker.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::SpeakerStatus> {
        self.status.as_ref()
    }
    /// <p>A timestamp showing the speaker's creation time. </p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>A timestamp showing the speaker's last update.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The timestamp when the speaker was last accessed for enrollment, re-enrollment or a successful authentication. This timestamp is accurate to one hour.</p>
    pub fn last_accessed_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_accessed_at.as_ref()
    }
}
impl std::fmt::Debug for SpeakerSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SpeakerSummary");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("customer_speaker_id", &"*** Sensitive Data Redacted ***");
        formatter.field("generated_speaker_id", &self.generated_speaker_id);
        formatter.field("status", &self.status);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("last_accessed_at", &self.last_accessed_at);
        formatter.finish()
    }
}
impl SpeakerSummary {
    /// Creates a new builder-style object to manufacture [`SpeakerSummary`](crate::types::SpeakerSummary).
    pub fn builder() -> crate::types::builders::SpeakerSummaryBuilder {
        crate::types::builders::SpeakerSummaryBuilder::default()
    }
}

/// A builder for [`SpeakerSummary`](crate::types::SpeakerSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct SpeakerSummaryBuilder {
    pub(crate) domain_id: std::option::Option<std::string::String>,
    pub(crate) customer_speaker_id: std::option::Option<std::string::String>,
    pub(crate) generated_speaker_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::SpeakerStatus>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_accessed_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl SpeakerSummaryBuilder {
    /// <p>The identifier of the domain that contains the speaker.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_id = Some(input.into());
        self
    }
    /// <p>The identifier of the domain that contains the speaker.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The client-provided identifier for the speaker.</p>
    pub fn customer_speaker_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.customer_speaker_id = Some(input.into());
        self
    }
    /// <p>The client-provided identifier for the speaker.</p>
    pub fn set_customer_speaker_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.customer_speaker_id = input;
        self
    }
    /// <p>The service-generated identifier for the speaker. </p>
    pub fn generated_speaker_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.generated_speaker_id = Some(input.into());
        self
    }
    /// <p>The service-generated identifier for the speaker. </p>
    pub fn set_generated_speaker_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.generated_speaker_id = input;
        self
    }
    /// <p>The current status of the speaker.</p>
    pub fn status(mut self, input: crate::types::SpeakerStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the speaker.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::SpeakerStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>A timestamp showing the speaker's creation time. </p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>A timestamp showing the speaker's creation time. </p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>A timestamp showing the speaker's last update.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>A timestamp showing the speaker's last update.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the speaker was last accessed for enrollment, re-enrollment or a successful authentication. This timestamp is accurate to one hour.</p>
    pub fn last_accessed_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_accessed_at = Some(input);
        self
    }
    /// <p>The timestamp when the speaker was last accessed for enrollment, re-enrollment or a successful authentication. This timestamp is accurate to one hour.</p>
    pub fn set_last_accessed_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_accessed_at = input;
        self
    }
    /// Consumes the builder and constructs a [`SpeakerSummary`](crate::types::SpeakerSummary).
    pub fn build(self) -> crate::types::SpeakerSummary {
        crate::types::SpeakerSummary {
            domain_id: self.domain_id,
            customer_speaker_id: self.customer_speaker_id,
            generated_speaker_id: self.generated_speaker_id,
            status: self.status,
            created_at: self.created_at,
            updated_at: self.updated_at,
            last_accessed_at: self.last_accessed_at,
        }
    }
}
impl std::fmt::Debug for SpeakerSummaryBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SpeakerSummaryBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("customer_speaker_id", &"*** Sensitive Data Redacted ***");
        formatter.field("generated_speaker_id", &self.generated_speaker_id);
        formatter.field("status", &self.status);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("last_accessed_at", &self.last_accessed_at);
        formatter.finish()
    }
}
