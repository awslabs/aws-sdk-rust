// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The authentication result produced by Voice ID, processed against the current session state and streamed audio of the speaker.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AuthenticationResult {
    /// <p>The unique identifier for this authentication result. Because there can be multiple authentications for a given session, this field helps to identify if the returned result is from a previous streaming activity or a new result. Note that in absence of any new streaming activity, <code>AcceptanceThreshold</code> changes, or <code>SpeakerId</code> changes, Voice ID always returns cached Authentication Result for this API.</p>
    #[doc(hidden)]
    pub authentication_result_id: std::option::Option<std::string::String>,
    /// <p>A timestamp indicating when audio aggregation started for this authentication result.</p>
    #[doc(hidden)]
    pub audio_aggregation_started_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A timestamp indicating when audio aggregation ended for this authentication result.</p>
    #[doc(hidden)]
    pub audio_aggregation_ended_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The client-provided identifier for the speaker whose authentication result is produced. Only present if a <code>SpeakerId</code> is provided for the session.</p>
    #[doc(hidden)]
    pub customer_speaker_id: std::option::Option<std::string::String>,
    /// <p>The service-generated identifier for the speaker whose authentication result is produced.</p>
    #[doc(hidden)]
    pub generated_speaker_id: std::option::Option<std::string::String>,
    /// <p>The authentication decision produced by Voice ID, processed against the current session state and streamed audio of the speaker.</p>
    #[doc(hidden)]
    pub decision: std::option::Option<crate::types::AuthenticationDecision>,
    /// <p>The authentication score for the speaker whose authentication result is produced. This value is only present if the authentication decision is either <code>ACCEPT</code> or <code>REJECT</code>.</p>
    #[doc(hidden)]
    pub score: std::option::Option<i32>,
    /// <p>The <code>AuthenticationConfiguration</code> used to generate this authentication result.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<crate::types::AuthenticationConfiguration>,
}
impl AuthenticationResult {
    /// <p>The unique identifier for this authentication result. Because there can be multiple authentications for a given session, this field helps to identify if the returned result is from a previous streaming activity or a new result. Note that in absence of any new streaming activity, <code>AcceptanceThreshold</code> changes, or <code>SpeakerId</code> changes, Voice ID always returns cached Authentication Result for this API.</p>
    pub fn authentication_result_id(&self) -> std::option::Option<&str> {
        self.authentication_result_id.as_deref()
    }
    /// <p>A timestamp indicating when audio aggregation started for this authentication result.</p>
    pub fn audio_aggregation_started_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.audio_aggregation_started_at.as_ref()
    }
    /// <p>A timestamp indicating when audio aggregation ended for this authentication result.</p>
    pub fn audio_aggregation_ended_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.audio_aggregation_ended_at.as_ref()
    }
    /// <p>The client-provided identifier for the speaker whose authentication result is produced. Only present if a <code>SpeakerId</code> is provided for the session.</p>
    pub fn customer_speaker_id(&self) -> std::option::Option<&str> {
        self.customer_speaker_id.as_deref()
    }
    /// <p>The service-generated identifier for the speaker whose authentication result is produced.</p>
    pub fn generated_speaker_id(&self) -> std::option::Option<&str> {
        self.generated_speaker_id.as_deref()
    }
    /// <p>The authentication decision produced by Voice ID, processed against the current session state and streamed audio of the speaker.</p>
    pub fn decision(&self) -> std::option::Option<&crate::types::AuthenticationDecision> {
        self.decision.as_ref()
    }
    /// <p>The authentication score for the speaker whose authentication result is produced. This value is only present if the authentication decision is either <code>ACCEPT</code> or <code>REJECT</code>.</p>
    pub fn score(&self) -> std::option::Option<i32> {
        self.score
    }
    /// <p>The <code>AuthenticationConfiguration</code> used to generate this authentication result.</p>
    pub fn configuration(&self) -> std::option::Option<&crate::types::AuthenticationConfiguration> {
        self.configuration.as_ref()
    }
}
impl std::fmt::Debug for AuthenticationResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AuthenticationResult");
        formatter.field("authentication_result_id", &self.authentication_result_id);
        formatter.field(
            "audio_aggregation_started_at",
            &self.audio_aggregation_started_at,
        );
        formatter.field(
            "audio_aggregation_ended_at",
            &self.audio_aggregation_ended_at,
        );
        formatter.field("customer_speaker_id", &"*** Sensitive Data Redacted ***");
        formatter.field("generated_speaker_id", &self.generated_speaker_id);
        formatter.field("decision", &self.decision);
        formatter.field("score", &self.score);
        formatter.field("configuration", &self.configuration);
        formatter.finish()
    }
}
impl AuthenticationResult {
    /// Creates a new builder-style object to manufacture [`AuthenticationResult`](crate::types::AuthenticationResult).
    pub fn builder() -> crate::types::builders::AuthenticationResultBuilder {
        crate::types::builders::AuthenticationResultBuilder::default()
    }
}

/// A builder for [`AuthenticationResult`](crate::types::AuthenticationResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct AuthenticationResultBuilder {
    pub(crate) authentication_result_id: std::option::Option<std::string::String>,
    pub(crate) audio_aggregation_started_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) audio_aggregation_ended_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) customer_speaker_id: std::option::Option<std::string::String>,
    pub(crate) generated_speaker_id: std::option::Option<std::string::String>,
    pub(crate) decision: std::option::Option<crate::types::AuthenticationDecision>,
    pub(crate) score: std::option::Option<i32>,
    pub(crate) configuration: std::option::Option<crate::types::AuthenticationConfiguration>,
}
impl AuthenticationResultBuilder {
    /// <p>The unique identifier for this authentication result. Because there can be multiple authentications for a given session, this field helps to identify if the returned result is from a previous streaming activity or a new result. Note that in absence of any new streaming activity, <code>AcceptanceThreshold</code> changes, or <code>SpeakerId</code> changes, Voice ID always returns cached Authentication Result for this API.</p>
    pub fn authentication_result_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.authentication_result_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for this authentication result. Because there can be multiple authentications for a given session, this field helps to identify if the returned result is from a previous streaming activity or a new result. Note that in absence of any new streaming activity, <code>AcceptanceThreshold</code> changes, or <code>SpeakerId</code> changes, Voice ID always returns cached Authentication Result for this API.</p>
    pub fn set_authentication_result_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.authentication_result_id = input;
        self
    }
    /// <p>A timestamp indicating when audio aggregation started for this authentication result.</p>
    pub fn audio_aggregation_started_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.audio_aggregation_started_at = Some(input);
        self
    }
    /// <p>A timestamp indicating when audio aggregation started for this authentication result.</p>
    pub fn set_audio_aggregation_started_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.audio_aggregation_started_at = input;
        self
    }
    /// <p>A timestamp indicating when audio aggregation ended for this authentication result.</p>
    pub fn audio_aggregation_ended_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.audio_aggregation_ended_at = Some(input);
        self
    }
    /// <p>A timestamp indicating when audio aggregation ended for this authentication result.</p>
    pub fn set_audio_aggregation_ended_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.audio_aggregation_ended_at = input;
        self
    }
    /// <p>The client-provided identifier for the speaker whose authentication result is produced. Only present if a <code>SpeakerId</code> is provided for the session.</p>
    pub fn customer_speaker_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.customer_speaker_id = Some(input.into());
        self
    }
    /// <p>The client-provided identifier for the speaker whose authentication result is produced. Only present if a <code>SpeakerId</code> is provided for the session.</p>
    pub fn set_customer_speaker_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.customer_speaker_id = input;
        self
    }
    /// <p>The service-generated identifier for the speaker whose authentication result is produced.</p>
    pub fn generated_speaker_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.generated_speaker_id = Some(input.into());
        self
    }
    /// <p>The service-generated identifier for the speaker whose authentication result is produced.</p>
    pub fn set_generated_speaker_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.generated_speaker_id = input;
        self
    }
    /// <p>The authentication decision produced by Voice ID, processed against the current session state and streamed audio of the speaker.</p>
    pub fn decision(mut self, input: crate::types::AuthenticationDecision) -> Self {
        self.decision = Some(input);
        self
    }
    /// <p>The authentication decision produced by Voice ID, processed against the current session state and streamed audio of the speaker.</p>
    pub fn set_decision(
        mut self,
        input: std::option::Option<crate::types::AuthenticationDecision>,
    ) -> Self {
        self.decision = input;
        self
    }
    /// <p>The authentication score for the speaker whose authentication result is produced. This value is only present if the authentication decision is either <code>ACCEPT</code> or <code>REJECT</code>.</p>
    pub fn score(mut self, input: i32) -> Self {
        self.score = Some(input);
        self
    }
    /// <p>The authentication score for the speaker whose authentication result is produced. This value is only present if the authentication decision is either <code>ACCEPT</code> or <code>REJECT</code>.</p>
    pub fn set_score(mut self, input: std::option::Option<i32>) -> Self {
        self.score = input;
        self
    }
    /// <p>The <code>AuthenticationConfiguration</code> used to generate this authentication result.</p>
    pub fn configuration(mut self, input: crate::types::AuthenticationConfiguration) -> Self {
        self.configuration = Some(input);
        self
    }
    /// <p>The <code>AuthenticationConfiguration</code> used to generate this authentication result.</p>
    pub fn set_configuration(
        mut self,
        input: std::option::Option<crate::types::AuthenticationConfiguration>,
    ) -> Self {
        self.configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`AuthenticationResult`](crate::types::AuthenticationResult).
    pub fn build(self) -> crate::types::AuthenticationResult {
        crate::types::AuthenticationResult {
            authentication_result_id: self.authentication_result_id,
            audio_aggregation_started_at: self.audio_aggregation_started_at,
            audio_aggregation_ended_at: self.audio_aggregation_ended_at,
            customer_speaker_id: self.customer_speaker_id,
            generated_speaker_id: self.generated_speaker_id,
            decision: self.decision,
            score: self.score,
            configuration: self.configuration,
        }
    }
}
impl std::fmt::Debug for AuthenticationResultBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AuthenticationResultBuilder");
        formatter.field("authentication_result_id", &self.authentication_result_id);
        formatter.field(
            "audio_aggregation_started_at",
            &self.audio_aggregation_started_at,
        );
        formatter.field(
            "audio_aggregation_ended_at",
            &self.audio_aggregation_ended_at,
        );
        formatter.field("customer_speaker_id", &"*** Sensitive Data Redacted ***");
        formatter.field("generated_speaker_id", &self.generated_speaker_id);
        formatter.field("decision", &self.decision);
        formatter.field("score", &self.score);
        formatter.field("configuration", &self.configuration);
        formatter.finish()
    }
}
