// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations defining enrollment behavior for the batch job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnrollmentConfig {
    /// <p> The action to take when the specified speaker is already enrolled in the specified domain. The default value is <code>SKIP</code>, which skips the enrollment for the existing speaker. Setting the value to <code>OVERWRITE</code> replaces the existing voice prints and enrollment audio stored for that speaker with new data generated from the latest audio.</p>
    #[doc(hidden)]
    pub existing_enrollment_action: std::option::Option<crate::types::ExistingEnrollmentAction>,
    /// <p>The fraud detection configuration to use for the speaker enrollment job.</p>
    #[doc(hidden)]
    pub fraud_detection_config:
        std::option::Option<crate::types::EnrollmentJobFraudDetectionConfig>,
}
impl EnrollmentConfig {
    /// <p> The action to take when the specified speaker is already enrolled in the specified domain. The default value is <code>SKIP</code>, which skips the enrollment for the existing speaker. Setting the value to <code>OVERWRITE</code> replaces the existing voice prints and enrollment audio stored for that speaker with new data generated from the latest audio.</p>
    pub fn existing_enrollment_action(
        &self,
    ) -> std::option::Option<&crate::types::ExistingEnrollmentAction> {
        self.existing_enrollment_action.as_ref()
    }
    /// <p>The fraud detection configuration to use for the speaker enrollment job.</p>
    pub fn fraud_detection_config(
        &self,
    ) -> std::option::Option<&crate::types::EnrollmentJobFraudDetectionConfig> {
        self.fraud_detection_config.as_ref()
    }
}
impl EnrollmentConfig {
    /// Creates a new builder-style object to manufacture [`EnrollmentConfig`](crate::types::EnrollmentConfig).
    pub fn builder() -> crate::types::builders::EnrollmentConfigBuilder {
        crate::types::builders::EnrollmentConfigBuilder::default()
    }
}

/// A builder for [`EnrollmentConfig`](crate::types::EnrollmentConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnrollmentConfigBuilder {
    pub(crate) existing_enrollment_action:
        std::option::Option<crate::types::ExistingEnrollmentAction>,
    pub(crate) fraud_detection_config:
        std::option::Option<crate::types::EnrollmentJobFraudDetectionConfig>,
}
impl EnrollmentConfigBuilder {
    /// <p> The action to take when the specified speaker is already enrolled in the specified domain. The default value is <code>SKIP</code>, which skips the enrollment for the existing speaker. Setting the value to <code>OVERWRITE</code> replaces the existing voice prints and enrollment audio stored for that speaker with new data generated from the latest audio.</p>
    pub fn existing_enrollment_action(
        mut self,
        input: crate::types::ExistingEnrollmentAction,
    ) -> Self {
        self.existing_enrollment_action = Some(input);
        self
    }
    /// <p> The action to take when the specified speaker is already enrolled in the specified domain. The default value is <code>SKIP</code>, which skips the enrollment for the existing speaker. Setting the value to <code>OVERWRITE</code> replaces the existing voice prints and enrollment audio stored for that speaker with new data generated from the latest audio.</p>
    pub fn set_existing_enrollment_action(
        mut self,
        input: std::option::Option<crate::types::ExistingEnrollmentAction>,
    ) -> Self {
        self.existing_enrollment_action = input;
        self
    }
    /// <p>The fraud detection configuration to use for the speaker enrollment job.</p>
    pub fn fraud_detection_config(
        mut self,
        input: crate::types::EnrollmentJobFraudDetectionConfig,
    ) -> Self {
        self.fraud_detection_config = Some(input);
        self
    }
    /// <p>The fraud detection configuration to use for the speaker enrollment job.</p>
    pub fn set_fraud_detection_config(
        mut self,
        input: std::option::Option<crate::types::EnrollmentJobFraudDetectionConfig>,
    ) -> Self {
        self.fraud_detection_config = input;
        self
    }
    /// Consumes the builder and constructs a [`EnrollmentConfig`](crate::types::EnrollmentConfig).
    pub fn build(self) -> crate::types::EnrollmentConfig {
        crate::types::EnrollmentConfig {
            existing_enrollment_action: self.existing_enrollment_action,
            fraud_detection_config: self.fraud_detection_config,
        }
    }
}
