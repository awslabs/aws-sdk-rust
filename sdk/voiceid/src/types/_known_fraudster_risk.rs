// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details produced as a result of performing known fraudster risk analysis on a speaker.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KnownFraudsterRisk {
    /// <p>The score indicating the likelihood the speaker is a known fraudster.</p>
    #[doc(hidden)]
    pub risk_score: std::option::Option<i32>,
    /// <p>The identifier of the fraudster that is the closest match to the speaker. If there are no fraudsters registered in a given domain, or if there are no fraudsters with a non-zero RiskScore, this value is <code>null</code>.</p>
    #[doc(hidden)]
    pub generated_fraudster_id: std::option::Option<std::string::String>,
}
impl KnownFraudsterRisk {
    /// <p>The score indicating the likelihood the speaker is a known fraudster.</p>
    pub fn risk_score(&self) -> std::option::Option<i32> {
        self.risk_score
    }
    /// <p>The identifier of the fraudster that is the closest match to the speaker. If there are no fraudsters registered in a given domain, or if there are no fraudsters with a non-zero RiskScore, this value is <code>null</code>.</p>
    pub fn generated_fraudster_id(&self) -> std::option::Option<&str> {
        self.generated_fraudster_id.as_deref()
    }
}
impl KnownFraudsterRisk {
    /// Creates a new builder-style object to manufacture [`KnownFraudsterRisk`](crate::types::KnownFraudsterRisk).
    pub fn builder() -> crate::types::builders::KnownFraudsterRiskBuilder {
        crate::types::builders::KnownFraudsterRiskBuilder::default()
    }
}

/// A builder for [`KnownFraudsterRisk`](crate::types::KnownFraudsterRisk).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KnownFraudsterRiskBuilder {
    pub(crate) risk_score: std::option::Option<i32>,
    pub(crate) generated_fraudster_id: std::option::Option<std::string::String>,
}
impl KnownFraudsterRiskBuilder {
    /// <p>The score indicating the likelihood the speaker is a known fraudster.</p>
    pub fn risk_score(mut self, input: i32) -> Self {
        self.risk_score = Some(input);
        self
    }
    /// <p>The score indicating the likelihood the speaker is a known fraudster.</p>
    pub fn set_risk_score(mut self, input: std::option::Option<i32>) -> Self {
        self.risk_score = input;
        self
    }
    /// <p>The identifier of the fraudster that is the closest match to the speaker. If there are no fraudsters registered in a given domain, or if there are no fraudsters with a non-zero RiskScore, this value is <code>null</code>.</p>
    pub fn generated_fraudster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.generated_fraudster_id = Some(input.into());
        self
    }
    /// <p>The identifier of the fraudster that is the closest match to the speaker. If there are no fraudsters registered in a given domain, or if there are no fraudsters with a non-zero RiskScore, this value is <code>null</code>.</p>
    pub fn set_generated_fraudster_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.generated_fraudster_id = input;
        self
    }
    /// Consumes the builder and constructs a [`KnownFraudsterRisk`](crate::types::KnownFraudsterRisk).
    pub fn build(self) -> crate::types::KnownFraudsterRisk {
        crate::types::KnownFraudsterRisk {
            risk_score: self.risk_score,
            generated_fraudster_id: self.generated_fraudster_id,
        }
    }
}
