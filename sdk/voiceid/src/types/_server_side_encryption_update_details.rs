// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the most recent server-side encryption configuration update. When the server-side encryption configuration is changed, dependency on the old KMS key is removed through an asynchronous process. When this update is complete, the domainâ€™s data can only be accessed using the new KMS key.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServerSideEncryptionUpdateDetails {
    /// <p>The previous KMS key ID the domain was encrypted with, before ServerSideEncryptionConfiguration was updated to a new KMS key ID.</p>
    #[doc(hidden)]
    pub old_kms_key_id: std::option::Option<std::string::String>,
    /// <p>Status of the server-side encryption update. During an update, if there is an issue with the domain's current or old KMS key ID, such as an inaccessible or disabled key, then the status is FAILED. In order to resolve this, the key needs to be made accessible, and then an UpdateDomain call with the existing server-side encryption configuration will re-attempt this update process.</p>
    #[doc(hidden)]
    pub update_status: std::option::Option<crate::types::ServerSideEncryptionUpdateStatus>,
    /// <p>Message explaining the current UpdateStatus. When the UpdateStatus is FAILED, this message explains the cause of the failure.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
}
impl ServerSideEncryptionUpdateDetails {
    /// <p>The previous KMS key ID the domain was encrypted with, before ServerSideEncryptionConfiguration was updated to a new KMS key ID.</p>
    pub fn old_kms_key_id(&self) -> std::option::Option<&str> {
        self.old_kms_key_id.as_deref()
    }
    /// <p>Status of the server-side encryption update. During an update, if there is an issue with the domain's current or old KMS key ID, such as an inaccessible or disabled key, then the status is FAILED. In order to resolve this, the key needs to be made accessible, and then an UpdateDomain call with the existing server-side encryption configuration will re-attempt this update process.</p>
    pub fn update_status(
        &self,
    ) -> std::option::Option<&crate::types::ServerSideEncryptionUpdateStatus> {
        self.update_status.as_ref()
    }
    /// <p>Message explaining the current UpdateStatus. When the UpdateStatus is FAILED, this message explains the cause of the failure.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ServerSideEncryptionUpdateDetails {
    /// Creates a new builder-style object to manufacture [`ServerSideEncryptionUpdateDetails`](crate::types::ServerSideEncryptionUpdateDetails).
    pub fn builder() -> crate::types::builders::ServerSideEncryptionUpdateDetailsBuilder {
        crate::types::builders::ServerSideEncryptionUpdateDetailsBuilder::default()
    }
}

/// A builder for [`ServerSideEncryptionUpdateDetails`](crate::types::ServerSideEncryptionUpdateDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServerSideEncryptionUpdateDetailsBuilder {
    pub(crate) old_kms_key_id: std::option::Option<std::string::String>,
    pub(crate) update_status: std::option::Option<crate::types::ServerSideEncryptionUpdateStatus>,
    pub(crate) message: std::option::Option<std::string::String>,
}
impl ServerSideEncryptionUpdateDetailsBuilder {
    /// <p>The previous KMS key ID the domain was encrypted with, before ServerSideEncryptionConfiguration was updated to a new KMS key ID.</p>
    pub fn old_kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.old_kms_key_id = Some(input.into());
        self
    }
    /// <p>The previous KMS key ID the domain was encrypted with, before ServerSideEncryptionConfiguration was updated to a new KMS key ID.</p>
    pub fn set_old_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.old_kms_key_id = input;
        self
    }
    /// <p>Status of the server-side encryption update. During an update, if there is an issue with the domain's current or old KMS key ID, such as an inaccessible or disabled key, then the status is FAILED. In order to resolve this, the key needs to be made accessible, and then an UpdateDomain call with the existing server-side encryption configuration will re-attempt this update process.</p>
    pub fn update_status(mut self, input: crate::types::ServerSideEncryptionUpdateStatus) -> Self {
        self.update_status = Some(input);
        self
    }
    /// <p>Status of the server-side encryption update. During an update, if there is an issue with the domain's current or old KMS key ID, such as an inaccessible or disabled key, then the status is FAILED. In order to resolve this, the key needs to be made accessible, and then an UpdateDomain call with the existing server-side encryption configuration will re-attempt this update process.</p>
    pub fn set_update_status(
        mut self,
        input: std::option::Option<crate::types::ServerSideEncryptionUpdateStatus>,
    ) -> Self {
        self.update_status = input;
        self
    }
    /// <p>Message explaining the current UpdateStatus. When the UpdateStatus is FAILED, this message explains the cause of the failure.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>Message explaining the current UpdateStatus. When the UpdateStatus is FAILED, this message explains the cause of the failure.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Consumes the builder and constructs a [`ServerSideEncryptionUpdateDetails`](crate::types::ServerSideEncryptionUpdateDetails).
    pub fn build(self) -> crate::types::ServerSideEncryptionUpdateDetails {
        crate::types::ServerSideEncryptionUpdateDetails {
            old_kms_key_id: self.old_kms_key_id,
            update_status: self.update_status,
            message: self.message,
        }
    }
}
