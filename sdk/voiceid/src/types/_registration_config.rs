// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration defining the action to take when a duplicate fraudster is detected, and the similarity threshold to use for detecting a duplicate fraudster during a batch fraudster registration job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegistrationConfig {
    /// <p>The action to take when a fraudster is identified as a duplicate. The default action is <code>SKIP</code>, which skips registering the duplicate fraudster. Setting the value to <code>REGISTER_AS_NEW</code> always registers a new fraudster into the specified domain.</p>
    #[doc(hidden)]
    pub duplicate_registration_action:
        std::option::Option<crate::types::DuplicateRegistrationAction>,
    /// <p>The minimum similarity score between the new and old fraudsters in order to consider the new fraudster a duplicate.</p>
    #[doc(hidden)]
    pub fraudster_similarity_threshold: std::option::Option<i32>,
}
impl RegistrationConfig {
    /// <p>The action to take when a fraudster is identified as a duplicate. The default action is <code>SKIP</code>, which skips registering the duplicate fraudster. Setting the value to <code>REGISTER_AS_NEW</code> always registers a new fraudster into the specified domain.</p>
    pub fn duplicate_registration_action(
        &self,
    ) -> std::option::Option<&crate::types::DuplicateRegistrationAction> {
        self.duplicate_registration_action.as_ref()
    }
    /// <p>The minimum similarity score between the new and old fraudsters in order to consider the new fraudster a duplicate.</p>
    pub fn fraudster_similarity_threshold(&self) -> std::option::Option<i32> {
        self.fraudster_similarity_threshold
    }
}
impl RegistrationConfig {
    /// Creates a new builder-style object to manufacture [`RegistrationConfig`](crate::types::RegistrationConfig).
    pub fn builder() -> crate::types::builders::RegistrationConfigBuilder {
        crate::types::builders::RegistrationConfigBuilder::default()
    }
}

/// A builder for [`RegistrationConfig`](crate::types::RegistrationConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegistrationConfigBuilder {
    pub(crate) duplicate_registration_action:
        std::option::Option<crate::types::DuplicateRegistrationAction>,
    pub(crate) fraudster_similarity_threshold: std::option::Option<i32>,
}
impl RegistrationConfigBuilder {
    /// <p>The action to take when a fraudster is identified as a duplicate. The default action is <code>SKIP</code>, which skips registering the duplicate fraudster. Setting the value to <code>REGISTER_AS_NEW</code> always registers a new fraudster into the specified domain.</p>
    pub fn duplicate_registration_action(
        mut self,
        input: crate::types::DuplicateRegistrationAction,
    ) -> Self {
        self.duplicate_registration_action = Some(input);
        self
    }
    /// <p>The action to take when a fraudster is identified as a duplicate. The default action is <code>SKIP</code>, which skips registering the duplicate fraudster. Setting the value to <code>REGISTER_AS_NEW</code> always registers a new fraudster into the specified domain.</p>
    pub fn set_duplicate_registration_action(
        mut self,
        input: std::option::Option<crate::types::DuplicateRegistrationAction>,
    ) -> Self {
        self.duplicate_registration_action = input;
        self
    }
    /// <p>The minimum similarity score between the new and old fraudsters in order to consider the new fraudster a duplicate.</p>
    pub fn fraudster_similarity_threshold(mut self, input: i32) -> Self {
        self.fraudster_similarity_threshold = Some(input);
        self
    }
    /// <p>The minimum similarity score between the new and old fraudsters in order to consider the new fraudster a duplicate.</p>
    pub fn set_fraudster_similarity_threshold(mut self, input: std::option::Option<i32>) -> Self {
        self.fraudster_similarity_threshold = input;
        self
    }
    /// Consumes the builder and constructs a [`RegistrationConfig`](crate::types::RegistrationConfig).
    pub fn build(self) -> crate::types::RegistrationConfig {
        crate::types::RegistrationConfig {
            duplicate_registration_action: self.duplicate_registration_action,
            fraudster_similarity_threshold: self.fraudster_similarity_threshold,
        }
    }
}
