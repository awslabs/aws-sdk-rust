// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The registration configuration to be used during the batch fraudster registration job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegistrationConfig {
    /// <p>The action to take when a fraudster is identified as a duplicate. The default action is <code>SKIP</code>, which skips registering the duplicate fraudster. Setting the value to <code>REGISTER_AS_NEW</code> always registers a new fraudster into the specified domain.</p>
    pub duplicate_registration_action: ::std::option::Option<crate::types::DuplicateRegistrationAction>,
    /// <p>The minimum similarity score between the new and old fraudsters in order to consider the new fraudster a duplicate.</p>
    pub fraudster_similarity_threshold: ::std::option::Option<i32>,
    /// <p>The identifiers of watchlists that a fraudster is registered to. If a watchlist isn't provided, the fraudsters are registered to the default watchlist. </p>
    pub watchlist_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RegistrationConfig {
    /// <p>The action to take when a fraudster is identified as a duplicate. The default action is <code>SKIP</code>, which skips registering the duplicate fraudster. Setting the value to <code>REGISTER_AS_NEW</code> always registers a new fraudster into the specified domain.</p>
    pub fn duplicate_registration_action(&self) -> ::std::option::Option<&crate::types::DuplicateRegistrationAction> {
        self.duplicate_registration_action.as_ref()
    }
    /// <p>The minimum similarity score between the new and old fraudsters in order to consider the new fraudster a duplicate.</p>
    pub fn fraudster_similarity_threshold(&self) -> ::std::option::Option<i32> {
        self.fraudster_similarity_threshold
    }
    /// <p>The identifiers of watchlists that a fraudster is registered to. If a watchlist isn't provided, the fraudsters are registered to the default watchlist. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.watchlist_ids.is_none()`.
    pub fn watchlist_ids(&self) -> &[::std::string::String] {
        self.watchlist_ids.as_deref().unwrap_or_default()
    }
}
impl RegistrationConfig {
    /// Creates a new builder-style object to manufacture [`RegistrationConfig`](crate::types::RegistrationConfig).
    pub fn builder() -> crate::types::builders::RegistrationConfigBuilder {
        crate::types::builders::RegistrationConfigBuilder::default()
    }
}

/// A builder for [`RegistrationConfig`](crate::types::RegistrationConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegistrationConfigBuilder {
    pub(crate) duplicate_registration_action: ::std::option::Option<crate::types::DuplicateRegistrationAction>,
    pub(crate) fraudster_similarity_threshold: ::std::option::Option<i32>,
    pub(crate) watchlist_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RegistrationConfigBuilder {
    /// <p>The action to take when a fraudster is identified as a duplicate. The default action is <code>SKIP</code>, which skips registering the duplicate fraudster. Setting the value to <code>REGISTER_AS_NEW</code> always registers a new fraudster into the specified domain.</p>
    pub fn duplicate_registration_action(mut self, input: crate::types::DuplicateRegistrationAction) -> Self {
        self.duplicate_registration_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action to take when a fraudster is identified as a duplicate. The default action is <code>SKIP</code>, which skips registering the duplicate fraudster. Setting the value to <code>REGISTER_AS_NEW</code> always registers a new fraudster into the specified domain.</p>
    pub fn set_duplicate_registration_action(mut self, input: ::std::option::Option<crate::types::DuplicateRegistrationAction>) -> Self {
        self.duplicate_registration_action = input;
        self
    }
    /// <p>The action to take when a fraudster is identified as a duplicate. The default action is <code>SKIP</code>, which skips registering the duplicate fraudster. Setting the value to <code>REGISTER_AS_NEW</code> always registers a new fraudster into the specified domain.</p>
    pub fn get_duplicate_registration_action(&self) -> &::std::option::Option<crate::types::DuplicateRegistrationAction> {
        &self.duplicate_registration_action
    }
    /// <p>The minimum similarity score between the new and old fraudsters in order to consider the new fraudster a duplicate.</p>
    pub fn fraudster_similarity_threshold(mut self, input: i32) -> Self {
        self.fraudster_similarity_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum similarity score between the new and old fraudsters in order to consider the new fraudster a duplicate.</p>
    pub fn set_fraudster_similarity_threshold(mut self, input: ::std::option::Option<i32>) -> Self {
        self.fraudster_similarity_threshold = input;
        self
    }
    /// <p>The minimum similarity score between the new and old fraudsters in order to consider the new fraudster a duplicate.</p>
    pub fn get_fraudster_similarity_threshold(&self) -> &::std::option::Option<i32> {
        &self.fraudster_similarity_threshold
    }
    /// Appends an item to `watchlist_ids`.
    ///
    /// To override the contents of this collection use [`set_watchlist_ids`](Self::set_watchlist_ids).
    ///
    /// <p>The identifiers of watchlists that a fraudster is registered to. If a watchlist isn't provided, the fraudsters are registered to the default watchlist. </p>
    pub fn watchlist_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.watchlist_ids.unwrap_or_default();
        v.push(input.into());
        self.watchlist_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of watchlists that a fraudster is registered to. If a watchlist isn't provided, the fraudsters are registered to the default watchlist. </p>
    pub fn set_watchlist_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.watchlist_ids = input;
        self
    }
    /// <p>The identifiers of watchlists that a fraudster is registered to. If a watchlist isn't provided, the fraudsters are registered to the default watchlist. </p>
    pub fn get_watchlist_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.watchlist_ids
    }
    /// Consumes the builder and constructs a [`RegistrationConfig`](crate::types::RegistrationConfig).
    pub fn build(self) -> crate::types::RegistrationConfig {
        crate::types::RegistrationConfig {
            duplicate_registration_action: self.duplicate_registration_action,
            fraudster_similarity_threshold: self.fraudster_similarity_threshold,
            watchlist_ids: self.watchlist_ids,
        }
    }
}
