// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains all the information about a fraudster registration job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct FraudsterRegistrationJob {
    /// <p>The client-provided name for the fraudster registration job.</p>
    #[doc(hidden)]
    pub job_name: std::option::Option<std::string::String>,
    /// <p>The service-generated identifier for the fraudster registration job.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The current status of the fraudster registration job.</p>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::types::FraudsterRegistrationJobStatus>,
    /// <p>The identifier of the domain containing the fraudster registration job.</p>
    #[doc(hidden)]
    pub domain_id: std::option::Option<std::string::String>,
    /// <p>The IAM role Amazon Resource Name (ARN) that grants Voice ID permissions to access customer's buckets to read the input manifest file and write the job output file.</p>
    #[doc(hidden)]
    pub data_access_role_arn: std::option::Option<std::string::String>,
    /// <p>The registration config containing details such as the action to take when a duplicate fraudster is detected, and the similarity threshold to use for detecting a duplicate fraudster.</p>
    #[doc(hidden)]
    pub registration_config: std::option::Option<crate::types::RegistrationConfig>,
    /// <p>The input data config containing an S3 URI for the input manifest file that contains the list of fraudster registration job requests.</p>
    #[doc(hidden)]
    pub input_data_config: std::option::Option<crate::types::InputDataConfig>,
    /// <p>The output data config containing the S3 location where you want Voice ID to write your job output file; you must also include a KMS key ID in order to encrypt the file.</p>
    #[doc(hidden)]
    pub output_data_config: std::option::Option<crate::types::OutputDataConfig>,
    /// <p>A timestamp showing the creation time of the fraudster registration job.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A timestamp showing when the fraudster registration job ended.</p>
    #[doc(hidden)]
    pub ended_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Contains details that are populated when an entire batch job fails. In cases of individual registration job failures, the batch job as a whole doesn't fail; it is completed with a <code>JobStatus</code> of <code>COMPLETED_WITH_ERRORS</code>. You can use the job output file to identify the individual registration requests that failed.</p>
    #[doc(hidden)]
    pub failure_details: std::option::Option<crate::types::FailureDetails>,
    /// <p>Shows the completed percentage of registration requests listed in the input file.</p>
    #[doc(hidden)]
    pub job_progress: std::option::Option<crate::types::JobProgress>,
}
impl FraudsterRegistrationJob {
    /// <p>The client-provided name for the fraudster registration job.</p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The service-generated identifier for the fraudster registration job.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The current status of the fraudster registration job.</p>
    pub fn job_status(&self) -> std::option::Option<&crate::types::FraudsterRegistrationJobStatus> {
        self.job_status.as_ref()
    }
    /// <p>The identifier of the domain containing the fraudster registration job.</p>
    pub fn domain_id(&self) -> std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The IAM role Amazon Resource Name (ARN) that grants Voice ID permissions to access customer's buckets to read the input manifest file and write the job output file.</p>
    pub fn data_access_role_arn(&self) -> std::option::Option<&str> {
        self.data_access_role_arn.as_deref()
    }
    /// <p>The registration config containing details such as the action to take when a duplicate fraudster is detected, and the similarity threshold to use for detecting a duplicate fraudster.</p>
    pub fn registration_config(&self) -> std::option::Option<&crate::types::RegistrationConfig> {
        self.registration_config.as_ref()
    }
    /// <p>The input data config containing an S3 URI for the input manifest file that contains the list of fraudster registration job requests.</p>
    pub fn input_data_config(&self) -> std::option::Option<&crate::types::InputDataConfig> {
        self.input_data_config.as_ref()
    }
    /// <p>The output data config containing the S3 location where you want Voice ID to write your job output file; you must also include a KMS key ID in order to encrypt the file.</p>
    pub fn output_data_config(&self) -> std::option::Option<&crate::types::OutputDataConfig> {
        self.output_data_config.as_ref()
    }
    /// <p>A timestamp showing the creation time of the fraudster registration job.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>A timestamp showing when the fraudster registration job ended.</p>
    pub fn ended_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
    /// <p>Contains details that are populated when an entire batch job fails. In cases of individual registration job failures, the batch job as a whole doesn't fail; it is completed with a <code>JobStatus</code> of <code>COMPLETED_WITH_ERRORS</code>. You can use the job output file to identify the individual registration requests that failed.</p>
    pub fn failure_details(&self) -> std::option::Option<&crate::types::FailureDetails> {
        self.failure_details.as_ref()
    }
    /// <p>Shows the completed percentage of registration requests listed in the input file.</p>
    pub fn job_progress(&self) -> std::option::Option<&crate::types::JobProgress> {
        self.job_progress.as_ref()
    }
}
impl std::fmt::Debug for FraudsterRegistrationJob {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("FraudsterRegistrationJob");
        formatter.field("job_name", &"*** Sensitive Data Redacted ***");
        formatter.field("job_id", &self.job_id);
        formatter.field("job_status", &self.job_status);
        formatter.field("domain_id", &self.domain_id);
        formatter.field("data_access_role_arn", &self.data_access_role_arn);
        formatter.field("registration_config", &self.registration_config);
        formatter.field("input_data_config", &self.input_data_config);
        formatter.field("output_data_config", &self.output_data_config);
        formatter.field("created_at", &self.created_at);
        formatter.field("ended_at", &self.ended_at);
        formatter.field("failure_details", &self.failure_details);
        formatter.field("job_progress", &self.job_progress);
        formatter.finish()
    }
}
impl FraudsterRegistrationJob {
    /// Creates a new builder-style object to manufacture [`FraudsterRegistrationJob`](crate::types::FraudsterRegistrationJob).
    pub fn builder() -> crate::types::builders::FraudsterRegistrationJobBuilder {
        crate::types::builders::FraudsterRegistrationJobBuilder::default()
    }
}

/// A builder for [`FraudsterRegistrationJob`](crate::types::FraudsterRegistrationJob).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct FraudsterRegistrationJobBuilder {
    pub(crate) job_name: std::option::Option<std::string::String>,
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) job_status: std::option::Option<crate::types::FraudsterRegistrationJobStatus>,
    pub(crate) domain_id: std::option::Option<std::string::String>,
    pub(crate) data_access_role_arn: std::option::Option<std::string::String>,
    pub(crate) registration_config: std::option::Option<crate::types::RegistrationConfig>,
    pub(crate) input_data_config: std::option::Option<crate::types::InputDataConfig>,
    pub(crate) output_data_config: std::option::Option<crate::types::OutputDataConfig>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) ended_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) failure_details: std::option::Option<crate::types::FailureDetails>,
    pub(crate) job_progress: std::option::Option<crate::types::JobProgress>,
}
impl FraudsterRegistrationJobBuilder {
    /// <p>The client-provided name for the fraudster registration job.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_name = Some(input.into());
        self
    }
    /// <p>The client-provided name for the fraudster registration job.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The service-generated identifier for the fraudster registration job.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The service-generated identifier for the fraudster registration job.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The current status of the fraudster registration job.</p>
    pub fn job_status(mut self, input: crate::types::FraudsterRegistrationJobStatus) -> Self {
        self.job_status = Some(input);
        self
    }
    /// <p>The current status of the fraudster registration job.</p>
    pub fn set_job_status(
        mut self,
        input: std::option::Option<crate::types::FraudsterRegistrationJobStatus>,
    ) -> Self {
        self.job_status = input;
        self
    }
    /// <p>The identifier of the domain containing the fraudster registration job.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_id = Some(input.into());
        self
    }
    /// <p>The identifier of the domain containing the fraudster registration job.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The IAM role Amazon Resource Name (ARN) that grants Voice ID permissions to access customer's buckets to read the input manifest file and write the job output file.</p>
    pub fn data_access_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_access_role_arn = Some(input.into());
        self
    }
    /// <p>The IAM role Amazon Resource Name (ARN) that grants Voice ID permissions to access customer's buckets to read the input manifest file and write the job output file.</p>
    pub fn set_data_access_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.data_access_role_arn = input;
        self
    }
    /// <p>The registration config containing details such as the action to take when a duplicate fraudster is detected, and the similarity threshold to use for detecting a duplicate fraudster.</p>
    pub fn registration_config(mut self, input: crate::types::RegistrationConfig) -> Self {
        self.registration_config = Some(input);
        self
    }
    /// <p>The registration config containing details such as the action to take when a duplicate fraudster is detected, and the similarity threshold to use for detecting a duplicate fraudster.</p>
    pub fn set_registration_config(
        mut self,
        input: std::option::Option<crate::types::RegistrationConfig>,
    ) -> Self {
        self.registration_config = input;
        self
    }
    /// <p>The input data config containing an S3 URI for the input manifest file that contains the list of fraudster registration job requests.</p>
    pub fn input_data_config(mut self, input: crate::types::InputDataConfig) -> Self {
        self.input_data_config = Some(input);
        self
    }
    /// <p>The input data config containing an S3 URI for the input manifest file that contains the list of fraudster registration job requests.</p>
    pub fn set_input_data_config(
        mut self,
        input: std::option::Option<crate::types::InputDataConfig>,
    ) -> Self {
        self.input_data_config = input;
        self
    }
    /// <p>The output data config containing the S3 location where you want Voice ID to write your job output file; you must also include a KMS key ID in order to encrypt the file.</p>
    pub fn output_data_config(mut self, input: crate::types::OutputDataConfig) -> Self {
        self.output_data_config = Some(input);
        self
    }
    /// <p>The output data config containing the S3 location where you want Voice ID to write your job output file; you must also include a KMS key ID in order to encrypt the file.</p>
    pub fn set_output_data_config(
        mut self,
        input: std::option::Option<crate::types::OutputDataConfig>,
    ) -> Self {
        self.output_data_config = input;
        self
    }
    /// <p>A timestamp showing the creation time of the fraudster registration job.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>A timestamp showing the creation time of the fraudster registration job.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>A timestamp showing when the fraudster registration job ended.</p>
    pub fn ended_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.ended_at = Some(input);
        self
    }
    /// <p>A timestamp showing when the fraudster registration job ended.</p>
    pub fn set_ended_at(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.ended_at = input;
        self
    }
    /// <p>Contains details that are populated when an entire batch job fails. In cases of individual registration job failures, the batch job as a whole doesn't fail; it is completed with a <code>JobStatus</code> of <code>COMPLETED_WITH_ERRORS</code>. You can use the job output file to identify the individual registration requests that failed.</p>
    pub fn failure_details(mut self, input: crate::types::FailureDetails) -> Self {
        self.failure_details = Some(input);
        self
    }
    /// <p>Contains details that are populated when an entire batch job fails. In cases of individual registration job failures, the batch job as a whole doesn't fail; it is completed with a <code>JobStatus</code> of <code>COMPLETED_WITH_ERRORS</code>. You can use the job output file to identify the individual registration requests that failed.</p>
    pub fn set_failure_details(
        mut self,
        input: std::option::Option<crate::types::FailureDetails>,
    ) -> Self {
        self.failure_details = input;
        self
    }
    /// <p>Shows the completed percentage of registration requests listed in the input file.</p>
    pub fn job_progress(mut self, input: crate::types::JobProgress) -> Self {
        self.job_progress = Some(input);
        self
    }
    /// <p>Shows the completed percentage of registration requests listed in the input file.</p>
    pub fn set_job_progress(
        mut self,
        input: std::option::Option<crate::types::JobProgress>,
    ) -> Self {
        self.job_progress = input;
        self
    }
    /// Consumes the builder and constructs a [`FraudsterRegistrationJob`](crate::types::FraudsterRegistrationJob).
    pub fn build(self) -> crate::types::FraudsterRegistrationJob {
        crate::types::FraudsterRegistrationJob {
            job_name: self.job_name,
            job_id: self.job_id,
            job_status: self.job_status,
            domain_id: self.domain_id,
            data_access_role_arn: self.data_access_role_arn,
            registration_config: self.registration_config,
            input_data_config: self.input_data_config,
            output_data_config: self.output_data_config,
            created_at: self.created_at,
            ended_at: self.ended_at,
            failure_details: self.failure_details,
            job_progress: self.job_progress,
        }
    }
}
impl std::fmt::Debug for FraudsterRegistrationJobBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("FraudsterRegistrationJobBuilder");
        formatter.field("job_name", &"*** Sensitive Data Redacted ***");
        formatter.field("job_id", &self.job_id);
        formatter.field("job_status", &self.job_status);
        formatter.field("domain_id", &self.domain_id);
        formatter.field("data_access_role_arn", &self.data_access_role_arn);
        formatter.field("registration_config", &self.registration_config);
        formatter.field("input_data_config", &self.input_data_config);
        formatter.field("output_data_config", &self.output_data_config);
        formatter.field("created_at", &self.created_at);
        formatter.field("ended_at", &self.ended_at);
        formatter.field("failure_details", &self.failure_details);
        formatter.field("job_progress", &self.job_progress);
        formatter.finish()
    }
}
