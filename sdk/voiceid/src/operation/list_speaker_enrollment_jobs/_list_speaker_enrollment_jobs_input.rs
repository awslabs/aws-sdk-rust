// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSpeakerEnrollmentJobsInput {
    /// <p>The identifier of the domain that contains the speaker enrollment jobs.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>Provides the status of your speaker enrollment Job.</p>
    pub job_status: ::std::option::Option<crate::types::SpeakerEnrollmentJobStatus>,
    /// <p>The maximum number of results that are returned per call. You can use <code>NextToken</code> to obtain more pages of results. The default is 100; the maximum allowed page size is also 100.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListSpeakerEnrollmentJobsInput {
    /// <p>The identifier of the domain that contains the speaker enrollment jobs.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>Provides the status of your speaker enrollment Job.</p>
    pub fn job_status(&self) -> ::std::option::Option<&crate::types::SpeakerEnrollmentJobStatus> {
        self.job_status.as_ref()
    }
    /// <p>The maximum number of results that are returned per call. You can use <code>NextToken</code> to obtain more pages of results. The default is 100; the maximum allowed page size is also 100.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListSpeakerEnrollmentJobsInput {
    /// Creates a new builder-style object to manufacture [`ListSpeakerEnrollmentJobsInput`](crate::operation::list_speaker_enrollment_jobs::ListSpeakerEnrollmentJobsInput).
    pub fn builder() -> crate::operation::list_speaker_enrollment_jobs::builders::ListSpeakerEnrollmentJobsInputBuilder {
        crate::operation::list_speaker_enrollment_jobs::builders::ListSpeakerEnrollmentJobsInputBuilder::default()
    }
}

/// A builder for [`ListSpeakerEnrollmentJobsInput`](crate::operation::list_speaker_enrollment_jobs::ListSpeakerEnrollmentJobsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSpeakerEnrollmentJobsInputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_status: ::std::option::Option<crate::types::SpeakerEnrollmentJobStatus>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListSpeakerEnrollmentJobsInputBuilder {
    /// <p>The identifier of the domain that contains the speaker enrollment jobs.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the domain that contains the speaker enrollment jobs.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The identifier of the domain that contains the speaker enrollment jobs.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>Provides the status of your speaker enrollment Job.</p>
    pub fn job_status(mut self, input: crate::types::SpeakerEnrollmentJobStatus) -> Self {
        self.job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the status of your speaker enrollment Job.</p>
    pub fn set_job_status(mut self, input: ::std::option::Option<crate::types::SpeakerEnrollmentJobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>Provides the status of your speaker enrollment Job.</p>
    pub fn get_job_status(&self) -> &::std::option::Option<crate::types::SpeakerEnrollmentJobStatus> {
        &self.job_status
    }
    /// <p>The maximum number of results that are returned per call. You can use <code>NextToken</code> to obtain more pages of results. The default is 100; the maximum allowed page size is also 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results that are returned per call. You can use <code>NextToken</code> to obtain more pages of results. The default is 100; the maximum allowed page size is also 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results that are returned per call. You can use <code>NextToken</code> to obtain more pages of results. The default is 100; the maximum allowed page size is also 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListSpeakerEnrollmentJobsInput`](crate::operation::list_speaker_enrollment_jobs::ListSpeakerEnrollmentJobsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_speaker_enrollment_jobs::ListSpeakerEnrollmentJobsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_speaker_enrollment_jobs::ListSpeakerEnrollmentJobsInput {
            domain_id: self.domain_id,
            job_status: self.job_status,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
