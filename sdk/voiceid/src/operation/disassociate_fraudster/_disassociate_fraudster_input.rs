// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DisassociateFraudsterInput {
    /// <p>The identifier of the domain that contains the fraudster.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the watchlist that you want to disassociate from the fraudster.</p>
    pub watchlist_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the fraudster to be disassociated from the watchlist.</p>
    pub fraudster_id: ::std::option::Option<::std::string::String>,
}
impl DisassociateFraudsterInput {
    /// <p>The identifier of the domain that contains the fraudster.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The identifier of the watchlist that you want to disassociate from the fraudster.</p>
    pub fn watchlist_id(&self) -> ::std::option::Option<&str> {
        self.watchlist_id.as_deref()
    }
    /// <p>The identifier of the fraudster to be disassociated from the watchlist.</p>
    pub fn fraudster_id(&self) -> ::std::option::Option<&str> {
        self.fraudster_id.as_deref()
    }
}
impl ::std::fmt::Debug for DisassociateFraudsterInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateFraudsterInput");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("watchlist_id", &self.watchlist_id);
        formatter.field("fraudster_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DisassociateFraudsterInput {
    /// Creates a new builder-style object to manufacture [`DisassociateFraudsterInput`](crate::operation::disassociate_fraudster::DisassociateFraudsterInput).
    pub fn builder() -> crate::operation::disassociate_fraudster::builders::DisassociateFraudsterInputBuilder {
        crate::operation::disassociate_fraudster::builders::DisassociateFraudsterInputBuilder::default()
    }
}

/// A builder for [`DisassociateFraudsterInput`](crate::operation::disassociate_fraudster::DisassociateFraudsterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DisassociateFraudsterInputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) watchlist_id: ::std::option::Option<::std::string::String>,
    pub(crate) fraudster_id: ::std::option::Option<::std::string::String>,
}
impl DisassociateFraudsterInputBuilder {
    /// <p>The identifier of the domain that contains the fraudster.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the domain that contains the fraudster.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The identifier of the domain that contains the fraudster.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The identifier of the watchlist that you want to disassociate from the fraudster.</p>
    /// This field is required.
    pub fn watchlist_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.watchlist_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the watchlist that you want to disassociate from the fraudster.</p>
    pub fn set_watchlist_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.watchlist_id = input;
        self
    }
    /// <p>The identifier of the watchlist that you want to disassociate from the fraudster.</p>
    pub fn get_watchlist_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.watchlist_id
    }
    /// <p>The identifier of the fraudster to be disassociated from the watchlist.</p>
    /// This field is required.
    pub fn fraudster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fraudster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the fraudster to be disassociated from the watchlist.</p>
    pub fn set_fraudster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fraudster_id = input;
        self
    }
    /// <p>The identifier of the fraudster to be disassociated from the watchlist.</p>
    pub fn get_fraudster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.fraudster_id
    }
    /// Consumes the builder and constructs a [`DisassociateFraudsterInput`](crate::operation::disassociate_fraudster::DisassociateFraudsterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::disassociate_fraudster::DisassociateFraudsterInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::disassociate_fraudster::DisassociateFraudsterInput {
            domain_id: self.domain_id,
            watchlist_id: self.watchlist_id,
            fraudster_id: self.fraudster_id,
        })
    }
}
impl ::std::fmt::Debug for DisassociateFraudsterInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateFraudsterInputBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("watchlist_id", &self.watchlist_id);
        formatter.field("fraudster_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
