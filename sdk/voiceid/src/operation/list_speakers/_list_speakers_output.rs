// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSpeakersOutput {
    /// <p>A list containing details about each speaker in the Amazon Web Services account. </p>
    #[doc(hidden)]
    pub speaker_summaries: std::option::Option<std::vec::Vec<crate::types::SpeakerSummary>>,
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSpeakersOutput {
    /// <p>A list containing details about each speaker in the Amazon Web Services account. </p>
    pub fn speaker_summaries(&self) -> std::option::Option<&[crate::types::SpeakerSummary]> {
        self.speaker_summaries.as_deref()
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSpeakersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSpeakersOutput {
    /// Creates a new builder-style object to manufacture [`ListSpeakersOutput`](crate::operation::list_speakers::ListSpeakersOutput).
    pub fn builder() -> crate::operation::list_speakers::builders::ListSpeakersOutputBuilder {
        crate::operation::list_speakers::builders::ListSpeakersOutputBuilder::default()
    }
}

/// A builder for [`ListSpeakersOutput`](crate::operation::list_speakers::ListSpeakersOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListSpeakersOutputBuilder {
    pub(crate) speaker_summaries: std::option::Option<std::vec::Vec<crate::types::SpeakerSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSpeakersOutputBuilder {
    /// Appends an item to `speaker_summaries`.
    ///
    /// To override the contents of this collection use [`set_speaker_summaries`](Self::set_speaker_summaries).
    ///
    /// <p>A list containing details about each speaker in the Amazon Web Services account. </p>
    pub fn speaker_summaries(mut self, input: crate::types::SpeakerSummary) -> Self {
        let mut v = self.speaker_summaries.unwrap_or_default();
        v.push(input);
        self.speaker_summaries = Some(v);
        self
    }
    /// <p>A list containing details about each speaker in the Amazon Web Services account. </p>
    pub fn set_speaker_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SpeakerSummary>>,
    ) -> Self {
        self.speaker_summaries = input;
        self
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListSpeakersOutput`](crate::operation::list_speakers::ListSpeakersOutput).
    pub fn build(self) -> crate::operation::list_speakers::ListSpeakersOutput {
        crate::operation::list_speakers::ListSpeakersOutput {
            speaker_summaries: self.speaker_summaries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
