// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateWatchlistInput {
    /// <p>The identifier of the domain that contains the watchlist.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the watchlist to be updated.</p>
    pub watchlist_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the watchlist.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A brief description about this watchlist.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl UpdateWatchlistInput {
    /// <p>The identifier of the domain that contains the watchlist.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The identifier of the watchlist to be updated.</p>
    pub fn watchlist_id(&self) -> ::std::option::Option<&str> {
        self.watchlist_id.as_deref()
    }
    /// <p>The name of the watchlist.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A brief description about this watchlist.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateWatchlistInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateWatchlistInput");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("watchlist_id", &self.watchlist_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateWatchlistInput {
    /// Creates a new builder-style object to manufacture [`UpdateWatchlistInput`](crate::operation::update_watchlist::UpdateWatchlistInput).
    pub fn builder() -> crate::operation::update_watchlist::builders::UpdateWatchlistInputBuilder {
        crate::operation::update_watchlist::builders::UpdateWatchlistInputBuilder::default()
    }
}

/// A builder for [`UpdateWatchlistInput`](crate::operation::update_watchlist::UpdateWatchlistInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateWatchlistInputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) watchlist_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl UpdateWatchlistInputBuilder {
    /// <p>The identifier of the domain that contains the watchlist.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the domain that contains the watchlist.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The identifier of the domain that contains the watchlist.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The identifier of the watchlist to be updated.</p>
    /// This field is required.
    pub fn watchlist_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.watchlist_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the watchlist to be updated.</p>
    pub fn set_watchlist_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.watchlist_id = input;
        self
    }
    /// <p>The identifier of the watchlist to be updated.</p>
    pub fn get_watchlist_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.watchlist_id
    }
    /// <p>The name of the watchlist.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the watchlist.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the watchlist.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A brief description about this watchlist.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A brief description about this watchlist.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A brief description about this watchlist.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`UpdateWatchlistInput`](crate::operation::update_watchlist::UpdateWatchlistInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_watchlist::UpdateWatchlistInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_watchlist::UpdateWatchlistInput {
            domain_id: self.domain_id,
            watchlist_id: self.watchlist_id,
            name: self.name,
            description: self.description,
        })
    }
}
impl ::std::fmt::Debug for UpdateWatchlistInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateWatchlistInputBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("watchlist_id", &self.watchlist_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
