// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListFraudsterRegistrationJobsOutput {
    /// <p>A list containing details about each specified fraudster registration job.</p>
    #[doc(hidden)]
    pub job_summaries:
        std::option::Option<std::vec::Vec<crate::types::FraudsterRegistrationJobSummary>>,
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListFraudsterRegistrationJobsOutput {
    /// <p>A list containing details about each specified fraudster registration job.</p>
    pub fn job_summaries(
        &self,
    ) -> std::option::Option<&[crate::types::FraudsterRegistrationJobSummary]> {
        self.job_summaries.as_deref()
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListFraudsterRegistrationJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListFraudsterRegistrationJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListFraudsterRegistrationJobsOutput`](crate::operation::list_fraudster_registration_jobs::ListFraudsterRegistrationJobsOutput).
    pub fn builder() -> crate::operation::list_fraudster_registration_jobs::builders::ListFraudsterRegistrationJobsOutputBuilder{
        crate::operation::list_fraudster_registration_jobs::builders::ListFraudsterRegistrationJobsOutputBuilder::default()
    }
}

/// A builder for [`ListFraudsterRegistrationJobsOutput`](crate::operation::list_fraudster_registration_jobs::ListFraudsterRegistrationJobsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListFraudsterRegistrationJobsOutputBuilder {
    pub(crate) job_summaries:
        std::option::Option<std::vec::Vec<crate::types::FraudsterRegistrationJobSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListFraudsterRegistrationJobsOutputBuilder {
    /// Appends an item to `job_summaries`.
    ///
    /// To override the contents of this collection use [`set_job_summaries`](Self::set_job_summaries).
    ///
    /// <p>A list containing details about each specified fraudster registration job.</p>
    pub fn job_summaries(mut self, input: crate::types::FraudsterRegistrationJobSummary) -> Self {
        let mut v = self.job_summaries.unwrap_or_default();
        v.push(input);
        self.job_summaries = Some(v);
        self
    }
    /// <p>A list containing details about each specified fraudster registration job.</p>
    pub fn set_job_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FraudsterRegistrationJobSummary>>,
    ) -> Self {
        self.job_summaries = input;
        self
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListFraudsterRegistrationJobsOutput`](crate::operation::list_fraudster_registration_jobs::ListFraudsterRegistrationJobsOutput).
    pub fn build(
        self,
    ) -> crate::operation::list_fraudster_registration_jobs::ListFraudsterRegistrationJobsOutput
    {
        crate::operation::list_fraudster_registration_jobs::ListFraudsterRegistrationJobsOutput {
            job_summaries: self.job_summaries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
