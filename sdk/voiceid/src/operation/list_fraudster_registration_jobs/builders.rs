// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_fraudster_registration_jobs::_list_fraudster_registration_jobs_output::ListFraudsterRegistrationJobsOutputBuilder;

pub use crate::operation::list_fraudster_registration_jobs::_list_fraudster_registration_jobs_input::ListFraudsterRegistrationJobsInputBuilder;

/// Fluent builder constructing a request to `ListFraudsterRegistrationJobs`.
///
/// <p>Lists all the fraudster registration jobs in the domain with the given <code>JobStatus</code>. If <code>JobStatus</code> is not provided, this lists all fraudster registration jobs in the given domain. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListFraudsterRegistrationJobsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_fraudster_registration_jobs::builders::ListFraudsterRegistrationJobsInputBuilder
            }
impl ListFraudsterRegistrationJobsFluentBuilder {
    /// Creates a new `ListFraudsterRegistrationJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_fraudster_registration_jobs::ListFraudsterRegistrationJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_fraudster_registration_jobs::ListFraudsterRegistrationJobsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_fraudster_registration_jobs::ListFraudsterRegistrationJobsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_fraudster_registration_jobs::ListFraudsterRegistrationJobsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_fraudster_registration_jobs::paginator::ListFraudsterRegistrationJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_fraudster_registration_jobs::paginator::ListFraudsterRegistrationJobsPaginator{
        crate::operation::list_fraudster_registration_jobs::paginator::ListFraudsterRegistrationJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>The identifier of the domain containing the fraudster registration Jobs.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The identifier of the domain containing the fraudster registration Jobs.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>Provides the status of your fraudster registration job.</p>
    pub fn job_status(mut self, input: crate::types::FraudsterRegistrationJobStatus) -> Self {
        self.inner = self.inner.job_status(input);
        self
    }
    /// <p>Provides the status of your fraudster registration job.</p>
    pub fn set_job_status(
        mut self,
        input: std::option::Option<crate::types::FraudsterRegistrationJobStatus>,
    ) -> Self {
        self.inner = self.inner.set_job_status(input);
        self
    }
    /// <p>The maximum number of results that are returned per call. You can use <code>NextToken</code> to obtain further pages of results. The default is 100; the maximum allowed page size is also 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results that are returned per call. You can use <code>NextToken</code> to obtain further pages of results. The default is 100; the maximum allowed page size is also 100. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If <code>NextToken</code> is returned, there are more results available. The value of <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
