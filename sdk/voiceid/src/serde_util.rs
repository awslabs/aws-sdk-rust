// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn authentication_configuration_correct_errors(
    mut builder: crate::types::builders::AuthenticationConfigurationBuilder,
) -> crate::types::builders::AuthenticationConfigurationBuilder {
    if builder.acceptance_threshold.is_none() {
        builder.acceptance_threshold = Some(Default::default())
    }
    builder
}

pub(crate) fn fraud_risk_details_correct_errors(
    mut builder: crate::types::builders::FraudRiskDetailsBuilder,
) -> crate::types::builders::FraudRiskDetailsBuilder {
    if builder.known_fraudster_risk.is_none() {
        builder.known_fraudster_risk = {
            let builder = crate::types::builders::KnownFraudsterRiskBuilder::default();
            crate::serde_util::known_fraudster_risk_correct_errors(builder).build().ok()
        }
    }
    if builder.voice_spoofing_risk.is_none() {
        builder.voice_spoofing_risk = {
            let builder = crate::types::builders::VoiceSpoofingRiskBuilder::default();
            crate::serde_util::voice_spoofing_risk_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn input_data_config_correct_errors(
    mut builder: crate::types::builders::InputDataConfigBuilder,
) -> crate::types::builders::InputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn output_data_config_correct_errors(
    mut builder: crate::types::builders::OutputDataConfigBuilder,
) -> crate::types::builders::OutputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn server_side_encryption_configuration_correct_errors(
    mut builder: crate::types::builders::ServerSideEncryptionConfigurationBuilder,
) -> crate::types::builders::ServerSideEncryptionConfigurationBuilder {
    if builder.kms_key_id.is_none() {
        builder.kms_key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn watchlist_details_correct_errors(
    mut builder: crate::types::builders::WatchlistDetailsBuilder,
) -> crate::types::builders::WatchlistDetailsBuilder {
    if builder.default_watchlist_id.is_none() {
        builder.default_watchlist_id = Some(Default::default())
    }
    builder
}

pub(crate) fn known_fraudster_risk_correct_errors(
    mut builder: crate::types::builders::KnownFraudsterRiskBuilder,
) -> crate::types::builders::KnownFraudsterRiskBuilder {
    if builder.risk_score.is_none() {
        builder.risk_score = Some(Default::default())
    }
    builder
}

pub(crate) fn voice_spoofing_risk_correct_errors(
    mut builder: crate::types::builders::VoiceSpoofingRiskBuilder,
) -> crate::types::builders::VoiceSpoofingRiskBuilder {
    if builder.risk_score.is_none() {
        builder.risk_score = Some(Default::default())
    }
    builder
}
