// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_identity_provider_settings::_update_identity_provider_settings_output::UpdateIdentityProviderSettingsOutputBuilder;

pub use crate::operation::update_identity_provider_settings::_update_identity_provider_settings_input::UpdateIdentityProviderSettingsInputBuilder;

/// Fluent builder constructing a request to `UpdateIdentityProviderSettings`.
///
/// <p>Updates additional product configuration settings for the registered identity provider.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateIdentityProviderSettingsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_identity_provider_settings::builders::UpdateIdentityProviderSettingsInputBuilder
            }
impl UpdateIdentityProviderSettingsFluentBuilder {
    /// Creates a new `UpdateIdentityProviderSettings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_identity_provider_settings::UpdateIdentityProviderSettings, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_identity_provider_settings::UpdateIdentityProviderSettingsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_identity_provider_settings::UpdateIdentityProviderSettingsOutput, aws_smithy_http::result::SdkError<crate::operation::update_identity_provider_settings::UpdateIdentityProviderSettingsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Details about an identity provider.</p>
    pub fn identity_provider(mut self, input: crate::types::IdentityProvider) -> Self {
        self.inner = self.inner.identity_provider(input);
        self
    }
    /// <p>Details about an identity provider.</p>
    pub fn set_identity_provider(
        mut self,
        input: std::option::Option<crate::types::IdentityProvider>,
    ) -> Self {
        self.inner = self.inner.set_identity_provider(input);
        self
    }
    /// <p>The name of the user-based subscription product.</p>
    pub fn product(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.product(input.into());
        self
    }
    /// <p>The name of the user-based subscription product.</p>
    pub fn set_product(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_product(input);
        self
    }
    /// <p>Updates the registered identity provider’s product related configuration settings. You can update any combination of settings in a single operation such as the:</p>
    /// <ul>
    /// <li> <p>Subnets which you want to add to provision VPC endpoints.</p> </li>
    /// <li> <p>Subnets which you want to remove the VPC endpoints from.</p> </li>
    /// <li> <p>Security group ID which permits traffic to the VPC endpoints.</p> </li>
    /// </ul>
    pub fn update_settings(mut self, input: crate::types::UpdateSettings) -> Self {
        self.inner = self.inner.update_settings(input);
        self
    }
    /// <p>Updates the registered identity provider’s product related configuration settings. You can update any combination of settings in a single operation such as the:</p>
    /// <ul>
    /// <li> <p>Subnets which you want to add to provision VPC endpoints.</p> </li>
    /// <li> <p>Subnets which you want to remove the VPC endpoints from.</p> </li>
    /// <li> <p>Security group ID which permits traffic to the VPC endpoints.</p> </li>
    /// </ul>
    pub fn set_update_settings(
        mut self,
        input: std::option::Option<crate::types::UpdateSettings>,
    ) -> Self {
        self.inner = self.inner.set_update_settings(input);
        self
    }
}
