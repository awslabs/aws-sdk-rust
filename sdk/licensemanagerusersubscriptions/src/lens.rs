// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_identity_providers_output_next_token(
    input: &crate::output::ListIdentityProvidersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_instances_output_next_token(
    input: &crate::output::ListInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_product_subscriptions_output_next_token(
    input: &crate::output::ListProductSubscriptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_user_associations_output_next_token(
    input: &crate::output::ListUserAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_identity_providers_output_identity_provider_summaries(
    input: crate::output::ListIdentityProvidersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::IdentityProviderSummary>> {
    let input = match input.identity_provider_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_instances_output_instance_summaries(
    input: crate::output::ListInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InstanceSummary>> {
    let input = match input.instance_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_product_subscriptions_output_product_user_summaries(
    input: crate::output::ListProductSubscriptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ProductUserSummary>> {
    let input = match input.product_user_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_user_associations_output_instance_user_summaries(
    input: crate::output::ListUserAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InstanceUserSummary>> {
    let input = match input.instance_user_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
