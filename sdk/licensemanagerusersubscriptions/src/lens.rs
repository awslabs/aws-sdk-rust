// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_identity_providers_output_next_token(
    input: &crate::operation::list_identity_providers::ListIdentityProvidersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_instances_output_next_token(
    input: &crate::operation::list_instances::ListInstancesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_product_subscriptions_output_next_token(
    input: &crate::operation::list_product_subscriptions::ListProductSubscriptionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_user_associations_output_next_token(
    input: &crate::operation::list_user_associations::ListUserAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_identity_providers_output_identity_provider_summaries(
    input: crate::operation::list_identity_providers::ListIdentityProvidersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::IdentityProviderSummary>> {
    let input = input.identity_provider_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_instances_output_instance_summaries(
    input: crate::operation::list_instances::ListInstancesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::InstanceSummary>> {
    let input = match input.instance_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_product_subscriptions_output_product_user_summaries(
    input: crate::operation::list_product_subscriptions::ListProductSubscriptionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProductUserSummary>> {
    let input = match input.product_user_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_user_associations_output_instance_user_summaries(
    input: crate::operation::list_user_associations::ListUserAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::InstanceUserSummary>> {
    let input = match input.instance_user_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
