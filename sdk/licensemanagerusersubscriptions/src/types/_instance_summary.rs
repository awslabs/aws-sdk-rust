// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an EC2 instance providing user-based subscriptions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceSummary {
    /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The status of an EC2 instance resource.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>A list of provided user-based subscription products.</p>
    #[doc(hidden)]
    pub products: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The date of the last status check.</p>
    #[doc(hidden)]
    pub last_status_check_date: std::option::Option<std::string::String>,
    /// <p>The status message for an EC2 instance.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
}
impl InstanceSummary {
    /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The status of an EC2 instance resource.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>A list of provided user-based subscription products.</p>
    pub fn products(&self) -> std::option::Option<&[std::string::String]> {
        self.products.as_deref()
    }
    /// <p>The date of the last status check.</p>
    pub fn last_status_check_date(&self) -> std::option::Option<&str> {
        self.last_status_check_date.as_deref()
    }
    /// <p>The status message for an EC2 instance.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl InstanceSummary {
    /// Creates a new builder-style object to manufacture [`InstanceSummary`](crate::types::InstanceSummary).
    pub fn builder() -> crate::types::builders::InstanceSummaryBuilder {
        crate::types::builders::InstanceSummaryBuilder::default()
    }
}

/// A builder for [`InstanceSummary`](crate::types::InstanceSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceSummaryBuilder {
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) products: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) last_status_check_date: std::option::Option<std::string::String>,
    pub(crate) status_message: std::option::Option<std::string::String>,
}
impl InstanceSummaryBuilder {
    /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The status of an EC2 instance resource.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of an EC2 instance resource.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// Appends an item to `products`.
    ///
    /// To override the contents of this collection use [`set_products`](Self::set_products).
    ///
    /// <p>A list of provided user-based subscription products.</p>
    pub fn products(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.products.unwrap_or_default();
        v.push(input.into());
        self.products = Some(v);
        self
    }
    /// <p>A list of provided user-based subscription products.</p>
    pub fn set_products(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.products = input;
        self
    }
    /// <p>The date of the last status check.</p>
    pub fn last_status_check_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_status_check_date = Some(input.into());
        self
    }
    /// <p>The date of the last status check.</p>
    pub fn set_last_status_check_date(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_status_check_date = input;
        self
    }
    /// <p>The status message for an EC2 instance.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>The status message for an EC2 instance.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceSummary`](crate::types::InstanceSummary).
    pub fn build(self) -> crate::types::InstanceSummary {
        crate::types::InstanceSummary {
            instance_id: self.instance_id,
            status: self.status,
            products: self.products,
            last_status_check_date: self.last_status_check_date,
            status_message: self.status_message,
        }
    }
}
