// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an identity provider.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdentityProviderSummary {
    /// <p>An object that specifies details for the identity provider.</p>
    pub identity_provider: ::std::option::Option<crate::types::IdentityProvider>,
    /// <p>An object that details the registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.</p>
    pub settings: ::std::option::Option<crate::types::Settings>,
    /// <p>The name of the user-based subscription product.</p>
    pub product: ::std::string::String,
    /// <p>The status of an identity provider.</p>
    pub status: ::std::string::String,
    /// <p>The failure message associated with an identity provider.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
}
impl IdentityProviderSummary {
    /// <p>An object that specifies details for the identity provider.</p>
    pub fn identity_provider(&self) -> ::std::option::Option<&crate::types::IdentityProvider> {
        self.identity_provider.as_ref()
    }
    /// <p>An object that details the registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.</p>
    pub fn settings(&self) -> ::std::option::Option<&crate::types::Settings> {
        self.settings.as_ref()
    }
    /// <p>The name of the user-based subscription product.</p>
    pub fn product(&self) -> &str {
        use std::ops::Deref;
        self.product.deref()
    }
    /// <p>The status of an identity provider.</p>
    pub fn status(&self) -> &str {
        use std::ops::Deref;
        self.status.deref()
    }
    /// <p>The failure message associated with an identity provider.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
}
impl IdentityProviderSummary {
    /// Creates a new builder-style object to manufacture [`IdentityProviderSummary`](crate::types::IdentityProviderSummary).
    pub fn builder() -> crate::types::builders::IdentityProviderSummaryBuilder {
        crate::types::builders::IdentityProviderSummaryBuilder::default()
    }
}

/// A builder for [`IdentityProviderSummary`](crate::types::IdentityProviderSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IdentityProviderSummaryBuilder {
    pub(crate) identity_provider: ::std::option::Option<crate::types::IdentityProvider>,
    pub(crate) settings: ::std::option::Option<crate::types::Settings>,
    pub(crate) product: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
}
impl IdentityProviderSummaryBuilder {
    /// <p>An object that specifies details for the identity provider.</p>
    /// This field is required.
    pub fn identity_provider(mut self, input: crate::types::IdentityProvider) -> Self {
        self.identity_provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that specifies details for the identity provider.</p>
    pub fn set_identity_provider(mut self, input: ::std::option::Option<crate::types::IdentityProvider>) -> Self {
        self.identity_provider = input;
        self
    }
    /// <p>An object that specifies details for the identity provider.</p>
    pub fn get_identity_provider(&self) -> &::std::option::Option<crate::types::IdentityProvider> {
        &self.identity_provider
    }
    /// <p>An object that details the registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.</p>
    /// This field is required.
    pub fn settings(mut self, input: crate::types::Settings) -> Self {
        self.settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that details the registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.</p>
    pub fn set_settings(mut self, input: ::std::option::Option<crate::types::Settings>) -> Self {
        self.settings = input;
        self
    }
    /// <p>An object that details the registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.</p>
    pub fn get_settings(&self) -> &::std::option::Option<crate::types::Settings> {
        &self.settings
    }
    /// <p>The name of the user-based subscription product.</p>
    /// This field is required.
    pub fn product(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user-based subscription product.</p>
    pub fn set_product(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product = input;
        self
    }
    /// <p>The name of the user-based subscription product.</p>
    pub fn get_product(&self) -> &::std::option::Option<::std::string::String> {
        &self.product
    }
    /// <p>The status of an identity provider.</p>
    /// This field is required.
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of an identity provider.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of an identity provider.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The failure message associated with an identity provider.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure message associated with an identity provider.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>The failure message associated with an identity provider.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// Consumes the builder and constructs a [`IdentityProviderSummary`](crate::types::IdentityProviderSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`product`](crate::types::builders::IdentityProviderSummaryBuilder::product)
    /// - [`status`](crate::types::builders::IdentityProviderSummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::IdentityProviderSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IdentityProviderSummary {
            identity_provider: self.identity_provider,
            settings: self.settings,
            product: self.product.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "product",
                    "product was not specified but it is required when building IdentityProviderSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building IdentityProviderSummary",
                )
            })?,
            failure_message: self.failure_message,
        })
    }
}
