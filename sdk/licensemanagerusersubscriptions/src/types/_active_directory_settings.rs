// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains network access and credential details that are needed for user administration in the Active Directory.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActiveDirectorySettings {
    /// <p>The domain name for the Active Directory.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of domain IPv4 addresses that are used for the Active Directory.</p>
    pub domain_ipv4_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of domain IPv6 addresses that are used for the Active Directory.</p>
    pub domain_ipv6_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Points to the <code>CredentialsProvider</code> resource that contains information about the credential provider for user administration.</p>
    pub domain_credentials_provider: ::std::option::Option<crate::types::CredentialsProvider>,
    /// <p>The <code>DomainNetworkSettings</code> resource contains an array of subnets that apply for the Active Directory.</p>
    pub domain_network_settings: ::std::option::Option<crate::types::DomainNetworkSettings>,
}
impl ActiveDirectorySettings {
    /// <p>The domain name for the Active Directory.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>A list of domain IPv4 addresses that are used for the Active Directory.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domain_ipv4_list.is_none()`.
    pub fn domain_ipv4_list(&self) -> &[::std::string::String] {
        self.domain_ipv4_list.as_deref().unwrap_or_default()
    }
    /// <p>A list of domain IPv6 addresses that are used for the Active Directory.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domain_ipv6_list.is_none()`.
    pub fn domain_ipv6_list(&self) -> &[::std::string::String] {
        self.domain_ipv6_list.as_deref().unwrap_or_default()
    }
    /// <p>Points to the <code>CredentialsProvider</code> resource that contains information about the credential provider for user administration.</p>
    pub fn domain_credentials_provider(&self) -> ::std::option::Option<&crate::types::CredentialsProvider> {
        self.domain_credentials_provider.as_ref()
    }
    /// <p>The <code>DomainNetworkSettings</code> resource contains an array of subnets that apply for the Active Directory.</p>
    pub fn domain_network_settings(&self) -> ::std::option::Option<&crate::types::DomainNetworkSettings> {
        self.domain_network_settings.as_ref()
    }
}
impl ActiveDirectorySettings {
    /// Creates a new builder-style object to manufacture [`ActiveDirectorySettings`](crate::types::ActiveDirectorySettings).
    pub fn builder() -> crate::types::builders::ActiveDirectorySettingsBuilder {
        crate::types::builders::ActiveDirectorySettingsBuilder::default()
    }
}

/// A builder for [`ActiveDirectorySettings`](crate::types::ActiveDirectorySettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActiveDirectorySettingsBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_ipv4_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) domain_ipv6_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) domain_credentials_provider: ::std::option::Option<crate::types::CredentialsProvider>,
    pub(crate) domain_network_settings: ::std::option::Option<crate::types::DomainNetworkSettings>,
}
impl ActiveDirectorySettingsBuilder {
    /// <p>The domain name for the Active Directory.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name for the Active Directory.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain name for the Active Directory.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// Appends an item to `domain_ipv4_list`.
    ///
    /// To override the contents of this collection use [`set_domain_ipv4_list`](Self::set_domain_ipv4_list).
    ///
    /// <p>A list of domain IPv4 addresses that are used for the Active Directory.</p>
    pub fn domain_ipv4_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.domain_ipv4_list.unwrap_or_default();
        v.push(input.into());
        self.domain_ipv4_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of domain IPv4 addresses that are used for the Active Directory.</p>
    pub fn set_domain_ipv4_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.domain_ipv4_list = input;
        self
    }
    /// <p>A list of domain IPv4 addresses that are used for the Active Directory.</p>
    pub fn get_domain_ipv4_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.domain_ipv4_list
    }
    /// Appends an item to `domain_ipv6_list`.
    ///
    /// To override the contents of this collection use [`set_domain_ipv6_list`](Self::set_domain_ipv6_list).
    ///
    /// <p>A list of domain IPv6 addresses that are used for the Active Directory.</p>
    pub fn domain_ipv6_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.domain_ipv6_list.unwrap_or_default();
        v.push(input.into());
        self.domain_ipv6_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of domain IPv6 addresses that are used for the Active Directory.</p>
    pub fn set_domain_ipv6_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.domain_ipv6_list = input;
        self
    }
    /// <p>A list of domain IPv6 addresses that are used for the Active Directory.</p>
    pub fn get_domain_ipv6_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.domain_ipv6_list
    }
    /// <p>Points to the <code>CredentialsProvider</code> resource that contains information about the credential provider for user administration.</p>
    pub fn domain_credentials_provider(mut self, input: crate::types::CredentialsProvider) -> Self {
        self.domain_credentials_provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>Points to the <code>CredentialsProvider</code> resource that contains information about the credential provider for user administration.</p>
    pub fn set_domain_credentials_provider(mut self, input: ::std::option::Option<crate::types::CredentialsProvider>) -> Self {
        self.domain_credentials_provider = input;
        self
    }
    /// <p>Points to the <code>CredentialsProvider</code> resource that contains information about the credential provider for user administration.</p>
    pub fn get_domain_credentials_provider(&self) -> &::std::option::Option<crate::types::CredentialsProvider> {
        &self.domain_credentials_provider
    }
    /// <p>The <code>DomainNetworkSettings</code> resource contains an array of subnets that apply for the Active Directory.</p>
    pub fn domain_network_settings(mut self, input: crate::types::DomainNetworkSettings) -> Self {
        self.domain_network_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>DomainNetworkSettings</code> resource contains an array of subnets that apply for the Active Directory.</p>
    pub fn set_domain_network_settings(mut self, input: ::std::option::Option<crate::types::DomainNetworkSettings>) -> Self {
        self.domain_network_settings = input;
        self
    }
    /// <p>The <code>DomainNetworkSettings</code> resource contains an array of subnets that apply for the Active Directory.</p>
    pub fn get_domain_network_settings(&self) -> &::std::option::Option<crate::types::DomainNetworkSettings> {
        &self.domain_network_settings
    }
    /// Consumes the builder and constructs a [`ActiveDirectorySettings`](crate::types::ActiveDirectorySettings).
    pub fn build(self) -> crate::types::ActiveDirectorySettings {
        crate::types::ActiveDirectorySettings {
            domain_name: self.domain_name,
            domain_ipv4_list: self.domain_ipv4_list,
            domain_ipv6_list: self.domain_ipv6_list,
            domain_credentials_provider: self.domain_credentials_provider,
            domain_network_settings: self.domain_network_settings,
        }
    }
}
