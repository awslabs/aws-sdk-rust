// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an Active Directory identity provider.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActiveDirectoryIdentityProvider {
    /// <p>The directory ID for an Active Directory identity provider.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
}
impl ActiveDirectoryIdentityProvider {
    /// <p>The directory ID for an Active Directory identity provider.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
}
impl ActiveDirectoryIdentityProvider {
    /// Creates a new builder-style object to manufacture [`ActiveDirectoryIdentityProvider`](crate::types::ActiveDirectoryIdentityProvider).
    pub fn builder() -> crate::types::builders::ActiveDirectoryIdentityProviderBuilder {
        crate::types::builders::ActiveDirectoryIdentityProviderBuilder::default()
    }
}

/// A builder for [`ActiveDirectoryIdentityProvider`](crate::types::ActiveDirectoryIdentityProvider).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActiveDirectoryIdentityProviderBuilder {
    pub(crate) directory_id: std::option::Option<std::string::String>,
}
impl ActiveDirectoryIdentityProviderBuilder {
    /// <p>The directory ID for an Active Directory identity provider.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p>The directory ID for an Active Directory identity provider.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ActiveDirectoryIdentityProvider`](crate::types::ActiveDirectoryIdentityProvider).
    pub fn build(self) -> crate::types::ActiveDirectoryIdentityProvider {
        crate::types::ActiveDirectoryIdentityProvider {
            directory_id: self.directory_id,
        }
    }
}
