// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a Remote Desktop Services (RDS) license server.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LicenseServer {
    /// <p>The current state of the provisioning process for the RDS license server.</p>
    pub provisioning_status: ::std::option::Option<crate::types::LicenseServerEndpointProvisioningStatus>,
    /// <p>The health status of the RDS license server.</p>
    pub health_status: ::std::option::Option<crate::types::LicenseServerHealthStatus>,
    /// <p>A list of domain IPv4 addresses that are used for the RDS license server.</p>
    pub ipv4_address: ::std::option::Option<::std::string::String>,
    /// <p>A list of domain IPv6 addresses that are used for the RDS license server.</p>
    pub ipv6_address: ::std::option::Option<::std::string::String>,
}
impl LicenseServer {
    /// <p>The current state of the provisioning process for the RDS license server.</p>
    pub fn provisioning_status(&self) -> ::std::option::Option<&crate::types::LicenseServerEndpointProvisioningStatus> {
        self.provisioning_status.as_ref()
    }
    /// <p>The health status of the RDS license server.</p>
    pub fn health_status(&self) -> ::std::option::Option<&crate::types::LicenseServerHealthStatus> {
        self.health_status.as_ref()
    }
    /// <p>A list of domain IPv4 addresses that are used for the RDS license server.</p>
    pub fn ipv4_address(&self) -> ::std::option::Option<&str> {
        self.ipv4_address.as_deref()
    }
    /// <p>A list of domain IPv6 addresses that are used for the RDS license server.</p>
    pub fn ipv6_address(&self) -> ::std::option::Option<&str> {
        self.ipv6_address.as_deref()
    }
}
impl LicenseServer {
    /// Creates a new builder-style object to manufacture [`LicenseServer`](crate::types::LicenseServer).
    pub fn builder() -> crate::types::builders::LicenseServerBuilder {
        crate::types::builders::LicenseServerBuilder::default()
    }
}

/// A builder for [`LicenseServer`](crate::types::LicenseServer).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LicenseServerBuilder {
    pub(crate) provisioning_status: ::std::option::Option<crate::types::LicenseServerEndpointProvisioningStatus>,
    pub(crate) health_status: ::std::option::Option<crate::types::LicenseServerHealthStatus>,
    pub(crate) ipv4_address: ::std::option::Option<::std::string::String>,
    pub(crate) ipv6_address: ::std::option::Option<::std::string::String>,
}
impl LicenseServerBuilder {
    /// <p>The current state of the provisioning process for the RDS license server.</p>
    pub fn provisioning_status(mut self, input: crate::types::LicenseServerEndpointProvisioningStatus) -> Self {
        self.provisioning_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the provisioning process for the RDS license server.</p>
    pub fn set_provisioning_status(mut self, input: ::std::option::Option<crate::types::LicenseServerEndpointProvisioningStatus>) -> Self {
        self.provisioning_status = input;
        self
    }
    /// <p>The current state of the provisioning process for the RDS license server.</p>
    pub fn get_provisioning_status(&self) -> &::std::option::Option<crate::types::LicenseServerEndpointProvisioningStatus> {
        &self.provisioning_status
    }
    /// <p>The health status of the RDS license server.</p>
    pub fn health_status(mut self, input: crate::types::LicenseServerHealthStatus) -> Self {
        self.health_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The health status of the RDS license server.</p>
    pub fn set_health_status(mut self, input: ::std::option::Option<crate::types::LicenseServerHealthStatus>) -> Self {
        self.health_status = input;
        self
    }
    /// <p>The health status of the RDS license server.</p>
    pub fn get_health_status(&self) -> &::std::option::Option<crate::types::LicenseServerHealthStatus> {
        &self.health_status
    }
    /// <p>A list of domain IPv4 addresses that are used for the RDS license server.</p>
    pub fn ipv4_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipv4_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A list of domain IPv4 addresses that are used for the RDS license server.</p>
    pub fn set_ipv4_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipv4_address = input;
        self
    }
    /// <p>A list of domain IPv4 addresses that are used for the RDS license server.</p>
    pub fn get_ipv4_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipv4_address
    }
    /// <p>A list of domain IPv6 addresses that are used for the RDS license server.</p>
    pub fn ipv6_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipv6_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A list of domain IPv6 addresses that are used for the RDS license server.</p>
    pub fn set_ipv6_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipv6_address = input;
        self
    }
    /// <p>A list of domain IPv6 addresses that are used for the RDS license server.</p>
    pub fn get_ipv6_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipv6_address
    }
    /// Consumes the builder and constructs a [`LicenseServer`](crate::types::LicenseServer).
    pub fn build(self) -> crate::types::LicenseServer {
        crate::types::LicenseServer {
            provisioning_status: self.provisioning_status,
            health_status: self.health_status,
            ipv4_address: self.ipv4_address,
            ipv6_address: self.ipv6_address,
        }
    }
}
