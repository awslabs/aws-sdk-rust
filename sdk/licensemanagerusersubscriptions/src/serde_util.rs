// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn associate_user_output_correct_errors(
    mut builder: crate::operation::associate_user::builders::AssociateUserOutputBuilder,
) -> crate::operation::associate_user::builders::AssociateUserOutputBuilder {
    if builder.instance_user_summary.is_none() {
        builder.instance_user_summary = {
            let builder = crate::types::builders::InstanceUserSummaryBuilder::default();
            crate::serde_util::instance_user_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn deregister_identity_provider_output_correct_errors(
    mut builder: crate::operation::deregister_identity_provider::builders::DeregisterIdentityProviderOutputBuilder,
) -> crate::operation::deregister_identity_provider::builders::DeregisterIdentityProviderOutputBuilder {
    if builder.identity_provider_summary.is_none() {
        builder.identity_provider_summary = {
            let builder = crate::types::builders::IdentityProviderSummaryBuilder::default();
            crate::serde_util::identity_provider_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn disassociate_user_output_correct_errors(
    mut builder: crate::operation::disassociate_user::builders::DisassociateUserOutputBuilder,
) -> crate::operation::disassociate_user::builders::DisassociateUserOutputBuilder {
    if builder.instance_user_summary.is_none() {
        builder.instance_user_summary = {
            let builder = crate::types::builders::InstanceUserSummaryBuilder::default();
            crate::serde_util::instance_user_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_identity_providers_output_correct_errors(
    mut builder: crate::operation::list_identity_providers::builders::ListIdentityProvidersOutputBuilder,
) -> crate::operation::list_identity_providers::builders::ListIdentityProvidersOutputBuilder {
    if builder.identity_provider_summaries.is_none() {
        builder.identity_provider_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn register_identity_provider_output_correct_errors(
    mut builder: crate::operation::register_identity_provider::builders::RegisterIdentityProviderOutputBuilder,
) -> crate::operation::register_identity_provider::builders::RegisterIdentityProviderOutputBuilder {
    if builder.identity_provider_summary.is_none() {
        builder.identity_provider_summary = {
            let builder = crate::types::builders::IdentityProviderSummaryBuilder::default();
            crate::serde_util::identity_provider_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn start_product_subscription_output_correct_errors(
    mut builder: crate::operation::start_product_subscription::builders::StartProductSubscriptionOutputBuilder,
) -> crate::operation::start_product_subscription::builders::StartProductSubscriptionOutputBuilder {
    if builder.product_user_summary.is_none() {
        builder.product_user_summary = {
            let builder = crate::types::builders::ProductUserSummaryBuilder::default();
            crate::serde_util::product_user_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn stop_product_subscription_output_correct_errors(
    mut builder: crate::operation::stop_product_subscription::builders::StopProductSubscriptionOutputBuilder,
) -> crate::operation::stop_product_subscription::builders::StopProductSubscriptionOutputBuilder {
    if builder.product_user_summary.is_none() {
        builder.product_user_summary = {
            let builder = crate::types::builders::ProductUserSummaryBuilder::default();
            crate::serde_util::product_user_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_identity_provider_settings_output_correct_errors(
    mut builder: crate::operation::update_identity_provider_settings::builders::UpdateIdentityProviderSettingsOutputBuilder,
) -> crate::operation::update_identity_provider_settings::builders::UpdateIdentityProviderSettingsOutputBuilder {
    if builder.identity_provider_summary.is_none() {
        builder.identity_provider_summary = {
            let builder = crate::types::builders::IdentityProviderSummaryBuilder::default();
            crate::serde_util::identity_provider_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn instance_user_summary_correct_errors(
    mut builder: crate::types::builders::InstanceUserSummaryBuilder,
) -> crate::types::builders::InstanceUserSummaryBuilder {
    if builder.username.is_none() {
        builder.username = Some(Default::default())
    }
    if builder.instance_id.is_none() {
        builder.instance_id = Some(Default::default())
    }
    if builder.identity_provider.is_none() {
        builder.identity_provider = Some(crate::types::IdentityProvider::Unknown)
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    builder
}

pub(crate) fn identity_provider_summary_correct_errors(
    mut builder: crate::types::builders::IdentityProviderSummaryBuilder,
) -> crate::types::builders::IdentityProviderSummaryBuilder {
    if builder.identity_provider.is_none() {
        builder.identity_provider = Some(crate::types::IdentityProvider::Unknown)
    }
    if builder.settings.is_none() {
        builder.settings = {
            let builder = crate::types::builders::SettingsBuilder::default();
            crate::serde_util::settings_correct_errors(builder).build().ok()
        }
    }
    if builder.product.is_none() {
        builder.product = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    builder
}

pub(crate) fn product_user_summary_correct_errors(
    mut builder: crate::types::builders::ProductUserSummaryBuilder,
) -> crate::types::builders::ProductUserSummaryBuilder {
    if builder.username.is_none() {
        builder.username = Some(Default::default())
    }
    if builder.product.is_none() {
        builder.product = Some(Default::default())
    }
    if builder.identity_provider.is_none() {
        builder.identity_provider = Some(crate::types::IdentityProvider::Unknown)
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    builder
}

pub(crate) fn settings_correct_errors(mut builder: crate::types::builders::SettingsBuilder) -> crate::types::builders::SettingsBuilder {
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    if builder.security_group_id.is_none() {
        builder.security_group_id = Some(Default::default())
    }
    builder
}

pub(crate) fn instance_summary_correct_errors(
    mut builder: crate::types::builders::InstanceSummaryBuilder,
) -> crate::types::builders::InstanceSummaryBuilder {
    if builder.instance_id.is_none() {
        builder.instance_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.products.is_none() {
        builder.products = Some(Default::default())
    }
    builder
}
