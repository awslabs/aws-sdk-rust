// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetFunctionConfiguration`](crate::operation::get_function_configuration::builders::GetFunctionConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`function_name(impl Into<String>)`](crate::operation::get_function_configuration::builders::GetFunctionConfigurationFluentBuilder::function_name) / [`set_function_name(Option<String>)`](crate::operation::get_function_configuration::builders::GetFunctionConfigurationFluentBuilder::set_function_name): <p>The name of the Lambda function, version, or alias.</p>  <p class="title"> <b>Name formats</b> </p>  <ul>   <li> <p> <b>Function name</b> – <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li>   <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li>   <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li>  </ul>  <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
    ///   - [`qualifier(impl Into<String>)`](crate::operation::get_function_configuration::builders::GetFunctionConfigurationFluentBuilder::qualifier) / [`set_qualifier(Option<String>)`](crate::operation::get_function_configuration::builders::GetFunctionConfigurationFluentBuilder::set_qualifier): <p>Specify a version or alias to get details about a published version of the function.</p>
    /// - On success, responds with [`GetFunctionConfigurationOutput`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput) with field(s):
    ///   - [`function_name(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::function_name): <p>The name of the function.</p>
    ///   - [`function_arn(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::function_arn): <p>The function's Amazon Resource Name (ARN).</p>
    ///   - [`runtime(Option<Runtime>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::runtime): <p>The runtime environment for the Lambda function.</p>
    ///   - [`role(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::role): <p>The function's execution role.</p>
    ///   - [`handler(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::handler): <p>The function that Lambda calls to begin running your function.</p>
    ///   - [`code_size(i64)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::code_size): <p>The size of the function's deployment package, in bytes.</p>
    ///   - [`description(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::description): <p>The function's description.</p>
    ///   - [`timeout(Option<i32>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::timeout): <p>The amount of time in seconds that Lambda allows a function to run before stopping it.</p>
    ///   - [`memory_size(Option<i32>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::memory_size): <p>The amount of memory available to the function at runtime.</p>
    ///   - [`last_modified(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::last_modified): <p>The date and time that the function was last updated, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
    ///   - [`code_sha256(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::code_sha256): <p>The SHA256 hash of the function's deployment package.</p>
    ///   - [`version(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::version): <p>The version of the Lambda function.</p>
    ///   - [`vpc_config(Option<VpcConfigResponse>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::vpc_config): <p>The function's networking configuration.</p>
    ///   - [`dead_letter_config(Option<DeadLetterConfig>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::dead_letter_config): <p>The function's dead letter queue.</p>
    ///   - [`environment(Option<EnvironmentResponse>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::environment): <p>The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html">environment variables</a>. Omitted from CloudTrail logs.</p>
    ///   - [`kms_key_arn(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::kms_key_arn): <p>The KMS key that's used to encrypt the function's environment variables. This key is returned only if you've configured a customer managed key.</p>
    ///   - [`tracing_config(Option<TracingConfigResponse>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::tracing_config): <p>The function's X-Ray tracing configuration.</p>
    ///   - [`master_arn(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::master_arn): <p>For Lambda@Edge functions, the ARN of the main function.</p>
    ///   - [`revision_id(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::revision_id): <p>The latest updated revision of the function or alias.</p>
    ///   - [`layers(Option<Vec<Layer>>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::layers): <p>The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">layers</a>.</p>
    ///   - [`state(Option<State>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::state): <p>The current state of the function. When the state is <code>Inactive</code>, you can reactivate the function by invoking it.</p>
    ///   - [`state_reason(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::state_reason): <p>The reason for the function's current state.</p>
    ///   - [`state_reason_code(Option<StateReasonCode>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::state_reason_code): <p>The reason code for the function's current state. When the code is <code>Creating</code>, you can't invoke or modify the function.</p>
    ///   - [`last_update_status(Option<LastUpdateStatus>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::last_update_status): <p>The status of the last update that was performed on the function. This is first set to <code>Successful</code> after function creation completes.</p>
    ///   - [`last_update_status_reason(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::last_update_status_reason): <p>The reason for the last update that was performed on the function.</p>
    ///   - [`last_update_status_reason_code(Option<LastUpdateStatusReasonCode>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::last_update_status_reason_code): <p>The reason code for the last update that was performed on the function.</p>
    ///   - [`file_system_configs(Option<Vec<FileSystemConfig>>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::file_system_configs): <p>Connection settings for an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html">Amazon EFS file system</a>.</p>
    ///   - [`package_type(Option<PackageType>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::package_type): <p>The type of deployment package. Set to <code>Image</code> for container image and set <code>Zip</code> for .zip file archive.</p>
    ///   - [`image_config_response(Option<ImageConfigResponse>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::image_config_response): <p>The function's image configuration values.</p>
    ///   - [`signing_profile_version_arn(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::signing_profile_version_arn): <p>The ARN of the signing profile version.</p>
    ///   - [`signing_job_arn(Option<String>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::signing_job_arn): <p>The ARN of the signing job.</p>
    ///   - [`architectures(Option<Vec<Architecture>>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::architectures): <p>The instruction set architecture that the function supports. Architecture is a string array with one of the valid values. The default architecture value is <code>x86_64</code>.</p>
    ///   - [`ephemeral_storage(Option<EphemeralStorage>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::ephemeral_storage): <p>The size of the function’s <code>/tmp</code> directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.</p>
    ///   - [`snap_start(Option<SnapStartResponse>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::snap_start): <p>Set <code>ApplyOn</code> to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html">Improving startup performance with Lambda SnapStart</a>.</p>
    ///   - [`runtime_version_config(Option<RuntimeVersionConfig>)`](crate::operation::get_function_configuration::GetFunctionConfigurationOutput::runtime_version_config): <p>The ARN of the runtime and any errors that occured.</p>
    /// - On failure, responds with [`SdkError<GetFunctionConfigurationError>`](crate::operation::get_function_configuration::GetFunctionConfigurationError)
    pub fn get_function_configuration(
        &self,
    ) -> crate::operation::get_function_configuration::builders::GetFunctionConfigurationFluentBuilder
    {
        crate::operation::get_function_configuration::builders::GetFunctionConfigurationFluentBuilder::new(self.handle.clone())
    }
}
