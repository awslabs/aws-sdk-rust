// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteFunctionUrlConfig`](crate::operation::delete_function_url_config::builders::DeleteFunctionUrlConfigFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`function_name(impl Into<String>)`](crate::operation::delete_function_url_config::builders::DeleteFunctionUrlConfigFluentBuilder::function_name) / [`set_function_name(Option<String>)`](crate::operation::delete_function_url_config::builders::DeleteFunctionUrlConfigFluentBuilder::set_function_name): <p>The name of the Lambda function.</p>  <p class="title"> <b>Name formats</b> </p>  <ul>   <li> <p> <b>Function name</b> – <code>my-function</code>.</p> </li>   <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li>   <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li>  </ul>  <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
    ///   - [`qualifier(impl Into<String>)`](crate::operation::delete_function_url_config::builders::DeleteFunctionUrlConfigFluentBuilder::qualifier) / [`set_qualifier(Option<String>)`](crate::operation::delete_function_url_config::builders::DeleteFunctionUrlConfigFluentBuilder::set_qualifier): <p>The alias name.</p>
    /// - On success, responds with [`DeleteFunctionUrlConfigOutput`](crate::operation::delete_function_url_config::DeleteFunctionUrlConfigOutput)
    /// - On failure, responds with [`SdkError<DeleteFunctionUrlConfigError>`](crate::operation::delete_function_url_config::DeleteFunctionUrlConfigError)
    pub fn delete_function_url_config(
        &self,
    ) -> crate::operation::delete_function_url_config::builders::DeleteFunctionUrlConfigFluentBuilder
    {
        crate::operation::delete_function_url_config::builders::DeleteFunctionUrlConfigFluentBuilder::new(self.handle.clone())
    }
}
