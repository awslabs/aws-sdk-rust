// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateFunctionCode`](crate::client::fluent_builders::UpdateFunctionCode) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`function_name(impl Into<String>)`](crate::client::fluent_builders::UpdateFunctionCode::function_name) / [`set_function_name(Option<String>)`](crate::client::fluent_builders::UpdateFunctionCode::set_function_name): <p>The name of the Lambda function.</p>  <p class="title"> <b>Name formats</b> </p>  <ul>   <li> <p> <b>Function name</b> – <code>my-function</code>.</p> </li>   <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li>   <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li>  </ul>  <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
    ///   - [`zip_file(Blob)`](crate::client::fluent_builders::UpdateFunctionCode::zip_file) / [`set_zip_file(Option<Blob>)`](crate::client::fluent_builders::UpdateFunctionCode::set_zip_file): <p>The base64-encoded contents of the deployment package. Amazon Web Services SDK and CLI clients handle the encoding for you. Use only with a function defined with a .zip file archive deployment package.</p>
    ///   - [`s3_bucket(impl Into<String>)`](crate::client::fluent_builders::UpdateFunctionCode::s3_bucket) / [`set_s3_bucket(Option<String>)`](crate::client::fluent_builders::UpdateFunctionCode::set_s3_bucket): <p>An Amazon S3 bucket in the same Amazon Web Services Region as your function. The bucket can be in a different Amazon Web Services account. Use only with a function defined with a .zip file archive deployment package.</p>
    ///   - [`s3_key(impl Into<String>)`](crate::client::fluent_builders::UpdateFunctionCode::s3_key) / [`set_s3_key(Option<String>)`](crate::client::fluent_builders::UpdateFunctionCode::set_s3_key): <p>The Amazon S3 key of the deployment package. Use only with a function defined with a .zip file archive deployment package.</p>
    ///   - [`s3_object_version(impl Into<String>)`](crate::client::fluent_builders::UpdateFunctionCode::s3_object_version) / [`set_s3_object_version(Option<String>)`](crate::client::fluent_builders::UpdateFunctionCode::set_s3_object_version): <p>For versioned objects, the version of the deployment package object to use.</p>
    ///   - [`image_uri(impl Into<String>)`](crate::client::fluent_builders::UpdateFunctionCode::image_uri) / [`set_image_uri(Option<String>)`](crate::client::fluent_builders::UpdateFunctionCode::set_image_uri): <p>URI of a container image in the Amazon ECR registry. Do not use for a function defined with a .zip file archive.</p>
    ///   - [`publish(bool)`](crate::client::fluent_builders::UpdateFunctionCode::publish) / [`set_publish(bool)`](crate::client::fluent_builders::UpdateFunctionCode::set_publish): <p>Set to true to publish a new version of the function after updating the code. This has the same effect as calling <code>PublishVersion</code> separately.</p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::UpdateFunctionCode::dry_run) / [`set_dry_run(bool)`](crate::client::fluent_builders::UpdateFunctionCode::set_dry_run): <p>Set to true to validate the request parameters and access permissions without modifying the function code.</p>
    ///   - [`revision_id(impl Into<String>)`](crate::client::fluent_builders::UpdateFunctionCode::revision_id) / [`set_revision_id(Option<String>)`](crate::client::fluent_builders::UpdateFunctionCode::set_revision_id): <p>Update the function only if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.</p>
    ///   - [`architectures(Vec<Architecture>)`](crate::client::fluent_builders::UpdateFunctionCode::architectures) / [`set_architectures(Option<Vec<Architecture>>)`](crate::client::fluent_builders::UpdateFunctionCode::set_architectures): <p>The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is <code>x86_64</code>.</p>
    /// - On success, responds with [`UpdateFunctionCodeOutput`](crate::output::UpdateFunctionCodeOutput) with field(s):
    ///   - [`function_name(Option<String>)`](crate::output::UpdateFunctionCodeOutput::function_name): <p>The name of the function.</p>
    ///   - [`function_arn(Option<String>)`](crate::output::UpdateFunctionCodeOutput::function_arn): <p>The function's Amazon Resource Name (ARN).</p>
    ///   - [`runtime(Option<Runtime>)`](crate::output::UpdateFunctionCodeOutput::runtime): <p>The runtime environment for the Lambda function.</p>
    ///   - [`role(Option<String>)`](crate::output::UpdateFunctionCodeOutput::role): <p>The function's execution role.</p>
    ///   - [`handler(Option<String>)`](crate::output::UpdateFunctionCodeOutput::handler): <p>The function that Lambda calls to begin running your function.</p>
    ///   - [`code_size(i64)`](crate::output::UpdateFunctionCodeOutput::code_size): <p>The size of the function's deployment package, in bytes.</p>
    ///   - [`description(Option<String>)`](crate::output::UpdateFunctionCodeOutput::description): <p>The function's description.</p>
    ///   - [`timeout(Option<i32>)`](crate::output::UpdateFunctionCodeOutput::timeout): <p>The amount of time in seconds that Lambda allows a function to run before stopping it.</p>
    ///   - [`memory_size(Option<i32>)`](crate::output::UpdateFunctionCodeOutput::memory_size): <p>The amount of memory available to the function at runtime.</p>
    ///   - [`last_modified(Option<String>)`](crate::output::UpdateFunctionCodeOutput::last_modified): <p>The date and time that the function was last updated, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
    ///   - [`code_sha256(Option<String>)`](crate::output::UpdateFunctionCodeOutput::code_sha256): <p>The SHA256 hash of the function's deployment package.</p>
    ///   - [`version(Option<String>)`](crate::output::UpdateFunctionCodeOutput::version): <p>The version of the Lambda function.</p>
    ///   - [`vpc_config(Option<VpcConfigResponse>)`](crate::output::UpdateFunctionCodeOutput::vpc_config): <p>The function's networking configuration.</p>
    ///   - [`dead_letter_config(Option<DeadLetterConfig>)`](crate::output::UpdateFunctionCodeOutput::dead_letter_config): <p>The function's dead letter queue.</p>
    ///   - [`environment(Option<EnvironmentResponse>)`](crate::output::UpdateFunctionCodeOutput::environment): <p>The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html">environment variables</a>. Omitted from CloudTrail logs.</p>
    ///   - [`kms_key_arn(Option<String>)`](crate::output::UpdateFunctionCodeOutput::kms_key_arn): <p>The KMS key that's used to encrypt the function's environment variables. This key is returned only if you've configured a customer managed key.</p>
    ///   - [`tracing_config(Option<TracingConfigResponse>)`](crate::output::UpdateFunctionCodeOutput::tracing_config): <p>The function's X-Ray tracing configuration.</p>
    ///   - [`master_arn(Option<String>)`](crate::output::UpdateFunctionCodeOutput::master_arn): <p>For Lambda@Edge functions, the ARN of the main function.</p>
    ///   - [`revision_id(Option<String>)`](crate::output::UpdateFunctionCodeOutput::revision_id): <p>The latest updated revision of the function or alias.</p>
    ///   - [`layers(Option<Vec<Layer>>)`](crate::output::UpdateFunctionCodeOutput::layers): <p>The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">layers</a>.</p>
    ///   - [`state(Option<State>)`](crate::output::UpdateFunctionCodeOutput::state): <p>The current state of the function. When the state is <code>Inactive</code>, you can reactivate the function by invoking it.</p>
    ///   - [`state_reason(Option<String>)`](crate::output::UpdateFunctionCodeOutput::state_reason): <p>The reason for the function's current state.</p>
    ///   - [`state_reason_code(Option<StateReasonCode>)`](crate::output::UpdateFunctionCodeOutput::state_reason_code): <p>The reason code for the function's current state. When the code is <code>Creating</code>, you can't invoke or modify the function.</p>
    ///   - [`last_update_status(Option<LastUpdateStatus>)`](crate::output::UpdateFunctionCodeOutput::last_update_status): <p>The status of the last update that was performed on the function. This is first set to <code>Successful</code> after function creation completes.</p>
    ///   - [`last_update_status_reason(Option<String>)`](crate::output::UpdateFunctionCodeOutput::last_update_status_reason): <p>The reason for the last update that was performed on the function.</p>
    ///   - [`last_update_status_reason_code(Option<LastUpdateStatusReasonCode>)`](crate::output::UpdateFunctionCodeOutput::last_update_status_reason_code): <p>The reason code for the last update that was performed on the function.</p>
    ///   - [`file_system_configs(Option<Vec<FileSystemConfig>>)`](crate::output::UpdateFunctionCodeOutput::file_system_configs): <p>Connection settings for an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html">Amazon EFS file system</a>.</p>
    ///   - [`package_type(Option<PackageType>)`](crate::output::UpdateFunctionCodeOutput::package_type): <p>The type of deployment package. Set to <code>Image</code> for container image and set <code>Zip</code> for .zip file archive.</p>
    ///   - [`image_config_response(Option<ImageConfigResponse>)`](crate::output::UpdateFunctionCodeOutput::image_config_response): <p>The function's image configuration values.</p>
    ///   - [`signing_profile_version_arn(Option<String>)`](crate::output::UpdateFunctionCodeOutput::signing_profile_version_arn): <p>The ARN of the signing profile version.</p>
    ///   - [`signing_job_arn(Option<String>)`](crate::output::UpdateFunctionCodeOutput::signing_job_arn): <p>The ARN of the signing job.</p>
    ///   - [`architectures(Option<Vec<Architecture>>)`](crate::output::UpdateFunctionCodeOutput::architectures): <p>The instruction set architecture that the function supports. Architecture is a string array with one of the valid values. The default architecture value is <code>x86_64</code>.</p>
    ///   - [`ephemeral_storage(Option<EphemeralStorage>)`](crate::output::UpdateFunctionCodeOutput::ephemeral_storage): <p>The size of the function’s <code>/tmp</code> directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.</p>
    ///   - [`snap_start(Option<SnapStartResponse>)`](crate::output::UpdateFunctionCodeOutput::snap_start): <p>Set <code>ApplyOn</code> to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html">Improving startup performance with Lambda SnapStart</a>.</p>
    ///   - [`runtime_version_config(Option<RuntimeVersionConfig>)`](crate::output::UpdateFunctionCodeOutput::runtime_version_config): <p>The ARN of the runtime and any errors that occured.</p>
    /// - On failure, responds with [`SdkError<UpdateFunctionCodeError>`](crate::error::UpdateFunctionCodeError)
    pub fn update_function_code(&self) -> crate::client::fluent_builders::UpdateFunctionCode {
        crate::client::fluent_builders::UpdateFunctionCode::new(self.handle.clone())
    }
}
