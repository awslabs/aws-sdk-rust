// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutFunctionConcurrency`](crate::client::fluent_builders::PutFunctionConcurrency) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`function_name(impl Into<String>)`](crate::client::fluent_builders::PutFunctionConcurrency::function_name) / [`set_function_name(Option<String>)`](crate::client::fluent_builders::PutFunctionConcurrency::set_function_name): <p>The name of the Lambda function.</p>  <p class="title"> <b>Name formats</b> </p>  <ul>   <li> <p> <b>Function name</b> – <code>my-function</code>.</p> </li>   <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li>   <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li>  </ul>  <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
    ///   - [`reserved_concurrent_executions(i32)`](crate::client::fluent_builders::PutFunctionConcurrency::reserved_concurrent_executions) / [`set_reserved_concurrent_executions(Option<i32>)`](crate::client::fluent_builders::PutFunctionConcurrency::set_reserved_concurrent_executions): <p>The number of simultaneous executions to reserve for the function.</p>
    /// - On success, responds with [`PutFunctionConcurrencyOutput`](crate::output::PutFunctionConcurrencyOutput) with field(s):
    ///   - [`reserved_concurrent_executions(Option<i32>)`](crate::output::PutFunctionConcurrencyOutput::reserved_concurrent_executions): <p>The number of concurrent executions that are reserved for this function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html">Managing Lambda reserved concurrency</a>.</p>
    /// - On failure, responds with [`SdkError<PutFunctionConcurrencyError>`](crate::error::PutFunctionConcurrencyError)
    pub fn put_function_concurrency(
        &self,
    ) -> crate::client::fluent_builders::PutFunctionConcurrency {
        crate::client::fluent_builders::PutFunctionConcurrency::new(self.handle.clone())
    }
}
