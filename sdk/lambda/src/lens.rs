// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_aliases_output_next_marker(
    input: &crate::output::ListAliasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_code_signing_configs_output_next_marker(
    input: &crate::output::ListCodeSigningConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_event_source_mappings_output_next_marker(
    input: &crate::output::ListEventSourceMappingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_function_event_invoke_configs_output_next_marker(
    input: &crate::output::ListFunctionEventInvokeConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_functions_output_next_marker(
    input: &crate::output::ListFunctionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_functions_by_code_signing_config_output_next_marker(
    input: &crate::output::ListFunctionsByCodeSigningConfigOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_function_url_configs_output_next_marker(
    input: &crate::output::ListFunctionUrlConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_layers_output_next_marker(
    input: &crate::output::ListLayersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_layer_versions_output_next_marker(
    input: &crate::output::ListLayerVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_provisioned_concurrency_configs_output_next_marker(
    input: &crate::output::ListProvisionedConcurrencyConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_versions_by_function_output_next_marker(
    input: &crate::output::ListVersionsByFunctionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_aliases_output_aliases(
    input: crate::output::ListAliasesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AliasConfiguration>> {
    let input = match input.aliases {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_code_signing_configs_output_code_signing_configs(
    input: crate::output::ListCodeSigningConfigsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CodeSigningConfig>> {
    let input = match input.code_signing_configs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_event_source_mappings_output_event_source_mappings(
    input: crate::output::ListEventSourceMappingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EventSourceMappingConfiguration>> {
    let input = match input.event_source_mappings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_function_event_invoke_configs_output_function_event_invoke_configs(
    input: crate::output::ListFunctionEventInvokeConfigsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FunctionEventInvokeConfig>> {
    let input = match input.function_event_invoke_configs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_functions_output_functions(
    input: crate::output::ListFunctionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FunctionConfiguration>> {
    let input = match input.functions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_functions_by_code_signing_config_output_function_arns(
    input: crate::output::ListFunctionsByCodeSigningConfigOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.function_arns {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_function_url_configs_output_function_url_configs(
    input: crate::output::ListFunctionUrlConfigsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FunctionUrlConfig>> {
    let input = match input.function_url_configs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_layers_output_layers(
    input: crate::output::ListLayersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LayersListItem>> {
    let input = match input.layers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_layer_versions_output_layer_versions(
    input: crate::output::ListLayerVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LayerVersionsListItem>> {
    let input = match input.layer_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_provisioned_concurrency_configs_output_provisioned_concurrency_configs(
    input: crate::output::ListProvisionedConcurrencyConfigsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ProvisionedConcurrencyConfigListItem>> {
    let input = match input.provisioned_concurrency_configs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_versions_by_function_output_versions(
    input: crate::output::ListVersionsByFunctionOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FunctionConfiguration>> {
    let input = match input.versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
