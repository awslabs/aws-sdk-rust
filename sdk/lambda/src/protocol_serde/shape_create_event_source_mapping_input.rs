// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_event_source_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_event_source_mapping::CreateEventSourceMappingInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.amazon_managed_kafka_event_source_config {
        #[allow(unused_mut)]
        let mut object_2 = object
            .key("AmazonManagedKafkaEventSourceConfig")
            .start_object();
        crate::protocol_serde::shape_amazon_managed_kafka_event_source_config::ser_amazon_managed_kafka_event_source_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.batch_size {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.bisect_batch_on_function_error {
        object.key("BisectBatchOnFunctionError").boolean(*var_4);
    }
    if let Some(var_5) = &input.destination_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("DestinationConfig").start_object();
        crate::protocol_serde::shape_destination_config::ser_destination_config(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.enabled {
        object.key("Enabled").boolean(*var_7);
    }
    if let Some(var_8) = &input.event_source_arn {
        object.key("EventSourceArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.filter_criteria {
        #[allow(unused_mut)]
        let mut object_10 = object.key("FilterCriteria").start_object();
        crate::protocol_serde::shape_filter_criteria::ser_filter_criteria(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.function_name {
        object.key("FunctionName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.function_response_types {
        let mut array_13 = object.key("FunctionResponseTypes").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.maximum_batching_window_in_seconds {
        object.key("MaximumBatchingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.maximum_record_age_in_seconds {
        object.key("MaximumRecordAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.parallelization_factor {
        object.key("ParallelizationFactor").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.queues {
        let mut array_20 = object.key("Queues").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.scaling_config {
        #[allow(unused_mut)]
        let mut object_23 = object.key("ScalingConfig").start_object();
        crate::protocol_serde::shape_scaling_config::ser_scaling_config(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.self_managed_event_source {
        #[allow(unused_mut)]
        let mut object_25 = object.key("SelfManagedEventSource").start_object();
        crate::protocol_serde::shape_self_managed_event_source::ser_self_managed_event_source(
            &mut object_25,
            var_24,
        )?;
        object_25.finish();
    }
    if let Some(var_26) = &input.self_managed_kafka_event_source_config {
        #[allow(unused_mut)]
        let mut object_27 = object
            .key("SelfManagedKafkaEventSourceConfig")
            .start_object();
        crate::protocol_serde::shape_self_managed_kafka_event_source_config::ser_self_managed_kafka_event_source_config(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.source_access_configurations {
        let mut array_29 = object.key("SourceAccessConfigurations").start_array();
        for item_30 in var_28 {
            {
                #[allow(unused_mut)]
                let mut object_31 = array_29.value().start_object();
                crate::protocol_serde::shape_source_access_configuration::ser_source_access_configuration(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.starting_position {
        object.key("StartingPosition").string(var_32.as_str());
    }
    if let Some(var_33) = &input.starting_position_timestamp {
        object
            .key("StartingPositionTimestamp")
            .date_time(var_33, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_34) = &input.topics {
        let mut array_35 = object.key("Topics").start_array();
        for item_36 in var_34 {
            {
                array_35.value().string(item_36.as_str());
            }
        }
        array_35.finish();
    }
    if let Some(var_37) = &input.tumbling_window_in_seconds {
        object.key("TumblingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    Ok(())
}
