// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_function_code_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_function_code::UpdateFunctionCodeInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.architectures {
        let mut array_2 = object.key("Architectures").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.dry_run {
        object.key("DryRun").boolean(*var_4);
    }
    if let Some(var_5) = &input.image_uri {
        object.key("ImageUri").string(var_5.as_str());
    }
    if let Some(var_6) = &input.publish {
        object.key("Publish").boolean(*var_6);
    }
    if let Some(var_7) = &input.revision_id {
        object.key("RevisionId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.s3_bucket {
        object.key("S3Bucket").string(var_8.as_str());
    }
    if let Some(var_9) = &input.s3_key {
        object.key("S3Key").string(var_9.as_str());
    }
    if let Some(var_10) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_10.as_str());
    }
    if let Some(var_11) = &input.zip_file {
        object.key("ZipFile").string_unchecked(&::aws_smithy_types::base64::encode(var_11));
    }
    Ok(())
}
