// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_function_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_function_configuration::UpdateFunctionConfigurationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.dead_letter_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("DeadLetterConfig").start_object();
        crate::protocol_serde::shape_dead_letter_config::ser_dead_letter_config(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.description {
        object.key("Description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.environment {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Environment").start_object();
        crate::protocol_serde::shape_environment::ser_environment(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.ephemeral_storage {
        #[allow(unused_mut)]
        let mut object_7 = object.key("EphemeralStorage").start_object();
        crate::protocol_serde::shape_ephemeral_storage::ser_ephemeral_storage(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.file_system_configs {
        let mut array_9 = object.key("FileSystemConfigs").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_file_system_config::ser_file_system_config(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.handler {
        object.key("Handler").string(var_12.as_str());
    }
    if let Some(var_13) = &input.image_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ImageConfig").start_object();
        crate::protocol_serde::shape_image_config::ser_image_config(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_15.as_str());
    }
    if let Some(var_16) = &input.layers {
        let mut array_17 = object.key("Layers").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.memory_size {
        object.key("MemorySize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.revision_id {
        object.key("RevisionId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.role {
        object.key("Role").string(var_21.as_str());
    }
    if let Some(var_22) = &input.runtime {
        object.key("Runtime").string(var_22.as_str());
    }
    if let Some(var_23) = &input.snap_start {
        #[allow(unused_mut)]
        let mut object_24 = object.key("SnapStart").start_object();
        crate::protocol_serde::shape_snap_start::ser_snap_start(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    if let Some(var_26) = &input.tracing_config {
        #[allow(unused_mut)]
        let mut object_27 = object.key("TracingConfig").start_object();
        crate::protocol_serde::shape_tracing_config::ser_tracing_config(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_29 = object.key("VpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_29, var_28)?;
        object_29.finish();
    }
    Ok(())
}
