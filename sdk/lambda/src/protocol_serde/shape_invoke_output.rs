// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_executed_version_header(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("X-Amz-Executed-Version").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_function_error_header(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("X-Amz-Function-Error").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_log_result_header(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("X-Amz-Log-Result").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn de_payload_payload(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<aws_smithy_types::Blob>,
    crate::operation::invoke::InvokeError,
> {
    (!body.is_empty())
        .then(|| Ok(aws_smithy_types::Blob::new(body)))
        .transpose()
}
