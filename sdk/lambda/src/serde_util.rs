// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_code_signing_config_output_correct_errors(
    mut builder: crate::operation::create_code_signing_config::builders::CreateCodeSigningConfigOutputBuilder,
) -> crate::operation::create_code_signing_config::builders::CreateCodeSigningConfigOutputBuilder {
    if builder.code_signing_config.is_none() {
        builder.code_signing_config = {
            let builder = crate::types::builders::CodeSigningConfigBuilder::default();
            crate::serde_util::code_signing_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_function_url_config_output_correct_errors(
    mut builder: crate::operation::create_function_url_config::builders::CreateFunctionUrlConfigOutputBuilder,
) -> crate::operation::create_function_url_config::builders::CreateFunctionUrlConfigOutputBuilder {
    if builder.function_url.is_none() {
        builder.function_url = Some(Default::default())
    }
    if builder.function_arn.is_none() {
        builder.function_arn = Some(Default::default())
    }
    if builder.auth_type.is_none() {
        builder.auth_type = "no value was set".parse::<crate::types::FunctionUrlAuthType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(Default::default())
    }
    builder
}

pub(crate) fn get_code_signing_config_output_correct_errors(
    mut builder: crate::operation::get_code_signing_config::builders::GetCodeSigningConfigOutputBuilder,
) -> crate::operation::get_code_signing_config::builders::GetCodeSigningConfigOutputBuilder {
    if builder.code_signing_config.is_none() {
        builder.code_signing_config = {
            let builder = crate::types::builders::CodeSigningConfigBuilder::default();
            crate::serde_util::code_signing_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_function_code_signing_config_output_correct_errors(
    mut builder: crate::operation::get_function_code_signing_config::builders::GetFunctionCodeSigningConfigOutputBuilder,
) -> crate::operation::get_function_code_signing_config::builders::GetFunctionCodeSigningConfigOutputBuilder {
    if builder.code_signing_config_arn.is_none() {
        builder.code_signing_config_arn = Some(Default::default())
    }
    if builder.function_name.is_none() {
        builder.function_name = Some(Default::default())
    }
    builder
}

pub(crate) fn get_function_url_config_output_correct_errors(
    mut builder: crate::operation::get_function_url_config::builders::GetFunctionUrlConfigOutputBuilder,
) -> crate::operation::get_function_url_config::builders::GetFunctionUrlConfigOutputBuilder {
    if builder.function_url.is_none() {
        builder.function_url = Some(Default::default())
    }
    if builder.function_arn.is_none() {
        builder.function_arn = Some(Default::default())
    }
    if builder.auth_type.is_none() {
        builder.auth_type = "no value was set".parse::<crate::types::FunctionUrlAuthType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(Default::default())
    }
    builder
}

pub(crate) fn list_function_url_configs_output_correct_errors(
    mut builder: crate::operation::list_function_url_configs::builders::ListFunctionUrlConfigsOutputBuilder,
) -> crate::operation::list_function_url_configs::builders::ListFunctionUrlConfigsOutputBuilder {
    if builder.function_url_configs.is_none() {
        builder.function_url_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn put_function_code_signing_config_output_correct_errors(
    mut builder: crate::operation::put_function_code_signing_config::builders::PutFunctionCodeSigningConfigOutputBuilder,
) -> crate::operation::put_function_code_signing_config::builders::PutFunctionCodeSigningConfigOutputBuilder {
    if builder.code_signing_config_arn.is_none() {
        builder.code_signing_config_arn = Some(Default::default())
    }
    if builder.function_name.is_none() {
        builder.function_name = Some(Default::default())
    }
    builder
}

pub(crate) fn put_runtime_management_config_output_correct_errors(
    mut builder: crate::operation::put_runtime_management_config::builders::PutRuntimeManagementConfigOutputBuilder,
) -> crate::operation::put_runtime_management_config::builders::PutRuntimeManagementConfigOutputBuilder {
    if builder.update_runtime_on.is_none() {
        builder.update_runtime_on = "no value was set".parse::<crate::types::UpdateRuntimeOn>().ok()
    }
    if builder.function_arn.is_none() {
        builder.function_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_code_signing_config_output_correct_errors(
    mut builder: crate::operation::update_code_signing_config::builders::UpdateCodeSigningConfigOutputBuilder,
) -> crate::operation::update_code_signing_config::builders::UpdateCodeSigningConfigOutputBuilder {
    if builder.code_signing_config.is_none() {
        builder.code_signing_config = {
            let builder = crate::types::builders::CodeSigningConfigBuilder::default();
            crate::serde_util::code_signing_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_function_url_config_output_correct_errors(
    mut builder: crate::operation::update_function_url_config::builders::UpdateFunctionUrlConfigOutputBuilder,
) -> crate::operation::update_function_url_config::builders::UpdateFunctionUrlConfigOutputBuilder {
    if builder.function_url.is_none() {
        builder.function_url = Some(Default::default())
    }
    if builder.function_arn.is_none() {
        builder.function_arn = Some(Default::default())
    }
    if builder.auth_type.is_none() {
        builder.auth_type = "no value was set".parse::<crate::types::FunctionUrlAuthType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(Default::default())
    }
    builder
}

pub(crate) fn code_signing_config_correct_errors(
    mut builder: crate::types::builders::CodeSigningConfigBuilder,
) -> crate::types::builders::CodeSigningConfigBuilder {
    if builder.code_signing_config_id.is_none() {
        builder.code_signing_config_id = Some(Default::default())
    }
    if builder.code_signing_config_arn.is_none() {
        builder.code_signing_config_arn = Some(Default::default())
    }
    if builder.allowed_publishers.is_none() {
        builder.allowed_publishers = {
            let builder = crate::types::builders::AllowedPublishersBuilder::default();
            crate::serde_util::allowed_publishers_correct_errors(builder).build().ok()
        }
    }
    if builder.code_signing_policies.is_none() {
        builder.code_signing_policies = {
            let builder = crate::types::builders::CodeSigningPoliciesBuilder::default();
            Some(builder.build())
        }
    }
    if builder.last_modified.is_none() {
        builder.last_modified = Some(Default::default())
    }
    builder
}

pub(crate) fn ephemeral_storage_correct_errors(
    mut builder: crate::types::builders::EphemeralStorageBuilder,
) -> crate::types::builders::EphemeralStorageBuilder {
    if builder.size.is_none() {
        builder.size = Some(Default::default())
    }
    builder
}

pub(crate) fn allowed_publishers_correct_errors(
    mut builder: crate::types::builders::AllowedPublishersBuilder,
) -> crate::types::builders::AllowedPublishersBuilder {
    if builder.signing_profile_version_arns.is_none() {
        builder.signing_profile_version_arns = Some(Default::default())
    }
    builder
}

pub(crate) fn file_system_config_correct_errors(
    mut builder: crate::types::builders::FileSystemConfigBuilder,
) -> crate::types::builders::FileSystemConfigBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.local_mount_path.is_none() {
        builder.local_mount_path = Some(Default::default())
    }
    builder
}

pub(crate) fn function_url_config_correct_errors(
    mut builder: crate::types::builders::FunctionUrlConfigBuilder,
) -> crate::types::builders::FunctionUrlConfigBuilder {
    if builder.function_url.is_none() {
        builder.function_url = Some(Default::default())
    }
    if builder.function_arn.is_none() {
        builder.function_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(Default::default())
    }
    if builder.auth_type.is_none() {
        builder.auth_type = "no value was set".parse::<crate::types::FunctionUrlAuthType>().ok()
    }
    builder
}
