// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_add_layer_version_permission_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_add_permission_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_alias_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_event_source_mapping_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_function_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_alias_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_event_source_mapping_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_function_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_function_code_signing_config_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_function_concurrency_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_function_event_invoke_config_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_layer_version_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_provisioned_concurrency_config_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_account_settings_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_alias_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_event_source_mapping_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_function_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_function_code_signing_config_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_function_concurrency_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_function_configuration_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_function_event_invoke_config_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_layer_version_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_layer_version_by_arn_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_layer_version_policy_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_policy_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_provisioned_concurrency_config_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_invoke_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_invoke_executed_version(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("X-Amz-Executed-Version").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_invoke_function_error(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("X-Amz-Function-Error").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_invoke_log_result(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("X-Amz-Log-Result").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_invoke_payload(
    body: &[u8],
) -> std::result::Result<std::option::Option<smithy_types::Blob>, crate::error::InvokeError> {
    (!body.is_empty())
        .then(|| Ok(smithy_types::Blob::new(body)))
        .transpose()
}

pub fn deser_header_list_aliases_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_event_source_mappings_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_function_event_invoke_configs_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_functions_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_layers_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_layer_versions_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_provisioned_concurrency_configs_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_tags_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_list_versions_by_function_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_publish_layer_version_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_publish_version_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_function_code_signing_config_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_function_concurrency_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_function_event_invoke_config_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_provisioned_concurrency_config_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_remove_layer_version_permission_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_remove_permission_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_tag_resource_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_untag_resource_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_alias_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_event_source_mapping_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_function_code_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_function_configuration_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_function_event_invoke_config_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}
