// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Limits that are related to concurrency and storage. All file and storage sizes are in bytes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccountLimit {
    /// <p>The amount of storage space that you can use for all deployment packages and layer archives.</p>
    #[doc(hidden)]
    pub total_code_size: i64,
    /// <p>The maximum size of a function's deployment package and layers when they're extracted.</p>
    #[doc(hidden)]
    pub code_size_unzipped: i64,
    /// <p>The maximum size of a deployment package when it's uploaded directly to Lambda. Use Amazon S3 for larger files.</p>
    #[doc(hidden)]
    pub code_size_zipped: i64,
    /// <p>The maximum number of simultaneous function executions.</p>
    #[doc(hidden)]
    pub concurrent_executions: i32,
    /// <p>The maximum number of simultaneous function executions, minus the capacity that's reserved for individual functions with <code>PutFunctionConcurrency</code>.</p>
    #[doc(hidden)]
    pub unreserved_concurrent_executions: std::option::Option<i32>,
}
impl AccountLimit {
    /// <p>The amount of storage space that you can use for all deployment packages and layer archives.</p>
    pub fn total_code_size(&self) -> i64 {
        self.total_code_size
    }
    /// <p>The maximum size of a function's deployment package and layers when they're extracted.</p>
    pub fn code_size_unzipped(&self) -> i64 {
        self.code_size_unzipped
    }
    /// <p>The maximum size of a deployment package when it's uploaded directly to Lambda. Use Amazon S3 for larger files.</p>
    pub fn code_size_zipped(&self) -> i64 {
        self.code_size_zipped
    }
    /// <p>The maximum number of simultaneous function executions.</p>
    pub fn concurrent_executions(&self) -> i32 {
        self.concurrent_executions
    }
    /// <p>The maximum number of simultaneous function executions, minus the capacity that's reserved for individual functions with <code>PutFunctionConcurrency</code>.</p>
    pub fn unreserved_concurrent_executions(&self) -> std::option::Option<i32> {
        self.unreserved_concurrent_executions
    }
}
impl AccountLimit {
    /// Creates a new builder-style object to manufacture [`AccountLimit`](crate::types::AccountLimit).
    pub fn builder() -> crate::types::builders::AccountLimitBuilder {
        crate::types::builders::AccountLimitBuilder::default()
    }
}

/// A builder for [`AccountLimit`](crate::types::AccountLimit).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AccountLimitBuilder {
    pub(crate) total_code_size: std::option::Option<i64>,
    pub(crate) code_size_unzipped: std::option::Option<i64>,
    pub(crate) code_size_zipped: std::option::Option<i64>,
    pub(crate) concurrent_executions: std::option::Option<i32>,
    pub(crate) unreserved_concurrent_executions: std::option::Option<i32>,
}
impl AccountLimitBuilder {
    /// <p>The amount of storage space that you can use for all deployment packages and layer archives.</p>
    pub fn total_code_size(mut self, input: i64) -> Self {
        self.total_code_size = Some(input);
        self
    }
    /// <p>The amount of storage space that you can use for all deployment packages and layer archives.</p>
    pub fn set_total_code_size(mut self, input: std::option::Option<i64>) -> Self {
        self.total_code_size = input;
        self
    }
    /// <p>The maximum size of a function's deployment package and layers when they're extracted.</p>
    pub fn code_size_unzipped(mut self, input: i64) -> Self {
        self.code_size_unzipped = Some(input);
        self
    }
    /// <p>The maximum size of a function's deployment package and layers when they're extracted.</p>
    pub fn set_code_size_unzipped(mut self, input: std::option::Option<i64>) -> Self {
        self.code_size_unzipped = input;
        self
    }
    /// <p>The maximum size of a deployment package when it's uploaded directly to Lambda. Use Amazon S3 for larger files.</p>
    pub fn code_size_zipped(mut self, input: i64) -> Self {
        self.code_size_zipped = Some(input);
        self
    }
    /// <p>The maximum size of a deployment package when it's uploaded directly to Lambda. Use Amazon S3 for larger files.</p>
    pub fn set_code_size_zipped(mut self, input: std::option::Option<i64>) -> Self {
        self.code_size_zipped = input;
        self
    }
    /// <p>The maximum number of simultaneous function executions.</p>
    pub fn concurrent_executions(mut self, input: i32) -> Self {
        self.concurrent_executions = Some(input);
        self
    }
    /// <p>The maximum number of simultaneous function executions.</p>
    pub fn set_concurrent_executions(mut self, input: std::option::Option<i32>) -> Self {
        self.concurrent_executions = input;
        self
    }
    /// <p>The maximum number of simultaneous function executions, minus the capacity that's reserved for individual functions with <code>PutFunctionConcurrency</code>.</p>
    pub fn unreserved_concurrent_executions(mut self, input: i32) -> Self {
        self.unreserved_concurrent_executions = Some(input);
        self
    }
    /// <p>The maximum number of simultaneous function executions, minus the capacity that's reserved for individual functions with <code>PutFunctionConcurrency</code>.</p>
    pub fn set_unreserved_concurrent_executions(mut self, input: std::option::Option<i32>) -> Self {
        self.unreserved_concurrent_executions = input;
        self
    }
    /// Consumes the builder and constructs a [`AccountLimit`](crate::types::AccountLimit).
    pub fn build(self) -> crate::types::AccountLimit {
        crate::types::AccountLimit {
            total_code_size: self.total_code_size.unwrap_or_default(),
            code_size_unzipped: self.code_size_unzipped.unwrap_or_default(),
            code_size_zipped: self.code_size_zipped.unwrap_or_default(),
            concurrent_executions: self.concurrent_executions.unwrap_or_default(),
            unreserved_concurrent_executions: self.unreserved_concurrent_executions,
        }
    }
}
