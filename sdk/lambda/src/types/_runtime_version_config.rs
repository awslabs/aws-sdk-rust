// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The ARN of the runtime and any errors that occured.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RuntimeVersionConfig {
    /// <p>The ARN of the runtime version you want the function to use.</p>
    #[doc(hidden)]
    pub runtime_version_arn: std::option::Option<std::string::String>,
    /// <p>Error response when Lambda is unable to retrieve the runtime version for a function.</p>
    #[doc(hidden)]
    pub error: std::option::Option<crate::types::RuntimeVersionError>,
}
impl RuntimeVersionConfig {
    /// <p>The ARN of the runtime version you want the function to use.</p>
    pub fn runtime_version_arn(&self) -> std::option::Option<&str> {
        self.runtime_version_arn.as_deref()
    }
    /// <p>Error response when Lambda is unable to retrieve the runtime version for a function.</p>
    pub fn error(&self) -> std::option::Option<&crate::types::RuntimeVersionError> {
        self.error.as_ref()
    }
}
impl RuntimeVersionConfig {
    /// Creates a new builder-style object to manufacture [`RuntimeVersionConfig`](crate::types::RuntimeVersionConfig).
    pub fn builder() -> crate::types::builders::RuntimeVersionConfigBuilder {
        crate::types::builders::RuntimeVersionConfigBuilder::default()
    }
}

/// A builder for [`RuntimeVersionConfig`](crate::types::RuntimeVersionConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RuntimeVersionConfigBuilder {
    pub(crate) runtime_version_arn: std::option::Option<std::string::String>,
    pub(crate) error: std::option::Option<crate::types::RuntimeVersionError>,
}
impl RuntimeVersionConfigBuilder {
    /// <p>The ARN of the runtime version you want the function to use.</p>
    pub fn runtime_version_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.runtime_version_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the runtime version you want the function to use.</p>
    pub fn set_runtime_version_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.runtime_version_arn = input;
        self
    }
    /// <p>Error response when Lambda is unable to retrieve the runtime version for a function.</p>
    pub fn error(mut self, input: crate::types::RuntimeVersionError) -> Self {
        self.error = Some(input);
        self
    }
    /// <p>Error response when Lambda is unable to retrieve the runtime version for a function.</p>
    pub fn set_error(
        mut self,
        input: std::option::Option<crate::types::RuntimeVersionError>,
    ) -> Self {
        self.error = input;
        self
    }
    /// Consumes the builder and constructs a [`RuntimeVersionConfig`](crate::types::RuntimeVersionConfig).
    pub fn build(self) -> crate::types::RuntimeVersionConfig {
        crate::types::RuntimeVersionConfig {
            runtime_version_arn: self.runtime_version_arn,
            error: self.error,
        }
    }
}
