// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>(Amazon SQS only) The scaling configuration for the event source. To remove the configuration, pass an empty value.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScalingConfig {
    /// <p>Limits the number of concurrent instances that the Amazon SQS event source can invoke.</p>
    #[doc(hidden)]
    pub maximum_concurrency: std::option::Option<i32>,
}
impl ScalingConfig {
    /// <p>Limits the number of concurrent instances that the Amazon SQS event source can invoke.</p>
    pub fn maximum_concurrency(&self) -> std::option::Option<i32> {
        self.maximum_concurrency
    }
}
impl ScalingConfig {
    /// Creates a new builder-style object to manufacture [`ScalingConfig`](crate::types::ScalingConfig).
    pub fn builder() -> crate::types::builders::ScalingConfigBuilder {
        crate::types::builders::ScalingConfigBuilder::default()
    }
}

/// A builder for [`ScalingConfig`](crate::types::ScalingConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScalingConfigBuilder {
    pub(crate) maximum_concurrency: std::option::Option<i32>,
}
impl ScalingConfigBuilder {
    /// <p>Limits the number of concurrent instances that the Amazon SQS event source can invoke.</p>
    pub fn maximum_concurrency(mut self, input: i32) -> Self {
        self.maximum_concurrency = Some(input);
        self
    }
    /// <p>Limits the number of concurrent instances that the Amazon SQS event source can invoke.</p>
    pub fn set_maximum_concurrency(mut self, input: std::option::Option<i32>) -> Self {
        self.maximum_concurrency = input;
        self
    }
    /// Consumes the builder and constructs a [`ScalingConfig`](crate::types::ScalingConfig).
    pub fn build(self) -> crate::types::ScalingConfig {
        crate::types::ScalingConfig {
            maximum_concurrency: self.maximum_concurrency,
        }
    }
}
