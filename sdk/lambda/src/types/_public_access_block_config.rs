// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that defines the public-access settings for a function.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PublicAccessBlockConfig {
    /// <p>To block the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>true</code>. To allow the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>false</code>.</p>
    pub block_public_policy: ::std::option::Option<bool>,
    /// <p>To block public access to your function, even if its resource-based policy allows it, set <code>RestrictPublicResource</code> to <code>true</code>. To allow public access to a function with a resource-based policy that permits it, set <code>RestrictPublicResource</code> to <code>false</code>.</p>
    pub restrict_public_resource: ::std::option::Option<bool>,
}
impl PublicAccessBlockConfig {
    /// <p>To block the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>true</code>. To allow the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>false</code>.</p>
    pub fn block_public_policy(&self) -> ::std::option::Option<bool> {
        self.block_public_policy
    }
    /// <p>To block public access to your function, even if its resource-based policy allows it, set <code>RestrictPublicResource</code> to <code>true</code>. To allow public access to a function with a resource-based policy that permits it, set <code>RestrictPublicResource</code> to <code>false</code>.</p>
    pub fn restrict_public_resource(&self) -> ::std::option::Option<bool> {
        self.restrict_public_resource
    }
}
impl PublicAccessBlockConfig {
    /// Creates a new builder-style object to manufacture [`PublicAccessBlockConfig`](crate::types::PublicAccessBlockConfig).
    pub fn builder() -> crate::types::builders::PublicAccessBlockConfigBuilder {
        crate::types::builders::PublicAccessBlockConfigBuilder::default()
    }
}

/// A builder for [`PublicAccessBlockConfig`](crate::types::PublicAccessBlockConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PublicAccessBlockConfigBuilder {
    pub(crate) block_public_policy: ::std::option::Option<bool>,
    pub(crate) restrict_public_resource: ::std::option::Option<bool>,
}
impl PublicAccessBlockConfigBuilder {
    /// <p>To block the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>true</code>. To allow the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>false</code>.</p>
    pub fn block_public_policy(mut self, input: bool) -> Self {
        self.block_public_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>To block the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>true</code>. To allow the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>false</code>.</p>
    pub fn set_block_public_policy(mut self, input: ::std::option::Option<bool>) -> Self {
        self.block_public_policy = input;
        self
    }
    /// <p>To block the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>true</code>. To allow the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>false</code>.</p>
    pub fn get_block_public_policy(&self) -> &::std::option::Option<bool> {
        &self.block_public_policy
    }
    /// <p>To block public access to your function, even if its resource-based policy allows it, set <code>RestrictPublicResource</code> to <code>true</code>. To allow public access to a function with a resource-based policy that permits it, set <code>RestrictPublicResource</code> to <code>false</code>.</p>
    pub fn restrict_public_resource(mut self, input: bool) -> Self {
        self.restrict_public_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>To block public access to your function, even if its resource-based policy allows it, set <code>RestrictPublicResource</code> to <code>true</code>. To allow public access to a function with a resource-based policy that permits it, set <code>RestrictPublicResource</code> to <code>false</code>.</p>
    pub fn set_restrict_public_resource(mut self, input: ::std::option::Option<bool>) -> Self {
        self.restrict_public_resource = input;
        self
    }
    /// <p>To block public access to your function, even if its resource-based policy allows it, set <code>RestrictPublicResource</code> to <code>true</code>. To allow public access to a function with a resource-based policy that permits it, set <code>RestrictPublicResource</code> to <code>false</code>.</p>
    pub fn get_restrict_public_resource(&self) -> &::std::option::Option<bool> {
        &self.restrict_public_resource
    }
    /// Consumes the builder and constructs a [`PublicAccessBlockConfig`](crate::types::PublicAccessBlockConfig).
    pub fn build(self) -> crate::types::PublicAccessBlockConfig {
        crate::types::PublicAccessBlockConfig {
            block_public_policy: self.block_public_policy,
            restrict_public_resource: self.restrict_public_resource,
        }
    }
}
