// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `LastUpdateStatusReasonCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let lastupdatestatusreasoncode = unimplemented!();
/// match lastupdatestatusreasoncode {
///     LastUpdateStatusReasonCode::DisabledKmsKey => { /* ... */ },
///     LastUpdateStatusReasonCode::EfsioError => { /* ... */ },
///     LastUpdateStatusReasonCode::EfsMountConnectivityError => { /* ... */ },
///     LastUpdateStatusReasonCode::EfsMountFailure => { /* ... */ },
///     LastUpdateStatusReasonCode::EfsMountTimeout => { /* ... */ },
///     LastUpdateStatusReasonCode::EniLimitExceeded => { /* ... */ },
///     LastUpdateStatusReasonCode::FunctionError => { /* ... */ },
///     LastUpdateStatusReasonCode::ImageAccessDenied => { /* ... */ },
///     LastUpdateStatusReasonCode::ImageDeleted => { /* ... */ },
///     LastUpdateStatusReasonCode::InsufficientRolePermissions => { /* ... */ },
///     LastUpdateStatusReasonCode::InternalError => { /* ... */ },
///     LastUpdateStatusReasonCode::InvalidConfiguration => { /* ... */ },
///     LastUpdateStatusReasonCode::InvalidImage => { /* ... */ },
///     LastUpdateStatusReasonCode::InvalidRuntime => { /* ... */ },
///     LastUpdateStatusReasonCode::InvalidSecurityGroup => { /* ... */ },
///     LastUpdateStatusReasonCode::InvalidStateKmsKey => { /* ... */ },
///     LastUpdateStatusReasonCode::InvalidSubnet => { /* ... */ },
///     LastUpdateStatusReasonCode::InvalidZipFileException => { /* ... */ },
///     LastUpdateStatusReasonCode::KmsKeyAccessDenied => { /* ... */ },
///     LastUpdateStatusReasonCode::KmsKeyNotFound => { /* ... */ },
///     LastUpdateStatusReasonCode::SubnetOutOfIpAddresses => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `lastupdatestatusreasoncode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `LastUpdateStatusReasonCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `LastUpdateStatusReasonCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `LastUpdateStatusReasonCode::NewFeature` is defined.
/// Specifically, when `lastupdatestatusreasoncode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `LastUpdateStatusReasonCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum LastUpdateStatusReasonCode {
    #[allow(missing_docs)] // documentation missing in model
    DisabledKmsKey,
    #[allow(missing_docs)] // documentation missing in model
    EfsioError,
    #[allow(missing_docs)] // documentation missing in model
    EfsMountConnectivityError,
    #[allow(missing_docs)] // documentation missing in model
    EfsMountFailure,
    #[allow(missing_docs)] // documentation missing in model
    EfsMountTimeout,
    #[allow(missing_docs)] // documentation missing in model
    EniLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    FunctionError,
    #[allow(missing_docs)] // documentation missing in model
    ImageAccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    ImageDeleted,
    #[allow(missing_docs)] // documentation missing in model
    InsufficientRolePermissions,
    #[allow(missing_docs)] // documentation missing in model
    InternalError,
    #[allow(missing_docs)] // documentation missing in model
    InvalidConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    InvalidImage,
    #[allow(missing_docs)] // documentation missing in model
    InvalidRuntime,
    #[allow(missing_docs)] // documentation missing in model
    InvalidSecurityGroup,
    #[allow(missing_docs)] // documentation missing in model
    InvalidStateKmsKey,
    #[allow(missing_docs)] // documentation missing in model
    InvalidSubnet,
    #[allow(missing_docs)] // documentation missing in model
    InvalidZipFileException,
    #[allow(missing_docs)] // documentation missing in model
    KmsKeyAccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    KmsKeyNotFound,
    #[allow(missing_docs)] // documentation missing in model
    SubnetOutOfIpAddresses,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for LastUpdateStatusReasonCode {
    fn from(s: &str) -> Self {
        match s {
            "DisabledKMSKey" => LastUpdateStatusReasonCode::DisabledKmsKey,
            "EFSIOError" => LastUpdateStatusReasonCode::EfsioError,
            "EFSMountConnectivityError" => LastUpdateStatusReasonCode::EfsMountConnectivityError,
            "EFSMountFailure" => LastUpdateStatusReasonCode::EfsMountFailure,
            "EFSMountTimeout" => LastUpdateStatusReasonCode::EfsMountTimeout,
            "EniLimitExceeded" => LastUpdateStatusReasonCode::EniLimitExceeded,
            "FunctionError" => LastUpdateStatusReasonCode::FunctionError,
            "ImageAccessDenied" => LastUpdateStatusReasonCode::ImageAccessDenied,
            "ImageDeleted" => LastUpdateStatusReasonCode::ImageDeleted,
            "InsufficientRolePermissions" => {
                LastUpdateStatusReasonCode::InsufficientRolePermissions
            }
            "InternalError" => LastUpdateStatusReasonCode::InternalError,
            "InvalidConfiguration" => LastUpdateStatusReasonCode::InvalidConfiguration,
            "InvalidImage" => LastUpdateStatusReasonCode::InvalidImage,
            "InvalidRuntime" => LastUpdateStatusReasonCode::InvalidRuntime,
            "InvalidSecurityGroup" => LastUpdateStatusReasonCode::InvalidSecurityGroup,
            "InvalidStateKMSKey" => LastUpdateStatusReasonCode::InvalidStateKmsKey,
            "InvalidSubnet" => LastUpdateStatusReasonCode::InvalidSubnet,
            "InvalidZipFileException" => LastUpdateStatusReasonCode::InvalidZipFileException,
            "KMSKeyAccessDenied" => LastUpdateStatusReasonCode::KmsKeyAccessDenied,
            "KMSKeyNotFound" => LastUpdateStatusReasonCode::KmsKeyNotFound,
            "SubnetOutOfIPAddresses" => LastUpdateStatusReasonCode::SubnetOutOfIpAddresses,
            other => LastUpdateStatusReasonCode::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for LastUpdateStatusReasonCode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(LastUpdateStatusReasonCode::from(s))
    }
}
impl LastUpdateStatusReasonCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            LastUpdateStatusReasonCode::DisabledKmsKey => "DisabledKMSKey",
            LastUpdateStatusReasonCode::EfsioError => "EFSIOError",
            LastUpdateStatusReasonCode::EfsMountConnectivityError => "EFSMountConnectivityError",
            LastUpdateStatusReasonCode::EfsMountFailure => "EFSMountFailure",
            LastUpdateStatusReasonCode::EfsMountTimeout => "EFSMountTimeout",
            LastUpdateStatusReasonCode::EniLimitExceeded => "EniLimitExceeded",
            LastUpdateStatusReasonCode::FunctionError => "FunctionError",
            LastUpdateStatusReasonCode::ImageAccessDenied => "ImageAccessDenied",
            LastUpdateStatusReasonCode::ImageDeleted => "ImageDeleted",
            LastUpdateStatusReasonCode::InsufficientRolePermissions => {
                "InsufficientRolePermissions"
            }
            LastUpdateStatusReasonCode::InternalError => "InternalError",
            LastUpdateStatusReasonCode::InvalidConfiguration => "InvalidConfiguration",
            LastUpdateStatusReasonCode::InvalidImage => "InvalidImage",
            LastUpdateStatusReasonCode::InvalidRuntime => "InvalidRuntime",
            LastUpdateStatusReasonCode::InvalidSecurityGroup => "InvalidSecurityGroup",
            LastUpdateStatusReasonCode::InvalidStateKmsKey => "InvalidStateKMSKey",
            LastUpdateStatusReasonCode::InvalidSubnet => "InvalidSubnet",
            LastUpdateStatusReasonCode::InvalidZipFileException => "InvalidZipFileException",
            LastUpdateStatusReasonCode::KmsKeyAccessDenied => "KMSKeyAccessDenied",
            LastUpdateStatusReasonCode::KmsKeyNotFound => "KMSKeyNotFound",
            LastUpdateStatusReasonCode::SubnetOutOfIpAddresses => "SubnetOutOfIPAddresses",
            LastUpdateStatusReasonCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "DisabledKMSKey",
            "EFSIOError",
            "EFSMountConnectivityError",
            "EFSMountFailure",
            "EFSMountTimeout",
            "EniLimitExceeded",
            "FunctionError",
            "ImageAccessDenied",
            "ImageDeleted",
            "InsufficientRolePermissions",
            "InternalError",
            "InvalidConfiguration",
            "InvalidImage",
            "InvalidRuntime",
            "InvalidSecurityGroup",
            "InvalidStateKMSKey",
            "InvalidSubnet",
            "InvalidZipFileException",
            "KMSKeyAccessDenied",
            "KMSKeyNotFound",
            "SubnetOutOfIPAddresses",
        ]
    }
}
impl AsRef<str> for LastUpdateStatusReasonCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
