// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The size of the function's <code>/tmp</code> directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EphemeralStorage {
    /// <p>The size of the function's <code>/tmp</code> directory.</p>
    pub size: i32,
}
impl EphemeralStorage {
    /// <p>The size of the function's <code>/tmp</code> directory.</p>
    pub fn size(&self) -> i32 {
        self.size
    }
}
impl EphemeralStorage {
    /// Creates a new builder-style object to manufacture [`EphemeralStorage`](crate::types::EphemeralStorage).
    pub fn builder() -> crate::types::builders::EphemeralStorageBuilder {
        crate::types::builders::EphemeralStorageBuilder::default()
    }
}

/// A builder for [`EphemeralStorage`](crate::types::EphemeralStorage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EphemeralStorageBuilder {
    pub(crate) size: ::std::option::Option<i32>,
}
impl EphemeralStorageBuilder {
    /// <p>The size of the function's <code>/tmp</code> directory.</p>
    /// This field is required.
    pub fn size(mut self, input: i32) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the function's <code>/tmp</code> directory.</p>
    pub fn set_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.size = input;
        self
    }
    /// <p>The size of the function's <code>/tmp</code> directory.</p>
    pub fn get_size(&self) -> &::std::option::Option<i32> {
        &self.size
    }
    /// Consumes the builder and constructs a [`EphemeralStorage`](crate::types::EphemeralStorage).
    /// This method will fail if any of the following fields are not set:
    /// - [`size`](crate::types::builders::EphemeralStorageBuilder::size)
    pub fn build(self) -> ::std::result::Result<crate::types::EphemeralStorage, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EphemeralStorage {
            size: self.size.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "size",
                    "size was not specified but it is required when building EphemeralStorage",
                )
            })?,
        })
    }
}
