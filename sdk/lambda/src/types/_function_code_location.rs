// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a function's deployment package.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FunctionCodeLocation {
    /// <p>The service that's hosting the file.</p>
    #[doc(hidden)]
    pub repository_type: std::option::Option<std::string::String>,
    /// <p>A presigned URL that you can use to download the deployment package.</p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>URI of a container image in the Amazon ECR registry.</p>
    #[doc(hidden)]
    pub image_uri: std::option::Option<std::string::String>,
    /// <p>The resolved URI for the image.</p>
    #[doc(hidden)]
    pub resolved_image_uri: std::option::Option<std::string::String>,
}
impl FunctionCodeLocation {
    /// <p>The service that's hosting the file.</p>
    pub fn repository_type(&self) -> std::option::Option<&str> {
        self.repository_type.as_deref()
    }
    /// <p>A presigned URL that you can use to download the deployment package.</p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>URI of a container image in the Amazon ECR registry.</p>
    pub fn image_uri(&self) -> std::option::Option<&str> {
        self.image_uri.as_deref()
    }
    /// <p>The resolved URI for the image.</p>
    pub fn resolved_image_uri(&self) -> std::option::Option<&str> {
        self.resolved_image_uri.as_deref()
    }
}
impl FunctionCodeLocation {
    /// Creates a new builder-style object to manufacture [`FunctionCodeLocation`](crate::types::FunctionCodeLocation).
    pub fn builder() -> crate::types::builders::FunctionCodeLocationBuilder {
        crate::types::builders::FunctionCodeLocationBuilder::default()
    }
}

/// A builder for [`FunctionCodeLocation`](crate::types::FunctionCodeLocation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FunctionCodeLocationBuilder {
    pub(crate) repository_type: std::option::Option<std::string::String>,
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) image_uri: std::option::Option<std::string::String>,
    pub(crate) resolved_image_uri: std::option::Option<std::string::String>,
}
impl FunctionCodeLocationBuilder {
    /// <p>The service that's hosting the file.</p>
    pub fn repository_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_type = Some(input.into());
        self
    }
    /// <p>The service that's hosting the file.</p>
    pub fn set_repository_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_type = input;
        self
    }
    /// <p>A presigned URL that you can use to download the deployment package.</p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>A presigned URL that you can use to download the deployment package.</p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>URI of a container image in the Amazon ECR registry.</p>
    pub fn image_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_uri = Some(input.into());
        self
    }
    /// <p>URI of a container image in the Amazon ECR registry.</p>
    pub fn set_image_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_uri = input;
        self
    }
    /// <p>The resolved URI for the image.</p>
    pub fn resolved_image_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.resolved_image_uri = Some(input.into());
        self
    }
    /// <p>The resolved URI for the image.</p>
    pub fn set_resolved_image_uri(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resolved_image_uri = input;
        self
    }
    /// Consumes the builder and constructs a [`FunctionCodeLocation`](crate::types::FunctionCodeLocation).
    pub fn build(self) -> crate::types::FunctionCodeLocation {
        crate::types::FunctionCodeLocation {
            repository_type: self.repository_type,
            location: self.location,
            image_uri: self.image_uri,
            resolved_image_uri: self.resolved_image_uri,
        }
    }
}
