// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_layer_version_permission_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddLayerVersionPermissionInput,
) {
    if let Some(var_1) = &input.action {
        object.key("Action").string(var_1);
    }
    if let Some(var_2) = &input.organization_id {
        object.key("OrganizationId").string(var_2);
    }
    if let Some(var_3) = &input.principal {
        object.key("Principal").string(var_3);
    }
    if let Some(var_4) = &input.statement_id {
        object.key("StatementId").string(var_4);
    }
}

pub fn serialize_structure_add_permission_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddPermissionInput,
) {
    if let Some(var_5) = &input.action {
        object.key("Action").string(var_5);
    }
    if let Some(var_6) = &input.event_source_token {
        object.key("EventSourceToken").string(var_6);
    }
    if let Some(var_7) = &input.principal {
        object.key("Principal").string(var_7);
    }
    if let Some(var_8) = &input.revision_id {
        object.key("RevisionId").string(var_8);
    }
    if let Some(var_9) = &input.source_account {
        object.key("SourceAccount").string(var_9);
    }
    if let Some(var_10) = &input.source_arn {
        object.key("SourceArn").string(var_10);
    }
    if let Some(var_11) = &input.statement_id {
        object.key("StatementId").string(var_11);
    }
}

pub fn serialize_structure_create_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAliasInput,
) {
    if let Some(var_12) = &input.description {
        object.key("Description").string(var_12);
    }
    if let Some(var_13) = &input.function_version {
        object.key("FunctionVersion").string(var_13);
    }
    if let Some(var_14) = &input.name {
        object.key("Name").string(var_14);
    }
    if let Some(var_15) = &input.routing_config {
        let mut object_16 = object.key("RoutingConfig").start_object();
        crate::json_ser::serialize_structure_alias_routing_configuration(&mut object_16, var_15);
        object_16.finish();
    }
}

pub fn serialize_structure_create_code_signing_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCodeSigningConfigInput,
) {
    if let Some(var_17) = &input.allowed_publishers {
        let mut object_18 = object.key("AllowedPublishers").start_object();
        crate::json_ser::serialize_structure_allowed_publishers(&mut object_18, var_17);
        object_18.finish();
    }
    if let Some(var_19) = &input.code_signing_policies {
        let mut object_20 = object.key("CodeSigningPolicies").start_object();
        crate::json_ser::serialize_structure_code_signing_policies(&mut object_20, var_19);
        object_20.finish();
    }
    if let Some(var_21) = &input.description {
        object.key("Description").string(var_21);
    }
}

pub fn serialize_structure_create_event_source_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEventSourceMappingInput,
) {
    if let Some(var_22) = &input.batch_size {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if let Some(var_23) = &input.bisect_batch_on_function_error {
        object.key("BisectBatchOnFunctionError").boolean(*var_23);
    }
    if let Some(var_24) = &input.destination_config {
        let mut object_25 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_destination_config(&mut object_25, var_24);
        object_25.finish();
    }
    if let Some(var_26) = &input.enabled {
        object.key("Enabled").boolean(*var_26);
    }
    if let Some(var_27) = &input.event_source_arn {
        object.key("EventSourceArn").string(var_27);
    }
    if let Some(var_28) = &input.function_name {
        object.key("FunctionName").string(var_28);
    }
    if let Some(var_29) = &input.function_response_types {
        let mut array_30 = object.key("FunctionResponseTypes").start_array();
        for item_31 in var_29 {
            {
                array_30.value().string(item_31.as_str());
            }
        }
        array_30.finish();
    }
    if let Some(var_32) = &input.maximum_batching_window_in_seconds {
        object.key("MaximumBatchingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    if let Some(var_33) = &input.maximum_record_age_in_seconds {
        object.key("MaximumRecordAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_33).into()),
        );
    }
    if let Some(var_34) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_34).into()),
        );
    }
    if let Some(var_35) = &input.parallelization_factor {
        object.key("ParallelizationFactor").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_35).into()),
        );
    }
    if let Some(var_36) = &input.queues {
        let mut array_37 = object.key("Queues").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38);
            }
        }
        array_37.finish();
    }
    if let Some(var_39) = &input.self_managed_event_source {
        let mut object_40 = object.key("SelfManagedEventSource").start_object();
        crate::json_ser::serialize_structure_self_managed_event_source(&mut object_40, var_39);
        object_40.finish();
    }
    if let Some(var_41) = &input.source_access_configurations {
        let mut array_42 = object.key("SourceAccessConfigurations").start_array();
        for item_43 in var_41 {
            {
                let mut object_44 = array_42.value().start_object();
                crate::json_ser::serialize_structure_source_access_configuration(
                    &mut object_44,
                    item_43,
                );
                object_44.finish();
            }
        }
        array_42.finish();
    }
    if let Some(var_45) = &input.starting_position {
        object.key("StartingPosition").string(var_45.as_str());
    }
    if let Some(var_46) = &input.starting_position_timestamp {
        object
            .key("StartingPositionTimestamp")
            .instant(var_46, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_47) = &input.topics {
        let mut array_48 = object.key("Topics").start_array();
        for item_49 in var_47 {
            {
                array_48.value().string(item_49);
            }
        }
        array_48.finish();
    }
    if let Some(var_50) = &input.tumbling_window_in_seconds {
        object.key("TumblingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_50).into()),
        );
    }
}

pub fn serialize_structure_create_function_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFunctionInput,
) {
    if let Some(var_51) = &input.code {
        let mut object_52 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_function_code(&mut object_52, var_51);
        object_52.finish();
    }
    if let Some(var_53) = &input.code_signing_config_arn {
        object.key("CodeSigningConfigArn").string(var_53);
    }
    if let Some(var_54) = &input.dead_letter_config {
        let mut object_55 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_dead_letter_config(&mut object_55, var_54);
        object_55.finish();
    }
    if let Some(var_56) = &input.description {
        object.key("Description").string(var_56);
    }
    if let Some(var_57) = &input.environment {
        let mut object_58 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_environment(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.file_system_configs {
        let mut array_60 = object.key("FileSystemConfigs").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_file_system_config(&mut object_62, item_61);
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.function_name {
        object.key("FunctionName").string(var_63);
    }
    if let Some(var_64) = &input.handler {
        object.key("Handler").string(var_64);
    }
    if let Some(var_65) = &input.image_config {
        let mut object_66 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_image_config(&mut object_66, var_65);
        object_66.finish();
    }
    if let Some(var_67) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_67);
    }
    if let Some(var_68) = &input.layers {
        let mut array_69 = object.key("Layers").start_array();
        for item_70 in var_68 {
            {
                array_69.value().string(item_70);
            }
        }
        array_69.finish();
    }
    if let Some(var_71) = &input.memory_size {
        object.key("MemorySize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_71).into()),
        );
    }
    if let Some(var_72) = &input.package_type {
        object.key("PackageType").string(var_72.as_str());
    }
    if input.publish {
        object.key("Publish").boolean(input.publish);
    }
    if let Some(var_73) = &input.role {
        object.key("Role").string(var_73);
    }
    if let Some(var_74) = &input.runtime {
        object.key("Runtime").string(var_74.as_str());
    }
    if let Some(var_75) = &input.tags {
        let mut object_76 = object.key("Tags").start_object();
        for (key_77, value_78) in var_75 {
            {
                object_76.key(key_77).string(value_78);
            }
        }
        object_76.finish();
    }
    if let Some(var_79) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_79).into()),
        );
    }
    if let Some(var_80) = &input.tracing_config {
        let mut object_81 = object.key("TracingConfig").start_object();
        crate::json_ser::serialize_structure_tracing_config(&mut object_81, var_80);
        object_81.finish();
    }
    if let Some(var_82) = &input.vpc_config {
        let mut object_83 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_83, var_82);
        object_83.finish();
    }
}

pub fn serialize_structure_publish_layer_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PublishLayerVersionInput,
) {
    if let Some(var_84) = &input.compatible_runtimes {
        let mut array_85 = object.key("CompatibleRuntimes").start_array();
        for item_86 in var_84 {
            {
                array_85.value().string(item_86.as_str());
            }
        }
        array_85.finish();
    }
    if let Some(var_87) = &input.content {
        let mut object_88 = object.key("Content").start_object();
        crate::json_ser::serialize_structure_layer_version_content_input(&mut object_88, var_87);
        object_88.finish();
    }
    if let Some(var_89) = &input.description {
        object.key("Description").string(var_89);
    }
    if let Some(var_90) = &input.license_info {
        object.key("LicenseInfo").string(var_90);
    }
}

pub fn serialize_structure_publish_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PublishVersionInput,
) {
    if let Some(var_91) = &input.code_sha256 {
        object.key("CodeSha256").string(var_91);
    }
    if let Some(var_92) = &input.description {
        object.key("Description").string(var_92);
    }
    if let Some(var_93) = &input.revision_id {
        object.key("RevisionId").string(var_93);
    }
}

pub fn serialize_structure_put_function_code_signing_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutFunctionCodeSigningConfigInput,
) {
    if let Some(var_94) = &input.code_signing_config_arn {
        object.key("CodeSigningConfigArn").string(var_94);
    }
}

pub fn serialize_structure_put_function_concurrency_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutFunctionConcurrencyInput,
) {
    if let Some(var_95) = &input.reserved_concurrent_executions {
        object.key("ReservedConcurrentExecutions").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_95).into()),
        );
    }
}

pub fn serialize_structure_put_function_event_invoke_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutFunctionEventInvokeConfigInput,
) {
    if let Some(var_96) = &input.destination_config {
        let mut object_97 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_destination_config(&mut object_97, var_96);
        object_97.finish();
    }
    if let Some(var_98) = &input.maximum_event_age_in_seconds {
        object.key("MaximumEventAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_98).into()),
        );
    }
    if let Some(var_99) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_99).into()),
        );
    }
}

pub fn serialize_structure_put_provisioned_concurrency_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutProvisionedConcurrencyConfigInput,
) {
    if let Some(var_100) = &input.provisioned_concurrent_executions {
        object.key("ProvisionedConcurrentExecutions").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_100).into()),
        );
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_101) = &input.tags {
        let mut object_102 = object.key("Tags").start_object();
        for (key_103, value_104) in var_101 {
            {
                object_102.key(key_103).string(value_104);
            }
        }
        object_102.finish();
    }
}

pub fn serialize_structure_update_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAliasInput,
) {
    if let Some(var_105) = &input.description {
        object.key("Description").string(var_105);
    }
    if let Some(var_106) = &input.function_version {
        object.key("FunctionVersion").string(var_106);
    }
    if let Some(var_107) = &input.revision_id {
        object.key("RevisionId").string(var_107);
    }
    if let Some(var_108) = &input.routing_config {
        let mut object_109 = object.key("RoutingConfig").start_object();
        crate::json_ser::serialize_structure_alias_routing_configuration(&mut object_109, var_108);
        object_109.finish();
    }
}

pub fn serialize_structure_update_code_signing_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCodeSigningConfigInput,
) {
    if let Some(var_110) = &input.allowed_publishers {
        let mut object_111 = object.key("AllowedPublishers").start_object();
        crate::json_ser::serialize_structure_allowed_publishers(&mut object_111, var_110);
        object_111.finish();
    }
    if let Some(var_112) = &input.code_signing_policies {
        let mut object_113 = object.key("CodeSigningPolicies").start_object();
        crate::json_ser::serialize_structure_code_signing_policies(&mut object_113, var_112);
        object_113.finish();
    }
    if let Some(var_114) = &input.description {
        object.key("Description").string(var_114);
    }
}

pub fn serialize_structure_update_event_source_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEventSourceMappingInput,
) {
    if let Some(var_115) = &input.batch_size {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_115).into()),
        );
    }
    if let Some(var_116) = &input.bisect_batch_on_function_error {
        object.key("BisectBatchOnFunctionError").boolean(*var_116);
    }
    if let Some(var_117) = &input.destination_config {
        let mut object_118 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_destination_config(&mut object_118, var_117);
        object_118.finish();
    }
    if let Some(var_119) = &input.enabled {
        object.key("Enabled").boolean(*var_119);
    }
    if let Some(var_120) = &input.function_name {
        object.key("FunctionName").string(var_120);
    }
    if let Some(var_121) = &input.function_response_types {
        let mut array_122 = object.key("FunctionResponseTypes").start_array();
        for item_123 in var_121 {
            {
                array_122.value().string(item_123.as_str());
            }
        }
        array_122.finish();
    }
    if let Some(var_124) = &input.maximum_batching_window_in_seconds {
        object.key("MaximumBatchingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_124).into()),
        );
    }
    if let Some(var_125) = &input.maximum_record_age_in_seconds {
        object.key("MaximumRecordAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    if let Some(var_126) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_126).into()),
        );
    }
    if let Some(var_127) = &input.parallelization_factor {
        object.key("ParallelizationFactor").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    if let Some(var_128) = &input.source_access_configurations {
        let mut array_129 = object.key("SourceAccessConfigurations").start_array();
        for item_130 in var_128 {
            {
                let mut object_131 = array_129.value().start_object();
                crate::json_ser::serialize_structure_source_access_configuration(
                    &mut object_131,
                    item_130,
                );
                object_131.finish();
            }
        }
        array_129.finish();
    }
    if let Some(var_132) = &input.tumbling_window_in_seconds {
        object.key("TumblingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_132).into()),
        );
    }
}

pub fn serialize_structure_update_function_code_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFunctionCodeInput,
) {
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_133) = &input.image_uri {
        object.key("ImageUri").string(var_133);
    }
    if input.publish {
        object.key("Publish").boolean(input.publish);
    }
    if let Some(var_134) = &input.revision_id {
        object.key("RevisionId").string(var_134);
    }
    if let Some(var_135) = &input.s3_bucket {
        object.key("S3Bucket").string(var_135);
    }
    if let Some(var_136) = &input.s3_key {
        object.key("S3Key").string(var_136);
    }
    if let Some(var_137) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_137);
    }
    if let Some(var_138) = &input.zip_file {
        object
            .key("ZipFile")
            .string_unchecked(&smithy_types::base64::encode(var_138));
    }
}

pub fn serialize_structure_update_function_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFunctionConfigurationInput,
) {
    if let Some(var_139) = &input.dead_letter_config {
        let mut object_140 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_dead_letter_config(&mut object_140, var_139);
        object_140.finish();
    }
    if let Some(var_141) = &input.description {
        object.key("Description").string(var_141);
    }
    if let Some(var_142) = &input.environment {
        let mut object_143 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_environment(&mut object_143, var_142);
        object_143.finish();
    }
    if let Some(var_144) = &input.file_system_configs {
        let mut array_145 = object.key("FileSystemConfigs").start_array();
        for item_146 in var_144 {
            {
                let mut object_147 = array_145.value().start_object();
                crate::json_ser::serialize_structure_file_system_config(&mut object_147, item_146);
                object_147.finish();
            }
        }
        array_145.finish();
    }
    if let Some(var_148) = &input.handler {
        object.key("Handler").string(var_148);
    }
    if let Some(var_149) = &input.image_config {
        let mut object_150 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_image_config(&mut object_150, var_149);
        object_150.finish();
    }
    if let Some(var_151) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_151);
    }
    if let Some(var_152) = &input.layers {
        let mut array_153 = object.key("Layers").start_array();
        for item_154 in var_152 {
            {
                array_153.value().string(item_154);
            }
        }
        array_153.finish();
    }
    if let Some(var_155) = &input.memory_size {
        object.key("MemorySize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_155).into()),
        );
    }
    if let Some(var_156) = &input.revision_id {
        object.key("RevisionId").string(var_156);
    }
    if let Some(var_157) = &input.role {
        object.key("Role").string(var_157);
    }
    if let Some(var_158) = &input.runtime {
        object.key("Runtime").string(var_158.as_str());
    }
    if let Some(var_159) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_159).into()),
        );
    }
    if let Some(var_160) = &input.tracing_config {
        let mut object_161 = object.key("TracingConfig").start_object();
        crate::json_ser::serialize_structure_tracing_config(&mut object_161, var_160);
        object_161.finish();
    }
    if let Some(var_162) = &input.vpc_config {
        let mut object_163 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_163, var_162);
        object_163.finish();
    }
}

pub fn serialize_structure_update_function_event_invoke_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFunctionEventInvokeConfigInput,
) {
    if let Some(var_164) = &input.destination_config {
        let mut object_165 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_destination_config(&mut object_165, var_164);
        object_165.finish();
    }
    if let Some(var_166) = &input.maximum_event_age_in_seconds {
        object.key("MaximumEventAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    if let Some(var_167) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_167).into()),
        );
    }
}

pub fn serialize_structure_alias_routing_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AliasRoutingConfiguration,
) {
    if let Some(var_168) = &input.additional_version_weights {
        let mut object_169 = object.key("AdditionalVersionWeights").start_object();
        for (key_170, value_171) in var_168 {
            {
                object_169.key(key_170).number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::Float((*value_171).into()),
                );
            }
        }
        object_169.finish();
    }
}

pub fn serialize_structure_allowed_publishers(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllowedPublishers,
) {
    if let Some(var_172) = &input.signing_profile_version_arns {
        let mut array_173 = object.key("SigningProfileVersionArns").start_array();
        for item_174 in var_172 {
            {
                array_173.value().string(item_174);
            }
        }
        array_173.finish();
    }
}

pub fn serialize_structure_code_signing_policies(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeSigningPolicies,
) {
    if let Some(var_175) = &input.untrusted_artifact_on_deployment {
        object
            .key("UntrustedArtifactOnDeployment")
            .string(var_175.as_str());
    }
}

pub fn serialize_structure_destination_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DestinationConfig,
) {
    if let Some(var_176) = &input.on_success {
        let mut object_177 = object.key("OnSuccess").start_object();
        crate::json_ser::serialize_structure_on_success(&mut object_177, var_176);
        object_177.finish();
    }
    if let Some(var_178) = &input.on_failure {
        let mut object_179 = object.key("OnFailure").start_object();
        crate::json_ser::serialize_structure_on_failure(&mut object_179, var_178);
        object_179.finish();
    }
}

pub fn serialize_structure_self_managed_event_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedEventSource,
) {
    if let Some(var_180) = &input.endpoints {
        let mut object_181 = object.key("Endpoints").start_object();
        for (key_182, value_183) in var_180 {
            {
                let mut array_184 = object_181.key(key_182.as_str()).start_array();
                for item_185 in value_183 {
                    {
                        array_184.value().string(item_185);
                    }
                }
                array_184.finish();
            }
        }
        object_181.finish();
    }
}

pub fn serialize_structure_source_access_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAccessConfiguration,
) {
    if let Some(var_186) = &input.r#type {
        object.key("Type").string(var_186.as_str());
    }
    if let Some(var_187) = &input.uri {
        object.key("URI").string(var_187);
    }
}

pub fn serialize_structure_function_code(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FunctionCode,
) {
    if let Some(var_188) = &input.zip_file {
        object
            .key("ZipFile")
            .string_unchecked(&smithy_types::base64::encode(var_188));
    }
    if let Some(var_189) = &input.s3_bucket {
        object.key("S3Bucket").string(var_189);
    }
    if let Some(var_190) = &input.s3_key {
        object.key("S3Key").string(var_190);
    }
    if let Some(var_191) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_191);
    }
    if let Some(var_192) = &input.image_uri {
        object.key("ImageUri").string(var_192);
    }
}

pub fn serialize_structure_dead_letter_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeadLetterConfig,
) {
    if let Some(var_193) = &input.target_arn {
        object.key("TargetArn").string(var_193);
    }
}

pub fn serialize_structure_environment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Environment,
) {
    if let Some(var_194) = &input.variables {
        let mut object_195 = object.key("Variables").start_object();
        for (key_196, value_197) in var_194 {
            {
                object_195.key(key_196).string(value_197);
            }
        }
        object_195.finish();
    }
}

pub fn serialize_structure_file_system_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemConfig,
) {
    if let Some(var_198) = &input.arn {
        object.key("Arn").string(var_198);
    }
    if let Some(var_199) = &input.local_mount_path {
        object.key("LocalMountPath").string(var_199);
    }
}

pub fn serialize_structure_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageConfig,
) {
    if let Some(var_200) = &input.entry_point {
        let mut array_201 = object.key("EntryPoint").start_array();
        for item_202 in var_200 {
            {
                array_201.value().string(item_202);
            }
        }
        array_201.finish();
    }
    if let Some(var_203) = &input.command {
        let mut array_204 = object.key("Command").start_array();
        for item_205 in var_203 {
            {
                array_204.value().string(item_205);
            }
        }
        array_204.finish();
    }
    if let Some(var_206) = &input.working_directory {
        object.key("WorkingDirectory").string(var_206);
    }
}

pub fn serialize_structure_tracing_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TracingConfig,
) {
    if let Some(var_207) = &input.mode {
        object.key("Mode").string(var_207.as_str());
    }
}

pub fn serialize_structure_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) {
    if let Some(var_208) = &input.subnet_ids {
        let mut array_209 = object.key("SubnetIds").start_array();
        for item_210 in var_208 {
            {
                array_209.value().string(item_210);
            }
        }
        array_209.finish();
    }
    if let Some(var_211) = &input.security_group_ids {
        let mut array_212 = object.key("SecurityGroupIds").start_array();
        for item_213 in var_211 {
            {
                array_212.value().string(item_213);
            }
        }
        array_212.finish();
    }
}

pub fn serialize_structure_layer_version_content_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LayerVersionContentInput,
) {
    if let Some(var_214) = &input.s3_bucket {
        object.key("S3Bucket").string(var_214);
    }
    if let Some(var_215) = &input.s3_key {
        object.key("S3Key").string(var_215);
    }
    if let Some(var_216) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_216);
    }
    if let Some(var_217) = &input.zip_file {
        object
            .key("ZipFile")
            .string_unchecked(&smithy_types::base64::encode(var_217));
    }
}

pub fn serialize_structure_on_success(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnSuccess,
) {
    if let Some(var_218) = &input.destination {
        object.key("Destination").string(var_218);
    }
}

pub fn serialize_structure_on_failure(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnFailure,
) {
    if let Some(var_219) = &input.destination {
        object.key("Destination").string(var_219);
    }
}
