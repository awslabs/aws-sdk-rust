// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_layer_version_permission_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddLayerVersionPermissionInput,
) {
    if let Some(var_1) = &input.statement_id {
        object.key("StatementId").string(var_1);
    }
    if let Some(var_2) = &input.action {
        object.key("Action").string(var_2);
    }
    if let Some(var_3) = &input.principal {
        object.key("Principal").string(var_3);
    }
    if let Some(var_4) = &input.organization_id {
        object.key("OrganizationId").string(var_4);
    }
}

pub fn serialize_structure_add_permission_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddPermissionInput,
) {
    if let Some(var_5) = &input.statement_id {
        object.key("StatementId").string(var_5);
    }
    if let Some(var_6) = &input.action {
        object.key("Action").string(var_6);
    }
    if let Some(var_7) = &input.principal {
        object.key("Principal").string(var_7);
    }
    if let Some(var_8) = &input.source_arn {
        object.key("SourceArn").string(var_8);
    }
    if let Some(var_9) = &input.source_account {
        object.key("SourceAccount").string(var_9);
    }
    if let Some(var_10) = &input.event_source_token {
        object.key("EventSourceToken").string(var_10);
    }
    if let Some(var_11) = &input.revision_id {
        object.key("RevisionId").string(var_11);
    }
}

pub fn serialize_structure_create_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAliasInput,
) {
    if let Some(var_12) = &input.name {
        object.key("Name").string(var_12);
    }
    if let Some(var_13) = &input.function_version {
        object.key("FunctionVersion").string(var_13);
    }
    if let Some(var_14) = &input.description {
        object.key("Description").string(var_14);
    }
    if let Some(var_15) = &input.routing_config {
        let mut object_16 = object.key("RoutingConfig").start_object();
        crate::json_ser::serialize_structure_alias_routing_configuration(&mut object_16, var_15);
        object_16.finish();
    }
}

pub fn serialize_structure_create_code_signing_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCodeSigningConfigInput,
) {
    if let Some(var_17) = &input.description {
        object.key("Description").string(var_17);
    }
    if let Some(var_18) = &input.allowed_publishers {
        let mut object_19 = object.key("AllowedPublishers").start_object();
        crate::json_ser::serialize_structure_allowed_publishers(&mut object_19, var_18);
        object_19.finish();
    }
    if let Some(var_20) = &input.code_signing_policies {
        let mut object_21 = object.key("CodeSigningPolicies").start_object();
        crate::json_ser::serialize_structure_code_signing_policies(&mut object_21, var_20);
        object_21.finish();
    }
}

pub fn serialize_structure_create_event_source_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEventSourceMappingInput,
) {
    if let Some(var_22) = &input.event_source_arn {
        object.key("EventSourceArn").string(var_22);
    }
    if let Some(var_23) = &input.function_name {
        object.key("FunctionName").string(var_23);
    }
    if let Some(var_24) = &input.enabled {
        object.key("Enabled").boolean(*var_24);
    }
    if let Some(var_25) = &input.batch_size {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    if let Some(var_26) = &input.maximum_batching_window_in_seconds {
        object.key("MaximumBatchingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_26).into()),
        );
    }
    if let Some(var_27) = &input.parallelization_factor {
        object.key("ParallelizationFactor").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_27).into()),
        );
    }
    if let Some(var_28) = &input.starting_position {
        object.key("StartingPosition").string(var_28.as_str());
    }
    if let Some(var_29) = &input.starting_position_timestamp {
        object
            .key("StartingPositionTimestamp")
            .instant(var_29, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_30) = &input.destination_config {
        let mut object_31 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_destination_config(&mut object_31, var_30);
        object_31.finish();
    }
    if let Some(var_32) = &input.maximum_record_age_in_seconds {
        object.key("MaximumRecordAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    if let Some(var_33) = &input.bisect_batch_on_function_error {
        object.key("BisectBatchOnFunctionError").boolean(*var_33);
    }
    if let Some(var_34) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_34).into()),
        );
    }
    if let Some(var_35) = &input.tumbling_window_in_seconds {
        object.key("TumblingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_35).into()),
        );
    }
    if let Some(var_36) = &input.topics {
        let mut array_37 = object.key("Topics").start_array();
        for item_38 in var_36 {
            array_37.value().string(item_38);
        }
        array_37.finish();
    }
    if let Some(var_39) = &input.queues {
        let mut array_40 = object.key("Queues").start_array();
        for item_41 in var_39 {
            array_40.value().string(item_41);
        }
        array_40.finish();
    }
    if let Some(var_42) = &input.source_access_configurations {
        let mut array_43 = object.key("SourceAccessConfigurations").start_array();
        for item_44 in var_42 {
            let mut object_45 = array_43.value().start_object();
            crate::json_ser::serialize_structure_source_access_configuration(
                &mut object_45,
                item_44,
            );
            object_45.finish();
        }
        array_43.finish();
    }
    if let Some(var_46) = &input.self_managed_event_source {
        let mut object_47 = object.key("SelfManagedEventSource").start_object();
        crate::json_ser::serialize_structure_self_managed_event_source(&mut object_47, var_46);
        object_47.finish();
    }
    if let Some(var_48) = &input.function_response_types {
        let mut array_49 = object.key("FunctionResponseTypes").start_array();
        for item_50 in var_48 {
            array_49.value().string(item_50.as_str());
        }
        array_49.finish();
    }
}

pub fn serialize_structure_create_function_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFunctionInput,
) {
    if let Some(var_51) = &input.function_name {
        object.key("FunctionName").string(var_51);
    }
    if let Some(var_52) = &input.runtime {
        object.key("Runtime").string(var_52.as_str());
    }
    if let Some(var_53) = &input.role {
        object.key("Role").string(var_53);
    }
    if let Some(var_54) = &input.handler {
        object.key("Handler").string(var_54);
    }
    if let Some(var_55) = &input.code {
        let mut object_56 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_function_code(&mut object_56, var_55);
        object_56.finish();
    }
    if let Some(var_57) = &input.description {
        object.key("Description").string(var_57);
    }
    if let Some(var_58) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    if let Some(var_59) = &input.memory_size {
        object.key("MemorySize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_59).into()),
        );
    }
    object.key("Publish").boolean(input.publish);
    if let Some(var_60) = &input.vpc_config {
        let mut object_61 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_61, var_60);
        object_61.finish();
    }
    if let Some(var_62) = &input.package_type {
        object.key("PackageType").string(var_62.as_str());
    }
    if let Some(var_63) = &input.dead_letter_config {
        let mut object_64 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_dead_letter_config(&mut object_64, var_63);
        object_64.finish();
    }
    if let Some(var_65) = &input.environment {
        let mut object_66 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_environment(&mut object_66, var_65);
        object_66.finish();
    }
    if let Some(var_67) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_67);
    }
    if let Some(var_68) = &input.tracing_config {
        let mut object_69 = object.key("TracingConfig").start_object();
        crate::json_ser::serialize_structure_tracing_config(&mut object_69, var_68);
        object_69.finish();
    }
    if let Some(var_70) = &input.tags {
        let mut object_71 = object.key("Tags").start_object();
        for (key_72, value_73) in var_70 {
            object_71.key(key_72).string(value_73);
        }
        object_71.finish();
    }
    if let Some(var_74) = &input.layers {
        let mut array_75 = object.key("Layers").start_array();
        for item_76 in var_74 {
            array_75.value().string(item_76);
        }
        array_75.finish();
    }
    if let Some(var_77) = &input.file_system_configs {
        let mut array_78 = object.key("FileSystemConfigs").start_array();
        for item_79 in var_77 {
            let mut object_80 = array_78.value().start_object();
            crate::json_ser::serialize_structure_file_system_config(&mut object_80, item_79);
            object_80.finish();
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.image_config {
        let mut object_82 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_image_config(&mut object_82, var_81);
        object_82.finish();
    }
    if let Some(var_83) = &input.code_signing_config_arn {
        object.key("CodeSigningConfigArn").string(var_83);
    }
}

pub fn serialize_structure_publish_layer_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PublishLayerVersionInput,
) {
    if let Some(var_84) = &input.description {
        object.key("Description").string(var_84);
    }
    if let Some(var_85) = &input.content {
        let mut object_86 = object.key("Content").start_object();
        crate::json_ser::serialize_structure_layer_version_content_input(&mut object_86, var_85);
        object_86.finish();
    }
    if let Some(var_87) = &input.compatible_runtimes {
        let mut array_88 = object.key("CompatibleRuntimes").start_array();
        for item_89 in var_87 {
            array_88.value().string(item_89.as_str());
        }
        array_88.finish();
    }
    if let Some(var_90) = &input.license_info {
        object.key("LicenseInfo").string(var_90);
    }
}

pub fn serialize_structure_publish_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PublishVersionInput,
) {
    if let Some(var_91) = &input.code_sha256 {
        object.key("CodeSha256").string(var_91);
    }
    if let Some(var_92) = &input.description {
        object.key("Description").string(var_92);
    }
    if let Some(var_93) = &input.revision_id {
        object.key("RevisionId").string(var_93);
    }
}

pub fn serialize_structure_put_function_code_signing_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutFunctionCodeSigningConfigInput,
) {
    if let Some(var_94) = &input.code_signing_config_arn {
        object.key("CodeSigningConfigArn").string(var_94);
    }
}

pub fn serialize_structure_put_function_concurrency_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutFunctionConcurrencyInput,
) {
    if let Some(var_95) = &input.reserved_concurrent_executions {
        object.key("ReservedConcurrentExecutions").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_95).into()),
        );
    }
}

pub fn serialize_structure_put_function_event_invoke_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutFunctionEventInvokeConfigInput,
) {
    if let Some(var_96) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_96).into()),
        );
    }
    if let Some(var_97) = &input.maximum_event_age_in_seconds {
        object.key("MaximumEventAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    if let Some(var_98) = &input.destination_config {
        let mut object_99 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_destination_config(&mut object_99, var_98);
        object_99.finish();
    }
}

pub fn serialize_structure_put_provisioned_concurrency_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutProvisionedConcurrencyConfigInput,
) {
    if let Some(var_100) = &input.provisioned_concurrent_executions {
        object.key("ProvisionedConcurrentExecutions").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_100).into()),
        );
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_101) = &input.tags {
        let mut object_102 = object.key("Tags").start_object();
        for (key_103, value_104) in var_101 {
            object_102.key(key_103).string(value_104);
        }
        object_102.finish();
    }
}

pub fn serialize_structure_update_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAliasInput,
) {
    if let Some(var_105) = &input.function_version {
        object.key("FunctionVersion").string(var_105);
    }
    if let Some(var_106) = &input.description {
        object.key("Description").string(var_106);
    }
    if let Some(var_107) = &input.routing_config {
        let mut object_108 = object.key("RoutingConfig").start_object();
        crate::json_ser::serialize_structure_alias_routing_configuration(&mut object_108, var_107);
        object_108.finish();
    }
    if let Some(var_109) = &input.revision_id {
        object.key("RevisionId").string(var_109);
    }
}

pub fn serialize_structure_update_code_signing_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCodeSigningConfigInput,
) {
    if let Some(var_110) = &input.description {
        object.key("Description").string(var_110);
    }
    if let Some(var_111) = &input.allowed_publishers {
        let mut object_112 = object.key("AllowedPublishers").start_object();
        crate::json_ser::serialize_structure_allowed_publishers(&mut object_112, var_111);
        object_112.finish();
    }
    if let Some(var_113) = &input.code_signing_policies {
        let mut object_114 = object.key("CodeSigningPolicies").start_object();
        crate::json_ser::serialize_structure_code_signing_policies(&mut object_114, var_113);
        object_114.finish();
    }
}

pub fn serialize_structure_update_event_source_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEventSourceMappingInput,
) {
    if let Some(var_115) = &input.function_name {
        object.key("FunctionName").string(var_115);
    }
    if let Some(var_116) = &input.enabled {
        object.key("Enabled").boolean(*var_116);
    }
    if let Some(var_117) = &input.batch_size {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_117).into()),
        );
    }
    if let Some(var_118) = &input.maximum_batching_window_in_seconds {
        object.key("MaximumBatchingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_118).into()),
        );
    }
    if let Some(var_119) = &input.destination_config {
        let mut object_120 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_destination_config(&mut object_120, var_119);
        object_120.finish();
    }
    if let Some(var_121) = &input.maximum_record_age_in_seconds {
        object.key("MaximumRecordAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_121).into()),
        );
    }
    if let Some(var_122) = &input.bisect_batch_on_function_error {
        object.key("BisectBatchOnFunctionError").boolean(*var_122);
    }
    if let Some(var_123) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    if let Some(var_124) = &input.parallelization_factor {
        object.key("ParallelizationFactor").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_124).into()),
        );
    }
    if let Some(var_125) = &input.source_access_configurations {
        let mut array_126 = object.key("SourceAccessConfigurations").start_array();
        for item_127 in var_125 {
            let mut object_128 = array_126.value().start_object();
            crate::json_ser::serialize_structure_source_access_configuration(
                &mut object_128,
                item_127,
            );
            object_128.finish();
        }
        array_126.finish();
    }
    if let Some(var_129) = &input.tumbling_window_in_seconds {
        object.key("TumblingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_129).into()),
        );
    }
    if let Some(var_130) = &input.function_response_types {
        let mut array_131 = object.key("FunctionResponseTypes").start_array();
        for item_132 in var_130 {
            array_131.value().string(item_132.as_str());
        }
        array_131.finish();
    }
}

pub fn serialize_structure_update_function_code_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFunctionCodeInput,
) {
    if let Some(var_133) = &input.zip_file {
        object
            .key("ZipFile")
            .string_unchecked(&smithy_http::base64::encode(var_133));
    }
    if let Some(var_134) = &input.s3_bucket {
        object.key("S3Bucket").string(var_134);
    }
    if let Some(var_135) = &input.s3_key {
        object.key("S3Key").string(var_135);
    }
    if let Some(var_136) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_136);
    }
    if let Some(var_137) = &input.image_uri {
        object.key("ImageUri").string(var_137);
    }
    object.key("Publish").boolean(input.publish);
    object.key("DryRun").boolean(input.dry_run);
    if let Some(var_138) = &input.revision_id {
        object.key("RevisionId").string(var_138);
    }
}

pub fn serialize_structure_update_function_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFunctionConfigurationInput,
) {
    if let Some(var_139) = &input.role {
        object.key("Role").string(var_139);
    }
    if let Some(var_140) = &input.handler {
        object.key("Handler").string(var_140);
    }
    if let Some(var_141) = &input.description {
        object.key("Description").string(var_141);
    }
    if let Some(var_142) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    if let Some(var_143) = &input.memory_size {
        object.key("MemorySize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    if let Some(var_144) = &input.vpc_config {
        let mut object_145 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_145, var_144);
        object_145.finish();
    }
    if let Some(var_146) = &input.environment {
        let mut object_147 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_environment(&mut object_147, var_146);
        object_147.finish();
    }
    if let Some(var_148) = &input.runtime {
        object.key("Runtime").string(var_148.as_str());
    }
    if let Some(var_149) = &input.dead_letter_config {
        let mut object_150 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_dead_letter_config(&mut object_150, var_149);
        object_150.finish();
    }
    if let Some(var_151) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_151);
    }
    if let Some(var_152) = &input.tracing_config {
        let mut object_153 = object.key("TracingConfig").start_object();
        crate::json_ser::serialize_structure_tracing_config(&mut object_153, var_152);
        object_153.finish();
    }
    if let Some(var_154) = &input.revision_id {
        object.key("RevisionId").string(var_154);
    }
    if let Some(var_155) = &input.layers {
        let mut array_156 = object.key("Layers").start_array();
        for item_157 in var_155 {
            array_156.value().string(item_157);
        }
        array_156.finish();
    }
    if let Some(var_158) = &input.file_system_configs {
        let mut array_159 = object.key("FileSystemConfigs").start_array();
        for item_160 in var_158 {
            let mut object_161 = array_159.value().start_object();
            crate::json_ser::serialize_structure_file_system_config(&mut object_161, item_160);
            object_161.finish();
        }
        array_159.finish();
    }
    if let Some(var_162) = &input.image_config {
        let mut object_163 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_image_config(&mut object_163, var_162);
        object_163.finish();
    }
}

pub fn serialize_structure_update_function_event_invoke_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFunctionEventInvokeConfigInput,
) {
    if let Some(var_164) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.maximum_event_age_in_seconds {
        object.key("MaximumEventAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_165).into()),
        );
    }
    if let Some(var_166) = &input.destination_config {
        let mut object_167 = object.key("DestinationConfig").start_object();
        crate::json_ser::serialize_structure_destination_config(&mut object_167, var_166);
        object_167.finish();
    }
}

pub fn serialize_structure_alias_routing_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AliasRoutingConfiguration,
) {
    if let Some(var_168) = &input.additional_version_weights {
        let mut object_169 = object.key("AdditionalVersionWeights").start_object();
        for (key_170, value_171) in var_168 {
            object_169.key(key_170).number(
                #[allow(clippy::useless_conversion)]
                smithy_types::Number::Float((*value_171).into()),
            );
        }
        object_169.finish();
    }
}

pub fn serialize_structure_allowed_publishers(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AllowedPublishers,
) {
    if let Some(var_172) = &input.signing_profile_version_arns {
        let mut array_173 = object.key("SigningProfileVersionArns").start_array();
        for item_174 in var_172 {
            array_173.value().string(item_174);
        }
        array_173.finish();
    }
}

pub fn serialize_structure_code_signing_policies(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeSigningPolicies,
) {
    if let Some(var_175) = &input.untrusted_artifact_on_deployment {
        object
            .key("UntrustedArtifactOnDeployment")
            .string(var_175.as_str());
    }
}

pub fn serialize_structure_destination_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DestinationConfig,
) {
    if let Some(var_176) = &input.on_success {
        let mut object_177 = object.key("OnSuccess").start_object();
        crate::json_ser::serialize_structure_on_success(&mut object_177, var_176);
        object_177.finish();
    }
    if let Some(var_178) = &input.on_failure {
        let mut object_179 = object.key("OnFailure").start_object();
        crate::json_ser::serialize_structure_on_failure(&mut object_179, var_178);
        object_179.finish();
    }
}

pub fn serialize_structure_source_access_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAccessConfiguration,
) {
    if let Some(var_180) = &input.r#type {
        object.key("Type").string(var_180.as_str());
    }
    if let Some(var_181) = &input.uri {
        object.key("URI").string(var_181);
    }
}

pub fn serialize_structure_self_managed_event_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelfManagedEventSource,
) {
    if let Some(var_182) = &input.endpoints {
        let mut object_183 = object.key("Endpoints").start_object();
        for (key_184, value_185) in var_182 {
            let mut array_186 = object_183.key(key_184.as_str()).start_array();
            for item_187 in value_185 {
                array_186.value().string(item_187);
            }
            array_186.finish();
        }
        object_183.finish();
    }
}

pub fn serialize_structure_function_code(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FunctionCode,
) {
    if let Some(var_188) = &input.zip_file {
        object
            .key("ZipFile")
            .string_unchecked(&smithy_http::base64::encode(var_188));
    }
    if let Some(var_189) = &input.s3_bucket {
        object.key("S3Bucket").string(var_189);
    }
    if let Some(var_190) = &input.s3_key {
        object.key("S3Key").string(var_190);
    }
    if let Some(var_191) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_191);
    }
    if let Some(var_192) = &input.image_uri {
        object.key("ImageUri").string(var_192);
    }
}

pub fn serialize_structure_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) {
    if let Some(var_193) = &input.subnet_ids {
        let mut array_194 = object.key("SubnetIds").start_array();
        for item_195 in var_193 {
            array_194.value().string(item_195);
        }
        array_194.finish();
    }
    if let Some(var_196) = &input.security_group_ids {
        let mut array_197 = object.key("SecurityGroupIds").start_array();
        for item_198 in var_196 {
            array_197.value().string(item_198);
        }
        array_197.finish();
    }
}

pub fn serialize_structure_dead_letter_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeadLetterConfig,
) {
    if let Some(var_199) = &input.target_arn {
        object.key("TargetArn").string(var_199);
    }
}

pub fn serialize_structure_environment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Environment,
) {
    if let Some(var_200) = &input.variables {
        let mut object_201 = object.key("Variables").start_object();
        for (key_202, value_203) in var_200 {
            object_201.key(key_202).string(value_203);
        }
        object_201.finish();
    }
}

pub fn serialize_structure_tracing_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TracingConfig,
) {
    if let Some(var_204) = &input.mode {
        object.key("Mode").string(var_204.as_str());
    }
}

pub fn serialize_structure_file_system_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemConfig,
) {
    if let Some(var_205) = &input.arn {
        object.key("Arn").string(var_205);
    }
    if let Some(var_206) = &input.local_mount_path {
        object.key("LocalMountPath").string(var_206);
    }
}

pub fn serialize_structure_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageConfig,
) {
    if let Some(var_207) = &input.entry_point {
        let mut array_208 = object.key("EntryPoint").start_array();
        for item_209 in var_207 {
            array_208.value().string(item_209);
        }
        array_208.finish();
    }
    if let Some(var_210) = &input.command {
        let mut array_211 = object.key("Command").start_array();
        for item_212 in var_210 {
            array_211.value().string(item_212);
        }
        array_211.finish();
    }
    if let Some(var_213) = &input.working_directory {
        object.key("WorkingDirectory").string(var_213);
    }
}

pub fn serialize_structure_layer_version_content_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LayerVersionContentInput,
) {
    if let Some(var_214) = &input.s3_bucket {
        object.key("S3Bucket").string(var_214);
    }
    if let Some(var_215) = &input.s3_key {
        object.key("S3Key").string(var_215);
    }
    if let Some(var_216) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_216);
    }
    if let Some(var_217) = &input.zip_file {
        object
            .key("ZipFile")
            .string_unchecked(&smithy_http::base64::encode(var_217));
    }
}

pub fn serialize_structure_on_success(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnSuccess,
) {
    if let Some(var_218) = &input.destination {
        object.key("Destination").string(var_218);
    }
}

pub fn serialize_structure_on_failure(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnFailure,
) {
    if let Some(var_219) = &input.destination {
        object.key("Destination").string(var_219);
    }
}
