// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_add_layer_version_permission;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_add_permission;

pub(crate) mod shape_create_alias;

pub(crate) mod shape_create_code_signing_config;

pub(crate) mod shape_create_event_source_mapping;

pub(crate) mod shape_create_function;

pub(crate) mod shape_create_function_url_config;

pub(crate) mod shape_delete_alias;

pub(crate) mod shape_delete_code_signing_config;

pub(crate) mod shape_delete_event_source_mapping;

pub(crate) mod shape_delete_function;

pub(crate) mod shape_delete_function_code_signing_config;

pub(crate) mod shape_delete_function_concurrency;

pub(crate) mod shape_delete_function_event_invoke_config;

pub(crate) mod shape_delete_function_url_config;

pub(crate) mod shape_delete_layer_version;

pub(crate) mod shape_delete_provisioned_concurrency_config;

pub(crate) mod shape_get_account_settings;

pub(crate) mod shape_get_alias;

pub(crate) mod shape_get_code_signing_config;

pub(crate) mod shape_get_event_source_mapping;

pub(crate) mod shape_get_function;

pub(crate) mod shape_get_function_code_signing_config;

pub(crate) mod shape_get_function_concurrency;

pub(crate) mod shape_get_function_configuration;

pub(crate) mod shape_get_function_event_invoke_config;

pub(crate) mod shape_get_function_url_config;

pub(crate) mod shape_get_layer_version;

pub(crate) mod shape_get_layer_version_by_arn;

pub(crate) mod shape_get_layer_version_policy;

pub(crate) mod shape_get_policy;

pub(crate) mod shape_get_provisioned_concurrency_config;

pub(crate) mod shape_get_runtime_management_config;

pub(crate) mod shape_invoke;

pub(crate) mod shape_invoke_async;

pub(crate) mod shape_invoke_async_input;

pub(crate) mod shape_invoke_input;

pub(crate) mod shape_list_aliases;

pub(crate) mod shape_list_code_signing_configs;

pub(crate) mod shape_list_event_source_mappings;

pub(crate) mod shape_list_function_event_invoke_configs;

pub(crate) mod shape_list_function_url_configs;

pub(crate) mod shape_list_functions;

pub(crate) mod shape_list_functions_by_code_signing_config;

pub(crate) mod shape_list_layer_versions;

pub(crate) mod shape_list_layers;

pub(crate) mod shape_list_provisioned_concurrency_configs;

pub(crate) mod shape_list_tags;

pub(crate) mod shape_list_versions_by_function;

pub(crate) mod shape_publish_layer_version;

pub(crate) mod shape_publish_version;

pub(crate) mod shape_put_function_code_signing_config;

pub(crate) mod shape_put_function_concurrency;

pub(crate) mod shape_put_function_event_invoke_config;

pub(crate) mod shape_put_provisioned_concurrency_config;

pub(crate) mod shape_put_runtime_management_config;

pub(crate) mod shape_remove_layer_version_permission;

pub(crate) mod shape_remove_permission;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_alias;

pub(crate) mod shape_update_code_signing_config;

pub(crate) mod shape_update_event_source_mapping;

pub(crate) mod shape_update_function_code;

pub(crate) mod shape_update_function_configuration;

pub(crate) mod shape_update_function_event_invoke_config;

pub(crate) mod shape_update_function_url_config;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_add_layer_version_permission_input;

pub(crate) mod shape_add_permission_input;

pub(crate) mod shape_code_signing_config_not_found_exception;

pub(crate) mod shape_code_storage_exceeded_exception;

pub(crate) mod shape_code_verification_failed_exception;

pub(crate) mod shape_create_alias_input;

pub(crate) mod shape_create_code_signing_config_input;

pub(crate) mod shape_create_event_source_mapping_input;

pub(crate) mod shape_create_function_input;

pub(crate) mod shape_create_function_url_config_input;

pub(crate) mod shape_ec2_access_denied_exception;

pub(crate) mod shape_ec2_throttled_exception;

pub(crate) mod shape_ec2_unexpected_exception;

pub(crate) mod shape_efs_mount_connectivity_exception;

pub(crate) mod shape_efs_mount_failure_exception;

pub(crate) mod shape_efs_mount_timeout_exception;

pub(crate) mod shape_efsio_exception;

pub(crate) mod shape_eni_limit_reached_exception;

pub(crate) mod shape_invalid_code_signature_exception;

pub(crate) mod shape_invalid_parameter_value_exception;

pub(crate) mod shape_invalid_request_content_exception;

pub(crate) mod shape_invalid_runtime_exception;

pub(crate) mod shape_invalid_security_group_id_exception;

pub(crate) mod shape_invalid_subnet_id_exception;

pub(crate) mod shape_invalid_zip_file_exception;

pub(crate) mod shape_invoke_output;

pub(crate) mod shape_kms_access_denied_exception;

pub(crate) mod shape_kms_disabled_exception;

pub(crate) mod shape_kms_invalid_state_exception;

pub(crate) mod shape_kms_not_found_exception;

pub(crate) mod shape_policy_length_exceeded_exception;

pub(crate) mod shape_precondition_failed_exception;

pub(crate) mod shape_provisioned_concurrency_config_not_found_exception;

pub(crate) mod shape_publish_layer_version_input;

pub(crate) mod shape_publish_version_input;

pub(crate) mod shape_put_function_code_signing_config_input;

pub(crate) mod shape_put_function_concurrency_input;

pub(crate) mod shape_put_function_event_invoke_config_input;

pub(crate) mod shape_put_provisioned_concurrency_config_input;

pub(crate) mod shape_put_runtime_management_config_input;

pub(crate) mod shape_request_too_large_exception;

pub(crate) mod shape_resource_conflict_exception;

pub(crate) mod shape_resource_in_use_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_resource_not_ready_exception;

pub(crate) mod shape_service_exception;

pub(crate) mod shape_snap_start_exception;

pub(crate) mod shape_snap_start_not_ready_exception;

pub(crate) mod shape_snap_start_timeout_exception;

pub(crate) mod shape_subnet_ip_address_limit_reached_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_too_many_requests_exception;

pub(crate) mod shape_unsupported_media_type_exception;

pub(crate) mod shape_update_alias_input;

pub(crate) mod shape_update_code_signing_config_input;

pub(crate) mod shape_update_event_source_mapping_input;

pub(crate) mod shape_update_function_code_input;

pub(crate) mod shape_update_function_configuration_input;

pub(crate) mod shape_update_function_event_invoke_config_input;

pub(crate) mod shape_update_function_url_config_input;

pub(crate) mod shape_account_limit;

pub(crate) mod shape_account_usage;

pub(crate) mod shape_alias_list;

pub(crate) mod shape_alias_routing_configuration;

pub(crate) mod shape_allowed_publishers;

pub(crate) mod shape_amazon_managed_kafka_event_source_config;

pub(crate) mod shape_architectures_list;

pub(crate) mod shape_code_signing_config;

pub(crate) mod shape_code_signing_config_list;

pub(crate) mod shape_code_signing_policies;

pub(crate) mod shape_compatible_architectures;

pub(crate) mod shape_compatible_runtimes;

pub(crate) mod shape_concurrency;

pub(crate) mod shape_cors;

pub(crate) mod shape_dead_letter_config;

pub(crate) mod shape_destination_config;

pub(crate) mod shape_environment;

pub(crate) mod shape_environment_response;

pub(crate) mod shape_ephemeral_storage;

pub(crate) mod shape_event_source_mappings_list;

pub(crate) mod shape_file_system_config;

pub(crate) mod shape_file_system_config_list;

pub(crate) mod shape_filter_criteria;

pub(crate) mod shape_function_arn_list;

pub(crate) mod shape_function_code;

pub(crate) mod shape_function_code_location;

pub(crate) mod shape_function_configuration;

pub(crate) mod shape_function_event_invoke_config_list;

pub(crate) mod shape_function_list;

pub(crate) mod shape_function_response_type_list;

pub(crate) mod shape_function_url_config_list;

pub(crate) mod shape_image_config;

pub(crate) mod shape_image_config_response;

pub(crate) mod shape_layer_version_content_input;

pub(crate) mod shape_layer_version_content_output;

pub(crate) mod shape_layer_versions_list;

pub(crate) mod shape_layers_list;

pub(crate) mod shape_layers_reference_list;

pub(crate) mod shape_provisioned_concurrency_config_list;

pub(crate) mod shape_queues;

pub(crate) mod shape_runtime_version_config;

pub(crate) mod shape_scaling_config;

pub(crate) mod shape_self_managed_event_source;

pub(crate) mod shape_self_managed_kafka_event_source_config;

pub(crate) mod shape_snap_start;

pub(crate) mod shape_snap_start_response;

pub(crate) mod shape_source_access_configuration;

pub(crate) mod shape_source_access_configurations;

pub(crate) mod shape_tags;

pub(crate) mod shape_topics;

pub(crate) mod shape_tracing_config;

pub(crate) mod shape_tracing_config_response;

pub(crate) mod shape_vpc_config;

pub(crate) mod shape_vpc_config_response;

pub(crate) mod shape_additional_version_weights;

pub(crate) mod shape_alias_configuration;

pub(crate) mod shape_allow_methods_list;

pub(crate) mod shape_allow_origins_list;

pub(crate) mod shape_endpoints;

pub(crate) mod shape_environment_error;

pub(crate) mod shape_environment_variables;

pub(crate) mod shape_event_source_mapping_configuration;

pub(crate) mod shape_filter;

pub(crate) mod shape_filter_list;

pub(crate) mod shape_function_event_invoke_config;

pub(crate) mod shape_function_url_config;

pub(crate) mod shape_headers_list;

pub(crate) mod shape_image_config_error;

pub(crate) mod shape_layer;

pub(crate) mod shape_layer_versions_list_item;

pub(crate) mod shape_layers_list_item;

pub(crate) mod shape_on_failure;

pub(crate) mod shape_on_success;

pub(crate) mod shape_provisioned_concurrency_config_list_item;

pub(crate) mod shape_runtime_version_error;

pub(crate) mod shape_security_group_ids;

pub(crate) mod shape_subnet_ids;

pub(crate) mod shape_endpoint_lists;

pub(crate) mod shape_signing_profile_version_arns;

pub(crate) mod shape_string_list;
