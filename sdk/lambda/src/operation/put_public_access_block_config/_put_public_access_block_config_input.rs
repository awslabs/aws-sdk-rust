// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutPublicAccessBlockConfigInput {
    /// <p>The Amazon Resource Name (ARN) of the function you want to configure public-access settings for. Public-access settings are applied at the function level, so you can't apply different settings to function versions or aliases.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>An object defining the public-access settings you want to apply.</p>
    /// <p>To block the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>true</code>. To allow the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>false</code>.</p>
    /// <p>To block public access to your function, even if its resource-based policy allows it, set <code>RestrictPublicResource</code> to <code>true</code>. To allow public access to a function with a resource-based policy that permits it, set <code>RestrictPublicResource</code> to <code>false</code>.</p>
    /// <p>The default setting for both <code>BlockPublicPolicy</code> and <code>RestrictPublicResource</code> is <code>true</code>.</p>
    pub public_access_block_config: ::std::option::Option<crate::types::PublicAccessBlockConfig>,
}
impl PutPublicAccessBlockConfigInput {
    /// <p>The Amazon Resource Name (ARN) of the function you want to configure public-access settings for. Public-access settings are applied at the function level, so you can't apply different settings to function versions or aliases.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>An object defining the public-access settings you want to apply.</p>
    /// <p>To block the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>true</code>. To allow the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>false</code>.</p>
    /// <p>To block public access to your function, even if its resource-based policy allows it, set <code>RestrictPublicResource</code> to <code>true</code>. To allow public access to a function with a resource-based policy that permits it, set <code>RestrictPublicResource</code> to <code>false</code>.</p>
    /// <p>The default setting for both <code>BlockPublicPolicy</code> and <code>RestrictPublicResource</code> is <code>true</code>.</p>
    pub fn public_access_block_config(&self) -> ::std::option::Option<&crate::types::PublicAccessBlockConfig> {
        self.public_access_block_config.as_ref()
    }
}
impl PutPublicAccessBlockConfigInput {
    /// Creates a new builder-style object to manufacture [`PutPublicAccessBlockConfigInput`](crate::operation::put_public_access_block_config::PutPublicAccessBlockConfigInput).
    pub fn builder() -> crate::operation::put_public_access_block_config::builders::PutPublicAccessBlockConfigInputBuilder {
        crate::operation::put_public_access_block_config::builders::PutPublicAccessBlockConfigInputBuilder::default()
    }
}

/// A builder for [`PutPublicAccessBlockConfigInput`](crate::operation::put_public_access_block_config::PutPublicAccessBlockConfigInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutPublicAccessBlockConfigInputBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) public_access_block_config: ::std::option::Option<crate::types::PublicAccessBlockConfig>,
}
impl PutPublicAccessBlockConfigInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the function you want to configure public-access settings for. Public-access settings are applied at the function level, so you can't apply different settings to function versions or aliases.</p>
    /// This field is required.
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the function you want to configure public-access settings for. Public-access settings are applied at the function level, so you can't apply different settings to function versions or aliases.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the function you want to configure public-access settings for. Public-access settings are applied at the function level, so you can't apply different settings to function versions or aliases.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>An object defining the public-access settings you want to apply.</p>
    /// <p>To block the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>true</code>. To allow the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>false</code>.</p>
    /// <p>To block public access to your function, even if its resource-based policy allows it, set <code>RestrictPublicResource</code> to <code>true</code>. To allow public access to a function with a resource-based policy that permits it, set <code>RestrictPublicResource</code> to <code>false</code>.</p>
    /// <p>The default setting for both <code>BlockPublicPolicy</code> and <code>RestrictPublicResource</code> is <code>true</code>.</p>
    /// This field is required.
    pub fn public_access_block_config(mut self, input: crate::types::PublicAccessBlockConfig) -> Self {
        self.public_access_block_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object defining the public-access settings you want to apply.</p>
    /// <p>To block the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>true</code>. To allow the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>false</code>.</p>
    /// <p>To block public access to your function, even if its resource-based policy allows it, set <code>RestrictPublicResource</code> to <code>true</code>. To allow public access to a function with a resource-based policy that permits it, set <code>RestrictPublicResource</code> to <code>false</code>.</p>
    /// <p>The default setting for both <code>BlockPublicPolicy</code> and <code>RestrictPublicResource</code> is <code>true</code>.</p>
    pub fn set_public_access_block_config(mut self, input: ::std::option::Option<crate::types::PublicAccessBlockConfig>) -> Self {
        self.public_access_block_config = input;
        self
    }
    /// <p>An object defining the public-access settings you want to apply.</p>
    /// <p>To block the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>true</code>. To allow the creation of resource-based policies that would grant public access to your function, set <code>BlockPublicPolicy</code> to <code>false</code>.</p>
    /// <p>To block public access to your function, even if its resource-based policy allows it, set <code>RestrictPublicResource</code> to <code>true</code>. To allow public access to a function with a resource-based policy that permits it, set <code>RestrictPublicResource</code> to <code>false</code>.</p>
    /// <p>The default setting for both <code>BlockPublicPolicy</code> and <code>RestrictPublicResource</code> is <code>true</code>.</p>
    pub fn get_public_access_block_config(&self) -> &::std::option::Option<crate::types::PublicAccessBlockConfig> {
        &self.public_access_block_config
    }
    /// Consumes the builder and constructs a [`PutPublicAccessBlockConfigInput`](crate::operation::put_public_access_block_config::PutPublicAccessBlockConfigInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_public_access_block_config::PutPublicAccessBlockConfigInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::put_public_access_block_config::PutPublicAccessBlockConfigInput {
            resource_arn: self.resource_arn,
            public_access_block_config: self.public_access_block_config,
        })
    }
}
