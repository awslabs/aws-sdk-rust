// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateFunctionUrlConfigOutput {
    /// <p>The HTTP URL endpoint for your function.</p>
    pub function_url: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of your function.</p>
    pub function_arn: ::std::string::String,
    /// <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html">Security and auth model for Lambda function URLs</a>.</p>
    pub auth_type: crate::types::FunctionUrlAuthType,
    /// <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings for your function URL.</p>
    pub cors: ::std::option::Option<crate::types::Cors>,
    /// <p>When the function URL was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
    pub creation_time: ::std::string::String,
    /// <p>Use one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>BUFFERED</code> – This is the default option. Lambda invokes your function using the <code>Invoke</code> API operation. Invocation results are available when the payload is complete. The maximum payload size is 6 MB.</p> </li>
    /// <li> <p> <code>RESPONSE_STREAM</code> – Your function streams payload results as they become available. Lambda invokes your function using the <code>InvokeWithResponseStream</code> API operation. The maximum response payload size is 20 MB, however, you can <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html">request a quota increase</a>.</p> </li>
    /// </ul>
    pub invoke_mode: ::std::option::Option<crate::types::InvokeMode>,
    _request_id: Option<String>,
}
impl CreateFunctionUrlConfigOutput {
    /// <p>The HTTP URL endpoint for your function.</p>
    pub fn function_url(&self) -> &str {
        use std::ops::Deref;
        self.function_url.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of your function.</p>
    pub fn function_arn(&self) -> &str {
        use std::ops::Deref;
        self.function_arn.deref()
    }
    /// <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html">Security and auth model for Lambda function URLs</a>.</p>
    pub fn auth_type(&self) -> &crate::types::FunctionUrlAuthType {
        &self.auth_type
    }
    /// <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings for your function URL.</p>
    pub fn cors(&self) -> ::std::option::Option<&crate::types::Cors> {
        self.cors.as_ref()
    }
    /// <p>When the function URL was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
    pub fn creation_time(&self) -> &str {
        use std::ops::Deref;
        self.creation_time.deref()
    }
    /// <p>Use one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>BUFFERED</code> – This is the default option. Lambda invokes your function using the <code>Invoke</code> API operation. Invocation results are available when the payload is complete. The maximum payload size is 6 MB.</p> </li>
    /// <li> <p> <code>RESPONSE_STREAM</code> – Your function streams payload results as they become available. Lambda invokes your function using the <code>InvokeWithResponseStream</code> API operation. The maximum response payload size is 20 MB, however, you can <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html">request a quota increase</a>.</p> </li>
    /// </ul>
    pub fn invoke_mode(&self) -> ::std::option::Option<&crate::types::InvokeMode> {
        self.invoke_mode.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for CreateFunctionUrlConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateFunctionUrlConfigOutput {
    /// Creates a new builder-style object to manufacture [`CreateFunctionUrlConfigOutput`](crate::operation::create_function_url_config::CreateFunctionUrlConfigOutput).
    pub fn builder() -> crate::operation::create_function_url_config::builders::CreateFunctionUrlConfigOutputBuilder {
        crate::operation::create_function_url_config::builders::CreateFunctionUrlConfigOutputBuilder::default()
    }
}

/// A builder for [`CreateFunctionUrlConfigOutput`](crate::operation::create_function_url_config::CreateFunctionUrlConfigOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateFunctionUrlConfigOutputBuilder {
    pub(crate) function_url: ::std::option::Option<::std::string::String>,
    pub(crate) function_arn: ::std::option::Option<::std::string::String>,
    pub(crate) auth_type: ::std::option::Option<crate::types::FunctionUrlAuthType>,
    pub(crate) cors: ::std::option::Option<crate::types::Cors>,
    pub(crate) creation_time: ::std::option::Option<::std::string::String>,
    pub(crate) invoke_mode: ::std::option::Option<crate::types::InvokeMode>,
    _request_id: Option<String>,
}
impl CreateFunctionUrlConfigOutputBuilder {
    /// <p>The HTTP URL endpoint for your function.</p>
    /// This field is required.
    pub fn function_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HTTP URL endpoint for your function.</p>
    pub fn set_function_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function_url = input;
        self
    }
    /// <p>The HTTP URL endpoint for your function.</p>
    pub fn get_function_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.function_url
    }
    /// <p>The Amazon Resource Name (ARN) of your function.</p>
    /// This field is required.
    pub fn function_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your function.</p>
    pub fn set_function_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your function.</p>
    pub fn get_function_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.function_arn
    }
    /// <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html">Security and auth model for Lambda function URLs</a>.</p>
    /// This field is required.
    pub fn auth_type(mut self, input: crate::types::FunctionUrlAuthType) -> Self {
        self.auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html">Security and auth model for Lambda function URLs</a>.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::FunctionUrlAuthType>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html">Security and auth model for Lambda function URLs</a>.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::FunctionUrlAuthType> {
        &self.auth_type
    }
    /// <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings for your function URL.</p>
    pub fn cors(mut self, input: crate::types::Cors) -> Self {
        self.cors = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings for your function URL.</p>
    pub fn set_cors(mut self, input: ::std::option::Option<crate::types::Cors>) -> Self {
        self.cors = input;
        self
    }
    /// <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings for your function URL.</p>
    pub fn get_cors(&self) -> &::std::option::Option<crate::types::Cors> {
        &self.cors
    }
    /// <p>When the function URL was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
    /// This field is required.
    pub fn creation_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When the function URL was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the function URL was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_time
    }
    /// <p>Use one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>BUFFERED</code> – This is the default option. Lambda invokes your function using the <code>Invoke</code> API operation. Invocation results are available when the payload is complete. The maximum payload size is 6 MB.</p> </li>
    /// <li> <p> <code>RESPONSE_STREAM</code> – Your function streams payload results as they become available. Lambda invokes your function using the <code>InvokeWithResponseStream</code> API operation. The maximum response payload size is 20 MB, however, you can <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html">request a quota increase</a>.</p> </li>
    /// </ul>
    pub fn invoke_mode(mut self, input: crate::types::InvokeMode) -> Self {
        self.invoke_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>BUFFERED</code> – This is the default option. Lambda invokes your function using the <code>Invoke</code> API operation. Invocation results are available when the payload is complete. The maximum payload size is 6 MB.</p> </li>
    /// <li> <p> <code>RESPONSE_STREAM</code> – Your function streams payload results as they become available. Lambda invokes your function using the <code>InvokeWithResponseStream</code> API operation. The maximum response payload size is 20 MB, however, you can <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html">request a quota increase</a>.</p> </li>
    /// </ul>
    pub fn set_invoke_mode(mut self, input: ::std::option::Option<crate::types::InvokeMode>) -> Self {
        self.invoke_mode = input;
        self
    }
    /// <p>Use one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>BUFFERED</code> – This is the default option. Lambda invokes your function using the <code>Invoke</code> API operation. Invocation results are available when the payload is complete. The maximum payload size is 6 MB.</p> </li>
    /// <li> <p> <code>RESPONSE_STREAM</code> – Your function streams payload results as they become available. Lambda invokes your function using the <code>InvokeWithResponseStream</code> API operation. The maximum response payload size is 20 MB, however, you can <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html">request a quota increase</a>.</p> </li>
    /// </ul>
    pub fn get_invoke_mode(&self) -> &::std::option::Option<crate::types::InvokeMode> {
        &self.invoke_mode
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateFunctionUrlConfigOutput`](crate::operation::create_function_url_config::CreateFunctionUrlConfigOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`function_url`](crate::operation::create_function_url_config::builders::CreateFunctionUrlConfigOutputBuilder::function_url)
    /// - [`function_arn`](crate::operation::create_function_url_config::builders::CreateFunctionUrlConfigOutputBuilder::function_arn)
    /// - [`auth_type`](crate::operation::create_function_url_config::builders::CreateFunctionUrlConfigOutputBuilder::auth_type)
    /// - [`creation_time`](crate::operation::create_function_url_config::builders::CreateFunctionUrlConfigOutputBuilder::creation_time)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_function_url_config::CreateFunctionUrlConfigOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_function_url_config::CreateFunctionUrlConfigOutput {
            function_url: self.function_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "function_url",
                    "function_url was not specified but it is required when building CreateFunctionUrlConfigOutput",
                )
            })?,
            function_arn: self.function_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "function_arn",
                    "function_arn was not specified but it is required when building CreateFunctionUrlConfigOutput",
                )
            })?,
            auth_type: self.auth_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "auth_type",
                    "auth_type was not specified but it is required when building CreateFunctionUrlConfigOutput",
                )
            })?,
            cors: self.cors,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building CreateFunctionUrlConfigOutput",
                )
            })?,
            invoke_mode: self.invoke_mode,
            _request_id: self._request_id,
        })
    }
}
