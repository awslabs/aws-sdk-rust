// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFunctionConcurrencyOutput {
    /// <p>The number of simultaneous executions that are reserved for the function.</p>
    #[doc(hidden)]
    pub reserved_concurrent_executions: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetFunctionConcurrencyOutput {
    /// <p>The number of simultaneous executions that are reserved for the function.</p>
    pub fn reserved_concurrent_executions(&self) -> std::option::Option<i32> {
        self.reserved_concurrent_executions
    }
}
impl aws_http::request_id::RequestId for GetFunctionConcurrencyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetFunctionConcurrencyOutput {
    /// Creates a new builder-style object to manufacture [`GetFunctionConcurrencyOutput`](crate::operation::get_function_concurrency::GetFunctionConcurrencyOutput).
    pub fn builder(
    ) -> crate::operation::get_function_concurrency::builders::GetFunctionConcurrencyOutputBuilder
    {
        crate::operation::get_function_concurrency::builders::GetFunctionConcurrencyOutputBuilder::default()
    }
}

/// A builder for [`GetFunctionConcurrencyOutput`](crate::operation::get_function_concurrency::GetFunctionConcurrencyOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetFunctionConcurrencyOutputBuilder {
    pub(crate) reserved_concurrent_executions: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetFunctionConcurrencyOutputBuilder {
    /// <p>The number of simultaneous executions that are reserved for the function.</p>
    pub fn reserved_concurrent_executions(mut self, input: i32) -> Self {
        self.reserved_concurrent_executions = Some(input);
        self
    }
    /// <p>The number of simultaneous executions that are reserved for the function.</p>
    pub fn set_reserved_concurrent_executions(mut self, input: std::option::Option<i32>) -> Self {
        self.reserved_concurrent_executions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetFunctionConcurrencyOutput`](crate::operation::get_function_concurrency::GetFunctionConcurrencyOutput).
    pub fn build(self) -> crate::operation::get_function_concurrency::GetFunctionConcurrencyOutput {
        crate::operation::get_function_concurrency::GetFunctionConcurrencyOutput {
            reserved_concurrent_executions: self.reserved_concurrent_executions,
            _request_id: self._request_id,
        }
    }
}
