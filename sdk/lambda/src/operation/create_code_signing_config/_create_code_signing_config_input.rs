// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCodeSigningConfigInput {
    /// <p>Descriptive name for this code signing configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Signing profiles for this code signing configuration.</p>
    pub allowed_publishers: ::std::option::Option<crate::types::AllowedPublishers>,
    /// <p>The code signing policies define the actions to take if the validation checks fail.</p>
    pub code_signing_policies: ::std::option::Option<crate::types::CodeSigningPolicies>,
    /// <p>A list of tags to add to the code signing configuration.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateCodeSigningConfigInput {
    /// <p>Descriptive name for this code signing configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Signing profiles for this code signing configuration.</p>
    pub fn allowed_publishers(&self) -> ::std::option::Option<&crate::types::AllowedPublishers> {
        self.allowed_publishers.as_ref()
    }
    /// <p>The code signing policies define the actions to take if the validation checks fail.</p>
    pub fn code_signing_policies(&self) -> ::std::option::Option<&crate::types::CodeSigningPolicies> {
        self.code_signing_policies.as_ref()
    }
    /// <p>A list of tags to add to the code signing configuration.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateCodeSigningConfigInput {
    /// Creates a new builder-style object to manufacture [`CreateCodeSigningConfigInput`](crate::operation::create_code_signing_config::CreateCodeSigningConfigInput).
    pub fn builder() -> crate::operation::create_code_signing_config::builders::CreateCodeSigningConfigInputBuilder {
        crate::operation::create_code_signing_config::builders::CreateCodeSigningConfigInputBuilder::default()
    }
}

/// A builder for [`CreateCodeSigningConfigInput`](crate::operation::create_code_signing_config::CreateCodeSigningConfigInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateCodeSigningConfigInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) allowed_publishers: ::std::option::Option<crate::types::AllowedPublishers>,
    pub(crate) code_signing_policies: ::std::option::Option<crate::types::CodeSigningPolicies>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateCodeSigningConfigInputBuilder {
    /// <p>Descriptive name for this code signing configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Descriptive name for this code signing configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Descriptive name for this code signing configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Signing profiles for this code signing configuration.</p>
    /// This field is required.
    pub fn allowed_publishers(mut self, input: crate::types::AllowedPublishers) -> Self {
        self.allowed_publishers = ::std::option::Option::Some(input);
        self
    }
    /// <p>Signing profiles for this code signing configuration.</p>
    pub fn set_allowed_publishers(mut self, input: ::std::option::Option<crate::types::AllowedPublishers>) -> Self {
        self.allowed_publishers = input;
        self
    }
    /// <p>Signing profiles for this code signing configuration.</p>
    pub fn get_allowed_publishers(&self) -> &::std::option::Option<crate::types::AllowedPublishers> {
        &self.allowed_publishers
    }
    /// <p>The code signing policies define the actions to take if the validation checks fail.</p>
    pub fn code_signing_policies(mut self, input: crate::types::CodeSigningPolicies) -> Self {
        self.code_signing_policies = ::std::option::Option::Some(input);
        self
    }
    /// <p>The code signing policies define the actions to take if the validation checks fail.</p>
    pub fn set_code_signing_policies(mut self, input: ::std::option::Option<crate::types::CodeSigningPolicies>) -> Self {
        self.code_signing_policies = input;
        self
    }
    /// <p>The code signing policies define the actions to take if the validation checks fail.</p>
    pub fn get_code_signing_policies(&self) -> &::std::option::Option<crate::types::CodeSigningPolicies> {
        &self.code_signing_policies
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to add to the code signing configuration.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A list of tags to add to the code signing configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags to add to the code signing configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateCodeSigningConfigInput`](crate::operation::create_code_signing_config::CreateCodeSigningConfigInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_code_signing_config::CreateCodeSigningConfigInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_code_signing_config::CreateCodeSigningConfigInput {
            description: self.description,
            allowed_publishers: self.allowed_publishers,
            code_signing_policies: self.code_signing_policies,
            tags: self.tags,
        })
    }
}
