// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListFunctionsInput {
    /// <p>For Lambda@Edge functions, the Amazon Web Services Region of the master function. For example, <code>us-east-1</code> filters the list of functions to include only Lambda@Edge functions replicated from a master function in US East (N. Virginia). If specified, you must set <code>FunctionVersion</code> to <code>ALL</code>.</p>
    pub master_region: ::std::option::Option<::std::string::String>,
    /// <p>Set to <code>ALL</code> to include entries for all published versions of each function.</p>
    pub function_version: ::std::option::Option<crate::types::FunctionVersion>,
    /// <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of functions to return in the response. Note that <code>ListFunctions</code> returns a maximum of 50 items in each response, even if you set the number higher.</p>
    pub max_items: ::std::option::Option<i32>,
}
impl ListFunctionsInput {
    /// <p>For Lambda@Edge functions, the Amazon Web Services Region of the master function. For example, <code>us-east-1</code> filters the list of functions to include only Lambda@Edge functions replicated from a master function in US East (N. Virginia). If specified, you must set <code>FunctionVersion</code> to <code>ALL</code>.</p>
    pub fn master_region(&self) -> ::std::option::Option<&str> {
        self.master_region.as_deref()
    }
    /// <p>Set to <code>ALL</code> to include entries for all published versions of each function.</p>
    pub fn function_version(&self) -> ::std::option::Option<&crate::types::FunctionVersion> {
        self.function_version.as_ref()
    }
    /// <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The maximum number of functions to return in the response. Note that <code>ListFunctions</code> returns a maximum of 50 items in each response, even if you set the number higher.</p>
    pub fn max_items(&self) -> ::std::option::Option<i32> {
        self.max_items
    }
}
impl ListFunctionsInput {
    /// Creates a new builder-style object to manufacture [`ListFunctionsInput`](crate::operation::list_functions::ListFunctionsInput).
    pub fn builder() -> crate::operation::list_functions::builders::ListFunctionsInputBuilder {
        crate::operation::list_functions::builders::ListFunctionsInputBuilder::default()
    }
}

/// A builder for [`ListFunctionsInput`](crate::operation::list_functions::ListFunctionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListFunctionsInputBuilder {
    pub(crate) master_region: ::std::option::Option<::std::string::String>,
    pub(crate) function_version: ::std::option::Option<crate::types::FunctionVersion>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) max_items: ::std::option::Option<i32>,
}
impl ListFunctionsInputBuilder {
    /// <p>For Lambda@Edge functions, the Amazon Web Services Region of the master function. For example, <code>us-east-1</code> filters the list of functions to include only Lambda@Edge functions replicated from a master function in US East (N. Virginia). If specified, you must set <code>FunctionVersion</code> to <code>ALL</code>.</p>
    pub fn master_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.master_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>For Lambda@Edge functions, the Amazon Web Services Region of the master function. For example, <code>us-east-1</code> filters the list of functions to include only Lambda@Edge functions replicated from a master function in US East (N. Virginia). If specified, you must set <code>FunctionVersion</code> to <code>ALL</code>.</p>
    pub fn set_master_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.master_region = input;
        self
    }
    /// <p>For Lambda@Edge functions, the Amazon Web Services Region of the master function. For example, <code>us-east-1</code> filters the list of functions to include only Lambda@Edge functions replicated from a master function in US East (N. Virginia). If specified, you must set <code>FunctionVersion</code> to <code>ALL</code>.</p>
    pub fn get_master_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.master_region
    }
    /// <p>Set to <code>ALL</code> to include entries for all published versions of each function.</p>
    pub fn function_version(mut self, input: crate::types::FunctionVersion) -> Self {
        self.function_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to <code>ALL</code> to include entries for all published versions of each function.</p>
    pub fn set_function_version(mut self, input: ::std::option::Option<crate::types::FunctionVersion>) -> Self {
        self.function_version = input;
        self
    }
    /// <p>Set to <code>ALL</code> to include entries for all published versions of each function.</p>
    pub fn get_function_version(&self) -> &::std::option::Option<crate::types::FunctionVersion> {
        &self.function_version
    }
    /// <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>The maximum number of functions to return in the response. Note that <code>ListFunctions</code> returns a maximum of 50 items in each response, even if you set the number higher.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of functions to return in the response. Note that <code>ListFunctions</code> returns a maximum of 50 items in each response, even if you set the number higher.</p>
    pub fn set_max_items(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// <p>The maximum number of functions to return in the response. Note that <code>ListFunctions</code> returns a maximum of 50 items in each response, even if you set the number higher.</p>
    pub fn get_max_items(&self) -> &::std::option::Option<i32> {
        &self.max_items
    }
    /// Consumes the builder and constructs a [`ListFunctionsInput`](crate::operation::list_functions::ListFunctionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_functions::ListFunctionsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_functions::ListFunctionsInput {
            master_region: self.master_region,
            function_version: self.function_version,
            marker: self.marker,
            max_items: self.max_items,
        })
    }
}
