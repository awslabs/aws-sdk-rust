// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListFunctionsByCodeSigningConfigInput {
    /// <p>The The Amazon Resource Name (ARN) of the code signing configuration.</p>
    pub code_signing_config_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>Maximum number of items to return.</p>
    pub max_items: ::std::option::Option<i32>,
}
impl ListFunctionsByCodeSigningConfigInput {
    /// <p>The The Amazon Resource Name (ARN) of the code signing configuration.</p>
    pub fn code_signing_config_arn(&self) -> ::std::option::Option<&str> {
        self.code_signing_config_arn.as_deref()
    }
    /// <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Maximum number of items to return.</p>
    pub fn max_items(&self) -> ::std::option::Option<i32> {
        self.max_items
    }
}
impl ListFunctionsByCodeSigningConfigInput {
    /// Creates a new builder-style object to manufacture [`ListFunctionsByCodeSigningConfigInput`](crate::operation::list_functions_by_code_signing_config::ListFunctionsByCodeSigningConfigInput).
    pub fn builder() -> crate::operation::list_functions_by_code_signing_config::builders::ListFunctionsByCodeSigningConfigInputBuilder {
        crate::operation::list_functions_by_code_signing_config::builders::ListFunctionsByCodeSigningConfigInputBuilder::default()
    }
}

/// A builder for [`ListFunctionsByCodeSigningConfigInput`](crate::operation::list_functions_by_code_signing_config::ListFunctionsByCodeSigningConfigInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListFunctionsByCodeSigningConfigInputBuilder {
    pub(crate) code_signing_config_arn: ::std::option::Option<::std::string::String>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) max_items: ::std::option::Option<i32>,
}
impl ListFunctionsByCodeSigningConfigInputBuilder {
    /// <p>The The Amazon Resource Name (ARN) of the code signing configuration.</p>
    /// This field is required.
    pub fn code_signing_config_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code_signing_config_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The The Amazon Resource Name (ARN) of the code signing configuration.</p>
    pub fn set_code_signing_config_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code_signing_config_arn = input;
        self
    }
    /// <p>The The Amazon Resource Name (ARN) of the code signing configuration.</p>
    pub fn get_code_signing_config_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.code_signing_config_arn
    }
    /// <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>Maximum number of items to return.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of items to return.</p>
    pub fn set_max_items(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// <p>Maximum number of items to return.</p>
    pub fn get_max_items(&self) -> &::std::option::Option<i32> {
        &self.max_items
    }
    /// Consumes the builder and constructs a [`ListFunctionsByCodeSigningConfigInput`](crate::operation::list_functions_by_code_signing_config::ListFunctionsByCodeSigningConfigInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_functions_by_code_signing_config::ListFunctionsByCodeSigningConfigInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_functions_by_code_signing_config::ListFunctionsByCodeSigningConfigInput {
                code_signing_config_arn: self.code_signing_config_arn,
                marker: self.marker,
                max_items: self.max_items,
            },
        )
    }
}
