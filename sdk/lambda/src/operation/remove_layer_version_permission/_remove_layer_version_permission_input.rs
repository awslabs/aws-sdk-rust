// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RemoveLayerVersionPermissionInput {
    /// <p>The name or Amazon Resource Name (ARN) of the layer.</p>
    #[doc(hidden)]
    pub layer_name: std::option::Option<std::string::String>,
    /// <p>The version number.</p>
    #[doc(hidden)]
    pub version_number: i64,
    /// <p>The identifier that was specified when the statement was added.</p>
    #[doc(hidden)]
    pub statement_id: std::option::Option<std::string::String>,
    /// <p>Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.</p>
    #[doc(hidden)]
    pub revision_id: std::option::Option<std::string::String>,
}
impl RemoveLayerVersionPermissionInput {
    /// <p>The name or Amazon Resource Name (ARN) of the layer.</p>
    pub fn layer_name(&self) -> std::option::Option<&str> {
        self.layer_name.as_deref()
    }
    /// <p>The version number.</p>
    pub fn version_number(&self) -> i64 {
        self.version_number
    }
    /// <p>The identifier that was specified when the statement was added.</p>
    pub fn statement_id(&self) -> std::option::Option<&str> {
        self.statement_id.as_deref()
    }
    /// <p>Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.</p>
    pub fn revision_id(&self) -> std::option::Option<&str> {
        self.revision_id.as_deref()
    }
}
impl RemoveLayerVersionPermissionInput {
    /// Creates a new builder-style object to manufacture [`RemoveLayerVersionPermissionInput`](crate::operation::remove_layer_version_permission::RemoveLayerVersionPermissionInput).
    pub fn builder() -> crate::operation::remove_layer_version_permission::builders::RemoveLayerVersionPermissionInputBuilder{
        crate::operation::remove_layer_version_permission::builders::RemoveLayerVersionPermissionInputBuilder::default()
    }
}

/// A builder for [`RemoveLayerVersionPermissionInput`](crate::operation::remove_layer_version_permission::RemoveLayerVersionPermissionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RemoveLayerVersionPermissionInputBuilder {
    pub(crate) layer_name: std::option::Option<std::string::String>,
    pub(crate) version_number: std::option::Option<i64>,
    pub(crate) statement_id: std::option::Option<std::string::String>,
    pub(crate) revision_id: std::option::Option<std::string::String>,
}
impl RemoveLayerVersionPermissionInputBuilder {
    /// <p>The name or Amazon Resource Name (ARN) of the layer.</p>
    pub fn layer_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.layer_name = Some(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the layer.</p>
    pub fn set_layer_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.layer_name = input;
        self
    }
    /// <p>The version number.</p>
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = Some(input);
        self
    }
    /// <p>The version number.</p>
    pub fn set_version_number(mut self, input: std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The identifier that was specified when the statement was added.</p>
    pub fn statement_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.statement_id = Some(input.into());
        self
    }
    /// <p>The identifier that was specified when the statement was added.</p>
    pub fn set_statement_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.statement_id = input;
        self
    }
    /// <p>Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.</p>
    pub fn revision_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.revision_id = Some(input.into());
        self
    }
    /// <p>Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.</p>
    pub fn set_revision_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.revision_id = input;
        self
    }
    /// Consumes the builder and constructs a [`RemoveLayerVersionPermissionInput`](crate::operation::remove_layer_version_permission::RemoveLayerVersionPermissionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::remove_layer_version_permission::RemoveLayerVersionPermissionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::remove_layer_version_permission::RemoveLayerVersionPermissionInput {
                layer_name: self.layer_name,
                version_number: self.version_number.unwrap_or_default(),
                statement_id: self.statement_id,
                revision_id: self.revision_id,
            },
        )
    }
}
