// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListFunctionUrlConfigsOutput {
    /// <p>A list of function URL configurations.</p>
    #[doc(hidden)]
    pub function_url_configs: std::option::Option<std::vec::Vec<crate::types::FunctionUrlConfig>>,
    /// <p>The pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListFunctionUrlConfigsOutput {
    /// <p>A list of function URL configurations.</p>
    pub fn function_url_configs(&self) -> std::option::Option<&[crate::types::FunctionUrlConfig]> {
        self.function_url_configs.as_deref()
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn next_marker(&self) -> std::option::Option<&str> {
        self.next_marker.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListFunctionUrlConfigsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListFunctionUrlConfigsOutput {
    /// Creates a new builder-style object to manufacture [`ListFunctionUrlConfigsOutput`](crate::operation::list_function_url_configs::ListFunctionUrlConfigsOutput).
    pub fn builder(
    ) -> crate::operation::list_function_url_configs::builders::ListFunctionUrlConfigsOutputBuilder
    {
        crate::operation::list_function_url_configs::builders::ListFunctionUrlConfigsOutputBuilder::default()
    }
}

/// A builder for [`ListFunctionUrlConfigsOutput`](crate::operation::list_function_url_configs::ListFunctionUrlConfigsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListFunctionUrlConfigsOutputBuilder {
    pub(crate) function_url_configs:
        std::option::Option<std::vec::Vec<crate::types::FunctionUrlConfig>>,
    pub(crate) next_marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListFunctionUrlConfigsOutputBuilder {
    /// Appends an item to `function_url_configs`.
    ///
    /// To override the contents of this collection use [`set_function_url_configs`](Self::set_function_url_configs).
    ///
    /// <p>A list of function URL configurations.</p>
    pub fn function_url_configs(mut self, input: crate::types::FunctionUrlConfig) -> Self {
        let mut v = self.function_url_configs.unwrap_or_default();
        v.push(input);
        self.function_url_configs = Some(v);
        self
    }
    /// <p>A list of function URL configurations.</p>
    pub fn set_function_url_configs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FunctionUrlConfig>>,
    ) -> Self {
        self.function_url_configs = input;
        self
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn next_marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_marker = Some(input.into());
        self
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_marker = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListFunctionUrlConfigsOutput`](crate::operation::list_function_url_configs::ListFunctionUrlConfigsOutput).
    pub fn build(
        self,
    ) -> crate::operation::list_function_url_configs::ListFunctionUrlConfigsOutput {
        crate::operation::list_function_url_configs::ListFunctionUrlConfigsOutput {
            function_url_configs: self.function_url_configs,
            next_marker: self.next_marker,
            _request_id: self._request_id,
        }
    }
}
