// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PublishLayerVersionOutput {
    /// <p>Details about the layer version.</p>
    #[doc(hidden)]
    pub content: std::option::Option<crate::types::LayerVersionContentOutput>,
    /// <p>The ARN of the layer.</p>
    #[doc(hidden)]
    pub layer_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the layer version.</p>
    #[doc(hidden)]
    pub layer_version_arn: std::option::Option<std::string::String>,
    /// <p>The description of the version.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The date that the layer version was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<std::string::String>,
    /// <p>The version number.</p>
    #[doc(hidden)]
    pub version: i64,
    /// <p>The layer's compatible runtimes.</p>
    #[doc(hidden)]
    pub compatible_runtimes: std::option::Option<std::vec::Vec<crate::types::Runtime>>,
    /// <p>The layer's software license.</p>
    #[doc(hidden)]
    pub license_info: std::option::Option<std::string::String>,
    /// <p>A list of compatible <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architectures</a>.</p>
    #[doc(hidden)]
    pub compatible_architectures: std::option::Option<std::vec::Vec<crate::types::Architecture>>,
    _request_id: Option<String>,
}
impl PublishLayerVersionOutput {
    /// <p>Details about the layer version.</p>
    pub fn content(&self) -> std::option::Option<&crate::types::LayerVersionContentOutput> {
        self.content.as_ref()
    }
    /// <p>The ARN of the layer.</p>
    pub fn layer_arn(&self) -> std::option::Option<&str> {
        self.layer_arn.as_deref()
    }
    /// <p>The ARN of the layer version.</p>
    pub fn layer_version_arn(&self) -> std::option::Option<&str> {
        self.layer_version_arn.as_deref()
    }
    /// <p>The description of the version.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date that the layer version was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
    pub fn created_date(&self) -> std::option::Option<&str> {
        self.created_date.as_deref()
    }
    /// <p>The version number.</p>
    pub fn version(&self) -> i64 {
        self.version
    }
    /// <p>The layer's compatible runtimes.</p>
    pub fn compatible_runtimes(&self) -> std::option::Option<&[crate::types::Runtime]> {
        self.compatible_runtimes.as_deref()
    }
    /// <p>The layer's software license.</p>
    pub fn license_info(&self) -> std::option::Option<&str> {
        self.license_info.as_deref()
    }
    /// <p>A list of compatible <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architectures</a>.</p>
    pub fn compatible_architectures(&self) -> std::option::Option<&[crate::types::Architecture]> {
        self.compatible_architectures.as_deref()
    }
}
impl aws_http::request_id::RequestId for PublishLayerVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PublishLayerVersionOutput {
    /// Creates a new builder-style object to manufacture [`PublishLayerVersionOutput`](crate::operation::publish_layer_version::PublishLayerVersionOutput).
    pub fn builder(
    ) -> crate::operation::publish_layer_version::builders::PublishLayerVersionOutputBuilder {
        crate::operation::publish_layer_version::builders::PublishLayerVersionOutputBuilder::default(
        )
    }
}

/// A builder for [`PublishLayerVersionOutput`](crate::operation::publish_layer_version::PublishLayerVersionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PublishLayerVersionOutputBuilder {
    pub(crate) content: std::option::Option<crate::types::LayerVersionContentOutput>,
    pub(crate) layer_arn: std::option::Option<std::string::String>,
    pub(crate) layer_version_arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) created_date: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<i64>,
    pub(crate) compatible_runtimes: std::option::Option<std::vec::Vec<crate::types::Runtime>>,
    pub(crate) license_info: std::option::Option<std::string::String>,
    pub(crate) compatible_architectures:
        std::option::Option<std::vec::Vec<crate::types::Architecture>>,
    _request_id: Option<String>,
}
impl PublishLayerVersionOutputBuilder {
    /// <p>Details about the layer version.</p>
    pub fn content(mut self, input: crate::types::LayerVersionContentOutput) -> Self {
        self.content = Some(input);
        self
    }
    /// <p>Details about the layer version.</p>
    pub fn set_content(
        mut self,
        input: std::option::Option<crate::types::LayerVersionContentOutput>,
    ) -> Self {
        self.content = input;
        self
    }
    /// <p>The ARN of the layer.</p>
    pub fn layer_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.layer_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the layer.</p>
    pub fn set_layer_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.layer_arn = input;
        self
    }
    /// <p>The ARN of the layer version.</p>
    pub fn layer_version_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.layer_version_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the layer version.</p>
    pub fn set_layer_version_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.layer_version_arn = input;
        self
    }
    /// <p>The description of the version.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the version.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The date that the layer version was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
    pub fn created_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_date = Some(input.into());
        self
    }
    /// <p>The date that the layer version was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).</p>
    pub fn set_created_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The version number.</p>
    pub fn version(mut self, input: i64) -> Self {
        self.version = Some(input);
        self
    }
    /// <p>The version number.</p>
    pub fn set_version(mut self, input: std::option::Option<i64>) -> Self {
        self.version = input;
        self
    }
    /// Appends an item to `compatible_runtimes`.
    ///
    /// To override the contents of this collection use [`set_compatible_runtimes`](Self::set_compatible_runtimes).
    ///
    /// <p>The layer's compatible runtimes.</p>
    pub fn compatible_runtimes(mut self, input: crate::types::Runtime) -> Self {
        let mut v = self.compatible_runtimes.unwrap_or_default();
        v.push(input);
        self.compatible_runtimes = Some(v);
        self
    }
    /// <p>The layer's compatible runtimes.</p>
    pub fn set_compatible_runtimes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Runtime>>,
    ) -> Self {
        self.compatible_runtimes = input;
        self
    }
    /// <p>The layer's software license.</p>
    pub fn license_info(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_info = Some(input.into());
        self
    }
    /// <p>The layer's software license.</p>
    pub fn set_license_info(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.license_info = input;
        self
    }
    /// Appends an item to `compatible_architectures`.
    ///
    /// To override the contents of this collection use [`set_compatible_architectures`](Self::set_compatible_architectures).
    ///
    /// <p>A list of compatible <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architectures</a>.</p>
    pub fn compatible_architectures(mut self, input: crate::types::Architecture) -> Self {
        let mut v = self.compatible_architectures.unwrap_or_default();
        v.push(input);
        self.compatible_architectures = Some(v);
        self
    }
    /// <p>A list of compatible <a href="https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html">instruction set architectures</a>.</p>
    pub fn set_compatible_architectures(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Architecture>>,
    ) -> Self {
        self.compatible_architectures = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PublishLayerVersionOutput`](crate::operation::publish_layer_version::PublishLayerVersionOutput).
    pub fn build(self) -> crate::operation::publish_layer_version::PublishLayerVersionOutput {
        crate::operation::publish_layer_version::PublishLayerVersionOutput {
            content: self.content,
            layer_arn: self.layer_arn,
            layer_version_arn: self.layer_version_arn,
            description: self.description,
            created_date: self.created_date,
            version: self.version.unwrap_or_default(),
            compatible_runtimes: self.compatible_runtimes,
            license_info: self.license_info,
            compatible_architectures: self.compatible_architectures,
            _request_id: self._request_id,
        }
    }
}
