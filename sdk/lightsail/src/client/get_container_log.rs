// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetContainerLog`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`service_name(impl Into<String>)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::service_name) / [`set_service_name(Option<String>)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::set_service_name):<br>required: **true**<br><p>The name of the container service for which to get a container log.</p><br>
    ///   - [`container_name(impl Into<String>)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::container_name) / [`set_container_name(Option<String>)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::set_container_name):<br>required: **true**<br><p>The name of the container that is either running or previously ran on the container service for which to return a log.</p><br>
    ///   - [`start_time(DateTime)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::start_time) / [`set_start_time(Option<DateTime>)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::set_start_time):<br>required: **false**<br><p>The start of the time interval for which to get log data.</p>  <p>Constraints:</p>  <ul>   <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>   <li> <p>Specified in the Unix time format.</p> <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify <code>1538424000</code> as the start time.</p> </li>  </ul>  <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p><br>
    ///   - [`end_time(DateTime)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::end_time) / [`set_end_time(Option<DateTime>)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::set_end_time):<br>required: **false**<br><p>The end of the time interval for which to get log data.</p>  <p>Constraints:</p>  <ul>   <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>   <li> <p>Specified in the Unix time format.</p> <p>For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify <code>1538427600</code> as the end time.</p> </li>  </ul>  <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p><br>
    ///   - [`filter_pattern(impl Into<String>)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::filter_pattern) / [`set_filter_pattern(Option<String>)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::set_filter_pattern):<br>required: **false**<br><p>The pattern to use to filter the returned log events to a specific term.</p>  <p>The following are a few examples of filter patterns that you can specify:</p>  <ul>   <li> <p>To return all log events, specify a filter pattern of <code>""</code>.</p> </li>   <li> <p>To exclude log events that contain the <code>ERROR</code> term, and return all other log events, specify a filter pattern of <code>"-ERROR"</code>.</p> </li>   <li> <p>To return log events that contain the <code>ERROR</code> term, specify a filter pattern of <code>"ERROR"</code>.</p> </li>   <li> <p>To return log events that contain both the <code>ERROR</code> and <code>Exception</code> terms, specify a filter pattern of <code>"ERROR Exception"</code>.</p> </li>   <li> <p>To return log events that contain the <code>ERROR</code> <i>or</i> the <code>Exception</code> term, specify a filter pattern of <code>"?ERROR ?Exception"</code>.</p> </li>  </ul><br>
    ///   - [`page_token(impl Into<String>)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::page_token) / [`set_page_token(Option<String>)`](crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::set_page_token):<br>required: **false**<br><p>The token to advance to the next page of results from your request.</p>  <p>To get a page token, perform an initial <code>GetContainerLog</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p><br>
    /// - On success, responds with [`GetContainerLogOutput`](crate::operation::get_container_log::GetContainerLogOutput) with field(s):
    ///   - [`log_events(Option<Vec::<ContainerServiceLogEvent>>)`](crate::operation::get_container_log::GetContainerLogOutput::log_events): <p>An array of objects that describe the log events of a container.</p>
    ///   - [`next_page_token(Option<String>)`](crate::operation::get_container_log::GetContainerLogOutput::next_page_token): <p>The token to advance to the next page of results from your request.</p>  <p>A next page token is not returned if there are no more results to display.</p>  <p>To get the next page of results, perform another <code>GetContainerLog</code> request and specify the next page token using the <code>pageToken</code> parameter.</p>
    /// - On failure, responds with [`SdkError<GetContainerLogError>`](crate::operation::get_container_log::GetContainerLogError)
    pub fn get_container_log(&self) -> crate::operation::get_container_log::builders::GetContainerLogFluentBuilder {
        crate::operation::get_container_log::builders::GetContainerLogFluentBuilder::new(self.handle.clone())
    }
}
