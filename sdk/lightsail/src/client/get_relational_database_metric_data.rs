// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetRelationalDatabaseMetricData`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`relational_database_name(impl Into<String>)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::relational_database_name) / [`set_relational_database_name(Option<String>)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::set_relational_database_name): <p>The name of your database from which to get metric data.</p>
    ///   - [`metric_name(RelationalDatabaseMetricName)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::metric_name) / [`set_metric_name(Option<RelationalDatabaseMetricName>)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::set_metric_name): <p>The metric for which you want to return information.</p>  <p>Valid relational database metric names are listed below, along with the most useful <code>statistics</code> to include in your request, and the published <code>unit</code> value. All relational database metric data is available in 1-minute (60 seconds) granularity.</p>  <ul>   <li> <p> <b> <code>CPUUtilization</code> </b> - The percentage of CPU utilization currently in use on the database.</p> <p> <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and <code>Average</code>.</p> <p> <code>Unit</code>: The published unit is <code>Percent</code>.</p> </li>   <li> <p> <b> <code>DatabaseConnections</code> </b> - The number of database connections in use.</p> <p> <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and <code>Sum</code>.</p> <p> <code>Unit</code>: The published unit is <code>Count</code>.</p> </li>   <li> <p> <b> <code>DiskQueueDepth</code> </b> - The number of outstanding IOs (read/write requests) that are waiting to access the disk.</p> <p> <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p> <p> <code>Unit</code>: The published unit is <code>Count</code>.</p> </li>   <li> <p> <b> <code>FreeStorageSpace</code> </b> - The amount of available storage space.</p> <p> <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p> <p> <code>Unit</code>: The published unit is <code>Bytes</code>.</p> </li>   <li> <p> <b> <code>NetworkReceiveThroughput</code> </b> - The incoming (Receive) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication.</p> <p> <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p> <p> <code>Unit</code>: The published unit is <code>Bytes/Second</code>.</p> </li>   <li> <p> <b> <code>NetworkTransmitThroughput</code> </b> - The outgoing (Transmit) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication.</p> <p> <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p> <p> <code>Unit</code>: The published unit is <code>Bytes/Second</code>.</p> </li>  </ul>
    ///   - [`period(i32)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::period) / [`set_period(i32)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::set_period): <p>The granularity, in seconds, of the returned data points.</p>  <p>All relational database metric data is available in 1-minute (60 seconds) granularity.</p>
    ///   - [`start_time(DateTime)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::start_time) / [`set_start_time(Option<DateTime>)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::set_start_time): <p>The start of the time interval from which to get metric data.</p>  <p>Constraints:</p>  <ul>   <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>   <li> <p>Specified in the Unix time format.</p> <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you input <code>1538424000</code> as the start time.</p> </li>  </ul>
    ///   - [`end_time(DateTime)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::end_time) / [`set_end_time(Option<DateTime>)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::set_end_time): <p>The end of the time interval from which to get metric data.</p>  <p>Constraints:</p>  <ul>   <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>   <li> <p>Specified in the Unix time format.</p> <p>For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you input <code>1538424000</code> as the end time.</p> </li>  </ul>
    ///   - [`unit(MetricUnit)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::unit) / [`set_unit(Option<MetricUnit>)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::set_unit): <p>The unit for the metric data request. Valid units depend on the metric data being requested. For the valid units with each available metric, see the <code>metricName</code> parameter.</p>
    ///   - [`statistics(Vec<MetricStatistic>)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::statistics) / [`set_statistics(Option<Vec<MetricStatistic>>)`](crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::set_statistics): <p>The statistic for the metric.</p>  <p>The following statistics are available:</p>  <ul>   <li> <p> <code>Minimum</code> - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.</p> </li>   <li> <p> <code>Maximum</code> - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.</p> </li>   <li> <p> <code>Sum</code> - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.</p> </li>   <li> <p> <code>Average</code> - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.</p> </li>   <li> <p> <code>SampleCount</code> - The count, or number, of data points used for the statistical calculation.</p> </li>  </ul>
    /// - On success, responds with [`GetRelationalDatabaseMetricDataOutput`](crate::operation::get_relational_database_metric_data::GetRelationalDatabaseMetricDataOutput) with field(s):
    ///   - [`metric_name(Option<RelationalDatabaseMetricName>)`](crate::operation::get_relational_database_metric_data::GetRelationalDatabaseMetricDataOutput::metric_name): <p>The name of the metric returned.</p>
    ///   - [`metric_data(Option<Vec<MetricDatapoint>>)`](crate::operation::get_relational_database_metric_data::GetRelationalDatabaseMetricDataOutput::metric_data): <p>An array of objects that describe the metric data returned.</p>
    /// - On failure, responds with [`SdkError<GetRelationalDatabaseMetricDataError>`](crate::operation::get_relational_database_metric_data::GetRelationalDatabaseMetricDataError)
    pub fn get_relational_database_metric_data(&self) -> crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder{
        crate::operation::get_relational_database_metric_data::builders::GetRelationalDatabaseMetricDataFluentBuilder::new(self.handle.clone())
    }
}
