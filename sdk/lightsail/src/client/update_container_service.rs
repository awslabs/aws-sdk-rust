// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateContainerService`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`service_name(impl Into<String>)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::service_name) / [`set_service_name(Option<String>)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::set_service_name):<br>required: **true**<br><p>The name of the container service to update.</p><br>
    ///   - [`power(ContainerServicePowerName)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::power) / [`set_power(Option<ContainerServicePowerName>)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::set_power):<br>required: **false**<br><p>The power for the container service.</p>  <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>  <p>Use the <code>GetContainerServicePowers</code> action to view the specifications of each power option.</p><br>
    ///   - [`scale(i32)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::scale) / [`set_scale(Option<i32>)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::set_scale):<br>required: **false**<br><p>The scale for the container service.</p>  <p>The scale specifies the allocated compute nodes of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p><br>
    ///   - [`is_disabled(bool)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::is_disabled) / [`set_is_disabled(Option<bool>)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::set_is_disabled):<br>required: **false**<br><p>A Boolean value to indicate whether the container service is disabled.</p><br>
    ///   - [`public_domain_names(impl Into<String>, Vec::<String>)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::public_domain_names) / [`set_public_domain_names(Option<HashMap::<String, Vec::<String>>>)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::set_public_domain_names):<br>required: **false**<br><p>The public domain names to use with the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>  <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>  <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>   <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>  </important>  <p>You can specify public domain names using a string to array map as shown in the example later on this page.</p><br>
    ///   - [`private_registry_access(PrivateRegistryAccessRequest)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::private_registry_access) / [`set_private_registry_access(Option<PrivateRegistryAccessRequest>)`](crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::set_private_registry_access):<br>required: **false**<br><p>An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>  <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p><br>
    /// - On success, responds with [`UpdateContainerServiceOutput`](crate::operation::update_container_service::UpdateContainerServiceOutput) with field(s):
    ///   - [`container_service(Option<ContainerService>)`](crate::operation::update_container_service::UpdateContainerServiceOutput::container_service): <p>An object that describes a container service.</p>
    /// - On failure, responds with [`SdkError<UpdateContainerServiceError>`](crate::operation::update_container_service::UpdateContainerServiceError)
    pub fn update_container_service(&self) -> crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder {
        crate::operation::update_container_service::builders::UpdateContainerServiceFluentBuilder::new(self.handle.clone())
    }
}
