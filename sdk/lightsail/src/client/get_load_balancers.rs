// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetLoadBalancers`](crate::operation::get_load_balancers::builders::GetLoadBalancersFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`page_token(impl Into<String>)`](crate::operation::get_load_balancers::builders::GetLoadBalancersFluentBuilder::page_token) / [`set_page_token(Option<String>)`](crate::operation::get_load_balancers::builders::GetLoadBalancersFluentBuilder::set_page_token):<br>required: **false**<br><p>The token to advance to the next page of results from your request.</p>  <p>To get a page token, perform an initial <code>GetLoadBalancers</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p><br>
    /// - On success, responds with [`GetLoadBalancersOutput`](crate::operation::get_load_balancers::GetLoadBalancersOutput) with field(s):
    ///   - [`load_balancers(Option<Vec::<LoadBalancer>>)`](crate::operation::get_load_balancers::GetLoadBalancersOutput::load_balancers): <p>An array of LoadBalancer objects describing your load balancers.</p>
    ///   - [`next_page_token(Option<String>)`](crate::operation::get_load_balancers::GetLoadBalancersOutput::next_page_token): <p>The token to advance to the next page of results from your request.</p>  <p>A next page token is not returned if there are no more results to display.</p>  <p>To get the next page of results, perform another <code>GetLoadBalancers</code> request and specify the next page token using the <code>pageToken</code> parameter.</p>
    /// - On failure, responds with [`SdkError<GetLoadBalancersError>`](crate::operation::get_load_balancers::GetLoadBalancersError)
    pub fn get_load_balancers(&self) -> crate::operation::get_load_balancers::builders::GetLoadBalancersFluentBuilder {
        crate::operation::get_load_balancers::builders::GetLoadBalancersFluentBuilder::new(self.handle.clone())
    }
}
