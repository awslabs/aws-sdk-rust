// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetKeyPairs`](crate::client::fluent_builders::GetKeyPairs) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`page_token(impl Into<String>)`](crate::client::fluent_builders::GetKeyPairs::page_token) / [`set_page_token(Option<String>)`](crate::client::fluent_builders::GetKeyPairs::set_page_token): <p>The token to advance to the next page of results from your request.</p>  <p>To get a page token, perform an initial <code>GetKeyPairs</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p>
    ///   - [`include_default_key_pair(bool)`](crate::client::fluent_builders::GetKeyPairs::include_default_key_pair) / [`set_include_default_key_pair(Option<bool>)`](crate::client::fluent_builders::GetKeyPairs::set_include_default_key_pair): <p>A Boolean value that indicates whether to include the default key pair in the response of your request.</p>
    /// - On success, responds with [`GetKeyPairsOutput`](crate::output::GetKeyPairsOutput) with field(s):
    ///   - [`key_pairs(Option<Vec<KeyPair>>)`](crate::output::GetKeyPairsOutput::key_pairs): <p>An array of key-value pairs containing information about the key pairs.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetKeyPairsOutput::next_page_token): <p>The token to advance to the next page of results from your request.</p>  <p>A next page token is not returned if there are no more results to display.</p>  <p>To get the next page of results, perform another <code>GetKeyPairs</code> request and specify the next page token using the <code>pageToken</code> parameter.</p>
    /// - On failure, responds with [`SdkError<GetKeyPairsError>`](crate::error::GetKeyPairsError)
    pub fn get_key_pairs(&self) -> crate::client::fluent_builders::GetKeyPairs {
        crate::client::fluent_builders::GetKeyPairs::new(self.handle.clone())
    }
}
