// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLoadBalancer`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`load_balancer_name(impl Into<String>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::load_balancer_name) / [`set_load_balancer_name(Option<String>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::set_load_balancer_name): <p>The name of your load balancer.</p>
    ///   - [`instance_port(i32)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::instance_port) / [`set_instance_port(i32)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::set_instance_port): <p>The instance port where you're creating your load balancer.</p>
    ///   - [`health_check_path(impl Into<String>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::health_check_path) / [`set_health_check_path(Option<String>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::set_health_check_path): <p>The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail uses the root path of your website (e.g., <code>"/"</code>).</p>  <p>You may want to specify a custom health check path other than the root of your application if your home page loads slowly or has a lot of media or scripting on it.</p>
    ///   - [`certificate_name(impl Into<String>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::certificate_name) / [`set_certificate_name(Option<String>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::set_certificate_name): <p>The name of the SSL/TLS certificate.</p>  <p>If you specify <code>certificateName</code>, then <code>certificateDomainName</code> is required (and vice-versa).</p>
    ///   - [`certificate_domain_name(impl Into<String>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::certificate_domain_name) / [`set_certificate_domain_name(Option<String>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::set_certificate_domain_name): <p>The domain name with which your certificate is associated (e.g., <code>example.com</code>).</p>  <p>If you specify <code>certificateDomainName</code>, then <code>certificateName</code> is required (and vice-versa).</p>
    ///   - [`certificate_alternative_names(Vec<String>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::certificate_alternative_names) / [`set_certificate_alternative_names(Option<Vec<String>>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::set_certificate_alternative_names): <p>The optional alternative domains and subdomains to use with your SSL/TLS certificate (e.g., <code>www.example.com</code>, <code>example.com</code>, <code>m.example.com</code>, <code>blog.example.com</code>).</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::set_tags): <p>The tag keys and optional values to add to the resource during create.</p>  <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    ///   - [`ip_address_type(IpAddressType)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::ip_address_type) / [`set_ip_address_type(Option<IpAddressType>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::set_ip_address_type): <p>The IP address type for the load balancer.</p>  <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for IPv4 and IPv6.</p>  <p>The default value is <code>dualstack</code>.</p>
    ///   - [`tls_policy_name(impl Into<String>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::tls_policy_name) / [`set_tls_policy_name(Option<String>)`](crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::set_tls_policy_name): <p>The name of the TLS policy to apply to the load balancer.</p>  <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html">GetLoadBalancerTlsPolicies</a> action to get a list of TLS policy names that you can specify.</p>  <p>For more information about load balancer TLS policies, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy">Configuring TLS security policies on your Amazon Lightsail load balancers</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    /// - On success, responds with [`CreateLoadBalancerOutput`](crate::operation::create_load_balancer::CreateLoadBalancerOutput) with field(s):
    ///   - [`operations(Option<Vec<Operation>>)`](crate::operation::create_load_balancer::CreateLoadBalancerOutput::operations): <p>An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.</p>
    /// - On failure, responds with [`SdkError<CreateLoadBalancerError>`](crate::operation::create_load_balancer::CreateLoadBalancerError)
    pub fn create_load_balancer(
        &self,
    ) -> crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder {
        crate::operation::create_load_balancer::builders::CreateLoadBalancerFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
