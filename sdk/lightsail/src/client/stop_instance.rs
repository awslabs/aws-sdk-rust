// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StopInstance`](crate::client::fluent_builders::StopInstance) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`instance_name(impl Into<String>)`](crate::client::fluent_builders::StopInstance::instance_name) / [`set_instance_name(Option<String>)`](crate::client::fluent_builders::StopInstance::set_instance_name): <p>The name of the instance (a virtual private server) to stop.</p>
    ///   - [`force(bool)`](crate::client::fluent_builders::StopInstance::force) / [`set_force(Option<bool>)`](crate::client::fluent_builders::StopInstance::set_force): <p>When set to <code>True</code>, forces a Lightsail instance that is stuck in a <code>stopping</code> state to stop.</p> <important>   <p>Only use the <code>force</code> parameter if your instance is stuck in the <code>stopping</code> state. In any other state, your instance should stop normally without adding this parameter to your API request.</p>  </important>
    /// - On success, responds with [`StopInstanceOutput`](crate::output::StopInstanceOutput) with field(s):
    ///   - [`operations(Option<Vec<Operation>>)`](crate::output::StopInstanceOutput::operations): <p>An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.</p>
    /// - On failure, responds with [`SdkError<StopInstanceError>`](crate::error::StopInstanceError)
    pub fn stop_instance(&self) -> crate::client::fluent_builders::StopInstance {
        crate::client::fluent_builders::StopInstance::new(self.handle.clone())
    }
}
