// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetDiskSnapshots`](crate::operation::get_disk_snapshots::builders::GetDiskSnapshotsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`page_token(impl Into<String>)`](crate::operation::get_disk_snapshots::builders::GetDiskSnapshotsFluentBuilder::page_token) / [`set_page_token(Option<String>)`](crate::operation::get_disk_snapshots::builders::GetDiskSnapshotsFluentBuilder::set_page_token): <p>The token to advance to the next page of results from your request.</p>  <p>To get a page token, perform an initial <code>GetDiskSnapshots</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p>
    /// - On success, responds with [`GetDiskSnapshotsOutput`](crate::operation::get_disk_snapshots::GetDiskSnapshotsOutput) with field(s):
    ///   - [`disk_snapshots(Option<Vec<DiskSnapshot>>)`](crate::operation::get_disk_snapshots::GetDiskSnapshotsOutput::disk_snapshots): <p>An array of objects containing information about all block storage disk snapshots.</p>
    ///   - [`next_page_token(Option<String>)`](crate::operation::get_disk_snapshots::GetDiskSnapshotsOutput::next_page_token): <p>The token to advance to the next page of results from your request.</p>  <p>A next page token is not returned if there are no more results to display.</p>  <p>To get the next page of results, perform another <code>GetDiskSnapshots</code> request and specify the next page token using the <code>pageToken</code> parameter.</p>
    /// - On failure, responds with [`SdkError<GetDiskSnapshotsError>`](crate::operation::get_disk_snapshots::GetDiskSnapshotsError)
    pub fn get_disk_snapshots(
        &self,
    ) -> crate::operation::get_disk_snapshots::builders::GetDiskSnapshotsFluentBuilder {
        crate::operation::get_disk_snapshots::builders::GetDiskSnapshotsFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
