// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Lightsail
///
/// Client for invoking operations on Amazon Lightsail. Each operation on Amazon Lightsail is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_lightsail::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_lightsail::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_lightsail::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

mod allocate_static_ip;

mod attach_certificate_to_distribution;

mod attach_disk;

mod attach_instances_to_load_balancer;

mod attach_load_balancer_tls_certificate;

mod attach_static_ip;

mod close_instance_public_ports;

mod copy_snapshot;

mod create_bucket;

mod create_bucket_access_key;

mod create_certificate;

mod create_cloud_formation_stack;

mod create_contact_method;

mod create_container_service;

mod create_container_service_deployment;

mod create_container_service_registry_login;

mod create_disk;

mod create_disk_from_snapshot;

mod create_disk_snapshot;

mod create_distribution;

mod create_domain;

mod create_domain_entry;

mod create_instance_snapshot;

mod create_instances;

mod create_instances_from_snapshot;

mod create_key_pair;

mod create_load_balancer;

mod create_load_balancer_tls_certificate;

mod create_relational_database;

mod create_relational_database_from_snapshot;

mod create_relational_database_snapshot;

mod delete_alarm;

mod delete_auto_snapshot;

mod delete_bucket;

mod delete_bucket_access_key;

mod delete_certificate;

mod delete_contact_method;

mod delete_container_image;

mod delete_container_service;

mod delete_disk;

mod delete_disk_snapshot;

mod delete_distribution;

mod delete_domain;

mod delete_domain_entry;

mod delete_instance;

mod delete_instance_snapshot;

mod delete_key_pair;

mod delete_known_host_keys;

mod delete_load_balancer;

mod delete_load_balancer_tls_certificate;

mod delete_relational_database;

mod delete_relational_database_snapshot;

mod detach_certificate_from_distribution;

mod detach_disk;

mod detach_instances_from_load_balancer;

mod detach_static_ip;

mod disable_add_on;

mod download_default_key_pair;

mod enable_add_on;

mod export_snapshot;

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;

mod get_active_names;

mod get_alarms;

mod get_auto_snapshots;

mod get_blueprints;

mod get_bucket_access_keys;

mod get_bucket_bundles;

mod get_bucket_metric_data;

mod get_buckets;

mod get_bundles;

mod get_certificates;

mod get_cloud_formation_stack_records;

mod get_contact_methods;

mod get_container_api_metadata;

mod get_container_images;

mod get_container_log;

mod get_container_service_deployments;

mod get_container_service_metric_data;

mod get_container_service_powers;

mod get_container_services;

mod get_disk;

mod get_disk_snapshot;

mod get_disk_snapshots;

mod get_disks;

mod get_distribution_bundles;

mod get_distribution_latest_cache_reset;

mod get_distribution_metric_data;

mod get_distributions;

mod get_domain;

mod get_domains;

mod get_export_snapshot_records;

mod get_instance;

mod get_instance_access_details;

mod get_instance_metric_data;

mod get_instance_port_states;

mod get_instance_snapshot;

mod get_instance_snapshots;

mod get_instance_state;

mod get_instances;

mod get_key_pair;

mod get_key_pairs;

mod get_load_balancer;

mod get_load_balancer_metric_data;

mod get_load_balancer_tls_certificates;

mod get_load_balancer_tls_policies;

mod get_load_balancers;

mod get_operation;

mod get_operations;

mod get_operations_for_resource;

mod get_regions;

mod get_relational_database;

mod get_relational_database_blueprints;

mod get_relational_database_bundles;

mod get_relational_database_events;

mod get_relational_database_log_events;

mod get_relational_database_log_streams;

mod get_relational_database_master_user_password;

mod get_relational_database_metric_data;

mod get_relational_database_parameters;

mod get_relational_database_snapshot;

mod get_relational_database_snapshots;

mod get_relational_databases;

mod get_static_ip;

mod get_static_ips;

mod import_key_pair;

mod is_vpc_peered;

mod open_instance_public_ports;

mod peer_vpc;

mod put_alarm;

mod put_instance_public_ports;

mod reboot_instance;

mod reboot_relational_database;

mod register_container_image;

mod release_static_ip;

mod reset_distribution_cache;

mod send_contact_method_verification;

mod set_ip_address_type;

mod set_resource_access_for_bucket;

mod start_instance;

mod start_relational_database;

mod stop_instance;

mod stop_relational_database;

mod tag_resource;

mod test_alarm;

mod unpeer_vpc;

mod untag_resource;

mod update_bucket;

mod update_bucket_bundle;

mod update_container_service;

mod update_distribution;

mod update_distribution_bundle;

mod update_domain_entry;

mod update_instance_metadata_options;

mod update_load_balancer_attribute;

mod update_relational_database;

mod update_relational_database_parameters;
