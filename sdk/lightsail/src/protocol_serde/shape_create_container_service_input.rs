// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_container_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_container_service::CreateContainerServiceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.service_name {
        object.key("serviceName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.power {
        object.key("power").string(var_2.as_str());
    }
    if let Some(var_3) = &input.scale {
        object.key("scale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.tags {
        let mut array_5 = object.key("tags").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.public_domain_names {
        #[allow(unused_mut)]
        let mut object_9 = object.key("publicDomainNames").start_object();
        for (key_10, value_11) in var_8 {
            {
                let mut array_12 = object_9.key(key_10.as_str()).start_array();
                for item_13 in value_11 {
                    {
                        array_12.value().string(item_13.as_str());
                    }
                }
                array_12.finish();
            }
        }
        object_9.finish();
    }
    if let Some(var_14) = &input.deployment {
        #[allow(unused_mut)]
        let mut object_15 = object.key("deployment").start_object();
        crate::protocol_serde::shape_container_service_deployment_request::ser_container_service_deployment_request(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.private_registry_access {
        #[allow(unused_mut)]
        let mut object_17 = object.key("privateRegistryAccess").start_object();
        crate::protocol_serde::shape_private_registry_access_request::ser_private_registry_access_request(&mut object_17, var_16)?;
        object_17.finish();
    }
    Ok(())
}
