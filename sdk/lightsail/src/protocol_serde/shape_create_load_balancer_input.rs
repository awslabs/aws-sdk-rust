// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_load_balancer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_load_balancer::CreateLoadBalancerInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_1.as_str());
    }
    {
        object.key("instancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_2) = &input.health_check_path {
        object.key("healthCheckPath").string(var_2.as_str());
    }
    if let Some(var_3) = &input.certificate_name {
        object.key("certificateName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.certificate_domain_name {
        object.key("certificateDomainName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.certificate_alternative_names {
        let mut array_6 = object.key("certificateAlternativeNames").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.ip_address_type {
        object.key("ipAddressType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.tls_policy_name {
        object.key("tlsPolicyName").string(var_13.as_str());
    }
    Ok(())
}
