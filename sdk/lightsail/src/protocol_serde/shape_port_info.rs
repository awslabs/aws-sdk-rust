// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_port_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PortInfo,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.from_port != 0 {
        object.key("fromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("toPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    if let Some(var_1) = &input.protocol {
        object.key("protocol").string(var_1.as_str());
    }
    if let Some(var_2) = &input.cidrs {
        let mut array_3 = object.key("cidrs").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.ipv6_cidrs {
        let mut array_6 = object.key("ipv6Cidrs").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.cidr_list_aliases {
        let mut array_9 = object.key("cidrListAliases").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    Ok(())
}
