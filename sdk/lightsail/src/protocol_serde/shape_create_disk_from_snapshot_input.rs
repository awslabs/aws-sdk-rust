// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_disk_from_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_disk_from_snapshot::CreateDiskFromSnapshotInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.disk_name {
        object.key("diskName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.disk_snapshot_name {
        object.key("diskSnapshotName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.availability_zone {
        object.key("availabilityZone").string(var_3.as_str());
    }
    if let Some(var_4) = &input.size_in_gb {
        object.key("sizeInGb").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("tags").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.add_ons {
        let mut array_10 = object.key("addOns").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_add_on_request::ser_add_on_request(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.source_disk_name {
        object.key("sourceDiskName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.restore_date {
        object.key("restoreDate").string(var_14.as_str());
    }
    if let Some(var_15) = &input.use_latest_restorable_auto_snapshot {
        object
            .key("useLatestRestorableAutoSnapshot")
            .boolean(*var_15);
    }
    Ok(())
}
