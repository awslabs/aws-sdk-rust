// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_cache_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CacheSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.default_ttl {
        object.key("defaultTTL").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.minimum_ttl {
        object.key("minimumTTL").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.maximum_ttl {
        object.key("maximumTTL").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.allowed_http_methods {
        object.key("allowedHTTPMethods").string(var_4.as_str());
    }
    if let Some(var_5) = &input.cached_http_methods {
        object.key("cachedHTTPMethods").string(var_5.as_str());
    }
    if let Some(var_6) = &input.forwarded_cookies {
        #[allow(unused_mut)]
        let mut object_7 = object.key("forwardedCookies").start_object();
        crate::protocol_serde::shape_cookie_object::ser_cookie_object(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.forwarded_headers {
        #[allow(unused_mut)]
        let mut object_9 = object.key("forwardedHeaders").start_object();
        crate::protocol_serde::shape_header_object::ser_header_object(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.forwarded_query_strings {
        #[allow(unused_mut)]
        let mut object_11 = object.key("forwardedQueryStrings").start_object();
        crate::protocol_serde::shape_query_string_object::ser_query_string_object(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}

pub(crate) fn de_cache_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::CacheSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CacheSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "defaultTTL" => {
                            builder = builder.set_default_ttl(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "minimumTTL" => {
                            builder = builder.set_minimum_ttl(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "maximumTTL" => {
                            builder = builder.set_maximum_ttl(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "allowedHTTPMethods" => {
                            builder = builder.set_allowed_http_methods(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "cachedHTTPMethods" => {
                            builder = builder.set_cached_http_methods(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "forwardedCookies" => {
                            builder = builder.set_forwarded_cookies(crate::protocol_serde::shape_cookie_object::de_cookie_object(tokens)?);
                        }
                        "forwardedHeaders" => {
                            builder = builder.set_forwarded_headers(crate::protocol_serde::shape_header_object::de_header_object(tokens)?);
                        }
                        "forwardedQueryStrings" => {
                            builder = builder
                                .set_forwarded_query_strings(crate::protocol_serde::shape_query_string_object::de_query_string_object(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
