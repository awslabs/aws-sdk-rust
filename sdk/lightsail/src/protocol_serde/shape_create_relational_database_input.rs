// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_relational_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_relational_database::CreateRelationalDatabaseInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.availability_zone {
        object.key("availabilityZone").string(var_2.as_str());
    }
    if let Some(var_3) = &input.relational_database_blueprint_id {
        object
            .key("relationalDatabaseBlueprintId")
            .string(var_3.as_str());
    }
    if let Some(var_4) = &input.relational_database_bundle_id {
        object
            .key("relationalDatabaseBundleId")
            .string(var_4.as_str());
    }
    if let Some(var_5) = &input.master_database_name {
        object.key("masterDatabaseName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.master_username {
        object.key("masterUsername").string(var_6.as_str());
    }
    if let Some(var_7) = &input.master_user_password {
        object.key("masterUserPassword").string(var_7.as_str());
    }
    if let Some(var_8) = &input.preferred_backup_window {
        object.key("preferredBackupWindow").string(var_8.as_str());
    }
    if let Some(var_9) = &input.preferred_maintenance_window {
        object
            .key("preferredMaintenanceWindow")
            .string(var_9.as_str());
    }
    if let Some(var_10) = &input.publicly_accessible {
        object.key("publiclyAccessible").boolean(*var_10);
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
