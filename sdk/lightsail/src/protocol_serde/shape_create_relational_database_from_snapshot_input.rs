// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_relational_database_from_snapshot_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.availability_zone {
        object.key("availabilityZone").string(var_2.as_str());
    }
    if let Some(var_3) = &input.publicly_accessible {
        object.key("publiclyAccessible").boolean(*var_3);
    }
    if let Some(var_4) = &input.relational_database_snapshot_name {
        object.key("relationalDatabaseSnapshotName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.relational_database_bundle_id {
        object.key("relationalDatabaseBundleId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.source_relational_database_name {
        object.key("sourceRelationalDatabaseName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.restore_time {
        object
            .key("restoreTime")
            .date_time(var_7, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_8) = &input.use_latest_restorable_time {
        object.key("useLatestRestorableTime").boolean(*var_8);
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}
