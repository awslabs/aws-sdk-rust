// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Amazon Web Services Region.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Region {
    /// <p>The continent code (e.g., <code>NA</code>, meaning North America).</p>
    pub continent_code: ::std::option::Option<::std::string::String>,
    /// <p>The description of the Amazon Web Services Region (e.g., <code>This region is recommended to serve users in the eastern United States and eastern Canada</code>).</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The display name (e.g., <code>Ohio</code>).</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The region name (e.g., <code>us-east-2</code>).</p>
    pub name: ::std::option::Option<crate::types::RegionName>,
    /// <p>The Availability Zones. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
    pub availability_zones: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>,
    /// <p>The Availability Zones for databases. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
    pub relational_database_availability_zones: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>,
}
impl Region {
    /// <p>The continent code (e.g., <code>NA</code>, meaning North America).</p>
    pub fn continent_code(&self) -> ::std::option::Option<&str> {
        self.continent_code.as_deref()
    }
    /// <p>The description of the Amazon Web Services Region (e.g., <code>This region is recommended to serve users in the eastern United States and eastern Canada</code>).</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The display name (e.g., <code>Ohio</code>).</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The region name (e.g., <code>us-east-2</code>).</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::RegionName> {
        self.name.as_ref()
    }
    /// <p>The Availability Zones. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zones.is_none()`.
    pub fn availability_zones(&self) -> &[crate::types::AvailabilityZone] {
        self.availability_zones.as_deref().unwrap_or_default()
    }
    /// <p>The Availability Zones for databases. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.relational_database_availability_zones.is_none()`.
    pub fn relational_database_availability_zones(&self) -> &[crate::types::AvailabilityZone] {
        self.relational_database_availability_zones.as_deref().unwrap_or_default()
    }
}
impl Region {
    /// Creates a new builder-style object to manufacture [`Region`](crate::types::Region).
    pub fn builder() -> crate::types::builders::RegionBuilder {
        crate::types::builders::RegionBuilder::default()
    }
}

/// A builder for [`Region`](crate::types::Region).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegionBuilder {
    pub(crate) continent_code: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<crate::types::RegionName>,
    pub(crate) availability_zones: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>,
    pub(crate) relational_database_availability_zones: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>,
}
impl RegionBuilder {
    /// <p>The continent code (e.g., <code>NA</code>, meaning North America).</p>
    pub fn continent_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.continent_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The continent code (e.g., <code>NA</code>, meaning North America).</p>
    pub fn set_continent_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.continent_code = input;
        self
    }
    /// <p>The continent code (e.g., <code>NA</code>, meaning North America).</p>
    pub fn get_continent_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.continent_code
    }
    /// <p>The description of the Amazon Web Services Region (e.g., <code>This region is recommended to serve users in the eastern United States and eastern Canada</code>).</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Amazon Web Services Region (e.g., <code>This region is recommended to serve users in the eastern United States and eastern Canada</code>).</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the Amazon Web Services Region (e.g., <code>This region is recommended to serve users in the eastern United States and eastern Canada</code>).</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The display name (e.g., <code>Ohio</code>).</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name (e.g., <code>Ohio</code>).</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name (e.g., <code>Ohio</code>).</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The region name (e.g., <code>us-east-2</code>).</p>
    pub fn name(mut self, input: crate::types::RegionName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The region name (e.g., <code>us-east-2</code>).</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::RegionName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The region name (e.g., <code>us-east-2</code>).</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::RegionName> {
        &self.name
    }
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>The Availability Zones. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
    pub fn availability_zones(mut self, input: crate::types::AvailabilityZone) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input);
        self.availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Availability Zones. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
    pub fn set_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>The Availability Zones. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
    pub fn get_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>> {
        &self.availability_zones
    }
    /// Appends an item to `relational_database_availability_zones`.
    ///
    /// To override the contents of this collection use [`set_relational_database_availability_zones`](Self::set_relational_database_availability_zones).
    ///
    /// <p>The Availability Zones for databases. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
    pub fn relational_database_availability_zones(mut self, input: crate::types::AvailabilityZone) -> Self {
        let mut v = self.relational_database_availability_zones.unwrap_or_default();
        v.push(input);
        self.relational_database_availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Availability Zones for databases. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
    pub fn set_relational_database_availability_zones(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>,
    ) -> Self {
        self.relational_database_availability_zones = input;
        self
    }
    /// <p>The Availability Zones for databases. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
    pub fn get_relational_database_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>> {
        &self.relational_database_availability_zones
    }
    /// Consumes the builder and constructs a [`Region`](crate::types::Region).
    pub fn build(self) -> crate::types::Region {
        crate::types::Region {
            continent_code: self.continent_code,
            description: self.description,
            display_name: self.display_name,
            name: self.name,
            availability_zones: self.availability_zones,
            relational_database_availability_zones: self.relational_database_availability_zones,
        }
    }
}
