// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a block storage disk.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Disk {
    /// <p>The unique name of the disk.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the disk.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    #[doc(hidden)]
    pub support_code: std::option::Option<std::string::String>,
    /// <p>The date when the disk was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The AWS Region and Availability Zone where the disk is located.</p>
    #[doc(hidden)]
    pub location: std::option::Option<crate::types::ResourceLocation>,
    /// <p>The Lightsail resource type (e.g., <code>Disk</code>).</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>An array of objects representing the add-ons enabled on the disk.</p>
    #[doc(hidden)]
    pub add_ons: std::option::Option<std::vec::Vec<crate::types::AddOn>>,
    /// <p>The size of the disk in GB.</p>
    #[doc(hidden)]
    pub size_in_gb: std::option::Option<i32>,
    /// <p>A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).</p>
    #[doc(hidden)]
    pub is_system_disk: std::option::Option<bool>,
    /// <p>The input/output operations per second (IOPS) of the disk.</p>
    #[doc(hidden)]
    pub iops: std::option::Option<i32>,
    /// <p>The disk path.</p>
    #[doc(hidden)]
    pub path: std::option::Option<std::string::String>,
    /// <p>Describes the status of the disk.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::DiskState>,
    /// <p>The resources to which the disk is attached.</p>
    #[doc(hidden)]
    pub attached_to: std::option::Option<std::string::String>,
    /// <p>A Boolean value indicating whether the disk is attached.</p>
    #[doc(hidden)]
    pub is_attached: std::option::Option<bool>,
    /// <p>(Deprecated) The attachment state of the disk.</p> <note>
    /// <p>In releases prior to November 14, 2017, this parameter returned <code>attached</code> for system disks in the API response. It is now deprecated, but still included in the response. Use <code>isAttached</code> instead.</p>
    /// </note>
    #[deprecated]
    #[doc(hidden)]
    pub attachment_state: std::option::Option<std::string::String>,
    /// <p>(Deprecated) The number of GB in use by the disk.</p> <note>
    /// <p>In releases prior to November 14, 2017, this parameter was not included in the API response. It is now deprecated.</p>
    /// </note>
    #[deprecated]
    #[doc(hidden)]
    pub gb_in_use: std::option::Option<i32>,
}
impl Disk {
    /// <p>The unique name of the disk.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the disk.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn support_code(&self) -> std::option::Option<&str> {
        self.support_code.as_deref()
    }
    /// <p>The date when the disk was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The AWS Region and Availability Zone where the disk is located.</p>
    pub fn location(&self) -> std::option::Option<&crate::types::ResourceLocation> {
        self.location.as_ref()
    }
    /// <p>The Lightsail resource type (e.g., <code>Disk</code>).</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>An array of objects representing the add-ons enabled on the disk.</p>
    pub fn add_ons(&self) -> std::option::Option<&[crate::types::AddOn]> {
        self.add_ons.as_deref()
    }
    /// <p>The size of the disk in GB.</p>
    pub fn size_in_gb(&self) -> std::option::Option<i32> {
        self.size_in_gb
    }
    /// <p>A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).</p>
    pub fn is_system_disk(&self) -> std::option::Option<bool> {
        self.is_system_disk
    }
    /// <p>The input/output operations per second (IOPS) of the disk.</p>
    pub fn iops(&self) -> std::option::Option<i32> {
        self.iops
    }
    /// <p>The disk path.</p>
    pub fn path(&self) -> std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>Describes the status of the disk.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::DiskState> {
        self.state.as_ref()
    }
    /// <p>The resources to which the disk is attached.</p>
    pub fn attached_to(&self) -> std::option::Option<&str> {
        self.attached_to.as_deref()
    }
    /// <p>A Boolean value indicating whether the disk is attached.</p>
    pub fn is_attached(&self) -> std::option::Option<bool> {
        self.is_attached
    }
    /// <p>(Deprecated) The attachment state of the disk.</p> <note>
    /// <p>In releases prior to November 14, 2017, this parameter returned <code>attached</code> for system disks in the API response. It is now deprecated, but still included in the response. Use <code>isAttached</code> instead.</p>
    /// </note>
    #[deprecated]
    pub fn attachment_state(&self) -> std::option::Option<&str> {
        self.attachment_state.as_deref()
    }
    /// <p>(Deprecated) The number of GB in use by the disk.</p> <note>
    /// <p>In releases prior to November 14, 2017, this parameter was not included in the API response. It is now deprecated.</p>
    /// </note>
    #[deprecated]
    pub fn gb_in_use(&self) -> std::option::Option<i32> {
        self.gb_in_use
    }
}
impl Disk {
    /// Creates a new builder-style object to manufacture [`Disk`](crate::types::Disk).
    pub fn builder() -> crate::types::builders::DiskBuilder {
        crate::types::builders::DiskBuilder::default()
    }
}

/// A builder for [`Disk`](crate::types::Disk).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DiskBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) support_code: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) location: std::option::Option<crate::types::ResourceLocation>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) add_ons: std::option::Option<std::vec::Vec<crate::types::AddOn>>,
    pub(crate) size_in_gb: std::option::Option<i32>,
    pub(crate) is_system_disk: std::option::Option<bool>,
    pub(crate) iops: std::option::Option<i32>,
    pub(crate) path: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::DiskState>,
    pub(crate) attached_to: std::option::Option<std::string::String>,
    pub(crate) is_attached: std::option::Option<bool>,
    pub(crate) attachment_state: std::option::Option<std::string::String>,
    pub(crate) gb_in_use: std::option::Option<i32>,
}
impl DiskBuilder {
    /// <p>The unique name of the disk.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The unique name of the disk.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the disk.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the disk.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn support_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_code = Some(input.into());
        self
    }
    /// <p>The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn set_support_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.support_code = input;
        self
    }
    /// <p>The date when the disk was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date when the disk was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The AWS Region and Availability Zone where the disk is located.</p>
    pub fn location(mut self, input: crate::types::ResourceLocation) -> Self {
        self.location = Some(input);
        self
    }
    /// <p>The AWS Region and Availability Zone where the disk is located.</p>
    pub fn set_location(
        mut self,
        input: std::option::Option<crate::types::ResourceLocation>,
    ) -> Self {
        self.location = input;
        self
    }
    /// <p>The Lightsail resource type (e.g., <code>Disk</code>).</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>The Lightsail resource type (e.g., <code>Disk</code>).</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Appends an item to `add_ons`.
    ///
    /// To override the contents of this collection use [`set_add_ons`](Self::set_add_ons).
    ///
    /// <p>An array of objects representing the add-ons enabled on the disk.</p>
    pub fn add_ons(mut self, input: crate::types::AddOn) -> Self {
        let mut v = self.add_ons.unwrap_or_default();
        v.push(input);
        self.add_ons = Some(v);
        self
    }
    /// <p>An array of objects representing the add-ons enabled on the disk.</p>
    pub fn set_add_ons(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AddOn>>,
    ) -> Self {
        self.add_ons = input;
        self
    }
    /// <p>The size of the disk in GB.</p>
    pub fn size_in_gb(mut self, input: i32) -> Self {
        self.size_in_gb = Some(input);
        self
    }
    /// <p>The size of the disk in GB.</p>
    pub fn set_size_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.size_in_gb = input;
        self
    }
    /// <p>A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).</p>
    pub fn is_system_disk(mut self, input: bool) -> Self {
        self.is_system_disk = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).</p>
    pub fn set_is_system_disk(mut self, input: std::option::Option<bool>) -> Self {
        self.is_system_disk = input;
        self
    }
    /// <p>The input/output operations per second (IOPS) of the disk.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = Some(input);
        self
    }
    /// <p>The input/output operations per second (IOPS) of the disk.</p>
    pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The disk path.</p>
    pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
        self.path = Some(input.into());
        self
    }
    /// <p>The disk path.</p>
    pub fn set_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>Describes the status of the disk.</p>
    pub fn state(mut self, input: crate::types::DiskState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>Describes the status of the disk.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::DiskState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The resources to which the disk is attached.</p>
    pub fn attached_to(mut self, input: impl Into<std::string::String>) -> Self {
        self.attached_to = Some(input.into());
        self
    }
    /// <p>The resources to which the disk is attached.</p>
    pub fn set_attached_to(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attached_to = input;
        self
    }
    /// <p>A Boolean value indicating whether the disk is attached.</p>
    pub fn is_attached(mut self, input: bool) -> Self {
        self.is_attached = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether the disk is attached.</p>
    pub fn set_is_attached(mut self, input: std::option::Option<bool>) -> Self {
        self.is_attached = input;
        self
    }
    /// <p>(Deprecated) The attachment state of the disk.</p> <note>
    /// <p>In releases prior to November 14, 2017, this parameter returned <code>attached</code> for system disks in the API response. It is now deprecated, but still included in the response. Use <code>isAttached</code> instead.</p>
    /// </note>
    #[deprecated]
    pub fn attachment_state(mut self, input: impl Into<std::string::String>) -> Self {
        self.attachment_state = Some(input.into());
        self
    }
    /// <p>(Deprecated) The attachment state of the disk.</p> <note>
    /// <p>In releases prior to November 14, 2017, this parameter returned <code>attached</code> for system disks in the API response. It is now deprecated, but still included in the response. Use <code>isAttached</code> instead.</p>
    /// </note>
    #[deprecated]
    pub fn set_attachment_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attachment_state = input;
        self
    }
    /// <p>(Deprecated) The number of GB in use by the disk.</p> <note>
    /// <p>In releases prior to November 14, 2017, this parameter was not included in the API response. It is now deprecated.</p>
    /// </note>
    #[deprecated]
    pub fn gb_in_use(mut self, input: i32) -> Self {
        self.gb_in_use = Some(input);
        self
    }
    /// <p>(Deprecated) The number of GB in use by the disk.</p> <note>
    /// <p>In releases prior to November 14, 2017, this parameter was not included in the API response. It is now deprecated.</p>
    /// </note>
    #[deprecated]
    pub fn set_gb_in_use(mut self, input: std::option::Option<i32>) -> Self {
        self.gb_in_use = input;
        self
    }
    /// Consumes the builder and constructs a [`Disk`](crate::types::Disk).
    pub fn build(self) -> crate::types::Disk {
        crate::types::Disk {
            name: self.name,
            arn: self.arn,
            support_code: self.support_code,
            created_at: self.created_at,
            location: self.location,
            resource_type: self.resource_type,
            tags: self.tags,
            add_ons: self.add_ons,
            size_in_gb: self.size_in_gb,
            is_system_disk: self.is_system_disk,
            iops: self.iops,
            path: self.path,
            state: self.state,
            attached_to: self.attached_to,
            is_attached: self.is_attached,
            attachment_state: self.attachment_state,
            gb_in_use: self.gb_in_use,
        }
    }
}
