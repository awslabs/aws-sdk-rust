// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the health check configuration of an Amazon Lightsail container service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContainerServiceHealthCheckConfig {
    /// <p>The number of consecutive health checks successes required before moving the container to the <code>Healthy</code> state. The default value is <code>2</code>.</p>
    #[doc(hidden)]
    pub healthy_threshold: std::option::Option<i32>,
    /// <p>The number of consecutive health check failures required before moving the container to the <code>Unhealthy</code> state. The default value is <code>2</code>.</p>
    #[doc(hidden)]
    pub unhealthy_threshold: std::option::Option<i32>,
    /// <p>The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is <code>2</code>.</p>
    #[doc(hidden)]
    pub timeout_seconds: std::option::Option<i32>,
    /// <p>The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is <code>5</code>.</p>
    #[doc(hidden)]
    pub interval_seconds: std::option::Option<i32>,
    /// <p>The path on the container on which to perform the health check. The default value is <code>/</code>.</p>
    #[doc(hidden)]
    pub path: std::option::Option<std::string::String>,
    /// <p>The HTTP codes to use when checking for a successful response from a container. You can specify values between <code>200</code> and <code>499</code>. You can specify multiple values (for example, <code>200,202</code>) or a range of values (for example, <code>200-299</code>).</p>
    #[doc(hidden)]
    pub success_codes: std::option::Option<std::string::String>,
}
impl ContainerServiceHealthCheckConfig {
    /// <p>The number of consecutive health checks successes required before moving the container to the <code>Healthy</code> state. The default value is <code>2</code>.</p>
    pub fn healthy_threshold(&self) -> std::option::Option<i32> {
        self.healthy_threshold
    }
    /// <p>The number of consecutive health check failures required before moving the container to the <code>Unhealthy</code> state. The default value is <code>2</code>.</p>
    pub fn unhealthy_threshold(&self) -> std::option::Option<i32> {
        self.unhealthy_threshold
    }
    /// <p>The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is <code>2</code>.</p>
    pub fn timeout_seconds(&self) -> std::option::Option<i32> {
        self.timeout_seconds
    }
    /// <p>The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is <code>5</code>.</p>
    pub fn interval_seconds(&self) -> std::option::Option<i32> {
        self.interval_seconds
    }
    /// <p>The path on the container on which to perform the health check. The default value is <code>/</code>.</p>
    pub fn path(&self) -> std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>The HTTP codes to use when checking for a successful response from a container. You can specify values between <code>200</code> and <code>499</code>. You can specify multiple values (for example, <code>200,202</code>) or a range of values (for example, <code>200-299</code>).</p>
    pub fn success_codes(&self) -> std::option::Option<&str> {
        self.success_codes.as_deref()
    }
}
impl ContainerServiceHealthCheckConfig {
    /// Creates a new builder-style object to manufacture [`ContainerServiceHealthCheckConfig`](crate::types::ContainerServiceHealthCheckConfig).
    pub fn builder() -> crate::types::builders::ContainerServiceHealthCheckConfigBuilder {
        crate::types::builders::ContainerServiceHealthCheckConfigBuilder::default()
    }
}

/// A builder for [`ContainerServiceHealthCheckConfig`](crate::types::ContainerServiceHealthCheckConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContainerServiceHealthCheckConfigBuilder {
    pub(crate) healthy_threshold: std::option::Option<i32>,
    pub(crate) unhealthy_threshold: std::option::Option<i32>,
    pub(crate) timeout_seconds: std::option::Option<i32>,
    pub(crate) interval_seconds: std::option::Option<i32>,
    pub(crate) path: std::option::Option<std::string::String>,
    pub(crate) success_codes: std::option::Option<std::string::String>,
}
impl ContainerServiceHealthCheckConfigBuilder {
    /// <p>The number of consecutive health checks successes required before moving the container to the <code>Healthy</code> state. The default value is <code>2</code>.</p>
    pub fn healthy_threshold(mut self, input: i32) -> Self {
        self.healthy_threshold = Some(input);
        self
    }
    /// <p>The number of consecutive health checks successes required before moving the container to the <code>Healthy</code> state. The default value is <code>2</code>.</p>
    pub fn set_healthy_threshold(mut self, input: std::option::Option<i32>) -> Self {
        self.healthy_threshold = input;
        self
    }
    /// <p>The number of consecutive health check failures required before moving the container to the <code>Unhealthy</code> state. The default value is <code>2</code>.</p>
    pub fn unhealthy_threshold(mut self, input: i32) -> Self {
        self.unhealthy_threshold = Some(input);
        self
    }
    /// <p>The number of consecutive health check failures required before moving the container to the <code>Unhealthy</code> state. The default value is <code>2</code>.</p>
    pub fn set_unhealthy_threshold(mut self, input: std::option::Option<i32>) -> Self {
        self.unhealthy_threshold = input;
        self
    }
    /// <p>The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is <code>2</code>.</p>
    pub fn timeout_seconds(mut self, input: i32) -> Self {
        self.timeout_seconds = Some(input);
        self
    }
    /// <p>The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is <code>2</code>.</p>
    pub fn set_timeout_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout_seconds = input;
        self
    }
    /// <p>The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is <code>5</code>.</p>
    pub fn interval_seconds(mut self, input: i32) -> Self {
        self.interval_seconds = Some(input);
        self
    }
    /// <p>The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is <code>5</code>.</p>
    pub fn set_interval_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.interval_seconds = input;
        self
    }
    /// <p>The path on the container on which to perform the health check. The default value is <code>/</code>.</p>
    pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
        self.path = Some(input.into());
        self
    }
    /// <p>The path on the container on which to perform the health check. The default value is <code>/</code>.</p>
    pub fn set_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The HTTP codes to use when checking for a successful response from a container. You can specify values between <code>200</code> and <code>499</code>. You can specify multiple values (for example, <code>200,202</code>) or a range of values (for example, <code>200-299</code>).</p>
    pub fn success_codes(mut self, input: impl Into<std::string::String>) -> Self {
        self.success_codes = Some(input.into());
        self
    }
    /// <p>The HTTP codes to use when checking for a successful response from a container. You can specify values between <code>200</code> and <code>499</code>. You can specify multiple values (for example, <code>200,202</code>) or a range of values (for example, <code>200-299</code>).</p>
    pub fn set_success_codes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.success_codes = input;
        self
    }
    /// Consumes the builder and constructs a [`ContainerServiceHealthCheckConfig`](crate::types::ContainerServiceHealthCheckConfig).
    pub fn build(self) -> crate::types::ContainerServiceHealthCheckConfig {
        crate::types::ContainerServiceHealthCheckConfig {
            healthy_threshold: self.healthy_threshold,
            unhealthy_threshold: self.unhealthy_threshold,
            timeout_seconds: self.timeout_seconds,
            interval_seconds: self.interval_seconds,
            path: self.path,
            success_codes: self.success_codes,
        }
    }
}
