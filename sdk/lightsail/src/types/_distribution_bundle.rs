// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the specifications of a distribution bundle.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DistributionBundle {
    /// <p>The ID of the bundle.</p>
    #[doc(hidden)]
    pub bundle_id: std::option::Option<std::string::String>,
    /// <p>The name of the distribution bundle.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The monthly price, in US dollars, of the bundle.</p>
    #[doc(hidden)]
    pub price: std::option::Option<f32>,
    /// <p>The monthly network transfer quota of the bundle.</p>
    #[doc(hidden)]
    pub transfer_per_month_in_gb: std::option::Option<i32>,
    /// <p>Indicates whether the bundle is active, and can be specified for a new or existing distribution.</p>
    #[doc(hidden)]
    pub is_active: std::option::Option<bool>,
}
impl DistributionBundle {
    /// <p>The ID of the bundle.</p>
    pub fn bundle_id(&self) -> std::option::Option<&str> {
        self.bundle_id.as_deref()
    }
    /// <p>The name of the distribution bundle.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The monthly price, in US dollars, of the bundle.</p>
    pub fn price(&self) -> std::option::Option<f32> {
        self.price
    }
    /// <p>The monthly network transfer quota of the bundle.</p>
    pub fn transfer_per_month_in_gb(&self) -> std::option::Option<i32> {
        self.transfer_per_month_in_gb
    }
    /// <p>Indicates whether the bundle is active, and can be specified for a new or existing distribution.</p>
    pub fn is_active(&self) -> std::option::Option<bool> {
        self.is_active
    }
}
impl DistributionBundle {
    /// Creates a new builder-style object to manufacture [`DistributionBundle`](crate::types::DistributionBundle).
    pub fn builder() -> crate::types::builders::DistributionBundleBuilder {
        crate::types::builders::DistributionBundleBuilder::default()
    }
}

/// A builder for [`DistributionBundle`](crate::types::DistributionBundle).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DistributionBundleBuilder {
    pub(crate) bundle_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) price: std::option::Option<f32>,
    pub(crate) transfer_per_month_in_gb: std::option::Option<i32>,
    pub(crate) is_active: std::option::Option<bool>,
}
impl DistributionBundleBuilder {
    /// <p>The ID of the bundle.</p>
    pub fn bundle_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bundle_id = Some(input.into());
        self
    }
    /// <p>The ID of the bundle.</p>
    pub fn set_bundle_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p>The name of the distribution bundle.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the distribution bundle.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The monthly price, in US dollars, of the bundle.</p>
    pub fn price(mut self, input: f32) -> Self {
        self.price = Some(input);
        self
    }
    /// <p>The monthly price, in US dollars, of the bundle.</p>
    pub fn set_price(mut self, input: std::option::Option<f32>) -> Self {
        self.price = input;
        self
    }
    /// <p>The monthly network transfer quota of the bundle.</p>
    pub fn transfer_per_month_in_gb(mut self, input: i32) -> Self {
        self.transfer_per_month_in_gb = Some(input);
        self
    }
    /// <p>The monthly network transfer quota of the bundle.</p>
    pub fn set_transfer_per_month_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.transfer_per_month_in_gb = input;
        self
    }
    /// <p>Indicates whether the bundle is active, and can be specified for a new or existing distribution.</p>
    pub fn is_active(mut self, input: bool) -> Self {
        self.is_active = Some(input);
        self
    }
    /// <p>Indicates whether the bundle is active, and can be specified for a new or existing distribution.</p>
    pub fn set_is_active(mut self, input: std::option::Option<bool>) -> Self {
        self.is_active = input;
        self
    }
    /// Consumes the builder and constructs a [`DistributionBundle`](crate::types::DistributionBundle).
    pub fn build(self) -> crate::types::DistributionBundle {
        crate::types::DistributionBundle {
            bundle_id: self.bundle_id,
            name: self.name,
            price: self.price,
            transfer_per_month_in_gb: self.transfer_per_month_in_gb,
            is_active: self.is_active,
        }
    }
}
