// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an instance snapshot.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceSnapshot {
    /// <p>The name of the snapshot.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the snapshot (e.g., <code>arn:aws:lightsail:us-east-2:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE</code>).</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    #[doc(hidden)]
    pub support_code: std::option::Option<std::string::String>,
    /// <p>The timestamp when the snapshot was created (e.g., <code>1479907467.024</code>).</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The region name and Availability Zone where you created the snapshot.</p>
    #[doc(hidden)]
    pub location: std::option::Option<crate::types::ResourceLocation>,
    /// <p>The type of resource (usually <code>InstanceSnapshot</code>).</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The state the snapshot is in.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::InstanceSnapshotState>,
    /// <p>The progress of the snapshot.</p> <note>
    /// <p>This is populated only for disk snapshots, and is <code>null</code> for instance snapshots.</p>
    /// </note>
    #[doc(hidden)]
    pub progress: std::option::Option<std::string::String>,
    /// <p>An array of disk objects containing information about all block storage disks.</p>
    #[doc(hidden)]
    pub from_attached_disks: std::option::Option<std::vec::Vec<crate::types::Disk>>,
    /// <p>The instance from which the snapshot was created.</p>
    #[doc(hidden)]
    pub from_instance_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g., <code>arn:aws:lightsail:us-east-2:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE</code>).</p>
    #[doc(hidden)]
    pub from_instance_arn: std::option::Option<std::string::String>,
    /// <p>The blueprint ID from which you created the snapshot (e.g., <code>os_debian_8_3</code>). A blueprint is a virtual private server (or <i>instance</i>) image used to create instances quickly.</p>
    #[doc(hidden)]
    pub from_blueprint_id: std::option::Option<std::string::String>,
    /// <p>The bundle ID from which you created the snapshot (e.g., <code>micro_1_0</code>).</p>
    #[doc(hidden)]
    pub from_bundle_id: std::option::Option<std::string::String>,
    /// <p>A Boolean value indicating whether the snapshot was created from an automatic snapshot.</p>
    #[doc(hidden)]
    pub is_from_auto_snapshot: std::option::Option<bool>,
    /// <p>The size in GB of the SSD.</p>
    #[doc(hidden)]
    pub size_in_gb: std::option::Option<i32>,
}
impl InstanceSnapshot {
    /// <p>The name of the snapshot.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot (e.g., <code>arn:aws:lightsail:us-east-2:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE</code>).</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn support_code(&self) -> std::option::Option<&str> {
        self.support_code.as_deref()
    }
    /// <p>The timestamp when the snapshot was created (e.g., <code>1479907467.024</code>).</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The region name and Availability Zone where you created the snapshot.</p>
    pub fn location(&self) -> std::option::Option<&crate::types::ResourceLocation> {
        self.location.as_ref()
    }
    /// <p>The type of resource (usually <code>InstanceSnapshot</code>).</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The state the snapshot is in.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::InstanceSnapshotState> {
        self.state.as_ref()
    }
    /// <p>The progress of the snapshot.</p> <note>
    /// <p>This is populated only for disk snapshots, and is <code>null</code> for instance snapshots.</p>
    /// </note>
    pub fn progress(&self) -> std::option::Option<&str> {
        self.progress.as_deref()
    }
    /// <p>An array of disk objects containing information about all block storage disks.</p>
    pub fn from_attached_disks(&self) -> std::option::Option<&[crate::types::Disk]> {
        self.from_attached_disks.as_deref()
    }
    /// <p>The instance from which the snapshot was created.</p>
    pub fn from_instance_name(&self) -> std::option::Option<&str> {
        self.from_instance_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g., <code>arn:aws:lightsail:us-east-2:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE</code>).</p>
    pub fn from_instance_arn(&self) -> std::option::Option<&str> {
        self.from_instance_arn.as_deref()
    }
    /// <p>The blueprint ID from which you created the snapshot (e.g., <code>os_debian_8_3</code>). A blueprint is a virtual private server (or <i>instance</i>) image used to create instances quickly.</p>
    pub fn from_blueprint_id(&self) -> std::option::Option<&str> {
        self.from_blueprint_id.as_deref()
    }
    /// <p>The bundle ID from which you created the snapshot (e.g., <code>micro_1_0</code>).</p>
    pub fn from_bundle_id(&self) -> std::option::Option<&str> {
        self.from_bundle_id.as_deref()
    }
    /// <p>A Boolean value indicating whether the snapshot was created from an automatic snapshot.</p>
    pub fn is_from_auto_snapshot(&self) -> std::option::Option<bool> {
        self.is_from_auto_snapshot
    }
    /// <p>The size in GB of the SSD.</p>
    pub fn size_in_gb(&self) -> std::option::Option<i32> {
        self.size_in_gb
    }
}
impl InstanceSnapshot {
    /// Creates a new builder-style object to manufacture [`InstanceSnapshot`](crate::types::InstanceSnapshot).
    pub fn builder() -> crate::types::builders::InstanceSnapshotBuilder {
        crate::types::builders::InstanceSnapshotBuilder::default()
    }
}

/// A builder for [`InstanceSnapshot`](crate::types::InstanceSnapshot).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceSnapshotBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) support_code: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) location: std::option::Option<crate::types::ResourceLocation>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) state: std::option::Option<crate::types::InstanceSnapshotState>,
    pub(crate) progress: std::option::Option<std::string::String>,
    pub(crate) from_attached_disks: std::option::Option<std::vec::Vec<crate::types::Disk>>,
    pub(crate) from_instance_name: std::option::Option<std::string::String>,
    pub(crate) from_instance_arn: std::option::Option<std::string::String>,
    pub(crate) from_blueprint_id: std::option::Option<std::string::String>,
    pub(crate) from_bundle_id: std::option::Option<std::string::String>,
    pub(crate) is_from_auto_snapshot: std::option::Option<bool>,
    pub(crate) size_in_gb: std::option::Option<i32>,
}
impl InstanceSnapshotBuilder {
    /// <p>The name of the snapshot.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the snapshot.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot (e.g., <code>arn:aws:lightsail:us-east-2:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE</code>).</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot (e.g., <code>arn:aws:lightsail:us-east-2:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE</code>).</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn support_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_code = Some(input.into());
        self
    }
    /// <p>The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn set_support_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.support_code = input;
        self
    }
    /// <p>The timestamp when the snapshot was created (e.g., <code>1479907467.024</code>).</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The timestamp when the snapshot was created (e.g., <code>1479907467.024</code>).</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The region name and Availability Zone where you created the snapshot.</p>
    pub fn location(mut self, input: crate::types::ResourceLocation) -> Self {
        self.location = Some(input);
        self
    }
    /// <p>The region name and Availability Zone where you created the snapshot.</p>
    pub fn set_location(
        mut self,
        input: std::option::Option<crate::types::ResourceLocation>,
    ) -> Self {
        self.location = input;
        self
    }
    /// <p>The type of resource (usually <code>InstanceSnapshot</code>).</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>The type of resource (usually <code>InstanceSnapshot</code>).</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The state the snapshot is in.</p>
    pub fn state(mut self, input: crate::types::InstanceSnapshotState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state the snapshot is in.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::InstanceSnapshotState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>The progress of the snapshot.</p> <note>
    /// <p>This is populated only for disk snapshots, and is <code>null</code> for instance snapshots.</p>
    /// </note>
    pub fn progress(mut self, input: impl Into<std::string::String>) -> Self {
        self.progress = Some(input.into());
        self
    }
    /// <p>The progress of the snapshot.</p> <note>
    /// <p>This is populated only for disk snapshots, and is <code>null</code> for instance snapshots.</p>
    /// </note>
    pub fn set_progress(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.progress = input;
        self
    }
    /// Appends an item to `from_attached_disks`.
    ///
    /// To override the contents of this collection use [`set_from_attached_disks`](Self::set_from_attached_disks).
    ///
    /// <p>An array of disk objects containing information about all block storage disks.</p>
    pub fn from_attached_disks(mut self, input: crate::types::Disk) -> Self {
        let mut v = self.from_attached_disks.unwrap_or_default();
        v.push(input);
        self.from_attached_disks = Some(v);
        self
    }
    /// <p>An array of disk objects containing information about all block storage disks.</p>
    pub fn set_from_attached_disks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Disk>>,
    ) -> Self {
        self.from_attached_disks = input;
        self
    }
    /// <p>The instance from which the snapshot was created.</p>
    pub fn from_instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.from_instance_name = Some(input.into());
        self
    }
    /// <p>The instance from which the snapshot was created.</p>
    pub fn set_from_instance_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.from_instance_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g., <code>arn:aws:lightsail:us-east-2:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE</code>).</p>
    pub fn from_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.from_instance_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g., <code>arn:aws:lightsail:us-east-2:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE</code>).</p>
    pub fn set_from_instance_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.from_instance_arn = input;
        self
    }
    /// <p>The blueprint ID from which you created the snapshot (e.g., <code>os_debian_8_3</code>). A blueprint is a virtual private server (or <i>instance</i>) image used to create instances quickly.</p>
    pub fn from_blueprint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.from_blueprint_id = Some(input.into());
        self
    }
    /// <p>The blueprint ID from which you created the snapshot (e.g., <code>os_debian_8_3</code>). A blueprint is a virtual private server (or <i>instance</i>) image used to create instances quickly.</p>
    pub fn set_from_blueprint_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.from_blueprint_id = input;
        self
    }
    /// <p>The bundle ID from which you created the snapshot (e.g., <code>micro_1_0</code>).</p>
    pub fn from_bundle_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.from_bundle_id = Some(input.into());
        self
    }
    /// <p>The bundle ID from which you created the snapshot (e.g., <code>micro_1_0</code>).</p>
    pub fn set_from_bundle_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.from_bundle_id = input;
        self
    }
    /// <p>A Boolean value indicating whether the snapshot was created from an automatic snapshot.</p>
    pub fn is_from_auto_snapshot(mut self, input: bool) -> Self {
        self.is_from_auto_snapshot = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether the snapshot was created from an automatic snapshot.</p>
    pub fn set_is_from_auto_snapshot(mut self, input: std::option::Option<bool>) -> Self {
        self.is_from_auto_snapshot = input;
        self
    }
    /// <p>The size in GB of the SSD.</p>
    pub fn size_in_gb(mut self, input: i32) -> Self {
        self.size_in_gb = Some(input);
        self
    }
    /// <p>The size in GB of the SSD.</p>
    pub fn set_size_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.size_in_gb = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceSnapshot`](crate::types::InstanceSnapshot).
    pub fn build(self) -> crate::types::InstanceSnapshot {
        crate::types::InstanceSnapshot {
            name: self.name,
            arn: self.arn,
            support_code: self.support_code,
            created_at: self.created_at,
            location: self.location,
            resource_type: self.resource_type,
            tags: self.tags,
            state: self.state,
            progress: self.progress,
            from_attached_disks: self.from_attached_disks,
            from_instance_name: self.from_instance_name,
            from_instance_arn: self.from_instance_arn,
            from_blueprint_id: self.from_blueprint_id,
            from_bundle_id: self.from_bundle_id,
            is_from_auto_snapshot: self.is_from_auto_snapshot,
            size_in_gb: self.size_in_gb,
        }
    }
}
