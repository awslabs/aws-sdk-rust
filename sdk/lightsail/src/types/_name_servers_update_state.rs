// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the state of the name server records update made by Amazon Lightsail to an Amazon Route&nbsp;53 registered domain.</p>
/// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/understanding-dns-in-amazon-lightsail">DNS in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NameServersUpdateState {
    /// <p>The status code for the name servers update.</p>
    /// <p>Following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>SUCCEEDED</code> - The name server records were successfully updated.</p> </li>
    /// <li> <p> <code>PENDING</code> - The name server record update is in progress.</p> </li>
    /// <li> <p> <code>FAILED</code> - The name server record update failed.</p> </li>
    /// <li> <p> <code>STARTED</code> - The automatic name server record update started.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub code: std::option::Option<crate::types::NameServersUpdateStateCode>,
    /// <p>The message that describes the reason for the status code.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
}
impl NameServersUpdateState {
    /// <p>The status code for the name servers update.</p>
    /// <p>Following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>SUCCEEDED</code> - The name server records were successfully updated.</p> </li>
    /// <li> <p> <code>PENDING</code> - The name server record update is in progress.</p> </li>
    /// <li> <p> <code>FAILED</code> - The name server record update failed.</p> </li>
    /// <li> <p> <code>STARTED</code> - The automatic name server record update started.</p> </li>
    /// </ul>
    pub fn code(&self) -> std::option::Option<&crate::types::NameServersUpdateStateCode> {
        self.code.as_ref()
    }
    /// <p>The message that describes the reason for the status code.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl NameServersUpdateState {
    /// Creates a new builder-style object to manufacture [`NameServersUpdateState`](crate::types::NameServersUpdateState).
    pub fn builder() -> crate::types::builders::NameServersUpdateStateBuilder {
        crate::types::builders::NameServersUpdateStateBuilder::default()
    }
}

/// A builder for [`NameServersUpdateState`](crate::types::NameServersUpdateState).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NameServersUpdateStateBuilder {
    pub(crate) code: std::option::Option<crate::types::NameServersUpdateStateCode>,
    pub(crate) message: std::option::Option<std::string::String>,
}
impl NameServersUpdateStateBuilder {
    /// <p>The status code for the name servers update.</p>
    /// <p>Following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>SUCCEEDED</code> - The name server records were successfully updated.</p> </li>
    /// <li> <p> <code>PENDING</code> - The name server record update is in progress.</p> </li>
    /// <li> <p> <code>FAILED</code> - The name server record update failed.</p> </li>
    /// <li> <p> <code>STARTED</code> - The automatic name server record update started.</p> </li>
    /// </ul>
    pub fn code(mut self, input: crate::types::NameServersUpdateStateCode) -> Self {
        self.code = Some(input);
        self
    }
    /// <p>The status code for the name servers update.</p>
    /// <p>Following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>SUCCEEDED</code> - The name server records were successfully updated.</p> </li>
    /// <li> <p> <code>PENDING</code> - The name server record update is in progress.</p> </li>
    /// <li> <p> <code>FAILED</code> - The name server record update failed.</p> </li>
    /// <li> <p> <code>STARTED</code> - The automatic name server record update started.</p> </li>
    /// </ul>
    pub fn set_code(
        mut self,
        input: std::option::Option<crate::types::NameServersUpdateStateCode>,
    ) -> Self {
        self.code = input;
        self
    }
    /// <p>The message that describes the reason for the status code.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>The message that describes the reason for the status code.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Consumes the builder and constructs a [`NameServersUpdateState`](crate::types::NameServersUpdateState).
    pub fn build(self) -> crate::types::NameServersUpdateState {
        crate::types::NameServersUpdateState {
            code: self.code,
            message: self.message,
        }
    }
}
