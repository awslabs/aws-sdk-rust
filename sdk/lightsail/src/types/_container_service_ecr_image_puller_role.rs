// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the activation status of the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
/// <p>When activated, Lightsail creates an Identity and Access Management (IAM) role for the specified Lightsail container service. You can use the ARN of the role to create a trust relationship between your Lightsail container service and an Amazon ECR private repository in your Amazon Web Services account. This allows your container service to pull images from Amazon ECR private repositories. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContainerServiceEcrImagePullerRole {
    /// <p>A Boolean value that indicates whether the role is activated.</p>
    #[doc(hidden)]
    pub is_active: std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the role, if it is activated.</p>
    #[doc(hidden)]
    pub principal_arn: std::option::Option<std::string::String>,
}
impl ContainerServiceEcrImagePullerRole {
    /// <p>A Boolean value that indicates whether the role is activated.</p>
    pub fn is_active(&self) -> std::option::Option<bool> {
        self.is_active
    }
    /// <p>The Amazon Resource Name (ARN) of the role, if it is activated.</p>
    pub fn principal_arn(&self) -> std::option::Option<&str> {
        self.principal_arn.as_deref()
    }
}
impl ContainerServiceEcrImagePullerRole {
    /// Creates a new builder-style object to manufacture [`ContainerServiceEcrImagePullerRole`](crate::types::ContainerServiceEcrImagePullerRole).
    pub fn builder() -> crate::types::builders::ContainerServiceEcrImagePullerRoleBuilder {
        crate::types::builders::ContainerServiceEcrImagePullerRoleBuilder::default()
    }
}

/// A builder for [`ContainerServiceEcrImagePullerRole`](crate::types::ContainerServiceEcrImagePullerRole).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContainerServiceEcrImagePullerRoleBuilder {
    pub(crate) is_active: std::option::Option<bool>,
    pub(crate) principal_arn: std::option::Option<std::string::String>,
}
impl ContainerServiceEcrImagePullerRoleBuilder {
    /// <p>A Boolean value that indicates whether the role is activated.</p>
    pub fn is_active(mut self, input: bool) -> Self {
        self.is_active = Some(input);
        self
    }
    /// <p>A Boolean value that indicates whether the role is activated.</p>
    pub fn set_is_active(mut self, input: std::option::Option<bool>) -> Self {
        self.is_active = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role, if it is activated.</p>
    pub fn principal_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role, if it is activated.</p>
    pub fn set_principal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`ContainerServiceEcrImagePullerRole`](crate::types::ContainerServiceEcrImagePullerRole).
    pub fn build(self) -> crate::types::ContainerServiceEcrImagePullerRole {
        crate::types::ContainerServiceEcrImagePullerRole {
            is_active: self.is_active,
            principal_arn: self.principal_arn,
        }
    }
}
