// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the login information for the container image registry of an Amazon Lightsail account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContainerServiceRegistryLogin {
    /// <p>The container service registry username to use to push container images to the container image registry of a Lightsail account.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p>The container service registry password to use to push container images to the container image registry of a Lightsail account</p>
    #[doc(hidden)]
    pub password: std::option::Option<std::string::String>,
    /// <p>The timestamp of when the container image registry username and password expire.</p>
    /// <p>The log in credentials expire 12 hours after they are created, at which point you will need to create a new set of log in credentials using the <code>CreateContainerServiceRegistryLogin</code> action.</p>
    #[doc(hidden)]
    pub expires_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The address to use to push container images to the container image registry of a Lightsail account.</p>
    #[doc(hidden)]
    pub registry: std::option::Option<std::string::String>,
}
impl ContainerServiceRegistryLogin {
    /// <p>The container service registry username to use to push container images to the container image registry of a Lightsail account.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The container service registry password to use to push container images to the container image registry of a Lightsail account</p>
    pub fn password(&self) -> std::option::Option<&str> {
        self.password.as_deref()
    }
    /// <p>The timestamp of when the container image registry username and password expire.</p>
    /// <p>The log in credentials expire 12 hours after they are created, at which point you will need to create a new set of log in credentials using the <code>CreateContainerServiceRegistryLogin</code> action.</p>
    pub fn expires_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expires_at.as_ref()
    }
    /// <p>The address to use to push container images to the container image registry of a Lightsail account.</p>
    pub fn registry(&self) -> std::option::Option<&str> {
        self.registry.as_deref()
    }
}
impl ContainerServiceRegistryLogin {
    /// Creates a new builder-style object to manufacture [`ContainerServiceRegistryLogin`](crate::types::ContainerServiceRegistryLogin).
    pub fn builder() -> crate::types::builders::ContainerServiceRegistryLoginBuilder {
        crate::types::builders::ContainerServiceRegistryLoginBuilder::default()
    }
}

/// A builder for [`ContainerServiceRegistryLogin`](crate::types::ContainerServiceRegistryLogin).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContainerServiceRegistryLoginBuilder {
    pub(crate) username: std::option::Option<std::string::String>,
    pub(crate) password: std::option::Option<std::string::String>,
    pub(crate) expires_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) registry: std::option::Option<std::string::String>,
}
impl ContainerServiceRegistryLoginBuilder {
    /// <p>The container service registry username to use to push container images to the container image registry of a Lightsail account.</p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// <p>The container service registry username to use to push container images to the container image registry of a Lightsail account.</p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The container service registry password to use to push container images to the container image registry of a Lightsail account</p>
    pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
        self.password = Some(input.into());
        self
    }
    /// <p>The container service registry password to use to push container images to the container image registry of a Lightsail account</p>
    pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password = input;
        self
    }
    /// <p>The timestamp of when the container image registry username and password expire.</p>
    /// <p>The log in credentials expire 12 hours after they are created, at which point you will need to create a new set of log in credentials using the <code>CreateContainerServiceRegistryLogin</code> action.</p>
    pub fn expires_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expires_at = Some(input);
        self
    }
    /// <p>The timestamp of when the container image registry username and password expire.</p>
    /// <p>The log in credentials expire 12 hours after they are created, at which point you will need to create a new set of log in credentials using the <code>CreateContainerServiceRegistryLogin</code> action.</p>
    pub fn set_expires_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.expires_at = input;
        self
    }
    /// <p>The address to use to push container images to the container image registry of a Lightsail account.</p>
    pub fn registry(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry = Some(input.into());
        self
    }
    /// <p>The address to use to push container images to the container image registry of a Lightsail account.</p>
    pub fn set_registry(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry = input;
        self
    }
    /// Consumes the builder and constructs a [`ContainerServiceRegistryLogin`](crate::types::ContainerServiceRegistryLogin).
    pub fn build(self) -> crate::types::ContainerServiceRegistryLogin {
        crate::types::ContainerServiceRegistryLogin {
            username: self.username,
            password: self.password,
            expires_at: self.expires_at,
            registry: self.registry,
        }
    }
}
