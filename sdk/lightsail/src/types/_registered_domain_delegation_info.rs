// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the delegation state of an Amazon Route&nbsp;53 registered domain to Amazon Lightsail.</p>
/// <p>When you delegate an Amazon Route&nbsp;53 registered domain to Lightsail, you can manage the DNS of the domain using a Lightsail DNS zone. You no longer use the Route&nbsp;53 hosted zone to manage the DNS of the domain. To delegate the domain, Lightsail automatically updates the domain's name servers in Route&nbsp;53 to the name servers of the Lightsail DNS zone. Then, Lightsail automatically deletes the Route&nbsp;53 hosted zone for the domain.</p>
/// <p>All of the following conditions must be true for automatic domain delegation to be successful:</p>
/// <ul>
/// <li> <p>The registered domain must be in the same Amazon Web Services account as the Lightsail account making the request.</p> </li>
/// <li> <p>The user or entity making the request must have permission to manage domains in Route&nbsp;53.</p> </li>
/// <li> <p>The Route&nbsp;53 hosted zone for the domain must be empty. It cannot contain DNS records other than start of authority (SOA) and name server records.</p> </li>
/// </ul>
/// <p>If automatic domain delegation fails, or if you manage the DNS of your domain using a service other than Route&nbsp;53, then you must manually add the Lightsail DNS zone name servers to your domain in order to delegate management of its DNS to Lightsail. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-create-dns-entry">Creating a DNS zone to manage your domainâ€™s records in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisteredDomainDelegationInfo {
    /// <p>An object that describes the state of the name server records that are automatically added to the Route&nbsp;53 domain by Lightsail.</p>
    #[doc(hidden)]
    pub name_servers_update_state: std::option::Option<crate::types::NameServersUpdateState>,
    /// <p>Describes the deletion state of an Amazon Route&nbsp;53 hosted zone for a domain that is being automatically delegated to an Amazon Lightsail DNS zone.</p>
    #[doc(hidden)]
    pub r53_hosted_zone_deletion_state:
        std::option::Option<crate::types::R53HostedZoneDeletionState>,
}
impl RegisteredDomainDelegationInfo {
    /// <p>An object that describes the state of the name server records that are automatically added to the Route&nbsp;53 domain by Lightsail.</p>
    pub fn name_servers_update_state(
        &self,
    ) -> std::option::Option<&crate::types::NameServersUpdateState> {
        self.name_servers_update_state.as_ref()
    }
    /// <p>Describes the deletion state of an Amazon Route&nbsp;53 hosted zone for a domain that is being automatically delegated to an Amazon Lightsail DNS zone.</p>
    pub fn r53_hosted_zone_deletion_state(
        &self,
    ) -> std::option::Option<&crate::types::R53HostedZoneDeletionState> {
        self.r53_hosted_zone_deletion_state.as_ref()
    }
}
impl RegisteredDomainDelegationInfo {
    /// Creates a new builder-style object to manufacture [`RegisteredDomainDelegationInfo`](crate::types::RegisteredDomainDelegationInfo).
    pub fn builder() -> crate::types::builders::RegisteredDomainDelegationInfoBuilder {
        crate::types::builders::RegisteredDomainDelegationInfoBuilder::default()
    }
}

/// A builder for [`RegisteredDomainDelegationInfo`](crate::types::RegisteredDomainDelegationInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisteredDomainDelegationInfoBuilder {
    pub(crate) name_servers_update_state: std::option::Option<crate::types::NameServersUpdateState>,
    pub(crate) r53_hosted_zone_deletion_state:
        std::option::Option<crate::types::R53HostedZoneDeletionState>,
}
impl RegisteredDomainDelegationInfoBuilder {
    /// <p>An object that describes the state of the name server records that are automatically added to the Route&nbsp;53 domain by Lightsail.</p>
    pub fn name_servers_update_state(
        mut self,
        input: crate::types::NameServersUpdateState,
    ) -> Self {
        self.name_servers_update_state = Some(input);
        self
    }
    /// <p>An object that describes the state of the name server records that are automatically added to the Route&nbsp;53 domain by Lightsail.</p>
    pub fn set_name_servers_update_state(
        mut self,
        input: std::option::Option<crate::types::NameServersUpdateState>,
    ) -> Self {
        self.name_servers_update_state = input;
        self
    }
    /// <p>Describes the deletion state of an Amazon Route&nbsp;53 hosted zone for a domain that is being automatically delegated to an Amazon Lightsail DNS zone.</p>
    pub fn r53_hosted_zone_deletion_state(
        mut self,
        input: crate::types::R53HostedZoneDeletionState,
    ) -> Self {
        self.r53_hosted_zone_deletion_state = Some(input);
        self
    }
    /// <p>Describes the deletion state of an Amazon Route&nbsp;53 hosted zone for a domain that is being automatically delegated to an Amazon Lightsail DNS zone.</p>
    pub fn set_r53_hosted_zone_deletion_state(
        mut self,
        input: std::option::Option<crate::types::R53HostedZoneDeletionState>,
    ) -> Self {
        self.r53_hosted_zone_deletion_state = input;
        self
    }
    /// Consumes the builder and constructs a [`RegisteredDomainDelegationInfo`](crate::types::RegisteredDomainDelegationInfo).
    pub fn build(self) -> crate::types::RegisteredDomainDelegationInfo {
        crate::types::RegisteredDomainDelegationInfo {
            name_servers_update_state: self.name_servers_update_state,
            r53_hosted_zone_deletion_state: self.r53_hosted_zone_deletion_state,
        }
    }
}
