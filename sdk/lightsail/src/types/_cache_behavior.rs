// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the default cache behavior of an Amazon Lightsail content delivery network (CDN) distribution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CacheBehavior {
    /// <p>The cache behavior of the distribution.</p>
    /// <p>The following cache behaviors can be specified:</p>
    /// <ul>
    /// <li> <p> <b> <code>cache</code> </b> - This option is best for static sites. When specified, your distribution caches and serves your entire website as static content. This behavior is ideal for websites with static content that doesn't change depending on who views it, or for websites that don't use cookies, headers, or query strings to personalize content.</p> </li>
    /// <li> <p> <b> <code>dont-cache</code> </b> - This option is best for sites that serve a mix of static and dynamic content. When specified, your distribution caches and serve only the content that is specified in the distribution's <code>CacheBehaviorPerPath</code> parameter. This behavior is ideal for websites or web applications that use cookies, headers, and query strings to personalize content for individual users.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub behavior: std::option::Option<crate::types::BehaviorEnum>,
}
impl CacheBehavior {
    /// <p>The cache behavior of the distribution.</p>
    /// <p>The following cache behaviors can be specified:</p>
    /// <ul>
    /// <li> <p> <b> <code>cache</code> </b> - This option is best for static sites. When specified, your distribution caches and serves your entire website as static content. This behavior is ideal for websites with static content that doesn't change depending on who views it, or for websites that don't use cookies, headers, or query strings to personalize content.</p> </li>
    /// <li> <p> <b> <code>dont-cache</code> </b> - This option is best for sites that serve a mix of static and dynamic content. When specified, your distribution caches and serve only the content that is specified in the distribution's <code>CacheBehaviorPerPath</code> parameter. This behavior is ideal for websites or web applications that use cookies, headers, and query strings to personalize content for individual users.</p> </li>
    /// </ul>
    pub fn behavior(&self) -> std::option::Option<&crate::types::BehaviorEnum> {
        self.behavior.as_ref()
    }
}
impl CacheBehavior {
    /// Creates a new builder-style object to manufacture [`CacheBehavior`](crate::types::CacheBehavior).
    pub fn builder() -> crate::types::builders::CacheBehaviorBuilder {
        crate::types::builders::CacheBehaviorBuilder::default()
    }
}

/// A builder for [`CacheBehavior`](crate::types::CacheBehavior).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CacheBehaviorBuilder {
    pub(crate) behavior: std::option::Option<crate::types::BehaviorEnum>,
}
impl CacheBehaviorBuilder {
    /// <p>The cache behavior of the distribution.</p>
    /// <p>The following cache behaviors can be specified:</p>
    /// <ul>
    /// <li> <p> <b> <code>cache</code> </b> - This option is best for static sites. When specified, your distribution caches and serves your entire website as static content. This behavior is ideal for websites with static content that doesn't change depending on who views it, or for websites that don't use cookies, headers, or query strings to personalize content.</p> </li>
    /// <li> <p> <b> <code>dont-cache</code> </b> - This option is best for sites that serve a mix of static and dynamic content. When specified, your distribution caches and serve only the content that is specified in the distribution's <code>CacheBehaviorPerPath</code> parameter. This behavior is ideal for websites or web applications that use cookies, headers, and query strings to personalize content for individual users.</p> </li>
    /// </ul>
    pub fn behavior(mut self, input: crate::types::BehaviorEnum) -> Self {
        self.behavior = Some(input);
        self
    }
    /// <p>The cache behavior of the distribution.</p>
    /// <p>The following cache behaviors can be specified:</p>
    /// <ul>
    /// <li> <p> <b> <code>cache</code> </b> - This option is best for static sites. When specified, your distribution caches and serves your entire website as static content. This behavior is ideal for websites with static content that doesn't change depending on who views it, or for websites that don't use cookies, headers, or query strings to personalize content.</p> </li>
    /// <li> <p> <b> <code>dont-cache</code> </b> - This option is best for sites that serve a mix of static and dynamic content. When specified, your distribution caches and serve only the content that is specified in the distribution's <code>CacheBehaviorPerPath</code> parameter. This behavior is ideal for websites or web applications that use cookies, headers, and query strings to personalize content for individual users.</p> </li>
    /// </ul>
    pub fn set_behavior(mut self, input: std::option::Option<crate::types::BehaviorEnum>) -> Self {
        self.behavior = input;
        self
    }
    /// Consumes the builder and constructs a [`CacheBehavior`](crate::types::CacheBehavior).
    pub fn build(self) -> crate::types::CacheBehavior {
        crate::types::CacheBehavior {
            behavior: self.behavior,
        }
    }
}
