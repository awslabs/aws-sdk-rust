// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the cross-origin resource sharing (CORS) configuration for a Lightsail bucket. CORS defines a way for client web applications that are loaded in one domain to interact with resources in a different domain. For more information, see <a href="https://docs.aws.amazon.com/lightsail/latest/userguide/configure-cors.html">Configuring cross-origin resource sharing (CORS)</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BucketCorsConfig {
    /// <p>A set of origins and methods (cross-origin access that you want to allow). You can add up to 20 rules to the configuration. The total size is limited to 64 KB.</p>
    pub rules: ::std::option::Option<::std::vec::Vec<crate::types::BucketCorsRule>>,
}
impl BucketCorsConfig {
    /// <p>A set of origins and methods (cross-origin access that you want to allow). You can add up to 20 rules to the configuration. The total size is limited to 64 KB.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rules.is_none()`.
    pub fn rules(&self) -> &[crate::types::BucketCorsRule] {
        self.rules.as_deref().unwrap_or_default()
    }
}
impl BucketCorsConfig {
    /// Creates a new builder-style object to manufacture [`BucketCorsConfig`](crate::types::BucketCorsConfig).
    pub fn builder() -> crate::types::builders::BucketCorsConfigBuilder {
        crate::types::builders::BucketCorsConfigBuilder::default()
    }
}

/// A builder for [`BucketCorsConfig`](crate::types::BucketCorsConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BucketCorsConfigBuilder {
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<crate::types::BucketCorsRule>>,
}
impl BucketCorsConfigBuilder {
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>A set of origins and methods (cross-origin access that you want to allow). You can add up to 20 rules to the configuration. The total size is limited to 64 KB.</p>
    pub fn rules(mut self, input: crate::types::BucketCorsRule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>A set of origins and methods (cross-origin access that you want to allow). You can add up to 20 rules to the configuration. The total size is limited to 64 KB.</p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BucketCorsRule>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>A set of origins and methods (cross-origin access that you want to allow). You can add up to 20 rules to the configuration. The total size is limited to 64 KB.</p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BucketCorsRule>> {
        &self.rules
    }
    /// Consumes the builder and constructs a [`BucketCorsConfig`](crate::types::BucketCorsConfig).
    pub fn build(self) -> crate::types::BucketCorsConfig {
        crate::types::BucketCorsConfig { rules: self.rules }
    }
}
