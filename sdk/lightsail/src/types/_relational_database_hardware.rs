// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the hardware of a database.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RelationalDatabaseHardware {
    /// <p>The number of vCPUs for the database.</p>
    #[doc(hidden)]
    pub cpu_count: std::option::Option<i32>,
    /// <p>The size of the disk for the database.</p>
    #[doc(hidden)]
    pub disk_size_in_gb: std::option::Option<i32>,
    /// <p>The amount of RAM in GB for the database.</p>
    #[doc(hidden)]
    pub ram_size_in_gb: std::option::Option<f32>,
}
impl RelationalDatabaseHardware {
    /// <p>The number of vCPUs for the database.</p>
    pub fn cpu_count(&self) -> std::option::Option<i32> {
        self.cpu_count
    }
    /// <p>The size of the disk for the database.</p>
    pub fn disk_size_in_gb(&self) -> std::option::Option<i32> {
        self.disk_size_in_gb
    }
    /// <p>The amount of RAM in GB for the database.</p>
    pub fn ram_size_in_gb(&self) -> std::option::Option<f32> {
        self.ram_size_in_gb
    }
}
impl RelationalDatabaseHardware {
    /// Creates a new builder-style object to manufacture [`RelationalDatabaseHardware`](crate::types::RelationalDatabaseHardware).
    pub fn builder() -> crate::types::builders::RelationalDatabaseHardwareBuilder {
        crate::types::builders::RelationalDatabaseHardwareBuilder::default()
    }
}

/// A builder for [`RelationalDatabaseHardware`](crate::types::RelationalDatabaseHardware).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RelationalDatabaseHardwareBuilder {
    pub(crate) cpu_count: std::option::Option<i32>,
    pub(crate) disk_size_in_gb: std::option::Option<i32>,
    pub(crate) ram_size_in_gb: std::option::Option<f32>,
}
impl RelationalDatabaseHardwareBuilder {
    /// <p>The number of vCPUs for the database.</p>
    pub fn cpu_count(mut self, input: i32) -> Self {
        self.cpu_count = Some(input);
        self
    }
    /// <p>The number of vCPUs for the database.</p>
    pub fn set_cpu_count(mut self, input: std::option::Option<i32>) -> Self {
        self.cpu_count = input;
        self
    }
    /// <p>The size of the disk for the database.</p>
    pub fn disk_size_in_gb(mut self, input: i32) -> Self {
        self.disk_size_in_gb = Some(input);
        self
    }
    /// <p>The size of the disk for the database.</p>
    pub fn set_disk_size_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.disk_size_in_gb = input;
        self
    }
    /// <p>The amount of RAM in GB for the database.</p>
    pub fn ram_size_in_gb(mut self, input: f32) -> Self {
        self.ram_size_in_gb = Some(input);
        self
    }
    /// <p>The amount of RAM in GB for the database.</p>
    pub fn set_ram_size_in_gb(mut self, input: std::option::Option<f32>) -> Self {
        self.ram_size_in_gb = input;
        self
    }
    /// Consumes the builder and constructs a [`RelationalDatabaseHardware`](crate::types::RelationalDatabaseHardware).
    pub fn build(self) -> crate::types::RelationalDatabaseHardware {
        crate::types::RelationalDatabaseHardware {
            cpu_count: self.cpu_count,
            disk_size_in_gb: self.disk_size_in_gb,
            ram_size_in_gb: self.ram_size_in_gb,
        }
    }
}
