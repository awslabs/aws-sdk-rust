// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the parameters of a database.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RelationalDatabaseParameter {
    /// <p>Specifies the valid range of values for the parameter.</p>
    #[doc(hidden)]
    pub allowed_values: std::option::Option<std::string::String>,
    /// <p>Indicates when parameter updates are applied.</p>
    /// <p>Can be <code>immediate</code> or <code>pending-reboot</code>.</p>
    #[doc(hidden)]
    pub apply_method: std::option::Option<std::string::String>,
    /// <p>Specifies the engine-specific parameter type.</p>
    #[doc(hidden)]
    pub apply_type: std::option::Option<std::string::String>,
    /// <p>Specifies the valid data type for the parameter.</p>
    #[doc(hidden)]
    pub data_type: std::option::Option<std::string::String>,
    /// <p>Provides a description of the parameter.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A Boolean value indicating whether the parameter can be modified.</p>
    #[doc(hidden)]
    pub is_modifiable: std::option::Option<bool>,
    /// <p>Specifies the name of the parameter.</p>
    #[doc(hidden)]
    pub parameter_name: std::option::Option<std::string::String>,
    /// <p>Specifies the value of the parameter.</p>
    #[doc(hidden)]
    pub parameter_value: std::option::Option<std::string::String>,
}
impl RelationalDatabaseParameter {
    /// <p>Specifies the valid range of values for the parameter.</p>
    pub fn allowed_values(&self) -> std::option::Option<&str> {
        self.allowed_values.as_deref()
    }
    /// <p>Indicates when parameter updates are applied.</p>
    /// <p>Can be <code>immediate</code> or <code>pending-reboot</code>.</p>
    pub fn apply_method(&self) -> std::option::Option<&str> {
        self.apply_method.as_deref()
    }
    /// <p>Specifies the engine-specific parameter type.</p>
    pub fn apply_type(&self) -> std::option::Option<&str> {
        self.apply_type.as_deref()
    }
    /// <p>Specifies the valid data type for the parameter.</p>
    pub fn data_type(&self) -> std::option::Option<&str> {
        self.data_type.as_deref()
    }
    /// <p>Provides a description of the parameter.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A Boolean value indicating whether the parameter can be modified.</p>
    pub fn is_modifiable(&self) -> std::option::Option<bool> {
        self.is_modifiable
    }
    /// <p>Specifies the name of the parameter.</p>
    pub fn parameter_name(&self) -> std::option::Option<&str> {
        self.parameter_name.as_deref()
    }
    /// <p>Specifies the value of the parameter.</p>
    pub fn parameter_value(&self) -> std::option::Option<&str> {
        self.parameter_value.as_deref()
    }
}
impl RelationalDatabaseParameter {
    /// Creates a new builder-style object to manufacture [`RelationalDatabaseParameter`](crate::types::RelationalDatabaseParameter).
    pub fn builder() -> crate::types::builders::RelationalDatabaseParameterBuilder {
        crate::types::builders::RelationalDatabaseParameterBuilder::default()
    }
}

/// A builder for [`RelationalDatabaseParameter`](crate::types::RelationalDatabaseParameter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RelationalDatabaseParameterBuilder {
    pub(crate) allowed_values: std::option::Option<std::string::String>,
    pub(crate) apply_method: std::option::Option<std::string::String>,
    pub(crate) apply_type: std::option::Option<std::string::String>,
    pub(crate) data_type: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) is_modifiable: std::option::Option<bool>,
    pub(crate) parameter_name: std::option::Option<std::string::String>,
    pub(crate) parameter_value: std::option::Option<std::string::String>,
}
impl RelationalDatabaseParameterBuilder {
    /// <p>Specifies the valid range of values for the parameter.</p>
    pub fn allowed_values(mut self, input: impl Into<std::string::String>) -> Self {
        self.allowed_values = Some(input.into());
        self
    }
    /// <p>Specifies the valid range of values for the parameter.</p>
    pub fn set_allowed_values(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.allowed_values = input;
        self
    }
    /// <p>Indicates when parameter updates are applied.</p>
    /// <p>Can be <code>immediate</code> or <code>pending-reboot</code>.</p>
    pub fn apply_method(mut self, input: impl Into<std::string::String>) -> Self {
        self.apply_method = Some(input.into());
        self
    }
    /// <p>Indicates when parameter updates are applied.</p>
    /// <p>Can be <code>immediate</code> or <code>pending-reboot</code>.</p>
    pub fn set_apply_method(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.apply_method = input;
        self
    }
    /// <p>Specifies the engine-specific parameter type.</p>
    pub fn apply_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.apply_type = Some(input.into());
        self
    }
    /// <p>Specifies the engine-specific parameter type.</p>
    pub fn set_apply_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.apply_type = input;
        self
    }
    /// <p>Specifies the valid data type for the parameter.</p>
    pub fn data_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_type = Some(input.into());
        self
    }
    /// <p>Specifies the valid data type for the parameter.</p>
    pub fn set_data_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>Provides a description of the parameter.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Provides a description of the parameter.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A Boolean value indicating whether the parameter can be modified.</p>
    pub fn is_modifiable(mut self, input: bool) -> Self {
        self.is_modifiable = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether the parameter can be modified.</p>
    pub fn set_is_modifiable(mut self, input: std::option::Option<bool>) -> Self {
        self.is_modifiable = input;
        self
    }
    /// <p>Specifies the name of the parameter.</p>
    pub fn parameter_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_name = Some(input.into());
        self
    }
    /// <p>Specifies the name of the parameter.</p>
    pub fn set_parameter_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameter_name = input;
        self
    }
    /// <p>Specifies the value of the parameter.</p>
    pub fn parameter_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_value = Some(input.into());
        self
    }
    /// <p>Specifies the value of the parameter.</p>
    pub fn set_parameter_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameter_value = input;
        self
    }
    /// Consumes the builder and constructs a [`RelationalDatabaseParameter`](crate::types::RelationalDatabaseParameter).
    pub fn build(self) -> crate::types::RelationalDatabaseParameter {
        crate::types::RelationalDatabaseParameter {
            allowed_values: self.allowed_values,
            apply_method: self.apply_method,
            apply_type: self.apply_type,
            data_type: self.data_type,
            description: self.description,
            is_modifiable: self.is_modifiable,
            parameter_name: self.parameter_name,
            parameter_value: self.parameter_value,
        }
    }
}
