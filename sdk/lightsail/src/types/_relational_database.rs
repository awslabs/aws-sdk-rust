// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a database.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RelationalDatabase {
    /// <p>The unique name of the database resource in Lightsail.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the database.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    #[doc(hidden)]
    pub support_code: std::option::Option<std::string::String>,
    /// <p>The timestamp when the database was created. Formatted in Unix time.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Region name and Availability Zone where the database is located.</p>
    #[doc(hidden)]
    pub location: std::option::Option<crate::types::ResourceLocation>,
    /// <p>The Lightsail resource type for the database (for example, <code>RelationalDatabase</code>).</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The blueprint ID for the database. A blueprint describes the major engine version of a database.</p>
    #[doc(hidden)]
    pub relational_database_blueprint_id: std::option::Option<std::string::String>,
    /// <p>The bundle ID for the database. A bundle describes the performance specifications for your database.</p>
    #[doc(hidden)]
    pub relational_database_bundle_id: std::option::Option<std::string::String>,
    /// <p>The name of the master database created when the Lightsail database resource is created.</p>
    #[doc(hidden)]
    pub master_database_name: std::option::Option<std::string::String>,
    /// <p>Describes the hardware of the database.</p>
    #[doc(hidden)]
    pub hardware: std::option::Option<crate::types::RelationalDatabaseHardware>,
    /// <p>Describes the current state of the database.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
    /// <p>Describes the secondary Availability Zone of a high availability database.</p>
    /// <p>The secondary database is used for failover support of a high availability database.</p>
    #[doc(hidden)]
    pub secondary_availability_zone: std::option::Option<std::string::String>,
    /// <p>A Boolean value indicating whether automated backup retention is enabled for the database.</p>
    #[doc(hidden)]
    pub backup_retention_enabled: std::option::Option<bool>,
    /// <p>Describes pending database value modifications.</p>
    #[doc(hidden)]
    pub pending_modified_values:
        std::option::Option<crate::types::PendingModifiedRelationalDatabaseValues>,
    /// <p>The database software (for example, <code>MySQL</code>).</p>
    #[doc(hidden)]
    pub engine: std::option::Option<std::string::String>,
    /// <p>The database engine version (for example, <code>5.7.23</code>).</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The latest point in time to which the database can be restored. Formatted in Unix time.</p>
    #[doc(hidden)]
    pub latest_restorable_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The master user name of the database.</p>
    #[doc(hidden)]
    pub master_username: std::option::Option<std::string::String>,
    /// <p>The status of parameter updates for the database.</p>
    #[doc(hidden)]
    pub parameter_apply_status: std::option::Option<std::string::String>,
    /// <p>The daily time range during which automated backups are created for the database (for example, <code>16:00-16:30</code>).</p>
    #[doc(hidden)]
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p>The weekly time range during which system maintenance can occur on the database.</p>
    /// <p>In the format <code>ddd:hh24:mi-ddd:hh24:mi</code>. For example, <code>Tue:17:00-Tue:17:30</code>.</p>
    #[doc(hidden)]
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>A Boolean value indicating whether the database is publicly accessible.</p>
    #[doc(hidden)]
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>The master endpoint for the database.</p>
    #[doc(hidden)]
    pub master_endpoint: std::option::Option<crate::types::RelationalDatabaseEndpoint>,
    /// <p>Describes the pending maintenance actions for the database.</p>
    #[doc(hidden)]
    pub pending_maintenance_actions:
        std::option::Option<std::vec::Vec<crate::types::PendingMaintenanceAction>>,
    /// <p>The certificate associated with the database.</p>
    #[doc(hidden)]
    pub ca_certificate_identifier: std::option::Option<std::string::String>,
}
impl RelationalDatabase {
    /// <p>The unique name of the database resource in Lightsail.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the database.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn support_code(&self) -> std::option::Option<&str> {
        self.support_code.as_deref()
    }
    /// <p>The timestamp when the database was created. Formatted in Unix time.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Region name and Availability Zone where the database is located.</p>
    pub fn location(&self) -> std::option::Option<&crate::types::ResourceLocation> {
        self.location.as_ref()
    }
    /// <p>The Lightsail resource type for the database (for example, <code>RelationalDatabase</code>).</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The blueprint ID for the database. A blueprint describes the major engine version of a database.</p>
    pub fn relational_database_blueprint_id(&self) -> std::option::Option<&str> {
        self.relational_database_blueprint_id.as_deref()
    }
    /// <p>The bundle ID for the database. A bundle describes the performance specifications for your database.</p>
    pub fn relational_database_bundle_id(&self) -> std::option::Option<&str> {
        self.relational_database_bundle_id.as_deref()
    }
    /// <p>The name of the master database created when the Lightsail database resource is created.</p>
    pub fn master_database_name(&self) -> std::option::Option<&str> {
        self.master_database_name.as_deref()
    }
    /// <p>Describes the hardware of the database.</p>
    pub fn hardware(&self) -> std::option::Option<&crate::types::RelationalDatabaseHardware> {
        self.hardware.as_ref()
    }
    /// <p>Describes the current state of the database.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>Describes the secondary Availability Zone of a high availability database.</p>
    /// <p>The secondary database is used for failover support of a high availability database.</p>
    pub fn secondary_availability_zone(&self) -> std::option::Option<&str> {
        self.secondary_availability_zone.as_deref()
    }
    /// <p>A Boolean value indicating whether automated backup retention is enabled for the database.</p>
    pub fn backup_retention_enabled(&self) -> std::option::Option<bool> {
        self.backup_retention_enabled
    }
    /// <p>Describes pending database value modifications.</p>
    pub fn pending_modified_values(
        &self,
    ) -> std::option::Option<&crate::types::PendingModifiedRelationalDatabaseValues> {
        self.pending_modified_values.as_ref()
    }
    /// <p>The database software (for example, <code>MySQL</code>).</p>
    pub fn engine(&self) -> std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The database engine version (for example, <code>5.7.23</code>).</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The latest point in time to which the database can be restored. Formatted in Unix time.</p>
    pub fn latest_restorable_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.latest_restorable_time.as_ref()
    }
    /// <p>The master user name of the database.</p>
    pub fn master_username(&self) -> std::option::Option<&str> {
        self.master_username.as_deref()
    }
    /// <p>The status of parameter updates for the database.</p>
    pub fn parameter_apply_status(&self) -> std::option::Option<&str> {
        self.parameter_apply_status.as_deref()
    }
    /// <p>The daily time range during which automated backups are created for the database (for example, <code>16:00-16:30</code>).</p>
    pub fn preferred_backup_window(&self) -> std::option::Option<&str> {
        self.preferred_backup_window.as_deref()
    }
    /// <p>The weekly time range during which system maintenance can occur on the database.</p>
    /// <p>In the format <code>ddd:hh24:mi-ddd:hh24:mi</code>. For example, <code>Tue:17:00-Tue:17:30</code>.</p>
    pub fn preferred_maintenance_window(&self) -> std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>A Boolean value indicating whether the database is publicly accessible.</p>
    pub fn publicly_accessible(&self) -> std::option::Option<bool> {
        self.publicly_accessible
    }
    /// <p>The master endpoint for the database.</p>
    pub fn master_endpoint(
        &self,
    ) -> std::option::Option<&crate::types::RelationalDatabaseEndpoint> {
        self.master_endpoint.as_ref()
    }
    /// <p>Describes the pending maintenance actions for the database.</p>
    pub fn pending_maintenance_actions(
        &self,
    ) -> std::option::Option<&[crate::types::PendingMaintenanceAction]> {
        self.pending_maintenance_actions.as_deref()
    }
    /// <p>The certificate associated with the database.</p>
    pub fn ca_certificate_identifier(&self) -> std::option::Option<&str> {
        self.ca_certificate_identifier.as_deref()
    }
}
impl RelationalDatabase {
    /// Creates a new builder-style object to manufacture [`RelationalDatabase`](crate::types::RelationalDatabase).
    pub fn builder() -> crate::types::builders::RelationalDatabaseBuilder {
        crate::types::builders::RelationalDatabaseBuilder::default()
    }
}

/// A builder for [`RelationalDatabase`](crate::types::RelationalDatabase).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RelationalDatabaseBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) support_code: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) location: std::option::Option<crate::types::ResourceLocation>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) relational_database_blueprint_id: std::option::Option<std::string::String>,
    pub(crate) relational_database_bundle_id: std::option::Option<std::string::String>,
    pub(crate) master_database_name: std::option::Option<std::string::String>,
    pub(crate) hardware: std::option::Option<crate::types::RelationalDatabaseHardware>,
    pub(crate) state: std::option::Option<std::string::String>,
    pub(crate) secondary_availability_zone: std::option::Option<std::string::String>,
    pub(crate) backup_retention_enabled: std::option::Option<bool>,
    pub(crate) pending_modified_values:
        std::option::Option<crate::types::PendingModifiedRelationalDatabaseValues>,
    pub(crate) engine: std::option::Option<std::string::String>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) latest_restorable_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) master_username: std::option::Option<std::string::String>,
    pub(crate) parameter_apply_status: std::option::Option<std::string::String>,
    pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
    pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
    pub(crate) publicly_accessible: std::option::Option<bool>,
    pub(crate) master_endpoint: std::option::Option<crate::types::RelationalDatabaseEndpoint>,
    pub(crate) pending_maintenance_actions:
        std::option::Option<std::vec::Vec<crate::types::PendingMaintenanceAction>>,
    pub(crate) ca_certificate_identifier: std::option::Option<std::string::String>,
}
impl RelationalDatabaseBuilder {
    /// <p>The unique name of the database resource in Lightsail.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The unique name of the database resource in Lightsail.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the database.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the database.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn support_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_code = Some(input.into());
        self
    }
    /// <p>The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn set_support_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.support_code = input;
        self
    }
    /// <p>The timestamp when the database was created. Formatted in Unix time.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The timestamp when the database was created. Formatted in Unix time.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Region name and Availability Zone where the database is located.</p>
    pub fn location(mut self, input: crate::types::ResourceLocation) -> Self {
        self.location = Some(input);
        self
    }
    /// <p>The Region name and Availability Zone where the database is located.</p>
    pub fn set_location(
        mut self,
        input: std::option::Option<crate::types::ResourceLocation>,
    ) -> Self {
        self.location = input;
        self
    }
    /// <p>The Lightsail resource type for the database (for example, <code>RelationalDatabase</code>).</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>The Lightsail resource type for the database (for example, <code>RelationalDatabase</code>).</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The blueprint ID for the database. A blueprint describes the major engine version of a database.</p>
    pub fn relational_database_blueprint_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.relational_database_blueprint_id = Some(input.into());
        self
    }
    /// <p>The blueprint ID for the database. A blueprint describes the major engine version of a database.</p>
    pub fn set_relational_database_blueprint_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.relational_database_blueprint_id = input;
        self
    }
    /// <p>The bundle ID for the database. A bundle describes the performance specifications for your database.</p>
    pub fn relational_database_bundle_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.relational_database_bundle_id = Some(input.into());
        self
    }
    /// <p>The bundle ID for the database. A bundle describes the performance specifications for your database.</p>
    pub fn set_relational_database_bundle_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.relational_database_bundle_id = input;
        self
    }
    /// <p>The name of the master database created when the Lightsail database resource is created.</p>
    pub fn master_database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_database_name = Some(input.into());
        self
    }
    /// <p>The name of the master database created when the Lightsail database resource is created.</p>
    pub fn set_master_database_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.master_database_name = input;
        self
    }
    /// <p>Describes the hardware of the database.</p>
    pub fn hardware(mut self, input: crate::types::RelationalDatabaseHardware) -> Self {
        self.hardware = Some(input);
        self
    }
    /// <p>Describes the hardware of the database.</p>
    pub fn set_hardware(
        mut self,
        input: std::option::Option<crate::types::RelationalDatabaseHardware>,
    ) -> Self {
        self.hardware = input;
        self
    }
    /// <p>Describes the current state of the database.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>Describes the current state of the database.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>Describes the secondary Availability Zone of a high availability database.</p>
    /// <p>The secondary database is used for failover support of a high availability database.</p>
    pub fn secondary_availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.secondary_availability_zone = Some(input.into());
        self
    }
    /// <p>Describes the secondary Availability Zone of a high availability database.</p>
    /// <p>The secondary database is used for failover support of a high availability database.</p>
    pub fn set_secondary_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.secondary_availability_zone = input;
        self
    }
    /// <p>A Boolean value indicating whether automated backup retention is enabled for the database.</p>
    pub fn backup_retention_enabled(mut self, input: bool) -> Self {
        self.backup_retention_enabled = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether automated backup retention is enabled for the database.</p>
    pub fn set_backup_retention_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.backup_retention_enabled = input;
        self
    }
    /// <p>Describes pending database value modifications.</p>
    pub fn pending_modified_values(
        mut self,
        input: crate::types::PendingModifiedRelationalDatabaseValues,
    ) -> Self {
        self.pending_modified_values = Some(input);
        self
    }
    /// <p>Describes pending database value modifications.</p>
    pub fn set_pending_modified_values(
        mut self,
        input: std::option::Option<crate::types::PendingModifiedRelationalDatabaseValues>,
    ) -> Self {
        self.pending_modified_values = input;
        self
    }
    /// <p>The database software (for example, <code>MySQL</code>).</p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine = Some(input.into());
        self
    }
    /// <p>The database software (for example, <code>MySQL</code>).</p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The database engine version (for example, <code>5.7.23</code>).</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The database engine version (for example, <code>5.7.23</code>).</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The latest point in time to which the database can be restored. Formatted in Unix time.</p>
    pub fn latest_restorable_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.latest_restorable_time = Some(input);
        self
    }
    /// <p>The latest point in time to which the database can be restored. Formatted in Unix time.</p>
    pub fn set_latest_restorable_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.latest_restorable_time = input;
        self
    }
    /// <p>The master user name of the database.</p>
    pub fn master_username(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_username = Some(input.into());
        self
    }
    /// <p>The master user name of the database.</p>
    pub fn set_master_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.master_username = input;
        self
    }
    /// <p>The status of parameter updates for the database.</p>
    pub fn parameter_apply_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_apply_status = Some(input.into());
        self
    }
    /// <p>The status of parameter updates for the database.</p>
    pub fn set_parameter_apply_status(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.parameter_apply_status = input;
        self
    }
    /// <p>The daily time range during which automated backups are created for the database (for example, <code>16:00-16:30</code>).</p>
    pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_backup_window = Some(input.into());
        self
    }
    /// <p>The daily time range during which automated backups are created for the database (for example, <code>16:00-16:30</code>).</p>
    pub fn set_preferred_backup_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_backup_window = input;
        self
    }
    /// <p>The weekly time range during which system maintenance can occur on the database.</p>
    /// <p>In the format <code>ddd:hh24:mi-ddd:hh24:mi</code>. For example, <code>Tue:17:00-Tue:17:30</code>.</p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_maintenance_window = Some(input.into());
        self
    }
    /// <p>The weekly time range during which system maintenance can occur on the database.</p>
    /// <p>In the format <code>ddd:hh24:mi-ddd:hh24:mi</code>. For example, <code>Tue:17:00-Tue:17:30</code>.</p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>A Boolean value indicating whether the database is publicly accessible.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether the database is publicly accessible.</p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>The master endpoint for the database.</p>
    pub fn master_endpoint(mut self, input: crate::types::RelationalDatabaseEndpoint) -> Self {
        self.master_endpoint = Some(input);
        self
    }
    /// <p>The master endpoint for the database.</p>
    pub fn set_master_endpoint(
        mut self,
        input: std::option::Option<crate::types::RelationalDatabaseEndpoint>,
    ) -> Self {
        self.master_endpoint = input;
        self
    }
    /// Appends an item to `pending_maintenance_actions`.
    ///
    /// To override the contents of this collection use [`set_pending_maintenance_actions`](Self::set_pending_maintenance_actions).
    ///
    /// <p>Describes the pending maintenance actions for the database.</p>
    pub fn pending_maintenance_actions(
        mut self,
        input: crate::types::PendingMaintenanceAction,
    ) -> Self {
        let mut v = self.pending_maintenance_actions.unwrap_or_default();
        v.push(input);
        self.pending_maintenance_actions = Some(v);
        self
    }
    /// <p>Describes the pending maintenance actions for the database.</p>
    pub fn set_pending_maintenance_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PendingMaintenanceAction>>,
    ) -> Self {
        self.pending_maintenance_actions = input;
        self
    }
    /// <p>The certificate associated with the database.</p>
    pub fn ca_certificate_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.ca_certificate_identifier = Some(input.into());
        self
    }
    /// <p>The certificate associated with the database.</p>
    pub fn set_ca_certificate_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ca_certificate_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`RelationalDatabase`](crate::types::RelationalDatabase).
    pub fn build(self) -> crate::types::RelationalDatabase {
        crate::types::RelationalDatabase {
            name: self.name,
            arn: self.arn,
            support_code: self.support_code,
            created_at: self.created_at,
            location: self.location,
            resource_type: self.resource_type,
            tags: self.tags,
            relational_database_blueprint_id: self.relational_database_blueprint_id,
            relational_database_bundle_id: self.relational_database_bundle_id,
            master_database_name: self.master_database_name,
            hardware: self.hardware,
            state: self.state,
            secondary_availability_zone: self.secondary_availability_zone,
            backup_retention_enabled: self.backup_retention_enabled,
            pending_modified_values: self.pending_modified_values,
            engine: self.engine,
            engine_version: self.engine_version,
            latest_restorable_time: self.latest_restorable_time,
            master_username: self.master_username,
            parameter_apply_status: self.parameter_apply_status,
            preferred_backup_window: self.preferred_backup_window,
            preferred_maintenance_window: self.preferred_maintenance_window,
            publicly_accessible: self.publicly_accessible,
            master_endpoint: self.master_endpoint,
            pending_maintenance_actions: self.pending_maintenance_actions,
            ca_certificate_identifier: self.ca_certificate_identifier,
        }
    }
}
