// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for gaining temporary access to one of your Amazon Lightsail instances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceAccessDetails {
    /// <p>For SSH access, the public key to use when accessing your instance For OpenSSH clients (e.g., command line SSH), you should save this value to <code>tempkey-cert.pub</code>.</p>
    #[doc(hidden)]
    pub cert_key: std::option::Option<std::string::String>,
    /// <p>For SSH access, the date on which the temporary keys expire.</p>
    #[doc(hidden)]
    pub expires_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The public IP address of the Amazon Lightsail instance.</p>
    #[doc(hidden)]
    pub ip_address: std::option::Option<std::string::String>,
    /// <p>For RDP access, the password for your Amazon Lightsail instance. Password will be an empty string if the password for your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready.</p> <note>
    /// <p>If you create an instance using any key pair other than the default (<code>LightsailDefaultKeyPair</code>), <code>password</code> will always be an empty string.</p>
    /// <p>If you change the Administrator password on the instance, Lightsail will continue to return the original password value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default.</p>
    /// </note>
    #[doc(hidden)]
    pub password: std::option::Option<std::string::String>,
    /// <p>For a Windows Server-based instance, an object with the data you can use to retrieve your password. This is only needed if <code>password</code> is empty and the instance is not new (and therefore the password is not ready yet). When you create an instance, it can take up to 15 minutes for the instance to be ready.</p>
    #[doc(hidden)]
    pub password_data: std::option::Option<crate::types::PasswordData>,
    /// <p>For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH), you should save this value to <code>tempkey</code>).</p>
    #[doc(hidden)]
    pub private_key: std::option::Option<std::string::String>,
    /// <p>The protocol for these Amazon Lightsail instance access details.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<crate::types::InstanceAccessProtocol>,
    /// <p>The name of this Amazon Lightsail instance.</p>
    #[doc(hidden)]
    pub instance_name: std::option::Option<std::string::String>,
    /// <p>The user name to use when logging in to the Amazon Lightsail instance.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p>Describes the public SSH host keys or the RDP certificate.</p>
    #[doc(hidden)]
    pub host_keys: std::option::Option<std::vec::Vec<crate::types::HostKeyAttributes>>,
}
impl InstanceAccessDetails {
    /// <p>For SSH access, the public key to use when accessing your instance For OpenSSH clients (e.g., command line SSH), you should save this value to <code>tempkey-cert.pub</code>.</p>
    pub fn cert_key(&self) -> std::option::Option<&str> {
        self.cert_key.as_deref()
    }
    /// <p>For SSH access, the date on which the temporary keys expire.</p>
    pub fn expires_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expires_at.as_ref()
    }
    /// <p>The public IP address of the Amazon Lightsail instance.</p>
    pub fn ip_address(&self) -> std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>For RDP access, the password for your Amazon Lightsail instance. Password will be an empty string if the password for your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready.</p> <note>
    /// <p>If you create an instance using any key pair other than the default (<code>LightsailDefaultKeyPair</code>), <code>password</code> will always be an empty string.</p>
    /// <p>If you change the Administrator password on the instance, Lightsail will continue to return the original password value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default.</p>
    /// </note>
    pub fn password(&self) -> std::option::Option<&str> {
        self.password.as_deref()
    }
    /// <p>For a Windows Server-based instance, an object with the data you can use to retrieve your password. This is only needed if <code>password</code> is empty and the instance is not new (and therefore the password is not ready yet). When you create an instance, it can take up to 15 minutes for the instance to be ready.</p>
    pub fn password_data(&self) -> std::option::Option<&crate::types::PasswordData> {
        self.password_data.as_ref()
    }
    /// <p>For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH), you should save this value to <code>tempkey</code>).</p>
    pub fn private_key(&self) -> std::option::Option<&str> {
        self.private_key.as_deref()
    }
    /// <p>The protocol for these Amazon Lightsail instance access details.</p>
    pub fn protocol(&self) -> std::option::Option<&crate::types::InstanceAccessProtocol> {
        self.protocol.as_ref()
    }
    /// <p>The name of this Amazon Lightsail instance.</p>
    pub fn instance_name(&self) -> std::option::Option<&str> {
        self.instance_name.as_deref()
    }
    /// <p>The user name to use when logging in to the Amazon Lightsail instance.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>Describes the public SSH host keys or the RDP certificate.</p>
    pub fn host_keys(&self) -> std::option::Option<&[crate::types::HostKeyAttributes]> {
        self.host_keys.as_deref()
    }
}
impl InstanceAccessDetails {
    /// Creates a new builder-style object to manufacture [`InstanceAccessDetails`](crate::types::InstanceAccessDetails).
    pub fn builder() -> crate::types::builders::InstanceAccessDetailsBuilder {
        crate::types::builders::InstanceAccessDetailsBuilder::default()
    }
}

/// A builder for [`InstanceAccessDetails`](crate::types::InstanceAccessDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceAccessDetailsBuilder {
    pub(crate) cert_key: std::option::Option<std::string::String>,
    pub(crate) expires_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) ip_address: std::option::Option<std::string::String>,
    pub(crate) password: std::option::Option<std::string::String>,
    pub(crate) password_data: std::option::Option<crate::types::PasswordData>,
    pub(crate) private_key: std::option::Option<std::string::String>,
    pub(crate) protocol: std::option::Option<crate::types::InstanceAccessProtocol>,
    pub(crate) instance_name: std::option::Option<std::string::String>,
    pub(crate) username: std::option::Option<std::string::String>,
    pub(crate) host_keys: std::option::Option<std::vec::Vec<crate::types::HostKeyAttributes>>,
}
impl InstanceAccessDetailsBuilder {
    /// <p>For SSH access, the public key to use when accessing your instance For OpenSSH clients (e.g., command line SSH), you should save this value to <code>tempkey-cert.pub</code>.</p>
    pub fn cert_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.cert_key = Some(input.into());
        self
    }
    /// <p>For SSH access, the public key to use when accessing your instance For OpenSSH clients (e.g., command line SSH), you should save this value to <code>tempkey-cert.pub</code>.</p>
    pub fn set_cert_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cert_key = input;
        self
    }
    /// <p>For SSH access, the date on which the temporary keys expire.</p>
    pub fn expires_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expires_at = Some(input);
        self
    }
    /// <p>For SSH access, the date on which the temporary keys expire.</p>
    pub fn set_expires_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.expires_at = input;
        self
    }
    /// <p>The public IP address of the Amazon Lightsail instance.</p>
    pub fn ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip_address = Some(input.into());
        self
    }
    /// <p>The public IP address of the Amazon Lightsail instance.</p>
    pub fn set_ip_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>For RDP access, the password for your Amazon Lightsail instance. Password will be an empty string if the password for your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready.</p> <note>
    /// <p>If you create an instance using any key pair other than the default (<code>LightsailDefaultKeyPair</code>), <code>password</code> will always be an empty string.</p>
    /// <p>If you change the Administrator password on the instance, Lightsail will continue to return the original password value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default.</p>
    /// </note>
    pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
        self.password = Some(input.into());
        self
    }
    /// <p>For RDP access, the password for your Amazon Lightsail instance. Password will be an empty string if the password for your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready.</p> <note>
    /// <p>If you create an instance using any key pair other than the default (<code>LightsailDefaultKeyPair</code>), <code>password</code> will always be an empty string.</p>
    /// <p>If you change the Administrator password on the instance, Lightsail will continue to return the original password value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default.</p>
    /// </note>
    pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password = input;
        self
    }
    /// <p>For a Windows Server-based instance, an object with the data you can use to retrieve your password. This is only needed if <code>password</code> is empty and the instance is not new (and therefore the password is not ready yet). When you create an instance, it can take up to 15 minutes for the instance to be ready.</p>
    pub fn password_data(mut self, input: crate::types::PasswordData) -> Self {
        self.password_data = Some(input);
        self
    }
    /// <p>For a Windows Server-based instance, an object with the data you can use to retrieve your password. This is only needed if <code>password</code> is empty and the instance is not new (and therefore the password is not ready yet). When you create an instance, it can take up to 15 minutes for the instance to be ready.</p>
    pub fn set_password_data(
        mut self,
        input: std::option::Option<crate::types::PasswordData>,
    ) -> Self {
        self.password_data = input;
        self
    }
    /// <p>For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH), you should save this value to <code>tempkey</code>).</p>
    pub fn private_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_key = Some(input.into());
        self
    }
    /// <p>For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH), you should save this value to <code>tempkey</code>).</p>
    pub fn set_private_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.private_key = input;
        self
    }
    /// <p>The protocol for these Amazon Lightsail instance access details.</p>
    pub fn protocol(mut self, input: crate::types::InstanceAccessProtocol) -> Self {
        self.protocol = Some(input);
        self
    }
    /// <p>The protocol for these Amazon Lightsail instance access details.</p>
    pub fn set_protocol(
        mut self,
        input: std::option::Option<crate::types::InstanceAccessProtocol>,
    ) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The name of this Amazon Lightsail instance.</p>
    pub fn instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_name = Some(input.into());
        self
    }
    /// <p>The name of this Amazon Lightsail instance.</p>
    pub fn set_instance_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_name = input;
        self
    }
    /// <p>The user name to use when logging in to the Amazon Lightsail instance.</p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// <p>The user name to use when logging in to the Amazon Lightsail instance.</p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// Appends an item to `host_keys`.
    ///
    /// To override the contents of this collection use [`set_host_keys`](Self::set_host_keys).
    ///
    /// <p>Describes the public SSH host keys or the RDP certificate.</p>
    pub fn host_keys(mut self, input: crate::types::HostKeyAttributes) -> Self {
        let mut v = self.host_keys.unwrap_or_default();
        v.push(input);
        self.host_keys = Some(v);
        self
    }
    /// <p>Describes the public SSH host keys or the RDP certificate.</p>
    pub fn set_host_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HostKeyAttributes>>,
    ) -> Self {
        self.host_keys = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceAccessDetails`](crate::types::InstanceAccessDetails).
    pub fn build(self) -> crate::types::InstanceAccessDetails {
        crate::types::InstanceAccessDetails {
            cert_key: self.cert_key,
            expires_at: self.expires_at,
            ip_address: self.ip_address,
            password: self.password,
            password_data: self.password_data,
            private_key: self.private_key,
            protocol: self.protocol,
            instance_name: self.instance_name,
            username: self.username,
            host_keys: self.host_keys,
        }
    }
}
