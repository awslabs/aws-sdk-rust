// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a database image, or blueprint. A blueprint describes the major engine version of a database.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RelationalDatabaseBlueprint {
    /// <p>The ID for the database blueprint.</p>
    #[doc(hidden)]
    pub blueprint_id: std::option::Option<std::string::String>,
    /// <p>The database software of the database blueprint (for example, <code>MySQL</code>).</p>
    #[doc(hidden)]
    pub engine: std::option::Option<crate::types::RelationalDatabaseEngine>,
    /// <p>The database engine version for the database blueprint (for example, <code>5.7.23</code>).</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The description of the database engine for the database blueprint.</p>
    #[doc(hidden)]
    pub engine_description: std::option::Option<std::string::String>,
    /// <p>The description of the database engine version for the database blueprint.</p>
    #[doc(hidden)]
    pub engine_version_description: std::option::Option<std::string::String>,
    /// <p>A Boolean value indicating whether the engine version is the default for the database blueprint.</p>
    #[doc(hidden)]
    pub is_engine_default: std::option::Option<bool>,
}
impl RelationalDatabaseBlueprint {
    /// <p>The ID for the database blueprint.</p>
    pub fn blueprint_id(&self) -> std::option::Option<&str> {
        self.blueprint_id.as_deref()
    }
    /// <p>The database software of the database blueprint (for example, <code>MySQL</code>).</p>
    pub fn engine(&self) -> std::option::Option<&crate::types::RelationalDatabaseEngine> {
        self.engine.as_ref()
    }
    /// <p>The database engine version for the database blueprint (for example, <code>5.7.23</code>).</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The description of the database engine for the database blueprint.</p>
    pub fn engine_description(&self) -> std::option::Option<&str> {
        self.engine_description.as_deref()
    }
    /// <p>The description of the database engine version for the database blueprint.</p>
    pub fn engine_version_description(&self) -> std::option::Option<&str> {
        self.engine_version_description.as_deref()
    }
    /// <p>A Boolean value indicating whether the engine version is the default for the database blueprint.</p>
    pub fn is_engine_default(&self) -> std::option::Option<bool> {
        self.is_engine_default
    }
}
impl RelationalDatabaseBlueprint {
    /// Creates a new builder-style object to manufacture [`RelationalDatabaseBlueprint`](crate::types::RelationalDatabaseBlueprint).
    pub fn builder() -> crate::types::builders::RelationalDatabaseBlueprintBuilder {
        crate::types::builders::RelationalDatabaseBlueprintBuilder::default()
    }
}

/// A builder for [`RelationalDatabaseBlueprint`](crate::types::RelationalDatabaseBlueprint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RelationalDatabaseBlueprintBuilder {
    pub(crate) blueprint_id: std::option::Option<std::string::String>,
    pub(crate) engine: std::option::Option<crate::types::RelationalDatabaseEngine>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) engine_description: std::option::Option<std::string::String>,
    pub(crate) engine_version_description: std::option::Option<std::string::String>,
    pub(crate) is_engine_default: std::option::Option<bool>,
}
impl RelationalDatabaseBlueprintBuilder {
    /// <p>The ID for the database blueprint.</p>
    pub fn blueprint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.blueprint_id = Some(input.into());
        self
    }
    /// <p>The ID for the database blueprint.</p>
    pub fn set_blueprint_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.blueprint_id = input;
        self
    }
    /// <p>The database software of the database blueprint (for example, <code>MySQL</code>).</p>
    pub fn engine(mut self, input: crate::types::RelationalDatabaseEngine) -> Self {
        self.engine = Some(input);
        self
    }
    /// <p>The database software of the database blueprint (for example, <code>MySQL</code>).</p>
    pub fn set_engine(
        mut self,
        input: std::option::Option<crate::types::RelationalDatabaseEngine>,
    ) -> Self {
        self.engine = input;
        self
    }
    /// <p>The database engine version for the database blueprint (for example, <code>5.7.23</code>).</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The database engine version for the database blueprint (for example, <code>5.7.23</code>).</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The description of the database engine for the database blueprint.</p>
    pub fn engine_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_description = Some(input.into());
        self
    }
    /// <p>The description of the database engine for the database blueprint.</p>
    pub fn set_engine_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.engine_description = input;
        self
    }
    /// <p>The description of the database engine version for the database blueprint.</p>
    pub fn engine_version_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version_description = Some(input.into());
        self
    }
    /// <p>The description of the database engine version for the database blueprint.</p>
    pub fn set_engine_version_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.engine_version_description = input;
        self
    }
    /// <p>A Boolean value indicating whether the engine version is the default for the database blueprint.</p>
    pub fn is_engine_default(mut self, input: bool) -> Self {
        self.is_engine_default = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether the engine version is the default for the database blueprint.</p>
    pub fn set_is_engine_default(mut self, input: std::option::Option<bool>) -> Self {
        self.is_engine_default = input;
        self
    }
    /// Consumes the builder and constructs a [`RelationalDatabaseBlueprint`](crate::types::RelationalDatabaseBlueprint).
    pub fn build(self) -> crate::types::RelationalDatabaseBlueprint {
        crate::types::RelationalDatabaseBlueprint {
            blueprint_id: self.blueprint_id,
            engine: self.engine,
            engine_version: self.engine_version,
            engine_description: self.engine_description,
            engine_version_description: self.engine_version_description,
            is_engine_default: self.is_engine_default,
        }
    }
}
