// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Amazon Lightsail bucket.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Bucket {
    /// <p>The Lightsail resource type of the bucket (for example, <code>Bucket</code>).</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>An object that describes the access rules of the bucket.</p>
    #[doc(hidden)]
    pub access_rules: std::option::Option<crate::types::AccessRules>,
    /// <p>The Amazon Resource Name (ARN) of the bucket.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the bundle currently applied to the bucket.</p>
    /// <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change the bundle of a bucket.</p>
    #[doc(hidden)]
    pub bundle_id: std::option::Option<std::string::String>,
    /// <p>The timestamp when the distribution was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The URL of the bucket.</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// <p>An object that describes the location of the bucket, such as the Amazon Web Services Region and Availability Zone.</p>
    #[doc(hidden)]
    pub location: std::option::Option<crate::types::ResourceLocation>,
    /// <p>The name of the bucket.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The support code for a bucket. Include this code in your email to support when you have questions about a Lightsail bucket. This code enables our support team to look up your Lightsail information more easily.</p>
    #[doc(hidden)]
    pub support_code: std::option::Option<std::string::String>,
    /// <p>The tag keys and optional values for the bucket. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Tags in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>Indicates whether object versioning is enabled for the bucket.</p>
    /// <p>The following options can be configured:</p>
    /// <ul>
    /// <li> <p> <code>Enabled</code> - Object versioning is enabled.</p> </li>
    /// <li> <p> <code>Suspended</code> - Object versioning was previously enabled but is currently suspended. Existing object versions are retained.</p> </li>
    /// <li> <p> <code>NeverEnabled</code> - Object versioning has never been enabled.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub object_versioning: std::option::Option<std::string::String>,
    /// <p>Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle.</p>
    /// <p>You can update a bucket's bundle only one time within a monthly Amazon Web Services billing cycle.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change a bucket's bundle.</p>
    #[doc(hidden)]
    pub able_to_update_bundle: std::option::Option<bool>,
    /// <p>An array of strings that specify the Amazon Web Services account IDs that have read-only access to the bucket.</p>
    #[doc(hidden)]
    pub readonly_access_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An array of objects that describe Lightsail instances that have access to the bucket.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html">SetResourceAccessForBucket</a> action to update the instances that have access to a bucket.</p>
    #[doc(hidden)]
    pub resources_receiving_access:
        std::option::Option<std::vec::Vec<crate::types::ResourceReceivingAccess>>,
    /// <p>An object that describes the state of the bucket.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::BucketState>,
    /// <p>An object that describes the access log configuration for the bucket.</p>
    #[doc(hidden)]
    pub access_log_config: std::option::Option<crate::types::BucketAccessLogConfig>,
}
impl Bucket {
    /// <p>The Lightsail resource type of the bucket (for example, <code>Bucket</code>).</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>An object that describes the access rules of the bucket.</p>
    pub fn access_rules(&self) -> std::option::Option<&crate::types::AccessRules> {
        self.access_rules.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the bucket.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the bundle currently applied to the bucket.</p>
    /// <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change the bundle of a bucket.</p>
    pub fn bundle_id(&self) -> std::option::Option<&str> {
        self.bundle_id.as_deref()
    }
    /// <p>The timestamp when the distribution was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The URL of the bucket.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>An object that describes the location of the bucket, such as the Amazon Web Services Region and Availability Zone.</p>
    pub fn location(&self) -> std::option::Option<&crate::types::ResourceLocation> {
        self.location.as_ref()
    }
    /// <p>The name of the bucket.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The support code for a bucket. Include this code in your email to support when you have questions about a Lightsail bucket. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn support_code(&self) -> std::option::Option<&str> {
        self.support_code.as_deref()
    }
    /// <p>The tag keys and optional values for the bucket. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Tags in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>Indicates whether object versioning is enabled for the bucket.</p>
    /// <p>The following options can be configured:</p>
    /// <ul>
    /// <li> <p> <code>Enabled</code> - Object versioning is enabled.</p> </li>
    /// <li> <p> <code>Suspended</code> - Object versioning was previously enabled but is currently suspended. Existing object versions are retained.</p> </li>
    /// <li> <p> <code>NeverEnabled</code> - Object versioning has never been enabled.</p> </li>
    /// </ul>
    pub fn object_versioning(&self) -> std::option::Option<&str> {
        self.object_versioning.as_deref()
    }
    /// <p>Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle.</p>
    /// <p>You can update a bucket's bundle only one time within a monthly Amazon Web Services billing cycle.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change a bucket's bundle.</p>
    pub fn able_to_update_bundle(&self) -> std::option::Option<bool> {
        self.able_to_update_bundle
    }
    /// <p>An array of strings that specify the Amazon Web Services account IDs that have read-only access to the bucket.</p>
    pub fn readonly_access_accounts(&self) -> std::option::Option<&[std::string::String]> {
        self.readonly_access_accounts.as_deref()
    }
    /// <p>An array of objects that describe Lightsail instances that have access to the bucket.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html">SetResourceAccessForBucket</a> action to update the instances that have access to a bucket.</p>
    pub fn resources_receiving_access(
        &self,
    ) -> std::option::Option<&[crate::types::ResourceReceivingAccess]> {
        self.resources_receiving_access.as_deref()
    }
    /// <p>An object that describes the state of the bucket.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::BucketState> {
        self.state.as_ref()
    }
    /// <p>An object that describes the access log configuration for the bucket.</p>
    pub fn access_log_config(&self) -> std::option::Option<&crate::types::BucketAccessLogConfig> {
        self.access_log_config.as_ref()
    }
}
impl Bucket {
    /// Creates a new builder-style object to manufacture [`Bucket`](crate::types::Bucket).
    pub fn builder() -> crate::types::builders::BucketBuilder {
        crate::types::builders::BucketBuilder::default()
    }
}

/// A builder for [`Bucket`](crate::types::Bucket).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BucketBuilder {
    pub(crate) resource_type: std::option::Option<std::string::String>,
    pub(crate) access_rules: std::option::Option<crate::types::AccessRules>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) bundle_id: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) location: std::option::Option<crate::types::ResourceLocation>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) support_code: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) object_versioning: std::option::Option<std::string::String>,
    pub(crate) able_to_update_bundle: std::option::Option<bool>,
    pub(crate) readonly_access_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) resources_receiving_access:
        std::option::Option<std::vec::Vec<crate::types::ResourceReceivingAccess>>,
    pub(crate) state: std::option::Option<crate::types::BucketState>,
    pub(crate) access_log_config: std::option::Option<crate::types::BucketAccessLogConfig>,
}
impl BucketBuilder {
    /// <p>The Lightsail resource type of the bucket (for example, <code>Bucket</code>).</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The Lightsail resource type of the bucket (for example, <code>Bucket</code>).</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>An object that describes the access rules of the bucket.</p>
    pub fn access_rules(mut self, input: crate::types::AccessRules) -> Self {
        self.access_rules = Some(input);
        self
    }
    /// <p>An object that describes the access rules of the bucket.</p>
    pub fn set_access_rules(
        mut self,
        input: std::option::Option<crate::types::AccessRules>,
    ) -> Self {
        self.access_rules = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the bucket.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the bucket.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ID of the bundle currently applied to the bucket.</p>
    /// <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change the bundle of a bucket.</p>
    pub fn bundle_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bundle_id = Some(input.into());
        self
    }
    /// <p>The ID of the bundle currently applied to the bucket.</p>
    /// <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change the bundle of a bucket.</p>
    pub fn set_bundle_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p>The timestamp when the distribution was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The timestamp when the distribution was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The URL of the bucket.</p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>The URL of the bucket.</p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>An object that describes the location of the bucket, such as the Amazon Web Services Region and Availability Zone.</p>
    pub fn location(mut self, input: crate::types::ResourceLocation) -> Self {
        self.location = Some(input);
        self
    }
    /// <p>An object that describes the location of the bucket, such as the Amazon Web Services Region and Availability Zone.</p>
    pub fn set_location(
        mut self,
        input: std::option::Option<crate::types::ResourceLocation>,
    ) -> Self {
        self.location = input;
        self
    }
    /// <p>The name of the bucket.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the bucket.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The support code for a bucket. Include this code in your email to support when you have questions about a Lightsail bucket. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn support_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_code = Some(input.into());
        self
    }
    /// <p>The support code for a bucket. Include this code in your email to support when you have questions about a Lightsail bucket. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn set_support_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.support_code = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values for the bucket. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Tags in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tag keys and optional values for the bucket. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Tags in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Indicates whether object versioning is enabled for the bucket.</p>
    /// <p>The following options can be configured:</p>
    /// <ul>
    /// <li> <p> <code>Enabled</code> - Object versioning is enabled.</p> </li>
    /// <li> <p> <code>Suspended</code> - Object versioning was previously enabled but is currently suspended. Existing object versions are retained.</p> </li>
    /// <li> <p> <code>NeverEnabled</code> - Object versioning has never been enabled.</p> </li>
    /// </ul>
    pub fn object_versioning(mut self, input: impl Into<std::string::String>) -> Self {
        self.object_versioning = Some(input.into());
        self
    }
    /// <p>Indicates whether object versioning is enabled for the bucket.</p>
    /// <p>The following options can be configured:</p>
    /// <ul>
    /// <li> <p> <code>Enabled</code> - Object versioning is enabled.</p> </li>
    /// <li> <p> <code>Suspended</code> - Object versioning was previously enabled but is currently suspended. Existing object versions are retained.</p> </li>
    /// <li> <p> <code>NeverEnabled</code> - Object versioning has never been enabled.</p> </li>
    /// </ul>
    pub fn set_object_versioning(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.object_versioning = input;
        self
    }
    /// <p>Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle.</p>
    /// <p>You can update a bucket's bundle only one time within a monthly Amazon Web Services billing cycle.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change a bucket's bundle.</p>
    pub fn able_to_update_bundle(mut self, input: bool) -> Self {
        self.able_to_update_bundle = Some(input);
        self
    }
    /// <p>Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle.</p>
    /// <p>You can update a bucket's bundle only one time within a monthly Amazon Web Services billing cycle.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change a bucket's bundle.</p>
    pub fn set_able_to_update_bundle(mut self, input: std::option::Option<bool>) -> Self {
        self.able_to_update_bundle = input;
        self
    }
    /// Appends an item to `readonly_access_accounts`.
    ///
    /// To override the contents of this collection use [`set_readonly_access_accounts`](Self::set_readonly_access_accounts).
    ///
    /// <p>An array of strings that specify the Amazon Web Services account IDs that have read-only access to the bucket.</p>
    pub fn readonly_access_accounts(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.readonly_access_accounts.unwrap_or_default();
        v.push(input.into());
        self.readonly_access_accounts = Some(v);
        self
    }
    /// <p>An array of strings that specify the Amazon Web Services account IDs that have read-only access to the bucket.</p>
    pub fn set_readonly_access_accounts(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.readonly_access_accounts = input;
        self
    }
    /// Appends an item to `resources_receiving_access`.
    ///
    /// To override the contents of this collection use [`set_resources_receiving_access`](Self::set_resources_receiving_access).
    ///
    /// <p>An array of objects that describe Lightsail instances that have access to the bucket.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html">SetResourceAccessForBucket</a> action to update the instances that have access to a bucket.</p>
    pub fn resources_receiving_access(
        mut self,
        input: crate::types::ResourceReceivingAccess,
    ) -> Self {
        let mut v = self.resources_receiving_access.unwrap_or_default();
        v.push(input);
        self.resources_receiving_access = Some(v);
        self
    }
    /// <p>An array of objects that describe Lightsail instances that have access to the bucket.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html">SetResourceAccessForBucket</a> action to update the instances that have access to a bucket.</p>
    pub fn set_resources_receiving_access(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceReceivingAccess>>,
    ) -> Self {
        self.resources_receiving_access = input;
        self
    }
    /// <p>An object that describes the state of the bucket.</p>
    pub fn state(mut self, input: crate::types::BucketState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>An object that describes the state of the bucket.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::BucketState>) -> Self {
        self.state = input;
        self
    }
    /// <p>An object that describes the access log configuration for the bucket.</p>
    pub fn access_log_config(mut self, input: crate::types::BucketAccessLogConfig) -> Self {
        self.access_log_config = Some(input);
        self
    }
    /// <p>An object that describes the access log configuration for the bucket.</p>
    pub fn set_access_log_config(
        mut self,
        input: std::option::Option<crate::types::BucketAccessLogConfig>,
    ) -> Self {
        self.access_log_config = input;
        self
    }
    /// Consumes the builder and constructs a [`Bucket`](crate::types::Bucket).
    pub fn build(self) -> crate::types::Bucket {
        crate::types::Bucket {
            resource_type: self.resource_type,
            access_rules: self.access_rules,
            arn: self.arn,
            bundle_id: self.bundle_id,
            created_at: self.created_at,
            url: self.url,
            location: self.location,
            name: self.name,
            support_code: self.support_code,
            tags: self.tags,
            object_versioning: self.object_versioning,
            able_to_update_bundle: self.able_to_update_bundle,
            readonly_access_accounts: self.readonly_access_accounts,
            resources_receiving_access: self.resources_receiving_access,
            state: self.state,
            access_log_config: self.access_log_config,
        }
    }
}
