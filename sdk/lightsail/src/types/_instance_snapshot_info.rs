// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an instance snapshot.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceSnapshotInfo {
    /// <p>The bundle ID from which the source instance was created (e.g., <code>micro_1_0</code>).</p>
    pub from_bundle_id: ::std::option::Option<::std::string::String>,
    /// <p>The blueprint ID from which the source instance (e.g., <code>os_debian_8_3</code>).</p>
    pub from_blueprint_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of objects describing the disks that were attached to the source instance.</p>
    pub from_disk_info: ::std::option::Option<::std::vec::Vec<crate::types::DiskInfo>>,
}
impl InstanceSnapshotInfo {
    /// <p>The bundle ID from which the source instance was created (e.g., <code>micro_1_0</code>).</p>
    pub fn from_bundle_id(&self) -> ::std::option::Option<&str> {
        self.from_bundle_id.as_deref()
    }
    /// <p>The blueprint ID from which the source instance (e.g., <code>os_debian_8_3</code>).</p>
    pub fn from_blueprint_id(&self) -> ::std::option::Option<&str> {
        self.from_blueprint_id.as_deref()
    }
    /// <p>A list of objects describing the disks that were attached to the source instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.from_disk_info.is_none()`.
    pub fn from_disk_info(&self) -> &[crate::types::DiskInfo] {
        self.from_disk_info.as_deref().unwrap_or_default()
    }
}
impl InstanceSnapshotInfo {
    /// Creates a new builder-style object to manufacture [`InstanceSnapshotInfo`](crate::types::InstanceSnapshotInfo).
    pub fn builder() -> crate::types::builders::InstanceSnapshotInfoBuilder {
        crate::types::builders::InstanceSnapshotInfoBuilder::default()
    }
}

/// A builder for [`InstanceSnapshotInfo`](crate::types::InstanceSnapshotInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InstanceSnapshotInfoBuilder {
    pub(crate) from_bundle_id: ::std::option::Option<::std::string::String>,
    pub(crate) from_blueprint_id: ::std::option::Option<::std::string::String>,
    pub(crate) from_disk_info: ::std::option::Option<::std::vec::Vec<crate::types::DiskInfo>>,
}
impl InstanceSnapshotInfoBuilder {
    /// <p>The bundle ID from which the source instance was created (e.g., <code>micro_1_0</code>).</p>
    pub fn from_bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from_bundle_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The bundle ID from which the source instance was created (e.g., <code>micro_1_0</code>).</p>
    pub fn set_from_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from_bundle_id = input;
        self
    }
    /// <p>The bundle ID from which the source instance was created (e.g., <code>micro_1_0</code>).</p>
    pub fn get_from_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.from_bundle_id
    }
    /// <p>The blueprint ID from which the source instance (e.g., <code>os_debian_8_3</code>).</p>
    pub fn from_blueprint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from_blueprint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The blueprint ID from which the source instance (e.g., <code>os_debian_8_3</code>).</p>
    pub fn set_from_blueprint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from_blueprint_id = input;
        self
    }
    /// <p>The blueprint ID from which the source instance (e.g., <code>os_debian_8_3</code>).</p>
    pub fn get_from_blueprint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.from_blueprint_id
    }
    /// Appends an item to `from_disk_info`.
    ///
    /// To override the contents of this collection use [`set_from_disk_info`](Self::set_from_disk_info).
    ///
    /// <p>A list of objects describing the disks that were attached to the source instance.</p>
    pub fn from_disk_info(mut self, input: crate::types::DiskInfo) -> Self {
        let mut v = self.from_disk_info.unwrap_or_default();
        v.push(input);
        self.from_disk_info = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects describing the disks that were attached to the source instance.</p>
    pub fn set_from_disk_info(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DiskInfo>>) -> Self {
        self.from_disk_info = input;
        self
    }
    /// <p>A list of objects describing the disks that were attached to the source instance.</p>
    pub fn get_from_disk_info(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DiskInfo>> {
        &self.from_disk_info
    }
    /// Consumes the builder and constructs a [`InstanceSnapshotInfo`](crate::types::InstanceSnapshotInfo).
    pub fn build(self) -> crate::types::InstanceSnapshotInfo {
        crate::types::InstanceSnapshotInfo {
            from_bundle_id: self.from_bundle_id,
            from_blueprint_id: self.from_blueprint_id,
            from_disk_info: self.from_disk_info,
        }
    }
}
