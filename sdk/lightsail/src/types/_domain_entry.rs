// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a domain recordset entry.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainEntry {
    /// <p>The ID of the domain recordset entry.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the domain.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The target IP address (e.g., <code>192.0.2.0</code>), or AWS name server (e.g., <code>ns-111.awsdns-22.com.</code>).</p>
    /// <p>For Lightsail load balancers, the value looks like <code>ab1234c56789c6b86aba6fb203d443bc-123456789.us-east-2.elb.amazonaws.com</code>. For Lightsail distributions, the value looks like <code>exampled1182ne.cloudfront.net</code>. For Lightsail container services, the value looks like <code>container-service-1.example23scljs.us-west-2.cs.amazonlightsail.com</code>. Be sure to also set <code>isAlias</code> to <code>true</code> when setting up an A record for a Lightsail load balancer, distribution, or container service.</p>
    #[doc(hidden)]
    pub target: std::option::Option<std::string::String>,
    /// <p>When <code>true</code>, specifies whether the domain entry is an alias used by the Lightsail load balancer. You can include an alias (A type) record in your request, which points to a load balancer DNS name and routes traffic to your load balancer.</p>
    #[doc(hidden)]
    pub is_alias: std::option::Option<bool>,
    /// <p>The type of domain entry, such as address for IPv4 (A), address for IPv6 (AAAA), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator (SRV), or text (TXT).</p>
    /// <p>The following domain entry types can be used:</p>
    /// <ul>
    /// <li> <p> <code>A</code> </p> </li>
    /// <li> <p> <code>AAAA</code> </p> </li>
    /// <li> <p> <code>CNAME</code> </p> </li>
    /// <li> <p> <code>MX</code> </p> </li>
    /// <li> <p> <code>NS</code> </p> </li>
    /// <li> <p> <code>SOA</code> </p> </li>
    /// <li> <p> <code>SRV</code> </p> </li>
    /// <li> <p> <code>TXT</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>(Deprecated) The options for the domain entry.</p> <note>
    /// <p>In releases prior to November 29, 2017, this parameter was not included in the API response. It is now deprecated.</p>
    /// </note>
    #[deprecated]
    #[doc(hidden)]
    pub options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DomainEntry {
    /// <p>The ID of the domain recordset entry.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the domain.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The target IP address (e.g., <code>192.0.2.0</code>), or AWS name server (e.g., <code>ns-111.awsdns-22.com.</code>).</p>
    /// <p>For Lightsail load balancers, the value looks like <code>ab1234c56789c6b86aba6fb203d443bc-123456789.us-east-2.elb.amazonaws.com</code>. For Lightsail distributions, the value looks like <code>exampled1182ne.cloudfront.net</code>. For Lightsail container services, the value looks like <code>container-service-1.example23scljs.us-west-2.cs.amazonlightsail.com</code>. Be sure to also set <code>isAlias</code> to <code>true</code> when setting up an A record for a Lightsail load balancer, distribution, or container service.</p>
    pub fn target(&self) -> std::option::Option<&str> {
        self.target.as_deref()
    }
    /// <p>When <code>true</code>, specifies whether the domain entry is an alias used by the Lightsail load balancer. You can include an alias (A type) record in your request, which points to a load balancer DNS name and routes traffic to your load balancer.</p>
    pub fn is_alias(&self) -> std::option::Option<bool> {
        self.is_alias
    }
    /// <p>The type of domain entry, such as address for IPv4 (A), address for IPv6 (AAAA), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator (SRV), or text (TXT).</p>
    /// <p>The following domain entry types can be used:</p>
    /// <ul>
    /// <li> <p> <code>A</code> </p> </li>
    /// <li> <p> <code>AAAA</code> </p> </li>
    /// <li> <p> <code>CNAME</code> </p> </li>
    /// <li> <p> <code>MX</code> </p> </li>
    /// <li> <p> <code>NS</code> </p> </li>
    /// <li> <p> <code>SOA</code> </p> </li>
    /// <li> <p> <code>SRV</code> </p> </li>
    /// <li> <p> <code>TXT</code> </p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>(Deprecated) The options for the domain entry.</p> <note>
    /// <p>In releases prior to November 29, 2017, this parameter was not included in the API response. It is now deprecated.</p>
    /// </note>
    #[deprecated]
    pub fn options(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.options.as_ref()
    }
}
impl DomainEntry {
    /// Creates a new builder-style object to manufacture [`DomainEntry`](crate::types::DomainEntry).
    pub fn builder() -> crate::types::builders::DomainEntryBuilder {
        crate::types::builders::DomainEntryBuilder::default()
    }
}

/// A builder for [`DomainEntry`](crate::types::DomainEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainEntryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) target: std::option::Option<std::string::String>,
    pub(crate) is_alias: std::option::Option<bool>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DomainEntryBuilder {
    /// <p>The ID of the domain recordset entry.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the domain recordset entry.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the domain.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the domain.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The target IP address (e.g., <code>192.0.2.0</code>), or AWS name server (e.g., <code>ns-111.awsdns-22.com.</code>).</p>
    /// <p>For Lightsail load balancers, the value looks like <code>ab1234c56789c6b86aba6fb203d443bc-123456789.us-east-2.elb.amazonaws.com</code>. For Lightsail distributions, the value looks like <code>exampled1182ne.cloudfront.net</code>. For Lightsail container services, the value looks like <code>container-service-1.example23scljs.us-west-2.cs.amazonlightsail.com</code>. Be sure to also set <code>isAlias</code> to <code>true</code> when setting up an A record for a Lightsail load balancer, distribution, or container service.</p>
    pub fn target(mut self, input: impl Into<std::string::String>) -> Self {
        self.target = Some(input.into());
        self
    }
    /// <p>The target IP address (e.g., <code>192.0.2.0</code>), or AWS name server (e.g., <code>ns-111.awsdns-22.com.</code>).</p>
    /// <p>For Lightsail load balancers, the value looks like <code>ab1234c56789c6b86aba6fb203d443bc-123456789.us-east-2.elb.amazonaws.com</code>. For Lightsail distributions, the value looks like <code>exampled1182ne.cloudfront.net</code>. For Lightsail container services, the value looks like <code>container-service-1.example23scljs.us-west-2.cs.amazonlightsail.com</code>. Be sure to also set <code>isAlias</code> to <code>true</code> when setting up an A record for a Lightsail load balancer, distribution, or container service.</p>
    pub fn set_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>When <code>true</code>, specifies whether the domain entry is an alias used by the Lightsail load balancer. You can include an alias (A type) record in your request, which points to a load balancer DNS name and routes traffic to your load balancer.</p>
    pub fn is_alias(mut self, input: bool) -> Self {
        self.is_alias = Some(input);
        self
    }
    /// <p>When <code>true</code>, specifies whether the domain entry is an alias used by the Lightsail load balancer. You can include an alias (A type) record in your request, which points to a load balancer DNS name and routes traffic to your load balancer.</p>
    pub fn set_is_alias(mut self, input: std::option::Option<bool>) -> Self {
        self.is_alias = input;
        self
    }
    /// <p>The type of domain entry, such as address for IPv4 (A), address for IPv6 (AAAA), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator (SRV), or text (TXT).</p>
    /// <p>The following domain entry types can be used:</p>
    /// <ul>
    /// <li> <p> <code>A</code> </p> </li>
    /// <li> <p> <code>AAAA</code> </p> </li>
    /// <li> <p> <code>CNAME</code> </p> </li>
    /// <li> <p> <code>MX</code> </p> </li>
    /// <li> <p> <code>NS</code> </p> </li>
    /// <li> <p> <code>SOA</code> </p> </li>
    /// <li> <p> <code>SRV</code> </p> </li>
    /// <li> <p> <code>TXT</code> </p> </li>
    /// </ul>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of domain entry, such as address for IPv4 (A), address for IPv6 (AAAA), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator (SRV), or text (TXT).</p>
    /// <p>The following domain entry types can be used:</p>
    /// <ul>
    /// <li> <p> <code>A</code> </p> </li>
    /// <li> <p> <code>AAAA</code> </p> </li>
    /// <li> <p> <code>CNAME</code> </p> </li>
    /// <li> <p> <code>MX</code> </p> </li>
    /// <li> <p> <code>NS</code> </p> </li>
    /// <li> <p> <code>SOA</code> </p> </li>
    /// <li> <p> <code>SRV</code> </p> </li>
    /// <li> <p> <code>TXT</code> </p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Adds a key-value pair to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>(Deprecated) The options for the domain entry.</p> <note>
    /// <p>In releases prior to November 29, 2017, this parameter was not included in the API response. It is now deprecated.</p>
    /// </note>
    #[deprecated]
    pub fn options(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.options = Some(hash_map);
        self
    }
    /// <p>(Deprecated) The options for the domain entry.</p> <note>
    /// <p>In releases prior to November 29, 2017, this parameter was not included in the API response. It is now deprecated.</p>
    /// </note>
    #[deprecated]
    pub fn set_options(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.options = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainEntry`](crate::types::DomainEntry).
    pub fn build(self) -> crate::types::DomainEntry {
        crate::types::DomainEntry {
            id: self.id,
            name: self.name,
            target: self.target,
            is_alias: self.is_alias,
            r#type: self.r#type,
            options: self.options,
        }
    }
}
