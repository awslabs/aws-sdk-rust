// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the TLS security policies that are available for Lightsail load balancers.</p>
/// <p>For more information about load balancer TLS security policies, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy">Configuring TLS security policies on your Amazon Lightsail load balancers</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoadBalancerTlsPolicy {
    /// <p>The name of the TLS security policy.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A Boolean value that indicates whether the TLS security policy is the default.</p>
    #[doc(hidden)]
    pub is_default: std::option::Option<bool>,
    /// <p>The description of the TLS security policy.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The protocols used in a given TLS security policy.</p>
    #[doc(hidden)]
    pub protocols: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The ciphers used by the TLS security policy.</p>
    /// <p>The ciphers are listed in order of preference.</p>
    #[doc(hidden)]
    pub ciphers: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl LoadBalancerTlsPolicy {
    /// <p>The name of the TLS security policy.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A Boolean value that indicates whether the TLS security policy is the default.</p>
    pub fn is_default(&self) -> std::option::Option<bool> {
        self.is_default
    }
    /// <p>The description of the TLS security policy.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The protocols used in a given TLS security policy.</p>
    pub fn protocols(&self) -> std::option::Option<&[std::string::String]> {
        self.protocols.as_deref()
    }
    /// <p>The ciphers used by the TLS security policy.</p>
    /// <p>The ciphers are listed in order of preference.</p>
    pub fn ciphers(&self) -> std::option::Option<&[std::string::String]> {
        self.ciphers.as_deref()
    }
}
impl LoadBalancerTlsPolicy {
    /// Creates a new builder-style object to manufacture [`LoadBalancerTlsPolicy`](crate::types::LoadBalancerTlsPolicy).
    pub fn builder() -> crate::types::builders::LoadBalancerTlsPolicyBuilder {
        crate::types::builders::LoadBalancerTlsPolicyBuilder::default()
    }
}

/// A builder for [`LoadBalancerTlsPolicy`](crate::types::LoadBalancerTlsPolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoadBalancerTlsPolicyBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) is_default: std::option::Option<bool>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) protocols: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) ciphers: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl LoadBalancerTlsPolicyBuilder {
    /// <p>The name of the TLS security policy.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the TLS security policy.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A Boolean value that indicates whether the TLS security policy is the default.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = Some(input);
        self
    }
    /// <p>A Boolean value that indicates whether the TLS security policy is the default.</p>
    pub fn set_is_default(mut self, input: std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// <p>The description of the TLS security policy.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the TLS security policy.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `protocols`.
    ///
    /// To override the contents of this collection use [`set_protocols`](Self::set_protocols).
    ///
    /// <p>The protocols used in a given TLS security policy.</p>
    pub fn protocols(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.protocols.unwrap_or_default();
        v.push(input.into());
        self.protocols = Some(v);
        self
    }
    /// <p>The protocols used in a given TLS security policy.</p>
    pub fn set_protocols(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.protocols = input;
        self
    }
    /// Appends an item to `ciphers`.
    ///
    /// To override the contents of this collection use [`set_ciphers`](Self::set_ciphers).
    ///
    /// <p>The ciphers used by the TLS security policy.</p>
    /// <p>The ciphers are listed in order of preference.</p>
    pub fn ciphers(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ciphers.unwrap_or_default();
        v.push(input.into());
        self.ciphers = Some(v);
        self
    }
    /// <p>The ciphers used by the TLS security policy.</p>
    /// <p>The ciphers are listed in order of preference.</p>
    pub fn set_ciphers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ciphers = input;
        self
    }
    /// Consumes the builder and constructs a [`LoadBalancerTlsPolicy`](crate::types::LoadBalancerTlsPolicy).
    pub fn build(self) -> crate::types::LoadBalancerTlsPolicy {
        crate::types::LoadBalancerTlsPolicy {
            name: self.name,
            is_default: self.is_default,
            description: self.description,
            protocols: self.protocols,
            ciphers: self.ciphers,
        }
    }
}
