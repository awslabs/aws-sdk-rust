// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the settings of a public endpoint for an Amazon Lightsail container service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EndpointRequest {
    /// <p>The name of the container for the endpoint.</p>
    #[doc(hidden)]
    pub container_name: std::option::Option<std::string::String>,
    /// <p>The port of the container to which traffic is forwarded to.</p>
    #[doc(hidden)]
    pub container_port: std::option::Option<i32>,
    /// <p>An object that describes the health check configuration of the container.</p>
    #[doc(hidden)]
    pub health_check: std::option::Option<crate::types::ContainerServiceHealthCheckConfig>,
}
impl EndpointRequest {
    /// <p>The name of the container for the endpoint.</p>
    pub fn container_name(&self) -> std::option::Option<&str> {
        self.container_name.as_deref()
    }
    /// <p>The port of the container to which traffic is forwarded to.</p>
    pub fn container_port(&self) -> std::option::Option<i32> {
        self.container_port
    }
    /// <p>An object that describes the health check configuration of the container.</p>
    pub fn health_check(
        &self,
    ) -> std::option::Option<&crate::types::ContainerServiceHealthCheckConfig> {
        self.health_check.as_ref()
    }
}
impl EndpointRequest {
    /// Creates a new builder-style object to manufacture [`EndpointRequest`](crate::types::EndpointRequest).
    pub fn builder() -> crate::types::builders::EndpointRequestBuilder {
        crate::types::builders::EndpointRequestBuilder::default()
    }
}

/// A builder for [`EndpointRequest`](crate::types::EndpointRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EndpointRequestBuilder {
    pub(crate) container_name: std::option::Option<std::string::String>,
    pub(crate) container_port: std::option::Option<i32>,
    pub(crate) health_check: std::option::Option<crate::types::ContainerServiceHealthCheckConfig>,
}
impl EndpointRequestBuilder {
    /// <p>The name of the container for the endpoint.</p>
    pub fn container_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_name = Some(input.into());
        self
    }
    /// <p>The name of the container for the endpoint.</p>
    pub fn set_container_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// <p>The port of the container to which traffic is forwarded to.</p>
    pub fn container_port(mut self, input: i32) -> Self {
        self.container_port = Some(input);
        self
    }
    /// <p>The port of the container to which traffic is forwarded to.</p>
    pub fn set_container_port(mut self, input: std::option::Option<i32>) -> Self {
        self.container_port = input;
        self
    }
    /// <p>An object that describes the health check configuration of the container.</p>
    pub fn health_check(mut self, input: crate::types::ContainerServiceHealthCheckConfig) -> Self {
        self.health_check = Some(input);
        self
    }
    /// <p>An object that describes the health check configuration of the container.</p>
    pub fn set_health_check(
        mut self,
        input: std::option::Option<crate::types::ContainerServiceHealthCheckConfig>,
    ) -> Self {
        self.health_check = input;
        self
    }
    /// Consumes the builder and constructs a [`EndpointRequest`](crate::types::EndpointRequest).
    pub fn build(self) -> crate::types::EndpointRequest {
        crate::types::EndpointRequest {
            container_name: self.container_name,
            container_port: self.container_port,
            health_check: self.health_check,
        }
    }
}
