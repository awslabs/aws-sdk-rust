// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the status of Lightsail's managed renewal for the certificate.</p>
/// <p>The renewal status of the certificate.</p>
/// <p>The following renewal status are possible:</p>
/// <ul>
/// <li> <p> <b> <code>PendingAutoRenewal</code> </b> - Lightsail is attempting to automatically validate the domain names in the certificate. No further action is required. </p> </li>
/// <li> <p> <b> <code>PendingValidation</code> </b> - Lightsail couldn't automatically validate one or more domain names in the certificate. You must take action to validate these domain names or the certificate won't be renewed. If you used DNS validation, check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.</p> </li>
/// <li> <p> <b> <code>Success</code> </b> - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required. </p> </li>
/// <li> <p> <b> <code>Failed</code> </b> - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the <code>CreateCertificate</code> action.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoadBalancerTlsCertificateRenewalSummary {
    /// <p>The renewal status of the certificate.</p>
    /// <p>The following renewal status are possible:</p>
    /// <ul>
    /// <li> <p> <b> <code>PendingAutoRenewal</code> </b> - Lightsail is attempting to automatically validate the domain names of the certificate. No further action is required. </p> </li>
    /// <li> <p> <b> <code>PendingValidation</code> </b> - Lightsail couldn't automatically validate one or more domain names of the certificate. You must take action to validate these domain names or the certificate won't be renewed. Check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.</p> </li>
    /// <li> <p> <b> <code>Success</code> </b> - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required. </p> </li>
    /// <li> <p> <b> <code>Failed</code> </b> - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the <code>CreateCertificate</code> action.</p> </li>
    /// </ul>
    pub renewal_status: ::std::option::Option<crate::types::LoadBalancerTlsCertificateRenewalStatus>,
    /// <p>Contains information about the validation of each domain name in the certificate, as it pertains to Lightsail's managed renewal. This is different from the initial validation that occurs as a result of the RequestCertificate request.</p>
    pub domain_validation_options: ::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerTlsCertificateDomainValidationOption>>,
}
impl LoadBalancerTlsCertificateRenewalSummary {
    /// <p>The renewal status of the certificate.</p>
    /// <p>The following renewal status are possible:</p>
    /// <ul>
    /// <li> <p> <b> <code>PendingAutoRenewal</code> </b> - Lightsail is attempting to automatically validate the domain names of the certificate. No further action is required. </p> </li>
    /// <li> <p> <b> <code>PendingValidation</code> </b> - Lightsail couldn't automatically validate one or more domain names of the certificate. You must take action to validate these domain names or the certificate won't be renewed. Check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.</p> </li>
    /// <li> <p> <b> <code>Success</code> </b> - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required. </p> </li>
    /// <li> <p> <b> <code>Failed</code> </b> - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the <code>CreateCertificate</code> action.</p> </li>
    /// </ul>
    pub fn renewal_status(&self) -> ::std::option::Option<&crate::types::LoadBalancerTlsCertificateRenewalStatus> {
        self.renewal_status.as_ref()
    }
    /// <p>Contains information about the validation of each domain name in the certificate, as it pertains to Lightsail's managed renewal. This is different from the initial validation that occurs as a result of the RequestCertificate request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domain_validation_options.is_none()`.
    pub fn domain_validation_options(&self) -> &[crate::types::LoadBalancerTlsCertificateDomainValidationOption] {
        self.domain_validation_options.as_deref().unwrap_or_default()
    }
}
impl LoadBalancerTlsCertificateRenewalSummary {
    /// Creates a new builder-style object to manufacture [`LoadBalancerTlsCertificateRenewalSummary`](crate::types::LoadBalancerTlsCertificateRenewalSummary).
    pub fn builder() -> crate::types::builders::LoadBalancerTlsCertificateRenewalSummaryBuilder {
        crate::types::builders::LoadBalancerTlsCertificateRenewalSummaryBuilder::default()
    }
}

/// A builder for [`LoadBalancerTlsCertificateRenewalSummary`](crate::types::LoadBalancerTlsCertificateRenewalSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LoadBalancerTlsCertificateRenewalSummaryBuilder {
    pub(crate) renewal_status: ::std::option::Option<crate::types::LoadBalancerTlsCertificateRenewalStatus>,
    pub(crate) domain_validation_options: ::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerTlsCertificateDomainValidationOption>>,
}
impl LoadBalancerTlsCertificateRenewalSummaryBuilder {
    /// <p>The renewal status of the certificate.</p>
    /// <p>The following renewal status are possible:</p>
    /// <ul>
    /// <li> <p> <b> <code>PendingAutoRenewal</code> </b> - Lightsail is attempting to automatically validate the domain names of the certificate. No further action is required. </p> </li>
    /// <li> <p> <b> <code>PendingValidation</code> </b> - Lightsail couldn't automatically validate one or more domain names of the certificate. You must take action to validate these domain names or the certificate won't be renewed. Check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.</p> </li>
    /// <li> <p> <b> <code>Success</code> </b> - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required. </p> </li>
    /// <li> <p> <b> <code>Failed</code> </b> - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the <code>CreateCertificate</code> action.</p> </li>
    /// </ul>
    pub fn renewal_status(mut self, input: crate::types::LoadBalancerTlsCertificateRenewalStatus) -> Self {
        self.renewal_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The renewal status of the certificate.</p>
    /// <p>The following renewal status are possible:</p>
    /// <ul>
    /// <li> <p> <b> <code>PendingAutoRenewal</code> </b> - Lightsail is attempting to automatically validate the domain names of the certificate. No further action is required. </p> </li>
    /// <li> <p> <b> <code>PendingValidation</code> </b> - Lightsail couldn't automatically validate one or more domain names of the certificate. You must take action to validate these domain names or the certificate won't be renewed. Check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.</p> </li>
    /// <li> <p> <b> <code>Success</code> </b> - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required. </p> </li>
    /// <li> <p> <b> <code>Failed</code> </b> - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the <code>CreateCertificate</code> action.</p> </li>
    /// </ul>
    pub fn set_renewal_status(mut self, input: ::std::option::Option<crate::types::LoadBalancerTlsCertificateRenewalStatus>) -> Self {
        self.renewal_status = input;
        self
    }
    /// <p>The renewal status of the certificate.</p>
    /// <p>The following renewal status are possible:</p>
    /// <ul>
    /// <li> <p> <b> <code>PendingAutoRenewal</code> </b> - Lightsail is attempting to automatically validate the domain names of the certificate. No further action is required. </p> </li>
    /// <li> <p> <b> <code>PendingValidation</code> </b> - Lightsail couldn't automatically validate one or more domain names of the certificate. You must take action to validate these domain names or the certificate won't be renewed. Check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.</p> </li>
    /// <li> <p> <b> <code>Success</code> </b> - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required. </p> </li>
    /// <li> <p> <b> <code>Failed</code> </b> - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the <code>CreateCertificate</code> action.</p> </li>
    /// </ul>
    pub fn get_renewal_status(&self) -> &::std::option::Option<crate::types::LoadBalancerTlsCertificateRenewalStatus> {
        &self.renewal_status
    }
    /// Appends an item to `domain_validation_options`.
    ///
    /// To override the contents of this collection use [`set_domain_validation_options`](Self::set_domain_validation_options).
    ///
    /// <p>Contains information about the validation of each domain name in the certificate, as it pertains to Lightsail's managed renewal. This is different from the initial validation that occurs as a result of the RequestCertificate request.</p>
    pub fn domain_validation_options(mut self, input: crate::types::LoadBalancerTlsCertificateDomainValidationOption) -> Self {
        let mut v = self.domain_validation_options.unwrap_or_default();
        v.push(input);
        self.domain_validation_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains information about the validation of each domain name in the certificate, as it pertains to Lightsail's managed renewal. This is different from the initial validation that occurs as a result of the RequestCertificate request.</p>
    pub fn set_domain_validation_options(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerTlsCertificateDomainValidationOption>>,
    ) -> Self {
        self.domain_validation_options = input;
        self
    }
    /// <p>Contains information about the validation of each domain name in the certificate, as it pertains to Lightsail's managed renewal. This is different from the initial validation that occurs as a result of the RequestCertificate request.</p>
    pub fn get_domain_validation_options(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::LoadBalancerTlsCertificateDomainValidationOption>> {
        &self.domain_validation_options
    }
    /// Consumes the builder and constructs a [`LoadBalancerTlsCertificateRenewalSummary`](crate::types::LoadBalancerTlsCertificateRenewalSummary).
    pub fn build(self) -> crate::types::LoadBalancerTlsCertificateRenewalSummary {
        crate::types::LoadBalancerTlsCertificateRenewalSummary {
            renewal_status: self.renewal_status,
            domain_validation_options: self.domain_validation_options,
        }
    }
}
