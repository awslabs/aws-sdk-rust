// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `HeaderEnum`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let headerenum = unimplemented!();
/// match headerenum {
///     HeaderEnum::Accept => { /* ... */ },
///     HeaderEnum::AcceptCharset => { /* ... */ },
///     HeaderEnum::AcceptDatetime => { /* ... */ },
///     HeaderEnum::AcceptEncoding => { /* ... */ },
///     HeaderEnum::AcceptLanguage => { /* ... */ },
///     HeaderEnum::Authorization => { /* ... */ },
///     HeaderEnum::CloudFrontForwardedProto => { /* ... */ },
///     HeaderEnum::CloudFrontIsDesktopViewer => { /* ... */ },
///     HeaderEnum::CloudFrontIsMobileViewer => { /* ... */ },
///     HeaderEnum::CloudFrontIsSmartTvViewer => { /* ... */ },
///     HeaderEnum::CloudFrontIsTabletViewer => { /* ... */ },
///     HeaderEnum::CloudFrontViewerCountry => { /* ... */ },
///     HeaderEnum::Host => { /* ... */ },
///     HeaderEnum::Origin => { /* ... */ },
///     HeaderEnum::Referer => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `headerenum` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `HeaderEnum::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `HeaderEnum::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `HeaderEnum::NewFeature` is defined.
/// Specifically, when `headerenum` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `HeaderEnum::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum HeaderEnum {
    #[allow(missing_docs)] // documentation missing in model
    Accept,
    #[allow(missing_docs)] // documentation missing in model
    AcceptCharset,
    #[allow(missing_docs)] // documentation missing in model
    AcceptDatetime,
    #[allow(missing_docs)] // documentation missing in model
    AcceptEncoding,
    #[allow(missing_docs)] // documentation missing in model
    AcceptLanguage,
    #[allow(missing_docs)] // documentation missing in model
    Authorization,
    #[allow(missing_docs)] // documentation missing in model
    CloudFrontForwardedProto,
    #[allow(missing_docs)] // documentation missing in model
    CloudFrontIsDesktopViewer,
    #[allow(missing_docs)] // documentation missing in model
    CloudFrontIsMobileViewer,
    #[allow(missing_docs)] // documentation missing in model
    CloudFrontIsSmartTvViewer,
    #[allow(missing_docs)] // documentation missing in model
    CloudFrontIsTabletViewer,
    #[allow(missing_docs)] // documentation missing in model
    CloudFrontViewerCountry,
    #[allow(missing_docs)] // documentation missing in model
    Host,
    #[allow(missing_docs)] // documentation missing in model
    Origin,
    #[allow(missing_docs)] // documentation missing in model
    Referer,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for HeaderEnum {
    fn from(s: &str) -> Self {
        match s {
            "Accept" => HeaderEnum::Accept,
            "Accept-Charset" => HeaderEnum::AcceptCharset,
            "Accept-Datetime" => HeaderEnum::AcceptDatetime,
            "Accept-Encoding" => HeaderEnum::AcceptEncoding,
            "Accept-Language" => HeaderEnum::AcceptLanguage,
            "Authorization" => HeaderEnum::Authorization,
            "CloudFront-Forwarded-Proto" => HeaderEnum::CloudFrontForwardedProto,
            "CloudFront-Is-Desktop-Viewer" => HeaderEnum::CloudFrontIsDesktopViewer,
            "CloudFront-Is-Mobile-Viewer" => HeaderEnum::CloudFrontIsMobileViewer,
            "CloudFront-Is-SmartTV-Viewer" => HeaderEnum::CloudFrontIsSmartTvViewer,
            "CloudFront-Is-Tablet-Viewer" => HeaderEnum::CloudFrontIsTabletViewer,
            "CloudFront-Viewer-Country" => HeaderEnum::CloudFrontViewerCountry,
            "Host" => HeaderEnum::Host,
            "Origin" => HeaderEnum::Origin,
            "Referer" => HeaderEnum::Referer,
            other => HeaderEnum::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for HeaderEnum {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(HeaderEnum::from(s))
    }
}
impl HeaderEnum {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            HeaderEnum::Accept => "Accept",
            HeaderEnum::AcceptCharset => "Accept-Charset",
            HeaderEnum::AcceptDatetime => "Accept-Datetime",
            HeaderEnum::AcceptEncoding => "Accept-Encoding",
            HeaderEnum::AcceptLanguage => "Accept-Language",
            HeaderEnum::Authorization => "Authorization",
            HeaderEnum::CloudFrontForwardedProto => "CloudFront-Forwarded-Proto",
            HeaderEnum::CloudFrontIsDesktopViewer => "CloudFront-Is-Desktop-Viewer",
            HeaderEnum::CloudFrontIsMobileViewer => "CloudFront-Is-Mobile-Viewer",
            HeaderEnum::CloudFrontIsSmartTvViewer => "CloudFront-Is-SmartTV-Viewer",
            HeaderEnum::CloudFrontIsTabletViewer => "CloudFront-Is-Tablet-Viewer",
            HeaderEnum::CloudFrontViewerCountry => "CloudFront-Viewer-Country",
            HeaderEnum::Host => "Host",
            HeaderEnum::Origin => "Origin",
            HeaderEnum::Referer => "Referer",
            HeaderEnum::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Accept",
            "Accept-Charset",
            "Accept-Datetime",
            "Accept-Encoding",
            "Accept-Language",
            "Authorization",
            "CloudFront-Forwarded-Proto",
            "CloudFront-Is-Desktop-Viewer",
            "CloudFront-Is-Mobile-Viewer",
            "CloudFront-Is-SmartTV-Viewer",
            "CloudFront-Is-Tablet-Viewer",
            "CloudFront-Viewer-Country",
            "Host",
            "Origin",
            "Referer",
        ]
    }
}
impl AsRef<str> for HeaderEnum {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
