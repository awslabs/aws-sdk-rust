// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes monthly data transfer rates and port information for an instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceNetworking {
    /// <p>The amount of data in GB allocated for monthly data transfers.</p>
    pub monthly_transfer: ::std::option::Option<crate::types::MonthlyTransfer>,
    /// <p>An array of key-value pairs containing information about the ports on the instance.</p>
    pub ports: ::std::option::Option<::std::vec::Vec<crate::types::InstancePortInfo>>,
}
impl InstanceNetworking {
    /// <p>The amount of data in GB allocated for monthly data transfers.</p>
    pub fn monthly_transfer(&self) -> ::std::option::Option<&crate::types::MonthlyTransfer> {
        self.monthly_transfer.as_ref()
    }
    /// <p>An array of key-value pairs containing information about the ports on the instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ports.is_none()`.
    pub fn ports(&self) -> &[crate::types::InstancePortInfo] {
        self.ports.as_deref().unwrap_or_default()
    }
}
impl InstanceNetworking {
    /// Creates a new builder-style object to manufacture [`InstanceNetworking`](crate::types::InstanceNetworking).
    pub fn builder() -> crate::types::builders::InstanceNetworkingBuilder {
        crate::types::builders::InstanceNetworkingBuilder::default()
    }
}

/// A builder for [`InstanceNetworking`](crate::types::InstanceNetworking).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InstanceNetworkingBuilder {
    pub(crate) monthly_transfer: ::std::option::Option<crate::types::MonthlyTransfer>,
    pub(crate) ports: ::std::option::Option<::std::vec::Vec<crate::types::InstancePortInfo>>,
}
impl InstanceNetworkingBuilder {
    /// <p>The amount of data in GB allocated for monthly data transfers.</p>
    pub fn monthly_transfer(mut self, input: crate::types::MonthlyTransfer) -> Self {
        self.monthly_transfer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of data in GB allocated for monthly data transfers.</p>
    pub fn set_monthly_transfer(mut self, input: ::std::option::Option<crate::types::MonthlyTransfer>) -> Self {
        self.monthly_transfer = input;
        self
    }
    /// <p>The amount of data in GB allocated for monthly data transfers.</p>
    pub fn get_monthly_transfer(&self) -> &::std::option::Option<crate::types::MonthlyTransfer> {
        &self.monthly_transfer
    }
    /// Appends an item to `ports`.
    ///
    /// To override the contents of this collection use [`set_ports`](Self::set_ports).
    ///
    /// <p>An array of key-value pairs containing information about the ports on the instance.</p>
    pub fn ports(mut self, input: crate::types::InstancePortInfo) -> Self {
        let mut v = self.ports.unwrap_or_default();
        v.push(input);
        self.ports = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of key-value pairs containing information about the ports on the instance.</p>
    pub fn set_ports(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InstancePortInfo>>) -> Self {
        self.ports = input;
        self
    }
    /// <p>An array of key-value pairs containing information about the ports on the instance.</p>
    pub fn get_ports(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstancePortInfo>> {
        &self.ports
    }
    /// Consumes the builder and constructs a [`InstanceNetworking`](crate::types::InstanceNetworking).
    pub fn build(self) -> crate::types::InstanceNetworking {
        crate::types::InstanceNetworking {
            monthly_transfer: self.monthly_transfer,
            ports: self.ports,
        }
    }
}
