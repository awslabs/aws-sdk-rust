// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes information about the health of the instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceHealthSummary {
    /// <p>The name of the Lightsail instance for which you are requesting health check data.</p>
    #[doc(hidden)]
    pub instance_name: std::option::Option<std::string::String>,
    /// <p>Describes the overall instance health. Valid values are below.</p>
    #[doc(hidden)]
    pub instance_health: std::option::Option<crate::types::InstanceHealthState>,
    /// <p>More information about the instance health. If the <code>instanceHealth</code> is <code>healthy</code>, then an <code>instanceHealthReason</code> value is not provided.</p>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>initial</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Lb.RegistrationInProgress</code> </b> - The target instance is in the process of being registered with the load balancer.</p> </li>
    /// <li> <p> <b> <code>Lb.InitialHealthChecking</code> </b> - The Lightsail load balancer is still sending the target instance the minimum number of health checks required to determine its health status.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>unhealthy</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.ResponseCodeMismatch</code> </b> - The health checks did not return an expected HTTP code.</p> </li>
    /// <li> <p> <b> <code>Instance.Timeout</code> </b> - The health check requests timed out.</p> </li>
    /// <li> <p> <b> <code>Instance.FailedHealthChecks</code> </b> - The health checks failed because the connection to the target instance timed out, the target instance response was malformed, or the target instance failed the health check for an unknown reason.</p> </li>
    /// <li> <p> <b> <code>Lb.InternalError</code> </b> - The health checks failed due to an internal error.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>unused</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.NotRegistered</code> </b> - The target instance is not registered with the target group.</p> </li>
    /// <li> <p> <b> <code>Instance.NotInUse</code> </b> - The target group is not used by any load balancer, or the target instance is in an Availability Zone that is not enabled for its load balancer.</p> </li>
    /// <li> <p> <b> <code>Instance.IpUnusable</code> </b> - The target IP address is reserved for use by a Lightsail load balancer.</p> </li>
    /// <li> <p> <b> <code>Instance.InvalidState</code> </b> - The target is in the stopped or terminated state.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>draining</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.DeregistrationInProgress</code> </b> - The target instance is in the process of being deregistered and the deregistration delay period has not expired.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub instance_health_reason: std::option::Option<crate::types::InstanceHealthReason>,
}
impl InstanceHealthSummary {
    /// <p>The name of the Lightsail instance for which you are requesting health check data.</p>
    pub fn instance_name(&self) -> std::option::Option<&str> {
        self.instance_name.as_deref()
    }
    /// <p>Describes the overall instance health. Valid values are below.</p>
    pub fn instance_health(&self) -> std::option::Option<&crate::types::InstanceHealthState> {
        self.instance_health.as_ref()
    }
    /// <p>More information about the instance health. If the <code>instanceHealth</code> is <code>healthy</code>, then an <code>instanceHealthReason</code> value is not provided.</p>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>initial</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Lb.RegistrationInProgress</code> </b> - The target instance is in the process of being registered with the load balancer.</p> </li>
    /// <li> <p> <b> <code>Lb.InitialHealthChecking</code> </b> - The Lightsail load balancer is still sending the target instance the minimum number of health checks required to determine its health status.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>unhealthy</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.ResponseCodeMismatch</code> </b> - The health checks did not return an expected HTTP code.</p> </li>
    /// <li> <p> <b> <code>Instance.Timeout</code> </b> - The health check requests timed out.</p> </li>
    /// <li> <p> <b> <code>Instance.FailedHealthChecks</code> </b> - The health checks failed because the connection to the target instance timed out, the target instance response was malformed, or the target instance failed the health check for an unknown reason.</p> </li>
    /// <li> <p> <b> <code>Lb.InternalError</code> </b> - The health checks failed due to an internal error.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>unused</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.NotRegistered</code> </b> - The target instance is not registered with the target group.</p> </li>
    /// <li> <p> <b> <code>Instance.NotInUse</code> </b> - The target group is not used by any load balancer, or the target instance is in an Availability Zone that is not enabled for its load balancer.</p> </li>
    /// <li> <p> <b> <code>Instance.IpUnusable</code> </b> - The target IP address is reserved for use by a Lightsail load balancer.</p> </li>
    /// <li> <p> <b> <code>Instance.InvalidState</code> </b> - The target is in the stopped or terminated state.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>draining</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.DeregistrationInProgress</code> </b> - The target instance is in the process of being deregistered and the deregistration delay period has not expired.</p> </li>
    /// </ul>
    pub fn instance_health_reason(
        &self,
    ) -> std::option::Option<&crate::types::InstanceHealthReason> {
        self.instance_health_reason.as_ref()
    }
}
impl InstanceHealthSummary {
    /// Creates a new builder-style object to manufacture [`InstanceHealthSummary`](crate::types::InstanceHealthSummary).
    pub fn builder() -> crate::types::builders::InstanceHealthSummaryBuilder {
        crate::types::builders::InstanceHealthSummaryBuilder::default()
    }
}

/// A builder for [`InstanceHealthSummary`](crate::types::InstanceHealthSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceHealthSummaryBuilder {
    pub(crate) instance_name: std::option::Option<std::string::String>,
    pub(crate) instance_health: std::option::Option<crate::types::InstanceHealthState>,
    pub(crate) instance_health_reason: std::option::Option<crate::types::InstanceHealthReason>,
}
impl InstanceHealthSummaryBuilder {
    /// <p>The name of the Lightsail instance for which you are requesting health check data.</p>
    pub fn instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_name = Some(input.into());
        self
    }
    /// <p>The name of the Lightsail instance for which you are requesting health check data.</p>
    pub fn set_instance_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_name = input;
        self
    }
    /// <p>Describes the overall instance health. Valid values are below.</p>
    pub fn instance_health(mut self, input: crate::types::InstanceHealthState) -> Self {
        self.instance_health = Some(input);
        self
    }
    /// <p>Describes the overall instance health. Valid values are below.</p>
    pub fn set_instance_health(
        mut self,
        input: std::option::Option<crate::types::InstanceHealthState>,
    ) -> Self {
        self.instance_health = input;
        self
    }
    /// <p>More information about the instance health. If the <code>instanceHealth</code> is <code>healthy</code>, then an <code>instanceHealthReason</code> value is not provided.</p>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>initial</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Lb.RegistrationInProgress</code> </b> - The target instance is in the process of being registered with the load balancer.</p> </li>
    /// <li> <p> <b> <code>Lb.InitialHealthChecking</code> </b> - The Lightsail load balancer is still sending the target instance the minimum number of health checks required to determine its health status.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>unhealthy</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.ResponseCodeMismatch</code> </b> - The health checks did not return an expected HTTP code.</p> </li>
    /// <li> <p> <b> <code>Instance.Timeout</code> </b> - The health check requests timed out.</p> </li>
    /// <li> <p> <b> <code>Instance.FailedHealthChecks</code> </b> - The health checks failed because the connection to the target instance timed out, the target instance response was malformed, or the target instance failed the health check for an unknown reason.</p> </li>
    /// <li> <p> <b> <code>Lb.InternalError</code> </b> - The health checks failed due to an internal error.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>unused</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.NotRegistered</code> </b> - The target instance is not registered with the target group.</p> </li>
    /// <li> <p> <b> <code>Instance.NotInUse</code> </b> - The target group is not used by any load balancer, or the target instance is in an Availability Zone that is not enabled for its load balancer.</p> </li>
    /// <li> <p> <b> <code>Instance.IpUnusable</code> </b> - The target IP address is reserved for use by a Lightsail load balancer.</p> </li>
    /// <li> <p> <b> <code>Instance.InvalidState</code> </b> - The target is in the stopped or terminated state.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>draining</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.DeregistrationInProgress</code> </b> - The target instance is in the process of being deregistered and the deregistration delay period has not expired.</p> </li>
    /// </ul>
    pub fn instance_health_reason(mut self, input: crate::types::InstanceHealthReason) -> Self {
        self.instance_health_reason = Some(input);
        self
    }
    /// <p>More information about the instance health. If the <code>instanceHealth</code> is <code>healthy</code>, then an <code>instanceHealthReason</code> value is not provided.</p>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>initial</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Lb.RegistrationInProgress</code> </b> - The target instance is in the process of being registered with the load balancer.</p> </li>
    /// <li> <p> <b> <code>Lb.InitialHealthChecking</code> </b> - The Lightsail load balancer is still sending the target instance the minimum number of health checks required to determine its health status.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>unhealthy</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.ResponseCodeMismatch</code> </b> - The health checks did not return an expected HTTP code.</p> </li>
    /// <li> <p> <b> <code>Instance.Timeout</code> </b> - The health check requests timed out.</p> </li>
    /// <li> <p> <b> <code>Instance.FailedHealthChecks</code> </b> - The health checks failed because the connection to the target instance timed out, the target instance response was malformed, or the target instance failed the health check for an unknown reason.</p> </li>
    /// <li> <p> <b> <code>Lb.InternalError</code> </b> - The health checks failed due to an internal error.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>unused</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.NotRegistered</code> </b> - The target instance is not registered with the target group.</p> </li>
    /// <li> <p> <b> <code>Instance.NotInUse</code> </b> - The target group is not used by any load balancer, or the target instance is in an Availability Zone that is not enabled for its load balancer.</p> </li>
    /// <li> <p> <b> <code>Instance.IpUnusable</code> </b> - The target IP address is reserved for use by a Lightsail load balancer.</p> </li>
    /// <li> <p> <b> <code>Instance.InvalidState</code> </b> - The target is in the stopped or terminated state.</p> </li>
    /// </ul>
    /// <p>If <b> <code>instanceHealth</code> </b> is <code>draining</code>, the <b> <code>instanceHealthReason</code> </b> value can be one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>Instance.DeregistrationInProgress</code> </b> - The target instance is in the process of being deregistered and the deregistration delay period has not expired.</p> </li>
    /// </ul>
    pub fn set_instance_health_reason(
        mut self,
        input: std::option::Option<crate::types::InstanceHealthReason>,
    ) -> Self {
        self.instance_health_reason = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceHealthSummary`](crate::types::InstanceHealthSummary).
    pub fn build(self) -> crate::types::InstanceHealthSummary {
        crate::types::InstanceHealthSummary {
            instance_name: self.instance_name,
            instance_health: self.instance_health,
            instance_health_reason: self.instance_health_reason,
        }
    }
}
