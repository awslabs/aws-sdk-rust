// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the virtual private server (or <i>instance</i>) status.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceState {
    /// <p>The status code for the instance.</p>
    #[doc(hidden)]
    pub code: std::option::Option<i32>,
    /// <p>The state of the instance (e.g., <code>running</code> or <code>pending</code>).</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl InstanceState {
    /// <p>The status code for the instance.</p>
    pub fn code(&self) -> std::option::Option<i32> {
        self.code
    }
    /// <p>The state of the instance (e.g., <code>running</code> or <code>pending</code>).</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl InstanceState {
    /// Creates a new builder-style object to manufacture [`InstanceState`](crate::types::InstanceState).
    pub fn builder() -> crate::types::builders::InstanceStateBuilder {
        crate::types::builders::InstanceStateBuilder::default()
    }
}

/// A builder for [`InstanceState`](crate::types::InstanceState).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceStateBuilder {
    pub(crate) code: std::option::Option<i32>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl InstanceStateBuilder {
    /// <p>The status code for the instance.</p>
    pub fn code(mut self, input: i32) -> Self {
        self.code = Some(input);
        self
    }
    /// <p>The status code for the instance.</p>
    pub fn set_code(mut self, input: std::option::Option<i32>) -> Self {
        self.code = input;
        self
    }
    /// <p>The state of the instance (e.g., <code>running</code> or <code>pending</code>).</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The state of the instance (e.g., <code>running</code> or <code>pending</code>).</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceState`](crate::types::InstanceState).
    pub fn build(self) -> crate::types::InstanceState {
        crate::types::InstanceState {
            code: self.code,
            name: self.name,
        }
    }
}
