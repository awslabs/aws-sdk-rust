// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Amazon Lightsail container service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContainerService {
    /// <p>The name of the container service.</p>
    #[doc(hidden)]
    pub container_service_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the container service.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The timestamp when the container service was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>An object that describes the location of the container service, such as the Amazon Web Services Region and Availability Zone.</p>
    #[doc(hidden)]
    pub location: std::option::Option<crate::types::ResourceLocation>,
    /// <p>The Lightsail resource type of the container service (i.e., <code>ContainerService</code>).</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The power specification of the container service.</p>
    /// <p>The power specifies the amount of RAM, the number of vCPUs, and the base price of the container service.</p>
    #[doc(hidden)]
    pub power: std::option::Option<crate::types::ContainerServicePowerName>,
    /// <p>The ID of the power of the container service.</p>
    #[doc(hidden)]
    pub power_id: std::option::Option<std::string::String>,
    /// <p>The current state of the container service.</p>
    /// <p>The following container service states are possible:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> - The container service is being created.</p> </li>
    /// <li> <p> <code>READY</code> - The container service is running but it does not have an active container deployment.</p> </li>
    /// <li> <p> <code>DEPLOYING</code> - The container service is launching a container deployment.</p> </li>
    /// <li> <p> <code>RUNNING</code> - The container service is running and it has an active container deployment.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The container service capacity or its custom domains are being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The container service is being deleted.</p> </li>
    /// <li> <p> <code>DISABLED</code> - The container service is disabled, and its active deployment and containers, if any, are shut down.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ContainerServiceState>,
    /// <p>An object that describes the current state of the container service.</p> <note>
    /// <p>The state detail is populated only when a container service is in a <code>PENDING</code>, <code>DEPLOYING</code>, or <code>UPDATING</code> state.</p>
    /// </note>
    #[doc(hidden)]
    pub state_detail: std::option::Option<crate::types::ContainerServiceStateDetail>,
    /// <p>The scale specification of the container service.</p>
    /// <p>The scale specifies the allocated compute nodes of the container service.</p>
    #[doc(hidden)]
    pub scale: std::option::Option<i32>,
    /// <p>An object that describes the current container deployment of the container service.</p>
    #[doc(hidden)]
    pub current_deployment: std::option::Option<crate::types::ContainerServiceDeployment>,
    /// <p>An object that describes the next deployment of the container service.</p>
    /// <p>This value is <code>null</code> when there is no deployment in a <code>pending</code> state.</p>
    #[doc(hidden)]
    pub next_deployment: std::option::Option<crate::types::ContainerServiceDeployment>,
    /// <p>A Boolean value indicating whether the container service is disabled.</p>
    #[doc(hidden)]
    pub is_disabled: std::option::Option<bool>,
    /// <p>The principal ARN of the container service.</p>
    /// <p>The principal ARN can be used to create a trust relationship between your standard Amazon Web Services account and your Lightsail container service. This allows you to give your service permission to access resources in your standard Amazon Web Services account.</p>
    #[doc(hidden)]
    pub principal_arn: std::option::Option<std::string::String>,
    /// <p>The private domain name of the container service.</p>
    /// <p>The private domain name is accessible only by other resources within the default virtual private cloud (VPC) of your Lightsail account.</p>
    #[doc(hidden)]
    pub private_domain_name: std::option::Option<std::string::String>,
    /// <p>The public domain name of the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>
    /// <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>
    /// <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>
    /// <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>
    /// </important>
    /// <p>See <code>CreateContainerService</code> or <code>UpdateContainerService</code> for information about how to specify public domain names for your Lightsail container service.</p>
    #[doc(hidden)]
    pub public_domain_names: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    /// <p>The publicly accessible URL of the container service.</p>
    /// <p>If no public endpoint is specified in the <code>currentDeployment</code>, this URL returns a 404 response.</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// <p>An object that describes the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
    /// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    #[doc(hidden)]
    pub private_registry_access: std::option::Option<crate::types::PrivateRegistryAccess>,
}
impl ContainerService {
    /// <p>The name of the container service.</p>
    pub fn container_service_name(&self) -> std::option::Option<&str> {
        self.container_service_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the container service.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The timestamp when the container service was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>An object that describes the location of the container service, such as the Amazon Web Services Region and Availability Zone.</p>
    pub fn location(&self) -> std::option::Option<&crate::types::ResourceLocation> {
        self.location.as_ref()
    }
    /// <p>The Lightsail resource type of the container service (i.e., <code>ContainerService</code>).</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The power specification of the container service.</p>
    /// <p>The power specifies the amount of RAM, the number of vCPUs, and the base price of the container service.</p>
    pub fn power(&self) -> std::option::Option<&crate::types::ContainerServicePowerName> {
        self.power.as_ref()
    }
    /// <p>The ID of the power of the container service.</p>
    pub fn power_id(&self) -> std::option::Option<&str> {
        self.power_id.as_deref()
    }
    /// <p>The current state of the container service.</p>
    /// <p>The following container service states are possible:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> - The container service is being created.</p> </li>
    /// <li> <p> <code>READY</code> - The container service is running but it does not have an active container deployment.</p> </li>
    /// <li> <p> <code>DEPLOYING</code> - The container service is launching a container deployment.</p> </li>
    /// <li> <p> <code>RUNNING</code> - The container service is running and it has an active container deployment.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The container service capacity or its custom domains are being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The container service is being deleted.</p> </li>
    /// <li> <p> <code>DISABLED</code> - The container service is disabled, and its active deployment and containers, if any, are shut down.</p> </li>
    /// </ul>
    pub fn state(&self) -> std::option::Option<&crate::types::ContainerServiceState> {
        self.state.as_ref()
    }
    /// <p>An object that describes the current state of the container service.</p> <note>
    /// <p>The state detail is populated only when a container service is in a <code>PENDING</code>, <code>DEPLOYING</code>, or <code>UPDATING</code> state.</p>
    /// </note>
    pub fn state_detail(&self) -> std::option::Option<&crate::types::ContainerServiceStateDetail> {
        self.state_detail.as_ref()
    }
    /// <p>The scale specification of the container service.</p>
    /// <p>The scale specifies the allocated compute nodes of the container service.</p>
    pub fn scale(&self) -> std::option::Option<i32> {
        self.scale
    }
    /// <p>An object that describes the current container deployment of the container service.</p>
    pub fn current_deployment(
        &self,
    ) -> std::option::Option<&crate::types::ContainerServiceDeployment> {
        self.current_deployment.as_ref()
    }
    /// <p>An object that describes the next deployment of the container service.</p>
    /// <p>This value is <code>null</code> when there is no deployment in a <code>pending</code> state.</p>
    pub fn next_deployment(
        &self,
    ) -> std::option::Option<&crate::types::ContainerServiceDeployment> {
        self.next_deployment.as_ref()
    }
    /// <p>A Boolean value indicating whether the container service is disabled.</p>
    pub fn is_disabled(&self) -> std::option::Option<bool> {
        self.is_disabled
    }
    /// <p>The principal ARN of the container service.</p>
    /// <p>The principal ARN can be used to create a trust relationship between your standard Amazon Web Services account and your Lightsail container service. This allows you to give your service permission to access resources in your standard Amazon Web Services account.</p>
    pub fn principal_arn(&self) -> std::option::Option<&str> {
        self.principal_arn.as_deref()
    }
    /// <p>The private domain name of the container service.</p>
    /// <p>The private domain name is accessible only by other resources within the default virtual private cloud (VPC) of your Lightsail account.</p>
    pub fn private_domain_name(&self) -> std::option::Option<&str> {
        self.private_domain_name.as_deref()
    }
    /// <p>The public domain name of the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>
    /// <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>
    /// <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>
    /// <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>
    /// </important>
    /// <p>See <code>CreateContainerService</code> or <code>UpdateContainerService</code> for information about how to specify public domain names for your Lightsail container service.</p>
    pub fn public_domain_names(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.public_domain_names.as_ref()
    }
    /// <p>The publicly accessible URL of the container service.</p>
    /// <p>If no public endpoint is specified in the <code>currentDeployment</code>, this URL returns a 404 response.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>An object that describes the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
    /// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn private_registry_access(
        &self,
    ) -> std::option::Option<&crate::types::PrivateRegistryAccess> {
        self.private_registry_access.as_ref()
    }
}
impl ContainerService {
    /// Creates a new builder-style object to manufacture [`ContainerService`](crate::types::ContainerService).
    pub fn builder() -> crate::types::builders::ContainerServiceBuilder {
        crate::types::builders::ContainerServiceBuilder::default()
    }
}

/// A builder for [`ContainerService`](crate::types::ContainerService).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContainerServiceBuilder {
    pub(crate) container_service_name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) location: std::option::Option<crate::types::ResourceLocation>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) power: std::option::Option<crate::types::ContainerServicePowerName>,
    pub(crate) power_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ContainerServiceState>,
    pub(crate) state_detail: std::option::Option<crate::types::ContainerServiceStateDetail>,
    pub(crate) scale: std::option::Option<i32>,
    pub(crate) current_deployment: std::option::Option<crate::types::ContainerServiceDeployment>,
    pub(crate) next_deployment: std::option::Option<crate::types::ContainerServiceDeployment>,
    pub(crate) is_disabled: std::option::Option<bool>,
    pub(crate) principal_arn: std::option::Option<std::string::String>,
    pub(crate) private_domain_name: std::option::Option<std::string::String>,
    pub(crate) public_domain_names: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) private_registry_access: std::option::Option<crate::types::PrivateRegistryAccess>,
}
impl ContainerServiceBuilder {
    /// <p>The name of the container service.</p>
    pub fn container_service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_service_name = Some(input.into());
        self
    }
    /// <p>The name of the container service.</p>
    pub fn set_container_service_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.container_service_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the container service.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the container service.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The timestamp when the container service was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The timestamp when the container service was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>An object that describes the location of the container service, such as the Amazon Web Services Region and Availability Zone.</p>
    pub fn location(mut self, input: crate::types::ResourceLocation) -> Self {
        self.location = Some(input);
        self
    }
    /// <p>An object that describes the location of the container service, such as the Amazon Web Services Region and Availability Zone.</p>
    pub fn set_location(
        mut self,
        input: std::option::Option<crate::types::ResourceLocation>,
    ) -> Self {
        self.location = input;
        self
    }
    /// <p>The Lightsail resource type of the container service (i.e., <code>ContainerService</code>).</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>The Lightsail resource type of the container service (i.e., <code>ContainerService</code>).</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tag keys and optional values for the resource. For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The power specification of the container service.</p>
    /// <p>The power specifies the amount of RAM, the number of vCPUs, and the base price of the container service.</p>
    pub fn power(mut self, input: crate::types::ContainerServicePowerName) -> Self {
        self.power = Some(input);
        self
    }
    /// <p>The power specification of the container service.</p>
    /// <p>The power specifies the amount of RAM, the number of vCPUs, and the base price of the container service.</p>
    pub fn set_power(
        mut self,
        input: std::option::Option<crate::types::ContainerServicePowerName>,
    ) -> Self {
        self.power = input;
        self
    }
    /// <p>The ID of the power of the container service.</p>
    pub fn power_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.power_id = Some(input.into());
        self
    }
    /// <p>The ID of the power of the container service.</p>
    pub fn set_power_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.power_id = input;
        self
    }
    /// <p>The current state of the container service.</p>
    /// <p>The following container service states are possible:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> - The container service is being created.</p> </li>
    /// <li> <p> <code>READY</code> - The container service is running but it does not have an active container deployment.</p> </li>
    /// <li> <p> <code>DEPLOYING</code> - The container service is launching a container deployment.</p> </li>
    /// <li> <p> <code>RUNNING</code> - The container service is running and it has an active container deployment.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The container service capacity or its custom domains are being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The container service is being deleted.</p> </li>
    /// <li> <p> <code>DISABLED</code> - The container service is disabled, and its active deployment and containers, if any, are shut down.</p> </li>
    /// </ul>
    pub fn state(mut self, input: crate::types::ContainerServiceState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The current state of the container service.</p>
    /// <p>The following container service states are possible:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> - The container service is being created.</p> </li>
    /// <li> <p> <code>READY</code> - The container service is running but it does not have an active container deployment.</p> </li>
    /// <li> <p> <code>DEPLOYING</code> - The container service is launching a container deployment.</p> </li>
    /// <li> <p> <code>RUNNING</code> - The container service is running and it has an active container deployment.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The container service capacity or its custom domains are being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The container service is being deleted.</p> </li>
    /// <li> <p> <code>DISABLED</code> - The container service is disabled, and its active deployment and containers, if any, are shut down.</p> </li>
    /// </ul>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::ContainerServiceState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>An object that describes the current state of the container service.</p> <note>
    /// <p>The state detail is populated only when a container service is in a <code>PENDING</code>, <code>DEPLOYING</code>, or <code>UPDATING</code> state.</p>
    /// </note>
    pub fn state_detail(mut self, input: crate::types::ContainerServiceStateDetail) -> Self {
        self.state_detail = Some(input);
        self
    }
    /// <p>An object that describes the current state of the container service.</p> <note>
    /// <p>The state detail is populated only when a container service is in a <code>PENDING</code>, <code>DEPLOYING</code>, or <code>UPDATING</code> state.</p>
    /// </note>
    pub fn set_state_detail(
        mut self,
        input: std::option::Option<crate::types::ContainerServiceStateDetail>,
    ) -> Self {
        self.state_detail = input;
        self
    }
    /// <p>The scale specification of the container service.</p>
    /// <p>The scale specifies the allocated compute nodes of the container service.</p>
    pub fn scale(mut self, input: i32) -> Self {
        self.scale = Some(input);
        self
    }
    /// <p>The scale specification of the container service.</p>
    /// <p>The scale specifies the allocated compute nodes of the container service.</p>
    pub fn set_scale(mut self, input: std::option::Option<i32>) -> Self {
        self.scale = input;
        self
    }
    /// <p>An object that describes the current container deployment of the container service.</p>
    pub fn current_deployment(mut self, input: crate::types::ContainerServiceDeployment) -> Self {
        self.current_deployment = Some(input);
        self
    }
    /// <p>An object that describes the current container deployment of the container service.</p>
    pub fn set_current_deployment(
        mut self,
        input: std::option::Option<crate::types::ContainerServiceDeployment>,
    ) -> Self {
        self.current_deployment = input;
        self
    }
    /// <p>An object that describes the next deployment of the container service.</p>
    /// <p>This value is <code>null</code> when there is no deployment in a <code>pending</code> state.</p>
    pub fn next_deployment(mut self, input: crate::types::ContainerServiceDeployment) -> Self {
        self.next_deployment = Some(input);
        self
    }
    /// <p>An object that describes the next deployment of the container service.</p>
    /// <p>This value is <code>null</code> when there is no deployment in a <code>pending</code> state.</p>
    pub fn set_next_deployment(
        mut self,
        input: std::option::Option<crate::types::ContainerServiceDeployment>,
    ) -> Self {
        self.next_deployment = input;
        self
    }
    /// <p>A Boolean value indicating whether the container service is disabled.</p>
    pub fn is_disabled(mut self, input: bool) -> Self {
        self.is_disabled = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether the container service is disabled.</p>
    pub fn set_is_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.is_disabled = input;
        self
    }
    /// <p>The principal ARN of the container service.</p>
    /// <p>The principal ARN can be used to create a trust relationship between your standard Amazon Web Services account and your Lightsail container service. This allows you to give your service permission to access resources in your standard Amazon Web Services account.</p>
    pub fn principal_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_arn = Some(input.into());
        self
    }
    /// <p>The principal ARN of the container service.</p>
    /// <p>The principal ARN can be used to create a trust relationship between your standard Amazon Web Services account and your Lightsail container service. This allows you to give your service permission to access resources in your standard Amazon Web Services account.</p>
    pub fn set_principal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_arn = input;
        self
    }
    /// <p>The private domain name of the container service.</p>
    /// <p>The private domain name is accessible only by other resources within the default virtual private cloud (VPC) of your Lightsail account.</p>
    pub fn private_domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_domain_name = Some(input.into());
        self
    }
    /// <p>The private domain name of the container service.</p>
    /// <p>The private domain name is accessible only by other resources within the default virtual private cloud (VPC) of your Lightsail account.</p>
    pub fn set_private_domain_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.private_domain_name = input;
        self
    }
    /// Adds a key-value pair to `public_domain_names`.
    ///
    /// To override the contents of this collection use [`set_public_domain_names`](Self::set_public_domain_names).
    ///
    /// <p>The public domain name of the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>
    /// <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>
    /// <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>
    /// <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>
    /// </important>
    /// <p>See <code>CreateContainerService</code> or <code>UpdateContainerService</code> for information about how to specify public domain names for your Lightsail container service.</p>
    pub fn public_domain_names(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.public_domain_names.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.public_domain_names = Some(hash_map);
        self
    }
    /// <p>The public domain name of the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>
    /// <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>
    /// <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>
    /// <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>
    /// </important>
    /// <p>See <code>CreateContainerService</code> or <code>UpdateContainerService</code> for information about how to specify public domain names for your Lightsail container service.</p>
    pub fn set_public_domain_names(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.public_domain_names = input;
        self
    }
    /// <p>The publicly accessible URL of the container service.</p>
    /// <p>If no public endpoint is specified in the <code>currentDeployment</code>, this URL returns a 404 response.</p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>The publicly accessible URL of the container service.</p>
    /// <p>If no public endpoint is specified in the <code>currentDeployment</code>, this URL returns a 404 response.</p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>An object that describes the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
    /// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn private_registry_access(mut self, input: crate::types::PrivateRegistryAccess) -> Self {
        self.private_registry_access = Some(input);
        self
    }
    /// <p>An object that describes the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
    /// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn set_private_registry_access(
        mut self,
        input: std::option::Option<crate::types::PrivateRegistryAccess>,
    ) -> Self {
        self.private_registry_access = input;
        self
    }
    /// Consumes the builder and constructs a [`ContainerService`](crate::types::ContainerService).
    pub fn build(self) -> crate::types::ContainerService {
        crate::types::ContainerService {
            container_service_name: self.container_service_name,
            arn: self.arn,
            created_at: self.created_at,
            location: self.location,
            resource_type: self.resource_type,
            tags: self.tags,
            power: self.power,
            power_id: self.power_id,
            state: self.state,
            state_detail: self.state_detail,
            scale: self.scale,
            current_deployment: self.current_deployment,
            next_deployment: self.next_deployment,
            is_disabled: self.is_disabled,
            principal_arn: self.principal_arn,
            private_domain_name: self.private_domain_name,
            public_domain_names: self.public_domain_names,
            url: self.url,
            private_registry_access: self.private_registry_access,
        }
    }
}
