// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the request headers that a Lightsail distribution bases caching on.</p>
/// <p>For the headers that you specify, your distribution caches separate versions of the specified content based on the header values in viewer requests. For example, suppose viewer requests for <code>logo.jpg</code> contain a custom <code>product</code> header that has a value of either <code>acme</code> or <code>apex</code>, and you configure your distribution to cache your content based on values in the <code>product</code> header. Your distribution forwards the <code>product</code> header to the origin and caches the response from the origin once for each header value. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HeaderObject {
    /// <p>The headers that you want your distribution to forward to your origin and base caching on.</p>
    /// <p>You can configure your distribution to do one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>all</code> </b> - Forward all headers to your origin.</p> </li>
    /// <li> <p> <b> <code>none</code> </b> - Forward only the default headers.</p> </li>
    /// <li> <p> <b> <code>allow-list</code> </b> - Forward only the headers you specify using the <code>headersAllowList</code> parameter.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub option: std::option::Option<crate::types::ForwardValues>,
    /// <p>The specific headers to forward to your distribution's origin.</p>
    #[doc(hidden)]
    pub headers_allow_list: std::option::Option<std::vec::Vec<crate::types::HeaderEnum>>,
}
impl HeaderObject {
    /// <p>The headers that you want your distribution to forward to your origin and base caching on.</p>
    /// <p>You can configure your distribution to do one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>all</code> </b> - Forward all headers to your origin.</p> </li>
    /// <li> <p> <b> <code>none</code> </b> - Forward only the default headers.</p> </li>
    /// <li> <p> <b> <code>allow-list</code> </b> - Forward only the headers you specify using the <code>headersAllowList</code> parameter.</p> </li>
    /// </ul>
    pub fn option(&self) -> std::option::Option<&crate::types::ForwardValues> {
        self.option.as_ref()
    }
    /// <p>The specific headers to forward to your distribution's origin.</p>
    pub fn headers_allow_list(&self) -> std::option::Option<&[crate::types::HeaderEnum]> {
        self.headers_allow_list.as_deref()
    }
}
impl HeaderObject {
    /// Creates a new builder-style object to manufacture [`HeaderObject`](crate::types::HeaderObject).
    pub fn builder() -> crate::types::builders::HeaderObjectBuilder {
        crate::types::builders::HeaderObjectBuilder::default()
    }
}

/// A builder for [`HeaderObject`](crate::types::HeaderObject).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HeaderObjectBuilder {
    pub(crate) option: std::option::Option<crate::types::ForwardValues>,
    pub(crate) headers_allow_list: std::option::Option<std::vec::Vec<crate::types::HeaderEnum>>,
}
impl HeaderObjectBuilder {
    /// <p>The headers that you want your distribution to forward to your origin and base caching on.</p>
    /// <p>You can configure your distribution to do one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>all</code> </b> - Forward all headers to your origin.</p> </li>
    /// <li> <p> <b> <code>none</code> </b> - Forward only the default headers.</p> </li>
    /// <li> <p> <b> <code>allow-list</code> </b> - Forward only the headers you specify using the <code>headersAllowList</code> parameter.</p> </li>
    /// </ul>
    pub fn option(mut self, input: crate::types::ForwardValues) -> Self {
        self.option = Some(input);
        self
    }
    /// <p>The headers that you want your distribution to forward to your origin and base caching on.</p>
    /// <p>You can configure your distribution to do one of the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>all</code> </b> - Forward all headers to your origin.</p> </li>
    /// <li> <p> <b> <code>none</code> </b> - Forward only the default headers.</p> </li>
    /// <li> <p> <b> <code>allow-list</code> </b> - Forward only the headers you specify using the <code>headersAllowList</code> parameter.</p> </li>
    /// </ul>
    pub fn set_option(mut self, input: std::option::Option<crate::types::ForwardValues>) -> Self {
        self.option = input;
        self
    }
    /// Appends an item to `headers_allow_list`.
    ///
    /// To override the contents of this collection use [`set_headers_allow_list`](Self::set_headers_allow_list).
    ///
    /// <p>The specific headers to forward to your distribution's origin.</p>
    pub fn headers_allow_list(mut self, input: crate::types::HeaderEnum) -> Self {
        let mut v = self.headers_allow_list.unwrap_or_default();
        v.push(input);
        self.headers_allow_list = Some(v);
        self
    }
    /// <p>The specific headers to forward to your distribution's origin.</p>
    pub fn set_headers_allow_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HeaderEnum>>,
    ) -> Self {
        self.headers_allow_list = input;
        self
    }
    /// Consumes the builder and constructs a [`HeaderObject`](crate::types::HeaderObject).
    pub fn build(self) -> crate::types::HeaderObject {
        crate::types::HeaderObject {
            option: self.option,
            headers_allow_list: self.headers_allow_list,
        }
    }
}
