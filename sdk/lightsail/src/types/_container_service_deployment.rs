// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a container deployment configuration of an Amazon Lightsail container service.</p>
/// <p>A deployment specifies the settings, such as the ports and launch command, of containers that are deployed to your container service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContainerServiceDeployment {
    /// <p>The version number of the deployment.</p>
    #[doc(hidden)]
    pub version: std::option::Option<i32>,
    /// <p>The state of the deployment.</p>
    /// <p>A deployment can be in one of the following states:</p>
    /// <ul>
    /// <li> <p> <code>Activating</code> - The deployment is being created.</p> </li>
    /// <li> <p> <code>Active</code> - The deployment was successfully created, and it's currently running on the container service. The container service can have only one deployment in an active state at a time.</p> </li>
    /// <li> <p> <code>Inactive</code> - The deployment was previously successfully created, but it is not currently running on the container service.</p> </li>
    /// <li> <p> <code>Failed</code> - The deployment failed. Use the <code>GetContainerLog</code> action to view the log events for the containers in the deployment to try to determine the reason for the failure.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ContainerServiceDeploymentState>,
    /// <p>An object that describes the configuration for the containers of the deployment.</p>
    #[doc(hidden)]
    pub containers: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::Container>,
    >,
    /// <p>An object that describes the endpoint of the deployment.</p>
    #[doc(hidden)]
    pub public_endpoint: std::option::Option<crate::types::ContainerServiceEndpoint>,
    /// <p>The timestamp when the deployment was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl ContainerServiceDeployment {
    /// <p>The version number of the deployment.</p>
    pub fn version(&self) -> std::option::Option<i32> {
        self.version
    }
    /// <p>The state of the deployment.</p>
    /// <p>A deployment can be in one of the following states:</p>
    /// <ul>
    /// <li> <p> <code>Activating</code> - The deployment is being created.</p> </li>
    /// <li> <p> <code>Active</code> - The deployment was successfully created, and it's currently running on the container service. The container service can have only one deployment in an active state at a time.</p> </li>
    /// <li> <p> <code>Inactive</code> - The deployment was previously successfully created, but it is not currently running on the container service.</p> </li>
    /// <li> <p> <code>Failed</code> - The deployment failed. Use the <code>GetContainerLog</code> action to view the log events for the containers in the deployment to try to determine the reason for the failure.</p> </li>
    /// </ul>
    pub fn state(&self) -> std::option::Option<&crate::types::ContainerServiceDeploymentState> {
        self.state.as_ref()
    }
    /// <p>An object that describes the configuration for the containers of the deployment.</p>
    pub fn containers(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, crate::types::Container>>
    {
        self.containers.as_ref()
    }
    /// <p>An object that describes the endpoint of the deployment.</p>
    pub fn public_endpoint(&self) -> std::option::Option<&crate::types::ContainerServiceEndpoint> {
        self.public_endpoint.as_ref()
    }
    /// <p>The timestamp when the deployment was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl ContainerServiceDeployment {
    /// Creates a new builder-style object to manufacture [`ContainerServiceDeployment`](crate::types::ContainerServiceDeployment).
    pub fn builder() -> crate::types::builders::ContainerServiceDeploymentBuilder {
        crate::types::builders::ContainerServiceDeploymentBuilder::default()
    }
}

/// A builder for [`ContainerServiceDeployment`](crate::types::ContainerServiceDeployment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContainerServiceDeploymentBuilder {
    pub(crate) version: std::option::Option<i32>,
    pub(crate) state: std::option::Option<crate::types::ContainerServiceDeploymentState>,
    pub(crate) containers: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::Container>,
    >,
    pub(crate) public_endpoint: std::option::Option<crate::types::ContainerServiceEndpoint>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl ContainerServiceDeploymentBuilder {
    /// <p>The version number of the deployment.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.version = Some(input);
        self
    }
    /// <p>The version number of the deployment.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.version = input;
        self
    }
    /// <p>The state of the deployment.</p>
    /// <p>A deployment can be in one of the following states:</p>
    /// <ul>
    /// <li> <p> <code>Activating</code> - The deployment is being created.</p> </li>
    /// <li> <p> <code>Active</code> - The deployment was successfully created, and it's currently running on the container service. The container service can have only one deployment in an active state at a time.</p> </li>
    /// <li> <p> <code>Inactive</code> - The deployment was previously successfully created, but it is not currently running on the container service.</p> </li>
    /// <li> <p> <code>Failed</code> - The deployment failed. Use the <code>GetContainerLog</code> action to view the log events for the containers in the deployment to try to determine the reason for the failure.</p> </li>
    /// </ul>
    pub fn state(mut self, input: crate::types::ContainerServiceDeploymentState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the deployment.</p>
    /// <p>A deployment can be in one of the following states:</p>
    /// <ul>
    /// <li> <p> <code>Activating</code> - The deployment is being created.</p> </li>
    /// <li> <p> <code>Active</code> - The deployment was successfully created, and it's currently running on the container service. The container service can have only one deployment in an active state at a time.</p> </li>
    /// <li> <p> <code>Inactive</code> - The deployment was previously successfully created, but it is not currently running on the container service.</p> </li>
    /// <li> <p> <code>Failed</code> - The deployment failed. Use the <code>GetContainerLog</code> action to view the log events for the containers in the deployment to try to determine the reason for the failure.</p> </li>
    /// </ul>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::ContainerServiceDeploymentState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// Adds a key-value pair to `containers`.
    ///
    /// To override the contents of this collection use [`set_containers`](Self::set_containers).
    ///
    /// <p>An object that describes the configuration for the containers of the deployment.</p>
    pub fn containers(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::Container,
    ) -> Self {
        let mut hash_map = self.containers.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.containers = Some(hash_map);
        self
    }
    /// <p>An object that describes the configuration for the containers of the deployment.</p>
    pub fn set_containers(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::Container>,
        >,
    ) -> Self {
        self.containers = input;
        self
    }
    /// <p>An object that describes the endpoint of the deployment.</p>
    pub fn public_endpoint(mut self, input: crate::types::ContainerServiceEndpoint) -> Self {
        self.public_endpoint = Some(input);
        self
    }
    /// <p>An object that describes the endpoint of the deployment.</p>
    pub fn set_public_endpoint(
        mut self,
        input: std::option::Option<crate::types::ContainerServiceEndpoint>,
    ) -> Self {
        self.public_endpoint = input;
        self
    }
    /// <p>The timestamp when the deployment was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The timestamp when the deployment was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// Consumes the builder and constructs a [`ContainerServiceDeployment`](crate::types::ContainerServiceDeployment).
    pub fn build(self) -> crate::types::ContainerServiceDeployment {
        crate::types::ContainerServiceDeployment {
            version: self.version,
            state: self.state,
            containers: self.containers,
            public_endpoint: self.public_endpoint,
            created_at: self.created_at,
        }
    }
}
