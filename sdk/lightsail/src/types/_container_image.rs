// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a container image that is registered to an Amazon Lightsail container service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContainerImage {
    /// <p>The name of the container image.</p>
    #[doc(hidden)]
    pub image: std::option::Option<std::string::String>,
    /// <p>The digest of the container image.</p>
    #[doc(hidden)]
    pub digest: std::option::Option<std::string::String>,
    /// <p>The timestamp when the container image was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl ContainerImage {
    /// <p>The name of the container image.</p>
    pub fn image(&self) -> std::option::Option<&str> {
        self.image.as_deref()
    }
    /// <p>The digest of the container image.</p>
    pub fn digest(&self) -> std::option::Option<&str> {
        self.digest.as_deref()
    }
    /// <p>The timestamp when the container image was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl ContainerImage {
    /// Creates a new builder-style object to manufacture [`ContainerImage`](crate::types::ContainerImage).
    pub fn builder() -> crate::types::builders::ContainerImageBuilder {
        crate::types::builders::ContainerImageBuilder::default()
    }
}

/// A builder for [`ContainerImage`](crate::types::ContainerImage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContainerImageBuilder {
    pub(crate) image: std::option::Option<std::string::String>,
    pub(crate) digest: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl ContainerImageBuilder {
    /// <p>The name of the container image.</p>
    pub fn image(mut self, input: impl Into<std::string::String>) -> Self {
        self.image = Some(input.into());
        self
    }
    /// <p>The name of the container image.</p>
    pub fn set_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image = input;
        self
    }
    /// <p>The digest of the container image.</p>
    pub fn digest(mut self, input: impl Into<std::string::String>) -> Self {
        self.digest = Some(input.into());
        self
    }
    /// <p>The digest of the container image.</p>
    pub fn set_digest(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.digest = input;
        self
    }
    /// <p>The timestamp when the container image was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The timestamp when the container image was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// Consumes the builder and constructs a [`ContainerImage`](crate::types::ContainerImage).
    pub fn build(self) -> crate::types::ContainerImage {
        crate::types::ContainerImage {
            image: self.image,
            digest: self.digest,
            created_at: self.created_at,
        }
    }
}
