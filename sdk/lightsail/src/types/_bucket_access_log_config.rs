// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the access log configuration for a bucket in the Amazon Lightsail object storage service.</p>
/// <p>For more information about bucket access logs, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-bucket-access-logs">Logging bucket requests using access logging in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BucketAccessLogConfig {
    /// <p>A Boolean value that indicates whether bucket access logging is enabled for the bucket.</p>
    pub enabled: bool,
    /// <p>The name of the bucket where the access logs are saved. The destination can be a Lightsail bucket in the same account, and in the same Amazon Web Services Region as the source bucket.</p> <note>
    /// <p>This parameter is required when enabling the access log for a bucket, and should be omitted when disabling the access log.</p>
    /// </note>
    pub destination: ::std::option::Option<::std::string::String>,
    /// <p>The optional object prefix for the bucket access log.</p>
    /// <p>The prefix is an optional addition to the object key that organizes your access log files in the destination bucket. For example, if you specify a <code>logs/</code> prefix, then each log object will begin with the <code>logs/</code> prefix in its key (for example, <code>logs/2021-11-01-21-32-16-E568B2907131C0C0</code>).</p> <note>
    /// <p>This parameter can be optionally specified when enabling the access log for a bucket, and should be omitted when disabling the access log.</p>
    /// </note>
    pub prefix: ::std::option::Option<::std::string::String>,
}
impl BucketAccessLogConfig {
    /// <p>A Boolean value that indicates whether bucket access logging is enabled for the bucket.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The name of the bucket where the access logs are saved. The destination can be a Lightsail bucket in the same account, and in the same Amazon Web Services Region as the source bucket.</p> <note>
    /// <p>This parameter is required when enabling the access log for a bucket, and should be omitted when disabling the access log.</p>
    /// </note>
    pub fn destination(&self) -> ::std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p>The optional object prefix for the bucket access log.</p>
    /// <p>The prefix is an optional addition to the object key that organizes your access log files in the destination bucket. For example, if you specify a <code>logs/</code> prefix, then each log object will begin with the <code>logs/</code> prefix in its key (for example, <code>logs/2021-11-01-21-32-16-E568B2907131C0C0</code>).</p> <note>
    /// <p>This parameter can be optionally specified when enabling the access log for a bucket, and should be omitted when disabling the access log.</p>
    /// </note>
    pub fn prefix(&self) -> ::std::option::Option<&str> {
        self.prefix.as_deref()
    }
}
impl BucketAccessLogConfig {
    /// Creates a new builder-style object to manufacture [`BucketAccessLogConfig`](crate::types::BucketAccessLogConfig).
    pub fn builder() -> crate::types::builders::BucketAccessLogConfigBuilder {
        crate::types::builders::BucketAccessLogConfigBuilder::default()
    }
}

/// A builder for [`BucketAccessLogConfig`](crate::types::BucketAccessLogConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BucketAccessLogConfigBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
}
impl BucketAccessLogConfigBuilder {
    /// <p>A Boolean value that indicates whether bucket access logging is enabled for the bucket.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value that indicates whether bucket access logging is enabled for the bucket.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>A Boolean value that indicates whether bucket access logging is enabled for the bucket.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The name of the bucket where the access logs are saved. The destination can be a Lightsail bucket in the same account, and in the same Amazon Web Services Region as the source bucket.</p> <note>
    /// <p>This parameter is required when enabling the access log for a bucket, and should be omitted when disabling the access log.</p>
    /// </note>
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the bucket where the access logs are saved. The destination can be a Lightsail bucket in the same account, and in the same Amazon Web Services Region as the source bucket.</p> <note>
    /// <p>This parameter is required when enabling the access log for a bucket, and should be omitted when disabling the access log.</p>
    /// </note>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The name of the bucket where the access logs are saved. The destination can be a Lightsail bucket in the same account, and in the same Amazon Web Services Region as the source bucket.</p> <note>
    /// <p>This parameter is required when enabling the access log for a bucket, and should be omitted when disabling the access log.</p>
    /// </note>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// <p>The optional object prefix for the bucket access log.</p>
    /// <p>The prefix is an optional addition to the object key that organizes your access log files in the destination bucket. For example, if you specify a <code>logs/</code> prefix, then each log object will begin with the <code>logs/</code> prefix in its key (for example, <code>logs/2021-11-01-21-32-16-E568B2907131C0C0</code>).</p> <note>
    /// <p>This parameter can be optionally specified when enabling the access log for a bucket, and should be omitted when disabling the access log.</p>
    /// </note>
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The optional object prefix for the bucket access log.</p>
    /// <p>The prefix is an optional addition to the object key that organizes your access log files in the destination bucket. For example, if you specify a <code>logs/</code> prefix, then each log object will begin with the <code>logs/</code> prefix in its key (for example, <code>logs/2021-11-01-21-32-16-E568B2907131C0C0</code>).</p> <note>
    /// <p>This parameter can be optionally specified when enabling the access log for a bucket, and should be omitted when disabling the access log.</p>
    /// </note>
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>The optional object prefix for the bucket access log.</p>
    /// <p>The prefix is an optional addition to the object key that organizes your access log files in the destination bucket. For example, if you specify a <code>logs/</code> prefix, then each log object will begin with the <code>logs/</code> prefix in its key (for example, <code>logs/2021-11-01-21-32-16-E568B2907131C0C0</code>).</p> <note>
    /// <p>This parameter can be optionally specified when enabling the access log for a bucket, and should be omitted when disabling the access log.</p>
    /// </note>
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    /// Consumes the builder and constructs a [`BucketAccessLogConfig`](crate::types::BucketAccessLogConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`enabled`](crate::types::builders::BucketAccessLogConfigBuilder::enabled)
    pub fn build(self) -> ::std::result::Result<crate::types::BucketAccessLogConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BucketAccessLogConfig {
            enabled: self.enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enabled",
                    "enabled was not specified but it is required when building BucketAccessLogConfig",
                )
            })?,
            destination: self.destination,
            prefix: self.prefix,
        })
    }
}
