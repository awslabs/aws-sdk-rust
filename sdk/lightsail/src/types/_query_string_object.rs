// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the query string parameters that an Amazon Lightsail content delivery network (CDN) distribution to bases caching on.</p>
/// <p>For the query strings that you specify, your distribution caches separate versions of the specified content based on the query string values in viewer requests.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryStringObject {
    /// <p>Indicates whether the distribution forwards and caches based on query strings.</p>
    #[doc(hidden)]
    pub option: std::option::Option<bool>,
    /// <p>The specific query strings that the distribution forwards to the origin.</p>
    /// <p>Your distribution will cache content based on the specified query strings.</p>
    /// <p>If the <code>option</code> parameter is true, then your distribution forwards all query strings, regardless of what you specify using the <code>queryStringsAllowList</code> parameter.</p>
    #[doc(hidden)]
    pub query_strings_allow_list: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl QueryStringObject {
    /// <p>Indicates whether the distribution forwards and caches based on query strings.</p>
    pub fn option(&self) -> std::option::Option<bool> {
        self.option
    }
    /// <p>The specific query strings that the distribution forwards to the origin.</p>
    /// <p>Your distribution will cache content based on the specified query strings.</p>
    /// <p>If the <code>option</code> parameter is true, then your distribution forwards all query strings, regardless of what you specify using the <code>queryStringsAllowList</code> parameter.</p>
    pub fn query_strings_allow_list(&self) -> std::option::Option<&[std::string::String]> {
        self.query_strings_allow_list.as_deref()
    }
}
impl QueryStringObject {
    /// Creates a new builder-style object to manufacture [`QueryStringObject`](crate::types::QueryStringObject).
    pub fn builder() -> crate::types::builders::QueryStringObjectBuilder {
        crate::types::builders::QueryStringObjectBuilder::default()
    }
}

/// A builder for [`QueryStringObject`](crate::types::QueryStringObject).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueryStringObjectBuilder {
    pub(crate) option: std::option::Option<bool>,
    pub(crate) query_strings_allow_list: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl QueryStringObjectBuilder {
    /// <p>Indicates whether the distribution forwards and caches based on query strings.</p>
    pub fn option(mut self, input: bool) -> Self {
        self.option = Some(input);
        self
    }
    /// <p>Indicates whether the distribution forwards and caches based on query strings.</p>
    pub fn set_option(mut self, input: std::option::Option<bool>) -> Self {
        self.option = input;
        self
    }
    /// Appends an item to `query_strings_allow_list`.
    ///
    /// To override the contents of this collection use [`set_query_strings_allow_list`](Self::set_query_strings_allow_list).
    ///
    /// <p>The specific query strings that the distribution forwards to the origin.</p>
    /// <p>Your distribution will cache content based on the specified query strings.</p>
    /// <p>If the <code>option</code> parameter is true, then your distribution forwards all query strings, regardless of what you specify using the <code>queryStringsAllowList</code> parameter.</p>
    pub fn query_strings_allow_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.query_strings_allow_list.unwrap_or_default();
        v.push(input.into());
        self.query_strings_allow_list = Some(v);
        self
    }
    /// <p>The specific query strings that the distribution forwards to the origin.</p>
    /// <p>Your distribution will cache content based on the specified query strings.</p>
    /// <p>If the <code>option</code> parameter is true, then your distribution forwards all query strings, regardless of what you specify using the <code>queryStringsAllowList</code> parameter.</p>
    pub fn set_query_strings_allow_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.query_strings_allow_list = input;
        self
    }
    /// Consumes the builder and constructs a [`QueryStringObject`](crate::types::QueryStringObject).
    pub fn build(self) -> crate::types::QueryStringObject {
        crate::types::QueryStringObject {
            option: self.option,
            query_strings_allow_list: self.query_strings_allow_list,
        }
    }
}
