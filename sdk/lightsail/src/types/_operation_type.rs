// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `OperationType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let operationtype = unimplemented!();
/// match operationtype {
///     OperationType::AllocateStaticIp => { /* ... */ },
///     OperationType::AttachCertificateToDistribution => { /* ... */ },
///     OperationType::AttachDisk => { /* ... */ },
///     OperationType::AttachInstancesToLoadBalancer => { /* ... */ },
///     OperationType::AttachLoadBalancerTlsCertificate => { /* ... */ },
///     OperationType::AttachStaticIp => { /* ... */ },
///     OperationType::CloseInstancePublicPorts => { /* ... */ },
///     OperationType::CreateBucket => { /* ... */ },
///     OperationType::CreateBucketAccessKey => { /* ... */ },
///     OperationType::CreateCertificate => { /* ... */ },
///     OperationType::CreateContactMethod => { /* ... */ },
///     OperationType::CreateContainerService => { /* ... */ },
///     OperationType::CreateContainerServiceDeployment => { /* ... */ },
///     OperationType::CreateContainerServiceRegistryLogin => { /* ... */ },
///     OperationType::CreateDisk => { /* ... */ },
///     OperationType::CreateDiskFromSnapshot => { /* ... */ },
///     OperationType::CreateDiskSnapshot => { /* ... */ },
///     OperationType::CreateDistribution => { /* ... */ },
///     OperationType::CreateDomain => { /* ... */ },
///     OperationType::CreateInstance => { /* ... */ },
///     OperationType::CreateInstanceSnapshot => { /* ... */ },
///     OperationType::CreateInstancesFromSnapshot => { /* ... */ },
///     OperationType::CreateLoadBalancer => { /* ... */ },
///     OperationType::CreateLoadBalancerTlsCertificate => { /* ... */ },
///     OperationType::CreateRelationalDatabase => { /* ... */ },
///     OperationType::CreateRelationalDatabaseFromSnapshot => { /* ... */ },
///     OperationType::CreateRelationalDatabaseSnapshot => { /* ... */ },
///     OperationType::DeleteAlarm => { /* ... */ },
///     OperationType::DeleteBucket => { /* ... */ },
///     OperationType::DeleteBucketAccessKey => { /* ... */ },
///     OperationType::DeleteCertificate => { /* ... */ },
///     OperationType::DeleteContactMethod => { /* ... */ },
///     OperationType::DeleteContainerImage => { /* ... */ },
///     OperationType::DeleteContainerService => { /* ... */ },
///     OperationType::DeleteDisk => { /* ... */ },
///     OperationType::DeleteDiskSnapshot => { /* ... */ },
///     OperationType::DeleteDistribution => { /* ... */ },
///     OperationType::DeleteDomain => { /* ... */ },
///     OperationType::DeleteDomainEntry => { /* ... */ },
///     OperationType::DeleteInstance => { /* ... */ },
///     OperationType::DeleteInstanceSnapshot => { /* ... */ },
///     OperationType::DeleteKnownHostKeys => { /* ... */ },
///     OperationType::DeleteLoadBalancer => { /* ... */ },
///     OperationType::DeleteLoadBalancerTlsCertificate => { /* ... */ },
///     OperationType::DeleteRelationalDatabase => { /* ... */ },
///     OperationType::DeleteRelationalDatabaseSnapshot => { /* ... */ },
///     OperationType::DetachCertificateFromDistribution => { /* ... */ },
///     OperationType::DetachDisk => { /* ... */ },
///     OperationType::DetachInstancesFromLoadBalancer => { /* ... */ },
///     OperationType::DetachStaticIp => { /* ... */ },
///     OperationType::DisableAddOn => { /* ... */ },
///     OperationType::EnableAddOn => { /* ... */ },
///     OperationType::GetAlarms => { /* ... */ },
///     OperationType::GetContactMethods => { /* ... */ },
///     OperationType::OpenInstancePublicPorts => { /* ... */ },
///     OperationType::PutAlarm => { /* ... */ },
///     OperationType::PutInstancePublicPorts => { /* ... */ },
///     OperationType::RebootInstance => { /* ... */ },
///     OperationType::RebootRelationalDatabase => { /* ... */ },
///     OperationType::RegisterContainerImage => { /* ... */ },
///     OperationType::ReleaseStaticIp => { /* ... */ },
///     OperationType::ResetDistributionCache => { /* ... */ },
///     OperationType::SendContactMethodVerification => { /* ... */ },
///     OperationType::SetIpAddressType => { /* ... */ },
///     OperationType::SetResourceAccessForBucket => { /* ... */ },
///     OperationType::StartInstance => { /* ... */ },
///     OperationType::StartRelationalDatabase => { /* ... */ },
///     OperationType::StopInstance => { /* ... */ },
///     OperationType::StopRelationalDatabase => { /* ... */ },
///     OperationType::TestAlarm => { /* ... */ },
///     OperationType::UpdateBucket => { /* ... */ },
///     OperationType::UpdateBucketBundle => { /* ... */ },
///     OperationType::UpdateContainerService => { /* ... */ },
///     OperationType::UpdateDistribution => { /* ... */ },
///     OperationType::UpdateDistributionBundle => { /* ... */ },
///     OperationType::UpdateDomainEntry => { /* ... */ },
///     OperationType::UpdateInstanceMetadataOptions => { /* ... */ },
///     OperationType::UpdateLoadBalancerAttribute => { /* ... */ },
///     OperationType::UpdateRelationalDatabase => { /* ... */ },
///     OperationType::UpdateRelationalDatabaseParameters => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `operationtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `OperationType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `OperationType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `OperationType::NewFeature` is defined.
/// Specifically, when `operationtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `OperationType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum OperationType {
    #[allow(missing_docs)] // documentation missing in model
    AllocateStaticIp,
    #[allow(missing_docs)] // documentation missing in model
    AttachCertificateToDistribution,
    #[allow(missing_docs)] // documentation missing in model
    AttachDisk,
    #[allow(missing_docs)] // documentation missing in model
    AttachInstancesToLoadBalancer,
    #[allow(missing_docs)] // documentation missing in model
    AttachLoadBalancerTlsCertificate,
    #[allow(missing_docs)] // documentation missing in model
    AttachStaticIp,
    #[allow(missing_docs)] // documentation missing in model
    CloseInstancePublicPorts,
    #[allow(missing_docs)] // documentation missing in model
    CreateBucket,
    #[allow(missing_docs)] // documentation missing in model
    CreateBucketAccessKey,
    #[allow(missing_docs)] // documentation missing in model
    CreateCertificate,
    #[allow(missing_docs)] // documentation missing in model
    CreateContactMethod,
    #[allow(missing_docs)] // documentation missing in model
    CreateContainerService,
    #[allow(missing_docs)] // documentation missing in model
    CreateContainerServiceDeployment,
    #[allow(missing_docs)] // documentation missing in model
    CreateContainerServiceRegistryLogin,
    #[allow(missing_docs)] // documentation missing in model
    CreateDisk,
    #[allow(missing_docs)] // documentation missing in model
    CreateDiskFromSnapshot,
    #[allow(missing_docs)] // documentation missing in model
    CreateDiskSnapshot,
    #[allow(missing_docs)] // documentation missing in model
    CreateDistribution,
    #[allow(missing_docs)] // documentation missing in model
    CreateDomain,
    #[allow(missing_docs)] // documentation missing in model
    CreateInstance,
    #[allow(missing_docs)] // documentation missing in model
    CreateInstanceSnapshot,
    #[allow(missing_docs)] // documentation missing in model
    CreateInstancesFromSnapshot,
    #[allow(missing_docs)] // documentation missing in model
    CreateLoadBalancer,
    #[allow(missing_docs)] // documentation missing in model
    CreateLoadBalancerTlsCertificate,
    #[allow(missing_docs)] // documentation missing in model
    CreateRelationalDatabase,
    #[allow(missing_docs)] // documentation missing in model
    CreateRelationalDatabaseFromSnapshot,
    #[allow(missing_docs)] // documentation missing in model
    CreateRelationalDatabaseSnapshot,
    #[allow(missing_docs)] // documentation missing in model
    DeleteAlarm,
    #[allow(missing_docs)] // documentation missing in model
    DeleteBucket,
    #[allow(missing_docs)] // documentation missing in model
    DeleteBucketAccessKey,
    #[allow(missing_docs)] // documentation missing in model
    DeleteCertificate,
    #[allow(missing_docs)] // documentation missing in model
    DeleteContactMethod,
    #[allow(missing_docs)] // documentation missing in model
    DeleteContainerImage,
    #[allow(missing_docs)] // documentation missing in model
    DeleteContainerService,
    #[allow(missing_docs)] // documentation missing in model
    DeleteDisk,
    #[allow(missing_docs)] // documentation missing in model
    DeleteDiskSnapshot,
    #[allow(missing_docs)] // documentation missing in model
    DeleteDistribution,
    #[allow(missing_docs)] // documentation missing in model
    DeleteDomain,
    #[allow(missing_docs)] // documentation missing in model
    DeleteDomainEntry,
    #[allow(missing_docs)] // documentation missing in model
    DeleteInstance,
    #[allow(missing_docs)] // documentation missing in model
    DeleteInstanceSnapshot,
    #[allow(missing_docs)] // documentation missing in model
    DeleteKnownHostKeys,
    #[allow(missing_docs)] // documentation missing in model
    DeleteLoadBalancer,
    #[allow(missing_docs)] // documentation missing in model
    DeleteLoadBalancerTlsCertificate,
    #[allow(missing_docs)] // documentation missing in model
    DeleteRelationalDatabase,
    #[allow(missing_docs)] // documentation missing in model
    DeleteRelationalDatabaseSnapshot,
    #[allow(missing_docs)] // documentation missing in model
    DetachCertificateFromDistribution,
    #[allow(missing_docs)] // documentation missing in model
    DetachDisk,
    #[allow(missing_docs)] // documentation missing in model
    DetachInstancesFromLoadBalancer,
    #[allow(missing_docs)] // documentation missing in model
    DetachStaticIp,
    #[allow(missing_docs)] // documentation missing in model
    DisableAddOn,
    #[allow(missing_docs)] // documentation missing in model
    EnableAddOn,
    #[allow(missing_docs)] // documentation missing in model
    GetAlarms,
    #[allow(missing_docs)] // documentation missing in model
    GetContactMethods,
    #[allow(missing_docs)] // documentation missing in model
    OpenInstancePublicPorts,
    #[allow(missing_docs)] // documentation missing in model
    PutAlarm,
    #[allow(missing_docs)] // documentation missing in model
    PutInstancePublicPorts,
    #[allow(missing_docs)] // documentation missing in model
    RebootInstance,
    #[allow(missing_docs)] // documentation missing in model
    RebootRelationalDatabase,
    #[allow(missing_docs)] // documentation missing in model
    RegisterContainerImage,
    #[allow(missing_docs)] // documentation missing in model
    ReleaseStaticIp,
    #[allow(missing_docs)] // documentation missing in model
    ResetDistributionCache,
    #[allow(missing_docs)] // documentation missing in model
    SendContactMethodVerification,
    #[allow(missing_docs)] // documentation missing in model
    SetIpAddressType,
    #[allow(missing_docs)] // documentation missing in model
    SetResourceAccessForBucket,
    #[allow(missing_docs)] // documentation missing in model
    StartInstance,
    #[allow(missing_docs)] // documentation missing in model
    StartRelationalDatabase,
    #[allow(missing_docs)] // documentation missing in model
    StopInstance,
    #[allow(missing_docs)] // documentation missing in model
    StopRelationalDatabase,
    #[allow(missing_docs)] // documentation missing in model
    TestAlarm,
    #[allow(missing_docs)] // documentation missing in model
    UpdateBucket,
    #[allow(missing_docs)] // documentation missing in model
    UpdateBucketBundle,
    #[allow(missing_docs)] // documentation missing in model
    UpdateContainerService,
    #[allow(missing_docs)] // documentation missing in model
    UpdateDistribution,
    #[allow(missing_docs)] // documentation missing in model
    UpdateDistributionBundle,
    #[allow(missing_docs)] // documentation missing in model
    UpdateDomainEntry,
    #[allow(missing_docs)] // documentation missing in model
    UpdateInstanceMetadataOptions,
    #[allow(missing_docs)] // documentation missing in model
    UpdateLoadBalancerAttribute,
    #[allow(missing_docs)] // documentation missing in model
    UpdateRelationalDatabase,
    #[allow(missing_docs)] // documentation missing in model
    UpdateRelationalDatabaseParameters,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for OperationType {
    fn from(s: &str) -> Self {
        match s {
            "AllocateStaticIp" => OperationType::AllocateStaticIp,
            "AttachCertificateToDistribution" => OperationType::AttachCertificateToDistribution,
            "AttachDisk" => OperationType::AttachDisk,
            "AttachInstancesToLoadBalancer" => OperationType::AttachInstancesToLoadBalancer,
            "AttachLoadBalancerTlsCertificate" => OperationType::AttachLoadBalancerTlsCertificate,
            "AttachStaticIp" => OperationType::AttachStaticIp,
            "CloseInstancePublicPorts" => OperationType::CloseInstancePublicPorts,
            "CreateBucket" => OperationType::CreateBucket,
            "CreateBucketAccessKey" => OperationType::CreateBucketAccessKey,
            "CreateCertificate" => OperationType::CreateCertificate,
            "CreateContactMethod" => OperationType::CreateContactMethod,
            "CreateContainerService" => OperationType::CreateContainerService,
            "CreateContainerServiceDeployment" => OperationType::CreateContainerServiceDeployment,
            "CreateContainerServiceRegistryLogin" => {
                OperationType::CreateContainerServiceRegistryLogin
            }
            "CreateDisk" => OperationType::CreateDisk,
            "CreateDiskFromSnapshot" => OperationType::CreateDiskFromSnapshot,
            "CreateDiskSnapshot" => OperationType::CreateDiskSnapshot,
            "CreateDistribution" => OperationType::CreateDistribution,
            "CreateDomain" => OperationType::CreateDomain,
            "CreateInstance" => OperationType::CreateInstance,
            "CreateInstanceSnapshot" => OperationType::CreateInstanceSnapshot,
            "CreateInstancesFromSnapshot" => OperationType::CreateInstancesFromSnapshot,
            "CreateLoadBalancer" => OperationType::CreateLoadBalancer,
            "CreateLoadBalancerTlsCertificate" => OperationType::CreateLoadBalancerTlsCertificate,
            "CreateRelationalDatabase" => OperationType::CreateRelationalDatabase,
            "CreateRelationalDatabaseFromSnapshot" => {
                OperationType::CreateRelationalDatabaseFromSnapshot
            }
            "CreateRelationalDatabaseSnapshot" => OperationType::CreateRelationalDatabaseSnapshot,
            "DeleteAlarm" => OperationType::DeleteAlarm,
            "DeleteBucket" => OperationType::DeleteBucket,
            "DeleteBucketAccessKey" => OperationType::DeleteBucketAccessKey,
            "DeleteCertificate" => OperationType::DeleteCertificate,
            "DeleteContactMethod" => OperationType::DeleteContactMethod,
            "DeleteContainerImage" => OperationType::DeleteContainerImage,
            "DeleteContainerService" => OperationType::DeleteContainerService,
            "DeleteDisk" => OperationType::DeleteDisk,
            "DeleteDiskSnapshot" => OperationType::DeleteDiskSnapshot,
            "DeleteDistribution" => OperationType::DeleteDistribution,
            "DeleteDomain" => OperationType::DeleteDomain,
            "DeleteDomainEntry" => OperationType::DeleteDomainEntry,
            "DeleteInstance" => OperationType::DeleteInstance,
            "DeleteInstanceSnapshot" => OperationType::DeleteInstanceSnapshot,
            "DeleteKnownHostKeys" => OperationType::DeleteKnownHostKeys,
            "DeleteLoadBalancer" => OperationType::DeleteLoadBalancer,
            "DeleteLoadBalancerTlsCertificate" => OperationType::DeleteLoadBalancerTlsCertificate,
            "DeleteRelationalDatabase" => OperationType::DeleteRelationalDatabase,
            "DeleteRelationalDatabaseSnapshot" => OperationType::DeleteRelationalDatabaseSnapshot,
            "DetachCertificateFromDistribution" => OperationType::DetachCertificateFromDistribution,
            "DetachDisk" => OperationType::DetachDisk,
            "DetachInstancesFromLoadBalancer" => OperationType::DetachInstancesFromLoadBalancer,
            "DetachStaticIp" => OperationType::DetachStaticIp,
            "DisableAddOn" => OperationType::DisableAddOn,
            "EnableAddOn" => OperationType::EnableAddOn,
            "GetAlarms" => OperationType::GetAlarms,
            "GetContactMethods" => OperationType::GetContactMethods,
            "OpenInstancePublicPorts" => OperationType::OpenInstancePublicPorts,
            "PutAlarm" => OperationType::PutAlarm,
            "PutInstancePublicPorts" => OperationType::PutInstancePublicPorts,
            "RebootInstance" => OperationType::RebootInstance,
            "RebootRelationalDatabase" => OperationType::RebootRelationalDatabase,
            "RegisterContainerImage" => OperationType::RegisterContainerImage,
            "ReleaseStaticIp" => OperationType::ReleaseStaticIp,
            "ResetDistributionCache" => OperationType::ResetDistributionCache,
            "SendContactMethodVerification" => OperationType::SendContactMethodVerification,
            "SetIpAddressType" => OperationType::SetIpAddressType,
            "SetResourceAccessForBucket" => OperationType::SetResourceAccessForBucket,
            "StartInstance" => OperationType::StartInstance,
            "StartRelationalDatabase" => OperationType::StartRelationalDatabase,
            "StopInstance" => OperationType::StopInstance,
            "StopRelationalDatabase" => OperationType::StopRelationalDatabase,
            "TestAlarm" => OperationType::TestAlarm,
            "UpdateBucket" => OperationType::UpdateBucket,
            "UpdateBucketBundle" => OperationType::UpdateBucketBundle,
            "UpdateContainerService" => OperationType::UpdateContainerService,
            "UpdateDistribution" => OperationType::UpdateDistribution,
            "UpdateDistributionBundle" => OperationType::UpdateDistributionBundle,
            "UpdateDomainEntry" => OperationType::UpdateDomainEntry,
            "UpdateInstanceMetadataOptions" => OperationType::UpdateInstanceMetadataOptions,
            "UpdateLoadBalancerAttribute" => OperationType::UpdateLoadBalancerAttribute,
            "UpdateRelationalDatabase" => OperationType::UpdateRelationalDatabase,
            "UpdateRelationalDatabaseParameters" => {
                OperationType::UpdateRelationalDatabaseParameters
            }
            other => {
                OperationType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for OperationType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(OperationType::from(s))
    }
}
impl OperationType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            OperationType::AllocateStaticIp => "AllocateStaticIp",
            OperationType::AttachCertificateToDistribution => "AttachCertificateToDistribution",
            OperationType::AttachDisk => "AttachDisk",
            OperationType::AttachInstancesToLoadBalancer => "AttachInstancesToLoadBalancer",
            OperationType::AttachLoadBalancerTlsCertificate => "AttachLoadBalancerTlsCertificate",
            OperationType::AttachStaticIp => "AttachStaticIp",
            OperationType::CloseInstancePublicPorts => "CloseInstancePublicPorts",
            OperationType::CreateBucket => "CreateBucket",
            OperationType::CreateBucketAccessKey => "CreateBucketAccessKey",
            OperationType::CreateCertificate => "CreateCertificate",
            OperationType::CreateContactMethod => "CreateContactMethod",
            OperationType::CreateContainerService => "CreateContainerService",
            OperationType::CreateContainerServiceDeployment => "CreateContainerServiceDeployment",
            OperationType::CreateContainerServiceRegistryLogin => {
                "CreateContainerServiceRegistryLogin"
            }
            OperationType::CreateDisk => "CreateDisk",
            OperationType::CreateDiskFromSnapshot => "CreateDiskFromSnapshot",
            OperationType::CreateDiskSnapshot => "CreateDiskSnapshot",
            OperationType::CreateDistribution => "CreateDistribution",
            OperationType::CreateDomain => "CreateDomain",
            OperationType::CreateInstance => "CreateInstance",
            OperationType::CreateInstanceSnapshot => "CreateInstanceSnapshot",
            OperationType::CreateInstancesFromSnapshot => "CreateInstancesFromSnapshot",
            OperationType::CreateLoadBalancer => "CreateLoadBalancer",
            OperationType::CreateLoadBalancerTlsCertificate => "CreateLoadBalancerTlsCertificate",
            OperationType::CreateRelationalDatabase => "CreateRelationalDatabase",
            OperationType::CreateRelationalDatabaseFromSnapshot => {
                "CreateRelationalDatabaseFromSnapshot"
            }
            OperationType::CreateRelationalDatabaseSnapshot => "CreateRelationalDatabaseSnapshot",
            OperationType::DeleteAlarm => "DeleteAlarm",
            OperationType::DeleteBucket => "DeleteBucket",
            OperationType::DeleteBucketAccessKey => "DeleteBucketAccessKey",
            OperationType::DeleteCertificate => "DeleteCertificate",
            OperationType::DeleteContactMethod => "DeleteContactMethod",
            OperationType::DeleteContainerImage => "DeleteContainerImage",
            OperationType::DeleteContainerService => "DeleteContainerService",
            OperationType::DeleteDisk => "DeleteDisk",
            OperationType::DeleteDiskSnapshot => "DeleteDiskSnapshot",
            OperationType::DeleteDistribution => "DeleteDistribution",
            OperationType::DeleteDomain => "DeleteDomain",
            OperationType::DeleteDomainEntry => "DeleteDomainEntry",
            OperationType::DeleteInstance => "DeleteInstance",
            OperationType::DeleteInstanceSnapshot => "DeleteInstanceSnapshot",
            OperationType::DeleteKnownHostKeys => "DeleteKnownHostKeys",
            OperationType::DeleteLoadBalancer => "DeleteLoadBalancer",
            OperationType::DeleteLoadBalancerTlsCertificate => "DeleteLoadBalancerTlsCertificate",
            OperationType::DeleteRelationalDatabase => "DeleteRelationalDatabase",
            OperationType::DeleteRelationalDatabaseSnapshot => "DeleteRelationalDatabaseSnapshot",
            OperationType::DetachCertificateFromDistribution => "DetachCertificateFromDistribution",
            OperationType::DetachDisk => "DetachDisk",
            OperationType::DetachInstancesFromLoadBalancer => "DetachInstancesFromLoadBalancer",
            OperationType::DetachStaticIp => "DetachStaticIp",
            OperationType::DisableAddOn => "DisableAddOn",
            OperationType::EnableAddOn => "EnableAddOn",
            OperationType::GetAlarms => "GetAlarms",
            OperationType::GetContactMethods => "GetContactMethods",
            OperationType::OpenInstancePublicPorts => "OpenInstancePublicPorts",
            OperationType::PutAlarm => "PutAlarm",
            OperationType::PutInstancePublicPorts => "PutInstancePublicPorts",
            OperationType::RebootInstance => "RebootInstance",
            OperationType::RebootRelationalDatabase => "RebootRelationalDatabase",
            OperationType::RegisterContainerImage => "RegisterContainerImage",
            OperationType::ReleaseStaticIp => "ReleaseStaticIp",
            OperationType::ResetDistributionCache => "ResetDistributionCache",
            OperationType::SendContactMethodVerification => "SendContactMethodVerification",
            OperationType::SetIpAddressType => "SetIpAddressType",
            OperationType::SetResourceAccessForBucket => "SetResourceAccessForBucket",
            OperationType::StartInstance => "StartInstance",
            OperationType::StartRelationalDatabase => "StartRelationalDatabase",
            OperationType::StopInstance => "StopInstance",
            OperationType::StopRelationalDatabase => "StopRelationalDatabase",
            OperationType::TestAlarm => "TestAlarm",
            OperationType::UpdateBucket => "UpdateBucket",
            OperationType::UpdateBucketBundle => "UpdateBucketBundle",
            OperationType::UpdateContainerService => "UpdateContainerService",
            OperationType::UpdateDistribution => "UpdateDistribution",
            OperationType::UpdateDistributionBundle => "UpdateDistributionBundle",
            OperationType::UpdateDomainEntry => "UpdateDomainEntry",
            OperationType::UpdateInstanceMetadataOptions => "UpdateInstanceMetadataOptions",
            OperationType::UpdateLoadBalancerAttribute => "UpdateLoadBalancerAttribute",
            OperationType::UpdateRelationalDatabase => "UpdateRelationalDatabase",
            OperationType::UpdateRelationalDatabaseParameters => {
                "UpdateRelationalDatabaseParameters"
            }
            OperationType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AllocateStaticIp",
            "AttachCertificateToDistribution",
            "AttachDisk",
            "AttachInstancesToLoadBalancer",
            "AttachLoadBalancerTlsCertificate",
            "AttachStaticIp",
            "CloseInstancePublicPorts",
            "CreateBucket",
            "CreateBucketAccessKey",
            "CreateCertificate",
            "CreateContactMethod",
            "CreateContainerService",
            "CreateContainerServiceDeployment",
            "CreateContainerServiceRegistryLogin",
            "CreateDisk",
            "CreateDiskFromSnapshot",
            "CreateDiskSnapshot",
            "CreateDistribution",
            "CreateDomain",
            "CreateInstance",
            "CreateInstanceSnapshot",
            "CreateInstancesFromSnapshot",
            "CreateLoadBalancer",
            "CreateLoadBalancerTlsCertificate",
            "CreateRelationalDatabase",
            "CreateRelationalDatabaseFromSnapshot",
            "CreateRelationalDatabaseSnapshot",
            "DeleteAlarm",
            "DeleteBucket",
            "DeleteBucketAccessKey",
            "DeleteCertificate",
            "DeleteContactMethod",
            "DeleteContainerImage",
            "DeleteContainerService",
            "DeleteDisk",
            "DeleteDiskSnapshot",
            "DeleteDistribution",
            "DeleteDomain",
            "DeleteDomainEntry",
            "DeleteInstance",
            "DeleteInstanceSnapshot",
            "DeleteKnownHostKeys",
            "DeleteLoadBalancer",
            "DeleteLoadBalancerTlsCertificate",
            "DeleteRelationalDatabase",
            "DeleteRelationalDatabaseSnapshot",
            "DetachCertificateFromDistribution",
            "DetachDisk",
            "DetachInstancesFromLoadBalancer",
            "DetachStaticIp",
            "DisableAddOn",
            "EnableAddOn",
            "GetAlarms",
            "GetContactMethods",
            "OpenInstancePublicPorts",
            "PutAlarm",
            "PutInstancePublicPorts",
            "RebootInstance",
            "RebootRelationalDatabase",
            "RegisterContainerImage",
            "ReleaseStaticIp",
            "ResetDistributionCache",
            "SendContactMethodVerification",
            "SetIpAddressType",
            "SetResourceAccessForBucket",
            "StartInstance",
            "StartRelationalDatabase",
            "StopInstance",
            "StopRelationalDatabase",
            "TestAlarm",
            "UpdateBucket",
            "UpdateBucketBundle",
            "UpdateContainerService",
            "UpdateDistribution",
            "UpdateDistributionBundle",
            "UpdateDomainEntry",
            "UpdateInstanceMetadataOptions",
            "UpdateLoadBalancerAttribute",
            "UpdateRelationalDatabase",
            "UpdateRelationalDatabaseParameters",
        ]
    }
}
impl AsRef<str> for OperationType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
