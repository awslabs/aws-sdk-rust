// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the powers that can be specified for an Amazon Lightsail container service.</p>
/// <p>The power specifies the amount of RAM, the number of vCPUs, and the base price of the container service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContainerServicePower {
    /// <p>The ID of the power (e.g., <code>nano-1</code>).</p>
    #[doc(hidden)]
    pub power_id: std::option::Option<std::string::String>,
    /// <p>The monthly price of the power in USD.</p>
    #[doc(hidden)]
    pub price: std::option::Option<f32>,
    /// <p>The number of vCPUs included in the power.</p>
    #[doc(hidden)]
    pub cpu_count: std::option::Option<f32>,
    /// <p>The amount of RAM (in GB) of the power.</p>
    #[doc(hidden)]
    pub ram_size_in_gb: std::option::Option<f32>,
    /// <p>The friendly name of the power (e.g., <code>nano</code>).</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A Boolean value indicating whether the power is active and can be specified for container services.</p>
    #[doc(hidden)]
    pub is_active: std::option::Option<bool>,
}
impl ContainerServicePower {
    /// <p>The ID of the power (e.g., <code>nano-1</code>).</p>
    pub fn power_id(&self) -> std::option::Option<&str> {
        self.power_id.as_deref()
    }
    /// <p>The monthly price of the power in USD.</p>
    pub fn price(&self) -> std::option::Option<f32> {
        self.price
    }
    /// <p>The number of vCPUs included in the power.</p>
    pub fn cpu_count(&self) -> std::option::Option<f32> {
        self.cpu_count
    }
    /// <p>The amount of RAM (in GB) of the power.</p>
    pub fn ram_size_in_gb(&self) -> std::option::Option<f32> {
        self.ram_size_in_gb
    }
    /// <p>The friendly name of the power (e.g., <code>nano</code>).</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A Boolean value indicating whether the power is active and can be specified for container services.</p>
    pub fn is_active(&self) -> std::option::Option<bool> {
        self.is_active
    }
}
impl ContainerServicePower {
    /// Creates a new builder-style object to manufacture [`ContainerServicePower`](crate::types::ContainerServicePower).
    pub fn builder() -> crate::types::builders::ContainerServicePowerBuilder {
        crate::types::builders::ContainerServicePowerBuilder::default()
    }
}

/// A builder for [`ContainerServicePower`](crate::types::ContainerServicePower).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContainerServicePowerBuilder {
    pub(crate) power_id: std::option::Option<std::string::String>,
    pub(crate) price: std::option::Option<f32>,
    pub(crate) cpu_count: std::option::Option<f32>,
    pub(crate) ram_size_in_gb: std::option::Option<f32>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) is_active: std::option::Option<bool>,
}
impl ContainerServicePowerBuilder {
    /// <p>The ID of the power (e.g., <code>nano-1</code>).</p>
    pub fn power_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.power_id = Some(input.into());
        self
    }
    /// <p>The ID of the power (e.g., <code>nano-1</code>).</p>
    pub fn set_power_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.power_id = input;
        self
    }
    /// <p>The monthly price of the power in USD.</p>
    pub fn price(mut self, input: f32) -> Self {
        self.price = Some(input);
        self
    }
    /// <p>The monthly price of the power in USD.</p>
    pub fn set_price(mut self, input: std::option::Option<f32>) -> Self {
        self.price = input;
        self
    }
    /// <p>The number of vCPUs included in the power.</p>
    pub fn cpu_count(mut self, input: f32) -> Self {
        self.cpu_count = Some(input);
        self
    }
    /// <p>The number of vCPUs included in the power.</p>
    pub fn set_cpu_count(mut self, input: std::option::Option<f32>) -> Self {
        self.cpu_count = input;
        self
    }
    /// <p>The amount of RAM (in GB) of the power.</p>
    pub fn ram_size_in_gb(mut self, input: f32) -> Self {
        self.ram_size_in_gb = Some(input);
        self
    }
    /// <p>The amount of RAM (in GB) of the power.</p>
    pub fn set_ram_size_in_gb(mut self, input: std::option::Option<f32>) -> Self {
        self.ram_size_in_gb = input;
        self
    }
    /// <p>The friendly name of the power (e.g., <code>nano</code>).</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The friendly name of the power (e.g., <code>nano</code>).</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A Boolean value indicating whether the power is active and can be specified for container services.</p>
    pub fn is_active(mut self, input: bool) -> Self {
        self.is_active = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether the power is active and can be specified for container services.</p>
    pub fn set_is_active(mut self, input: std::option::Option<bool>) -> Self {
        self.is_active = input;
        self
    }
    /// Consumes the builder and constructs a [`ContainerServicePower`](crate::types::ContainerServicePower).
    pub fn build(self) -> crate::types::ContainerServicePower {
        crate::types::ContainerServicePower {
            power_id: self.power_id,
            price: self.price,
            cpu_count: self.cpu_count,
            ram_size_in_gb: self.ram_size_in_gb,
            name: self.name,
            is_active: self.is_active,
        }
    }
}
