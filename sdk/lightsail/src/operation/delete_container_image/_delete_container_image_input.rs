// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteContainerImageInput {
    /// <p>The name of the container service for which to delete a registered container image.</p>
    #[doc(hidden)]
    pub service_name: std::option::Option<std::string::String>,
    /// <p>The name of the container image to delete from the container service.</p>
    /// <p>Use the <code>GetContainerImages</code> action to get the name of the container images that are registered to a container service.</p> <note>
    /// <p>Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (<code>:</code>). For example, <code>:container-service-1.mystaticwebsite.1</code>. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, <code>nginx:latest</code> or <code>nginx</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub image: std::option::Option<std::string::String>,
}
impl DeleteContainerImageInput {
    /// <p>The name of the container service for which to delete a registered container image.</p>
    pub fn service_name(&self) -> std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>The name of the container image to delete from the container service.</p>
    /// <p>Use the <code>GetContainerImages</code> action to get the name of the container images that are registered to a container service.</p> <note>
    /// <p>Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (<code>:</code>). For example, <code>:container-service-1.mystaticwebsite.1</code>. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, <code>nginx:latest</code> or <code>nginx</code>.</p>
    /// </note>
    pub fn image(&self) -> std::option::Option<&str> {
        self.image.as_deref()
    }
}
impl DeleteContainerImageInput {
    /// Creates a new builder-style object to manufacture [`DeleteContainerImageInput`](crate::operation::delete_container_image::DeleteContainerImageInput).
    pub fn builder(
    ) -> crate::operation::delete_container_image::builders::DeleteContainerImageInputBuilder {
        crate::operation::delete_container_image::builders::DeleteContainerImageInputBuilder::default()
    }
}

/// A builder for [`DeleteContainerImageInput`](crate::operation::delete_container_image::DeleteContainerImageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteContainerImageInputBuilder {
    pub(crate) service_name: std::option::Option<std::string::String>,
    pub(crate) image: std::option::Option<std::string::String>,
}
impl DeleteContainerImageInputBuilder {
    /// <p>The name of the container service for which to delete a registered container image.</p>
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_name = Some(input.into());
        self
    }
    /// <p>The name of the container service for which to delete a registered container image.</p>
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the container image to delete from the container service.</p>
    /// <p>Use the <code>GetContainerImages</code> action to get the name of the container images that are registered to a container service.</p> <note>
    /// <p>Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (<code>:</code>). For example, <code>:container-service-1.mystaticwebsite.1</code>. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, <code>nginx:latest</code> or <code>nginx</code>.</p>
    /// </note>
    pub fn image(mut self, input: impl Into<std::string::String>) -> Self {
        self.image = Some(input.into());
        self
    }
    /// <p>The name of the container image to delete from the container service.</p>
    /// <p>Use the <code>GetContainerImages</code> action to get the name of the container images that are registered to a container service.</p> <note>
    /// <p>Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (<code>:</code>). For example, <code>:container-service-1.mystaticwebsite.1</code>. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, <code>nginx:latest</code> or <code>nginx</code>.</p>
    /// </note>
    pub fn set_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteContainerImageInput`](crate::operation::delete_container_image::DeleteContainerImageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_container_image::DeleteContainerImageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_container_image::DeleteContainerImageInput {
                service_name: self.service_name,
                image: self.image,
            },
        )
    }
}
