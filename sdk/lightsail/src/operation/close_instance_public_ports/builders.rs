// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::close_instance_public_ports::_close_instance_public_ports_output::CloseInstancePublicPortsOutputBuilder;

pub use crate::operation::close_instance_public_ports::_close_instance_public_ports_input::CloseInstancePublicPortsInputBuilder;

/// Fluent builder constructing a request to `CloseInstancePublicPorts`.
///
/// <p>Closes ports for a specific Amazon Lightsail instance.</p>
/// <p>The <code>CloseInstancePublicPorts</code> action supports tag-based access control via resource tags applied to the resource identified by <code>instanceName</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CloseInstancePublicPortsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::close_instance_public_ports::builders::CloseInstancePublicPortsInputBuilder
            }
impl CloseInstancePublicPortsFluentBuilder {
    /// Creates a new `CloseInstancePublicPorts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::close_instance_public_ports::CloseInstancePublicPorts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::close_instance_public_ports::CloseInstancePublicPortsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::close_instance_public_ports::CloseInstancePublicPortsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::close_instance_public_ports::CloseInstancePublicPortsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>An object to describe the ports to close for the specified instance.</p>
    pub fn port_info(mut self, input: crate::types::PortInfo) -> Self {
        self.inner = self.inner.port_info(input);
        self
    }
    /// <p>An object to describe the ports to close for the specified instance.</p>
    pub fn set_port_info(mut self, input: std::option::Option<crate::types::PortInfo>) -> Self {
        self.inner = self.inner.set_port_info(input);
        self
    }
    /// <p>The name of the instance for which to close ports.</p>
    pub fn instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_name(input.into());
        self
    }
    /// <p>The name of the instance for which to close ports.</p>
    pub fn set_instance_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_instance_name(input);
        self
    }
}
