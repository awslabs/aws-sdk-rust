// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateContactMethodInput {
    /// <p>The protocol of the contact method, such as <code>Email</code> or <code>SMS</code> (text messaging).</p>
    /// <p>The <code>SMS</code> protocol is supported only in the following Amazon Web Services Regions.</p>
    /// <ul>
    /// <li> <p>US East (N. Virginia) (<code>us-east-1</code>)</p> </li>
    /// <li> <p>US West (Oregon) (<code>us-west-2</code>)</p> </li>
    /// <li> <p>Europe (Ireland) (<code>eu-west-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Tokyo) (<code>ap-northeast-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Singapore) (<code>ap-southeast-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Sydney) (<code>ap-southeast-2</code>)</p> </li>
    /// </ul>
    /// <p>For a list of countries/regions where SMS text messages can be sent, and the latest Amazon Web Services Regions where SMS text messaging is supported, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-supported-regions-countries.html">Supported Regions and Countries</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    /// <p>For more information about notifications in Amazon Lightsail, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<crate::types::ContactProtocol>,
    /// <p>The destination of the contact method, such as an email address or a mobile phone number.</p>
    /// <p>Use the E.164 format when specifying a mobile phone number. E.164 is a standard for the phone number structure used for international telecommunication. Phone numbers that follow this format can have a maximum of 15 digits, and they are prefixed with the plus character (+) and the country code. For example, a U.S. phone number in E.164 format would be specified as +1XXX5550100. For more information, see <a href="https://en.wikipedia.org/wiki/E.164">E.164</a> on <i>Wikipedia</i>.</p>
    #[doc(hidden)]
    pub contact_endpoint: std::option::Option<std::string::String>,
}
impl CreateContactMethodInput {
    /// <p>The protocol of the contact method, such as <code>Email</code> or <code>SMS</code> (text messaging).</p>
    /// <p>The <code>SMS</code> protocol is supported only in the following Amazon Web Services Regions.</p>
    /// <ul>
    /// <li> <p>US East (N. Virginia) (<code>us-east-1</code>)</p> </li>
    /// <li> <p>US West (Oregon) (<code>us-west-2</code>)</p> </li>
    /// <li> <p>Europe (Ireland) (<code>eu-west-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Tokyo) (<code>ap-northeast-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Singapore) (<code>ap-southeast-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Sydney) (<code>ap-southeast-2</code>)</p> </li>
    /// </ul>
    /// <p>For a list of countries/regions where SMS text messages can be sent, and the latest Amazon Web Services Regions where SMS text messaging is supported, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-supported-regions-countries.html">Supported Regions and Countries</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    /// <p>For more information about notifications in Amazon Lightsail, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    pub fn protocol(&self) -> std::option::Option<&crate::types::ContactProtocol> {
        self.protocol.as_ref()
    }
    /// <p>The destination of the contact method, such as an email address or a mobile phone number.</p>
    /// <p>Use the E.164 format when specifying a mobile phone number. E.164 is a standard for the phone number structure used for international telecommunication. Phone numbers that follow this format can have a maximum of 15 digits, and they are prefixed with the plus character (+) and the country code. For example, a U.S. phone number in E.164 format would be specified as +1XXX5550100. For more information, see <a href="https://en.wikipedia.org/wiki/E.164">E.164</a> on <i>Wikipedia</i>.</p>
    pub fn contact_endpoint(&self) -> std::option::Option<&str> {
        self.contact_endpoint.as_deref()
    }
}
impl CreateContactMethodInput {
    /// Creates a new builder-style object to manufacture [`CreateContactMethodInput`](crate::operation::create_contact_method::CreateContactMethodInput).
    pub fn builder(
    ) -> crate::operation::create_contact_method::builders::CreateContactMethodInputBuilder {
        crate::operation::create_contact_method::builders::CreateContactMethodInputBuilder::default(
        )
    }
}

/// A builder for [`CreateContactMethodInput`](crate::operation::create_contact_method::CreateContactMethodInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateContactMethodInputBuilder {
    pub(crate) protocol: std::option::Option<crate::types::ContactProtocol>,
    pub(crate) contact_endpoint: std::option::Option<std::string::String>,
}
impl CreateContactMethodInputBuilder {
    /// <p>The protocol of the contact method, such as <code>Email</code> or <code>SMS</code> (text messaging).</p>
    /// <p>The <code>SMS</code> protocol is supported only in the following Amazon Web Services Regions.</p>
    /// <ul>
    /// <li> <p>US East (N. Virginia) (<code>us-east-1</code>)</p> </li>
    /// <li> <p>US West (Oregon) (<code>us-west-2</code>)</p> </li>
    /// <li> <p>Europe (Ireland) (<code>eu-west-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Tokyo) (<code>ap-northeast-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Singapore) (<code>ap-southeast-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Sydney) (<code>ap-southeast-2</code>)</p> </li>
    /// </ul>
    /// <p>For a list of countries/regions where SMS text messages can be sent, and the latest Amazon Web Services Regions where SMS text messaging is supported, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-supported-regions-countries.html">Supported Regions and Countries</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    /// <p>For more information about notifications in Amazon Lightsail, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    pub fn protocol(mut self, input: crate::types::ContactProtocol) -> Self {
        self.protocol = Some(input);
        self
    }
    /// <p>The protocol of the contact method, such as <code>Email</code> or <code>SMS</code> (text messaging).</p>
    /// <p>The <code>SMS</code> protocol is supported only in the following Amazon Web Services Regions.</p>
    /// <ul>
    /// <li> <p>US East (N. Virginia) (<code>us-east-1</code>)</p> </li>
    /// <li> <p>US West (Oregon) (<code>us-west-2</code>)</p> </li>
    /// <li> <p>Europe (Ireland) (<code>eu-west-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Tokyo) (<code>ap-northeast-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Singapore) (<code>ap-southeast-1</code>)</p> </li>
    /// <li> <p>Asia Pacific (Sydney) (<code>ap-southeast-2</code>)</p> </li>
    /// </ul>
    /// <p>For a list of countries/regions where SMS text messages can be sent, and the latest Amazon Web Services Regions where SMS text messaging is supported, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-supported-regions-countries.html">Supported Regions and Countries</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    /// <p>For more information about notifications in Amazon Lightsail, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
    pub fn set_protocol(
        mut self,
        input: std::option::Option<crate::types::ContactProtocol>,
    ) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The destination of the contact method, such as an email address or a mobile phone number.</p>
    /// <p>Use the E.164 format when specifying a mobile phone number. E.164 is a standard for the phone number structure used for international telecommunication. Phone numbers that follow this format can have a maximum of 15 digits, and they are prefixed with the plus character (+) and the country code. For example, a U.S. phone number in E.164 format would be specified as +1XXX5550100. For more information, see <a href="https://en.wikipedia.org/wiki/E.164">E.164</a> on <i>Wikipedia</i>.</p>
    pub fn contact_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_endpoint = Some(input.into());
        self
    }
    /// <p>The destination of the contact method, such as an email address or a mobile phone number.</p>
    /// <p>Use the E.164 format when specifying a mobile phone number. E.164 is a standard for the phone number structure used for international telecommunication. Phone numbers that follow this format can have a maximum of 15 digits, and they are prefixed with the plus character (+) and the country code. For example, a U.S. phone number in E.164 format would be specified as +1XXX5550100. For more information, see <a href="https://en.wikipedia.org/wiki/E.164">E.164</a> on <i>Wikipedia</i>.</p>
    pub fn set_contact_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.contact_endpoint = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateContactMethodInput`](crate::operation::create_contact_method::CreateContactMethodInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_contact_method::CreateContactMethodInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_contact_method::CreateContactMethodInput {
                protocol: self.protocol,
                contact_endpoint: self.contact_endpoint,
            },
        )
    }
}
