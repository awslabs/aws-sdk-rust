// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_relational_database_from_snapshot::_create_relational_database_from_snapshot_output::CreateRelationalDatabaseFromSnapshotOutputBuilder;

pub use crate::operation::create_relational_database_from_snapshot::_create_relational_database_from_snapshot_input::CreateRelationalDatabaseFromSnapshotInputBuilder;

impl CreateRelationalDatabaseFromSnapshotInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_relational_database_from_snapshot();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateRelationalDatabaseFromSnapshot`.
///
/// <p>Creates a new database from an existing database snapshot in Amazon Lightsail.</p>
/// <p>You can create a new database from a snapshot in if something goes wrong with your original database, or to change it to a different plan, such as a high availability or standard plan.</p>
/// <p>The <code>create relational database from snapshot</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by relationalDatabaseSnapshotName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateRelationalDatabaseFromSnapshotFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_relational_database_from_snapshot::builders::CreateRelationalDatabaseFromSnapshotInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotOutput,
        crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotError,
    > for CreateRelationalDatabaseFromSnapshotFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotOutput,
            crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateRelationalDatabaseFromSnapshotFluentBuilder {
    /// Creates a new `CreateRelationalDatabaseFromSnapshot`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateRelationalDatabaseFromSnapshot as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::create_relational_database_from_snapshot::builders::CreateRelationalDatabaseFromSnapshotInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshot::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshot::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotOutput,
        crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name to use for your new Lightsail database resource.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    pub fn relational_database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.relational_database_name(input.into());
        self
    }
    /// <p>The name to use for your new Lightsail database resource.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    pub fn set_relational_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_relational_database_name(input);
        self
    }
    /// <p>The name to use for your new Lightsail database resource.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    pub fn get_relational_database_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_relational_database_name()
    }
    /// <p>The Availability Zone in which to create your new database. Use the <code>us-east-2a</code> case-sensitive format.</p>
    /// <p>You can get a list of Availability Zones by using the <code>get regions</code> operation. Be sure to add the <code>include relational database Availability Zones</code> parameter to your request.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.availability_zone(input.into());
        self
    }
    /// <p>The Availability Zone in which to create your new database. Use the <code>us-east-2a</code> case-sensitive format.</p>
    /// <p>You can get a list of Availability Zones by using the <code>get regions</code> operation. Be sure to add the <code>include relational database Availability Zones</code> parameter to your request.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_availability_zone(input);
        self
    }
    /// <p>The Availability Zone in which to create your new database. Use the <code>us-east-2a</code> case-sensitive format.</p>
    /// <p>You can get a list of Availability Zones by using the <code>get regions</code> operation. Be sure to add the <code>include relational database Availability Zones</code> parameter to your request.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_availability_zone()
    }
    /// <p>Specifies the accessibility options for your new database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.inner = self.inner.publicly_accessible(input);
        self
    }
    /// <p>Specifies the accessibility options for your new database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn set_publicly_accessible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_publicly_accessible(input);
        self
    }
    /// <p>Specifies the accessibility options for your new database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn get_publicly_accessible(&self) -> &::std::option::Option<bool> {
        self.inner.get_publicly_accessible()
    }
    /// <p>The name of the database snapshot from which to create your new database.</p>
    pub fn relational_database_snapshot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.relational_database_snapshot_name(input.into());
        self
    }
    /// <p>The name of the database snapshot from which to create your new database.</p>
    pub fn set_relational_database_snapshot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_relational_database_snapshot_name(input);
        self
    }
    /// <p>The name of the database snapshot from which to create your new database.</p>
    pub fn get_relational_database_snapshot_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_relational_database_snapshot_name()
    }
    /// <p>The bundle ID for your new database. A bundle describes the performance specifications for your database.</p>
    /// <p>You can get a list of database bundle IDs by using the <code>get relational database bundles</code> operation.</p>
    /// <p>When creating a new database from a snapshot, you cannot choose a bundle that is smaller than the bundle of the source database.</p>
    pub fn relational_database_bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.relational_database_bundle_id(input.into());
        self
    }
    /// <p>The bundle ID for your new database. A bundle describes the performance specifications for your database.</p>
    /// <p>You can get a list of database bundle IDs by using the <code>get relational database bundles</code> operation.</p>
    /// <p>When creating a new database from a snapshot, you cannot choose a bundle that is smaller than the bundle of the source database.</p>
    pub fn set_relational_database_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_relational_database_bundle_id(input);
        self
    }
    /// <p>The bundle ID for your new database. A bundle describes the performance specifications for your database.</p>
    /// <p>You can get a list of database bundle IDs by using the <code>get relational database bundles</code> operation.</p>
    /// <p>When creating a new database from a snapshot, you cannot choose a bundle that is smaller than the bundle of the source database.</p>
    pub fn get_relational_database_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_relational_database_bundle_id()
    }
    /// <p>The name of the source database.</p>
    pub fn source_relational_database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_relational_database_name(input.into());
        self
    }
    /// <p>The name of the source database.</p>
    pub fn set_source_relational_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_relational_database_name(input);
        self
    }
    /// <p>The name of the source database.</p>
    pub fn get_source_relational_database_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_relational_database_name()
    }
    /// <p>The date and time to restore your database from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be before the latest restorable time for the database.</p> </li>
    /// <li> <p>Cannot be specified if the <code>use latest restorable time</code> parameter is <code>true</code>.</p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Specified in the Unix time format.</p> <p>For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then you input <code>1538424000</code> as the restore time.</p> </li>
    /// </ul>
    pub fn restore_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.restore_time(input);
        self
    }
    /// <p>The date and time to restore your database from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be before the latest restorable time for the database.</p> </li>
    /// <li> <p>Cannot be specified if the <code>use latest restorable time</code> parameter is <code>true</code>.</p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Specified in the Unix time format.</p> <p>For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then you input <code>1538424000</code> as the restore time.</p> </li>
    /// </ul>
    pub fn set_restore_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_restore_time(input);
        self
    }
    /// <p>The date and time to restore your database from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be before the latest restorable time for the database.</p> </li>
    /// <li> <p>Cannot be specified if the <code>use latest restorable time</code> parameter is <code>true</code>.</p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Specified in the Unix time format.</p> <p>For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then you input <code>1538424000</code> as the restore time.</p> </li>
    /// </ul>
    pub fn get_restore_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_restore_time()
    }
    /// <p>Specifies whether your database is restored from the latest backup time. A value of <code>true</code> restores from the latest backup time. </p>
    /// <p>Default: <code>false</code> </p>
    /// <p>Constraints: Cannot be specified if the <code>restore time</code> parameter is provided.</p>
    pub fn use_latest_restorable_time(mut self, input: bool) -> Self {
        self.inner = self.inner.use_latest_restorable_time(input);
        self
    }
    /// <p>Specifies whether your database is restored from the latest backup time. A value of <code>true</code> restores from the latest backup time. </p>
    /// <p>Default: <code>false</code> </p>
    /// <p>Constraints: Cannot be specified if the <code>restore time</code> parameter is provided.</p>
    pub fn set_use_latest_restorable_time(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_use_latest_restorable_time(input);
        self
    }
    /// <p>Specifies whether your database is restored from the latest backup time. A value of <code>true</code> restores from the latest backup time. </p>
    /// <p>Default: <code>false</code> </p>
    /// <p>Constraints: Cannot be specified if the <code>restore time</code> parameter is provided.</p>
    pub fn get_use_latest_restorable_time(&self) -> &::std::option::Option<bool> {
        self.inner.get_use_latest_restorable_time()
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
