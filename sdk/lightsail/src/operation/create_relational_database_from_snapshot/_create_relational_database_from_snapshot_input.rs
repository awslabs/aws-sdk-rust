// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateRelationalDatabaseFromSnapshotInput {
    /// <p>The name to use for your new Lightsail database resource.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub relational_database_name: std::option::Option<std::string::String>,
    /// <p>The Availability Zone in which to create your new database. Use the <code>us-east-2a</code> case-sensitive format.</p>
    /// <p>You can get a list of Availability Zones by using the <code>get regions</code> operation. Be sure to add the <code>include relational database Availability Zones</code> parameter to your request.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>Specifies the accessibility options for your new database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    #[doc(hidden)]
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>The name of the database snapshot from which to create your new database.</p>
    #[doc(hidden)]
    pub relational_database_snapshot_name: std::option::Option<std::string::String>,
    /// <p>The bundle ID for your new database. A bundle describes the performance specifications for your database.</p>
    /// <p>You can get a list of database bundle IDs by using the <code>get relational database bundles</code> operation.</p>
    /// <p>When creating a new database from a snapshot, you cannot choose a bundle that is smaller than the bundle of the source database.</p>
    #[doc(hidden)]
    pub relational_database_bundle_id: std::option::Option<std::string::String>,
    /// <p>The name of the source database.</p>
    #[doc(hidden)]
    pub source_relational_database_name: std::option::Option<std::string::String>,
    /// <p>The date and time to restore your database from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be before the latest restorable time for the database.</p> </li>
    /// <li> <p>Cannot be specified if the <code>use latest restorable time</code> parameter is <code>true</code>.</p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Specified in the Unix time format.</p> <p>For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then you input <code>1538424000</code> as the restore time.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub restore_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies whether your database is restored from the latest backup time. A value of <code>true</code> restores from the latest backup time. </p>
    /// <p>Default: <code>false</code> </p>
    /// <p>Constraints: Cannot be specified if the <code>restore time</code> parameter is provided.</p>
    #[doc(hidden)]
    pub use_latest_restorable_time: std::option::Option<bool>,
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateRelationalDatabaseFromSnapshotInput {
    /// <p>The name to use for your new Lightsail database resource.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    pub fn relational_database_name(&self) -> std::option::Option<&str> {
        self.relational_database_name.as_deref()
    }
    /// <p>The Availability Zone in which to create your new database. Use the <code>us-east-2a</code> case-sensitive format.</p>
    /// <p>You can get a list of Availability Zones by using the <code>get regions</code> operation. Be sure to add the <code>include relational database Availability Zones</code> parameter to your request.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>Specifies the accessibility options for your new database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn publicly_accessible(&self) -> std::option::Option<bool> {
        self.publicly_accessible
    }
    /// <p>The name of the database snapshot from which to create your new database.</p>
    pub fn relational_database_snapshot_name(&self) -> std::option::Option<&str> {
        self.relational_database_snapshot_name.as_deref()
    }
    /// <p>The bundle ID for your new database. A bundle describes the performance specifications for your database.</p>
    /// <p>You can get a list of database bundle IDs by using the <code>get relational database bundles</code> operation.</p>
    /// <p>When creating a new database from a snapshot, you cannot choose a bundle that is smaller than the bundle of the source database.</p>
    pub fn relational_database_bundle_id(&self) -> std::option::Option<&str> {
        self.relational_database_bundle_id.as_deref()
    }
    /// <p>The name of the source database.</p>
    pub fn source_relational_database_name(&self) -> std::option::Option<&str> {
        self.source_relational_database_name.as_deref()
    }
    /// <p>The date and time to restore your database from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be before the latest restorable time for the database.</p> </li>
    /// <li> <p>Cannot be specified if the <code>use latest restorable time</code> parameter is <code>true</code>.</p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Specified in the Unix time format.</p> <p>For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then you input <code>1538424000</code> as the restore time.</p> </li>
    /// </ul>
    pub fn restore_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.restore_time.as_ref()
    }
    /// <p>Specifies whether your database is restored from the latest backup time. A value of <code>true</code> restores from the latest backup time. </p>
    /// <p>Default: <code>false</code> </p>
    /// <p>Constraints: Cannot be specified if the <code>restore time</code> parameter is provided.</p>
    pub fn use_latest_restorable_time(&self) -> std::option::Option<bool> {
        self.use_latest_restorable_time
    }
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateRelationalDatabaseFromSnapshotInput {
    /// Creates a new builder-style object to manufacture [`CreateRelationalDatabaseFromSnapshotInput`](crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotInput).
    pub fn builder() -> crate::operation::create_relational_database_from_snapshot::builders::CreateRelationalDatabaseFromSnapshotInputBuilder{
        crate::operation::create_relational_database_from_snapshot::builders::CreateRelationalDatabaseFromSnapshotInputBuilder::default()
    }
}

/// A builder for [`CreateRelationalDatabaseFromSnapshotInput`](crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateRelationalDatabaseFromSnapshotInputBuilder {
    pub(crate) relational_database_name: std::option::Option<std::string::String>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) publicly_accessible: std::option::Option<bool>,
    pub(crate) relational_database_snapshot_name: std::option::Option<std::string::String>,
    pub(crate) relational_database_bundle_id: std::option::Option<std::string::String>,
    pub(crate) source_relational_database_name: std::option::Option<std::string::String>,
    pub(crate) restore_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) use_latest_restorable_time: std::option::Option<bool>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateRelationalDatabaseFromSnapshotInputBuilder {
    /// <p>The name to use for your new Lightsail database resource.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    pub fn relational_database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.relational_database_name = Some(input.into());
        self
    }
    /// <p>The name to use for your new Lightsail database resource.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    pub fn set_relational_database_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.relational_database_name = input;
        self
    }
    /// <p>The Availability Zone in which to create your new database. Use the <code>us-east-2a</code> case-sensitive format.</p>
    /// <p>You can get a list of Availability Zones by using the <code>get regions</code> operation. Be sure to add the <code>include relational database Availability Zones</code> parameter to your request.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone in which to create your new database. Use the <code>us-east-2a</code> case-sensitive format.</p>
    /// <p>You can get a list of Availability Zones by using the <code>get regions</code> operation. Be sure to add the <code>include relational database Availability Zones</code> parameter to your request.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>Specifies the accessibility options for your new database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = Some(input);
        self
    }
    /// <p>Specifies the accessibility options for your new database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>The name of the database snapshot from which to create your new database.</p>
    pub fn relational_database_snapshot_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.relational_database_snapshot_name = Some(input.into());
        self
    }
    /// <p>The name of the database snapshot from which to create your new database.</p>
    pub fn set_relational_database_snapshot_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.relational_database_snapshot_name = input;
        self
    }
    /// <p>The bundle ID for your new database. A bundle describes the performance specifications for your database.</p>
    /// <p>You can get a list of database bundle IDs by using the <code>get relational database bundles</code> operation.</p>
    /// <p>When creating a new database from a snapshot, you cannot choose a bundle that is smaller than the bundle of the source database.</p>
    pub fn relational_database_bundle_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.relational_database_bundle_id = Some(input.into());
        self
    }
    /// <p>The bundle ID for your new database. A bundle describes the performance specifications for your database.</p>
    /// <p>You can get a list of database bundle IDs by using the <code>get relational database bundles</code> operation.</p>
    /// <p>When creating a new database from a snapshot, you cannot choose a bundle that is smaller than the bundle of the source database.</p>
    pub fn set_relational_database_bundle_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.relational_database_bundle_id = input;
        self
    }
    /// <p>The name of the source database.</p>
    pub fn source_relational_database_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.source_relational_database_name = Some(input.into());
        self
    }
    /// <p>The name of the source database.</p>
    pub fn set_source_relational_database_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_relational_database_name = input;
        self
    }
    /// <p>The date and time to restore your database from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be before the latest restorable time for the database.</p> </li>
    /// <li> <p>Cannot be specified if the <code>use latest restorable time</code> parameter is <code>true</code>.</p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Specified in the Unix time format.</p> <p>For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then you input <code>1538424000</code> as the restore time.</p> </li>
    /// </ul>
    pub fn restore_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.restore_time = Some(input);
        self
    }
    /// <p>The date and time to restore your database from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be before the latest restorable time for the database.</p> </li>
    /// <li> <p>Cannot be specified if the <code>use latest restorable time</code> parameter is <code>true</code>.</p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Specified in the Unix time format.</p> <p>For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then you input <code>1538424000</code> as the restore time.</p> </li>
    /// </ul>
    pub fn set_restore_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.restore_time = input;
        self
    }
    /// <p>Specifies whether your database is restored from the latest backup time. A value of <code>true</code> restores from the latest backup time. </p>
    /// <p>Default: <code>false</code> </p>
    /// <p>Constraints: Cannot be specified if the <code>restore time</code> parameter is provided.</p>
    pub fn use_latest_restorable_time(mut self, input: bool) -> Self {
        self.use_latest_restorable_time = Some(input);
        self
    }
    /// <p>Specifies whether your database is restored from the latest backup time. A value of <code>true</code> restores from the latest backup time. </p>
    /// <p>Default: <code>false</code> </p>
    /// <p>Constraints: Cannot be specified if the <code>restore time</code> parameter is provided.</p>
    pub fn set_use_latest_restorable_time(mut self, input: std::option::Option<bool>) -> Self {
        self.use_latest_restorable_time = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateRelationalDatabaseFromSnapshotInput`](crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotInput).
    pub fn build(self) -> Result<crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::create_relational_database_from_snapshot::CreateRelationalDatabaseFromSnapshotInput {
                relational_database_name: self.relational_database_name
                ,
                availability_zone: self.availability_zone
                ,
                publicly_accessible: self.publicly_accessible
                ,
                relational_database_snapshot_name: self.relational_database_snapshot_name
                ,
                relational_database_bundle_id: self.relational_database_bundle_id
                ,
                source_relational_database_name: self.source_relational_database_name
                ,
                restore_time: self.restore_time
                ,
                use_latest_restorable_time: self.use_latest_restorable_time
                ,
                tags: self.tags
                ,
            }
        )
    }
}
