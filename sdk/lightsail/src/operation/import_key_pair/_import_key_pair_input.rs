// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportKeyPairInput {
    /// <p>The name of the key pair for which you want to import the public key.</p>
    pub key_pair_name: ::std::option::Option<::std::string::String>,
    /// <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
    pub public_key_base64: ::std::option::Option<::std::string::String>,
}
impl ImportKeyPairInput {
    /// <p>The name of the key pair for which you want to import the public key.</p>
    pub fn key_pair_name(&self) -> ::std::option::Option<&str> {
        self.key_pair_name.as_deref()
    }
    /// <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
    pub fn public_key_base64(&self) -> ::std::option::Option<&str> {
        self.public_key_base64.as_deref()
    }
}
impl ImportKeyPairInput {
    /// Creates a new builder-style object to manufacture [`ImportKeyPairInput`](crate::operation::import_key_pair::ImportKeyPairInput).
    pub fn builder() -> crate::operation::import_key_pair::builders::ImportKeyPairInputBuilder {
        crate::operation::import_key_pair::builders::ImportKeyPairInputBuilder::default()
    }
}

/// A builder for [`ImportKeyPairInput`](crate::operation::import_key_pair::ImportKeyPairInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportKeyPairInputBuilder {
    pub(crate) key_pair_name: ::std::option::Option<::std::string::String>,
    pub(crate) public_key_base64: ::std::option::Option<::std::string::String>,
}
impl ImportKeyPairInputBuilder {
    /// <p>The name of the key pair for which you want to import the public key.</p>
    /// This field is required.
    pub fn key_pair_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_pair_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the key pair for which you want to import the public key.</p>
    pub fn set_key_pair_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_pair_name = input;
        self
    }
    /// <p>The name of the key pair for which you want to import the public key.</p>
    pub fn get_key_pair_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_pair_name
    }
    /// <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
    /// This field is required.
    pub fn public_key_base64(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_key_base64 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
    pub fn set_public_key_base64(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_key_base64 = input;
        self
    }
    /// <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
    pub fn get_public_key_base64(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_key_base64
    }
    /// Consumes the builder and constructs a [`ImportKeyPairInput`](crate::operation::import_key_pair::ImportKeyPairInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::import_key_pair::ImportKeyPairInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::import_key_pair::ImportKeyPairInput {
            key_pair_name: self.key_pair_name,
            public_key_base64: self.public_key_base64,
        })
    }
}
