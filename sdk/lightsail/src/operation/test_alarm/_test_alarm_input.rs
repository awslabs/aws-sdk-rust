// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestAlarmInput {
    /// <p>The name of the alarm to test.</p>
    #[doc(hidden)]
    pub alarm_name: std::option::Option<std::string::String>,
    /// <p>The alarm state to test.</p>
    /// <p>An alarm has the following possible states that can be tested:</p>
    /// <ul>
    /// <li> <p> <code>ALARM</code> - The metric is outside of the defined threshold.</p> </li>
    /// <li> <p> <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.</p> </li>
    /// <li> <p> <code>OK</code> - The metric is within the defined threshold.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::AlarmState>,
}
impl TestAlarmInput {
    /// <p>The name of the alarm to test.</p>
    pub fn alarm_name(&self) -> std::option::Option<&str> {
        self.alarm_name.as_deref()
    }
    /// <p>The alarm state to test.</p>
    /// <p>An alarm has the following possible states that can be tested:</p>
    /// <ul>
    /// <li> <p> <code>ALARM</code> - The metric is outside of the defined threshold.</p> </li>
    /// <li> <p> <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.</p> </li>
    /// <li> <p> <code>OK</code> - The metric is within the defined threshold.</p> </li>
    /// </ul>
    pub fn state(&self) -> std::option::Option<&crate::types::AlarmState> {
        self.state.as_ref()
    }
}
impl TestAlarmInput {
    /// Creates a new builder-style object to manufacture [`TestAlarmInput`](crate::operation::test_alarm::TestAlarmInput).
    pub fn builder() -> crate::operation::test_alarm::builders::TestAlarmInputBuilder {
        crate::operation::test_alarm::builders::TestAlarmInputBuilder::default()
    }
}

/// A builder for [`TestAlarmInput`](crate::operation::test_alarm::TestAlarmInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestAlarmInputBuilder {
    pub(crate) alarm_name: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::AlarmState>,
}
impl TestAlarmInputBuilder {
    /// <p>The name of the alarm to test.</p>
    pub fn alarm_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_name = Some(input.into());
        self
    }
    /// <p>The name of the alarm to test.</p>
    pub fn set_alarm_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alarm_name = input;
        self
    }
    /// <p>The alarm state to test.</p>
    /// <p>An alarm has the following possible states that can be tested:</p>
    /// <ul>
    /// <li> <p> <code>ALARM</code> - The metric is outside of the defined threshold.</p> </li>
    /// <li> <p> <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.</p> </li>
    /// <li> <p> <code>OK</code> - The metric is within the defined threshold.</p> </li>
    /// </ul>
    pub fn state(mut self, input: crate::types::AlarmState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The alarm state to test.</p>
    /// <p>An alarm has the following possible states that can be tested:</p>
    /// <ul>
    /// <li> <p> <code>ALARM</code> - The metric is outside of the defined threshold.</p> </li>
    /// <li> <p> <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.</p> </li>
    /// <li> <p> <code>OK</code> - The metric is within the defined threshold.</p> </li>
    /// </ul>
    pub fn set_state(mut self, input: std::option::Option<crate::types::AlarmState>) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`TestAlarmInput`](crate::operation::test_alarm::TestAlarmInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::test_alarm::TestAlarmInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::test_alarm::TestAlarmInput {
            alarm_name: self.alarm_name,
            state: self.state,
        })
    }
}
