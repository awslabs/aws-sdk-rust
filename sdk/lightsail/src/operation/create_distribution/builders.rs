// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_distribution::_create_distribution_output::CreateDistributionOutputBuilder;

pub use crate::operation::create_distribution::_create_distribution_input::CreateDistributionInputBuilder;

/// Fluent builder constructing a request to `CreateDistribution`.
///
/// <p>Creates an Amazon Lightsail content delivery network (CDN) distribution.</p>
/// <p>A distribution is a globally distributed network of caching servers that improve the performance of your website or web application hosted on a Lightsail instance. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-content-delivery-network-distributions">Content delivery networks in Amazon Lightsail</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDistributionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_distribution::builders::CreateDistributionInputBuilder,
}
impl CreateDistributionFluentBuilder {
    /// Creates a new `CreateDistribution`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_distribution::CreateDistribution,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_distribution::CreateDistributionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_distribution::CreateDistributionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_distribution::CreateDistributionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name for the distribution.</p>
    pub fn distribution_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.distribution_name(input.into());
        self
    }
    /// <p>The name for the distribution.</p>
    pub fn set_distribution_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_distribution_name(input);
        self
    }
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    pub fn origin(mut self, input: crate::types::InputOrigin) -> Self {
        self.inner = self.inner.origin(input);
        self
    }
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    pub fn set_origin(mut self, input: std::option::Option<crate::types::InputOrigin>) -> Self {
        self.inner = self.inner.set_origin(input);
        self
    }
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    pub fn default_cache_behavior(mut self, input: crate::types::CacheBehavior) -> Self {
        self.inner = self.inner.default_cache_behavior(input);
        self
    }
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    pub fn set_default_cache_behavior(
        mut self,
        input: std::option::Option<crate::types::CacheBehavior>,
    ) -> Self {
        self.inner = self.inner.set_default_cache_behavior(input);
        self
    }
    /// <p>An object that describes the cache behavior settings for the distribution.</p>
    pub fn cache_behavior_settings(mut self, input: crate::types::CacheSettings) -> Self {
        self.inner = self.inner.cache_behavior_settings(input);
        self
    }
    /// <p>An object that describes the cache behavior settings for the distribution.</p>
    pub fn set_cache_behavior_settings(
        mut self,
        input: std::option::Option<crate::types::CacheSettings>,
    ) -> Self {
        self.inner = self.inner.set_cache_behavior_settings(input);
        self
    }
    /// Appends an item to `cacheBehaviors`.
    ///
    /// To override the contents of this collection use [`set_cache_behaviors`](Self::set_cache_behaviors).
    ///
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    pub fn cache_behaviors(mut self, input: crate::types::CacheBehaviorPerPath) -> Self {
        self.inner = self.inner.cache_behaviors(input);
        self
    }
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    pub fn set_cache_behaviors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CacheBehaviorPerPath>>,
    ) -> Self {
        self.inner = self.inner.set_cache_behaviors(input);
        self
    }
    /// <p>The bundle ID to use for the distribution.</p>
    /// <p>A distribution bundle describes the specifications of your distribution, such as the monthly cost and monthly network transfer quota.</p>
    /// <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle IDs that you can specify.</p>
    pub fn bundle_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bundle_id(input.into());
        self
    }
    /// <p>The bundle ID to use for the distribution.</p>
    /// <p>A distribution bundle describes the specifications of your distribution, such as the monthly cost and monthly network transfer quota.</p>
    /// <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle IDs that you can specify.</p>
    pub fn set_bundle_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_bundle_id(input);
        self
    }
    /// <p>The IP address type for the distribution.</p>
    /// <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for IPv4 and IPv6.</p>
    /// <p>The default value is <code>dualstack</code>.</p>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.inner = self.inner.ip_address_type(input);
        self
    }
    /// <p>The IP address type for the distribution.</p>
    /// <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for IPv4 and IPv6.</p>
    /// <p>The default value is <code>dualstack</code>.</p>
    pub fn set_ip_address_type(
        mut self,
        input: std::option::Option<crate::types::IpAddressType>,
    ) -> Self {
        self.inner = self.inner.set_ip_address_type(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values to add to the distribution during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tag keys and optional values to add to the distribution during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
