// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDistributionInput {
    /// <p>The name for the distribution.</p>
    pub distribution_name: ::std::option::Option<::std::string::String>,
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    pub origin: ::std::option::Option<crate::types::InputOrigin>,
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    pub default_cache_behavior: ::std::option::Option<crate::types::CacheBehavior>,
    /// <p>An object that describes the cache behavior settings for the distribution.</p>
    pub cache_behavior_settings: ::std::option::Option<crate::types::CacheSettings>,
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    pub cache_behaviors: ::std::option::Option<::std::vec::Vec<crate::types::CacheBehaviorPerPath>>,
    /// <p>The bundle ID to use for the distribution.</p>
    /// <p>A distribution bundle describes the specifications of your distribution, such as the monthly cost and monthly network transfer quota.</p>
    /// <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle IDs that you can specify.</p>
    pub bundle_id: ::std::option::Option<::std::string::String>,
    /// <p>The IP address type for the distribution.</p>
    /// <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for IPv4 and IPv6.</p>
    /// <p>The default value is <code>dualstack</code>.</p>
    pub ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    /// <p>The tag keys and optional values to add to the distribution during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDistributionInput {
    /// <p>The name for the distribution.</p>
    pub fn distribution_name(&self) -> ::std::option::Option<&str> {
        self.distribution_name.as_deref()
    }
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    pub fn origin(&self) -> ::std::option::Option<&crate::types::InputOrigin> {
        self.origin.as_ref()
    }
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    pub fn default_cache_behavior(&self) -> ::std::option::Option<&crate::types::CacheBehavior> {
        self.default_cache_behavior.as_ref()
    }
    /// <p>An object that describes the cache behavior settings for the distribution.</p>
    pub fn cache_behavior_settings(&self) -> ::std::option::Option<&crate::types::CacheSettings> {
        self.cache_behavior_settings.as_ref()
    }
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cache_behaviors.is_none()`.
    pub fn cache_behaviors(&self) -> &[crate::types::CacheBehaviorPerPath] {
        self.cache_behaviors.as_deref().unwrap_or_default()
    }
    /// <p>The bundle ID to use for the distribution.</p>
    /// <p>A distribution bundle describes the specifications of your distribution, such as the monthly cost and monthly network transfer quota.</p>
    /// <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle IDs that you can specify.</p>
    pub fn bundle_id(&self) -> ::std::option::Option<&str> {
        self.bundle_id.as_deref()
    }
    /// <p>The IP address type for the distribution.</p>
    /// <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for IPv4 and IPv6.</p>
    /// <p>The default value is <code>dualstack</code>.</p>
    pub fn ip_address_type(&self) -> ::std::option::Option<&crate::types::IpAddressType> {
        self.ip_address_type.as_ref()
    }
    /// <p>The tag keys and optional values to add to the distribution during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateDistributionInput {
    /// Creates a new builder-style object to manufacture [`CreateDistributionInput`](crate::operation::create_distribution::CreateDistributionInput).
    pub fn builder() -> crate::operation::create_distribution::builders::CreateDistributionInputBuilder {
        crate::operation::create_distribution::builders::CreateDistributionInputBuilder::default()
    }
}

/// A builder for [`CreateDistributionInput`](crate::operation::create_distribution::CreateDistributionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDistributionInputBuilder {
    pub(crate) distribution_name: ::std::option::Option<::std::string::String>,
    pub(crate) origin: ::std::option::Option<crate::types::InputOrigin>,
    pub(crate) default_cache_behavior: ::std::option::Option<crate::types::CacheBehavior>,
    pub(crate) cache_behavior_settings: ::std::option::Option<crate::types::CacheSettings>,
    pub(crate) cache_behaviors: ::std::option::Option<::std::vec::Vec<crate::types::CacheBehaviorPerPath>>,
    pub(crate) bundle_id: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDistributionInputBuilder {
    /// <p>The name for the distribution.</p>
    /// This field is required.
    pub fn distribution_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.distribution_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the distribution.</p>
    pub fn set_distribution_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.distribution_name = input;
        self
    }
    /// <p>The name for the distribution.</p>
    pub fn get_distribution_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.distribution_name
    }
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    /// This field is required.
    pub fn origin(mut self, input: crate::types::InputOrigin) -> Self {
        self.origin = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    pub fn set_origin(mut self, input: ::std::option::Option<crate::types::InputOrigin>) -> Self {
        self.origin = input;
        self
    }
    /// <p>An object that describes the origin resource for the distribution, such as a Lightsail instance, bucket, or load balancer.</p>
    /// <p>The distribution pulls, caches, and serves content from the origin.</p>
    pub fn get_origin(&self) -> &::std::option::Option<crate::types::InputOrigin> {
        &self.origin
    }
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    /// This field is required.
    pub fn default_cache_behavior(mut self, input: crate::types::CacheBehavior) -> Self {
        self.default_cache_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    pub fn set_default_cache_behavior(mut self, input: ::std::option::Option<crate::types::CacheBehavior>) -> Self {
        self.default_cache_behavior = input;
        self
    }
    /// <p>An object that describes the default cache behavior for the distribution.</p>
    pub fn get_default_cache_behavior(&self) -> &::std::option::Option<crate::types::CacheBehavior> {
        &self.default_cache_behavior
    }
    /// <p>An object that describes the cache behavior settings for the distribution.</p>
    pub fn cache_behavior_settings(mut self, input: crate::types::CacheSettings) -> Self {
        self.cache_behavior_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that describes the cache behavior settings for the distribution.</p>
    pub fn set_cache_behavior_settings(mut self, input: ::std::option::Option<crate::types::CacheSettings>) -> Self {
        self.cache_behavior_settings = input;
        self
    }
    /// <p>An object that describes the cache behavior settings for the distribution.</p>
    pub fn get_cache_behavior_settings(&self) -> &::std::option::Option<crate::types::CacheSettings> {
        &self.cache_behavior_settings
    }
    /// Appends an item to `cache_behaviors`.
    ///
    /// To override the contents of this collection use [`set_cache_behaviors`](Self::set_cache_behaviors).
    ///
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    pub fn cache_behaviors(mut self, input: crate::types::CacheBehaviorPerPath) -> Self {
        let mut v = self.cache_behaviors.unwrap_or_default();
        v.push(input);
        self.cache_behaviors = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    pub fn set_cache_behaviors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CacheBehaviorPerPath>>) -> Self {
        self.cache_behaviors = input;
        self
    }
    /// <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
    pub fn get_cache_behaviors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CacheBehaviorPerPath>> {
        &self.cache_behaviors
    }
    /// <p>The bundle ID to use for the distribution.</p>
    /// <p>A distribution bundle describes the specifications of your distribution, such as the monthly cost and monthly network transfer quota.</p>
    /// <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle IDs that you can specify.</p>
    /// This field is required.
    pub fn bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bundle_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The bundle ID to use for the distribution.</p>
    /// <p>A distribution bundle describes the specifications of your distribution, such as the monthly cost and monthly network transfer quota.</p>
    /// <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle IDs that you can specify.</p>
    pub fn set_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p>The bundle ID to use for the distribution.</p>
    /// <p>A distribution bundle describes the specifications of your distribution, such as the monthly cost and monthly network transfer quota.</p>
    /// <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle IDs that you can specify.</p>
    pub fn get_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bundle_id
    }
    /// <p>The IP address type for the distribution.</p>
    /// <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for IPv4 and IPv6.</p>
    /// <p>The default value is <code>dualstack</code>.</p>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.ip_address_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IP address type for the distribution.</p>
    /// <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for IPv4 and IPv6.</p>
    /// <p>The default value is <code>dualstack</code>.</p>
    pub fn set_ip_address_type(mut self, input: ::std::option::Option<crate::types::IpAddressType>) -> Self {
        self.ip_address_type = input;
        self
    }
    /// <p>The IP address type for the distribution.</p>
    /// <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for IPv4 and IPv6.</p>
    /// <p>The default value is <code>dualstack</code>.</p>
    pub fn get_ip_address_type(&self) -> &::std::option::Option<crate::types::IpAddressType> {
        &self.ip_address_type
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values to add to the distribution during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tag keys and optional values to add to the distribution during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tag keys and optional values to add to the distribution during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDistributionInput`](crate::operation::create_distribution::CreateDistributionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_distribution::CreateDistributionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_distribution::CreateDistributionInput {
            distribution_name: self.distribution_name,
            origin: self.origin,
            default_cache_behavior: self.default_cache_behavior,
            cache_behavior_settings: self.cache_behavior_settings,
            cache_behaviors: self.cache_behaviors,
            bundle_id: self.bundle_id,
            ip_address_type: self.ip_address_type,
            tags: self.tags,
        })
    }
}
