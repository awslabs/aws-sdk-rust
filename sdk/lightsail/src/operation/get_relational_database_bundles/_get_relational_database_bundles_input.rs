// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRelationalDatabaseBundlesInput {
    /// <p>The token to advance to the next page of results from your request.</p>
    /// <p>To get a page token, perform an initial <code>GetRelationalDatabaseBundles</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p>
    #[doc(hidden)]
    pub page_token: std::option::Option<std::string::String>,
    /// <p>A Boolean value that indicates whether to include inactive (unavailable) bundles in the response of your request.</p>
    #[doc(hidden)]
    pub include_inactive: std::option::Option<bool>,
}
impl GetRelationalDatabaseBundlesInput {
    /// <p>The token to advance to the next page of results from your request.</p>
    /// <p>To get a page token, perform an initial <code>GetRelationalDatabaseBundles</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p>
    pub fn page_token(&self) -> std::option::Option<&str> {
        self.page_token.as_deref()
    }
    /// <p>A Boolean value that indicates whether to include inactive (unavailable) bundles in the response of your request.</p>
    pub fn include_inactive(&self) -> std::option::Option<bool> {
        self.include_inactive
    }
}
impl GetRelationalDatabaseBundlesInput {
    /// Creates a new builder-style object to manufacture [`GetRelationalDatabaseBundlesInput`](crate::operation::get_relational_database_bundles::GetRelationalDatabaseBundlesInput).
    pub fn builder() -> crate::operation::get_relational_database_bundles::builders::GetRelationalDatabaseBundlesInputBuilder{
        crate::operation::get_relational_database_bundles::builders::GetRelationalDatabaseBundlesInputBuilder::default()
    }
}

/// A builder for [`GetRelationalDatabaseBundlesInput`](crate::operation::get_relational_database_bundles::GetRelationalDatabaseBundlesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRelationalDatabaseBundlesInputBuilder {
    pub(crate) page_token: std::option::Option<std::string::String>,
    pub(crate) include_inactive: std::option::Option<bool>,
}
impl GetRelationalDatabaseBundlesInputBuilder {
    /// <p>The token to advance to the next page of results from your request.</p>
    /// <p>To get a page token, perform an initial <code>GetRelationalDatabaseBundles</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p>
    pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.page_token = Some(input.into());
        self
    }
    /// <p>The token to advance to the next page of results from your request.</p>
    /// <p>To get a page token, perform an initial <code>GetRelationalDatabaseBundles</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p>
    pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.page_token = input;
        self
    }
    /// <p>A Boolean value that indicates whether to include inactive (unavailable) bundles in the response of your request.</p>
    pub fn include_inactive(mut self, input: bool) -> Self {
        self.include_inactive = Some(input);
        self
    }
    /// <p>A Boolean value that indicates whether to include inactive (unavailable) bundles in the response of your request.</p>
    pub fn set_include_inactive(mut self, input: std::option::Option<bool>) -> Self {
        self.include_inactive = input;
        self
    }
    /// Consumes the builder and constructs a [`GetRelationalDatabaseBundlesInput`](crate::operation::get_relational_database_bundles::GetRelationalDatabaseBundlesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_relational_database_bundles::GetRelationalDatabaseBundlesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_relational_database_bundles::GetRelationalDatabaseBundlesInput {
                page_token: self.page_token,
                include_inactive: self.include_inactive,
            },
        )
    }
}
