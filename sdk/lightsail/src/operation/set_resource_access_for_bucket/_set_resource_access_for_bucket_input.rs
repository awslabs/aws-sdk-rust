// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SetResourceAccessForBucketInput {
    /// <p>The name of the Lightsail instance for which to set bucket access. The instance must be in a running or stopped state.</p>
    pub resource_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the bucket for which to set access to another Lightsail resource.</p>
    pub bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The access setting.</p>
    /// <p>The following access settings are available:</p>
    /// <ul>
    /// <li> <p> <code>allow</code> - Allows access to the bucket and its objects.</p> </li>
    /// <li> <p> <code>deny</code> - Denies access to the bucket and its objects. Use this setting to remove access for a resource previously set to <code>allow</code>.</p> </li>
    /// </ul>
    pub access: ::std::option::Option<crate::types::ResourceBucketAccess>,
}
impl SetResourceAccessForBucketInput {
    /// <p>The name of the Lightsail instance for which to set bucket access. The instance must be in a running or stopped state.</p>
    pub fn resource_name(&self) -> ::std::option::Option<&str> {
        self.resource_name.as_deref()
    }
    /// <p>The name of the bucket for which to set access to another Lightsail resource.</p>
    pub fn bucket_name(&self) -> ::std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>The access setting.</p>
    /// <p>The following access settings are available:</p>
    /// <ul>
    /// <li> <p> <code>allow</code> - Allows access to the bucket and its objects.</p> </li>
    /// <li> <p> <code>deny</code> - Denies access to the bucket and its objects. Use this setting to remove access for a resource previously set to <code>allow</code>.</p> </li>
    /// </ul>
    pub fn access(&self) -> ::std::option::Option<&crate::types::ResourceBucketAccess> {
        self.access.as_ref()
    }
}
impl SetResourceAccessForBucketInput {
    /// Creates a new builder-style object to manufacture [`SetResourceAccessForBucketInput`](crate::operation::set_resource_access_for_bucket::SetResourceAccessForBucketInput).
    pub fn builder() -> crate::operation::set_resource_access_for_bucket::builders::SetResourceAccessForBucketInputBuilder {
        crate::operation::set_resource_access_for_bucket::builders::SetResourceAccessForBucketInputBuilder::default()
    }
}

/// A builder for [`SetResourceAccessForBucketInput`](crate::operation::set_resource_access_for_bucket::SetResourceAccessForBucketInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SetResourceAccessForBucketInputBuilder {
    pub(crate) resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) access: ::std::option::Option<crate::types::ResourceBucketAccess>,
}
impl SetResourceAccessForBucketInputBuilder {
    /// <p>The name of the Lightsail instance for which to set bucket access. The instance must be in a running or stopped state.</p>
    /// This field is required.
    pub fn resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Lightsail instance for which to set bucket access. The instance must be in a running or stopped state.</p>
    pub fn set_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// <p>The name of the Lightsail instance for which to set bucket access. The instance must be in a running or stopped state.</p>
    pub fn get_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_name
    }
    /// <p>The name of the bucket for which to set access to another Lightsail resource.</p>
    /// This field is required.
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the bucket for which to set access to another Lightsail resource.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The name of the bucket for which to set access to another Lightsail resource.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// <p>The access setting.</p>
    /// <p>The following access settings are available:</p>
    /// <ul>
    /// <li> <p> <code>allow</code> - Allows access to the bucket and its objects.</p> </li>
    /// <li> <p> <code>deny</code> - Denies access to the bucket and its objects. Use this setting to remove access for a resource previously set to <code>allow</code>.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn access(mut self, input: crate::types::ResourceBucketAccess) -> Self {
        self.access = ::std::option::Option::Some(input);
        self
    }
    /// <p>The access setting.</p>
    /// <p>The following access settings are available:</p>
    /// <ul>
    /// <li> <p> <code>allow</code> - Allows access to the bucket and its objects.</p> </li>
    /// <li> <p> <code>deny</code> - Denies access to the bucket and its objects. Use this setting to remove access for a resource previously set to <code>allow</code>.</p> </li>
    /// </ul>
    pub fn set_access(mut self, input: ::std::option::Option<crate::types::ResourceBucketAccess>) -> Self {
        self.access = input;
        self
    }
    /// <p>The access setting.</p>
    /// <p>The following access settings are available:</p>
    /// <ul>
    /// <li> <p> <code>allow</code> - Allows access to the bucket and its objects.</p> </li>
    /// <li> <p> <code>deny</code> - Denies access to the bucket and its objects. Use this setting to remove access for a resource previously set to <code>allow</code>.</p> </li>
    /// </ul>
    pub fn get_access(&self) -> &::std::option::Option<crate::types::ResourceBucketAccess> {
        &self.access
    }
    /// Consumes the builder and constructs a [`SetResourceAccessForBucketInput`](crate::operation::set_resource_access_for_bucket::SetResourceAccessForBucketInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::set_resource_access_for_bucket::SetResourceAccessForBucketInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::set_resource_access_for_bucket::SetResourceAccessForBucketInput {
            resource_name: self.resource_name,
            bucket_name: self.bucket_name,
            access: self.access,
        })
    }
}
