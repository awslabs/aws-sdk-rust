// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDistributionsInput {
    /// <p>The name of the distribution for which to return information.</p>
    /// <p>When omitted, the response includes all of your distributions in the Amazon Web Services Region where the request is made.</p>
    #[doc(hidden)]
    pub distribution_name: std::option::Option<std::string::String>,
    /// <p>The token to advance to the next page of results from your request.</p>
    /// <p>To get a page token, perform an initial <code>GetDistributions</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p>
    #[doc(hidden)]
    pub page_token: std::option::Option<std::string::String>,
}
impl GetDistributionsInput {
    /// <p>The name of the distribution for which to return information.</p>
    /// <p>When omitted, the response includes all of your distributions in the Amazon Web Services Region where the request is made.</p>
    pub fn distribution_name(&self) -> std::option::Option<&str> {
        self.distribution_name.as_deref()
    }
    /// <p>The token to advance to the next page of results from your request.</p>
    /// <p>To get a page token, perform an initial <code>GetDistributions</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p>
    pub fn page_token(&self) -> std::option::Option<&str> {
        self.page_token.as_deref()
    }
}
impl GetDistributionsInput {
    /// Creates a new builder-style object to manufacture [`GetDistributionsInput`](crate::operation::get_distributions::GetDistributionsInput).
    pub fn builder() -> crate::operation::get_distributions::builders::GetDistributionsInputBuilder
    {
        crate::operation::get_distributions::builders::GetDistributionsInputBuilder::default()
    }
}

/// A builder for [`GetDistributionsInput`](crate::operation::get_distributions::GetDistributionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDistributionsInputBuilder {
    pub(crate) distribution_name: std::option::Option<std::string::String>,
    pub(crate) page_token: std::option::Option<std::string::String>,
}
impl GetDistributionsInputBuilder {
    /// <p>The name of the distribution for which to return information.</p>
    /// <p>When omitted, the response includes all of your distributions in the Amazon Web Services Region where the request is made.</p>
    pub fn distribution_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.distribution_name = Some(input.into());
        self
    }
    /// <p>The name of the distribution for which to return information.</p>
    /// <p>When omitted, the response includes all of your distributions in the Amazon Web Services Region where the request is made.</p>
    pub fn set_distribution_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.distribution_name = input;
        self
    }
    /// <p>The token to advance to the next page of results from your request.</p>
    /// <p>To get a page token, perform an initial <code>GetDistributions</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p>
    pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.page_token = Some(input.into());
        self
    }
    /// <p>The token to advance to the next page of results from your request.</p>
    /// <p>To get a page token, perform an initial <code>GetDistributions</code> request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.</p>
    pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.page_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetDistributionsInput`](crate::operation::get_distributions::GetDistributionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_distributions::GetDistributionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_distributions::GetDistributionsInput {
            distribution_name: self.distribution_name,
            page_token: self.page_token,
        })
    }
}
