// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateGuiSessionAccessDetailsOutput {
    /// <p>The resource name.</p>
    pub resource_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the operation.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>The percentage of completion for the operation.</p>
    pub percentage_complete: ::std::option::Option<i32>,
    /// <p>The reason the operation failed.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>Returns information about the specified NICE DCV GUI session.</p>
    pub sessions: ::std::option::Option<::std::vec::Vec<crate::types::Session>>,
    _request_id: Option<String>,
}
impl CreateGuiSessionAccessDetailsOutput {
    /// <p>The resource name.</p>
    pub fn resource_name(&self) -> ::std::option::Option<&str> {
        self.resource_name.as_deref()
    }
    /// <p>The status of the operation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The percentage of completion for the operation.</p>
    pub fn percentage_complete(&self) -> ::std::option::Option<i32> {
        self.percentage_complete
    }
    /// <p>The reason the operation failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>Returns information about the specified NICE DCV GUI session.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sessions.is_none()`.
    pub fn sessions(&self) -> &[crate::types::Session] {
        self.sessions.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for CreateGuiSessionAccessDetailsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateGuiSessionAccessDetailsOutput {
    /// Creates a new builder-style object to manufacture [`CreateGuiSessionAccessDetailsOutput`](crate::operation::create_gui_session_access_details::CreateGuiSessionAccessDetailsOutput).
    pub fn builder() -> crate::operation::create_gui_session_access_details::builders::CreateGuiSessionAccessDetailsOutputBuilder {
        crate::operation::create_gui_session_access_details::builders::CreateGuiSessionAccessDetailsOutputBuilder::default()
    }
}

/// A builder for [`CreateGuiSessionAccessDetailsOutput`](crate::operation::create_gui_session_access_details::CreateGuiSessionAccessDetailsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateGuiSessionAccessDetailsOutputBuilder {
    pub(crate) resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) percentage_complete: ::std::option::Option<i32>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) sessions: ::std::option::Option<::std::vec::Vec<crate::types::Session>>,
    _request_id: Option<String>,
}
impl CreateGuiSessionAccessDetailsOutputBuilder {
    /// <p>The resource name.</p>
    pub fn resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource name.</p>
    pub fn set_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// <p>The resource name.</p>
    pub fn get_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_name
    }
    /// <p>The status of the operation.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the operation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the operation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>The percentage of completion for the operation.</p>
    pub fn percentage_complete(mut self, input: i32) -> Self {
        self.percentage_complete = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of completion for the operation.</p>
    pub fn set_percentage_complete(mut self, input: ::std::option::Option<i32>) -> Self {
        self.percentage_complete = input;
        self
    }
    /// <p>The percentage of completion for the operation.</p>
    pub fn get_percentage_complete(&self) -> &::std::option::Option<i32> {
        &self.percentage_complete
    }
    /// <p>The reason the operation failed.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason the operation failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reason the operation failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// Appends an item to `sessions`.
    ///
    /// To override the contents of this collection use [`set_sessions`](Self::set_sessions).
    ///
    /// <p>Returns information about the specified NICE DCV GUI session.</p>
    pub fn sessions(mut self, input: crate::types::Session) -> Self {
        let mut v = self.sessions.unwrap_or_default();
        v.push(input);
        self.sessions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Returns information about the specified NICE DCV GUI session.</p>
    pub fn set_sessions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Session>>) -> Self {
        self.sessions = input;
        self
    }
    /// <p>Returns information about the specified NICE DCV GUI session.</p>
    pub fn get_sessions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Session>> {
        &self.sessions
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateGuiSessionAccessDetailsOutput`](crate::operation::create_gui_session_access_details::CreateGuiSessionAccessDetailsOutput).
    pub fn build(self) -> crate::operation::create_gui_session_access_details::CreateGuiSessionAccessDetailsOutput {
        crate::operation::create_gui_session_access_details::CreateGuiSessionAccessDetailsOutput {
            resource_name: self.resource_name,
            status: self.status,
            percentage_complete: self.percentage_complete,
            failure_reason: self.failure_reason,
            sessions: self.sessions,
            _request_id: self._request_id,
        }
    }
}
