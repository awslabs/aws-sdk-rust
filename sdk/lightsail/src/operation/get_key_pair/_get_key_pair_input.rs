// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetKeyPairInput {
    /// <p>The name of the key pair for which you are requesting information.</p>
    #[doc(hidden)]
    pub key_pair_name: std::option::Option<std::string::String>,
}
impl GetKeyPairInput {
    /// <p>The name of the key pair for which you are requesting information.</p>
    pub fn key_pair_name(&self) -> std::option::Option<&str> {
        self.key_pair_name.as_deref()
    }
}
impl GetKeyPairInput {
    /// Creates a new builder-style object to manufacture [`GetKeyPairInput`](crate::operation::get_key_pair::GetKeyPairInput).
    pub fn builder() -> crate::operation::get_key_pair::builders::GetKeyPairInputBuilder {
        crate::operation::get_key_pair::builders::GetKeyPairInputBuilder::default()
    }
}

/// A builder for [`GetKeyPairInput`](crate::operation::get_key_pair::GetKeyPairInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetKeyPairInputBuilder {
    pub(crate) key_pair_name: std::option::Option<std::string::String>,
}
impl GetKeyPairInputBuilder {
    /// <p>The name of the key pair for which you are requesting information.</p>
    pub fn key_pair_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_pair_name = Some(input.into());
        self
    }
    /// <p>The name of the key pair for which you are requesting information.</p>
    pub fn set_key_pair_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_pair_name = input;
        self
    }
    /// Consumes the builder and constructs a [`GetKeyPairInput`](crate::operation::get_key_pair::GetKeyPairInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_key_pair::GetKeyPairInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_key_pair::GetKeyPairInput {
            key_pair_name: self.key_pair_name,
        })
    }
}
