// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateInstanceSnapshotInput {
    /// <p>The name for your new snapshot.</p>
    #[doc(hidden)]
    pub instance_snapshot_name: std::option::Option<std::string::String>,
    /// <p>The Lightsail instance on which to base your snapshot.</p>
    #[doc(hidden)]
    pub instance_name: std::option::Option<std::string::String>,
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateInstanceSnapshotInput {
    /// <p>The name for your new snapshot.</p>
    pub fn instance_snapshot_name(&self) -> std::option::Option<&str> {
        self.instance_snapshot_name.as_deref()
    }
    /// <p>The Lightsail instance on which to base your snapshot.</p>
    pub fn instance_name(&self) -> std::option::Option<&str> {
        self.instance_name.as_deref()
    }
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateInstanceSnapshotInput {
    /// Creates a new builder-style object to manufacture [`CreateInstanceSnapshotInput`](crate::operation::create_instance_snapshot::CreateInstanceSnapshotInput).
    pub fn builder(
    ) -> crate::operation::create_instance_snapshot::builders::CreateInstanceSnapshotInputBuilder
    {
        crate::operation::create_instance_snapshot::builders::CreateInstanceSnapshotInputBuilder::default()
    }
}

/// A builder for [`CreateInstanceSnapshotInput`](crate::operation::create_instance_snapshot::CreateInstanceSnapshotInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateInstanceSnapshotInputBuilder {
    pub(crate) instance_snapshot_name: std::option::Option<std::string::String>,
    pub(crate) instance_name: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateInstanceSnapshotInputBuilder {
    /// <p>The name for your new snapshot.</p>
    pub fn instance_snapshot_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_snapshot_name = Some(input.into());
        self
    }
    /// <p>The name for your new snapshot.</p>
    pub fn set_instance_snapshot_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.instance_snapshot_name = input;
        self
    }
    /// <p>The Lightsail instance on which to base your snapshot.</p>
    pub fn instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_name = Some(input.into());
        self
    }
    /// <p>The Lightsail instance on which to base your snapshot.</p>
    pub fn set_instance_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_name = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateInstanceSnapshotInput`](crate::operation::create_instance_snapshot::CreateInstanceSnapshotInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_instance_snapshot::CreateInstanceSnapshotInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_instance_snapshot::CreateInstanceSnapshotInput {
                instance_snapshot_name: self.instance_snapshot_name,
                instance_name: self.instance_name,
                tags: self.tags,
            },
        )
    }
}
