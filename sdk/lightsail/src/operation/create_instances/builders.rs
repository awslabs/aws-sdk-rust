// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_instances::_create_instances_output::CreateInstancesOutputBuilder;

pub use crate::operation::create_instances::_create_instances_input::CreateInstancesInputBuilder;

/// Fluent builder constructing a request to `CreateInstances`.
///
/// <p>Creates one or more Amazon Lightsail instances.</p>
/// <p>The <code>create instances</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Developer Guide</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateInstancesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_instances::builders::CreateInstancesInputBuilder,
}
impl CreateInstancesFluentBuilder {
    /// Creates a new `CreateInstances`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_instances::CreateInstances,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_instances::CreateInstancesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_instances::CreateInstancesOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_instances::CreateInstancesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `instanceNames`.
    ///
    /// To override the contents of this collection use [`set_instance_names`](Self::set_instance_names).
    ///
    /// <p>The names to use for your new Lightsail instances. Separate multiple values using quotation marks and commas, for example: <code>["MyFirstInstance","MySecondInstance"]</code> </p>
    pub fn instance_names(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_names(input.into());
        self
    }
    /// <p>The names to use for your new Lightsail instances. Separate multiple values using quotation marks and commas, for example: <code>["MyFirstInstance","MySecondInstance"]</code> </p>
    pub fn set_instance_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_instance_names(input);
        self
    }
    /// <p>The Availability Zone in which to create your instance. Use the following format: <code>us-east-2a</code> (case sensitive). You can get a list of Availability Zones by using the <a href="http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html">get regions</a> operation. Be sure to add the <code>include Availability Zones</code> parameter to your request.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.availability_zone(input.into());
        self
    }
    /// <p>The Availability Zone in which to create your instance. Use the following format: <code>us-east-2a</code> (case sensitive). You can get a list of Availability Zones by using the <a href="http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html">get regions</a> operation. Be sure to add the <code>include Availability Zones</code> parameter to your request.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_availability_zone(input);
        self
    }
    /// <p>(Deprecated) The name for your custom image.</p> <note>
    /// <p>In releases prior to June 12, 2017, this parameter was ignored by the API. It is now deprecated.</p>
    /// </note>
    #[deprecated]
    pub fn custom_image_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.custom_image_name(input.into());
        self
    }
    /// <p>(Deprecated) The name for your custom image.</p> <note>
    /// <p>In releases prior to June 12, 2017, this parameter was ignored by the API. It is now deprecated.</p>
    /// </note>
    #[deprecated]
    pub fn set_custom_image_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_custom_image_name(input);
        self
    }
    /// <p>The ID for a virtual private server image (e.g., <code>app_wordpress_4_4</code> or <code>app_lamp_7_0</code>). Use the <code>get blueprints</code> operation to return a list of available images (or <i>blueprints</i>).</p> <note>
    /// <p>Use active blueprints when creating new instances. Inactive blueprints are listed to support customers with existing instances and are not necessarily available to create new instances. Blueprints are marked inactive when they become outdated due to operating system updates or new application releases.</p>
    /// </note>
    pub fn blueprint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.blueprint_id(input.into());
        self
    }
    /// <p>The ID for a virtual private server image (e.g., <code>app_wordpress_4_4</code> or <code>app_lamp_7_0</code>). Use the <code>get blueprints</code> operation to return a list of available images (or <i>blueprints</i>).</p> <note>
    /// <p>Use active blueprints when creating new instances. Inactive blueprints are listed to support customers with existing instances and are not necessarily available to create new instances. Blueprints are marked inactive when they become outdated due to operating system updates or new application releases.</p>
    /// </note>
    pub fn set_blueprint_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_blueprint_id(input);
        self
    }
    /// <p>The bundle of specification information for your virtual private server (or <i>instance</i>), including the pricing plan (e.g., <code>micro_1_0</code>).</p>
    pub fn bundle_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bundle_id(input.into());
        self
    }
    /// <p>The bundle of specification information for your virtual private server (or <i>instance</i>), including the pricing plan (e.g., <code>micro_1_0</code>).</p>
    pub fn set_bundle_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_bundle_id(input);
        self
    }
    /// <p>A launch script you can create that configures a server with additional user data. For example, you might want to run <code>apt-get -y update</code>.</p> <note>
    /// <p>Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use <code>apt-get</code>, and FreeBSD uses <code>pkg</code>. For a complete list, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/compare-options-choose-lightsail-instance-image">Amazon Lightsail Developer Guide</a>.</p>
    /// </note>
    pub fn user_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_data(input.into());
        self
    }
    /// <p>A launch script you can create that configures a server with additional user data. For example, you might want to run <code>apt-get -y update</code>.</p> <note>
    /// <p>Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use <code>apt-get</code>, and FreeBSD uses <code>pkg</code>. For a complete list, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/compare-options-choose-lightsail-instance-image">Amazon Lightsail Developer Guide</a>.</p>
    /// </note>
    pub fn set_user_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_user_data(input);
        self
    }
    /// <p>The name of your key pair.</p>
    pub fn key_pair_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.key_pair_name(input.into());
        self
    }
    /// <p>The name of your key pair.</p>
    pub fn set_key_pair_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_key_pair_name(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// Appends an item to `addOns`.
    ///
    /// To override the contents of this collection use [`set_add_ons`](Self::set_add_ons).
    ///
    /// <p>An array of objects representing the add-ons to enable for the new instance.</p>
    pub fn add_ons(mut self, input: crate::types::AddOnRequest) -> Self {
        self.inner = self.inner.add_ons(input);
        self
    }
    /// <p>An array of objects representing the add-ons to enable for the new instance.</p>
    pub fn set_add_ons(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AddOnRequest>>,
    ) -> Self {
        self.inner = self.inner.set_add_ons(input);
        self
    }
    /// <p>The IP address type for the instance.</p>
    /// <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for IPv4 and IPv6.</p>
    /// <p>The default value is <code>dualstack</code>.</p>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.inner = self.inner.ip_address_type(input);
        self
    }
    /// <p>The IP address type for the instance.</p>
    /// <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for IPv4 and IPv6.</p>
    /// <p>The default value is <code>dualstack</code>.</p>
    pub fn set_ip_address_type(
        mut self,
        input: std::option::Option<crate::types::IpAddressType>,
    ) -> Self {
        self.inner = self.inner.set_ip_address_type(input);
        self
    }
}
