// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_certificates::_get_certificates_output::GetCertificatesOutputBuilder;

pub use crate::operation::get_certificates::_get_certificates_input::GetCertificatesInputBuilder;

/// Fluent builder constructing a request to `GetCertificates`.
///
/// <p>Returns information about one or more Amazon Lightsail SSL/TLS certificates.</p> <note>
/// <p>To get a summary of a certificate, ommit <code>includeCertificateDetails</code> from your request. The response will include only the certificate Amazon Resource Name (ARN), certificate name, domain name, and tags.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetCertificatesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_certificates::builders::GetCertificatesInputBuilder,
}
impl GetCertificatesFluentBuilder {
    /// Creates a new `GetCertificates`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_certificates::GetCertificates,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::get_certificates::GetCertificatesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_certificates::GetCertificatesOutput,
        aws_smithy_http::result::SdkError<crate::operation::get_certificates::GetCertificatesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `certificateStatuses`.
    ///
    /// To override the contents of this collection use [`set_certificate_statuses`](Self::set_certificate_statuses).
    ///
    /// <p>The status of the certificates for which to return information.</p>
    /// <p>For example, specify <code>ISSUED</code> to return only certificates with an <code>ISSUED</code> status.</p>
    /// <p>When omitted, the response includes all of your certificates in the Amazon Web Services Region where the request is made, regardless of their current status.</p>
    pub fn certificate_statuses(mut self, input: crate::types::CertificateStatus) -> Self {
        self.inner = self.inner.certificate_statuses(input);
        self
    }
    /// <p>The status of the certificates for which to return information.</p>
    /// <p>For example, specify <code>ISSUED</code> to return only certificates with an <code>ISSUED</code> status.</p>
    /// <p>When omitted, the response includes all of your certificates in the Amazon Web Services Region where the request is made, regardless of their current status.</p>
    pub fn set_certificate_statuses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CertificateStatus>>,
    ) -> Self {
        self.inner = self.inner.set_certificate_statuses(input);
        self
    }
    /// <p>Indicates whether to include detailed information about the certificates in the response.</p>
    /// <p>When omitted, the response includes only the certificate names, Amazon Resource Names (ARNs), domain names, and tags.</p>
    pub fn include_certificate_details(mut self, input: bool) -> Self {
        self.inner = self.inner.include_certificate_details(input);
        self
    }
    /// <p>Indicates whether to include detailed information about the certificates in the response.</p>
    /// <p>When omitted, the response includes only the certificate names, Amazon Resource Names (ARNs), domain names, and tags.</p>
    pub fn set_include_certificate_details(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_certificate_details(input);
        self
    }
    /// <p>The name for the certificate for which to return information.</p>
    /// <p>When omitted, the response includes all of your certificates in the Amazon Web Services Region where the request is made.</p>
    pub fn certificate_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.certificate_name(input.into());
        self
    }
    /// <p>The name for the certificate for which to return information.</p>
    /// <p>When omitted, the response includes all of your certificates in the Amazon Web Services Region where the request is made.</p>
    pub fn set_certificate_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_certificate_name(input);
        self
    }
}
