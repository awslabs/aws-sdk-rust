// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetRelationalDatabaseMasterUserPasswordOutput {
    /// <p>The master user password for the <code>password version</code> specified.</p>
    #[doc(hidden)]
    pub master_user_password: std::option::Option<std::string::String>,
    /// <p>The timestamp when the specified version of the master user password was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetRelationalDatabaseMasterUserPasswordOutput {
    /// <p>The master user password for the <code>password version</code> specified.</p>
    pub fn master_user_password(&self) -> std::option::Option<&str> {
        self.master_user_password.as_deref()
    }
    /// <p>The timestamp when the specified version of the master user password was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl std::fmt::Debug for GetRelationalDatabaseMasterUserPasswordOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetRelationalDatabaseMasterUserPasswordOutput");
        formatter.field("master_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for GetRelationalDatabaseMasterUserPasswordOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRelationalDatabaseMasterUserPasswordOutput {
    /// Creates a new builder-style object to manufacture [`GetRelationalDatabaseMasterUserPasswordOutput`](crate::operation::get_relational_database_master_user_password::GetRelationalDatabaseMasterUserPasswordOutput).
    pub fn builder() -> crate::operation::get_relational_database_master_user_password::builders::GetRelationalDatabaseMasterUserPasswordOutputBuilder{
        crate::operation::get_relational_database_master_user_password::builders::GetRelationalDatabaseMasterUserPasswordOutputBuilder::default()
    }
}

/// A builder for [`GetRelationalDatabaseMasterUserPasswordOutput`](crate::operation::get_relational_database_master_user_password::GetRelationalDatabaseMasterUserPasswordOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetRelationalDatabaseMasterUserPasswordOutputBuilder {
    pub(crate) master_user_password: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetRelationalDatabaseMasterUserPasswordOutputBuilder {
    /// <p>The master user password for the <code>password version</code> specified.</p>
    pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_user_password = Some(input.into());
        self
    }
    /// <p>The master user password for the <code>password version</code> specified.</p>
    pub fn set_master_user_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.master_user_password = input;
        self
    }
    /// <p>The timestamp when the specified version of the master user password was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The timestamp when the specified version of the master user password was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRelationalDatabaseMasterUserPasswordOutput`](crate::operation::get_relational_database_master_user_password::GetRelationalDatabaseMasterUserPasswordOutput).
    pub fn build(self) -> crate::operation::get_relational_database_master_user_password::GetRelationalDatabaseMasterUserPasswordOutput{
        crate::operation::get_relational_database_master_user_password::GetRelationalDatabaseMasterUserPasswordOutput {
            master_user_password: self.master_user_password
            ,
            created_at: self.created_at
            ,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for GetRelationalDatabaseMasterUserPasswordOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetRelationalDatabaseMasterUserPasswordOutputBuilder");
        formatter.field("master_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
