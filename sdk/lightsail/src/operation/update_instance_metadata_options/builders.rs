// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_instance_metadata_options::_update_instance_metadata_options_output::UpdateInstanceMetadataOptionsOutputBuilder;

pub use crate::operation::update_instance_metadata_options::_update_instance_metadata_options_input::UpdateInstanceMetadataOptionsInputBuilder;

impl crate::operation::update_instance_metadata_options::builders::UpdateInstanceMetadataOptionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_instance_metadata_options();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateInstanceMetadataOptions`.
///
/// <p>Modifies the Amazon Lightsail instance metadata parameters on a running or stopped instance. When you modify the parameters on a running instance, the <code>GetInstance</code> or <code>GetInstances</code> API operation initially responds with a state of <code>pending</code>. After the parameter modifications are successfully applied, the state changes to <code>applied</code> in subsequent <code>GetInstance</code> or <code>GetInstances</code> API calls. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-instance-metadata-service">Use IMDSv2 with an Amazon Lightsail instance</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateInstanceMetadataOptionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_instance_metadata_options::builders::UpdateInstanceMetadataOptionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptionsOutput,
        crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptionsError,
    > for UpdateInstanceMetadataOptionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptionsOutput,
            crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateInstanceMetadataOptionsFluentBuilder {
    /// Creates a new `UpdateInstanceMetadataOptions`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateInstanceMetadataOptions as a reference.
    pub fn as_input(&self) -> &crate::operation::update_instance_metadata_options::builders::UpdateInstanceMetadataOptionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptionsOutput,
        crate::operation::update_instance_metadata_options::UpdateInstanceMetadataOptionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the instance for which to update metadata parameters.</p>
    pub fn instance_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_name(input.into());
        self
    }
    /// <p>The name of the instance for which to update metadata parameters.</p>
    pub fn set_instance_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_name(input);
        self
    }
    /// <p>The name of the instance for which to update metadata parameters.</p>
    pub fn get_instance_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_name()
    }
    /// <p>The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is <code>optional</code>.</p>
    /// <p>If the state is <code>optional</code>, you can choose whether to retrieve instance metadata with a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials by using a valid signed token, the version 2.0 role credentials are returned.</p>
    /// <p>If the state is <code>required</code>, you must send a signed token header with all instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials. The version 1.0 credentials are not available.</p>
    pub fn http_tokens(mut self, input: crate::types::HttpTokens) -> Self {
        self.inner = self.inner.http_tokens(input);
        self
    }
    /// <p>The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is <code>optional</code>.</p>
    /// <p>If the state is <code>optional</code>, you can choose whether to retrieve instance metadata with a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials by using a valid signed token, the version 2.0 role credentials are returned.</p>
    /// <p>If the state is <code>required</code>, you must send a signed token header with all instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials. The version 1.0 credentials are not available.</p>
    pub fn set_http_tokens(mut self, input: ::std::option::Option<crate::types::HttpTokens>) -> Self {
        self.inner = self.inner.set_http_tokens(input);
        self
    }
    /// <p>The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is <code>optional</code>.</p>
    /// <p>If the state is <code>optional</code>, you can choose whether to retrieve instance metadata with a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials by using a valid signed token, the version 2.0 role credentials are returned.</p>
    /// <p>If the state is <code>required</code>, you must send a signed token header with all instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials. The version 1.0 credentials are not available.</p>
    pub fn get_http_tokens(&self) -> &::std::option::Option<crate::types::HttpTokens> {
        self.inner.get_http_tokens()
    }
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. If this parameter is not specified, the existing state is maintained.</p>
    /// <p>If you specify a value of <code>disabled</code>, you cannot access your instance metadata.</p>
    pub fn http_endpoint(mut self, input: crate::types::HttpEndpoint) -> Self {
        self.inner = self.inner.http_endpoint(input);
        self
    }
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. If this parameter is not specified, the existing state is maintained.</p>
    /// <p>If you specify a value of <code>disabled</code>, you cannot access your instance metadata.</p>
    pub fn set_http_endpoint(mut self, input: ::std::option::Option<crate::types::HttpEndpoint>) -> Self {
        self.inner = self.inner.set_http_endpoint(input);
        self
    }
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. If this parameter is not specified, the existing state is maintained.</p>
    /// <p>If you specify a value of <code>disabled</code>, you cannot access your instance metadata.</p>
    pub fn get_http_endpoint(&self) -> &::std::option::Option<crate::types::HttpEndpoint> {
        self.inner.get_http_endpoint()
    }
    /// <p>The desired HTTP PUT response hop limit for instance metadata requests. A larger number means that the instance metadata requests can travel farther. If no parameter is specified, the existing state is maintained.</p>
    pub fn http_put_response_hop_limit(mut self, input: i32) -> Self {
        self.inner = self.inner.http_put_response_hop_limit(input);
        self
    }
    /// <p>The desired HTTP PUT response hop limit for instance metadata requests. A larger number means that the instance metadata requests can travel farther. If no parameter is specified, the existing state is maintained.</p>
    pub fn set_http_put_response_hop_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_http_put_response_hop_limit(input);
        self
    }
    /// <p>The desired HTTP PUT response hop limit for instance metadata requests. A larger number means that the instance metadata requests can travel farther. If no parameter is specified, the existing state is maintained.</p>
    pub fn get_http_put_response_hop_limit(&self) -> &::std::option::Option<i32> {
        self.inner.get_http_put_response_hop_limit()
    }
    /// <p>Enables or disables the IPv6 endpoint for the instance metadata service. This setting applies only when the HTTP metadata endpoint is enabled.</p><note>
    /// <p>This parameter is available only for instances in the Europe (Stockholm) Amazon Web Services Region (<code>eu-north-1</code>).</p>
    /// </note>
    pub fn http_protocol_ipv6(mut self, input: crate::types::HttpProtocolIpv6) -> Self {
        self.inner = self.inner.http_protocol_ipv6(input);
        self
    }
    /// <p>Enables or disables the IPv6 endpoint for the instance metadata service. This setting applies only when the HTTP metadata endpoint is enabled.</p><note>
    /// <p>This parameter is available only for instances in the Europe (Stockholm) Amazon Web Services Region (<code>eu-north-1</code>).</p>
    /// </note>
    pub fn set_http_protocol_ipv6(mut self, input: ::std::option::Option<crate::types::HttpProtocolIpv6>) -> Self {
        self.inner = self.inner.set_http_protocol_ipv6(input);
        self
    }
    /// <p>Enables or disables the IPv6 endpoint for the instance metadata service. This setting applies only when the HTTP metadata endpoint is enabled.</p><note>
    /// <p>This parameter is available only for instances in the Europe (Stockholm) Amazon Web Services Region (<code>eu-north-1</code>).</p>
    /// </note>
    pub fn get_http_protocol_ipv6(&self) -> &::std::option::Option<crate::types::HttpProtocolIpv6> {
        self.inner.get_http_protocol_ipv6()
    }
}
