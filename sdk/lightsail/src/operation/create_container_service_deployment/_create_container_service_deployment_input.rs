// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateContainerServiceDeploymentInput {
    /// <p>The name of the container service for which to create the deployment.</p>
    #[doc(hidden)]
    pub service_name: std::option::Option<std::string::String>,
    /// <p>An object that describes the settings of the containers that will be launched on the container service.</p>
    #[doc(hidden)]
    pub containers: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::Container>,
    >,
    /// <p>An object that describes the settings of the public endpoint for the container service.</p>
    #[doc(hidden)]
    pub public_endpoint: std::option::Option<crate::types::EndpointRequest>,
}
impl CreateContainerServiceDeploymentInput {
    /// <p>The name of the container service for which to create the deployment.</p>
    pub fn service_name(&self) -> std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>An object that describes the settings of the containers that will be launched on the container service.</p>
    pub fn containers(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, crate::types::Container>>
    {
        self.containers.as_ref()
    }
    /// <p>An object that describes the settings of the public endpoint for the container service.</p>
    pub fn public_endpoint(&self) -> std::option::Option<&crate::types::EndpointRequest> {
        self.public_endpoint.as_ref()
    }
}
impl CreateContainerServiceDeploymentInput {
    /// Creates a new builder-style object to manufacture [`CreateContainerServiceDeploymentInput`](crate::operation::create_container_service_deployment::CreateContainerServiceDeploymentInput).
    pub fn builder() -> crate::operation::create_container_service_deployment::builders::CreateContainerServiceDeploymentInputBuilder{
        crate::operation::create_container_service_deployment::builders::CreateContainerServiceDeploymentInputBuilder::default()
    }
}

/// A builder for [`CreateContainerServiceDeploymentInput`](crate::operation::create_container_service_deployment::CreateContainerServiceDeploymentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateContainerServiceDeploymentInputBuilder {
    pub(crate) service_name: std::option::Option<std::string::String>,
    pub(crate) containers: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::Container>,
    >,
    pub(crate) public_endpoint: std::option::Option<crate::types::EndpointRequest>,
}
impl CreateContainerServiceDeploymentInputBuilder {
    /// <p>The name of the container service for which to create the deployment.</p>
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_name = Some(input.into());
        self
    }
    /// <p>The name of the container service for which to create the deployment.</p>
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// Adds a key-value pair to `containers`.
    ///
    /// To override the contents of this collection use [`set_containers`](Self::set_containers).
    ///
    /// <p>An object that describes the settings of the containers that will be launched on the container service.</p>
    pub fn containers(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::Container,
    ) -> Self {
        let mut hash_map = self.containers.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.containers = Some(hash_map);
        self
    }
    /// <p>An object that describes the settings of the containers that will be launched on the container service.</p>
    pub fn set_containers(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::Container>,
        >,
    ) -> Self {
        self.containers = input;
        self
    }
    /// <p>An object that describes the settings of the public endpoint for the container service.</p>
    pub fn public_endpoint(mut self, input: crate::types::EndpointRequest) -> Self {
        self.public_endpoint = Some(input);
        self
    }
    /// <p>An object that describes the settings of the public endpoint for the container service.</p>
    pub fn set_public_endpoint(
        mut self,
        input: std::option::Option<crate::types::EndpointRequest>,
    ) -> Self {
        self.public_endpoint = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateContainerServiceDeploymentInput`](crate::operation::create_container_service_deployment::CreateContainerServiceDeploymentInput).
    pub fn build(self) -> Result<crate::operation::create_container_service_deployment::CreateContainerServiceDeploymentInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::create_container_service_deployment::CreateContainerServiceDeploymentInput {
                service_name: self.service_name
                ,
                containers: self.containers
                ,
                public_endpoint: self.public_endpoint
                ,
            }
        )
    }
}
