// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_container_service::_update_container_service_output::UpdateContainerServiceOutputBuilder;

pub use crate::operation::update_container_service::_update_container_service_input::UpdateContainerServiceInputBuilder;

/// Fluent builder constructing a request to `UpdateContainerService`.
///
/// <p>Updates the configuration of your Amazon Lightsail container service, such as its power, scale, and public domain names.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateContainerServiceFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_container_service::builders::UpdateContainerServiceInputBuilder,
}
impl UpdateContainerServiceFluentBuilder {
    /// Creates a new `UpdateContainerService`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_container_service::UpdateContainerService,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_container_service::UpdateContainerServiceError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_container_service::UpdateContainerServiceOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_container_service::UpdateContainerServiceError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the container service to update.</p>
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_name(input.into());
        self
    }
    /// <p>The name of the container service to update.</p>
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_service_name(input);
        self
    }
    /// <p>The power for the container service.</p>
    /// <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    /// <p>Use the <code>GetContainerServicePowers</code> action to view the specifications of each power option.</p>
    pub fn power(mut self, input: crate::types::ContainerServicePowerName) -> Self {
        self.inner = self.inner.power(input);
        self
    }
    /// <p>The power for the container service.</p>
    /// <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    /// <p>Use the <code>GetContainerServicePowers</code> action to view the specifications of each power option.</p>
    pub fn set_power(
        mut self,
        input: std::option::Option<crate::types::ContainerServicePowerName>,
    ) -> Self {
        self.inner = self.inner.set_power(input);
        self
    }
    /// <p>The scale for the container service.</p>
    /// <p>The scale specifies the allocated compute nodes of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    pub fn scale(mut self, input: i32) -> Self {
        self.inner = self.inner.scale(input);
        self
    }
    /// <p>The scale for the container service.</p>
    /// <p>The scale specifies the allocated compute nodes of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    pub fn set_scale(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_scale(input);
        self
    }
    /// <p>A Boolean value to indicate whether the container service is disabled.</p>
    pub fn is_disabled(mut self, input: bool) -> Self {
        self.inner = self.inner.is_disabled(input);
        self
    }
    /// <p>A Boolean value to indicate whether the container service is disabled.</p>
    pub fn set_is_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_disabled(input);
        self
    }
    /// Adds a key-value pair to `publicDomainNames`.
    ///
    /// To override the contents of this collection use [`set_public_domain_names`](Self::set_public_domain_names).
    ///
    /// <p>The public domain names to use with the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>
    /// <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>
    /// <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>
    /// <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>
    /// </important>
    /// <p>You can specify public domain names using a string to array map as shown in the example later on this page.</p>
    pub fn public_domain_names(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        self.inner = self.inner.public_domain_names(k.into(), v);
        self
    }
    /// <p>The public domain names to use with the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>
    /// <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>
    /// <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>
    /// <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>
    /// </important>
    /// <p>You can specify public domain names using a string to array map as shown in the example later on this page.</p>
    pub fn set_public_domain_names(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.inner = self.inner.set_public_domain_names(input);
        self
    }
    /// <p>An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
    /// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn private_registry_access(
        mut self,
        input: crate::types::PrivateRegistryAccessRequest,
    ) -> Self {
        self.inner = self.inner.private_registry_access(input);
        self
    }
    /// <p>An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
    /// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn set_private_registry_access(
        mut self,
        input: std::option::Option<crate::types::PrivateRegistryAccessRequest>,
    ) -> Self {
        self.inner = self.inner.set_private_registry_access(input);
        self
    }
}
