// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateContainerServiceInput {
    /// <p>The name of the container service to update.</p>
    pub service_name: ::std::option::Option<::std::string::String>,
    /// <p>The power for the container service.</p>
    /// <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    /// <p>Use the <code>GetContainerServicePowers</code> action to view the specifications of each power option.</p>
    pub power: ::std::option::Option<crate::types::ContainerServicePowerName>,
    /// <p>The scale for the container service.</p>
    /// <p>The scale specifies the allocated compute nodes of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    pub scale: ::std::option::Option<i32>,
    /// <p>A Boolean value to indicate whether the container service is disabled.</p>
    pub is_disabled: ::std::option::Option<bool>,
    /// <p>The public domain names to use with the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>
    /// <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>
    /// <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>
    /// <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>
    /// </important>
    /// <p>You can specify public domain names using a string to array map as shown in the example later on this page.</p>
    pub public_domain_names: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    /// <p>An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
    /// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub private_registry_access: ::std::option::Option<crate::types::PrivateRegistryAccessRequest>,
}
impl UpdateContainerServiceInput {
    /// <p>The name of the container service to update.</p>
    pub fn service_name(&self) -> ::std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>The power for the container service.</p>
    /// <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    /// <p>Use the <code>GetContainerServicePowers</code> action to view the specifications of each power option.</p>
    pub fn power(&self) -> ::std::option::Option<&crate::types::ContainerServicePowerName> {
        self.power.as_ref()
    }
    /// <p>The scale for the container service.</p>
    /// <p>The scale specifies the allocated compute nodes of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    pub fn scale(&self) -> ::std::option::Option<i32> {
        self.scale
    }
    /// <p>A Boolean value to indicate whether the container service is disabled.</p>
    pub fn is_disabled(&self) -> ::std::option::Option<bool> {
        self.is_disabled
    }
    /// <p>The public domain names to use with the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>
    /// <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>
    /// <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>
    /// <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>
    /// </important>
    /// <p>You can specify public domain names using a string to array map as shown in the example later on this page.</p>
    pub fn public_domain_names(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        self.public_domain_names.as_ref()
    }
    /// <p>An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
    /// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn private_registry_access(&self) -> ::std::option::Option<&crate::types::PrivateRegistryAccessRequest> {
        self.private_registry_access.as_ref()
    }
}
impl UpdateContainerServiceInput {
    /// Creates a new builder-style object to manufacture [`UpdateContainerServiceInput`](crate::operation::update_container_service::UpdateContainerServiceInput).
    pub fn builder() -> crate::operation::update_container_service::builders::UpdateContainerServiceInputBuilder {
        crate::operation::update_container_service::builders::UpdateContainerServiceInputBuilder::default()
    }
}

/// A builder for [`UpdateContainerServiceInput`](crate::operation::update_container_service::UpdateContainerServiceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateContainerServiceInputBuilder {
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
    pub(crate) power: ::std::option::Option<crate::types::ContainerServicePowerName>,
    pub(crate) scale: ::std::option::Option<i32>,
    pub(crate) is_disabled: ::std::option::Option<bool>,
    pub(crate) public_domain_names: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    pub(crate) private_registry_access: ::std::option::Option<crate::types::PrivateRegistryAccessRequest>,
}
impl UpdateContainerServiceInputBuilder {
    /// <p>The name of the container service to update.</p>
    /// This field is required.
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the container service to update.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the container service to update.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// <p>The power for the container service.</p>
    /// <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    /// <p>Use the <code>GetContainerServicePowers</code> action to view the specifications of each power option.</p>
    pub fn power(mut self, input: crate::types::ContainerServicePowerName) -> Self {
        self.power = ::std::option::Option::Some(input);
        self
    }
    /// <p>The power for the container service.</p>
    /// <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    /// <p>Use the <code>GetContainerServicePowers</code> action to view the specifications of each power option.</p>
    pub fn set_power(mut self, input: ::std::option::Option<crate::types::ContainerServicePowerName>) -> Self {
        self.power = input;
        self
    }
    /// <p>The power for the container service.</p>
    /// <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    /// <p>Use the <code>GetContainerServicePowers</code> action to view the specifications of each power option.</p>
    pub fn get_power(&self) -> &::std::option::Option<crate::types::ContainerServicePowerName> {
        &self.power
    }
    /// <p>The scale for the container service.</p>
    /// <p>The scale specifies the allocated compute nodes of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    pub fn scale(mut self, input: i32) -> Self {
        self.scale = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scale for the container service.</p>
    /// <p>The scale specifies the allocated compute nodes of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    pub fn set_scale(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scale = input;
        self
    }
    /// <p>The scale for the container service.</p>
    /// <p>The scale specifies the allocated compute nodes of the container service. The <code>power</code> and <code>scale</code> of a container service makes up its configured capacity. To determine the monthly price of your container service, multiply the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of the service.</p>
    pub fn get_scale(&self) -> &::std::option::Option<i32> {
        &self.scale
    }
    /// <p>A Boolean value to indicate whether the container service is disabled.</p>
    pub fn is_disabled(mut self, input: bool) -> Self {
        self.is_disabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value to indicate whether the container service is disabled.</p>
    pub fn set_is_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_disabled = input;
        self
    }
    /// <p>A Boolean value to indicate whether the container service is disabled.</p>
    pub fn get_is_disabled(&self) -> &::std::option::Option<bool> {
        &self.is_disabled
    }
    /// Adds a key-value pair to `public_domain_names`.
    ///
    /// To override the contents of this collection use [`set_public_domain_names`](Self::set_public_domain_names).
    ///
    /// <p>The public domain names to use with the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>
    /// <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>
    /// <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>
    /// <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>
    /// </important>
    /// <p>You can specify public domain names using a string to array map as shown in the example later on this page.</p>
    pub fn public_domain_names(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut hash_map = self.public_domain_names.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.public_domain_names = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The public domain names to use with the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>
    /// <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>
    /// <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>
    /// <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>
    /// </important>
    /// <p>You can specify public domain names using a string to array map as shown in the example later on this page.</p>
    pub fn set_public_domain_names(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.public_domain_names = input;
        self
    }
    /// <p>The public domain names to use with the container service, such as <code>example.com</code> and <code>www.example.com</code>.</p>
    /// <p>You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service.</p>
    /// <p>If you don't specify public domain names, then you can use the default domain of the container service.</p> <important>
    /// <p>You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the <code>CreateCertificate</code> action to create a certificate for the public domain names you want to use with your container service.</p>
    /// </important>
    /// <p>You can specify public domain names using a string to array map as shown in the example later on this page.</p>
    pub fn get_public_domain_names(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        &self.public_domain_names
    }
    /// <p>An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
    /// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn private_registry_access(mut self, input: crate::types::PrivateRegistryAccessRequest) -> Self {
        self.private_registry_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
    /// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn set_private_registry_access(mut self, input: ::std::option::Option<crate::types::PrivateRegistryAccessRequest>) -> Self {
        self.private_registry_access = input;
        self
    }
    /// <p>An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
    /// <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
    pub fn get_private_registry_access(&self) -> &::std::option::Option<crate::types::PrivateRegistryAccessRequest> {
        &self.private_registry_access
    }
    /// Consumes the builder and constructs a [`UpdateContainerServiceInput`](crate::operation::update_container_service::UpdateContainerServiceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_container_service::UpdateContainerServiceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_container_service::UpdateContainerServiceInput {
            service_name: self.service_name,
            power: self.power,
            scale: self.scale,
            is_disabled: self.is_disabled,
            public_domain_names: self.public_domain_names,
            private_registry_access: self.private_registry_access,
        })
    }
}
