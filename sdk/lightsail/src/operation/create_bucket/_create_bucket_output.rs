// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBucketOutput {
    /// <p>An object that describes the bucket that is created.</p>
    #[doc(hidden)]
    pub bucket: std::option::Option<crate::types::Bucket>,
    /// <p>An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.</p>
    #[doc(hidden)]
    pub operations: std::option::Option<std::vec::Vec<crate::types::Operation>>,
    _request_id: Option<String>,
}
impl CreateBucketOutput {
    /// <p>An object that describes the bucket that is created.</p>
    pub fn bucket(&self) -> std::option::Option<&crate::types::Bucket> {
        self.bucket.as_ref()
    }
    /// <p>An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.</p>
    pub fn operations(&self) -> std::option::Option<&[crate::types::Operation]> {
        self.operations.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateBucketOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateBucketOutput {
    /// Creates a new builder-style object to manufacture [`CreateBucketOutput`](crate::operation::create_bucket::CreateBucketOutput).
    pub fn builder() -> crate::operation::create_bucket::builders::CreateBucketOutputBuilder {
        crate::operation::create_bucket::builders::CreateBucketOutputBuilder::default()
    }
}

/// A builder for [`CreateBucketOutput`](crate::operation::create_bucket::CreateBucketOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBucketOutputBuilder {
    pub(crate) bucket: std::option::Option<crate::types::Bucket>,
    pub(crate) operations: std::option::Option<std::vec::Vec<crate::types::Operation>>,
    _request_id: Option<String>,
}
impl CreateBucketOutputBuilder {
    /// <p>An object that describes the bucket that is created.</p>
    pub fn bucket(mut self, input: crate::types::Bucket) -> Self {
        self.bucket = Some(input);
        self
    }
    /// <p>An object that describes the bucket that is created.</p>
    pub fn set_bucket(mut self, input: std::option::Option<crate::types::Bucket>) -> Self {
        self.bucket = input;
        self
    }
    /// Appends an item to `operations`.
    ///
    /// To override the contents of this collection use [`set_operations`](Self::set_operations).
    ///
    /// <p>An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.</p>
    pub fn operations(mut self, input: crate::types::Operation) -> Self {
        let mut v = self.operations.unwrap_or_default();
        v.push(input);
        self.operations = Some(v);
        self
    }
    /// <p>An array of objects that describe the result of the action, such as the status of the request, the timestamp of the request, and the resources affected by the request.</p>
    pub fn set_operations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Operation>>,
    ) -> Self {
        self.operations = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateBucketOutput`](crate::operation::create_bucket::CreateBucketOutput).
    pub fn build(self) -> crate::operation::create_bucket::CreateBucketOutput {
        crate::operation::create_bucket::CreateBucketOutput {
            bucket: self.bucket,
            operations: self.operations,
            _request_id: self._request_id,
        }
    }
}
