// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetBucketMetricDataInput {
    /// <p>The name of the bucket for which to get metric data.</p>
    #[doc(hidden)]
    pub bucket_name: std::option::Option<std::string::String>,
    /// <p>The metric for which you want to return information.</p>
    /// <p>Valid bucket metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.</p> <note>
    /// <p>These bucket metrics are reported once per day.</p>
    /// </note>
    /// <ul>
    /// <li> <p> <b> <code>BucketSizeBytes</code> </b> - The amount of data in bytes stored in a bucket. This value is calculated by summing the size of all objects in the bucket (including object versions), including the size of all parts for all incomplete multipart uploads to the bucket.</p> <p>Statistics: The most useful statistic is <code>Maximum</code>.</p> <p>Unit: The published unit is <code>Bytes</code>.</p> </li>
    /// <li> <p> <b> <code>NumberOfObjects</code> </b> - The total number of objects stored in a bucket. This value is calculated by counting all objects in the bucket (including object versions) and the total number of parts for all incomplete multipart uploads to the bucket.</p> <p>Statistics: The most useful statistic is <code>Average</code>.</p> <p>Unit: The published unit is <code>Count</code>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub metric_name: std::option::Option<crate::types::BucketMetricName>,
    /// <p>The timestamp indicating the earliest data to be returned.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp indicating the latest data to be returned.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The granularity, in seconds, of the returned data points.</p> <note>
    /// <p>Bucket storage metrics are reported once per day. Therefore, you should specify a period of 86400 seconds, which is the number of seconds in a day.</p>
    /// </note>
    #[doc(hidden)]
    pub period: i32,
    /// <p>The statistic for the metric.</p>
    /// <p>The following statistics are available:</p>
    /// <ul>
    /// <li> <p> <code>Minimum</code> - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.</p> </li>
    /// <li> <p> <code>Maximum</code> - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.</p> </li>
    /// <li> <p> <code>Sum</code> - The sum of all values submitted for the matching metric. You can use this statistic to determine the total volume of a metric.</p> </li>
    /// <li> <p> <code>Average</code> - The value of <code>Sum</code> / <code>SampleCount</code> during the specified period. By comparing this statistic with the <code>Minimum</code> and <code>Maximum</code> values, you can determine the full scope of a metric and how close the average use is to the <code>Minimum</code> and <code>Maximum</code> values. This comparison helps you to know when to increase or decrease your resources.</p> </li>
    /// <li> <p> <code>SampleCount</code> - The count, or number, of data points used for the statistical calculation.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub statistics: std::option::Option<std::vec::Vec<crate::types::MetricStatistic>>,
    /// <p>The unit for the metric data request.</p>
    /// <p>Valid units depend on the metric data being requested. For the valid units with each available metric, see the <code>metricName</code> parameter.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<crate::types::MetricUnit>,
}
impl GetBucketMetricDataInput {
    /// <p>The name of the bucket for which to get metric data.</p>
    pub fn bucket_name(&self) -> std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>The metric for which you want to return information.</p>
    /// <p>Valid bucket metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.</p> <note>
    /// <p>These bucket metrics are reported once per day.</p>
    /// </note>
    /// <ul>
    /// <li> <p> <b> <code>BucketSizeBytes</code> </b> - The amount of data in bytes stored in a bucket. This value is calculated by summing the size of all objects in the bucket (including object versions), including the size of all parts for all incomplete multipart uploads to the bucket.</p> <p>Statistics: The most useful statistic is <code>Maximum</code>.</p> <p>Unit: The published unit is <code>Bytes</code>.</p> </li>
    /// <li> <p> <b> <code>NumberOfObjects</code> </b> - The total number of objects stored in a bucket. This value is calculated by counting all objects in the bucket (including object versions) and the total number of parts for all incomplete multipart uploads to the bucket.</p> <p>Statistics: The most useful statistic is <code>Average</code>.</p> <p>Unit: The published unit is <code>Count</code>.</p> </li>
    /// </ul>
    pub fn metric_name(&self) -> std::option::Option<&crate::types::BucketMetricName> {
        self.metric_name.as_ref()
    }
    /// <p>The timestamp indicating the earliest data to be returned.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The timestamp indicating the latest data to be returned.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The granularity, in seconds, of the returned data points.</p> <note>
    /// <p>Bucket storage metrics are reported once per day. Therefore, you should specify a period of 86400 seconds, which is the number of seconds in a day.</p>
    /// </note>
    pub fn period(&self) -> i32 {
        self.period
    }
    /// <p>The statistic for the metric.</p>
    /// <p>The following statistics are available:</p>
    /// <ul>
    /// <li> <p> <code>Minimum</code> - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.</p> </li>
    /// <li> <p> <code>Maximum</code> - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.</p> </li>
    /// <li> <p> <code>Sum</code> - The sum of all values submitted for the matching metric. You can use this statistic to determine the total volume of a metric.</p> </li>
    /// <li> <p> <code>Average</code> - The value of <code>Sum</code> / <code>SampleCount</code> during the specified period. By comparing this statistic with the <code>Minimum</code> and <code>Maximum</code> values, you can determine the full scope of a metric and how close the average use is to the <code>Minimum</code> and <code>Maximum</code> values. This comparison helps you to know when to increase or decrease your resources.</p> </li>
    /// <li> <p> <code>SampleCount</code> - The count, or number, of data points used for the statistical calculation.</p> </li>
    /// </ul>
    pub fn statistics(&self) -> std::option::Option<&[crate::types::MetricStatistic]> {
        self.statistics.as_deref()
    }
    /// <p>The unit for the metric data request.</p>
    /// <p>Valid units depend on the metric data being requested. For the valid units with each available metric, see the <code>metricName</code> parameter.</p>
    pub fn unit(&self) -> std::option::Option<&crate::types::MetricUnit> {
        self.unit.as_ref()
    }
}
impl GetBucketMetricDataInput {
    /// Creates a new builder-style object to manufacture [`GetBucketMetricDataInput`](crate::operation::get_bucket_metric_data::GetBucketMetricDataInput).
    pub fn builder(
    ) -> crate::operation::get_bucket_metric_data::builders::GetBucketMetricDataInputBuilder {
        crate::operation::get_bucket_metric_data::builders::GetBucketMetricDataInputBuilder::default(
        )
    }
}

/// A builder for [`GetBucketMetricDataInput`](crate::operation::get_bucket_metric_data::GetBucketMetricDataInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetBucketMetricDataInputBuilder {
    pub(crate) bucket_name: std::option::Option<std::string::String>,
    pub(crate) metric_name: std::option::Option<crate::types::BucketMetricName>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) period: std::option::Option<i32>,
    pub(crate) statistics: std::option::Option<std::vec::Vec<crate::types::MetricStatistic>>,
    pub(crate) unit: std::option::Option<crate::types::MetricUnit>,
}
impl GetBucketMetricDataInputBuilder {
    /// <p>The name of the bucket for which to get metric data.</p>
    pub fn bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_name = Some(input.into());
        self
    }
    /// <p>The name of the bucket for which to get metric data.</p>
    pub fn set_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The metric for which you want to return information.</p>
    /// <p>Valid bucket metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.</p> <note>
    /// <p>These bucket metrics are reported once per day.</p>
    /// </note>
    /// <ul>
    /// <li> <p> <b> <code>BucketSizeBytes</code> </b> - The amount of data in bytes stored in a bucket. This value is calculated by summing the size of all objects in the bucket (including object versions), including the size of all parts for all incomplete multipart uploads to the bucket.</p> <p>Statistics: The most useful statistic is <code>Maximum</code>.</p> <p>Unit: The published unit is <code>Bytes</code>.</p> </li>
    /// <li> <p> <b> <code>NumberOfObjects</code> </b> - The total number of objects stored in a bucket. This value is calculated by counting all objects in the bucket (including object versions) and the total number of parts for all incomplete multipart uploads to the bucket.</p> <p>Statistics: The most useful statistic is <code>Average</code>.</p> <p>Unit: The published unit is <code>Count</code>.</p> </li>
    /// </ul>
    pub fn metric_name(mut self, input: crate::types::BucketMetricName) -> Self {
        self.metric_name = Some(input);
        self
    }
    /// <p>The metric for which you want to return information.</p>
    /// <p>Valid bucket metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.</p> <note>
    /// <p>These bucket metrics are reported once per day.</p>
    /// </note>
    /// <ul>
    /// <li> <p> <b> <code>BucketSizeBytes</code> </b> - The amount of data in bytes stored in a bucket. This value is calculated by summing the size of all objects in the bucket (including object versions), including the size of all parts for all incomplete multipart uploads to the bucket.</p> <p>Statistics: The most useful statistic is <code>Maximum</code>.</p> <p>Unit: The published unit is <code>Bytes</code>.</p> </li>
    /// <li> <p> <b> <code>NumberOfObjects</code> </b> - The total number of objects stored in a bucket. This value is calculated by counting all objects in the bucket (including object versions) and the total number of parts for all incomplete multipart uploads to the bucket.</p> <p>Statistics: The most useful statistic is <code>Average</code>.</p> <p>Unit: The published unit is <code>Count</code>.</p> </li>
    /// </ul>
    pub fn set_metric_name(
        mut self,
        input: std::option::Option<crate::types::BucketMetricName>,
    ) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The timestamp indicating the earliest data to be returned.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The timestamp indicating the earliest data to be returned.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The timestamp indicating the latest data to be returned.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The timestamp indicating the latest data to be returned.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The granularity, in seconds, of the returned data points.</p> <note>
    /// <p>Bucket storage metrics are reported once per day. Therefore, you should specify a period of 86400 seconds, which is the number of seconds in a day.</p>
    /// </note>
    pub fn period(mut self, input: i32) -> Self {
        self.period = Some(input);
        self
    }
    /// <p>The granularity, in seconds, of the returned data points.</p> <note>
    /// <p>Bucket storage metrics are reported once per day. Therefore, you should specify a period of 86400 seconds, which is the number of seconds in a day.</p>
    /// </note>
    pub fn set_period(mut self, input: std::option::Option<i32>) -> Self {
        self.period = input;
        self
    }
    /// Appends an item to `statistics`.
    ///
    /// To override the contents of this collection use [`set_statistics`](Self::set_statistics).
    ///
    /// <p>The statistic for the metric.</p>
    /// <p>The following statistics are available:</p>
    /// <ul>
    /// <li> <p> <code>Minimum</code> - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.</p> </li>
    /// <li> <p> <code>Maximum</code> - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.</p> </li>
    /// <li> <p> <code>Sum</code> - The sum of all values submitted for the matching metric. You can use this statistic to determine the total volume of a metric.</p> </li>
    /// <li> <p> <code>Average</code> - The value of <code>Sum</code> / <code>SampleCount</code> during the specified period. By comparing this statistic with the <code>Minimum</code> and <code>Maximum</code> values, you can determine the full scope of a metric and how close the average use is to the <code>Minimum</code> and <code>Maximum</code> values. This comparison helps you to know when to increase or decrease your resources.</p> </li>
    /// <li> <p> <code>SampleCount</code> - The count, or number, of data points used for the statistical calculation.</p> </li>
    /// </ul>
    pub fn statistics(mut self, input: crate::types::MetricStatistic) -> Self {
        let mut v = self.statistics.unwrap_or_default();
        v.push(input);
        self.statistics = Some(v);
        self
    }
    /// <p>The statistic for the metric.</p>
    /// <p>The following statistics are available:</p>
    /// <ul>
    /// <li> <p> <code>Minimum</code> - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.</p> </li>
    /// <li> <p> <code>Maximum</code> - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.</p> </li>
    /// <li> <p> <code>Sum</code> - The sum of all values submitted for the matching metric. You can use this statistic to determine the total volume of a metric.</p> </li>
    /// <li> <p> <code>Average</code> - The value of <code>Sum</code> / <code>SampleCount</code> during the specified period. By comparing this statistic with the <code>Minimum</code> and <code>Maximum</code> values, you can determine the full scope of a metric and how close the average use is to the <code>Minimum</code> and <code>Maximum</code> values. This comparison helps you to know when to increase or decrease your resources.</p> </li>
    /// <li> <p> <code>SampleCount</code> - The count, or number, of data points used for the statistical calculation.</p> </li>
    /// </ul>
    pub fn set_statistics(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricStatistic>>,
    ) -> Self {
        self.statistics = input;
        self
    }
    /// <p>The unit for the metric data request.</p>
    /// <p>Valid units depend on the metric data being requested. For the valid units with each available metric, see the <code>metricName</code> parameter.</p>
    pub fn unit(mut self, input: crate::types::MetricUnit) -> Self {
        self.unit = Some(input);
        self
    }
    /// <p>The unit for the metric data request.</p>
    /// <p>Valid units depend on the metric data being requested. For the valid units with each available metric, see the <code>metricName</code> parameter.</p>
    pub fn set_unit(mut self, input: std::option::Option<crate::types::MetricUnit>) -> Self {
        self.unit = input;
        self
    }
    /// Consumes the builder and constructs a [`GetBucketMetricDataInput`](crate::operation::get_bucket_metric_data::GetBucketMetricDataInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_bucket_metric_data::GetBucketMetricDataInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_bucket_metric_data::GetBucketMetricDataInput {
                bucket_name: self.bucket_name,
                metric_name: self.metric_name,
                start_time: self.start_time,
                end_time: self.end_time,
                period: self.period.unwrap_or_default(),
                statistics: self.statistics,
                unit: self.unit,
            },
        )
    }
}
