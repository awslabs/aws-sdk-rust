// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_disk_from_snapshot::_create_disk_from_snapshot_output::CreateDiskFromSnapshotOutputBuilder;

pub use crate::operation::create_disk_from_snapshot::_create_disk_from_snapshot_input::CreateDiskFromSnapshotInputBuilder;

/// Fluent builder constructing a request to `CreateDiskFromSnapshot`.
///
/// <p>Creates a block storage disk from a manual or automatic snapshot of a disk. The resulting disk can be attached to an Amazon Lightsail instance in the same Availability Zone (e.g., <code>us-east-2a</code>).</p>
/// <p>The <code>create disk from snapshot</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by <code>disk snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDiskFromSnapshotFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::create_disk_from_snapshot::builders::CreateDiskFromSnapshotInputBuilder,
}
impl CreateDiskFromSnapshotFluentBuilder {
    /// Creates a new `CreateDiskFromSnapshot`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_disk_from_snapshot::CreateDiskFromSnapshot,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_disk_from_snapshot::CreateDiskFromSnapshotError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_disk_from_snapshot::CreateDiskFromSnapshotOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_disk_from_snapshot::CreateDiskFromSnapshotError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    pub fn disk_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.disk_name(input.into());
        self
    }
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    pub fn set_disk_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_disk_name(input);
        self
    }
    /// <p>The name of the disk snapshot (e.g., <code>my-snapshot</code>) from which to create the new storage disk.</p>
    /// <p>Constraint:</p>
    /// <ul>
    /// <li> <p>This parameter cannot be defined together with the <code>source disk name</code> parameter. The <code>disk snapshot name</code> and <code>source disk name</code> parameters are mutually exclusive.</p> </li>
    /// </ul>
    pub fn disk_snapshot_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.disk_snapshot_name(input.into());
        self
    }
    /// <p>The name of the disk snapshot (e.g., <code>my-snapshot</code>) from which to create the new storage disk.</p>
    /// <p>Constraint:</p>
    /// <ul>
    /// <li> <p>This parameter cannot be defined together with the <code>source disk name</code> parameter. The <code>disk snapshot name</code> and <code>source disk name</code> parameters are mutually exclusive.</p> </li>
    /// </ul>
    pub fn set_disk_snapshot_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_disk_snapshot_name(input);
        self
    }
    /// <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>). Choose the same Availability Zone as the Lightsail instance where you want to create the disk.</p>
    /// <p>Use the GetRegions operation to list the Availability Zones where Lightsail is currently available.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.availability_zone(input.into());
        self
    }
    /// <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>). Choose the same Availability Zone as the Lightsail instance where you want to create the disk.</p>
    /// <p>Use the GetRegions operation to list the Availability Zones where Lightsail is currently available.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_availability_zone(input);
        self
    }
    /// <p>The size of the disk in GB (e.g., <code>32</code>).</p>
    pub fn size_in_gb(mut self, input: i32) -> Self {
        self.inner = self.inner.size_in_gb(input);
        self
    }
    /// <p>The size of the disk in GB (e.g., <code>32</code>).</p>
    pub fn set_size_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_size_in_gb(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// Appends an item to `addOns`.
    ///
    /// To override the contents of this collection use [`set_add_ons`](Self::set_add_ons).
    ///
    /// <p>An array of objects that represent the add-ons to enable for the new disk.</p>
    pub fn add_ons(mut self, input: crate::types::AddOnRequest) -> Self {
        self.inner = self.inner.add_ons(input);
        self
    }
    /// <p>An array of objects that represent the add-ons to enable for the new disk.</p>
    pub fn set_add_ons(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AddOnRequest>>,
    ) -> Self {
        self.inner = self.inner.set_add_ons(input);
        self
    }
    /// <p>The name of the source disk from which the source automatic snapshot was created.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>This parameter cannot be defined together with the <code>disk snapshot name</code> parameter. The <code>source disk name</code> and <code>disk snapshot name</code> parameters are mutually exclusive.</p> </li>
    /// <li> <p>Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p> </li>
    /// </ul>
    pub fn source_disk_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_disk_name(input.into());
        self
    }
    /// <p>The name of the source disk from which the source automatic snapshot was created.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>This parameter cannot be defined together with the <code>disk snapshot name</code> parameter. The <code>source disk name</code> and <code>disk snapshot name</code> parameters are mutually exclusive.</p> </li>
    /// <li> <p>Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p> </li>
    /// </ul>
    pub fn set_source_disk_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_disk_name(input);
        self
    }
    /// <p>The date of the automatic snapshot to use for the new disk. Use the <code>get auto snapshots</code> operation to identify the dates of the available automatic snapshots.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be specified in <code>YYYY-MM-DD</code> format.</p> </li>
    /// <li> <p>This parameter cannot be defined together with the <code>use latest restorable auto snapshot</code> parameter. The <code>restore date</code> and <code>use latest restorable auto snapshot</code> parameters are mutually exclusive.</p> </li>
    /// <li> <p>Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p> </li>
    /// </ul>
    pub fn restore_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.restore_date(input.into());
        self
    }
    /// <p>The date of the automatic snapshot to use for the new disk. Use the <code>get auto snapshots</code> operation to identify the dates of the available automatic snapshots.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be specified in <code>YYYY-MM-DD</code> format.</p> </li>
    /// <li> <p>This parameter cannot be defined together with the <code>use latest restorable auto snapshot</code> parameter. The <code>restore date</code> and <code>use latest restorable auto snapshot</code> parameters are mutually exclusive.</p> </li>
    /// <li> <p>Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p> </li>
    /// </ul>
    pub fn set_restore_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_restore_date(input);
        self
    }
    /// <p>A Boolean value to indicate whether to use the latest available automatic snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>This parameter cannot be defined together with the <code>restore date</code> parameter. The <code>use latest restorable auto snapshot</code> and <code>restore date</code> parameters are mutually exclusive.</p> </li>
    /// <li> <p>Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p> </li>
    /// </ul>
    pub fn use_latest_restorable_auto_snapshot(mut self, input: bool) -> Self {
        self.inner = self.inner.use_latest_restorable_auto_snapshot(input);
        self
    }
    /// <p>A Boolean value to indicate whether to use the latest available automatic snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>This parameter cannot be defined together with the <code>restore date</code> parameter. The <code>use latest restorable auto snapshot</code> and <code>restore date</code> parameters are mutually exclusive.</p> </li>
    /// <li> <p>Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p> </li>
    /// </ul>
    pub fn set_use_latest_restorable_auto_snapshot(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self.inner.set_use_latest_restorable_auto_snapshot(input);
        self
    }
}
