// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_relational_database::_update_relational_database_output::UpdateRelationalDatabaseOutputBuilder;

pub use crate::operation::update_relational_database::_update_relational_database_input::UpdateRelationalDatabaseInputBuilder;

impl crate::operation::update_relational_database::builders::UpdateRelationalDatabaseInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_relational_database::UpdateRelationalDatabaseOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_relational_database::UpdateRelationalDatabaseError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_relational_database();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateRelationalDatabase`.
///
/// <p>Allows the update of one or more attributes of a database in Amazon Lightsail.</p>
/// <p>Updates are applied immediately, or in cases where the updates could result in an outage, are applied during the database's predefined maintenance window.</p>
/// <p>The <code>update relational database</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateRelationalDatabaseFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_relational_database::builders::UpdateRelationalDatabaseInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_relational_database::UpdateRelationalDatabaseOutput,
        crate::operation::update_relational_database::UpdateRelationalDatabaseError,
    > for UpdateRelationalDatabaseFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_relational_database::UpdateRelationalDatabaseOutput,
            crate::operation::update_relational_database::UpdateRelationalDatabaseError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateRelationalDatabaseFluentBuilder {
    /// Creates a new `UpdateRelationalDatabase`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateRelationalDatabase as a reference.
    pub fn as_input(&self) -> &crate::operation::update_relational_database::builders::UpdateRelationalDatabaseInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_relational_database::UpdateRelationalDatabaseOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_relational_database::UpdateRelationalDatabaseError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_relational_database::UpdateRelationalDatabase::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_relational_database::UpdateRelationalDatabase::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_relational_database::UpdateRelationalDatabaseOutput,
        crate::operation::update_relational_database::UpdateRelationalDatabaseError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of your Lightsail database resource to update.</p>
    pub fn relational_database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.relational_database_name(input.into());
        self
    }
    /// <p>The name of your Lightsail database resource to update.</p>
    pub fn set_relational_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_relational_database_name(input);
        self
    }
    /// <p>The name of your Lightsail database resource to update.</p>
    pub fn get_relational_database_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_relational_database_name()
    }
    /// <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
    /// <p>My<b>SQL</b></p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    /// <p><b>PostgreSQL</b></p>
    /// <p>Constraints: Must contain from 8 to 128 characters.</p>
    pub fn master_user_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.master_user_password(input.into());
        self
    }
    /// <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
    /// <p>My<b>SQL</b></p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    /// <p><b>PostgreSQL</b></p>
    /// <p>Constraints: Must contain from 8 to 128 characters.</p>
    pub fn set_master_user_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_master_user_password(input);
        self
    }
    /// <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
    /// <p>My<b>SQL</b></p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    /// <p><b>PostgreSQL</b></p>
    /// <p>Constraints: Must contain from 8 to 128 characters.</p>
    pub fn get_master_user_password(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_master_user_password()
    }
    /// <p>When <code>true</code>, the master user password is changed to a new strong password generated by Lightsail.</p>
    /// <p>Use the <code>get relational database master user password</code> operation to get the new password.</p>
    pub fn rotate_master_user_password(mut self, input: bool) -> Self {
        self.inner = self.inner.rotate_master_user_password(input);
        self
    }
    /// <p>When <code>true</code>, the master user password is changed to a new strong password generated by Lightsail.</p>
    /// <p>Use the <code>get relational database master user password</code> operation to get the new password.</p>
    pub fn set_rotate_master_user_password(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_rotate_master_user_password(input);
        self
    }
    /// <p>When <code>true</code>, the master user password is changed to a new strong password generated by Lightsail.</p>
    /// <p>Use the <code>get relational database master user password</code> operation to get the new password.</p>
    pub fn get_rotate_master_user_password(&self) -> &::std::option::Option<bool> {
        self.inner.get_rotate_master_user_password()
    }
    /// <p>The daily time range during which automated backups are created for your database if automated backups are enabled.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p>
    /// <p>Example: <code>16:00-16:30</code></p></li>
    /// <li>
    /// <p>Specified in Coordinated Universal Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn preferred_backup_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.preferred_backup_window(input.into());
        self
    }
    /// <p>The daily time range during which automated backups are created for your database if automated backups are enabled.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p>
    /// <p>Example: <code>16:00-16:30</code></p></li>
    /// <li>
    /// <p>Specified in Coordinated Universal Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn set_preferred_backup_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_preferred_backup_window(input);
        self
    }
    /// <p>The daily time range during which automated backups are created for your database if automated backups are enabled.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p>
    /// <p>Example: <code>16:00-16:30</code></p></li>
    /// <li>
    /// <p>Specified in Coordinated Universal Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn get_preferred_backup_window(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_preferred_backup_window()
    }
    /// <p>The weekly time range during which system maintenance can occur on your database.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p></li>
    /// <li>
    /// <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// <li>
    /// <p>Specified in Coordinated Universal Time (UTC).</p></li>
    /// <li>
    /// <p>Example: <code>Tue:17:00-Tue:17:30</code></p></li>
    /// </ul>
    pub fn preferred_maintenance_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.preferred_maintenance_window(input.into());
        self
    }
    /// <p>The weekly time range during which system maintenance can occur on your database.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p></li>
    /// <li>
    /// <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// <li>
    /// <p>Specified in Coordinated Universal Time (UTC).</p></li>
    /// <li>
    /// <p>Example: <code>Tue:17:00-Tue:17:30</code></p></li>
    /// </ul>
    pub fn set_preferred_maintenance_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_preferred_maintenance_window(input);
        self
    }
    /// <p>The weekly time range during which system maintenance can occur on your database.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p></li>
    /// <li>
    /// <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// <li>
    /// <p>Specified in Coordinated Universal Time (UTC).</p></li>
    /// <li>
    /// <p>Example: <code>Tue:17:00-Tue:17:30</code></p></li>
    /// </ul>
    pub fn get_preferred_maintenance_window(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_preferred_maintenance_window()
    }
    /// <p>When <code>true</code>, enables automated backup retention for your database.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn enable_backup_retention(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_backup_retention(input);
        self
    }
    /// <p>When <code>true</code>, enables automated backup retention for your database.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn set_enable_backup_retention(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_backup_retention(input);
        self
    }
    /// <p>When <code>true</code>, enables automated backup retention for your database.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn get_enable_backup_retention(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_backup_retention()
    }
    /// <p>When <code>true</code>, disables automated backup retention for your database.</p>
    /// <p>Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database using the <code>create relational database snapshot</code> operation.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn disable_backup_retention(mut self, input: bool) -> Self {
        self.inner = self.inner.disable_backup_retention(input);
        self
    }
    /// <p>When <code>true</code>, disables automated backup retention for your database.</p>
    /// <p>Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database using the <code>create relational database snapshot</code> operation.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn set_disable_backup_retention(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_disable_backup_retention(input);
        self
    }
    /// <p>When <code>true</code>, disables automated backup retention for your database.</p>
    /// <p>Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database using the <code>create relational database snapshot</code> operation.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn get_disable_backup_retention(&self) -> &::std::option::Option<bool> {
        self.inner.get_disable_backup_retention()
    }
    /// <p>Specifies the accessibility options for your database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.inner = self.inner.publicly_accessible(input);
        self
    }
    /// <p>Specifies the accessibility options for your database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn set_publicly_accessible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_publicly_accessible(input);
        self
    }
    /// <p>Specifies the accessibility options for your database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn get_publicly_accessible(&self) -> &::std::option::Option<bool> {
        self.inner.get_publicly_accessible()
    }
    /// <p>When <code>true</code>, applies changes immediately. When <code>false</code>, applies changes during the preferred maintenance window. Some changes may cause an outage.</p>
    /// <p>Default: <code>false</code></p>
    pub fn apply_immediately(mut self, input: bool) -> Self {
        self.inner = self.inner.apply_immediately(input);
        self
    }
    /// <p>When <code>true</code>, applies changes immediately. When <code>false</code>, applies changes during the preferred maintenance window. Some changes may cause an outage.</p>
    /// <p>Default: <code>false</code></p>
    pub fn set_apply_immediately(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_apply_immediately(input);
        self
    }
    /// <p>When <code>true</code>, applies changes immediately. When <code>false</code>, applies changes during the preferred maintenance window. Some changes may cause an outage.</p>
    /// <p>Default: <code>false</code></p>
    pub fn get_apply_immediately(&self) -> &::std::option::Option<bool> {
        self.inner.get_apply_immediately()
    }
    /// <p>Indicates the certificate that needs to be associated with the database.</p>
    pub fn ca_certificate_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ca_certificate_identifier(input.into());
        self
    }
    /// <p>Indicates the certificate that needs to be associated with the database.</p>
    pub fn set_ca_certificate_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ca_certificate_identifier(input);
        self
    }
    /// <p>Indicates the certificate that needs to be associated with the database.</p>
    pub fn get_ca_certificate_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ca_certificate_identifier()
    }
    /// <p>This parameter is used to update the major version of the database. Enter the <code>blueprintId</code> for the major version that you want to update to.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRelationalDatabaseBlueprints.html">GetRelationalDatabaseBlueprints</a> action to get a list of available blueprint IDs.</p>
    pub fn relational_database_blueprint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.relational_database_blueprint_id(input.into());
        self
    }
    /// <p>This parameter is used to update the major version of the database. Enter the <code>blueprintId</code> for the major version that you want to update to.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRelationalDatabaseBlueprints.html">GetRelationalDatabaseBlueprints</a> action to get a list of available blueprint IDs.</p>
    pub fn set_relational_database_blueprint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_relational_database_blueprint_id(input);
        self
    }
    /// <p>This parameter is used to update the major version of the database. Enter the <code>blueprintId</code> for the major version that you want to update to.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRelationalDatabaseBlueprints.html">GetRelationalDatabaseBlueprints</a> action to get a list of available blueprint IDs.</p>
    pub fn get_relational_database_blueprint_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_relational_database_blueprint_id()
    }
}
