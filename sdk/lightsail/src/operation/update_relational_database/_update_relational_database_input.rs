// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateRelationalDatabaseInput {
    /// <p>The name of your Lightsail database resource to update.</p>
    #[doc(hidden)]
    pub relational_database_name: std::option::Option<std::string::String>,
    /// <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
    /// <p>My<b>SQL</b> </p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    /// <p> <b>PostgreSQL</b> </p>
    /// <p>Constraints: Must contain from 8 to 128 characters.</p>
    #[doc(hidden)]
    pub master_user_password: std::option::Option<std::string::String>,
    /// <p>When <code>true</code>, the master user password is changed to a new strong password generated by Lightsail.</p>
    /// <p>Use the <code>get relational database master user password</code> operation to get the new password.</p>
    #[doc(hidden)]
    pub rotate_master_user_password: std::option::Option<bool>,
    /// <p>The daily time range during which automated backups are created for your database if automated backups are enabled.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p> <p>Example: <code>16:00-16:30</code> </p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Must not conflict with the preferred maintenance window.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p>The weekly time range during which system maintenance can occur on your database.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p> </li>
    /// <li> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Example: <code>Tue:17:00-Tue:17:30</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>When <code>true</code>, enables automated backup retention for your database.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    #[doc(hidden)]
    pub enable_backup_retention: std::option::Option<bool>,
    /// <p>When <code>true</code>, disables automated backup retention for your database.</p>
    /// <p>Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database using the <code>create relational database snapshot</code> operation.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    #[doc(hidden)]
    pub disable_backup_retention: std::option::Option<bool>,
    /// <p>Specifies the accessibility options for your database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    #[doc(hidden)]
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>When <code>true</code>, applies changes immediately. When <code>false</code>, applies changes during the preferred maintenance window. Some changes may cause an outage.</p>
    /// <p>Default: <code>false</code> </p>
    #[doc(hidden)]
    pub apply_immediately: std::option::Option<bool>,
    /// <p>Indicates the certificate that needs to be associated with the database.</p>
    #[doc(hidden)]
    pub ca_certificate_identifier: std::option::Option<std::string::String>,
}
impl UpdateRelationalDatabaseInput {
    /// <p>The name of your Lightsail database resource to update.</p>
    pub fn relational_database_name(&self) -> std::option::Option<&str> {
        self.relational_database_name.as_deref()
    }
    /// <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
    /// <p>My<b>SQL</b> </p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    /// <p> <b>PostgreSQL</b> </p>
    /// <p>Constraints: Must contain from 8 to 128 characters.</p>
    pub fn master_user_password(&self) -> std::option::Option<&str> {
        self.master_user_password.as_deref()
    }
    /// <p>When <code>true</code>, the master user password is changed to a new strong password generated by Lightsail.</p>
    /// <p>Use the <code>get relational database master user password</code> operation to get the new password.</p>
    pub fn rotate_master_user_password(&self) -> std::option::Option<bool> {
        self.rotate_master_user_password
    }
    /// <p>The daily time range during which automated backups are created for your database if automated backups are enabled.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p> <p>Example: <code>16:00-16:30</code> </p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Must not conflict with the preferred maintenance window.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// </ul>
    pub fn preferred_backup_window(&self) -> std::option::Option<&str> {
        self.preferred_backup_window.as_deref()
    }
    /// <p>The weekly time range during which system maintenance can occur on your database.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p> </li>
    /// <li> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Example: <code>Tue:17:00-Tue:17:30</code> </p> </li>
    /// </ul>
    pub fn preferred_maintenance_window(&self) -> std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>When <code>true</code>, enables automated backup retention for your database.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn enable_backup_retention(&self) -> std::option::Option<bool> {
        self.enable_backup_retention
    }
    /// <p>When <code>true</code>, disables automated backup retention for your database.</p>
    /// <p>Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database using the <code>create relational database snapshot</code> operation.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn disable_backup_retention(&self) -> std::option::Option<bool> {
        self.disable_backup_retention
    }
    /// <p>Specifies the accessibility options for your database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn publicly_accessible(&self) -> std::option::Option<bool> {
        self.publicly_accessible
    }
    /// <p>When <code>true</code>, applies changes immediately. When <code>false</code>, applies changes during the preferred maintenance window. Some changes may cause an outage.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn apply_immediately(&self) -> std::option::Option<bool> {
        self.apply_immediately
    }
    /// <p>Indicates the certificate that needs to be associated with the database.</p>
    pub fn ca_certificate_identifier(&self) -> std::option::Option<&str> {
        self.ca_certificate_identifier.as_deref()
    }
}
impl std::fmt::Debug for UpdateRelationalDatabaseInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRelationalDatabaseInput");
        formatter.field("relational_database_name", &self.relational_database_name);
        formatter.field("master_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "rotate_master_user_password",
            &self.rotate_master_user_password,
        );
        formatter.field("preferred_backup_window", &self.preferred_backup_window);
        formatter.field(
            "preferred_maintenance_window",
            &self.preferred_maintenance_window,
        );
        formatter.field("enable_backup_retention", &self.enable_backup_retention);
        formatter.field("disable_backup_retention", &self.disable_backup_retention);
        formatter.field("publicly_accessible", &self.publicly_accessible);
        formatter.field("apply_immediately", &self.apply_immediately);
        formatter.field("ca_certificate_identifier", &self.ca_certificate_identifier);
        formatter.finish()
    }
}
impl UpdateRelationalDatabaseInput {
    /// Creates a new builder-style object to manufacture [`UpdateRelationalDatabaseInput`](crate::operation::update_relational_database::UpdateRelationalDatabaseInput).
    pub fn builder(
    ) -> crate::operation::update_relational_database::builders::UpdateRelationalDatabaseInputBuilder
    {
        crate::operation::update_relational_database::builders::UpdateRelationalDatabaseInputBuilder::default()
    }
}

/// A builder for [`UpdateRelationalDatabaseInput`](crate::operation::update_relational_database::UpdateRelationalDatabaseInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateRelationalDatabaseInputBuilder {
    pub(crate) relational_database_name: std::option::Option<std::string::String>,
    pub(crate) master_user_password: std::option::Option<std::string::String>,
    pub(crate) rotate_master_user_password: std::option::Option<bool>,
    pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
    pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
    pub(crate) enable_backup_retention: std::option::Option<bool>,
    pub(crate) disable_backup_retention: std::option::Option<bool>,
    pub(crate) publicly_accessible: std::option::Option<bool>,
    pub(crate) apply_immediately: std::option::Option<bool>,
    pub(crate) ca_certificate_identifier: std::option::Option<std::string::String>,
}
impl UpdateRelationalDatabaseInputBuilder {
    /// <p>The name of your Lightsail database resource to update.</p>
    pub fn relational_database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.relational_database_name = Some(input.into());
        self
    }
    /// <p>The name of your Lightsail database resource to update.</p>
    pub fn set_relational_database_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.relational_database_name = input;
        self
    }
    /// <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
    /// <p>My<b>SQL</b> </p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    /// <p> <b>PostgreSQL</b> </p>
    /// <p>Constraints: Must contain from 8 to 128 characters.</p>
    pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_user_password = Some(input.into());
        self
    }
    /// <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
    /// <p>My<b>SQL</b> </p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    /// <p> <b>PostgreSQL</b> </p>
    /// <p>Constraints: Must contain from 8 to 128 characters.</p>
    pub fn set_master_user_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.master_user_password = input;
        self
    }
    /// <p>When <code>true</code>, the master user password is changed to a new strong password generated by Lightsail.</p>
    /// <p>Use the <code>get relational database master user password</code> operation to get the new password.</p>
    pub fn rotate_master_user_password(mut self, input: bool) -> Self {
        self.rotate_master_user_password = Some(input);
        self
    }
    /// <p>When <code>true</code>, the master user password is changed to a new strong password generated by Lightsail.</p>
    /// <p>Use the <code>get relational database master user password</code> operation to get the new password.</p>
    pub fn set_rotate_master_user_password(mut self, input: std::option::Option<bool>) -> Self {
        self.rotate_master_user_password = input;
        self
    }
    /// <p>The daily time range during which automated backups are created for your database if automated backups are enabled.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p> <p>Example: <code>16:00-16:30</code> </p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Must not conflict with the preferred maintenance window.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// </ul>
    pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_backup_window = Some(input.into());
        self
    }
    /// <p>The daily time range during which automated backups are created for your database if automated backups are enabled.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p> <p>Example: <code>16:00-16:30</code> </p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Must not conflict with the preferred maintenance window.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// </ul>
    pub fn set_preferred_backup_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_backup_window = input;
        self
    }
    /// <p>The weekly time range during which system maintenance can occur on your database.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p> </li>
    /// <li> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Example: <code>Tue:17:00-Tue:17:30</code> </p> </li>
    /// </ul>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_maintenance_window = Some(input.into());
        self
    }
    /// <p>The weekly time range during which system maintenance can occur on your database.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p> </li>
    /// <li> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// <li> <p>Specified in Coordinated Universal Time (UTC).</p> </li>
    /// <li> <p>Example: <code>Tue:17:00-Tue:17:30</code> </p> </li>
    /// </ul>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>When <code>true</code>, enables automated backup retention for your database.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn enable_backup_retention(mut self, input: bool) -> Self {
        self.enable_backup_retention = Some(input);
        self
    }
    /// <p>When <code>true</code>, enables automated backup retention for your database.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn set_enable_backup_retention(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_backup_retention = input;
        self
    }
    /// <p>When <code>true</code>, disables automated backup retention for your database.</p>
    /// <p>Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database using the <code>create relational database snapshot</code> operation.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn disable_backup_retention(mut self, input: bool) -> Self {
        self.disable_backup_retention = Some(input);
        self
    }
    /// <p>When <code>true</code>, disables automated backup retention for your database.</p>
    /// <p>Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database using the <code>create relational database snapshot</code> operation.</p>
    /// <p>Updates are applied during the next maintenance window because this can result in an outage.</p>
    pub fn set_disable_backup_retention(mut self, input: std::option::Option<bool>) -> Self {
        self.disable_backup_retention = input;
        self
    }
    /// <p>Specifies the accessibility options for your database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = Some(input);
        self
    }
    /// <p>Specifies the accessibility options for your database. A value of <code>true</code> specifies a database that is available to resources outside of your Lightsail account. A value of <code>false</code> specifies a database that is available only to your Lightsail resources in the same region as your database.</p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>When <code>true</code>, applies changes immediately. When <code>false</code>, applies changes during the preferred maintenance window. Some changes may cause an outage.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn apply_immediately(mut self, input: bool) -> Self {
        self.apply_immediately = Some(input);
        self
    }
    /// <p>When <code>true</code>, applies changes immediately. When <code>false</code>, applies changes during the preferred maintenance window. Some changes may cause an outage.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn set_apply_immediately(mut self, input: std::option::Option<bool>) -> Self {
        self.apply_immediately = input;
        self
    }
    /// <p>Indicates the certificate that needs to be associated with the database.</p>
    pub fn ca_certificate_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.ca_certificate_identifier = Some(input.into());
        self
    }
    /// <p>Indicates the certificate that needs to be associated with the database.</p>
    pub fn set_ca_certificate_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ca_certificate_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRelationalDatabaseInput`](crate::operation::update_relational_database::UpdateRelationalDatabaseInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_relational_database::UpdateRelationalDatabaseInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_relational_database::UpdateRelationalDatabaseInput {
                relational_database_name: self.relational_database_name,
                master_user_password: self.master_user_password,
                rotate_master_user_password: self.rotate_master_user_password,
                preferred_backup_window: self.preferred_backup_window,
                preferred_maintenance_window: self.preferred_maintenance_window,
                enable_backup_retention: self.enable_backup_retention,
                disable_backup_retention: self.disable_backup_retention,
                publicly_accessible: self.publicly_accessible,
                apply_immediately: self.apply_immediately,
                ca_certificate_identifier: self.ca_certificate_identifier,
            },
        )
    }
}
impl std::fmt::Debug for UpdateRelationalDatabaseInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRelationalDatabaseInputBuilder");
        formatter.field("relational_database_name", &self.relational_database_name);
        formatter.field("master_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "rotate_master_user_password",
            &self.rotate_master_user_password,
        );
        formatter.field("preferred_backup_window", &self.preferred_backup_window);
        formatter.field(
            "preferred_maintenance_window",
            &self.preferred_maintenance_window,
        );
        formatter.field("enable_backup_retention", &self.enable_backup_retention);
        formatter.field("disable_backup_retention", &self.disable_backup_retention);
        formatter.field("publicly_accessible", &self.publicly_accessible);
        formatter.field("apply_immediately", &self.apply_immediately);
        formatter.field("ca_certificate_identifier", &self.ca_certificate_identifier);
        formatter.finish()
    }
}
