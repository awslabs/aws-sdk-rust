// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachDiskInput {
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    #[doc(hidden)]
    pub disk_name: std::option::Option<std::string::String>,
    /// <p>The name of the Lightsail instance where you want to utilize the storage disk.</p>
    #[doc(hidden)]
    pub instance_name: std::option::Option<std::string::String>,
    /// <p>The disk path to expose to the instance (e.g., <code>/dev/xvdf</code>).</p>
    #[doc(hidden)]
    pub disk_path: std::option::Option<std::string::String>,
}
impl AttachDiskInput {
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    pub fn disk_name(&self) -> std::option::Option<&str> {
        self.disk_name.as_deref()
    }
    /// <p>The name of the Lightsail instance where you want to utilize the storage disk.</p>
    pub fn instance_name(&self) -> std::option::Option<&str> {
        self.instance_name.as_deref()
    }
    /// <p>The disk path to expose to the instance (e.g., <code>/dev/xvdf</code>).</p>
    pub fn disk_path(&self) -> std::option::Option<&str> {
        self.disk_path.as_deref()
    }
}
impl AttachDiskInput {
    /// Creates a new builder-style object to manufacture [`AttachDiskInput`](crate::operation::attach_disk::AttachDiskInput).
    pub fn builder() -> crate::operation::attach_disk::builders::AttachDiskInputBuilder {
        crate::operation::attach_disk::builders::AttachDiskInputBuilder::default()
    }
}

/// A builder for [`AttachDiskInput`](crate::operation::attach_disk::AttachDiskInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AttachDiskInputBuilder {
    pub(crate) disk_name: std::option::Option<std::string::String>,
    pub(crate) instance_name: std::option::Option<std::string::String>,
    pub(crate) disk_path: std::option::Option<std::string::String>,
}
impl AttachDiskInputBuilder {
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    pub fn disk_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.disk_name = Some(input.into());
        self
    }
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    pub fn set_disk_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.disk_name = input;
        self
    }
    /// <p>The name of the Lightsail instance where you want to utilize the storage disk.</p>
    pub fn instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_name = Some(input.into());
        self
    }
    /// <p>The name of the Lightsail instance where you want to utilize the storage disk.</p>
    pub fn set_instance_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_name = input;
        self
    }
    /// <p>The disk path to expose to the instance (e.g., <code>/dev/xvdf</code>).</p>
    pub fn disk_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.disk_path = Some(input.into());
        self
    }
    /// <p>The disk path to expose to the instance (e.g., <code>/dev/xvdf</code>).</p>
    pub fn set_disk_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.disk_path = input;
        self
    }
    /// Consumes the builder and constructs a [`AttachDiskInput`](crate::operation::attach_disk::AttachDiskInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::attach_disk::AttachDiskInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::attach_disk::AttachDiskInput {
            disk_name: self.disk_name,
            instance_name: self.instance_name,
            disk_path: self.disk_path,
        })
    }
}
