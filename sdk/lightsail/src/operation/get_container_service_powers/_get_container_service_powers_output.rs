// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetContainerServicePowersOutput {
    /// <p>An array of objects that describe the powers that can be specified for a container service.</p>
    #[doc(hidden)]
    pub powers: std::option::Option<std::vec::Vec<crate::types::ContainerServicePower>>,
    _request_id: Option<String>,
}
impl GetContainerServicePowersOutput {
    /// <p>An array of objects that describe the powers that can be specified for a container service.</p>
    pub fn powers(&self) -> std::option::Option<&[crate::types::ContainerServicePower]> {
        self.powers.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetContainerServicePowersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetContainerServicePowersOutput {
    /// Creates a new builder-style object to manufacture [`GetContainerServicePowersOutput`](crate::operation::get_container_service_powers::GetContainerServicePowersOutput).
    pub fn builder() -> crate::operation::get_container_service_powers::builders::GetContainerServicePowersOutputBuilder{
        crate::operation::get_container_service_powers::builders::GetContainerServicePowersOutputBuilder::default()
    }
}

/// A builder for [`GetContainerServicePowersOutput`](crate::operation::get_container_service_powers::GetContainerServicePowersOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetContainerServicePowersOutputBuilder {
    pub(crate) powers: std::option::Option<std::vec::Vec<crate::types::ContainerServicePower>>,
    _request_id: Option<String>,
}
impl GetContainerServicePowersOutputBuilder {
    /// Appends an item to `powers`.
    ///
    /// To override the contents of this collection use [`set_powers`](Self::set_powers).
    ///
    /// <p>An array of objects that describe the powers that can be specified for a container service.</p>
    pub fn powers(mut self, input: crate::types::ContainerServicePower) -> Self {
        let mut v = self.powers.unwrap_or_default();
        v.push(input);
        self.powers = Some(v);
        self
    }
    /// <p>An array of objects that describe the powers that can be specified for a container service.</p>
    pub fn set_powers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ContainerServicePower>>,
    ) -> Self {
        self.powers = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetContainerServicePowersOutput`](crate::operation::get_container_service_powers::GetContainerServicePowersOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_container_service_powers::GetContainerServicePowersOutput {
        crate::operation::get_container_service_powers::GetContainerServicePowersOutput {
            powers: self.powers,
            _request_id: self._request_id,
        }
    }
}
