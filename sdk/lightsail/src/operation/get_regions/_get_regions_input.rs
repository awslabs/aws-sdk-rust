// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRegionsInput {
    /// <p>A Boolean value indicating whether to also include Availability Zones in your get regions request. Availability Zones are indicated with a letter: e.g., <code>us-east-2a</code>.</p>
    #[doc(hidden)]
    pub include_availability_zones: std::option::Option<bool>,
    /// <p>A Boolean value indicating whether to also include Availability Zones for databases in your get regions request. Availability Zones are indicated with a letter (e.g., <code>us-east-2a</code>).</p>
    #[doc(hidden)]
    pub include_relational_database_availability_zones: std::option::Option<bool>,
}
impl GetRegionsInput {
    /// <p>A Boolean value indicating whether to also include Availability Zones in your get regions request. Availability Zones are indicated with a letter: e.g., <code>us-east-2a</code>.</p>
    pub fn include_availability_zones(&self) -> std::option::Option<bool> {
        self.include_availability_zones
    }
    /// <p>A Boolean value indicating whether to also include Availability Zones for databases in your get regions request. Availability Zones are indicated with a letter (e.g., <code>us-east-2a</code>).</p>
    pub fn include_relational_database_availability_zones(&self) -> std::option::Option<bool> {
        self.include_relational_database_availability_zones
    }
}
impl GetRegionsInput {
    /// Creates a new builder-style object to manufacture [`GetRegionsInput`](crate::operation::get_regions::GetRegionsInput).
    pub fn builder() -> crate::operation::get_regions::builders::GetRegionsInputBuilder {
        crate::operation::get_regions::builders::GetRegionsInputBuilder::default()
    }
}

/// A builder for [`GetRegionsInput`](crate::operation::get_regions::GetRegionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRegionsInputBuilder {
    pub(crate) include_availability_zones: std::option::Option<bool>,
    pub(crate) include_relational_database_availability_zones: std::option::Option<bool>,
}
impl GetRegionsInputBuilder {
    /// <p>A Boolean value indicating whether to also include Availability Zones in your get regions request. Availability Zones are indicated with a letter: e.g., <code>us-east-2a</code>.</p>
    pub fn include_availability_zones(mut self, input: bool) -> Self {
        self.include_availability_zones = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether to also include Availability Zones in your get regions request. Availability Zones are indicated with a letter: e.g., <code>us-east-2a</code>.</p>
    pub fn set_include_availability_zones(mut self, input: std::option::Option<bool>) -> Self {
        self.include_availability_zones = input;
        self
    }
    /// <p>A Boolean value indicating whether to also include Availability Zones for databases in your get regions request. Availability Zones are indicated with a letter (e.g., <code>us-east-2a</code>).</p>
    pub fn include_relational_database_availability_zones(mut self, input: bool) -> Self {
        self.include_relational_database_availability_zones = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether to also include Availability Zones for databases in your get regions request. Availability Zones are indicated with a letter (e.g., <code>us-east-2a</code>).</p>
    pub fn set_include_relational_database_availability_zones(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.include_relational_database_availability_zones = input;
        self
    }
    /// Consumes the builder and constructs a [`GetRegionsInput`](crate::operation::get_regions::GetRegionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_regions::GetRegionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_regions::GetRegionsInput {
            include_availability_zones: self.include_availability_zones,
            include_relational_database_availability_zones: self
                .include_relational_database_availability_zones,
        })
    }
}
