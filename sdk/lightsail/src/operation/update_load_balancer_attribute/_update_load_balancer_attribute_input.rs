// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateLoadBalancerAttributeInput {
    /// <p>The name of the load balancer that you want to modify (e.g., <code>my-load-balancer</code>.</p>
    #[doc(hidden)]
    pub load_balancer_name: std::option::Option<std::string::String>,
    /// <p>The name of the attribute you want to update.</p>
    #[doc(hidden)]
    pub attribute_name: std::option::Option<crate::types::LoadBalancerAttributeName>,
    /// <p>The value that you want to specify for the attribute name.</p>
    /// <p>The following values are supported depending on what you specify for the <code>attributeName</code> request parameter:</p>
    /// <ul>
    /// <li> <p>If you specify <code>HealthCheckPath</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be the path to ping on the target (for example, <code>/weather/us/wa/seattle</code>).</p> </li>
    /// <li> <p>If you specify <code>SessionStickinessEnabled</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be <code>true</code> to activate session stickiness or <code>false</code> to deactivate session stickiness.</p> </li>
    /// <li> <p>If you specify <code>SessionStickiness_LB_CookieDurationSeconds</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be an interger that represents the cookie duration in seconds.</p> </li>
    /// <li> <p>If you specify <code>HttpsRedirectionEnabled</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be <code>true</code> to activate HTTP to HTTPS redirection or <code>false</code> to deactivate HTTP to HTTPS redirection.</p> </li>
    /// <li> <p>If you specify <code>TlsPolicyName</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be the name of the TLS policy.</p> <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html">GetLoadBalancerTlsPolicies</a> action to get a list of TLS policy names that you can specify.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub attribute_value: std::option::Option<std::string::String>,
}
impl UpdateLoadBalancerAttributeInput {
    /// <p>The name of the load balancer that you want to modify (e.g., <code>my-load-balancer</code>.</p>
    pub fn load_balancer_name(&self) -> std::option::Option<&str> {
        self.load_balancer_name.as_deref()
    }
    /// <p>The name of the attribute you want to update.</p>
    pub fn attribute_name(&self) -> std::option::Option<&crate::types::LoadBalancerAttributeName> {
        self.attribute_name.as_ref()
    }
    /// <p>The value that you want to specify for the attribute name.</p>
    /// <p>The following values are supported depending on what you specify for the <code>attributeName</code> request parameter:</p>
    /// <ul>
    /// <li> <p>If you specify <code>HealthCheckPath</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be the path to ping on the target (for example, <code>/weather/us/wa/seattle</code>).</p> </li>
    /// <li> <p>If you specify <code>SessionStickinessEnabled</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be <code>true</code> to activate session stickiness or <code>false</code> to deactivate session stickiness.</p> </li>
    /// <li> <p>If you specify <code>SessionStickiness_LB_CookieDurationSeconds</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be an interger that represents the cookie duration in seconds.</p> </li>
    /// <li> <p>If you specify <code>HttpsRedirectionEnabled</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be <code>true</code> to activate HTTP to HTTPS redirection or <code>false</code> to deactivate HTTP to HTTPS redirection.</p> </li>
    /// <li> <p>If you specify <code>TlsPolicyName</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be the name of the TLS policy.</p> <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html">GetLoadBalancerTlsPolicies</a> action to get a list of TLS policy names that you can specify.</p> </li>
    /// </ul>
    pub fn attribute_value(&self) -> std::option::Option<&str> {
        self.attribute_value.as_deref()
    }
}
impl UpdateLoadBalancerAttributeInput {
    /// Creates a new builder-style object to manufacture [`UpdateLoadBalancerAttributeInput`](crate::operation::update_load_balancer_attribute::UpdateLoadBalancerAttributeInput).
    pub fn builder() -> crate::operation::update_load_balancer_attribute::builders::UpdateLoadBalancerAttributeInputBuilder{
        crate::operation::update_load_balancer_attribute::builders::UpdateLoadBalancerAttributeInputBuilder::default()
    }
}

/// A builder for [`UpdateLoadBalancerAttributeInput`](crate::operation::update_load_balancer_attribute::UpdateLoadBalancerAttributeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateLoadBalancerAttributeInputBuilder {
    pub(crate) load_balancer_name: std::option::Option<std::string::String>,
    pub(crate) attribute_name: std::option::Option<crate::types::LoadBalancerAttributeName>,
    pub(crate) attribute_value: std::option::Option<std::string::String>,
}
impl UpdateLoadBalancerAttributeInputBuilder {
    /// <p>The name of the load balancer that you want to modify (e.g., <code>my-load-balancer</code>.</p>
    pub fn load_balancer_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.load_balancer_name = Some(input.into());
        self
    }
    /// <p>The name of the load balancer that you want to modify (e.g., <code>my-load-balancer</code>.</p>
    pub fn set_load_balancer_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.load_balancer_name = input;
        self
    }
    /// <p>The name of the attribute you want to update.</p>
    pub fn attribute_name(mut self, input: crate::types::LoadBalancerAttributeName) -> Self {
        self.attribute_name = Some(input);
        self
    }
    /// <p>The name of the attribute you want to update.</p>
    pub fn set_attribute_name(
        mut self,
        input: std::option::Option<crate::types::LoadBalancerAttributeName>,
    ) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The value that you want to specify for the attribute name.</p>
    /// <p>The following values are supported depending on what you specify for the <code>attributeName</code> request parameter:</p>
    /// <ul>
    /// <li> <p>If you specify <code>HealthCheckPath</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be the path to ping on the target (for example, <code>/weather/us/wa/seattle</code>).</p> </li>
    /// <li> <p>If you specify <code>SessionStickinessEnabled</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be <code>true</code> to activate session stickiness or <code>false</code> to deactivate session stickiness.</p> </li>
    /// <li> <p>If you specify <code>SessionStickiness_LB_CookieDurationSeconds</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be an interger that represents the cookie duration in seconds.</p> </li>
    /// <li> <p>If you specify <code>HttpsRedirectionEnabled</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be <code>true</code> to activate HTTP to HTTPS redirection or <code>false</code> to deactivate HTTP to HTTPS redirection.</p> </li>
    /// <li> <p>If you specify <code>TlsPolicyName</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be the name of the TLS policy.</p> <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html">GetLoadBalancerTlsPolicies</a> action to get a list of TLS policy names that you can specify.</p> </li>
    /// </ul>
    pub fn attribute_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute_value = Some(input.into());
        self
    }
    /// <p>The value that you want to specify for the attribute name.</p>
    /// <p>The following values are supported depending on what you specify for the <code>attributeName</code> request parameter:</p>
    /// <ul>
    /// <li> <p>If you specify <code>HealthCheckPath</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be the path to ping on the target (for example, <code>/weather/us/wa/seattle</code>).</p> </li>
    /// <li> <p>If you specify <code>SessionStickinessEnabled</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be <code>true</code> to activate session stickiness or <code>false</code> to deactivate session stickiness.</p> </li>
    /// <li> <p>If you specify <code>SessionStickiness_LB_CookieDurationSeconds</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be an interger that represents the cookie duration in seconds.</p> </li>
    /// <li> <p>If you specify <code>HttpsRedirectionEnabled</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be <code>true</code> to activate HTTP to HTTPS redirection or <code>false</code> to deactivate HTTP to HTTPS redirection.</p> </li>
    /// <li> <p>If you specify <code>TlsPolicyName</code> for the <code>attributeName</code> request parameter, then the <code>attributeValue</code> request parameter must be the name of the TLS policy.</p> <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html">GetLoadBalancerTlsPolicies</a> action to get a list of TLS policy names that you can specify.</p> </li>
    /// </ul>
    pub fn set_attribute_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute_value = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateLoadBalancerAttributeInput`](crate::operation::update_load_balancer_attribute::UpdateLoadBalancerAttributeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_load_balancer_attribute::UpdateLoadBalancerAttributeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_load_balancer_attribute::UpdateLoadBalancerAttributeInput {
                load_balancer_name: self.load_balancer_name,
                attribute_name: self.attribute_name,
                attribute_value: self.attribute_value,
            },
        )
    }
}
