// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteRelationalDatabaseInput {
    /// <p>The name of the database that you are deleting.</p>
    pub relational_database_name: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether a final database snapshot is created before your database is deleted. If <code>true</code> is specified, no database snapshot is created. If <code>false</code> is specified, a database snapshot is created before your database is deleted.</p>
    /// <p>You must specify the <code>final relational database snapshot name</code> parameter if the <code>skip final snapshot</code> parameter is <code>false</code>.</p>
    /// <p>Default: <code>false</code> </p>
    pub skip_final_snapshot: ::std::option::Option<bool>,
    /// <p>The name of the database snapshot created if <code>skip final snapshot</code> is <code>false</code>, which is the default value for that parameter.</p> <note>
    /// <p>Specifying this parameter and also specifying the <code>skip final snapshot</code> parameter to <code>true</code> results in an error.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    pub final_relational_database_snapshot_name: ::std::option::Option<::std::string::String>,
}
impl DeleteRelationalDatabaseInput {
    /// <p>The name of the database that you are deleting.</p>
    pub fn relational_database_name(&self) -> ::std::option::Option<&str> {
        self.relational_database_name.as_deref()
    }
    /// <p>Determines whether a final database snapshot is created before your database is deleted. If <code>true</code> is specified, no database snapshot is created. If <code>false</code> is specified, a database snapshot is created before your database is deleted.</p>
    /// <p>You must specify the <code>final relational database snapshot name</code> parameter if the <code>skip final snapshot</code> parameter is <code>false</code>.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn skip_final_snapshot(&self) -> ::std::option::Option<bool> {
        self.skip_final_snapshot
    }
    /// <p>The name of the database snapshot created if <code>skip final snapshot</code> is <code>false</code>, which is the default value for that parameter.</p> <note>
    /// <p>Specifying this parameter and also specifying the <code>skip final snapshot</code> parameter to <code>true</code> results in an error.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    pub fn final_relational_database_snapshot_name(&self) -> ::std::option::Option<&str> {
        self.final_relational_database_snapshot_name.as_deref()
    }
}
impl DeleteRelationalDatabaseInput {
    /// Creates a new builder-style object to manufacture [`DeleteRelationalDatabaseInput`](crate::operation::delete_relational_database::DeleteRelationalDatabaseInput).
    pub fn builder() -> crate::operation::delete_relational_database::builders::DeleteRelationalDatabaseInputBuilder {
        crate::operation::delete_relational_database::builders::DeleteRelationalDatabaseInputBuilder::default()
    }
}

/// A builder for [`DeleteRelationalDatabaseInput`](crate::operation::delete_relational_database::DeleteRelationalDatabaseInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteRelationalDatabaseInputBuilder {
    pub(crate) relational_database_name: ::std::option::Option<::std::string::String>,
    pub(crate) skip_final_snapshot: ::std::option::Option<bool>,
    pub(crate) final_relational_database_snapshot_name: ::std::option::Option<::std::string::String>,
}
impl DeleteRelationalDatabaseInputBuilder {
    /// <p>The name of the database that you are deleting.</p>
    /// This field is required.
    pub fn relational_database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relational_database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database that you are deleting.</p>
    pub fn set_relational_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relational_database_name = input;
        self
    }
    /// <p>The name of the database that you are deleting.</p>
    pub fn get_relational_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.relational_database_name
    }
    /// <p>Determines whether a final database snapshot is created before your database is deleted. If <code>true</code> is specified, no database snapshot is created. If <code>false</code> is specified, a database snapshot is created before your database is deleted.</p>
    /// <p>You must specify the <code>final relational database snapshot name</code> parameter if the <code>skip final snapshot</code> parameter is <code>false</code>.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn skip_final_snapshot(mut self, input: bool) -> Self {
        self.skip_final_snapshot = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether a final database snapshot is created before your database is deleted. If <code>true</code> is specified, no database snapshot is created. If <code>false</code> is specified, a database snapshot is created before your database is deleted.</p>
    /// <p>You must specify the <code>final relational database snapshot name</code> parameter if the <code>skip final snapshot</code> parameter is <code>false</code>.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn set_skip_final_snapshot(mut self, input: ::std::option::Option<bool>) -> Self {
        self.skip_final_snapshot = input;
        self
    }
    /// <p>Determines whether a final database snapshot is created before your database is deleted. If <code>true</code> is specified, no database snapshot is created. If <code>false</code> is specified, a database snapshot is created before your database is deleted.</p>
    /// <p>You must specify the <code>final relational database snapshot name</code> parameter if the <code>skip final snapshot</code> parameter is <code>false</code>.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn get_skip_final_snapshot(&self) -> &::std::option::Option<bool> {
        &self.skip_final_snapshot
    }
    /// <p>The name of the database snapshot created if <code>skip final snapshot</code> is <code>false</code>, which is the default value for that parameter.</p> <note>
    /// <p>Specifying this parameter and also specifying the <code>skip final snapshot</code> parameter to <code>true</code> results in an error.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    pub fn final_relational_database_snapshot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.final_relational_database_snapshot_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database snapshot created if <code>skip final snapshot</code> is <code>false</code>, which is the default value for that parameter.</p> <note>
    /// <p>Specifying this parameter and also specifying the <code>skip final snapshot</code> parameter to <code>true</code> results in an error.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    pub fn set_final_relational_database_snapshot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.final_relational_database_snapshot_name = input;
        self
    }
    /// <p>The name of the database snapshot created if <code>skip final snapshot</code> is <code>false</code>, which is the default value for that parameter.</p> <note>
    /// <p>Specifying this parameter and also specifying the <code>skip final snapshot</code> parameter to <code>true</code> results in an error.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p> </li>
    /// <li> <p>The first and last character must be a letter or number.</p> </li>
    /// </ul>
    pub fn get_final_relational_database_snapshot_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.final_relational_database_snapshot_name
    }
    /// Consumes the builder and constructs a [`DeleteRelationalDatabaseInput`](crate::operation::delete_relational_database::DeleteRelationalDatabaseInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_relational_database::DeleteRelationalDatabaseInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_relational_database::DeleteRelationalDatabaseInput {
            relational_database_name: self.relational_database_name,
            skip_final_snapshot: self.skip_final_snapshot,
            final_relational_database_snapshot_name: self.final_relational_database_snapshot_name,
        })
    }
}
