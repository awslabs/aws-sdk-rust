// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLoadBalancerTlsCertificateInput {
    /// <p>The load balancer name.</p>
    #[doc(hidden)]
    pub load_balancer_name: std::option::Option<std::string::String>,
    /// <p>The SSL/TLS certificate name.</p>
    #[doc(hidden)]
    pub certificate_name: std::option::Option<std::string::String>,
    /// <p>When <code>true</code>, forces the deletion of an SSL/TLS certificate.</p>
    /// <p>There can be two certificates associated with a Lightsail load balancer: the primary and the backup. The <code>force</code> parameter is required when the primary SSL/TLS certificate is in use by an instance attached to the load balancer.</p>
    #[doc(hidden)]
    pub force: std::option::Option<bool>,
}
impl DeleteLoadBalancerTlsCertificateInput {
    /// <p>The load balancer name.</p>
    pub fn load_balancer_name(&self) -> std::option::Option<&str> {
        self.load_balancer_name.as_deref()
    }
    /// <p>The SSL/TLS certificate name.</p>
    pub fn certificate_name(&self) -> std::option::Option<&str> {
        self.certificate_name.as_deref()
    }
    /// <p>When <code>true</code>, forces the deletion of an SSL/TLS certificate.</p>
    /// <p>There can be two certificates associated with a Lightsail load balancer: the primary and the backup. The <code>force</code> parameter is required when the primary SSL/TLS certificate is in use by an instance attached to the load balancer.</p>
    pub fn force(&self) -> std::option::Option<bool> {
        self.force
    }
}
impl DeleteLoadBalancerTlsCertificateInput {
    /// Creates a new builder-style object to manufacture [`DeleteLoadBalancerTlsCertificateInput`](crate::operation::delete_load_balancer_tls_certificate::DeleteLoadBalancerTlsCertificateInput).
    pub fn builder() -> crate::operation::delete_load_balancer_tls_certificate::builders::DeleteLoadBalancerTlsCertificateInputBuilder{
        crate::operation::delete_load_balancer_tls_certificate::builders::DeleteLoadBalancerTlsCertificateInputBuilder::default()
    }
}

/// A builder for [`DeleteLoadBalancerTlsCertificateInput`](crate::operation::delete_load_balancer_tls_certificate::DeleteLoadBalancerTlsCertificateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteLoadBalancerTlsCertificateInputBuilder {
    pub(crate) load_balancer_name: std::option::Option<std::string::String>,
    pub(crate) certificate_name: std::option::Option<std::string::String>,
    pub(crate) force: std::option::Option<bool>,
}
impl DeleteLoadBalancerTlsCertificateInputBuilder {
    /// <p>The load balancer name.</p>
    pub fn load_balancer_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.load_balancer_name = Some(input.into());
        self
    }
    /// <p>The load balancer name.</p>
    pub fn set_load_balancer_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.load_balancer_name = input;
        self
    }
    /// <p>The SSL/TLS certificate name.</p>
    pub fn certificate_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_name = Some(input.into());
        self
    }
    /// <p>The SSL/TLS certificate name.</p>
    pub fn set_certificate_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_name = input;
        self
    }
    /// <p>When <code>true</code>, forces the deletion of an SSL/TLS certificate.</p>
    /// <p>There can be two certificates associated with a Lightsail load balancer: the primary and the backup. The <code>force</code> parameter is required when the primary SSL/TLS certificate is in use by an instance attached to the load balancer.</p>
    pub fn force(mut self, input: bool) -> Self {
        self.force = Some(input);
        self
    }
    /// <p>When <code>true</code>, forces the deletion of an SSL/TLS certificate.</p>
    /// <p>There can be two certificates associated with a Lightsail load balancer: the primary and the backup. The <code>force</code> parameter is required when the primary SSL/TLS certificate is in use by an instance attached to the load balancer.</p>
    pub fn set_force(mut self, input: std::option::Option<bool>) -> Self {
        self.force = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteLoadBalancerTlsCertificateInput`](crate::operation::delete_load_balancer_tls_certificate::DeleteLoadBalancerTlsCertificateInput).
    pub fn build(self) -> Result<crate::operation::delete_load_balancer_tls_certificate::DeleteLoadBalancerTlsCertificateInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::delete_load_balancer_tls_certificate::DeleteLoadBalancerTlsCertificateInput {
                load_balancer_name: self.load_balancer_name
                ,
                certificate_name: self.certificate_name
                ,
                force: self.force
                ,
            }
        )
    }
}
