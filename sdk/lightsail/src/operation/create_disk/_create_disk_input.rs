// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDiskInput {
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    #[doc(hidden)]
    pub disk_name: std::option::Option<std::string::String>,
    /// <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>). Use the same Availability Zone as the Lightsail instance to which you want to attach the disk.</p>
    /// <p>Use the <code>get regions</code> operation to list the Availability Zones where Lightsail is currently available.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The size of the disk in GB (e.g., <code>32</code>).</p>
    #[doc(hidden)]
    pub size_in_gb: std::option::Option<i32>,
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>An array of objects that represent the add-ons to enable for the new disk.</p>
    #[doc(hidden)]
    pub add_ons: std::option::Option<std::vec::Vec<crate::types::AddOnRequest>>,
}
impl CreateDiskInput {
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    pub fn disk_name(&self) -> std::option::Option<&str> {
        self.disk_name.as_deref()
    }
    /// <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>). Use the same Availability Zone as the Lightsail instance to which you want to attach the disk.</p>
    /// <p>Use the <code>get regions</code> operation to list the Availability Zones where Lightsail is currently available.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The size of the disk in GB (e.g., <code>32</code>).</p>
    pub fn size_in_gb(&self) -> std::option::Option<i32> {
        self.size_in_gb
    }
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>An array of objects that represent the add-ons to enable for the new disk.</p>
    pub fn add_ons(&self) -> std::option::Option<&[crate::types::AddOnRequest]> {
        self.add_ons.as_deref()
    }
}
impl CreateDiskInput {
    /// Creates a new builder-style object to manufacture [`CreateDiskInput`](crate::operation::create_disk::CreateDiskInput).
    pub fn builder() -> crate::operation::create_disk::builders::CreateDiskInputBuilder {
        crate::operation::create_disk::builders::CreateDiskInputBuilder::default()
    }
}

/// A builder for [`CreateDiskInput`](crate::operation::create_disk::CreateDiskInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDiskInputBuilder {
    pub(crate) disk_name: std::option::Option<std::string::String>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) size_in_gb: std::option::Option<i32>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) add_ons: std::option::Option<std::vec::Vec<crate::types::AddOnRequest>>,
}
impl CreateDiskInputBuilder {
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    pub fn disk_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.disk_name = Some(input.into());
        self
    }
    /// <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
    pub fn set_disk_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.disk_name = input;
        self
    }
    /// <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>). Use the same Availability Zone as the Lightsail instance to which you want to attach the disk.</p>
    /// <p>Use the <code>get regions</code> operation to list the Availability Zones where Lightsail is currently available.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>). Use the same Availability Zone as the Lightsail instance to which you want to attach the disk.</p>
    /// <p>Use the <code>get regions</code> operation to list the Availability Zones where Lightsail is currently available.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The size of the disk in GB (e.g., <code>32</code>).</p>
    pub fn size_in_gb(mut self, input: i32) -> Self {
        self.size_in_gb = Some(input);
        self
    }
    /// <p>The size of the disk in GB (e.g., <code>32</code>).</p>
    pub fn set_size_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.size_in_gb = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    /// <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Appends an item to `add_ons`.
    ///
    /// To override the contents of this collection use [`set_add_ons`](Self::set_add_ons).
    ///
    /// <p>An array of objects that represent the add-ons to enable for the new disk.</p>
    pub fn add_ons(mut self, input: crate::types::AddOnRequest) -> Self {
        let mut v = self.add_ons.unwrap_or_default();
        v.push(input);
        self.add_ons = Some(v);
        self
    }
    /// <p>An array of objects that represent the add-ons to enable for the new disk.</p>
    pub fn set_add_ons(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AddOnRequest>>,
    ) -> Self {
        self.add_ons = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateDiskInput`](crate::operation::create_disk::CreateDiskInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_disk::CreateDiskInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_disk::CreateDiskInput {
            disk_name: self.disk_name,
            availability_zone: self.availability_zone,
            size_in_gb: self.size_in_gb,
            tags: self.tags,
            add_ons: self.add_ons,
        })
    }
}
