// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_allocate_static_ip_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AllocateStaticIpInput,
) {
    if let Some(var_1) = &input.static_ip_name {
        object.key("staticIpName").string(var_1);
    }
}

pub fn serialize_structure_attach_certificate_to_distribution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachCertificateToDistributionInput,
) {
    if let Some(var_2) = &input.distribution_name {
        object.key("distributionName").string(var_2);
    }
    if let Some(var_3) = &input.certificate_name {
        object.key("certificateName").string(var_3);
    }
}

pub fn serialize_structure_attach_disk_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachDiskInput,
) {
    if let Some(var_4) = &input.disk_name {
        object.key("diskName").string(var_4);
    }
    if let Some(var_5) = &input.instance_name {
        object.key("instanceName").string(var_5);
    }
    if let Some(var_6) = &input.disk_path {
        object.key("diskPath").string(var_6);
    }
}

pub fn serialize_structure_attach_instances_to_load_balancer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachInstancesToLoadBalancerInput,
) {
    if let Some(var_7) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_7);
    }
    if let Some(var_8) = &input.instance_names {
        let mut array_9 = object.key("instanceNames").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10);
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_attach_load_balancer_tls_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachLoadBalancerTlsCertificateInput,
) {
    if let Some(var_11) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_11);
    }
    if let Some(var_12) = &input.certificate_name {
        object.key("certificateName").string(var_12);
    }
}

pub fn serialize_structure_attach_static_ip_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachStaticIpInput,
) {
    if let Some(var_13) = &input.static_ip_name {
        object.key("staticIpName").string(var_13);
    }
    if let Some(var_14) = &input.instance_name {
        object.key("instanceName").string(var_14);
    }
}

pub fn serialize_structure_close_instance_public_ports_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CloseInstancePublicPortsInput,
) {
    if let Some(var_15) = &input.port_info {
        let mut object_16 = object.key("portInfo").start_object();
        crate::json_ser::serialize_structure_port_info(&mut object_16, var_15);
        object_16.finish();
    }
    if let Some(var_17) = &input.instance_name {
        object.key("instanceName").string(var_17);
    }
}

pub fn serialize_structure_copy_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopySnapshotInput,
) {
    if let Some(var_18) = &input.source_snapshot_name {
        object.key("sourceSnapshotName").string(var_18);
    }
    if let Some(var_19) = &input.source_resource_name {
        object.key("sourceResourceName").string(var_19);
    }
    if let Some(var_20) = &input.restore_date {
        object.key("restoreDate").string(var_20);
    }
    if let Some(var_21) = &input.use_latest_restorable_auto_snapshot {
        object
            .key("useLatestRestorableAutoSnapshot")
            .boolean(*var_21);
    }
    if let Some(var_22) = &input.target_snapshot_name {
        object.key("targetSnapshotName").string(var_22);
    }
    if let Some(var_23) = &input.source_region {
        object.key("sourceRegion").string(var_23.as_str());
    }
}

pub fn serialize_structure_create_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCertificateInput,
) {
    if let Some(var_24) = &input.certificate_name {
        object.key("certificateName").string(var_24);
    }
    if let Some(var_25) = &input.domain_name {
        object.key("domainName").string(var_25);
    }
    if let Some(var_26) = &input.subject_alternative_names {
        let mut array_27 = object.key("subjectAlternativeNames").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28);
            }
        }
        array_27.finish();
    }
    if let Some(var_29) = &input.tags {
        let mut array_30 = object.key("tags").start_array();
        for item_31 in var_29 {
            {
                let mut object_32 = array_30.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_32, item_31);
                object_32.finish();
            }
        }
        array_30.finish();
    }
}

pub fn serialize_structure_create_cloud_formation_stack_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCloudFormationStackInput,
) {
    if let Some(var_33) = &input.instances {
        let mut array_34 = object.key("instances").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_instance_entry(&mut object_36, item_35);
                object_36.finish();
            }
        }
        array_34.finish();
    }
}

pub fn serialize_structure_create_contact_method_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactMethodInput,
) {
    if let Some(var_37) = &input.protocol {
        object.key("protocol").string(var_37.as_str());
    }
    if let Some(var_38) = &input.contact_endpoint {
        object.key("contactEndpoint").string(var_38);
    }
}

pub fn serialize_structure_create_container_service_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContainerServiceInput,
) {
    if let Some(var_39) = &input.service_name {
        object.key("serviceName").string(var_39);
    }
    if let Some(var_40) = &input.power {
        object.key("power").string(var_40.as_str());
    }
    if let Some(var_41) = &input.scale {
        object.key("scale").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_41).into()),
        );
    }
    if let Some(var_42) = &input.tags {
        let mut array_43 = object.key("tags").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_45, item_44);
                object_45.finish();
            }
        }
        array_43.finish();
    }
    if let Some(var_46) = &input.public_domain_names {
        let mut object_47 = object.key("publicDomainNames").start_object();
        for (key_48, value_49) in var_46 {
            {
                let mut array_50 = object_47.key(key_48).start_array();
                for item_51 in value_49 {
                    {
                        array_50.value().string(item_51);
                    }
                }
                array_50.finish();
            }
        }
        object_47.finish();
    }
    if let Some(var_52) = &input.deployment {
        let mut object_53 = object.key("deployment").start_object();
        crate::json_ser::serialize_structure_container_service_deployment_request(
            &mut object_53,
            var_52,
        );
        object_53.finish();
    }
}

pub fn serialize_structure_create_container_service_deployment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContainerServiceDeploymentInput,
) {
    if let Some(var_54) = &input.service_name {
        object.key("serviceName").string(var_54);
    }
    if let Some(var_55) = &input.containers {
        let mut object_56 = object.key("containers").start_object();
        for (key_57, value_58) in var_55 {
            {
                let mut object_59 = object_56.key(key_57).start_object();
                crate::json_ser::serialize_structure_container(&mut object_59, value_58);
                object_59.finish();
            }
        }
        object_56.finish();
    }
    if let Some(var_60) = &input.public_endpoint {
        let mut object_61 = object.key("publicEndpoint").start_object();
        crate::json_ser::serialize_structure_endpoint_request(&mut object_61, var_60);
        object_61.finish();
    }
}

pub fn serialize_structure_create_disk_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDiskInput,
) {
    if let Some(var_62) = &input.disk_name {
        object.key("diskName").string(var_62);
    }
    if let Some(var_63) = &input.availability_zone {
        object.key("availabilityZone").string(var_63);
    }
    if let Some(var_64) = &input.size_in_gb {
        object.key("sizeInGb").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_64).into()),
        );
    }
    if let Some(var_65) = &input.tags {
        let mut array_66 = object.key("tags").start_array();
        for item_67 in var_65 {
            {
                let mut object_68 = array_66.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_68, item_67);
                object_68.finish();
            }
        }
        array_66.finish();
    }
    if let Some(var_69) = &input.add_ons {
        let mut array_70 = object.key("addOns").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_add_on_request(&mut object_72, item_71);
                object_72.finish();
            }
        }
        array_70.finish();
    }
}

pub fn serialize_structure_create_disk_from_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDiskFromSnapshotInput,
) {
    if let Some(var_73) = &input.disk_name {
        object.key("diskName").string(var_73);
    }
    if let Some(var_74) = &input.disk_snapshot_name {
        object.key("diskSnapshotName").string(var_74);
    }
    if let Some(var_75) = &input.availability_zone {
        object.key("availabilityZone").string(var_75);
    }
    if let Some(var_76) = &input.size_in_gb {
        object.key("sizeInGb").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_76).into()),
        );
    }
    if let Some(var_77) = &input.tags {
        let mut array_78 = object.key("tags").start_array();
        for item_79 in var_77 {
            {
                let mut object_80 = array_78.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_80, item_79);
                object_80.finish();
            }
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.add_ons {
        let mut array_82 = object.key("addOns").start_array();
        for item_83 in var_81 {
            {
                let mut object_84 = array_82.value().start_object();
                crate::json_ser::serialize_structure_add_on_request(&mut object_84, item_83);
                object_84.finish();
            }
        }
        array_82.finish();
    }
    if let Some(var_85) = &input.source_disk_name {
        object.key("sourceDiskName").string(var_85);
    }
    if let Some(var_86) = &input.restore_date {
        object.key("restoreDate").string(var_86);
    }
    if let Some(var_87) = &input.use_latest_restorable_auto_snapshot {
        object
            .key("useLatestRestorableAutoSnapshot")
            .boolean(*var_87);
    }
}

pub fn serialize_structure_create_disk_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDiskSnapshotInput,
) {
    if let Some(var_88) = &input.disk_name {
        object.key("diskName").string(var_88);
    }
    if let Some(var_89) = &input.disk_snapshot_name {
        object.key("diskSnapshotName").string(var_89);
    }
    if let Some(var_90) = &input.instance_name {
        object.key("instanceName").string(var_90);
    }
    if let Some(var_91) = &input.tags {
        let mut array_92 = object.key("tags").start_array();
        for item_93 in var_91 {
            {
                let mut object_94 = array_92.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_94, item_93);
                object_94.finish();
            }
        }
        array_92.finish();
    }
}

pub fn serialize_structure_create_distribution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDistributionInput,
) {
    if let Some(var_95) = &input.distribution_name {
        object.key("distributionName").string(var_95);
    }
    if let Some(var_96) = &input.origin {
        let mut object_97 = object.key("origin").start_object();
        crate::json_ser::serialize_structure_input_origin(&mut object_97, var_96);
        object_97.finish();
    }
    if let Some(var_98) = &input.default_cache_behavior {
        let mut object_99 = object.key("defaultCacheBehavior").start_object();
        crate::json_ser::serialize_structure_cache_behavior(&mut object_99, var_98);
        object_99.finish();
    }
    if let Some(var_100) = &input.cache_behavior_settings {
        let mut object_101 = object.key("cacheBehaviorSettings").start_object();
        crate::json_ser::serialize_structure_cache_settings(&mut object_101, var_100);
        object_101.finish();
    }
    if let Some(var_102) = &input.cache_behaviors {
        let mut array_103 = object.key("cacheBehaviors").start_array();
        for item_104 in var_102 {
            {
                let mut object_105 = array_103.value().start_object();
                crate::json_ser::serialize_structure_cache_behavior_per_path(
                    &mut object_105,
                    item_104,
                );
                object_105.finish();
            }
        }
        array_103.finish();
    }
    if let Some(var_106) = &input.bundle_id {
        object.key("bundleId").string(var_106);
    }
    if let Some(var_107) = &input.ip_address_type {
        object.key("ipAddressType").string(var_107.as_str());
    }
    if let Some(var_108) = &input.tags {
        let mut array_109 = object.key("tags").start_array();
        for item_110 in var_108 {
            {
                let mut object_111 = array_109.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_111, item_110);
                object_111.finish();
            }
        }
        array_109.finish();
    }
}

pub fn serialize_structure_create_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) {
    if let Some(var_112) = &input.domain_name {
        object.key("domainName").string(var_112);
    }
    if let Some(var_113) = &input.tags {
        let mut array_114 = object.key("tags").start_array();
        for item_115 in var_113 {
            {
                let mut object_116 = array_114.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_116, item_115);
                object_116.finish();
            }
        }
        array_114.finish();
    }
}

pub fn serialize_structure_create_domain_entry_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainEntryInput,
) {
    if let Some(var_117) = &input.domain_name {
        object.key("domainName").string(var_117);
    }
    if let Some(var_118) = &input.domain_entry {
        let mut object_119 = object.key("domainEntry").start_object();
        crate::json_ser::serialize_structure_domain_entry(&mut object_119, var_118);
        object_119.finish();
    }
}

pub fn serialize_structure_create_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInstancesInput,
) {
    if let Some(var_120) = &input.instance_names {
        let mut array_121 = object.key("instanceNames").start_array();
        for item_122 in var_120 {
            {
                array_121.value().string(item_122);
            }
        }
        array_121.finish();
    }
    if let Some(var_123) = &input.availability_zone {
        object.key("availabilityZone").string(var_123);
    }
    if let Some(var_124) = &input.custom_image_name {
        object.key("customImageName").string(var_124);
    }
    if let Some(var_125) = &input.blueprint_id {
        object.key("blueprintId").string(var_125);
    }
    if let Some(var_126) = &input.bundle_id {
        object.key("bundleId").string(var_126);
    }
    if let Some(var_127) = &input.user_data {
        object.key("userData").string(var_127);
    }
    if let Some(var_128) = &input.key_pair_name {
        object.key("keyPairName").string(var_128);
    }
    if let Some(var_129) = &input.tags {
        let mut array_130 = object.key("tags").start_array();
        for item_131 in var_129 {
            {
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_132, item_131);
                object_132.finish();
            }
        }
        array_130.finish();
    }
    if let Some(var_133) = &input.add_ons {
        let mut array_134 = object.key("addOns").start_array();
        for item_135 in var_133 {
            {
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_add_on_request(&mut object_136, item_135);
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.ip_address_type {
        object.key("ipAddressType").string(var_137.as_str());
    }
}

pub fn serialize_structure_create_instances_from_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInstancesFromSnapshotInput,
) {
    if let Some(var_138) = &input.instance_names {
        let mut array_139 = object.key("instanceNames").start_array();
        for item_140 in var_138 {
            {
                array_139.value().string(item_140);
            }
        }
        array_139.finish();
    }
    if let Some(var_141) = &input.attached_disk_mapping {
        let mut object_142 = object.key("attachedDiskMapping").start_object();
        for (key_143, value_144) in var_141 {
            {
                let mut array_145 = object_142.key(key_143).start_array();
                for item_146 in value_144 {
                    {
                        let mut object_147 = array_145.value().start_object();
                        crate::json_ser::serialize_structure_disk_map(&mut object_147, item_146);
                        object_147.finish();
                    }
                }
                array_145.finish();
            }
        }
        object_142.finish();
    }
    if let Some(var_148) = &input.availability_zone {
        object.key("availabilityZone").string(var_148);
    }
    if let Some(var_149) = &input.instance_snapshot_name {
        object.key("instanceSnapshotName").string(var_149);
    }
    if let Some(var_150) = &input.bundle_id {
        object.key("bundleId").string(var_150);
    }
    if let Some(var_151) = &input.user_data {
        object.key("userData").string(var_151);
    }
    if let Some(var_152) = &input.key_pair_name {
        object.key("keyPairName").string(var_152);
    }
    if let Some(var_153) = &input.tags {
        let mut array_154 = object.key("tags").start_array();
        for item_155 in var_153 {
            {
                let mut object_156 = array_154.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_156, item_155);
                object_156.finish();
            }
        }
        array_154.finish();
    }
    if let Some(var_157) = &input.add_ons {
        let mut array_158 = object.key("addOns").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_add_on_request(&mut object_160, item_159);
                object_160.finish();
            }
        }
        array_158.finish();
    }
    if let Some(var_161) = &input.ip_address_type {
        object.key("ipAddressType").string(var_161.as_str());
    }
    if let Some(var_162) = &input.source_instance_name {
        object.key("sourceInstanceName").string(var_162);
    }
    if let Some(var_163) = &input.restore_date {
        object.key("restoreDate").string(var_163);
    }
    if let Some(var_164) = &input.use_latest_restorable_auto_snapshot {
        object
            .key("useLatestRestorableAutoSnapshot")
            .boolean(*var_164);
    }
}

pub fn serialize_structure_create_instance_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInstanceSnapshotInput,
) {
    if let Some(var_165) = &input.instance_snapshot_name {
        object.key("instanceSnapshotName").string(var_165);
    }
    if let Some(var_166) = &input.instance_name {
        object.key("instanceName").string(var_166);
    }
    if let Some(var_167) = &input.tags {
        let mut array_168 = object.key("tags").start_array();
        for item_169 in var_167 {
            {
                let mut object_170 = array_168.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_170, item_169);
                object_170.finish();
            }
        }
        array_168.finish();
    }
}

pub fn serialize_structure_create_key_pair_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateKeyPairInput,
) {
    if let Some(var_171) = &input.key_pair_name {
        object.key("keyPairName").string(var_171);
    }
    if let Some(var_172) = &input.tags {
        let mut array_173 = object.key("tags").start_array();
        for item_174 in var_172 {
            {
                let mut object_175 = array_173.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_175, item_174);
                object_175.finish();
            }
        }
        array_173.finish();
    }
}

pub fn serialize_structure_create_load_balancer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLoadBalancerInput,
) {
    if let Some(var_176) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_176);
    }
    {
        object.key("instancePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_177) = &input.health_check_path {
        object.key("healthCheckPath").string(var_177);
    }
    if let Some(var_178) = &input.certificate_name {
        object.key("certificateName").string(var_178);
    }
    if let Some(var_179) = &input.certificate_domain_name {
        object.key("certificateDomainName").string(var_179);
    }
    if let Some(var_180) = &input.certificate_alternative_names {
        let mut array_181 = object.key("certificateAlternativeNames").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182);
            }
        }
        array_181.finish();
    }
    if let Some(var_183) = &input.tags {
        let mut array_184 = object.key("tags").start_array();
        for item_185 in var_183 {
            {
                let mut object_186 = array_184.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_186, item_185);
                object_186.finish();
            }
        }
        array_184.finish();
    }
    if let Some(var_187) = &input.ip_address_type {
        object.key("ipAddressType").string(var_187.as_str());
    }
}

pub fn serialize_structure_create_load_balancer_tls_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLoadBalancerTlsCertificateInput,
) {
    if let Some(var_188) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_188);
    }
    if let Some(var_189) = &input.certificate_name {
        object.key("certificateName").string(var_189);
    }
    if let Some(var_190) = &input.certificate_domain_name {
        object.key("certificateDomainName").string(var_190);
    }
    if let Some(var_191) = &input.certificate_alternative_names {
        let mut array_192 = object.key("certificateAlternativeNames").start_array();
        for item_193 in var_191 {
            {
                array_192.value().string(item_193);
            }
        }
        array_192.finish();
    }
    if let Some(var_194) = &input.tags {
        let mut array_195 = object.key("tags").start_array();
        for item_196 in var_194 {
            {
                let mut object_197 = array_195.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_197, item_196);
                object_197.finish();
            }
        }
        array_195.finish();
    }
}

pub fn serialize_structure_create_relational_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRelationalDatabaseInput,
) {
    if let Some(var_198) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_198);
    }
    if let Some(var_199) = &input.availability_zone {
        object.key("availabilityZone").string(var_199);
    }
    if let Some(var_200) = &input.relational_database_blueprint_id {
        object.key("relationalDatabaseBlueprintId").string(var_200);
    }
    if let Some(var_201) = &input.relational_database_bundle_id {
        object.key("relationalDatabaseBundleId").string(var_201);
    }
    if let Some(var_202) = &input.master_database_name {
        object.key("masterDatabaseName").string(var_202);
    }
    if let Some(var_203) = &input.master_username {
        object.key("masterUsername").string(var_203);
    }
    if let Some(var_204) = &input.master_user_password {
        object.key("masterUserPassword").string(var_204);
    }
    if let Some(var_205) = &input.preferred_backup_window {
        object.key("preferredBackupWindow").string(var_205);
    }
    if let Some(var_206) = &input.preferred_maintenance_window {
        object.key("preferredMaintenanceWindow").string(var_206);
    }
    if let Some(var_207) = &input.publicly_accessible {
        object.key("publiclyAccessible").boolean(*var_207);
    }
    if let Some(var_208) = &input.tags {
        let mut array_209 = object.key("tags").start_array();
        for item_210 in var_208 {
            {
                let mut object_211 = array_209.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_211, item_210);
                object_211.finish();
            }
        }
        array_209.finish();
    }
}

pub fn serialize_structure_create_relational_database_from_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRelationalDatabaseFromSnapshotInput,
) {
    if let Some(var_212) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_212);
    }
    if let Some(var_213) = &input.availability_zone {
        object.key("availabilityZone").string(var_213);
    }
    if let Some(var_214) = &input.publicly_accessible {
        object.key("publiclyAccessible").boolean(*var_214);
    }
    if let Some(var_215) = &input.relational_database_snapshot_name {
        object.key("relationalDatabaseSnapshotName").string(var_215);
    }
    if let Some(var_216) = &input.relational_database_bundle_id {
        object.key("relationalDatabaseBundleId").string(var_216);
    }
    if let Some(var_217) = &input.source_relational_database_name {
        object.key("sourceRelationalDatabaseName").string(var_217);
    }
    if let Some(var_218) = &input.restore_time {
        object
            .key("restoreTime")
            .instant(var_218, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_219) = &input.use_latest_restorable_time {
        object.key("useLatestRestorableTime").boolean(*var_219);
    }
    if let Some(var_220) = &input.tags {
        let mut array_221 = object.key("tags").start_array();
        for item_222 in var_220 {
            {
                let mut object_223 = array_221.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_223, item_222);
                object_223.finish();
            }
        }
        array_221.finish();
    }
}

pub fn serialize_structure_create_relational_database_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRelationalDatabaseSnapshotInput,
) {
    if let Some(var_224) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_224);
    }
    if let Some(var_225) = &input.relational_database_snapshot_name {
        object.key("relationalDatabaseSnapshotName").string(var_225);
    }
    if let Some(var_226) = &input.tags {
        let mut array_227 = object.key("tags").start_array();
        for item_228 in var_226 {
            {
                let mut object_229 = array_227.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_229, item_228);
                object_229.finish();
            }
        }
        array_227.finish();
    }
}

pub fn serialize_structure_delete_alarm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlarmInput,
) {
    if let Some(var_230) = &input.alarm_name {
        object.key("alarmName").string(var_230);
    }
}

pub fn serialize_structure_delete_auto_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAutoSnapshotInput,
) {
    if let Some(var_231) = &input.resource_name {
        object.key("resourceName").string(var_231);
    }
    if let Some(var_232) = &input.date {
        object.key("date").string(var_232);
    }
}

pub fn serialize_structure_delete_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCertificateInput,
) {
    if let Some(var_233) = &input.certificate_name {
        object.key("certificateName").string(var_233);
    }
}

pub fn serialize_structure_delete_contact_method_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContactMethodInput,
) {
    if let Some(var_234) = &input.protocol {
        object.key("protocol").string(var_234.as_str());
    }
}

pub fn serialize_structure_delete_container_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContainerImageInput,
) {
    if let Some(var_235) = &input.service_name {
        object.key("serviceName").string(var_235);
    }
    if let Some(var_236) = &input.image {
        object.key("image").string(var_236);
    }
}

pub fn serialize_structure_delete_container_service_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContainerServiceInput,
) {
    if let Some(var_237) = &input.service_name {
        object.key("serviceName").string(var_237);
    }
}

pub fn serialize_structure_delete_disk_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDiskInput,
) {
    if let Some(var_238) = &input.disk_name {
        object.key("diskName").string(var_238);
    }
    if let Some(var_239) = &input.force_delete_add_ons {
        object.key("forceDeleteAddOns").boolean(*var_239);
    }
}

pub fn serialize_structure_delete_disk_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDiskSnapshotInput,
) {
    if let Some(var_240) = &input.disk_snapshot_name {
        object.key("diskSnapshotName").string(var_240);
    }
}

pub fn serialize_structure_delete_distribution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDistributionInput,
) {
    if let Some(var_241) = &input.distribution_name {
        object.key("distributionName").string(var_241);
    }
}

pub fn serialize_structure_delete_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainInput,
) {
    if let Some(var_242) = &input.domain_name {
        object.key("domainName").string(var_242);
    }
}

pub fn serialize_structure_delete_domain_entry_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainEntryInput,
) {
    if let Some(var_243) = &input.domain_name {
        object.key("domainName").string(var_243);
    }
    if let Some(var_244) = &input.domain_entry {
        let mut object_245 = object.key("domainEntry").start_object();
        crate::json_ser::serialize_structure_domain_entry(&mut object_245, var_244);
        object_245.finish();
    }
}

pub fn serialize_structure_delete_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInstanceInput,
) {
    if let Some(var_246) = &input.instance_name {
        object.key("instanceName").string(var_246);
    }
    if let Some(var_247) = &input.force_delete_add_ons {
        object.key("forceDeleteAddOns").boolean(*var_247);
    }
}

pub fn serialize_structure_delete_instance_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInstanceSnapshotInput,
) {
    if let Some(var_248) = &input.instance_snapshot_name {
        object.key("instanceSnapshotName").string(var_248);
    }
}

pub fn serialize_structure_delete_key_pair_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteKeyPairInput,
) {
    if let Some(var_249) = &input.key_pair_name {
        object.key("keyPairName").string(var_249);
    }
}

pub fn serialize_structure_delete_known_host_keys_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteKnownHostKeysInput,
) {
    if let Some(var_250) = &input.instance_name {
        object.key("instanceName").string(var_250);
    }
}

pub fn serialize_structure_delete_load_balancer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLoadBalancerInput,
) {
    if let Some(var_251) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_251);
    }
}

pub fn serialize_structure_delete_load_balancer_tls_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLoadBalancerTlsCertificateInput,
) {
    if let Some(var_252) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_252);
    }
    if let Some(var_253) = &input.certificate_name {
        object.key("certificateName").string(var_253);
    }
    if let Some(var_254) = &input.force {
        object.key("force").boolean(*var_254);
    }
}

pub fn serialize_structure_delete_relational_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRelationalDatabaseInput,
) {
    if let Some(var_255) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_255);
    }
    if let Some(var_256) = &input.skip_final_snapshot {
        object.key("skipFinalSnapshot").boolean(*var_256);
    }
    if let Some(var_257) = &input.final_relational_database_snapshot_name {
        object
            .key("finalRelationalDatabaseSnapshotName")
            .string(var_257);
    }
}

pub fn serialize_structure_delete_relational_database_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRelationalDatabaseSnapshotInput,
) {
    if let Some(var_258) = &input.relational_database_snapshot_name {
        object.key("relationalDatabaseSnapshotName").string(var_258);
    }
}

pub fn serialize_structure_detach_certificate_from_distribution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachCertificateFromDistributionInput,
) {
    if let Some(var_259) = &input.distribution_name {
        object.key("distributionName").string(var_259);
    }
}

pub fn serialize_structure_detach_disk_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachDiskInput,
) {
    if let Some(var_260) = &input.disk_name {
        object.key("diskName").string(var_260);
    }
}

pub fn serialize_structure_detach_instances_from_load_balancer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachInstancesFromLoadBalancerInput,
) {
    if let Some(var_261) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_261);
    }
    if let Some(var_262) = &input.instance_names {
        let mut array_263 = object.key("instanceNames").start_array();
        for item_264 in var_262 {
            {
                array_263.value().string(item_264);
            }
        }
        array_263.finish();
    }
}

pub fn serialize_structure_detach_static_ip_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachStaticIpInput,
) {
    if let Some(var_265) = &input.static_ip_name {
        object.key("staticIpName").string(var_265);
    }
}

pub fn serialize_structure_disable_add_on_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableAddOnInput,
) {
    if let Some(var_266) = &input.add_on_type {
        object.key("addOnType").string(var_266.as_str());
    }
    if let Some(var_267) = &input.resource_name {
        object.key("resourceName").string(var_267);
    }
}

pub fn serialize_structure_enable_add_on_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableAddOnInput,
) {
    if let Some(var_268) = &input.resource_name {
        object.key("resourceName").string(var_268);
    }
    if let Some(var_269) = &input.add_on_request {
        let mut object_270 = object.key("addOnRequest").start_object();
        crate::json_ser::serialize_structure_add_on_request(&mut object_270, var_269);
        object_270.finish();
    }
}

pub fn serialize_structure_export_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExportSnapshotInput,
) {
    if let Some(var_271) = &input.source_snapshot_name {
        object.key("sourceSnapshotName").string(var_271);
    }
}

pub fn serialize_structure_get_active_names_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetActiveNamesInput,
) {
    if let Some(var_272) = &input.page_token {
        object.key("pageToken").string(var_272);
    }
}

pub fn serialize_structure_get_alarms_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAlarmsInput,
) {
    if let Some(var_273) = &input.alarm_name {
        object.key("alarmName").string(var_273);
    }
    if let Some(var_274) = &input.page_token {
        object.key("pageToken").string(var_274);
    }
    if let Some(var_275) = &input.monitored_resource_name {
        object.key("monitoredResourceName").string(var_275);
    }
}

pub fn serialize_structure_get_auto_snapshots_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAutoSnapshotsInput,
) {
    if let Some(var_276) = &input.resource_name {
        object.key("resourceName").string(var_276);
    }
}

pub fn serialize_structure_get_blueprints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintsInput,
) {
    if let Some(var_277) = &input.include_inactive {
        object.key("includeInactive").boolean(*var_277);
    }
    if let Some(var_278) = &input.page_token {
        object.key("pageToken").string(var_278);
    }
}

pub fn serialize_structure_get_bundles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBundlesInput,
) {
    if let Some(var_279) = &input.include_inactive {
        object.key("includeInactive").boolean(*var_279);
    }
    if let Some(var_280) = &input.page_token {
        object.key("pageToken").string(var_280);
    }
}

pub fn serialize_structure_get_certificates_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCertificatesInput,
) {
    if let Some(var_281) = &input.certificate_statuses {
        let mut array_282 = object.key("certificateStatuses").start_array();
        for item_283 in var_281 {
            {
                array_282.value().string(item_283.as_str());
            }
        }
        array_282.finish();
    }
    if input.include_certificate_details {
        object
            .key("includeCertificateDetails")
            .boolean(input.include_certificate_details);
    }
    if let Some(var_284) = &input.certificate_name {
        object.key("certificateName").string(var_284);
    }
}

pub fn serialize_structure_get_cloud_formation_stack_records_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCloudFormationStackRecordsInput,
) {
    if let Some(var_285) = &input.page_token {
        object.key("pageToken").string(var_285);
    }
}

pub fn serialize_structure_get_contact_methods_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContactMethodsInput,
) {
    if let Some(var_286) = &input.protocols {
        let mut array_287 = object.key("protocols").start_array();
        for item_288 in var_286 {
            {
                array_287.value().string(item_288.as_str());
            }
        }
        array_287.finish();
    }
}

pub fn serialize_structure_get_container_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContainerImagesInput,
) {
    if let Some(var_289) = &input.service_name {
        object.key("serviceName").string(var_289);
    }
}

pub fn serialize_structure_get_container_log_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContainerLogInput,
) {
    if let Some(var_290) = &input.service_name {
        object.key("serviceName").string(var_290);
    }
    if let Some(var_291) = &input.container_name {
        object.key("containerName").string(var_291);
    }
    if let Some(var_292) = &input.start_time {
        object
            .key("startTime")
            .instant(var_292, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_293) = &input.end_time {
        object
            .key("endTime")
            .instant(var_293, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_294) = &input.filter_pattern {
        object.key("filterPattern").string(var_294);
    }
    if let Some(var_295) = &input.page_token {
        object.key("pageToken").string(var_295);
    }
}

pub fn serialize_structure_get_container_service_deployments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContainerServiceDeploymentsInput,
) {
    if let Some(var_296) = &input.service_name {
        object.key("serviceName").string(var_296);
    }
}

pub fn serialize_structure_get_container_service_metric_data_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContainerServiceMetricDataInput,
) {
    if let Some(var_297) = &input.service_name {
        object.key("serviceName").string(var_297);
    }
    if let Some(var_298) = &input.metric_name {
        object.key("metricName").string(var_298.as_str());
    }
    if let Some(var_299) = &input.start_time {
        object
            .key("startTime")
            .instant(var_299, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_300) = &input.end_time {
        object
            .key("endTime")
            .instant(var_300, smithy_types::instant::Format::EpochSeconds);
    }
    {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_301) = &input.statistics {
        let mut array_302 = object.key("statistics").start_array();
        for item_303 in var_301 {
            {
                array_302.value().string(item_303.as_str());
            }
        }
        array_302.finish();
    }
}

pub fn serialize_structure_get_container_services_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContainerServicesInput,
) {
    if let Some(var_304) = &input.service_name {
        object.key("serviceName").string(var_304);
    }
}

pub fn serialize_structure_get_disk_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDiskInput,
) {
    if let Some(var_305) = &input.disk_name {
        object.key("diskName").string(var_305);
    }
}

pub fn serialize_structure_get_disks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDisksInput,
) {
    if let Some(var_306) = &input.page_token {
        object.key("pageToken").string(var_306);
    }
}

pub fn serialize_structure_get_disk_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDiskSnapshotInput,
) {
    if let Some(var_307) = &input.disk_snapshot_name {
        object.key("diskSnapshotName").string(var_307);
    }
}

pub fn serialize_structure_get_disk_snapshots_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDiskSnapshotsInput,
) {
    if let Some(var_308) = &input.page_token {
        object.key("pageToken").string(var_308);
    }
}

pub fn serialize_structure_get_distribution_latest_cache_reset_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDistributionLatestCacheResetInput,
) {
    if let Some(var_309) = &input.distribution_name {
        object.key("distributionName").string(var_309);
    }
}

pub fn serialize_structure_get_distribution_metric_data_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDistributionMetricDataInput,
) {
    if let Some(var_310) = &input.distribution_name {
        object.key("distributionName").string(var_310);
    }
    if let Some(var_311) = &input.metric_name {
        object.key("metricName").string(var_311.as_str());
    }
    if let Some(var_312) = &input.start_time {
        object
            .key("startTime")
            .instant(var_312, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_313) = &input.end_time {
        object
            .key("endTime")
            .instant(var_313, smithy_types::instant::Format::EpochSeconds);
    }
    {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_314) = &input.unit {
        object.key("unit").string(var_314.as_str());
    }
    if let Some(var_315) = &input.statistics {
        let mut array_316 = object.key("statistics").start_array();
        for item_317 in var_315 {
            {
                array_316.value().string(item_317.as_str());
            }
        }
        array_316.finish();
    }
}

pub fn serialize_structure_get_distributions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDistributionsInput,
) {
    if let Some(var_318) = &input.distribution_name {
        object.key("distributionName").string(var_318);
    }
    if let Some(var_319) = &input.page_token {
        object.key("pageToken").string(var_319);
    }
}

pub fn serialize_structure_get_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDomainInput,
) {
    if let Some(var_320) = &input.domain_name {
        object.key("domainName").string(var_320);
    }
}

pub fn serialize_structure_get_domains_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDomainsInput,
) {
    if let Some(var_321) = &input.page_token {
        object.key("pageToken").string(var_321);
    }
}

pub fn serialize_structure_get_export_snapshot_records_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetExportSnapshotRecordsInput,
) {
    if let Some(var_322) = &input.page_token {
        object.key("pageToken").string(var_322);
    }
}

pub fn serialize_structure_get_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceInput,
) {
    if let Some(var_323) = &input.instance_name {
        object.key("instanceName").string(var_323);
    }
}

pub fn serialize_structure_get_instance_access_details_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceAccessDetailsInput,
) {
    if let Some(var_324) = &input.instance_name {
        object.key("instanceName").string(var_324);
    }
    if let Some(var_325) = &input.protocol {
        object.key("protocol").string(var_325.as_str());
    }
}

pub fn serialize_structure_get_instance_metric_data_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceMetricDataInput,
) {
    if let Some(var_326) = &input.instance_name {
        object.key("instanceName").string(var_326);
    }
    if let Some(var_327) = &input.metric_name {
        object.key("metricName").string(var_327.as_str());
    }
    {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_328) = &input.start_time {
        object
            .key("startTime")
            .instant(var_328, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_329) = &input.end_time {
        object
            .key("endTime")
            .instant(var_329, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_330) = &input.unit {
        object.key("unit").string(var_330.as_str());
    }
    if let Some(var_331) = &input.statistics {
        let mut array_332 = object.key("statistics").start_array();
        for item_333 in var_331 {
            {
                array_332.value().string(item_333.as_str());
            }
        }
        array_332.finish();
    }
}

pub fn serialize_structure_get_instance_port_states_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstancePortStatesInput,
) {
    if let Some(var_334) = &input.instance_name {
        object.key("instanceName").string(var_334);
    }
}

pub fn serialize_structure_get_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstancesInput,
) {
    if let Some(var_335) = &input.page_token {
        object.key("pageToken").string(var_335);
    }
}

pub fn serialize_structure_get_instance_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceSnapshotInput,
) {
    if let Some(var_336) = &input.instance_snapshot_name {
        object.key("instanceSnapshotName").string(var_336);
    }
}

pub fn serialize_structure_get_instance_snapshots_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceSnapshotsInput,
) {
    if let Some(var_337) = &input.page_token {
        object.key("pageToken").string(var_337);
    }
}

pub fn serialize_structure_get_instance_state_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInstanceStateInput,
) {
    if let Some(var_338) = &input.instance_name {
        object.key("instanceName").string(var_338);
    }
}

pub fn serialize_structure_get_key_pair_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetKeyPairInput,
) {
    if let Some(var_339) = &input.key_pair_name {
        object.key("keyPairName").string(var_339);
    }
}

pub fn serialize_structure_get_key_pairs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetKeyPairsInput,
) {
    if let Some(var_340) = &input.page_token {
        object.key("pageToken").string(var_340);
    }
}

pub fn serialize_structure_get_load_balancer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoadBalancerInput,
) {
    if let Some(var_341) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_341);
    }
}

pub fn serialize_structure_get_load_balancer_metric_data_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoadBalancerMetricDataInput,
) {
    if let Some(var_342) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_342);
    }
    if let Some(var_343) = &input.metric_name {
        object.key("metricName").string(var_343.as_str());
    }
    {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_344) = &input.start_time {
        object
            .key("startTime")
            .instant(var_344, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_345) = &input.end_time {
        object
            .key("endTime")
            .instant(var_345, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_346) = &input.unit {
        object.key("unit").string(var_346.as_str());
    }
    if let Some(var_347) = &input.statistics {
        let mut array_348 = object.key("statistics").start_array();
        for item_349 in var_347 {
            {
                array_348.value().string(item_349.as_str());
            }
        }
        array_348.finish();
    }
}

pub fn serialize_structure_get_load_balancers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoadBalancersInput,
) {
    if let Some(var_350) = &input.page_token {
        object.key("pageToken").string(var_350);
    }
}

pub fn serialize_structure_get_load_balancer_tls_certificates_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLoadBalancerTlsCertificatesInput,
) {
    if let Some(var_351) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_351);
    }
}

pub fn serialize_structure_get_operation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOperationInput,
) {
    if let Some(var_352) = &input.operation_id {
        object.key("operationId").string(var_352);
    }
}

pub fn serialize_structure_get_operations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOperationsInput,
) {
    if let Some(var_353) = &input.page_token {
        object.key("pageToken").string(var_353);
    }
}

pub fn serialize_structure_get_operations_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOperationsForResourceInput,
) {
    if let Some(var_354) = &input.resource_name {
        object.key("resourceName").string(var_354);
    }
    if let Some(var_355) = &input.page_token {
        object.key("pageToken").string(var_355);
    }
}

pub fn serialize_structure_get_regions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegionsInput,
) {
    if let Some(var_356) = &input.include_availability_zones {
        object.key("includeAvailabilityZones").boolean(*var_356);
    }
    if let Some(var_357) = &input.include_relational_database_availability_zones {
        object
            .key("includeRelationalDatabaseAvailabilityZones")
            .boolean(*var_357);
    }
}

pub fn serialize_structure_get_relational_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseInput,
) {
    if let Some(var_358) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_358);
    }
}

pub fn serialize_structure_get_relational_database_blueprints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseBlueprintsInput,
) {
    if let Some(var_359) = &input.page_token {
        object.key("pageToken").string(var_359);
    }
}

pub fn serialize_structure_get_relational_database_bundles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseBundlesInput,
) {
    if let Some(var_360) = &input.page_token {
        object.key("pageToken").string(var_360);
    }
}

pub fn serialize_structure_get_relational_database_events_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseEventsInput,
) {
    if let Some(var_361) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_361);
    }
    if let Some(var_362) = &input.duration_in_minutes {
        object.key("durationInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_362).into()),
        );
    }
    if let Some(var_363) = &input.page_token {
        object.key("pageToken").string(var_363);
    }
}

pub fn serialize_structure_get_relational_database_log_events_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseLogEventsInput,
) {
    if let Some(var_364) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_364);
    }
    if let Some(var_365) = &input.log_stream_name {
        object.key("logStreamName").string(var_365);
    }
    if let Some(var_366) = &input.start_time {
        object
            .key("startTime")
            .instant(var_366, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_367) = &input.end_time {
        object
            .key("endTime")
            .instant(var_367, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_368) = &input.start_from_head {
        object.key("startFromHead").boolean(*var_368);
    }
    if let Some(var_369) = &input.page_token {
        object.key("pageToken").string(var_369);
    }
}

pub fn serialize_structure_get_relational_database_log_streams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseLogStreamsInput,
) {
    if let Some(var_370) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_370);
    }
}

pub fn serialize_structure_get_relational_database_master_user_password_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseMasterUserPasswordInput,
) {
    if let Some(var_371) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_371);
    }
    if let Some(var_372) = &input.password_version {
        object.key("passwordVersion").string(var_372.as_str());
    }
}

pub fn serialize_structure_get_relational_database_metric_data_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseMetricDataInput,
) {
    if let Some(var_373) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_373);
    }
    if let Some(var_374) = &input.metric_name {
        object.key("metricName").string(var_374.as_str());
    }
    {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_375) = &input.start_time {
        object
            .key("startTime")
            .instant(var_375, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_376) = &input.end_time {
        object
            .key("endTime")
            .instant(var_376, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_377) = &input.unit {
        object.key("unit").string(var_377.as_str());
    }
    if let Some(var_378) = &input.statistics {
        let mut array_379 = object.key("statistics").start_array();
        for item_380 in var_378 {
            {
                array_379.value().string(item_380.as_str());
            }
        }
        array_379.finish();
    }
}

pub fn serialize_structure_get_relational_database_parameters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseParametersInput,
) {
    if let Some(var_381) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_381);
    }
    if let Some(var_382) = &input.page_token {
        object.key("pageToken").string(var_382);
    }
}

pub fn serialize_structure_get_relational_databases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabasesInput,
) {
    if let Some(var_383) = &input.page_token {
        object.key("pageToken").string(var_383);
    }
}

pub fn serialize_structure_get_relational_database_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseSnapshotInput,
) {
    if let Some(var_384) = &input.relational_database_snapshot_name {
        object.key("relationalDatabaseSnapshotName").string(var_384);
    }
}

pub fn serialize_structure_get_relational_database_snapshots_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRelationalDatabaseSnapshotsInput,
) {
    if let Some(var_385) = &input.page_token {
        object.key("pageToken").string(var_385);
    }
}

pub fn serialize_structure_get_static_ip_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStaticIpInput,
) {
    if let Some(var_386) = &input.static_ip_name {
        object.key("staticIpName").string(var_386);
    }
}

pub fn serialize_structure_get_static_ips_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStaticIpsInput,
) {
    if let Some(var_387) = &input.page_token {
        object.key("pageToken").string(var_387);
    }
}

pub fn serialize_structure_import_key_pair_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportKeyPairInput,
) {
    if let Some(var_388) = &input.key_pair_name {
        object.key("keyPairName").string(var_388);
    }
    if let Some(var_389) = &input.public_key_base64 {
        object.key("publicKeyBase64").string(var_389);
    }
}

pub fn serialize_structure_open_instance_public_ports_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::OpenInstancePublicPortsInput,
) {
    if let Some(var_390) = &input.port_info {
        let mut object_391 = object.key("portInfo").start_object();
        crate::json_ser::serialize_structure_port_info(&mut object_391, var_390);
        object_391.finish();
    }
    if let Some(var_392) = &input.instance_name {
        object.key("instanceName").string(var_392);
    }
}

pub fn serialize_structure_put_alarm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAlarmInput,
) {
    if let Some(var_393) = &input.alarm_name {
        object.key("alarmName").string(var_393);
    }
    if let Some(var_394) = &input.metric_name {
        object.key("metricName").string(var_394.as_str());
    }
    if let Some(var_395) = &input.monitored_resource_name {
        object.key("monitoredResourceName").string(var_395);
    }
    if let Some(var_396) = &input.comparison_operator {
        object.key("comparisonOperator").string(var_396.as_str());
    }
    if let Some(var_397) = &input.threshold {
        object.key("threshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_397).into()),
        );
    }
    if let Some(var_398) = &input.evaluation_periods {
        object.key("evaluationPeriods").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_398).into()),
        );
    }
    if let Some(var_399) = &input.datapoints_to_alarm {
        object.key("datapointsToAlarm").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_399).into()),
        );
    }
    if let Some(var_400) = &input.treat_missing_data {
        object.key("treatMissingData").string(var_400.as_str());
    }
    if let Some(var_401) = &input.contact_protocols {
        let mut array_402 = object.key("contactProtocols").start_array();
        for item_403 in var_401 {
            {
                array_402.value().string(item_403.as_str());
            }
        }
        array_402.finish();
    }
    if let Some(var_404) = &input.notification_triggers {
        let mut array_405 = object.key("notificationTriggers").start_array();
        for item_406 in var_404 {
            {
                array_405.value().string(item_406.as_str());
            }
        }
        array_405.finish();
    }
    if let Some(var_407) = &input.notification_enabled {
        object.key("notificationEnabled").boolean(*var_407);
    }
}

pub fn serialize_structure_put_instance_public_ports_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutInstancePublicPortsInput,
) {
    if let Some(var_408) = &input.port_infos {
        let mut array_409 = object.key("portInfos").start_array();
        for item_410 in var_408 {
            {
                let mut object_411 = array_409.value().start_object();
                crate::json_ser::serialize_structure_port_info(&mut object_411, item_410);
                object_411.finish();
            }
        }
        array_409.finish();
    }
    if let Some(var_412) = &input.instance_name {
        object.key("instanceName").string(var_412);
    }
}

pub fn serialize_structure_reboot_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RebootInstanceInput,
) {
    if let Some(var_413) = &input.instance_name {
        object.key("instanceName").string(var_413);
    }
}

pub fn serialize_structure_reboot_relational_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RebootRelationalDatabaseInput,
) {
    if let Some(var_414) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_414);
    }
}

pub fn serialize_structure_register_container_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterContainerImageInput,
) {
    if let Some(var_415) = &input.service_name {
        object.key("serviceName").string(var_415);
    }
    if let Some(var_416) = &input.label {
        object.key("label").string(var_416);
    }
    if let Some(var_417) = &input.digest {
        object.key("digest").string(var_417);
    }
}

pub fn serialize_structure_release_static_ip_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReleaseStaticIpInput,
) {
    if let Some(var_418) = &input.static_ip_name {
        object.key("staticIpName").string(var_418);
    }
}

pub fn serialize_structure_reset_distribution_cache_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetDistributionCacheInput,
) {
    if let Some(var_419) = &input.distribution_name {
        object.key("distributionName").string(var_419);
    }
}

pub fn serialize_structure_send_contact_method_verification_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendContactMethodVerificationInput,
) {
    if let Some(var_420) = &input.protocol {
        object.key("protocol").string(var_420.as_str());
    }
}

pub fn serialize_structure_set_ip_address_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetIpAddressTypeInput,
) {
    if let Some(var_421) = &input.resource_type {
        object.key("resourceType").string(var_421.as_str());
    }
    if let Some(var_422) = &input.resource_name {
        object.key("resourceName").string(var_422);
    }
    if let Some(var_423) = &input.ip_address_type {
        object.key("ipAddressType").string(var_423.as_str());
    }
}

pub fn serialize_structure_start_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartInstanceInput,
) {
    if let Some(var_424) = &input.instance_name {
        object.key("instanceName").string(var_424);
    }
}

pub fn serialize_structure_start_relational_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartRelationalDatabaseInput,
) {
    if let Some(var_425) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_425);
    }
}

pub fn serialize_structure_stop_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopInstanceInput,
) {
    if let Some(var_426) = &input.instance_name {
        object.key("instanceName").string(var_426);
    }
    if let Some(var_427) = &input.force {
        object.key("force").boolean(*var_427);
    }
}

pub fn serialize_structure_stop_relational_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopRelationalDatabaseInput,
) {
    if let Some(var_428) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_428);
    }
    if let Some(var_429) = &input.relational_database_snapshot_name {
        object.key("relationalDatabaseSnapshotName").string(var_429);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_430) = &input.resource_name {
        object.key("resourceName").string(var_430);
    }
    if let Some(var_431) = &input.resource_arn {
        object.key("resourceArn").string(var_431);
    }
    if let Some(var_432) = &input.tags {
        let mut array_433 = object.key("tags").start_array();
        for item_434 in var_432 {
            {
                let mut object_435 = array_433.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_435, item_434);
                object_435.finish();
            }
        }
        array_433.finish();
    }
}

pub fn serialize_structure_test_alarm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestAlarmInput,
) {
    if let Some(var_436) = &input.alarm_name {
        object.key("alarmName").string(var_436);
    }
    if let Some(var_437) = &input.state {
        object.key("state").string(var_437.as_str());
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_438) = &input.resource_name {
        object.key("resourceName").string(var_438);
    }
    if let Some(var_439) = &input.resource_arn {
        object.key("resourceArn").string(var_439);
    }
    if let Some(var_440) = &input.tag_keys {
        let mut array_441 = object.key("tagKeys").start_array();
        for item_442 in var_440 {
            {
                array_441.value().string(item_442);
            }
        }
        array_441.finish();
    }
}

pub fn serialize_structure_update_container_service_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContainerServiceInput,
) {
    if let Some(var_443) = &input.service_name {
        object.key("serviceName").string(var_443);
    }
    if let Some(var_444) = &input.power {
        object.key("power").string(var_444.as_str());
    }
    if let Some(var_445) = &input.scale {
        object.key("scale").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_445).into()),
        );
    }
    if let Some(var_446) = &input.is_disabled {
        object.key("isDisabled").boolean(*var_446);
    }
    if let Some(var_447) = &input.public_domain_names {
        let mut object_448 = object.key("publicDomainNames").start_object();
        for (key_449, value_450) in var_447 {
            {
                let mut array_451 = object_448.key(key_449).start_array();
                for item_452 in value_450 {
                    {
                        array_451.value().string(item_452);
                    }
                }
                array_451.finish();
            }
        }
        object_448.finish();
    }
}

pub fn serialize_structure_update_distribution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDistributionInput,
) {
    if let Some(var_453) = &input.distribution_name {
        object.key("distributionName").string(var_453);
    }
    if let Some(var_454) = &input.origin {
        let mut object_455 = object.key("origin").start_object();
        crate::json_ser::serialize_structure_input_origin(&mut object_455, var_454);
        object_455.finish();
    }
    if let Some(var_456) = &input.default_cache_behavior {
        let mut object_457 = object.key("defaultCacheBehavior").start_object();
        crate::json_ser::serialize_structure_cache_behavior(&mut object_457, var_456);
        object_457.finish();
    }
    if let Some(var_458) = &input.cache_behavior_settings {
        let mut object_459 = object.key("cacheBehaviorSettings").start_object();
        crate::json_ser::serialize_structure_cache_settings(&mut object_459, var_458);
        object_459.finish();
    }
    if let Some(var_460) = &input.cache_behaviors {
        let mut array_461 = object.key("cacheBehaviors").start_array();
        for item_462 in var_460 {
            {
                let mut object_463 = array_461.value().start_object();
                crate::json_ser::serialize_structure_cache_behavior_per_path(
                    &mut object_463,
                    item_462,
                );
                object_463.finish();
            }
        }
        array_461.finish();
    }
    if let Some(var_464) = &input.is_enabled {
        object.key("isEnabled").boolean(*var_464);
    }
}

pub fn serialize_structure_update_distribution_bundle_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDistributionBundleInput,
) {
    if let Some(var_465) = &input.distribution_name {
        object.key("distributionName").string(var_465);
    }
    if let Some(var_466) = &input.bundle_id {
        object.key("bundleId").string(var_466);
    }
}

pub fn serialize_structure_update_domain_entry_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainEntryInput,
) {
    if let Some(var_467) = &input.domain_name {
        object.key("domainName").string(var_467);
    }
    if let Some(var_468) = &input.domain_entry {
        let mut object_469 = object.key("domainEntry").start_object();
        crate::json_ser::serialize_structure_domain_entry(&mut object_469, var_468);
        object_469.finish();
    }
}

pub fn serialize_structure_update_load_balancer_attribute_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLoadBalancerAttributeInput,
) {
    if let Some(var_470) = &input.load_balancer_name {
        object.key("loadBalancerName").string(var_470);
    }
    if let Some(var_471) = &input.attribute_name {
        object.key("attributeName").string(var_471.as_str());
    }
    if let Some(var_472) = &input.attribute_value {
        object.key("attributeValue").string(var_472);
    }
}

pub fn serialize_structure_update_relational_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRelationalDatabaseInput,
) {
    if let Some(var_473) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_473);
    }
    if let Some(var_474) = &input.master_user_password {
        object.key("masterUserPassword").string(var_474);
    }
    if let Some(var_475) = &input.rotate_master_user_password {
        object.key("rotateMasterUserPassword").boolean(*var_475);
    }
    if let Some(var_476) = &input.preferred_backup_window {
        object.key("preferredBackupWindow").string(var_476);
    }
    if let Some(var_477) = &input.preferred_maintenance_window {
        object.key("preferredMaintenanceWindow").string(var_477);
    }
    if let Some(var_478) = &input.enable_backup_retention {
        object.key("enableBackupRetention").boolean(*var_478);
    }
    if let Some(var_479) = &input.disable_backup_retention {
        object.key("disableBackupRetention").boolean(*var_479);
    }
    if let Some(var_480) = &input.publicly_accessible {
        object.key("publiclyAccessible").boolean(*var_480);
    }
    if let Some(var_481) = &input.apply_immediately {
        object.key("applyImmediately").boolean(*var_481);
    }
    if let Some(var_482) = &input.ca_certificate_identifier {
        object.key("caCertificateIdentifier").string(var_482);
    }
}

pub fn serialize_structure_update_relational_database_parameters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRelationalDatabaseParametersInput,
) {
    if let Some(var_483) = &input.relational_database_name {
        object.key("relationalDatabaseName").string(var_483);
    }
    if let Some(var_484) = &input.parameters {
        let mut array_485 = object.key("parameters").start_array();
        for item_486 in var_484 {
            {
                let mut object_487 = array_485.value().start_object();
                crate::json_ser::serialize_structure_relational_database_parameter(
                    &mut object_487,
                    item_486,
                );
                object_487.finish();
            }
        }
        array_485.finish();
    }
}

pub fn serialize_structure_port_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortInfo,
) {
    if input.from_port != 0 {
        object.key("fromPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("toPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    if let Some(var_488) = &input.protocol {
        object.key("protocol").string(var_488.as_str());
    }
    if let Some(var_489) = &input.cidrs {
        let mut array_490 = object.key("cidrs").start_array();
        for item_491 in var_489 {
            {
                array_490.value().string(item_491);
            }
        }
        array_490.finish();
    }
    if let Some(var_492) = &input.ipv6_cidrs {
        let mut array_493 = object.key("ipv6Cidrs").start_array();
        for item_494 in var_492 {
            {
                array_493.value().string(item_494);
            }
        }
        array_493.finish();
    }
    if let Some(var_495) = &input.cidr_list_aliases {
        let mut array_496 = object.key("cidrListAliases").start_array();
        for item_497 in var_495 {
            {
                array_496.value().string(item_497);
            }
        }
        array_496.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_498) = &input.key {
        object.key("key").string(var_498);
    }
    if let Some(var_499) = &input.value {
        object.key("value").string(var_499);
    }
}

pub fn serialize_structure_instance_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceEntry,
) {
    if let Some(var_500) = &input.source_name {
        object.key("sourceName").string(var_500);
    }
    if let Some(var_501) = &input.instance_type {
        object.key("instanceType").string(var_501);
    }
    if let Some(var_502) = &input.port_info_source {
        object.key("portInfoSource").string(var_502.as_str());
    }
    if let Some(var_503) = &input.user_data {
        object.key("userData").string(var_503);
    }
    if let Some(var_504) = &input.availability_zone {
        object.key("availabilityZone").string(var_504);
    }
}

pub fn serialize_structure_container_service_deployment_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerServiceDeploymentRequest,
) {
    if let Some(var_505) = &input.containers {
        let mut object_506 = object.key("containers").start_object();
        for (key_507, value_508) in var_505 {
            {
                let mut object_509 = object_506.key(key_507).start_object();
                crate::json_ser::serialize_structure_container(&mut object_509, value_508);
                object_509.finish();
            }
        }
        object_506.finish();
    }
    if let Some(var_510) = &input.public_endpoint {
        let mut object_511 = object.key("publicEndpoint").start_object();
        crate::json_ser::serialize_structure_endpoint_request(&mut object_511, var_510);
        object_511.finish();
    }
}

pub fn serialize_structure_container(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Container,
) {
    if let Some(var_512) = &input.image {
        object.key("image").string(var_512);
    }
    if let Some(var_513) = &input.command {
        let mut array_514 = object.key("command").start_array();
        for item_515 in var_513 {
            {
                array_514.value().string(item_515);
            }
        }
        array_514.finish();
    }
    if let Some(var_516) = &input.environment {
        let mut object_517 = object.key("environment").start_object();
        for (key_518, value_519) in var_516 {
            {
                object_517.key(key_518).string(value_519);
            }
        }
        object_517.finish();
    }
    if let Some(var_520) = &input.ports {
        let mut object_521 = object.key("ports").start_object();
        for (key_522, value_523) in var_520 {
            {
                object_521.key(key_522).string(value_523.as_str());
            }
        }
        object_521.finish();
    }
}

pub fn serialize_structure_endpoint_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointRequest,
) {
    if let Some(var_524) = &input.container_name {
        object.key("containerName").string(var_524);
    }
    if let Some(var_525) = &input.container_port {
        object.key("containerPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_525).into()),
        );
    }
    if let Some(var_526) = &input.health_check {
        let mut object_527 = object.key("healthCheck").start_object();
        crate::json_ser::serialize_structure_container_service_health_check_config(
            &mut object_527,
            var_526,
        );
        object_527.finish();
    }
}

pub fn serialize_structure_add_on_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AddOnRequest,
) {
    if let Some(var_528) = &input.add_on_type {
        object.key("addOnType").string(var_528.as_str());
    }
    if let Some(var_529) = &input.auto_snapshot_add_on_request {
        let mut object_530 = object.key("autoSnapshotAddOnRequest").start_object();
        crate::json_ser::serialize_structure_auto_snapshot_add_on_request(&mut object_530, var_529);
        object_530.finish();
    }
}

pub fn serialize_structure_input_origin(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputOrigin,
) {
    if let Some(var_531) = &input.name {
        object.key("name").string(var_531);
    }
    if let Some(var_532) = &input.region_name {
        object.key("regionName").string(var_532.as_str());
    }
    if let Some(var_533) = &input.protocol_policy {
        object.key("protocolPolicy").string(var_533.as_str());
    }
}

pub fn serialize_structure_cache_behavior(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CacheBehavior,
) {
    if let Some(var_534) = &input.behavior {
        object.key("behavior").string(var_534.as_str());
    }
}

pub fn serialize_structure_cache_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CacheSettings,
) {
    if let Some(var_535) = &input.default_ttl {
        object.key("defaultTTL").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_535).into()),
        );
    }
    if let Some(var_536) = &input.minimum_ttl {
        object.key("minimumTTL").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_536).into()),
        );
    }
    if let Some(var_537) = &input.maximum_ttl {
        object.key("maximumTTL").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_537).into()),
        );
    }
    if let Some(var_538) = &input.allowed_http_methods {
        object.key("allowedHTTPMethods").string(var_538);
    }
    if let Some(var_539) = &input.cached_http_methods {
        object.key("cachedHTTPMethods").string(var_539);
    }
    if let Some(var_540) = &input.forwarded_cookies {
        let mut object_541 = object.key("forwardedCookies").start_object();
        crate::json_ser::serialize_structure_cookie_object(&mut object_541, var_540);
        object_541.finish();
    }
    if let Some(var_542) = &input.forwarded_headers {
        let mut object_543 = object.key("forwardedHeaders").start_object();
        crate::json_ser::serialize_structure_header_object(&mut object_543, var_542);
        object_543.finish();
    }
    if let Some(var_544) = &input.forwarded_query_strings {
        let mut object_545 = object.key("forwardedQueryStrings").start_object();
        crate::json_ser::serialize_structure_query_string_object(&mut object_545, var_544);
        object_545.finish();
    }
}

pub fn serialize_structure_cache_behavior_per_path(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CacheBehaviorPerPath,
) {
    if let Some(var_546) = &input.path {
        object.key("path").string(var_546);
    }
    if let Some(var_547) = &input.behavior {
        object.key("behavior").string(var_547.as_str());
    }
}

pub fn serialize_structure_domain_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainEntry,
) {
    if let Some(var_548) = &input.id {
        object.key("id").string(var_548);
    }
    if let Some(var_549) = &input.name {
        object.key("name").string(var_549);
    }
    if let Some(var_550) = &input.target {
        object.key("target").string(var_550);
    }
    if let Some(var_551) = &input.is_alias {
        object.key("isAlias").boolean(*var_551);
    }
    if let Some(var_552) = &input.r#type {
        object.key("type").string(var_552);
    }
    if let Some(var_553) = &input.options {
        let mut object_554 = object.key("options").start_object();
        for (key_555, value_556) in var_553 {
            {
                object_554.key(key_555).string(value_556);
            }
        }
        object_554.finish();
    }
}

pub fn serialize_structure_disk_map(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DiskMap,
) {
    if let Some(var_557) = &input.original_disk_path {
        object.key("originalDiskPath").string(var_557);
    }
    if let Some(var_558) = &input.new_disk_name {
        object.key("newDiskName").string(var_558);
    }
}

pub fn serialize_structure_relational_database_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationalDatabaseParameter,
) {
    if let Some(var_559) = &input.allowed_values {
        object.key("allowedValues").string(var_559);
    }
    if let Some(var_560) = &input.apply_method {
        object.key("applyMethod").string(var_560);
    }
    if let Some(var_561) = &input.apply_type {
        object.key("applyType").string(var_561);
    }
    if let Some(var_562) = &input.data_type {
        object.key("dataType").string(var_562);
    }
    if let Some(var_563) = &input.description {
        object.key("description").string(var_563);
    }
    if let Some(var_564) = &input.is_modifiable {
        object.key("isModifiable").boolean(*var_564);
    }
    if let Some(var_565) = &input.parameter_name {
        object.key("parameterName").string(var_565);
    }
    if let Some(var_566) = &input.parameter_value {
        object.key("parameterValue").string(var_566);
    }
}

pub fn serialize_structure_container_service_health_check_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerServiceHealthCheckConfig,
) {
    if let Some(var_567) = &input.healthy_threshold {
        object.key("healthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_567).into()),
        );
    }
    if let Some(var_568) = &input.unhealthy_threshold {
        object.key("unhealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_568).into()),
        );
    }
    if let Some(var_569) = &input.timeout_seconds {
        object.key("timeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_569).into()),
        );
    }
    if let Some(var_570) = &input.interval_seconds {
        object.key("intervalSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_570).into()),
        );
    }
    if let Some(var_571) = &input.path {
        object.key("path").string(var_571);
    }
    if let Some(var_572) = &input.success_codes {
        object.key("successCodes").string(var_572);
    }
}

pub fn serialize_structure_auto_snapshot_add_on_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoSnapshotAddOnRequest,
) {
    if let Some(var_573) = &input.snapshot_time_of_day {
        object.key("snapshotTimeOfDay").string(var_573);
    }
}

pub fn serialize_structure_cookie_object(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CookieObject,
) {
    if let Some(var_574) = &input.option {
        object.key("option").string(var_574.as_str());
    }
    if let Some(var_575) = &input.cookies_allow_list {
        let mut array_576 = object.key("cookiesAllowList").start_array();
        for item_577 in var_575 {
            {
                array_576.value().string(item_577);
            }
        }
        array_576.finish();
    }
}

pub fn serialize_structure_header_object(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HeaderObject,
) {
    if let Some(var_578) = &input.option {
        object.key("option").string(var_578.as_str());
    }
    if let Some(var_579) = &input.headers_allow_list {
        let mut array_580 = object.key("headersAllowList").start_array();
        for item_581 in var_579 {
            {
                array_580.value().string(item_581.as_str());
            }
        }
        array_580.finish();
    }
}

pub fn serialize_structure_query_string_object(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueryStringObject,
) {
    if let Some(var_582) = &input.option {
        object.key("option").boolean(*var_582);
    }
    if let Some(var_583) = &input.query_strings_allow_list {
        let mut array_584 = object.key("queryStringsAllowList").start_array();
        for item_585 in var_583 {
            {
                array_584.value().string(item_585);
            }
        }
        array_584.finish();
    }
}
