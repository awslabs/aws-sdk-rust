// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Lightsail throws this exception when the user cannot be authenticated or uses invalid credentials to access a resource.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>Lightsail throws this exception when an account is still in the setup in progress state.</p>
    AccountSetupInProgressException(crate::error::AccountSetupInProgressException),
    /// <p>Lightsail throws this exception when user input does not conform to the validation rules of an input field.</p> <note>
    /// <p>Domain and distribution APIs are only available in the N. Virginia (<code>us-east-1</code>) Amazon Web Services Region. Please set your Amazon Web Services Region configuration to <code>us-east-1</code> to create, view, or edit these resources.</p>
    /// </note>
    InvalidInputException(crate::error::InvalidInputException),
    /// <p>Lightsail throws this exception when it cannot find a resource.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>Lightsail throws this exception when an operation fails to execute.</p>
    OperationFailureException(crate::error::OperationFailureException),
    /// <p>A general service exception.</p>
    ServiceException(crate::error::ServiceException),
    /// <p>Lightsail throws this exception when the user has not been authenticated.</p>
    UnauthenticatedException(crate::error::UnauthenticatedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AccountSetupInProgressException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::OperationFailureException(inner) => inner.fmt(f),
            Error::ServiceException(inner) => inner.fmt(f),
            Error::UnauthenticatedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AllocateStaticIpError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AllocateStaticIpError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AllocateStaticIpError> for Error {
    fn from(err: crate::error::AllocateStaticIpError) -> Self {
        match err {
            crate::error::AllocateStaticIpError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AllocateStaticIpError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::AllocateStaticIpError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AllocateStaticIpError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::AllocateStaticIpError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::AllocateStaticIpError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::AllocateStaticIpError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::AllocateStaticIpError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AttachCertificateToDistributionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AttachCertificateToDistributionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachCertificateToDistributionError> for Error {
    fn from(err: crate::error::AttachCertificateToDistributionError) -> Self {
        match err {
            crate::error::AttachCertificateToDistributionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AttachCertificateToDistributionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AttachCertificateToDistributionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::AttachCertificateToDistributionError::OperationFailureException(
                inner,
            ) => Error::OperationFailureException(inner),
            crate::error::AttachCertificateToDistributionError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::AttachCertificateToDistributionError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::AttachCertificateToDistributionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AttachDiskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AttachDiskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachDiskError> for Error {
    fn from(err: crate::error::AttachDiskError) -> Self {
        match err {
            crate::error::AttachDiskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AttachDiskError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::AttachDiskError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AttachDiskError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::AttachDiskError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::AttachDiskError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::AttachDiskError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::AttachDiskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AttachInstancesToLoadBalancerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AttachInstancesToLoadBalancerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachInstancesToLoadBalancerError> for Error {
    fn from(err: crate::error::AttachInstancesToLoadBalancerError) -> Self {
        match err {
            crate::error::AttachInstancesToLoadBalancerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AttachInstancesToLoadBalancerError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::AttachInstancesToLoadBalancerError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AttachInstancesToLoadBalancerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::AttachInstancesToLoadBalancerError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::AttachInstancesToLoadBalancerError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::AttachInstancesToLoadBalancerError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::AttachInstancesToLoadBalancerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AttachLoadBalancerTlsCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AttachLoadBalancerTlsCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachLoadBalancerTlsCertificateError> for Error {
    fn from(err: crate::error::AttachLoadBalancerTlsCertificateError) -> Self {
        match err {
            crate::error::AttachLoadBalancerTlsCertificateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AttachLoadBalancerTlsCertificateError::AccountSetupInProgressException(inner) => Error::AccountSetupInProgressException(inner),
            crate::error::AttachLoadBalancerTlsCertificateError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::AttachLoadBalancerTlsCertificateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::AttachLoadBalancerTlsCertificateError::OperationFailureException(inner) => Error::OperationFailureException(inner),
            crate::error::AttachLoadBalancerTlsCertificateError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::AttachLoadBalancerTlsCertificateError::UnauthenticatedException(inner) => Error::UnauthenticatedException(inner),
            crate::error::AttachLoadBalancerTlsCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AttachStaticIpError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AttachStaticIpError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachStaticIpError> for Error {
    fn from(err: crate::error::AttachStaticIpError) -> Self {
        match err {
            crate::error::AttachStaticIpError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AttachStaticIpError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::AttachStaticIpError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AttachStaticIpError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::AttachStaticIpError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::AttachStaticIpError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::AttachStaticIpError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::AttachStaticIpError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CloseInstancePublicPortsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CloseInstancePublicPortsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CloseInstancePublicPortsError> for Error {
    fn from(err: crate::error::CloseInstancePublicPortsError) -> Self {
        match err {
            crate::error::CloseInstancePublicPortsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CloseInstancePublicPortsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CloseInstancePublicPortsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CloseInstancePublicPortsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CloseInstancePublicPortsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CloseInstancePublicPortsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CloseInstancePublicPortsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CloseInstancePublicPortsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopySnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CopySnapshotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopySnapshotError> for Error {
    fn from(err: crate::error::CopySnapshotError) -> Self {
        match err {
            crate::error::CopySnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CopySnapshotError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CopySnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CopySnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CopySnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CopySnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CopySnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CopySnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBucketError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateBucketError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBucketError> for Error {
    fn from(err: crate::error::CreateBucketError) -> Self {
        match err {
            crate::error::CreateBucketError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateBucketError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateBucketError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateBucketError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateBucketError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBucketAccessKeyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBucketAccessKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBucketAccessKeyError> for Error {
    fn from(err: crate::error::CreateBucketAccessKeyError) -> Self {
        match err {
            crate::error::CreateBucketAccessKeyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateBucketAccessKeyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateBucketAccessKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBucketAccessKeyError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateBucketAccessKeyError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateBucketAccessKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCertificateError> for Error {
    fn from(err: crate::error::CreateCertificateError) -> Self {
        match err {
            crate::error::CreateCertificateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateCertificateError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateCertificateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateCertificateError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateCertificateError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCloudFormationStackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCloudFormationStackError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCloudFormationStackError> for Error {
    fn from(err: crate::error::CreateCloudFormationStackError) -> Self {
        match err {
            crate::error::CreateCloudFormationStackError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateCloudFormationStackError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::CreateCloudFormationStackError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateCloudFormationStackError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateCloudFormationStackError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateCloudFormationStackError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateCloudFormationStackError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateCloudFormationStackError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateContactMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateContactMethodError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateContactMethodError> for Error {
    fn from(err: crate::error::CreateContactMethodError) -> Self {
        match err {
            crate::error::CreateContactMethodError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateContactMethodError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateContactMethodError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateContactMethodError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateContactMethodError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateContactMethodError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateContactMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateContainerServiceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateContainerServiceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateContainerServiceError> for Error {
    fn from(err: crate::error::CreateContainerServiceError) -> Self {
        match err {
            crate::error::CreateContainerServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateContainerServiceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateContainerServiceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateContainerServiceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateContainerServiceError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateContainerServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateContainerServiceDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateContainerServiceDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateContainerServiceDeploymentError> for Error {
    fn from(err: crate::error::CreateContainerServiceDeploymentError) -> Self {
        match err {
            crate::error::CreateContainerServiceDeploymentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateContainerServiceDeploymentError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateContainerServiceDeploymentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateContainerServiceDeploymentError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateContainerServiceDeploymentError::UnauthenticatedException(
                inner,
            ) => Error::UnauthenticatedException(inner),
            crate::error::CreateContainerServiceDeploymentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CreateContainerServiceRegistryLoginError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateContainerServiceRegistryLoginError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateContainerServiceRegistryLoginError> for Error {
    fn from(err: crate::error::CreateContainerServiceRegistryLoginError) -> Self {
        match err {
            crate::error::CreateContainerServiceRegistryLoginError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::CreateContainerServiceRegistryLoginError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::error::CreateContainerServiceRegistryLoginError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateContainerServiceRegistryLoginError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateContainerServiceRegistryLoginError::UnauthenticatedException(
                inner,
            ) => Error::UnauthenticatedException(inner),
            crate::error::CreateContainerServiceRegistryLoginError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDiskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDiskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDiskError> for Error {
    fn from(err: crate::error::CreateDiskError) -> Self {
        match err {
            crate::error::CreateDiskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDiskError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CreateDiskError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateDiskError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDiskError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateDiskError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateDiskError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateDiskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDiskFromSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDiskFromSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDiskFromSnapshotError> for Error {
    fn from(err: crate::error::CreateDiskFromSnapshotError) -> Self {
        match err {
            crate::error::CreateDiskFromSnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDiskFromSnapshotError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CreateDiskFromSnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateDiskFromSnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDiskFromSnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateDiskFromSnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateDiskFromSnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateDiskFromSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDiskSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDiskSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDiskSnapshotError> for Error {
    fn from(err: crate::error::CreateDiskSnapshotError) -> Self {
        match err {
            crate::error::CreateDiskSnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDiskSnapshotError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CreateDiskSnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateDiskSnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDiskSnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateDiskSnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateDiskSnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateDiskSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDistributionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDistributionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDistributionError> for Error {
    fn from(err: crate::error::CreateDistributionError) -> Self {
        match err {
            crate::error::CreateDistributionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDistributionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateDistributionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDistributionError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateDistributionError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateDistributionError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateDistributionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDomainError> for Error {
    fn from(err: crate::error::CreateDomainError) -> Self {
        match err {
            crate::error::CreateDomainError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDomainError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CreateDomainError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateDomainError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDomainError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateDomainError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateDomainError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDomainEntryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDomainEntryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDomainEntryError> for Error {
    fn from(err: crate::error::CreateDomainEntryError) -> Self {
        match err {
            crate::error::CreateDomainEntryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDomainEntryError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CreateDomainEntryError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateDomainEntryError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDomainEntryError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateDomainEntryError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateDomainEntryError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateDomainEntryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateInstancesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInstancesError> for Error {
    fn from(err: crate::error::CreateInstancesError) -> Self {
        match err {
            crate::error::CreateInstancesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateInstancesError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CreateInstancesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateInstancesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateInstancesError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateInstancesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateInstancesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateInstancesFromSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateInstancesFromSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInstancesFromSnapshotError> for Error {
    fn from(err: crate::error::CreateInstancesFromSnapshotError) -> Self {
        match err {
            crate::error::CreateInstancesFromSnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateInstancesFromSnapshotError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::CreateInstancesFromSnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateInstancesFromSnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateInstancesFromSnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateInstancesFromSnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateInstancesFromSnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateInstancesFromSnapshotError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateInstanceSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateInstanceSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInstanceSnapshotError> for Error {
    fn from(err: crate::error::CreateInstanceSnapshotError) -> Self {
        match err {
            crate::error::CreateInstanceSnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateInstanceSnapshotError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CreateInstanceSnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateInstanceSnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateInstanceSnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateInstanceSnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateInstanceSnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateInstanceSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateKeyPairError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateKeyPairError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateKeyPairError> for Error {
    fn from(err: crate::error::CreateKeyPairError) -> Self {
        match err {
            crate::error::CreateKeyPairError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateKeyPairError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CreateKeyPairError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateKeyPairError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateKeyPairError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateKeyPairError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateKeyPairError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateKeyPairError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLoadBalancerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateLoadBalancerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLoadBalancerError> for Error {
    fn from(err: crate::error::CreateLoadBalancerError) -> Self {
        match err {
            crate::error::CreateLoadBalancerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateLoadBalancerError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CreateLoadBalancerError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateLoadBalancerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateLoadBalancerError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateLoadBalancerError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateLoadBalancerError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateLoadBalancerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateLoadBalancerTlsCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateLoadBalancerTlsCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLoadBalancerTlsCertificateError> for Error {
    fn from(err: crate::error::CreateLoadBalancerTlsCertificateError) -> Self {
        match err {
            crate::error::CreateLoadBalancerTlsCertificateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateLoadBalancerTlsCertificateError::AccountSetupInProgressException(inner) => Error::AccountSetupInProgressException(inner),
            crate::error::CreateLoadBalancerTlsCertificateError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateLoadBalancerTlsCertificateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::CreateLoadBalancerTlsCertificateError::OperationFailureException(inner) => Error::OperationFailureException(inner),
            crate::error::CreateLoadBalancerTlsCertificateError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::CreateLoadBalancerTlsCertificateError::UnauthenticatedException(inner) => Error::UnauthenticatedException(inner),
            crate::error::CreateLoadBalancerTlsCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRelationalDatabaseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRelationalDatabaseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRelationalDatabaseError> for Error {
    fn from(err: crate::error::CreateRelationalDatabaseError) -> Self {
        match err {
            crate::error::CreateRelationalDatabaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateRelationalDatabaseError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::CreateRelationalDatabaseError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateRelationalDatabaseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateRelationalDatabaseError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::CreateRelationalDatabaseError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateRelationalDatabaseError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::CreateRelationalDatabaseError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CreateRelationalDatabaseFromSnapshotError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateRelationalDatabaseFromSnapshotError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRelationalDatabaseFromSnapshotError> for Error {
    fn from(err: crate::error::CreateRelationalDatabaseFromSnapshotError) -> Self {
        match err {
            crate::error::CreateRelationalDatabaseFromSnapshotError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateRelationalDatabaseFromSnapshotError::AccountSetupInProgressException(inner) => Error::AccountSetupInProgressException(inner),
            crate::error::CreateRelationalDatabaseFromSnapshotError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateRelationalDatabaseFromSnapshotError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::CreateRelationalDatabaseFromSnapshotError::OperationFailureException(inner) => Error::OperationFailureException(inner),
            crate::error::CreateRelationalDatabaseFromSnapshotError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::CreateRelationalDatabaseFromSnapshotError::UnauthenticatedException(inner) => Error::UnauthenticatedException(inner),
            crate::error::CreateRelationalDatabaseFromSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateRelationalDatabaseSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateRelationalDatabaseSnapshotError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRelationalDatabaseSnapshotError> for Error {
    fn from(err: crate::error::CreateRelationalDatabaseSnapshotError) -> Self {
        match err {
            crate::error::CreateRelationalDatabaseSnapshotError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateRelationalDatabaseSnapshotError::AccountSetupInProgressException(inner) => Error::AccountSetupInProgressException(inner),
            crate::error::CreateRelationalDatabaseSnapshotError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateRelationalDatabaseSnapshotError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::CreateRelationalDatabaseSnapshotError::OperationFailureException(inner) => Error::OperationFailureException(inner),
            crate::error::CreateRelationalDatabaseSnapshotError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::CreateRelationalDatabaseSnapshotError::UnauthenticatedException(inner) => Error::UnauthenticatedException(inner),
            crate::error::CreateRelationalDatabaseSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAlarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAlarmError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAlarmError> for Error {
    fn from(err: crate::error::DeleteAlarmError) -> Self {
        match err {
            crate::error::DeleteAlarmError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAlarmError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteAlarmError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteAlarmError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteAlarmError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteAlarmError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteAlarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAutoSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAutoSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAutoSnapshotError> for Error {
    fn from(err: crate::error::DeleteAutoSnapshotError) -> Self {
        match err {
            crate::error::DeleteAutoSnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAutoSnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteAutoSnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteAutoSnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteAutoSnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteAutoSnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteAutoSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBucketError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBucketError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBucketError> for Error {
    fn from(err: crate::error::DeleteBucketError) -> Self {
        match err {
            crate::error::DeleteBucketError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteBucketError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteBucketError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBucketError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteBucketError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteBucketError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBucketAccessKeyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBucketAccessKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBucketAccessKeyError> for Error {
    fn from(err: crate::error::DeleteBucketAccessKeyError) -> Self {
        match err {
            crate::error::DeleteBucketAccessKeyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteBucketAccessKeyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteBucketAccessKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBucketAccessKeyError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteBucketAccessKeyError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteBucketAccessKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCertificateError> for Error {
    fn from(err: crate::error::DeleteCertificateError) -> Self {
        match err {
            crate::error::DeleteCertificateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteCertificateError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteCertificateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteCertificateError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteCertificateError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteContactMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteContactMethodError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteContactMethodError> for Error {
    fn from(err: crate::error::DeleteContactMethodError) -> Self {
        match err {
            crate::error::DeleteContactMethodError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteContactMethodError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteContactMethodError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteContactMethodError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteContactMethodError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteContactMethodError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteContactMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteContainerImageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteContainerImageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteContainerImageError> for Error {
    fn from(err: crate::error::DeleteContainerImageError) -> Self {
        match err {
            crate::error::DeleteContainerImageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteContainerImageError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteContainerImageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteContainerImageError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteContainerImageError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteContainerImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteContainerServiceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteContainerServiceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteContainerServiceError> for Error {
    fn from(err: crate::error::DeleteContainerServiceError) -> Self {
        match err {
            crate::error::DeleteContainerServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteContainerServiceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteContainerServiceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteContainerServiceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteContainerServiceError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteContainerServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDiskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDiskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDiskError> for Error {
    fn from(err: crate::error::DeleteDiskError) -> Self {
        match err {
            crate::error::DeleteDiskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDiskError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DeleteDiskError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteDiskError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDiskError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteDiskError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteDiskError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteDiskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDiskSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDiskSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDiskSnapshotError> for Error {
    fn from(err: crate::error::DeleteDiskSnapshotError) -> Self {
        match err {
            crate::error::DeleteDiskSnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDiskSnapshotError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DeleteDiskSnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteDiskSnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDiskSnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteDiskSnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteDiskSnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteDiskSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDistributionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDistributionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDistributionError> for Error {
    fn from(err: crate::error::DeleteDistributionError) -> Self {
        match err {
            crate::error::DeleteDistributionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDistributionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteDistributionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDistributionError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteDistributionError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteDistributionError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteDistributionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDomainError> for Error {
    fn from(err: crate::error::DeleteDomainError) -> Self {
        match err {
            crate::error::DeleteDomainError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDomainError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DeleteDomainError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteDomainError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDomainError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteDomainError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteDomainError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDomainEntryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDomainEntryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDomainEntryError> for Error {
    fn from(err: crate::error::DeleteDomainEntryError) -> Self {
        match err {
            crate::error::DeleteDomainEntryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDomainEntryError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DeleteDomainEntryError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteDomainEntryError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDomainEntryError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteDomainEntryError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteDomainEntryError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteDomainEntryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteInstanceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInstanceError> for Error {
    fn from(err: crate::error::DeleteInstanceError) -> Self {
        match err {
            crate::error::DeleteInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteInstanceError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DeleteInstanceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteInstanceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteInstanceError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteInstanceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteInstanceError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInstanceSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteInstanceSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInstanceSnapshotError> for Error {
    fn from(err: crate::error::DeleteInstanceSnapshotError) -> Self {
        match err {
            crate::error::DeleteInstanceSnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteInstanceSnapshotError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DeleteInstanceSnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteInstanceSnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteInstanceSnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteInstanceSnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteInstanceSnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteInstanceSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteKeyPairError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteKeyPairError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteKeyPairError> for Error {
    fn from(err: crate::error::DeleteKeyPairError) -> Self {
        match err {
            crate::error::DeleteKeyPairError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteKeyPairError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DeleteKeyPairError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteKeyPairError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteKeyPairError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteKeyPairError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteKeyPairError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteKeyPairError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteKnownHostKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteKnownHostKeysError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteKnownHostKeysError> for Error {
    fn from(err: crate::error::DeleteKnownHostKeysError) -> Self {
        match err {
            crate::error::DeleteKnownHostKeysError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteKnownHostKeysError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DeleteKnownHostKeysError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteKnownHostKeysError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteKnownHostKeysError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteKnownHostKeysError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteKnownHostKeysError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteKnownHostKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLoadBalancerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteLoadBalancerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLoadBalancerError> for Error {
    fn from(err: crate::error::DeleteLoadBalancerError) -> Self {
        match err {
            crate::error::DeleteLoadBalancerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteLoadBalancerError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DeleteLoadBalancerError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteLoadBalancerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteLoadBalancerError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteLoadBalancerError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteLoadBalancerError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteLoadBalancerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteLoadBalancerTlsCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteLoadBalancerTlsCertificateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLoadBalancerTlsCertificateError> for Error {
    fn from(err: crate::error::DeleteLoadBalancerTlsCertificateError) -> Self {
        match err {
            crate::error::DeleteLoadBalancerTlsCertificateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteLoadBalancerTlsCertificateError::AccountSetupInProgressException(inner) => Error::AccountSetupInProgressException(inner),
            crate::error::DeleteLoadBalancerTlsCertificateError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteLoadBalancerTlsCertificateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteLoadBalancerTlsCertificateError::OperationFailureException(inner) => Error::OperationFailureException(inner),
            crate::error::DeleteLoadBalancerTlsCertificateError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::DeleteLoadBalancerTlsCertificateError::UnauthenticatedException(inner) => Error::UnauthenticatedException(inner),
            crate::error::DeleteLoadBalancerTlsCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRelationalDatabaseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRelationalDatabaseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRelationalDatabaseError> for Error {
    fn from(err: crate::error::DeleteRelationalDatabaseError) -> Self {
        match err {
            crate::error::DeleteRelationalDatabaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteRelationalDatabaseError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DeleteRelationalDatabaseError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteRelationalDatabaseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteRelationalDatabaseError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DeleteRelationalDatabaseError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteRelationalDatabaseError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DeleteRelationalDatabaseError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteRelationalDatabaseSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteRelationalDatabaseSnapshotError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRelationalDatabaseSnapshotError> for Error {
    fn from(err: crate::error::DeleteRelationalDatabaseSnapshotError) -> Self {
        match err {
            crate::error::DeleteRelationalDatabaseSnapshotError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteRelationalDatabaseSnapshotError::AccountSetupInProgressException(inner) => Error::AccountSetupInProgressException(inner),
            crate::error::DeleteRelationalDatabaseSnapshotError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteRelationalDatabaseSnapshotError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::DeleteRelationalDatabaseSnapshotError::OperationFailureException(inner) => Error::OperationFailureException(inner),
            crate::error::DeleteRelationalDatabaseSnapshotError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::DeleteRelationalDatabaseSnapshotError::UnauthenticatedException(inner) => Error::UnauthenticatedException(inner),
            crate::error::DeleteRelationalDatabaseSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DetachCertificateFromDistributionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DetachCertificateFromDistributionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachCertificateFromDistributionError> for Error {
    fn from(err: crate::error::DetachCertificateFromDistributionError) -> Self {
        match err {
            crate::error::DetachCertificateFromDistributionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DetachCertificateFromDistributionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DetachCertificateFromDistributionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DetachCertificateFromDistributionError::OperationFailureException(
                inner,
            ) => Error::OperationFailureException(inner),
            crate::error::DetachCertificateFromDistributionError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DetachCertificateFromDistributionError::UnauthenticatedException(
                inner,
            ) => Error::UnauthenticatedException(inner),
            crate::error::DetachCertificateFromDistributionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetachDiskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DetachDiskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachDiskError> for Error {
    fn from(err: crate::error::DetachDiskError) -> Self {
        match err {
            crate::error::DetachDiskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DetachDiskError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DetachDiskError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DetachDiskError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DetachDiskError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DetachDiskError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DetachDiskError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DetachDiskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DetachInstancesFromLoadBalancerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DetachInstancesFromLoadBalancerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachInstancesFromLoadBalancerError> for Error {
    fn from(err: crate::error::DetachInstancesFromLoadBalancerError) -> Self {
        match err {
            crate::error::DetachInstancesFromLoadBalancerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DetachInstancesFromLoadBalancerError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::DetachInstancesFromLoadBalancerError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DetachInstancesFromLoadBalancerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DetachInstancesFromLoadBalancerError::OperationFailureException(
                inner,
            ) => Error::OperationFailureException(inner),
            crate::error::DetachInstancesFromLoadBalancerError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DetachInstancesFromLoadBalancerError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DetachInstancesFromLoadBalancerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetachStaticIpError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DetachStaticIpError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachStaticIpError> for Error {
    fn from(err: crate::error::DetachStaticIpError) -> Self {
        match err {
            crate::error::DetachStaticIpError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DetachStaticIpError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DetachStaticIpError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DetachStaticIpError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DetachStaticIpError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DetachStaticIpError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DetachStaticIpError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DetachStaticIpError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisableAddOnError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisableAddOnError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisableAddOnError> for Error {
    fn from(err: crate::error::DisableAddOnError) -> Self {
        match err {
            crate::error::DisableAddOnError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisableAddOnError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DisableAddOnError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DisableAddOnError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DisableAddOnError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DisableAddOnError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DisableAddOnError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DownloadDefaultKeyPairError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DownloadDefaultKeyPairError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DownloadDefaultKeyPairError> for Error {
    fn from(err: crate::error::DownloadDefaultKeyPairError) -> Self {
        match err {
            crate::error::DownloadDefaultKeyPairError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DownloadDefaultKeyPairError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::DownloadDefaultKeyPairError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DownloadDefaultKeyPairError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DownloadDefaultKeyPairError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::DownloadDefaultKeyPairError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DownloadDefaultKeyPairError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::DownloadDefaultKeyPairError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EnableAddOnError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::EnableAddOnError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EnableAddOnError> for Error {
    fn from(err: crate::error::EnableAddOnError) -> Self {
        match err {
            crate::error::EnableAddOnError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::EnableAddOnError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::EnableAddOnError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::EnableAddOnError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::EnableAddOnError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::EnableAddOnError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::EnableAddOnError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExportSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ExportSnapshotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExportSnapshotError> for Error {
    fn from(err: crate::error::ExportSnapshotError) -> Self {
        match err {
            crate::error::ExportSnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ExportSnapshotError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::ExportSnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ExportSnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ExportSnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::ExportSnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ExportSnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::ExportSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetActiveNamesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetActiveNamesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetActiveNamesError> for Error {
    fn from(err: crate::error::GetActiveNamesError) -> Self {
        match err {
            crate::error::GetActiveNamesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetActiveNamesError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetActiveNamesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetActiveNamesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetActiveNamesError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetActiveNamesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetActiveNamesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetActiveNamesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAlarmsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAlarmsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAlarmsError> for Error {
    fn from(err: crate::error::GetAlarmsError) -> Self {
        match err {
            crate::error::GetAlarmsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAlarmsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetAlarmsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetAlarmsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetAlarmsError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::GetAlarmsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetAlarmsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAutoSnapshotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAutoSnapshotsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAutoSnapshotsError> for Error {
    fn from(err: crate::error::GetAutoSnapshotsError) -> Self {
        match err {
            crate::error::GetAutoSnapshotsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAutoSnapshotsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetAutoSnapshotsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetAutoSnapshotsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetAutoSnapshotsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetAutoSnapshotsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetAutoSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBlueprintsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBlueprintsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBlueprintsError> for Error {
    fn from(err: crate::error::GetBlueprintsError) -> Self {
        match err {
            crate::error::GetBlueprintsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetBlueprintsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetBlueprintsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetBlueprintsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBlueprintsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetBlueprintsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetBlueprintsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetBlueprintsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBucketAccessKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBucketAccessKeysError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBucketAccessKeysError> for Error {
    fn from(err: crate::error::GetBucketAccessKeysError) -> Self {
        match err {
            crate::error::GetBucketAccessKeysError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetBucketAccessKeysError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetBucketAccessKeysError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBucketAccessKeysError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetBucketAccessKeysError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetBucketAccessKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBucketBundlesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBucketBundlesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBucketBundlesError> for Error {
    fn from(err: crate::error::GetBucketBundlesError) -> Self {
        match err {
            crate::error::GetBucketBundlesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetBucketBundlesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetBucketBundlesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetBucketBundlesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetBucketBundlesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBucketMetricDataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBucketMetricDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBucketMetricDataError> for Error {
    fn from(err: crate::error::GetBucketMetricDataError) -> Self {
        match err {
            crate::error::GetBucketMetricDataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetBucketMetricDataError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetBucketMetricDataError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBucketMetricDataError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetBucketMetricDataError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetBucketMetricDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBucketsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBucketsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBucketsError> for Error {
    fn from(err: crate::error::GetBucketsError) -> Self {
        match err {
            crate::error::GetBucketsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetBucketsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetBucketsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBucketsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetBucketsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetBucketsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBundlesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBundlesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBundlesError> for Error {
    fn from(err: crate::error::GetBundlesError) -> Self {
        match err {
            crate::error::GetBundlesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetBundlesError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetBundlesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetBundlesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBundlesError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetBundlesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetBundlesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetBundlesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCertificatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCertificatesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCertificatesError> for Error {
    fn from(err: crate::error::GetCertificatesError) -> Self {
        match err {
            crate::error::GetCertificatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCertificatesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetCertificatesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetCertificatesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetCertificatesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCloudFormationStackRecordsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCloudFormationStackRecordsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCloudFormationStackRecordsError> for Error {
    fn from(err: crate::error::GetCloudFormationStackRecordsError) -> Self {
        match err {
            crate::error::GetCloudFormationStackRecordsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCloudFormationStackRecordsError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetCloudFormationStackRecordsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetCloudFormationStackRecordsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetCloudFormationStackRecordsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetCloudFormationStackRecordsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetCloudFormationStackRecordsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetCloudFormationStackRecordsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContactMethodsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContactMethodsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContactMethodsError> for Error {
    fn from(err: crate::error::GetContactMethodsError) -> Self {
        match err {
            crate::error::GetContactMethodsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContactMethodsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetContactMethodsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetContactMethodsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetContactMethodsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetContactMethodsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetContactMethodsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContainerAPIMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContainerAPIMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContainerAPIMetadataError> for Error {
    fn from(err: crate::error::GetContainerAPIMetadataError) -> Self {
        match err {
            crate::error::GetContainerAPIMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContainerAPIMetadataError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetContainerAPIMetadataError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetContainerAPIMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContainerImagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContainerImagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContainerImagesError> for Error {
    fn from(err: crate::error::GetContainerImagesError) -> Self {
        match err {
            crate::error::GetContainerImagesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContainerImagesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetContainerImagesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetContainerImagesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetContainerImagesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetContainerImagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContainerLogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetContainerLogError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContainerLogError> for Error {
    fn from(err: crate::error::GetContainerLogError) -> Self {
        match err {
            crate::error::GetContainerLogError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContainerLogError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetContainerLogError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetContainerLogError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetContainerLogError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetContainerLogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetContainerServiceDeploymentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetContainerServiceDeploymentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContainerServiceDeploymentsError> for Error {
    fn from(err: crate::error::GetContainerServiceDeploymentsError) -> Self {
        match err {
            crate::error::GetContainerServiceDeploymentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContainerServiceDeploymentsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetContainerServiceDeploymentsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetContainerServiceDeploymentsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetContainerServiceDeploymentsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetContainerServiceDeploymentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContainerServiceMetricDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContainerServiceMetricDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContainerServiceMetricDataError> for Error {
    fn from(err: crate::error::GetContainerServiceMetricDataError) -> Self {
        match err {
            crate::error::GetContainerServiceMetricDataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContainerServiceMetricDataError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetContainerServiceMetricDataError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetContainerServiceMetricDataError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetContainerServiceMetricDataError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetContainerServiceMetricDataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContainerServicePowersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContainerServicePowersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContainerServicePowersError> for Error {
    fn from(err: crate::error::GetContainerServicePowersError) -> Self {
        match err {
            crate::error::GetContainerServicePowersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContainerServicePowersError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetContainerServicePowersError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetContainerServicePowersError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetContainerServicePowersError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetContainerServicePowersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContainerServicesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContainerServicesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContainerServicesError> for Error {
    fn from(err: crate::error::GetContainerServicesError) -> Self {
        match err {
            crate::error::GetContainerServicesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContainerServicesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetContainerServicesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetContainerServicesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetContainerServicesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetContainerServicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDiskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDiskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDiskError> for Error {
    fn from(err: crate::error::GetDiskError) -> Self {
        match err {
            crate::error::GetDiskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDiskError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetDiskError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDiskError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetDiskError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetDiskError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::GetDiskError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetDiskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDisksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDisksError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDisksError> for Error {
    fn from(err: crate::error::GetDisksError) -> Self {
        match err {
            crate::error::GetDisksError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDisksError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetDisksError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDisksError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDisksError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetDisksError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::GetDisksError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetDisksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDiskSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDiskSnapshotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDiskSnapshotError> for Error {
    fn from(err: crate::error::GetDiskSnapshotError) -> Self {
        match err {
            crate::error::GetDiskSnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDiskSnapshotError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetDiskSnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDiskSnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDiskSnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetDiskSnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetDiskSnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetDiskSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDiskSnapshotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDiskSnapshotsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDiskSnapshotsError> for Error {
    fn from(err: crate::error::GetDiskSnapshotsError) -> Self {
        match err {
            crate::error::GetDiskSnapshotsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDiskSnapshotsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetDiskSnapshotsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDiskSnapshotsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDiskSnapshotsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetDiskSnapshotsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetDiskSnapshotsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetDiskSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDistributionBundlesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDistributionBundlesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDistributionBundlesError> for Error {
    fn from(err: crate::error::GetDistributionBundlesError) -> Self {
        match err {
            crate::error::GetDistributionBundlesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDistributionBundlesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDistributionBundlesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDistributionBundlesError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetDistributionBundlesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetDistributionBundlesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetDistributionBundlesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetDistributionLatestCacheResetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetDistributionLatestCacheResetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDistributionLatestCacheResetError> for Error {
    fn from(err: crate::error::GetDistributionLatestCacheResetError) -> Self {
        match err {
            crate::error::GetDistributionLatestCacheResetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDistributionLatestCacheResetError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDistributionLatestCacheResetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDistributionLatestCacheResetError::OperationFailureException(
                inner,
            ) => Error::OperationFailureException(inner),
            crate::error::GetDistributionLatestCacheResetError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetDistributionLatestCacheResetError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetDistributionLatestCacheResetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDistributionMetricDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDistributionMetricDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDistributionMetricDataError> for Error {
    fn from(err: crate::error::GetDistributionMetricDataError) -> Self {
        match err {
            crate::error::GetDistributionMetricDataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDistributionMetricDataError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDistributionMetricDataError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDistributionMetricDataError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetDistributionMetricDataError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetDistributionMetricDataError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetDistributionMetricDataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDistributionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDistributionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDistributionsError> for Error {
    fn from(err: crate::error::GetDistributionsError) -> Self {
        match err {
            crate::error::GetDistributionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDistributionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDistributionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDistributionsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetDistributionsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetDistributionsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetDistributionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDomainError> for Error {
    fn from(err: crate::error::GetDomainError) -> Self {
        match err {
            crate::error::GetDomainError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDomainError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetDomainError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDomainError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDomainError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetDomainError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::GetDomainError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDomainsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDomainsError> for Error {
    fn from(err: crate::error::GetDomainsError) -> Self {
        match err {
            crate::error::GetDomainsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDomainsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetDomainsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDomainsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDomainsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetDomainsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetDomainsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetExportSnapshotRecordsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetExportSnapshotRecordsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetExportSnapshotRecordsError> for Error {
    fn from(err: crate::error::GetExportSnapshotRecordsError) -> Self {
        match err {
            crate::error::GetExportSnapshotRecordsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetExportSnapshotRecordsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetExportSnapshotRecordsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetExportSnapshotRecordsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetExportSnapshotRecordsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetExportSnapshotRecordsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetExportSnapshotRecordsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetExportSnapshotRecordsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetInstanceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstanceError> for Error {
    fn from(err: crate::error::GetInstanceError) -> Self {
        match err {
            crate::error::GetInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInstanceError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetInstanceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetInstanceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInstanceError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetInstanceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetInstanceError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstanceAccessDetailsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInstanceAccessDetailsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstanceAccessDetailsError> for Error {
    fn from(err: crate::error::GetInstanceAccessDetailsError) -> Self {
        match err {
            crate::error::GetInstanceAccessDetailsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInstanceAccessDetailsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetInstanceAccessDetailsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetInstanceAccessDetailsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInstanceAccessDetailsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetInstanceAccessDetailsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetInstanceAccessDetailsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetInstanceAccessDetailsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstanceMetricDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInstanceMetricDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstanceMetricDataError> for Error {
    fn from(err: crate::error::GetInstanceMetricDataError) -> Self {
        match err {
            crate::error::GetInstanceMetricDataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInstanceMetricDataError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetInstanceMetricDataError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetInstanceMetricDataError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInstanceMetricDataError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetInstanceMetricDataError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetInstanceMetricDataError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetInstanceMetricDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstancePortStatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInstancePortStatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstancePortStatesError> for Error {
    fn from(err: crate::error::GetInstancePortStatesError) -> Self {
        match err {
            crate::error::GetInstancePortStatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInstancePortStatesError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetInstancePortStatesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetInstancePortStatesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInstancePortStatesError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetInstancePortStatesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetInstancePortStatesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetInstancePortStatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetInstancesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstancesError> for Error {
    fn from(err: crate::error::GetInstancesError) -> Self {
        match err {
            crate::error::GetInstancesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInstancesError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetInstancesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetInstancesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInstancesError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetInstancesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetInstancesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstanceSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInstanceSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstanceSnapshotError> for Error {
    fn from(err: crate::error::GetInstanceSnapshotError) -> Self {
        match err {
            crate::error::GetInstanceSnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInstanceSnapshotError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetInstanceSnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetInstanceSnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInstanceSnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetInstanceSnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetInstanceSnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetInstanceSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstanceSnapshotsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInstanceSnapshotsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstanceSnapshotsError> for Error {
    fn from(err: crate::error::GetInstanceSnapshotsError) -> Self {
        match err {
            crate::error::GetInstanceSnapshotsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInstanceSnapshotsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetInstanceSnapshotsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetInstanceSnapshotsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInstanceSnapshotsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetInstanceSnapshotsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetInstanceSnapshotsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetInstanceSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInstanceStateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInstanceStateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInstanceStateError> for Error {
    fn from(err: crate::error::GetInstanceStateError) -> Self {
        match err {
            crate::error::GetInstanceStateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInstanceStateError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetInstanceStateError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetInstanceStateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInstanceStateError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetInstanceStateError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetInstanceStateError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetInstanceStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetKeyPairError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetKeyPairError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetKeyPairError> for Error {
    fn from(err: crate::error::GetKeyPairError) -> Self {
        match err {
            crate::error::GetKeyPairError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetKeyPairError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetKeyPairError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetKeyPairError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetKeyPairError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetKeyPairError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetKeyPairError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetKeyPairError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetKeyPairsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetKeyPairsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetKeyPairsError> for Error {
    fn from(err: crate::error::GetKeyPairsError) -> Self {
        match err {
            crate::error::GetKeyPairsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetKeyPairsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetKeyPairsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetKeyPairsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetKeyPairsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetKeyPairsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetKeyPairsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetKeyPairsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLoadBalancerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetLoadBalancerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLoadBalancerError> for Error {
    fn from(err: crate::error::GetLoadBalancerError) -> Self {
        match err {
            crate::error::GetLoadBalancerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLoadBalancerError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetLoadBalancerError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetLoadBalancerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetLoadBalancerError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetLoadBalancerError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetLoadBalancerError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetLoadBalancerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLoadBalancerMetricDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLoadBalancerMetricDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLoadBalancerMetricDataError> for Error {
    fn from(err: crate::error::GetLoadBalancerMetricDataError) -> Self {
        match err {
            crate::error::GetLoadBalancerMetricDataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLoadBalancerMetricDataError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetLoadBalancerMetricDataError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetLoadBalancerMetricDataError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetLoadBalancerMetricDataError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetLoadBalancerMetricDataError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetLoadBalancerMetricDataError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetLoadBalancerMetricDataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLoadBalancersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLoadBalancersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLoadBalancersError> for Error {
    fn from(err: crate::error::GetLoadBalancersError) -> Self {
        match err {
            crate::error::GetLoadBalancersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLoadBalancersError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetLoadBalancersError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetLoadBalancersError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetLoadBalancersError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetLoadBalancersError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetLoadBalancersError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetLoadBalancersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetLoadBalancerTlsCertificatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetLoadBalancerTlsCertificatesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLoadBalancerTlsCertificatesError> for Error {
    fn from(err: crate::error::GetLoadBalancerTlsCertificatesError) -> Self {
        match err {
            crate::error::GetLoadBalancerTlsCertificatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLoadBalancerTlsCertificatesError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetLoadBalancerTlsCertificatesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetLoadBalancerTlsCertificatesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetLoadBalancerTlsCertificatesError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetLoadBalancerTlsCertificatesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetLoadBalancerTlsCertificatesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetLoadBalancerTlsCertificatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLoadBalancerTlsPoliciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLoadBalancerTlsPoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLoadBalancerTlsPoliciesError> for Error {
    fn from(err: crate::error::GetLoadBalancerTlsPoliciesError) -> Self {
        match err {
            crate::error::GetLoadBalancerTlsPoliciesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLoadBalancerTlsPoliciesError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetLoadBalancerTlsPoliciesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetLoadBalancerTlsPoliciesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetLoadBalancerTlsPoliciesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetLoadBalancerTlsPoliciesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOperationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetOperationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOperationError> for Error {
    fn from(err: crate::error::GetOperationError) -> Self {
        match err {
            crate::error::GetOperationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetOperationError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetOperationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetOperationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetOperationError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetOperationError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetOperationError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetOperationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOperationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetOperationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOperationsError> for Error {
    fn from(err: crate::error::GetOperationsError) -> Self {
        match err {
            crate::error::GetOperationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetOperationsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetOperationsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetOperationsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetOperationsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetOperationsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetOperationsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetOperationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOperationsForResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetOperationsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOperationsForResourceError> for Error {
    fn from(err: crate::error::GetOperationsForResourceError) -> Self {
        match err {
            crate::error::GetOperationsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetOperationsForResourceError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetOperationsForResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetOperationsForResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetOperationsForResourceError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetOperationsForResourceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetOperationsForResourceError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetOperationsForResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRegionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRegionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRegionsError> for Error {
    fn from(err: crate::error::GetRegionsError) -> Self {
        match err {
            crate::error::GetRegionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRegionsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetRegionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRegionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRegionsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetRegionsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRegionsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRegionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabaseError> for Error {
    fn from(err: crate::error::GetRelationalDatabaseError) -> Self {
        match err {
            crate::error::GetRelationalDatabaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRelationalDatabaseError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetRelationalDatabaseError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRelationalDatabaseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRelationalDatabaseError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetRelationalDatabaseError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRelationalDatabaseError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRelationalDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseBlueprintsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetRelationalDatabaseBlueprintsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabaseBlueprintsError> for Error {
    fn from(err: crate::error::GetRelationalDatabaseBlueprintsError) -> Self {
        match err {
            crate::error::GetRelationalDatabaseBlueprintsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRelationalDatabaseBlueprintsError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetRelationalDatabaseBlueprintsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRelationalDatabaseBlueprintsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRelationalDatabaseBlueprintsError::OperationFailureException(
                inner,
            ) => Error::OperationFailureException(inner),
            crate::error::GetRelationalDatabaseBlueprintsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRelationalDatabaseBlueprintsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRelationalDatabaseBlueprintsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseBundlesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseBundlesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabaseBundlesError> for Error {
    fn from(err: crate::error::GetRelationalDatabaseBundlesError) -> Self {
        match err {
            crate::error::GetRelationalDatabaseBundlesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRelationalDatabaseBundlesError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetRelationalDatabaseBundlesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRelationalDatabaseBundlesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRelationalDatabaseBundlesError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetRelationalDatabaseBundlesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRelationalDatabaseBundlesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRelationalDatabaseBundlesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseEventsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseEventsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabaseEventsError> for Error {
    fn from(err: crate::error::GetRelationalDatabaseEventsError) -> Self {
        match err {
            crate::error::GetRelationalDatabaseEventsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRelationalDatabaseEventsError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetRelationalDatabaseEventsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRelationalDatabaseEventsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRelationalDatabaseEventsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetRelationalDatabaseEventsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRelationalDatabaseEventsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRelationalDatabaseEventsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseLogEventsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetRelationalDatabaseLogEventsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabaseLogEventsError> for Error {
    fn from(err: crate::error::GetRelationalDatabaseLogEventsError) -> Self {
        match err {
            crate::error::GetRelationalDatabaseLogEventsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRelationalDatabaseLogEventsError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetRelationalDatabaseLogEventsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRelationalDatabaseLogEventsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRelationalDatabaseLogEventsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetRelationalDatabaseLogEventsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRelationalDatabaseLogEventsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRelationalDatabaseLogEventsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseLogStreamsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetRelationalDatabaseLogStreamsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabaseLogStreamsError> for Error {
    fn from(err: crate::error::GetRelationalDatabaseLogStreamsError) -> Self {
        match err {
            crate::error::GetRelationalDatabaseLogStreamsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRelationalDatabaseLogStreamsError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetRelationalDatabaseLogStreamsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRelationalDatabaseLogStreamsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRelationalDatabaseLogStreamsError::OperationFailureException(
                inner,
            ) => Error::OperationFailureException(inner),
            crate::error::GetRelationalDatabaseLogStreamsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRelationalDatabaseLogStreamsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRelationalDatabaseLogStreamsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetRelationalDatabaseMasterUserPasswordError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetRelationalDatabaseMasterUserPasswordError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabaseMasterUserPasswordError> for Error {
    fn from(err: crate::error::GetRelationalDatabaseMasterUserPasswordError) -> Self {
        match err {
            crate::error::GetRelationalDatabaseMasterUserPasswordError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetRelationalDatabaseMasterUserPasswordError::AccountSetupInProgressException(inner) => Error::AccountSetupInProgressException(inner),
            crate::error::GetRelationalDatabaseMasterUserPasswordError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::GetRelationalDatabaseMasterUserPasswordError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetRelationalDatabaseMasterUserPasswordError::OperationFailureException(inner) => Error::OperationFailureException(inner),
            crate::error::GetRelationalDatabaseMasterUserPasswordError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::GetRelationalDatabaseMasterUserPasswordError::UnauthenticatedException(inner) => Error::UnauthenticatedException(inner),
            crate::error::GetRelationalDatabaseMasterUserPasswordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseMetricDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetRelationalDatabaseMetricDataError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabaseMetricDataError> for Error {
    fn from(err: crate::error::GetRelationalDatabaseMetricDataError) -> Self {
        match err {
            crate::error::GetRelationalDatabaseMetricDataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRelationalDatabaseMetricDataError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetRelationalDatabaseMetricDataError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRelationalDatabaseMetricDataError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRelationalDatabaseMetricDataError::OperationFailureException(
                inner,
            ) => Error::OperationFailureException(inner),
            crate::error::GetRelationalDatabaseMetricDataError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRelationalDatabaseMetricDataError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRelationalDatabaseMetricDataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetRelationalDatabaseParametersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabaseParametersError> for Error {
    fn from(err: crate::error::GetRelationalDatabaseParametersError) -> Self {
        match err {
            crate::error::GetRelationalDatabaseParametersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRelationalDatabaseParametersError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetRelationalDatabaseParametersError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRelationalDatabaseParametersError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRelationalDatabaseParametersError::OperationFailureException(
                inner,
            ) => Error::OperationFailureException(inner),
            crate::error::GetRelationalDatabaseParametersError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRelationalDatabaseParametersError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRelationalDatabaseParametersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabasesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabasesError> for Error {
    fn from(err: crate::error::GetRelationalDatabasesError) -> Self {
        match err {
            crate::error::GetRelationalDatabasesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRelationalDatabasesError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetRelationalDatabasesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRelationalDatabasesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRelationalDatabasesError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetRelationalDatabasesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRelationalDatabasesError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRelationalDatabasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabaseSnapshotError> for Error {
    fn from(err: crate::error::GetRelationalDatabaseSnapshotError) -> Self {
        match err {
            crate::error::GetRelationalDatabaseSnapshotError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetRelationalDatabaseSnapshotError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetRelationalDatabaseSnapshotsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetRelationalDatabaseSnapshotsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRelationalDatabaseSnapshotsError> for Error {
    fn from(err: crate::error::GetRelationalDatabaseSnapshotsError) -> Self {
        match err {
            crate::error::GetRelationalDatabaseSnapshotsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotsError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::GetRelationalDatabaseSnapshotsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetRelationalDatabaseSnapshotsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetStaticIpError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetStaticIpError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetStaticIpError> for Error {
    fn from(err: crate::error::GetStaticIpError) -> Self {
        match err {
            crate::error::GetStaticIpError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetStaticIpError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetStaticIpError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetStaticIpError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetStaticIpError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetStaticIpError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetStaticIpError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetStaticIpError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetStaticIpsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetStaticIpsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetStaticIpsError> for Error {
    fn from(err: crate::error::GetStaticIpsError) -> Self {
        match err {
            crate::error::GetStaticIpsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetStaticIpsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::GetStaticIpsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetStaticIpsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetStaticIpsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::GetStaticIpsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetStaticIpsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::GetStaticIpsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportKeyPairError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ImportKeyPairError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportKeyPairError> for Error {
    fn from(err: crate::error::ImportKeyPairError) -> Self {
        match err {
            crate::error::ImportKeyPairError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ImportKeyPairError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::ImportKeyPairError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ImportKeyPairError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ImportKeyPairError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::ImportKeyPairError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ImportKeyPairError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::ImportKeyPairError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::IsVpcPeeredError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::IsVpcPeeredError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::IsVpcPeeredError> for Error {
    fn from(err: crate::error::IsVpcPeeredError) -> Self {
        match err {
            crate::error::IsVpcPeeredError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::IsVpcPeeredError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::IsVpcPeeredError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::IsVpcPeeredError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::IsVpcPeeredError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::IsVpcPeeredError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::IsVpcPeeredError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::IsVpcPeeredError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::OpenInstancePublicPortsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::OpenInstancePublicPortsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::OpenInstancePublicPortsError> for Error {
    fn from(err: crate::error::OpenInstancePublicPortsError) -> Self {
        match err {
            crate::error::OpenInstancePublicPortsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::OpenInstancePublicPortsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::OpenInstancePublicPortsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::OpenInstancePublicPortsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::OpenInstancePublicPortsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::OpenInstancePublicPortsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::OpenInstancePublicPortsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::OpenInstancePublicPortsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PeerVpcError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PeerVpcError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PeerVpcError> for Error {
    fn from(err: crate::error::PeerVpcError) -> Self {
        match err {
            crate::error::PeerVpcError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PeerVpcError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::PeerVpcError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PeerVpcError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::PeerVpcError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::PeerVpcError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::PeerVpcError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::PeerVpcError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAlarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutAlarmError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAlarmError> for Error {
    fn from(err: crate::error::PutAlarmError) -> Self {
        match err {
            crate::error::PutAlarmError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutAlarmError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PutAlarmError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutAlarmError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::PutAlarmError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::PutAlarmError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::PutAlarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutInstancePublicPortsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutInstancePublicPortsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutInstancePublicPortsError> for Error {
    fn from(err: crate::error::PutInstancePublicPortsError) -> Self {
        match err {
            crate::error::PutInstancePublicPortsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutInstancePublicPortsError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::PutInstancePublicPortsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PutInstancePublicPortsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutInstancePublicPortsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::PutInstancePublicPortsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::PutInstancePublicPortsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::PutInstancePublicPortsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RebootInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RebootInstanceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RebootInstanceError> for Error {
    fn from(err: crate::error::RebootInstanceError) -> Self {
        match err {
            crate::error::RebootInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RebootInstanceError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::RebootInstanceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::RebootInstanceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RebootInstanceError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::RebootInstanceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::RebootInstanceError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::RebootInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RebootRelationalDatabaseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RebootRelationalDatabaseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RebootRelationalDatabaseError> for Error {
    fn from(err: crate::error::RebootRelationalDatabaseError) -> Self {
        match err {
            crate::error::RebootRelationalDatabaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RebootRelationalDatabaseError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::RebootRelationalDatabaseError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::RebootRelationalDatabaseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RebootRelationalDatabaseError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::RebootRelationalDatabaseError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::RebootRelationalDatabaseError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::RebootRelationalDatabaseError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterContainerImageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterContainerImageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterContainerImageError> for Error {
    fn from(err: crate::error::RegisterContainerImageError) -> Self {
        match err {
            crate::error::RegisterContainerImageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RegisterContainerImageError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::RegisterContainerImageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RegisterContainerImageError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::RegisterContainerImageError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::RegisterContainerImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ReleaseStaticIpError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ReleaseStaticIpError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ReleaseStaticIpError> for Error {
    fn from(err: crate::error::ReleaseStaticIpError) -> Self {
        match err {
            crate::error::ReleaseStaticIpError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ReleaseStaticIpError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::ReleaseStaticIpError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ReleaseStaticIpError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ReleaseStaticIpError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::ReleaseStaticIpError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ReleaseStaticIpError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::ReleaseStaticIpError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetDistributionCacheError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResetDistributionCacheError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetDistributionCacheError> for Error {
    fn from(err: crate::error::ResetDistributionCacheError) -> Self {
        match err {
            crate::error::ResetDistributionCacheError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ResetDistributionCacheError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ResetDistributionCacheError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ResetDistributionCacheError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::ResetDistributionCacheError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ResetDistributionCacheError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::ResetDistributionCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendContactMethodVerificationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SendContactMethodVerificationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendContactMethodVerificationError> for Error {
    fn from(err: crate::error::SendContactMethodVerificationError) -> Self {
        match err {
            crate::error::SendContactMethodVerificationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SendContactMethodVerificationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::SendContactMethodVerificationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::SendContactMethodVerificationError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::SendContactMethodVerificationError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::SendContactMethodVerificationError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::SendContactMethodVerificationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetIpAddressTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetIpAddressTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetIpAddressTypeError> for Error {
    fn from(err: crate::error::SetIpAddressTypeError) -> Self {
        match err {
            crate::error::SetIpAddressTypeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SetIpAddressTypeError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::SetIpAddressTypeError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::SetIpAddressTypeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::SetIpAddressTypeError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::SetIpAddressTypeError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::SetIpAddressTypeError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::SetIpAddressTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetResourceAccessForBucketError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetResourceAccessForBucketError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetResourceAccessForBucketError> for Error {
    fn from(err: crate::error::SetResourceAccessForBucketError) -> Self {
        match err {
            crate::error::SetResourceAccessForBucketError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SetResourceAccessForBucketError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::SetResourceAccessForBucketError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::SetResourceAccessForBucketError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::SetResourceAccessForBucketError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::SetResourceAccessForBucketError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartInstanceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartInstanceError> for Error {
    fn from(err: crate::error::StartInstanceError) -> Self {
        match err {
            crate::error::StartInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartInstanceError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::StartInstanceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::StartInstanceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartInstanceError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::StartInstanceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::StartInstanceError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::StartInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartRelationalDatabaseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartRelationalDatabaseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartRelationalDatabaseError> for Error {
    fn from(err: crate::error::StartRelationalDatabaseError) -> Self {
        match err {
            crate::error::StartRelationalDatabaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartRelationalDatabaseError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::StartRelationalDatabaseError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::StartRelationalDatabaseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartRelationalDatabaseError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::StartRelationalDatabaseError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::StartRelationalDatabaseError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::StartRelationalDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopInstanceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopInstanceError> for Error {
    fn from(err: crate::error::StopInstanceError) -> Self {
        match err {
            crate::error::StopInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StopInstanceError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::StopInstanceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::StopInstanceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StopInstanceError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::StopInstanceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::StopInstanceError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::StopInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopRelationalDatabaseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopRelationalDatabaseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopRelationalDatabaseError> for Error {
    fn from(err: crate::error::StopRelationalDatabaseError) -> Self {
        match err {
            crate::error::StopRelationalDatabaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StopRelationalDatabaseError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::StopRelationalDatabaseError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::StopRelationalDatabaseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StopRelationalDatabaseError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::StopRelationalDatabaseError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::StopRelationalDatabaseError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::StopRelationalDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::TagResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TagResourceError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::TagResourceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::TagResourceError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TestAlarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TestAlarmError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TestAlarmError> for Error {
    fn from(err: crate::error::TestAlarmError) -> Self {
        match err {
            crate::error::TestAlarmError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TestAlarmError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TestAlarmError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TestAlarmError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::TestAlarmError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::TestAlarmError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::TestAlarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UnpeerVpcError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UnpeerVpcError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UnpeerVpcError> for Error {
    fn from(err: crate::error::UnpeerVpcError) -> Self {
        match err {
            crate::error::UnpeerVpcError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UnpeerVpcError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::UnpeerVpcError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UnpeerVpcError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UnpeerVpcError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::UnpeerVpcError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::UnpeerVpcError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::UnpeerVpcError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::UntagResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UntagResourceError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::UntagResourceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UntagResourceError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBucketError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateBucketError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBucketError> for Error {
    fn from(err: crate::error::UpdateBucketError) -> Self {
        match err {
            crate::error::UpdateBucketError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateBucketError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateBucketError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBucketError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UpdateBucketError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::UpdateBucketError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBucketBundleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBucketBundleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBucketBundleError> for Error {
    fn from(err: crate::error::UpdateBucketBundleError) -> Self {
        match err {
            crate::error::UpdateBucketBundleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateBucketBundleError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateBucketBundleError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBucketBundleError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UpdateBucketBundleError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::UpdateBucketBundleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateContainerServiceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateContainerServiceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContainerServiceError> for Error {
    fn from(err: crate::error::UpdateContainerServiceError) -> Self {
        match err {
            crate::error::UpdateContainerServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateContainerServiceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateContainerServiceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateContainerServiceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UpdateContainerServiceError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::UpdateContainerServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDistributionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDistributionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDistributionError> for Error {
    fn from(err: crate::error::UpdateDistributionError) -> Self {
        match err {
            crate::error::UpdateDistributionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDistributionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateDistributionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDistributionError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::UpdateDistributionError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UpdateDistributionError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::UpdateDistributionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDistributionBundleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDistributionBundleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDistributionBundleError> for Error {
    fn from(err: crate::error::UpdateDistributionBundleError) -> Self {
        match err {
            crate::error::UpdateDistributionBundleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDistributionBundleError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateDistributionBundleError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDistributionBundleError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::UpdateDistributionBundleError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UpdateDistributionBundleError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::UpdateDistributionBundleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDomainEntryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDomainEntryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDomainEntryError> for Error {
    fn from(err: crate::error::UpdateDomainEntryError) -> Self {
        match err {
            crate::error::UpdateDomainEntryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDomainEntryError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::UpdateDomainEntryError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateDomainEntryError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDomainEntryError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::UpdateDomainEntryError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UpdateDomainEntryError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::UpdateDomainEntryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateInstanceMetadataOptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateInstanceMetadataOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateInstanceMetadataOptionsError> for Error {
    fn from(err: crate::error::UpdateInstanceMetadataOptionsError) -> Self {
        match err {
            crate::error::UpdateInstanceMetadataOptionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateInstanceMetadataOptionsError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::UpdateInstanceMetadataOptionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateInstanceMetadataOptionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateInstanceMetadataOptionsError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::UpdateInstanceMetadataOptionsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UpdateInstanceMetadataOptionsError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::UpdateInstanceMetadataOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateLoadBalancerAttributeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateLoadBalancerAttributeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateLoadBalancerAttributeError> for Error {
    fn from(err: crate::error::UpdateLoadBalancerAttributeError) -> Self {
        match err {
            crate::error::UpdateLoadBalancerAttributeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateLoadBalancerAttributeError::AccountSetupInProgressException(
                inner,
            ) => Error::AccountSetupInProgressException(inner),
            crate::error::UpdateLoadBalancerAttributeError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateLoadBalancerAttributeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateLoadBalancerAttributeError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::UpdateLoadBalancerAttributeError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UpdateLoadBalancerAttributeError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::UpdateLoadBalancerAttributeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRelationalDatabaseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRelationalDatabaseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRelationalDatabaseError> for Error {
    fn from(err: crate::error::UpdateRelationalDatabaseError) -> Self {
        match err {
            crate::error::UpdateRelationalDatabaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateRelationalDatabaseError::AccountSetupInProgressException(inner) => {
                Error::AccountSetupInProgressException(inner)
            }
            crate::error::UpdateRelationalDatabaseError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateRelationalDatabaseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateRelationalDatabaseError::OperationFailureException(inner) => {
                Error::OperationFailureException(inner)
            }
            crate::error::UpdateRelationalDatabaseError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UpdateRelationalDatabaseError::UnauthenticatedException(inner) => {
                Error::UnauthenticatedException(inner)
            }
            crate::error::UpdateRelationalDatabaseError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::UpdateRelationalDatabaseParametersError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateRelationalDatabaseParametersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRelationalDatabaseParametersError> for Error {
    fn from(err: crate::error::UpdateRelationalDatabaseParametersError) -> Self {
        match err {
            crate::error::UpdateRelationalDatabaseParametersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateRelationalDatabaseParametersError::AccountSetupInProgressException(inner) => Error::AccountSetupInProgressException(inner),
            crate::error::UpdateRelationalDatabaseParametersError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::UpdateRelationalDatabaseParametersError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::UpdateRelationalDatabaseParametersError::OperationFailureException(inner) => Error::OperationFailureException(inner),
            crate::error::UpdateRelationalDatabaseParametersError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::UpdateRelationalDatabaseParametersError::UnauthenticatedException(inner) => Error::UnauthenticatedException(inner),
            crate::error::UpdateRelationalDatabaseParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::AccountSetupInProgressException(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::OperationFailureException(e) => e.request_id(),
            Self::ServiceException(e) => e.request_id(),
            Self::UnauthenticatedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
