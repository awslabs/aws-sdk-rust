// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_target::_delete_target_output::DeleteTargetOutputBuilder;

pub use crate::operation::delete_target::_delete_target_input::DeleteTargetInputBuilder;

/// Fluent builder constructing a request to `DeleteTarget`.
///
/// <p>Deletes a specified target for notifications.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTargetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_target::builders::DeleteTargetInputBuilder,
}
impl DeleteTargetFluentBuilder {
    /// Creates a new `DeleteTarget`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_target::DeleteTarget,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::delete_target::DeleteTargetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_target::DeleteTargetOutput,
        aws_smithy_http::result::SdkError<crate::operation::delete_target::DeleteTargetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the Chatbot topic or Chatbot client to delete.</p>
    pub fn target_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_address(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Chatbot topic or Chatbot client to delete.</p>
    pub fn set_target_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_target_address(input);
        self
    }
    /// <p>A Boolean value that can be used to delete all associations with this Chatbot topic. The default value is FALSE. If set to TRUE, all associations between that target and every notification rule in your Amazon Web Services account are deleted.</p>
    pub fn force_unsubscribe_all(mut self, input: bool) -> Self {
        self.inner = self.inner.force_unsubscribe_all(input);
        self
    }
    /// <p>A Boolean value that can be used to delete all associations with this Chatbot topic. The default value is FALSE. If set to TRUE, all associations between that target and every notification rule in your Amazon Web Services account are deleted.</p>
    pub fn set_force_unsubscribe_all(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_unsubscribe_all(input);
        self
    }
}
