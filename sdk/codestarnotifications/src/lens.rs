// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_event_types_output_next_token(
    input: &crate::output::ListEventTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_notification_rules_output_next_token(
    input: &crate::output::ListNotificationRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_targets_output_next_token(
    input: &crate::output::ListTargetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_event_types_output_event_types(
    input: crate::output::ListEventTypesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EventTypeSummary>> {
    let input = match input.event_types {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_notification_rules_output_notification_rules(
    input: crate::output::ListNotificationRulesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::NotificationRuleSummary>> {
    let input = match input.notification_rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_targets_output_targets(
    input: crate::output::ListTargetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TargetSummary>> {
    let input = match input.targets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
