// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS CodeStar Notifications
///
/// Client for invoking operations on AWS CodeStar Notifications. Each operation on AWS CodeStar Notifications is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_codestarnotifications::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_codestarnotifications::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_codestarnotifications::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateNotificationRule`](crate::client::fluent_builders::CreateNotificationRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateNotificationRule::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateNotificationRule::set_name): <p>The name for the notification rule. Notification rule names must be unique in your Amazon Web Services account.</p>
    ///   - [`event_type_ids(Vec<String>)`](crate::client::fluent_builders::CreateNotificationRule::event_type_ids) / [`set_event_type_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreateNotificationRule::set_event_type_ids): <p>A list of event types associated with this notification rule. For a list of allowed events, see <code>EventTypeSummary</code>.</p>
    ///   - [`resource(impl Into<String>)`](crate::client::fluent_builders::CreateNotificationRule::resource) / [`set_resource(Option<String>)`](crate::client::fluent_builders::CreateNotificationRule::set_resource): <p>The Amazon Resource Name (ARN) of the resource to associate with the notification rule. Supported resources include pipelines in CodePipeline, repositories in CodeCommit, and build projects in CodeBuild.</p>
    ///   - [`targets(Vec<Target>)`](crate::client::fluent_builders::CreateNotificationRule::targets) / [`set_targets(Option<Vec<Target>>)`](crate::client::fluent_builders::CreateNotificationRule::set_targets): <p>A list of Amazon Resource Names (ARNs) of Amazon Simple Notification Service topics and Chatbot clients to associate with the notification rule.</p>
    ///   - [`detail_type(DetailType)`](crate::client::fluent_builders::CreateNotificationRule::detail_type) / [`set_detail_type(Option<DetailType>)`](crate::client::fluent_builders::CreateNotificationRule::set_detail_type): <p>The level of detail to include in the notifications for this resource. <code>BASIC</code> will include only the contents of the event as it would appear in Amazon CloudWatch. <code>FULL</code> will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::CreateNotificationRule::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::CreateNotificationRule::set_client_request_token): <p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request with the same parameters is received and a token is included, the request returns information about the initial request that used that token.</p> <note>   <p>The Amazon Web Services SDKs prepopulate client request tokens. If you are using an Amazon Web Services SDK, an idempotency token is created for you.</p>  </note>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateNotificationRule::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateNotificationRule::set_tags): <p>A list of tags to apply to this notification rule. Key names cannot start with "<code>aws</code>". </p>
    ///   - [`status(NotificationRuleStatus)`](crate::client::fluent_builders::CreateNotificationRule::status) / [`set_status(Option<NotificationRuleStatus>)`](crate::client::fluent_builders::CreateNotificationRule::set_status): <p>The status of the notification rule. The default value is <code>ENABLED</code>. If the status is set to <code>DISABLED</code>, notifications aren't sent for the notification rule.</p>
    /// - On success, responds with [`CreateNotificationRuleOutput`](crate::output::CreateNotificationRuleOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::CreateNotificationRuleOutput::arn): <p>The Amazon Resource Name (ARN) of the notification rule.</p>
    /// - On failure, responds with [`SdkError<CreateNotificationRuleError>`](crate::error::CreateNotificationRuleError)
    pub fn create_notification_rule(
        &self,
    ) -> crate::client::fluent_builders::CreateNotificationRule {
        crate::client::fluent_builders::CreateNotificationRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteNotificationRule`](crate::client::fluent_builders::DeleteNotificationRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::DeleteNotificationRule::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::DeleteNotificationRule::set_arn): <p>The Amazon Resource Name (ARN) of the notification rule you want to delete.</p>
    /// - On success, responds with [`DeleteNotificationRuleOutput`](crate::output::DeleteNotificationRuleOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::DeleteNotificationRuleOutput::arn): <p>The Amazon Resource Name (ARN) of the deleted notification rule.</p>
    /// - On failure, responds with [`SdkError<DeleteNotificationRuleError>`](crate::error::DeleteNotificationRuleError)
    pub fn delete_notification_rule(
        &self,
    ) -> crate::client::fluent_builders::DeleteNotificationRule {
        crate::client::fluent_builders::DeleteNotificationRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteTarget`](crate::client::fluent_builders::DeleteTarget) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`target_address(impl Into<String>)`](crate::client::fluent_builders::DeleteTarget::target_address) / [`set_target_address(Option<String>)`](crate::client::fluent_builders::DeleteTarget::set_target_address): <p>The Amazon Resource Name (ARN) of the Chatbot topic or Chatbot client to delete.</p>
    ///   - [`force_unsubscribe_all(bool)`](crate::client::fluent_builders::DeleteTarget::force_unsubscribe_all) / [`set_force_unsubscribe_all(bool)`](crate::client::fluent_builders::DeleteTarget::set_force_unsubscribe_all): <p>A Boolean value that can be used to delete all associations with this Chatbot topic. The default value is FALSE. If set to TRUE, all associations between that target and every notification rule in your Amazon Web Services account are deleted.</p>
    /// - On success, responds with [`DeleteTargetOutput`](crate::output::DeleteTargetOutput)

    /// - On failure, responds with [`SdkError<DeleteTargetError>`](crate::error::DeleteTargetError)
    pub fn delete_target(&self) -> crate::client::fluent_builders::DeleteTarget {
        crate::client::fluent_builders::DeleteTarget::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeNotificationRule`](crate::client::fluent_builders::DescribeNotificationRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::DescribeNotificationRule::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::DescribeNotificationRule::set_arn): <p>The Amazon Resource Name (ARN) of the notification rule.</p>
    /// - On success, responds with [`DescribeNotificationRuleOutput`](crate::output::DescribeNotificationRuleOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::DescribeNotificationRuleOutput::arn): <p>The Amazon Resource Name (ARN) of the notification rule.</p>
    ///   - [`name(Option<String>)`](crate::output::DescribeNotificationRuleOutput::name): <p>The name of the notification rule.</p>
    ///   - [`event_types(Option<Vec<EventTypeSummary>>)`](crate::output::DescribeNotificationRuleOutput::event_types): <p>A list of the event types associated with the notification rule.</p>
    ///   - [`resource(Option<String>)`](crate::output::DescribeNotificationRuleOutput::resource): <p>The Amazon Resource Name (ARN) of the resource associated with the notification rule.</p>
    ///   - [`targets(Option<Vec<TargetSummary>>)`](crate::output::DescribeNotificationRuleOutput::targets): <p>A list of the Chatbot topics and Chatbot clients associated with the notification rule.</p>
    ///   - [`detail_type(Option<DetailType>)`](crate::output::DescribeNotificationRuleOutput::detail_type): <p>The level of detail included in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.</p>
    ///   - [`created_by(Option<String>)`](crate::output::DescribeNotificationRuleOutput::created_by): <p>The name or email alias of the person who created the notification rule.</p>
    ///   - [`status(Option<NotificationRuleStatus>)`](crate::output::DescribeNotificationRuleOutput::status): <p>The status of the notification rule. Valid statuses are on (sending notifications) or off (not sending notifications).</p>
    ///   - [`created_timestamp(Option<DateTime>)`](crate::output::DescribeNotificationRuleOutput::created_timestamp): <p>The date and time the notification rule was created, in timestamp format.</p>
    ///   - [`last_modified_timestamp(Option<DateTime>)`](crate::output::DescribeNotificationRuleOutput::last_modified_timestamp): <p>The date and time the notification rule was most recently updated, in timestamp format.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::DescribeNotificationRuleOutput::tags): <p>The tags associated with the notification rule.</p>
    /// - On failure, responds with [`SdkError<DescribeNotificationRuleError>`](crate::error::DescribeNotificationRuleError)
    pub fn describe_notification_rule(
        &self,
    ) -> crate::client::fluent_builders::DescribeNotificationRule {
        crate::client::fluent_builders::DescribeNotificationRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEventTypes`](crate::client::fluent_builders::ListEventTypes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListEventTypes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Vec<ListEventTypesFilter>)`](crate::client::fluent_builders::ListEventTypes::filters) / [`set_filters(Option<Vec<ListEventTypesFilter>>)`](crate::client::fluent_builders::ListEventTypes::set_filters): <p>The filters to use to return information by service or resource type.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEventTypes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEventTypes::set_next_token): <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEventTypes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEventTypes::set_max_results): <p>A non-negative integer used to limit the number of returned results. The default number is 50. The maximum number of results that can be returned is 100.</p>
    /// - On success, responds with [`ListEventTypesOutput`](crate::output::ListEventTypesOutput) with field(s):
    ///   - [`event_types(Option<Vec<EventTypeSummary>>)`](crate::output::ListEventTypesOutput::event_types): <p>Information about each event, including service name, resource type, event ID, and event name.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListEventTypesOutput::next_token): <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
    /// - On failure, responds with [`SdkError<ListEventTypesError>`](crate::error::ListEventTypesError)
    pub fn list_event_types(&self) -> crate::client::fluent_builders::ListEventTypes {
        crate::client::fluent_builders::ListEventTypes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListNotificationRules`](crate::client::fluent_builders::ListNotificationRules) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListNotificationRules::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Vec<ListNotificationRulesFilter>)`](crate::client::fluent_builders::ListNotificationRules::filters) / [`set_filters(Option<Vec<ListNotificationRulesFilter>>)`](crate::client::fluent_builders::ListNotificationRules::set_filters): <p>The filters to use to return information by service or resource type. For valid values, see <code>ListNotificationRulesFilter</code>.</p> <note>   <p>A filter with the same name can appear more than once when used with OR statements. Filters with different names should be applied with AND statements.</p>  </note>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListNotificationRules::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListNotificationRules::set_next_token): <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListNotificationRules::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListNotificationRules::set_max_results): <p>A non-negative integer used to limit the number of returned results. The maximum number of results that can be returned is 100.</p>
    /// - On success, responds with [`ListNotificationRulesOutput`](crate::output::ListNotificationRulesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListNotificationRulesOutput::next_token): <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
    ///   - [`notification_rules(Option<Vec<NotificationRuleSummary>>)`](crate::output::ListNotificationRulesOutput::notification_rules): <p>The list of notification rules for the Amazon Web Services account, by Amazon Resource Name (ARN) and ID. </p>
    /// - On failure, responds with [`SdkError<ListNotificationRulesError>`](crate::error::ListNotificationRulesError)
    pub fn list_notification_rules(&self) -> crate::client::fluent_builders::ListNotificationRules {
        crate::client::fluent_builders::ListNotificationRules::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_arn): <p>The Amazon Resource Name (ARN) for the notification rule.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags associated with the notification rule.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTargets`](crate::client::fluent_builders::ListTargets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTargets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Vec<ListTargetsFilter>)`](crate::client::fluent_builders::ListTargets::filters) / [`set_filters(Option<Vec<ListTargetsFilter>>)`](crate::client::fluent_builders::ListTargets::set_filters): <p>The filters to use to return information by service or resource type. Valid filters include target type, target address, and target status.</p> <note>   <p>A filter with the same name can appear more than once when used with OR statements. Filters with different names should be applied with AND statements.</p>  </note>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTargets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTargets::set_next_token): <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTargets::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTargets::set_max_results): <p>A non-negative integer used to limit the number of returned results. The maximum number of results that can be returned is 100.</p>
    /// - On success, responds with [`ListTargetsOutput`](crate::output::ListTargetsOutput) with field(s):
    ///   - [`targets(Option<Vec<TargetSummary>>)`](crate::output::ListTargetsOutput::targets): <p>The list of notification rule targets. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTargetsOutput::next_token): <p>An enumeration token that can be used in a request to return the next batch of results.</p>
    /// - On failure, responds with [`SdkError<ListTargetsError>`](crate::error::ListTargetsError)
    pub fn list_targets(&self) -> crate::client::fluent_builders::ListTargets {
        crate::client::fluent_builders::ListTargets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`Subscribe`](crate::client::fluent_builders::Subscribe) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::Subscribe::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::Subscribe::set_arn): <p>The Amazon Resource Name (ARN) of the notification rule for which you want to create the association.</p>
    ///   - [`target(Target)`](crate::client::fluent_builders::Subscribe::target) / [`set_target(Option<Target>)`](crate::client::fluent_builders::Subscribe::set_target): <p>Information about the Chatbot topics or Chatbot clients associated with a notification rule.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::Subscribe::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::Subscribe::set_client_request_token): <p>An enumeration token that, when provided in a request, returns the next batch of the results.</p>
    /// - On success, responds with [`SubscribeOutput`](crate::output::SubscribeOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::SubscribeOutput::arn): <p>The Amazon Resource Name (ARN) of the notification rule for which you have created assocations.</p>
    /// - On failure, responds with [`SdkError<SubscribeError>`](crate::error::SubscribeError)
    pub fn subscribe(&self) -> crate::client::fluent_builders::Subscribe {
        crate::client::fluent_builders::Subscribe::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_arn): <p>The Amazon Resource Name (ARN) of the notification rule to tag.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The list of tags to associate with the resource. Tag key names cannot start with "<code>aws</code>".</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::TagResourceOutput::tags): <p>The list of tags associated with the resource.</p>
    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`Unsubscribe`](crate::client::fluent_builders::Unsubscribe) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::Unsubscribe::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::Unsubscribe::set_arn): <p>The Amazon Resource Name (ARN) of the notification rule.</p>
    ///   - [`target_address(impl Into<String>)`](crate::client::fluent_builders::Unsubscribe::target_address) / [`set_target_address(Option<String>)`](crate::client::fluent_builders::Unsubscribe::set_target_address): <p>The ARN of the Chatbot topic to unsubscribe from the notification rule.</p>
    /// - On success, responds with [`UnsubscribeOutput`](crate::output::UnsubscribeOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::UnsubscribeOutput::arn): <p>The Amazon Resource Name (ARN) of the the notification rule from which you have removed a subscription.</p>
    /// - On failure, responds with [`SdkError<UnsubscribeError>`](crate::error::UnsubscribeError)
    pub fn unsubscribe(&self) -> crate::client::fluent_builders::Unsubscribe {
        crate::client::fluent_builders::Unsubscribe::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_arn): <p>The Amazon Resource Name (ARN) of the notification rule from which to remove the tags.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The key names of the tags to remove.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateNotificationRule`](crate::client::fluent_builders::UpdateNotificationRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::UpdateNotificationRule::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::UpdateNotificationRule::set_arn): <p>The Amazon Resource Name (ARN) of the notification rule.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateNotificationRule::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateNotificationRule::set_name): <p>The name of the notification rule.</p>
    ///   - [`status(NotificationRuleStatus)`](crate::client::fluent_builders::UpdateNotificationRule::status) / [`set_status(Option<NotificationRuleStatus>)`](crate::client::fluent_builders::UpdateNotificationRule::set_status): <p>The status of the notification rule. Valid statuses include enabled (sending notifications) or disabled (not sending notifications).</p>
    ///   - [`event_type_ids(Vec<String>)`](crate::client::fluent_builders::UpdateNotificationRule::event_type_ids) / [`set_event_type_ids(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateNotificationRule::set_event_type_ids): <p>A list of event types associated with this notification rule. For a complete list of event types and IDs, see <a href="https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api">Notification concepts</a> in the <i>Developer Tools Console User Guide</i>.</p>
    ///   - [`targets(Vec<Target>)`](crate::client::fluent_builders::UpdateNotificationRule::targets) / [`set_targets(Option<Vec<Target>>)`](crate::client::fluent_builders::UpdateNotificationRule::set_targets): <p>The address and type of the targets to receive notifications from this notification rule.</p>
    ///   - [`detail_type(DetailType)`](crate::client::fluent_builders::UpdateNotificationRule::detail_type) / [`set_detail_type(Option<DetailType>)`](crate::client::fluent_builders::UpdateNotificationRule::set_detail_type): <p>The level of detail to include in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.</p>
    /// - On success, responds with [`UpdateNotificationRuleOutput`](crate::output::UpdateNotificationRuleOutput)

    /// - On failure, responds with [`SdkError<UpdateNotificationRuleError>`](crate::error::UpdateNotificationRuleError)
    pub fn update_notification_rule(
        &self,
    ) -> crate::client::fluent_builders::UpdateNotificationRule {
        crate::client::fluent_builders::UpdateNotificationRule::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
