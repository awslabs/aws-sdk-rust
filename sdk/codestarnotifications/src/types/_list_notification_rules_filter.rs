// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a filter to apply to the list of returned notification rules. You can filter by event type, owner, resource, or target.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListNotificationRulesFilter {
    /// <p>The name of the attribute you want to use to filter the returned notification rules.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::ListNotificationRulesFilterName>,
    /// <p>The value of the attribute you want to use to filter the returned notification rules. For example, if you specify filtering by <i>RESOURCE</i> in Name, you might specify the ARN of a pipeline in CodePipeline for the value.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl ListNotificationRulesFilter {
    /// <p>The name of the attribute you want to use to filter the returned notification rules.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::ListNotificationRulesFilterName> {
        self.name.as_ref()
    }
    /// <p>The value of the attribute you want to use to filter the returned notification rules. For example, if you specify filtering by <i>RESOURCE</i> in Name, you might specify the ARN of a pipeline in CodePipeline for the value.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ListNotificationRulesFilter {
    /// Creates a new builder-style object to manufacture [`ListNotificationRulesFilter`](crate::types::ListNotificationRulesFilter).
    pub fn builder() -> crate::types::builders::ListNotificationRulesFilterBuilder {
        crate::types::builders::ListNotificationRulesFilterBuilder::default()
    }
}

/// A builder for [`ListNotificationRulesFilter`](crate::types::ListNotificationRulesFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListNotificationRulesFilterBuilder {
    pub(crate) name: std::option::Option<crate::types::ListNotificationRulesFilterName>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl ListNotificationRulesFilterBuilder {
    /// <p>The name of the attribute you want to use to filter the returned notification rules.</p>
    pub fn name(mut self, input: crate::types::ListNotificationRulesFilterName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The name of the attribute you want to use to filter the returned notification rules.</p>
    pub fn set_name(
        mut self,
        input: std::option::Option<crate::types::ListNotificationRulesFilterName>,
    ) -> Self {
        self.name = input;
        self
    }
    /// <p>The value of the attribute you want to use to filter the returned notification rules. For example, if you specify filtering by <i>RESOURCE</i> in Name, you might specify the ARN of a pipeline in CodePipeline for the value.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of the attribute you want to use to filter the returned notification rules. For example, if you specify filtering by <i>RESOURCE</i> in Name, you might specify the ARN of a pipeline in CodePipeline for the value.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`ListNotificationRulesFilter`](crate::types::ListNotificationRulesFilter).
    pub fn build(self) -> crate::types::ListNotificationRulesFilter {
        crate::types::ListNotificationRulesFilter {
            name: self.name,
            value: self.value,
        }
    }
}
