// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a filter to apply to the list of returned targets. You can filter by target type, address, or status. For example, to filter results to notification rules that have active Chatbot topics as targets, you could specify a ListTargetsFilter Name as <code>TargetType</code> and a Value of <code>SNS</code>, and a Name of <code>TARGET_STATUS</code> and a Value of <code>ACTIVE</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTargetsFilter {
    /// <p>The name of the attribute you want to use to filter the returned targets.</p>
    pub name: crate::types::ListTargetsFilterName,
    /// <p>The value of the attribute you want to use to filter the returned targets. For example, if you specify <code>SNS</code> for the Target type, you could specify an Amazon Resource Name (ARN) for a topic as the value.</p>
    pub value: ::std::string::String,
}
impl ListTargetsFilter {
    /// <p>The name of the attribute you want to use to filter the returned targets.</p>
    pub fn name(&self) -> &crate::types::ListTargetsFilterName {
        &self.name
    }
    /// <p>The value of the attribute you want to use to filter the returned targets. For example, if you specify <code>SNS</code> for the Target type, you could specify an Amazon Resource Name (ARN) for a topic as the value.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
}
impl ListTargetsFilter {
    /// Creates a new builder-style object to manufacture [`ListTargetsFilter`](crate::types::ListTargetsFilter).
    pub fn builder() -> crate::types::builders::ListTargetsFilterBuilder {
        crate::types::builders::ListTargetsFilterBuilder::default()
    }
}

/// A builder for [`ListTargetsFilter`](crate::types::ListTargetsFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTargetsFilterBuilder {
    pub(crate) name: ::std::option::Option<crate::types::ListTargetsFilterName>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl ListTargetsFilterBuilder {
    /// <p>The name of the attribute you want to use to filter the returned targets.</p>
    /// This field is required.
    pub fn name(mut self, input: crate::types::ListTargetsFilterName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the attribute you want to use to filter the returned targets.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::ListTargetsFilterName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the attribute you want to use to filter the returned targets.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::ListTargetsFilterName> {
        &self.name
    }
    /// <p>The value of the attribute you want to use to filter the returned targets. For example, if you specify <code>SNS</code> for the Target type, you could specify an Amazon Resource Name (ARN) for a topic as the value.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the attribute you want to use to filter the returned targets. For example, if you specify <code>SNS</code> for the Target type, you could specify an Amazon Resource Name (ARN) for a topic as the value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the attribute you want to use to filter the returned targets. For example, if you specify <code>SNS</code> for the Target type, you could specify an Amazon Resource Name (ARN) for a topic as the value.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`ListTargetsFilter`](crate::types::ListTargetsFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ListTargetsFilterBuilder::name)
    /// - [`value`](crate::types::builders::ListTargetsFilterBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::ListTargetsFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListTargetsFilter {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ListTargetsFilter",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building ListTargetsFilter",
                )
            })?,
        })
    }
}
