// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_create_workflow;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_create_workflow_step;

pub(crate) mod shape_create_workflow_step_group;

pub(crate) mod shape_delete_workflow;

pub(crate) mod shape_delete_workflow_step;

pub(crate) mod shape_delete_workflow_step_group;

pub(crate) mod shape_get_template;

pub(crate) mod shape_get_template_step;

pub(crate) mod shape_get_template_step_group;

pub(crate) mod shape_get_workflow;

pub(crate) mod shape_get_workflow_step;

pub(crate) mod shape_get_workflow_step_group;

pub(crate) mod shape_list_plugins;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_template_step_groups;

pub(crate) mod shape_list_template_steps;

pub(crate) mod shape_list_templates;

pub(crate) mod shape_list_workflow_step_groups;

pub(crate) mod shape_list_workflow_steps;

pub(crate) mod shape_list_workflows;

pub(crate) mod shape_retry_workflow_step;

pub(crate) mod shape_start_workflow;

pub(crate) mod shape_stop_workflow;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_workflow;

pub(crate) mod shape_update_workflow_step;

pub(crate) mod shape_update_workflow_step_group;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_create_workflow_input;

pub(crate) mod shape_create_workflow_step_group_input;

pub(crate) mod shape_create_workflow_step_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_workflow_input;

pub(crate) mod shape_update_workflow_step_group_input;

pub(crate) mod shape_update_workflow_step_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_migration_workflow_summary_list;

pub(crate) mod shape_plugin_summaries;

pub(crate) mod shape_step_automation_configuration;

pub(crate) mod shape_step_input;

pub(crate) mod shape_step_input_parameters;

pub(crate) mod shape_step_output_list;

pub(crate) mod shape_string_list;

pub(crate) mod shape_string_map;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_template_input_list;

pub(crate) mod shape_template_step_group_summary_list;

pub(crate) mod shape_template_step_summary_list;

pub(crate) mod shape_template_summary_list;

pub(crate) mod shape_tools_list;

pub(crate) mod shape_workflow_step_automation_configuration;

pub(crate) mod shape_workflow_step_groups_summary_list;

pub(crate) mod shape_workflow_step_output;

pub(crate) mod shape_workflow_step_output_list;

pub(crate) mod shape_workflow_steps_summary_list;

pub(crate) mod shape_migration_workflow_summary;

pub(crate) mod shape_platform_command;

pub(crate) mod shape_platform_script_key;

pub(crate) mod shape_plugin_summary;

pub(crate) mod shape_step_output;

pub(crate) mod shape_template_input;

pub(crate) mod shape_template_step_group_summary;

pub(crate) mod shape_template_step_summary;

pub(crate) mod shape_template_summary;

pub(crate) mod shape_tool;

pub(crate) mod shape_workflow_step_group_summary;

pub(crate) mod shape_workflow_step_output_union;

pub(crate) mod shape_workflow_step_summary;
