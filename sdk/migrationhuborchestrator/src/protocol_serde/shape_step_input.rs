// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_step_input(
    object_7: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::StepInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::types::StepInput::IntegerValue(inner) => {
            object_7.key("integerValue").number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*inner).into()),
            );
        }
        crate::types::StepInput::StringValue(inner) => {
            object_7.key("stringValue").string(inner.as_str());
        }
        crate::types::StepInput::ListOfStringsValue(inner) => {
            let mut array_1 = object_7.key("listOfStringsValue").start_array();
            for item_2 in inner {
                {
                    array_1.value().string(item_2.as_str());
                }
            }
            array_1.finish();
        }
        crate::types::StepInput::MapOfStringValue(inner) => {
            #[allow(unused_mut)]
            let mut object_3 = object_7.key("mapOfStringValue").start_object();
            for (key_4, value_5) in inner {
                {
                    object_3.key(key_4.as_str()).string(value_5.as_str());
                }
            }
            object_3.finish();
        }
        crate::types::StepInput::Unknown => {
            return Err(
                aws_smithy_http::operation::error::SerializationError::unknown_variant("StepInput"),
            )
        }
    }
    Ok(())
}

pub(crate) fn de_step_input<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::StepInput>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        if variant.is_some() {
                            return Err(
                                aws_smithy_json::deserialize::error::DeserializeError::custom(
                                    "encountered mixed variants in union",
                                ),
                            );
                        }
                        variant = match key.to_unescaped()?.as_ref() {
                            "integerValue" => {
                                Some(crate::types::StepInput::IntegerValue(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                                        .map(i32::try_from)
                                                        .transpose()?
                                    .unwrap_or_default()
                                ))
                            }
                            "stringValue" => {
                                Some(crate::types::StepInput::StringValue(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?.map(|s|
                                        s.to_unescaped().map(|u|
                                            u.into_owned()
                                        )
                                    ).transpose()?
                                    .unwrap_or_default()
                                ))
                            }
                            "listOfStringsValue" => {
                                Some(crate::types::StepInput::ListOfStringsValue(
                                    crate::protocol_serde::shape_string_list::de_string_list(tokens)?
                                    .ok_or_else(|| aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'listOfStringsValue' cannot be null"))?
                                ))
                            }
                            "mapOfStringValue" => {
                                Some(crate::types::StepInput::MapOfStringValue(
                                    crate::protocol_serde::shape_string_map::de_string_map(tokens)?
                                    .ok_or_else(|| aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'mapOfStringValue' cannot be null"))?
                                ))
                            }
                            _ => {
                                                                      aws_smithy_json::deserialize::token::skip_value(tokens)?;
                                                                      Some(crate::types::StepInput::Unknown)
                                                                    }
                        };
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
        }
        _ => {
            return Err(
                aws_smithy_json::deserialize::error::DeserializeError::custom(
                    "expected start object or null",
                ),
            )
        }
    }
    Ok(variant)
}
