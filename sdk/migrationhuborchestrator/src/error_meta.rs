// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>An internal error has occurred.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The resource is not available.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an AWS service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_workflow::CreateWorkflowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_workflow::CreateWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_workflow::CreateWorkflowError> for Error {
    fn from(err: crate::operation::create_workflow::CreateWorkflowError) -> Self {
        match err {
            crate::operation::create_workflow::CreateWorkflowError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::create_workflow::CreateWorkflowError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::create_workflow::CreateWorkflowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_workflow::CreateWorkflowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_workflow::CreateWorkflowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_workflow_step::CreateWorkflowStepError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_workflow_step::CreateWorkflowStepError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_workflow_step::CreateWorkflowStepError> for Error {
    fn from(err: crate::operation::create_workflow_step::CreateWorkflowStepError) -> Self {
        match err {
            crate::operation::create_workflow_step::CreateWorkflowStepError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_workflow_step::CreateWorkflowStepError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_workflow_step::CreateWorkflowStepError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_workflow_step::CreateWorkflowStepError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_workflow_step::CreateWorkflowStepError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_workflow_step_group::CreateWorkflowStepGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_workflow_step_group::CreateWorkflowStepGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_workflow_step_group::CreateWorkflowStepGroupError> for Error {
    fn from(
        err: crate::operation::create_workflow_step_group::CreateWorkflowStepGroupError,
    ) -> Self {
        match err {
            crate::operation::create_workflow_step_group::CreateWorkflowStepGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_workflow_step_group::CreateWorkflowStepGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_workflow_step_group::CreateWorkflowStepGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_workflow_step_group::CreateWorkflowStepGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_workflow_step_group::CreateWorkflowStepGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_workflow::DeleteWorkflowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_workflow::DeleteWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_workflow::DeleteWorkflowError> for Error {
    fn from(err: crate::operation::delete_workflow::DeleteWorkflowError) -> Self {
        match err {
            crate::operation::delete_workflow::DeleteWorkflowError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::delete_workflow::DeleteWorkflowError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_workflow::DeleteWorkflowError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_workflow::DeleteWorkflowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_workflow::DeleteWorkflowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_workflow::DeleteWorkflowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_workflow_step::DeleteWorkflowStepError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_workflow_step::DeleteWorkflowStepError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_workflow_step::DeleteWorkflowStepError> for Error {
    fn from(err: crate::operation::delete_workflow_step::DeleteWorkflowStepError) -> Self {
        match err {
            crate::operation::delete_workflow_step::DeleteWorkflowStepError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_workflow_step::DeleteWorkflowStepError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_workflow_step::DeleteWorkflowStepError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_workflow_step::DeleteWorkflowStepError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_workflow_step::DeleteWorkflowStepError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_workflow_step::DeleteWorkflowStepError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_workflow_step_group::DeleteWorkflowStepGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_workflow_step_group::DeleteWorkflowStepGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_workflow_step_group::DeleteWorkflowStepGroupError> for Error {
    fn from(
        err: crate::operation::delete_workflow_step_group::DeleteWorkflowStepGroupError,
    ) -> Self {
        match err {
            crate::operation::delete_workflow_step_group::DeleteWorkflowStepGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_workflow_step_group::DeleteWorkflowStepGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_workflow_step_group::DeleteWorkflowStepGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_workflow_step_group::DeleteWorkflowStepGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_workflow_step_group::DeleteWorkflowStepGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_workflow_step_group::DeleteWorkflowStepGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_template::GetTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_template::GetTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_template::GetTemplateError> for Error {
    fn from(err: crate::operation::get_template::GetTemplateError) -> Self {
        match err {
            crate::operation::get_template::GetTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_template::GetTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_template::GetTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_template::GetTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_template::GetTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_template_step::GetTemplateStepError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_template_step::GetTemplateStepError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_template_step::GetTemplateStepError> for Error {
    fn from(err: crate::operation::get_template_step::GetTemplateStepError) -> Self {
        match err {
            crate::operation::get_template_step::GetTemplateStepError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_template_step::GetTemplateStepError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_template_step::GetTemplateStepError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_template_step::GetTemplateStepError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_template_step::GetTemplateStepError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_template_step::GetTemplateStepError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_template_step_group::GetTemplateStepGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_template_step_group::GetTemplateStepGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_template_step_group::GetTemplateStepGroupError> for Error {
    fn from(err: crate::operation::get_template_step_group::GetTemplateStepGroupError) -> Self {
        match err {
            crate::operation::get_template_step_group::GetTemplateStepGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_template_step_group::GetTemplateStepGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_template_step_group::GetTemplateStepGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_template_step_group::GetTemplateStepGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_template_step_group::GetTemplateStepGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_template_step_group::GetTemplateStepGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_workflow::GetWorkflowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_workflow::GetWorkflowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_workflow::GetWorkflowError> for Error {
    fn from(err: crate::operation::get_workflow::GetWorkflowError) -> Self {
        match err {
            crate::operation::get_workflow::GetWorkflowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_workflow::GetWorkflowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_workflow_step::GetWorkflowStepError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_workflow_step::GetWorkflowStepError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_workflow_step::GetWorkflowStepError> for Error {
    fn from(err: crate::operation::get_workflow_step::GetWorkflowStepError) -> Self {
        match err {
            crate::operation::get_workflow_step::GetWorkflowStepError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_workflow_step::GetWorkflowStepError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_workflow_step::GetWorkflowStepError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_workflow_step::GetWorkflowStepError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_workflow_step::GetWorkflowStepError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_workflow_step_group::GetWorkflowStepGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_workflow_step_group::GetWorkflowStepGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_workflow_step_group::GetWorkflowStepGroupError> for Error {
    fn from(err: crate::operation::get_workflow_step_group::GetWorkflowStepGroupError) -> Self {
        match err {
            crate::operation::get_workflow_step_group::GetWorkflowStepGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_workflow_step_group::GetWorkflowStepGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_workflow_step_group::GetWorkflowStepGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_workflow_step_group::GetWorkflowStepGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_workflow_step_group::GetWorkflowStepGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_workflow_step_group::GetWorkflowStepGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_plugins::ListPluginsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_plugins::ListPluginsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_plugins::ListPluginsError> for Error {
    fn from(err: crate::operation::list_plugins::ListPluginsError) -> Self {
        match err {
            crate::operation::list_plugins::ListPluginsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_plugins::ListPluginsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_plugins::ListPluginsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_plugins::ListPluginsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_templates::ListTemplatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_templates::ListTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_templates::ListTemplatesError> for Error {
    fn from(err: crate::operation::list_templates::ListTemplatesError) -> Self {
        match err {
            crate::operation::list_templates::ListTemplatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_templates::ListTemplatesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_templates::ListTemplatesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_templates::ListTemplatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_template_step_groups::ListTemplateStepGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_template_step_groups::ListTemplateStepGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_template_step_groups::ListTemplateStepGroupsError> for Error {
    fn from(err: crate::operation::list_template_step_groups::ListTemplateStepGroupsError) -> Self {
        match err {
            crate::operation::list_template_step_groups::ListTemplateStepGroupsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_template_step_groups::ListTemplateStepGroupsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_template_step_groups::ListTemplateStepGroupsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_template_step_groups::ListTemplateStepGroupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_template_step_groups::ListTemplateStepGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_template_steps::ListTemplateStepsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_template_steps::ListTemplateStepsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_template_steps::ListTemplateStepsError> for Error {
    fn from(err: crate::operation::list_template_steps::ListTemplateStepsError) -> Self {
        match err {
            crate::operation::list_template_steps::ListTemplateStepsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_template_steps::ListTemplateStepsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_template_steps::ListTemplateStepsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_template_steps::ListTemplateStepsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_template_steps::ListTemplateStepsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_template_steps::ListTemplateStepsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_workflows::ListWorkflowsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_workflows::ListWorkflowsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_workflows::ListWorkflowsError> for Error {
    fn from(err: crate::operation::list_workflows::ListWorkflowsError) -> Self {
        match err {
            crate::operation::list_workflows::ListWorkflowsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_workflows::ListWorkflowsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_workflows::ListWorkflowsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_workflows::ListWorkflowsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_workflows::ListWorkflowsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_workflows::ListWorkflowsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_workflow_step_groups::ListWorkflowStepGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_workflow_step_groups::ListWorkflowStepGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_workflow_step_groups::ListWorkflowStepGroupsError> for Error {
    fn from(err: crate::operation::list_workflow_step_groups::ListWorkflowStepGroupsError) -> Self {
        match err {
            crate::operation::list_workflow_step_groups::ListWorkflowStepGroupsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_workflow_step_groups::ListWorkflowStepGroupsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_workflow_step_groups::ListWorkflowStepGroupsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_workflow_step_groups::ListWorkflowStepGroupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_workflow_step_groups::ListWorkflowStepGroupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_workflow_step_groups::ListWorkflowStepGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_workflow_steps::ListWorkflowStepsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_workflow_steps::ListWorkflowStepsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_workflow_steps::ListWorkflowStepsError> for Error {
    fn from(err: crate::operation::list_workflow_steps::ListWorkflowStepsError) -> Self {
        match err {
            crate::operation::list_workflow_steps::ListWorkflowStepsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_workflow_steps::ListWorkflowStepsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_workflow_steps::ListWorkflowStepsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_workflow_steps::ListWorkflowStepsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_workflow_steps::ListWorkflowStepsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::retry_workflow_step::RetryWorkflowStepError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::retry_workflow_step::RetryWorkflowStepError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::retry_workflow_step::RetryWorkflowStepError> for Error {
    fn from(err: crate::operation::retry_workflow_step::RetryWorkflowStepError) -> Self {
        match err {
            crate::operation::retry_workflow_step::RetryWorkflowStepError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::retry_workflow_step::RetryWorkflowStepError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::retry_workflow_step::RetryWorkflowStepError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::retry_workflow_step::RetryWorkflowStepError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::retry_workflow_step::RetryWorkflowStepError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::start_workflow::StartWorkflowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_workflow::StartWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_workflow::StartWorkflowError> for Error {
    fn from(err: crate::operation::start_workflow::StartWorkflowError) -> Self {
        match err {
            crate::operation::start_workflow::StartWorkflowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_workflow::StartWorkflowError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::start_workflow::StartWorkflowError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::start_workflow::StartWorkflowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_workflow::StartWorkflowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_workflow::StartWorkflowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::stop_workflow::StopWorkflowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_workflow::StopWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_workflow::StopWorkflowError> for Error {
    fn from(err: crate::operation::stop_workflow::StopWorkflowError) -> Self {
        match err {
            crate::operation::stop_workflow::StopWorkflowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::stop_workflow::StopWorkflowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::stop_workflow::StopWorkflowError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_workflow::StopWorkflowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::stop_workflow::StopWorkflowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::stop_workflow::StopWorkflowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_workflow::UpdateWorkflowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_workflow::UpdateWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_workflow::UpdateWorkflowError> for Error {
    fn from(err: crate::operation::update_workflow::UpdateWorkflowError) -> Self {
        match err {
            crate::operation::update_workflow::UpdateWorkflowError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::update_workflow::UpdateWorkflowError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_workflow::UpdateWorkflowError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_workflow::UpdateWorkflowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_workflow::UpdateWorkflowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_workflow::UpdateWorkflowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_workflow_step::UpdateWorkflowStepError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_workflow_step::UpdateWorkflowStepError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_workflow_step::UpdateWorkflowStepError> for Error {
    fn from(err: crate::operation::update_workflow_step::UpdateWorkflowStepError) -> Self {
        match err {
            crate::operation::update_workflow_step::UpdateWorkflowStepError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_workflow_step::UpdateWorkflowStepError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_workflow_step::UpdateWorkflowStepError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_workflow_step::UpdateWorkflowStepError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_workflow_step::UpdateWorkflowStepError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_workflow_step_group::UpdateWorkflowStepGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_workflow_step_group::UpdateWorkflowStepGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_workflow_step_group::UpdateWorkflowStepGroupError> for Error {
    fn from(
        err: crate::operation::update_workflow_step_group::UpdateWorkflowStepGroupError,
    ) -> Self {
        match err {
            crate::operation::update_workflow_step_group::UpdateWorkflowStepGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_workflow_step_group::UpdateWorkflowStepGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_workflow_step_group::UpdateWorkflowStepGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_workflow_step_group::UpdateWorkflowStepGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_workflow_step_group::UpdateWorkflowStepGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_workflow_step_group::UpdateWorkflowStepGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
