// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorkflowStepGroupInput {
    /// <p>The ID of the migration workflow that will contain the step group.</p>
    #[doc(hidden)]
    pub workflow_id: std::option::Option<std::string::String>,
    /// <p>The name of the step group.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the step group.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The next step group.</p>
    #[doc(hidden)]
    pub next: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The previous step group.</p>
    #[doc(hidden)]
    pub previous: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CreateWorkflowStepGroupInput {
    /// <p>The ID of the migration workflow that will contain the step group.</p>
    pub fn workflow_id(&self) -> std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The name of the step group.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the step group.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The next step group.</p>
    pub fn next(&self) -> std::option::Option<&[std::string::String]> {
        self.next.as_deref()
    }
    /// <p>The previous step group.</p>
    pub fn previous(&self) -> std::option::Option<&[std::string::String]> {
        self.previous.as_deref()
    }
}
impl CreateWorkflowStepGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateWorkflowStepGroupInput`](crate::operation::create_workflow_step_group::CreateWorkflowStepGroupInput).
    pub fn builder(
    ) -> crate::operation::create_workflow_step_group::builders::CreateWorkflowStepGroupInputBuilder
    {
        crate::operation::create_workflow_step_group::builders::CreateWorkflowStepGroupInputBuilder::default()
    }
}

/// A builder for [`CreateWorkflowStepGroupInput`](crate::operation::create_workflow_step_group::CreateWorkflowStepGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateWorkflowStepGroupInputBuilder {
    pub(crate) workflow_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) next: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) previous: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CreateWorkflowStepGroupInputBuilder {
    /// <p>The ID of the migration workflow that will contain the step group.</p>
    pub fn workflow_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workflow_id = Some(input.into());
        self
    }
    /// <p>The ID of the migration workflow that will contain the step group.</p>
    pub fn set_workflow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The name of the step group.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the step group.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the step group.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the step group.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `next`.
    ///
    /// To override the contents of this collection use [`set_next`](Self::set_next).
    ///
    /// <p>The next step group.</p>
    pub fn next(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.next.unwrap_or_default();
        v.push(input.into());
        self.next = Some(v);
        self
    }
    /// <p>The next step group.</p>
    pub fn set_next(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.next = input;
        self
    }
    /// Appends an item to `previous`.
    ///
    /// To override the contents of this collection use [`set_previous`](Self::set_previous).
    ///
    /// <p>The previous step group.</p>
    pub fn previous(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.previous.unwrap_or_default();
        v.push(input.into());
        self.previous = Some(v);
        self
    }
    /// <p>The previous step group.</p>
    pub fn set_previous(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.previous = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateWorkflowStepGroupInput`](crate::operation::create_workflow_step_group::CreateWorkflowStepGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_workflow_step_group::CreateWorkflowStepGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_workflow_step_group::CreateWorkflowStepGroupInput {
                workflow_id: self.workflow_id,
                name: self.name,
                description: self.description,
                next: self.next,
                previous: self.previous,
            },
        )
    }
}
