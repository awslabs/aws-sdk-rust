// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateWorkflowStepInput {
    /// <p>The name of the step.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the step group.</p>
    pub step_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the migration workflow.</p>
    pub workflow_id: ::std::option::Option<::std::string::String>,
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub step_action_type: ::std::option::Option<crate::types::StepActionType>,
    /// <p>The description of the step.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The custom script to run tests on source or target environments.</p>
    pub workflow_step_automation_configuration: ::std::option::Option<crate::types::WorkflowStepAutomationConfiguration>,
    /// <p>The servers on which a step will be run.</p>
    pub step_target: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The key value pairs added for the expected output.</p>
    pub outputs: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowStepOutput>>,
    /// <p>The previous step.</p>
    pub previous: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The next step.</p>
    pub next: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateWorkflowStepInput {
    /// <p>The name of the step.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the step group.</p>
    pub fn step_group_id(&self) -> ::std::option::Option<&str> {
        self.step_group_id.as_deref()
    }
    /// <p>The ID of the migration workflow.</p>
    pub fn workflow_id(&self) -> ::std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn step_action_type(&self) -> ::std::option::Option<&crate::types::StepActionType> {
        self.step_action_type.as_ref()
    }
    /// <p>The description of the step.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The custom script to run tests on source or target environments.</p>
    pub fn workflow_step_automation_configuration(&self) -> ::std::option::Option<&crate::types::WorkflowStepAutomationConfiguration> {
        self.workflow_step_automation_configuration.as_ref()
    }
    /// <p>The servers on which a step will be run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.step_target.is_none()`.
    pub fn step_target(&self) -> &[::std::string::String] {
        self.step_target.as_deref().unwrap_or_default()
    }
    /// <p>The key value pairs added for the expected output.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.outputs.is_none()`.
    pub fn outputs(&self) -> &[crate::types::WorkflowStepOutput] {
        self.outputs.as_deref().unwrap_or_default()
    }
    /// <p>The previous step.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.previous.is_none()`.
    pub fn previous(&self) -> &[::std::string::String] {
        self.previous.as_deref().unwrap_or_default()
    }
    /// <p>The next step.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.next.is_none()`.
    pub fn next(&self) -> &[::std::string::String] {
        self.next.as_deref().unwrap_or_default()
    }
}
impl CreateWorkflowStepInput {
    /// Creates a new builder-style object to manufacture [`CreateWorkflowStepInput`](crate::operation::create_workflow_step::CreateWorkflowStepInput).
    pub fn builder() -> crate::operation::create_workflow_step::builders::CreateWorkflowStepInputBuilder {
        crate::operation::create_workflow_step::builders::CreateWorkflowStepInputBuilder::default()
    }
}

/// A builder for [`CreateWorkflowStepInput`](crate::operation::create_workflow_step::CreateWorkflowStepInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateWorkflowStepInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) step_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) step_action_type: ::std::option::Option<crate::types::StepActionType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_step_automation_configuration: ::std::option::Option<crate::types::WorkflowStepAutomationConfiguration>,
    pub(crate) step_target: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) outputs: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowStepOutput>>,
    pub(crate) previous: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateWorkflowStepInputBuilder {
    /// <p>The name of the step.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the step.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the step.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ID of the step group.</p>
    /// This field is required.
    pub fn step_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the step group.</p>
    pub fn set_step_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_group_id = input;
        self
    }
    /// <p>The ID of the step group.</p>
    pub fn get_step_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_group_id
    }
    /// <p>The ID of the migration workflow.</p>
    /// This field is required.
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the migration workflow.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The ID of the migration workflow.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    /// This field is required.
    pub fn step_action_type(mut self, input: crate::types::StepActionType) -> Self {
        self.step_action_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn set_step_action_type(mut self, input: ::std::option::Option<crate::types::StepActionType>) -> Self {
        self.step_action_type = input;
        self
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn get_step_action_type(&self) -> &::std::option::Option<crate::types::StepActionType> {
        &self.step_action_type
    }
    /// <p>The description of the step.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the step.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the step.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The custom script to run tests on source or target environments.</p>
    pub fn workflow_step_automation_configuration(mut self, input: crate::types::WorkflowStepAutomationConfiguration) -> Self {
        self.workflow_step_automation_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The custom script to run tests on source or target environments.</p>
    pub fn set_workflow_step_automation_configuration(
        mut self,
        input: ::std::option::Option<crate::types::WorkflowStepAutomationConfiguration>,
    ) -> Self {
        self.workflow_step_automation_configuration = input;
        self
    }
    /// <p>The custom script to run tests on source or target environments.</p>
    pub fn get_workflow_step_automation_configuration(&self) -> &::std::option::Option<crate::types::WorkflowStepAutomationConfiguration> {
        &self.workflow_step_automation_configuration
    }
    /// Appends an item to `step_target`.
    ///
    /// To override the contents of this collection use [`set_step_target`](Self::set_step_target).
    ///
    /// <p>The servers on which a step will be run.</p>
    pub fn step_target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.step_target.unwrap_or_default();
        v.push(input.into());
        self.step_target = ::std::option::Option::Some(v);
        self
    }
    /// <p>The servers on which a step will be run.</p>
    pub fn set_step_target(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.step_target = input;
        self
    }
    /// <p>The servers on which a step will be run.</p>
    pub fn get_step_target(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.step_target
    }
    /// Appends an item to `outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// <p>The key value pairs added for the expected output.</p>
    pub fn outputs(mut self, input: crate::types::WorkflowStepOutput) -> Self {
        let mut v = self.outputs.unwrap_or_default();
        v.push(input);
        self.outputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The key value pairs added for the expected output.</p>
    pub fn set_outputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowStepOutput>>) -> Self {
        self.outputs = input;
        self
    }
    /// <p>The key value pairs added for the expected output.</p>
    pub fn get_outputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkflowStepOutput>> {
        &self.outputs
    }
    /// Appends an item to `previous`.
    ///
    /// To override the contents of this collection use [`set_previous`](Self::set_previous).
    ///
    /// <p>The previous step.</p>
    pub fn previous(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.previous.unwrap_or_default();
        v.push(input.into());
        self.previous = ::std::option::Option::Some(v);
        self
    }
    /// <p>The previous step.</p>
    pub fn set_previous(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.previous = input;
        self
    }
    /// <p>The previous step.</p>
    pub fn get_previous(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.previous
    }
    /// Appends an item to `next`.
    ///
    /// To override the contents of this collection use [`set_next`](Self::set_next).
    ///
    /// <p>The next step.</p>
    pub fn next(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.next.unwrap_or_default();
        v.push(input.into());
        self.next = ::std::option::Option::Some(v);
        self
    }
    /// <p>The next step.</p>
    pub fn set_next(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.next = input;
        self
    }
    /// <p>The next step.</p>
    pub fn get_next(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.next
    }
    /// Consumes the builder and constructs a [`CreateWorkflowStepInput`](crate::operation::create_workflow_step::CreateWorkflowStepInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_workflow_step::CreateWorkflowStepInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_workflow_step::CreateWorkflowStepInput {
            name: self.name,
            step_group_id: self.step_group_id,
            workflow_id: self.workflow_id,
            step_action_type: self.step_action_type,
            description: self.description,
            workflow_step_automation_configuration: self.workflow_step_automation_configuration,
            step_target: self.step_target,
            outputs: self.outputs,
            previous: self.previous,
            next: self.next,
        })
    }
}
