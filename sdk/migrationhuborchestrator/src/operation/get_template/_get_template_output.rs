// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTemplateOutput {
    /// <p>The ID of the template.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the template.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the template was last created.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The inputs provided for the creation of the migration workflow.</p>
    pub inputs: ::std::option::Option<::std::vec::Vec<crate::types::TemplateInput>>,
    /// <p>List of AWS services utilized in a migration workflow.</p>
    pub tools: ::std::option::Option<::std::vec::Vec<crate::types::Tool>>,
    /// <p>The status of the template.</p>
    pub status: ::std::option::Option<crate::types::TemplateStatus>,
    /// <p>The time at which the template was last created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetTemplateOutput {
    /// <p>The ID of the template.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the template.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The time at which the template was last created.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The inputs provided for the creation of the migration workflow.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inputs.is_none()`.
    pub fn inputs(&self) -> &[crate::types::TemplateInput] {
        self.inputs.as_deref().unwrap_or_default()
    }
    /// <p>List of AWS services utilized in a migration workflow.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tools.is_none()`.
    pub fn tools(&self) -> &[crate::types::Tool] {
        self.tools.as_deref().unwrap_or_default()
    }
    /// <p>The status of the template.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TemplateStatus> {
        self.status.as_ref()
    }
    /// <p>The time at which the template was last created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetTemplateOutput`](crate::operation::get_template::GetTemplateOutput).
    pub fn builder() -> crate::operation::get_template::builders::GetTemplateOutputBuilder {
        crate::operation::get_template::builders::GetTemplateOutputBuilder::default()
    }
}

/// A builder for [`GetTemplateOutput`](crate::operation::get_template::GetTemplateOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetTemplateOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) inputs: ::std::option::Option<::std::vec::Vec<crate::types::TemplateInput>>,
    pub(crate) tools: ::std::option::Option<::std::vec::Vec<crate::types::Tool>>,
    pub(crate) status: ::std::option::Option<crate::types::TemplateStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetTemplateOutputBuilder {
    /// <p>The ID of the template.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the template.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the template.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the template.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The time at which the template was last created.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time at which the template was last created.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The time at which the template was last created.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>The inputs provided for the creation of the migration workflow.</p>
    pub fn inputs(mut self, input: crate::types::TemplateInput) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input);
        self.inputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The inputs provided for the creation of the migration workflow.</p>
    pub fn set_inputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TemplateInput>>) -> Self {
        self.inputs = input;
        self
    }
    /// <p>The inputs provided for the creation of the migration workflow.</p>
    pub fn get_inputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TemplateInput>> {
        &self.inputs
    }
    /// Appends an item to `tools`.
    ///
    /// To override the contents of this collection use [`set_tools`](Self::set_tools).
    ///
    /// <p>List of AWS services utilized in a migration workflow.</p>
    pub fn tools(mut self, input: crate::types::Tool) -> Self {
        let mut v = self.tools.unwrap_or_default();
        v.push(input);
        self.tools = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of AWS services utilized in a migration workflow.</p>
    pub fn set_tools(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tool>>) -> Self {
        self.tools = input;
        self
    }
    /// <p>List of AWS services utilized in a migration workflow.</p>
    pub fn get_tools(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tool>> {
        &self.tools
    }
    /// <p>The status of the template.</p>
    pub fn status(mut self, input: crate::types::TemplateStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the template.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TemplateStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the template.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TemplateStatus> {
        &self.status
    }
    /// <p>The time at which the template was last created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the template was last created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time at which the template was last created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTemplateOutput`](crate::operation::get_template::GetTemplateOutput).
    pub fn build(self) -> crate::operation::get_template::GetTemplateOutput {
        crate::operation::get_template::GetTemplateOutput {
            id: self.id,
            name: self.name,
            description: self.description,
            inputs: self.inputs,
            tools: self.tools,
            status: self.status,
            creation_time: self.creation_time,
            _request_id: self._request_id,
        }
    }
}
