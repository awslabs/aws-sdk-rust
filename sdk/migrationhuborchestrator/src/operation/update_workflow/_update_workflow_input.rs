// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateWorkflowInput {
    /// <p>The ID of the migration workflow.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the migration workflow.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the migration workflow.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The input parameters required to update a migration workflow.</p>
    pub input_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::StepInput>>,
    /// <p>The servers on which a step will be run.</p>
    pub step_targets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateWorkflowInput {
    /// <p>The ID of the migration workflow.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the migration workflow.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the migration workflow.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The input parameters required to update a migration workflow.</p>
    pub fn input_parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::StepInput>> {
        self.input_parameters.as_ref()
    }
    /// <p>The servers on which a step will be run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.step_targets.is_none()`.
    pub fn step_targets(&self) -> &[::std::string::String] {
        self.step_targets.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for UpdateWorkflowInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateWorkflowInput");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("input_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("step_targets", &self.step_targets);
        formatter.finish()
    }
}
impl UpdateWorkflowInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkflowInput`](crate::operation::update_workflow::UpdateWorkflowInput).
    pub fn builder() -> crate::operation::update_workflow::builders::UpdateWorkflowInputBuilder {
        crate::operation::update_workflow::builders::UpdateWorkflowInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkflowInput`](crate::operation::update_workflow::UpdateWorkflowInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateWorkflowInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) input_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::StepInput>>,
    pub(crate) step_targets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateWorkflowInputBuilder {
    /// <p>The ID of the migration workflow.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the migration workflow.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the migration workflow.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the migration workflow.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the migration workflow.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the migration workflow.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the migration workflow.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the migration workflow.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the migration workflow.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `input_parameters`.
    ///
    /// To override the contents of this collection use [`set_input_parameters`](Self::set_input_parameters).
    ///
    /// <p>The input parameters required to update a migration workflow.</p>
    pub fn input_parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::StepInput) -> Self {
        let mut hash_map = self.input_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.input_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The input parameters required to update a migration workflow.</p>
    pub fn set_input_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::StepInput>>,
    ) -> Self {
        self.input_parameters = input;
        self
    }
    /// <p>The input parameters required to update a migration workflow.</p>
    pub fn get_input_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::StepInput>> {
        &self.input_parameters
    }
    /// Appends an item to `step_targets`.
    ///
    /// To override the contents of this collection use [`set_step_targets`](Self::set_step_targets).
    ///
    /// <p>The servers on which a step will be run.</p>
    pub fn step_targets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.step_targets.unwrap_or_default();
        v.push(input.into());
        self.step_targets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The servers on which a step will be run.</p>
    pub fn set_step_targets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.step_targets = input;
        self
    }
    /// <p>The servers on which a step will be run.</p>
    pub fn get_step_targets(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.step_targets
    }
    /// Consumes the builder and constructs a [`UpdateWorkflowInput`](crate::operation::update_workflow::UpdateWorkflowInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_workflow::UpdateWorkflowInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_workflow::UpdateWorkflowInput {
            id: self.id,
            name: self.name,
            description: self.description,
            input_parameters: self.input_parameters,
            step_targets: self.step_targets,
        })
    }
}
impl ::std::fmt::Debug for UpdateWorkflowInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateWorkflowInputBuilder");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("input_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("step_targets", &self.step_targets);
        formatter.finish()
    }
}
