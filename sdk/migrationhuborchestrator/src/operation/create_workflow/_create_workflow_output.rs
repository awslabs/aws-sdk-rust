// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateWorkflowOutput {
    /// <p>The ID of the migration workflow.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the migration workflow.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the migration workflow.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the migration workflow.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ID of the template.</p>
    #[doc(hidden)]
    pub template_id: std::option::Option<std::string::String>,
    /// <p>The configuration ID of the application configured in Application Discovery Service.</p>
    #[doc(hidden)]
    pub ads_application_configuration_id: std::option::Option<std::string::String>,
    /// <p>The inputs for creating a migration workflow.</p>
    #[doc(hidden)]
    pub workflow_inputs: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::StepInput>,
    >,
    /// <p>The servers on which a step will be run.</p>
    #[doc(hidden)]
    pub step_targets: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The status of the migration workflow.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::MigrationWorkflowStatusEnum>,
    /// <p>The time at which the migration workflow was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The tags to add on a migration workflow.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateWorkflowOutput {
    /// <p>The ID of the migration workflow.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the migration workflow.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the migration workflow.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the migration workflow.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of the template.</p>
    pub fn template_id(&self) -> std::option::Option<&str> {
        self.template_id.as_deref()
    }
    /// <p>The configuration ID of the application configured in Application Discovery Service.</p>
    pub fn ads_application_configuration_id(&self) -> std::option::Option<&str> {
        self.ads_application_configuration_id.as_deref()
    }
    /// <p>The inputs for creating a migration workflow.</p>
    pub fn workflow_inputs(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, crate::types::StepInput>>
    {
        self.workflow_inputs.as_ref()
    }
    /// <p>The servers on which a step will be run.</p>
    pub fn step_targets(&self) -> std::option::Option<&[std::string::String]> {
        self.step_targets.as_deref()
    }
    /// <p>The status of the migration workflow.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::MigrationWorkflowStatusEnum> {
        self.status.as_ref()
    }
    /// <p>The time at which the migration workflow was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The tags to add on a migration workflow.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for CreateWorkflowOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWorkflowOutput");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("template_id", &self.template_id);
        formatter.field(
            "ads_application_configuration_id",
            &self.ads_application_configuration_id,
        );
        formatter.field("workflow_inputs", &"*** Sensitive Data Redacted ***");
        formatter.field("step_targets", &self.step_targets);
        formatter.field("status", &self.status);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("tags", &self.tags);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for CreateWorkflowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWorkflowOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkflowOutput`](crate::operation::create_workflow::CreateWorkflowOutput).
    pub fn builder() -> crate::operation::create_workflow::builders::CreateWorkflowOutputBuilder {
        crate::operation::create_workflow::builders::CreateWorkflowOutputBuilder::default()
    }
}

/// A builder for [`CreateWorkflowOutput`](crate::operation::create_workflow::CreateWorkflowOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateWorkflowOutputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) template_id: std::option::Option<std::string::String>,
    pub(crate) ads_application_configuration_id: std::option::Option<std::string::String>,
    pub(crate) workflow_inputs: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::StepInput>,
    >,
    pub(crate) step_targets: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) status: std::option::Option<crate::types::MigrationWorkflowStatusEnum>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateWorkflowOutputBuilder {
    /// <p>The ID of the migration workflow.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the migration workflow.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the migration workflow.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the migration workflow.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the migration workflow.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the migration workflow.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the migration workflow.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the migration workflow.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The ID of the template.</p>
    pub fn template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_id = Some(input.into());
        self
    }
    /// <p>The ID of the template.</p>
    pub fn set_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_id = input;
        self
    }
    /// <p>The configuration ID of the application configured in Application Discovery Service.</p>
    pub fn ads_application_configuration_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.ads_application_configuration_id = Some(input.into());
        self
    }
    /// <p>The configuration ID of the application configured in Application Discovery Service.</p>
    pub fn set_ads_application_configuration_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ads_application_configuration_id = input;
        self
    }
    /// Adds a key-value pair to `workflow_inputs`.
    ///
    /// To override the contents of this collection use [`set_workflow_inputs`](Self::set_workflow_inputs).
    ///
    /// <p>The inputs for creating a migration workflow.</p>
    pub fn workflow_inputs(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::StepInput,
    ) -> Self {
        let mut hash_map = self.workflow_inputs.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.workflow_inputs = Some(hash_map);
        self
    }
    /// <p>The inputs for creating a migration workflow.</p>
    pub fn set_workflow_inputs(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::StepInput>,
        >,
    ) -> Self {
        self.workflow_inputs = input;
        self
    }
    /// Appends an item to `step_targets`.
    ///
    /// To override the contents of this collection use [`set_step_targets`](Self::set_step_targets).
    ///
    /// <p>The servers on which a step will be run.</p>
    pub fn step_targets(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.step_targets.unwrap_or_default();
        v.push(input.into());
        self.step_targets = Some(v);
        self
    }
    /// <p>The servers on which a step will be run.</p>
    pub fn set_step_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.step_targets = input;
        self
    }
    /// <p>The status of the migration workflow.</p>
    pub fn status(mut self, input: crate::types::MigrationWorkflowStatusEnum) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the migration workflow.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::MigrationWorkflowStatusEnum>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The time at which the migration workflow was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time at which the migration workflow was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to add on a migration workflow.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags to add on a migration workflow.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateWorkflowOutput`](crate::operation::create_workflow::CreateWorkflowOutput).
    pub fn build(self) -> crate::operation::create_workflow::CreateWorkflowOutput {
        crate::operation::create_workflow::CreateWorkflowOutput {
            id: self.id,
            arn: self.arn,
            name: self.name,
            description: self.description,
            template_id: self.template_id,
            ads_application_configuration_id: self.ads_application_configuration_id,
            workflow_inputs: self.workflow_inputs,
            step_targets: self.step_targets,
            status: self.status,
            creation_time: self.creation_time,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for CreateWorkflowOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWorkflowOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("template_id", &self.template_id);
        formatter.field(
            "ads_application_configuration_id",
            &self.ads_application_configuration_id,
        );
        formatter.field("workflow_inputs", &"*** Sensitive Data Redacted ***");
        formatter.field("step_targets", &self.step_targets);
        formatter.field("status", &self.status);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("tags", &self.tags);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
