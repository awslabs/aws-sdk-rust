// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkflowStepInput {
    /// <p>The ID of the step.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The ID of the step group.</p>
    #[doc(hidden)]
    pub step_group_id: std::option::Option<std::string::String>,
    /// <p>The ID of the migration workflow.</p>
    #[doc(hidden)]
    pub workflow_id: std::option::Option<std::string::String>,
    /// <p>The name of the step.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the step.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    #[doc(hidden)]
    pub step_action_type: std::option::Option<crate::types::StepActionType>,
    /// <p>The custom script to run tests on the source and target environments.</p>
    #[doc(hidden)]
    pub workflow_step_automation_configuration:
        std::option::Option<crate::types::WorkflowStepAutomationConfiguration>,
    /// <p>The servers on which a step will be run.</p>
    #[doc(hidden)]
    pub step_target: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The outputs of a step.</p>
    #[doc(hidden)]
    pub outputs: std::option::Option<std::vec::Vec<crate::types::WorkflowStepOutput>>,
    /// <p>The previous step.</p>
    #[doc(hidden)]
    pub previous: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The next step.</p>
    #[doc(hidden)]
    pub next: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The status of the step.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::StepStatus>,
}
impl UpdateWorkflowStepInput {
    /// <p>The ID of the step.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the step group.</p>
    pub fn step_group_id(&self) -> std::option::Option<&str> {
        self.step_group_id.as_deref()
    }
    /// <p>The ID of the migration workflow.</p>
    pub fn workflow_id(&self) -> std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The name of the step.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the step.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn step_action_type(&self) -> std::option::Option<&crate::types::StepActionType> {
        self.step_action_type.as_ref()
    }
    /// <p>The custom script to run tests on the source and target environments.</p>
    pub fn workflow_step_automation_configuration(
        &self,
    ) -> std::option::Option<&crate::types::WorkflowStepAutomationConfiguration> {
        self.workflow_step_automation_configuration.as_ref()
    }
    /// <p>The servers on which a step will be run.</p>
    pub fn step_target(&self) -> std::option::Option<&[std::string::String]> {
        self.step_target.as_deref()
    }
    /// <p>The outputs of a step.</p>
    pub fn outputs(&self) -> std::option::Option<&[crate::types::WorkflowStepOutput]> {
        self.outputs.as_deref()
    }
    /// <p>The previous step.</p>
    pub fn previous(&self) -> std::option::Option<&[std::string::String]> {
        self.previous.as_deref()
    }
    /// <p>The next step.</p>
    pub fn next(&self) -> std::option::Option<&[std::string::String]> {
        self.next.as_deref()
    }
    /// <p>The status of the step.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::StepStatus> {
        self.status.as_ref()
    }
}
impl UpdateWorkflowStepInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkflowStepInput`](crate::operation::update_workflow_step::UpdateWorkflowStepInput).
    pub fn builder(
    ) -> crate::operation::update_workflow_step::builders::UpdateWorkflowStepInputBuilder {
        crate::operation::update_workflow_step::builders::UpdateWorkflowStepInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkflowStepInput`](crate::operation::update_workflow_step::UpdateWorkflowStepInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateWorkflowStepInputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) step_group_id: std::option::Option<std::string::String>,
    pub(crate) workflow_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) step_action_type: std::option::Option<crate::types::StepActionType>,
    pub(crate) workflow_step_automation_configuration:
        std::option::Option<crate::types::WorkflowStepAutomationConfiguration>,
    pub(crate) step_target: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) outputs: std::option::Option<std::vec::Vec<crate::types::WorkflowStepOutput>>,
    pub(crate) previous: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) status: std::option::Option<crate::types::StepStatus>,
}
impl UpdateWorkflowStepInputBuilder {
    /// <p>The ID of the step.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the step.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the step group.</p>
    pub fn step_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.step_group_id = Some(input.into());
        self
    }
    /// <p>The ID of the step group.</p>
    pub fn set_step_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.step_group_id = input;
        self
    }
    /// <p>The ID of the migration workflow.</p>
    pub fn workflow_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workflow_id = Some(input.into());
        self
    }
    /// <p>The ID of the migration workflow.</p>
    pub fn set_workflow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The name of the step.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the step.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the step.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the step.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn step_action_type(mut self, input: crate::types::StepActionType) -> Self {
        self.step_action_type = Some(input);
        self
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn set_step_action_type(
        mut self,
        input: std::option::Option<crate::types::StepActionType>,
    ) -> Self {
        self.step_action_type = input;
        self
    }
    /// <p>The custom script to run tests on the source and target environments.</p>
    pub fn workflow_step_automation_configuration(
        mut self,
        input: crate::types::WorkflowStepAutomationConfiguration,
    ) -> Self {
        self.workflow_step_automation_configuration = Some(input);
        self
    }
    /// <p>The custom script to run tests on the source and target environments.</p>
    pub fn set_workflow_step_automation_configuration(
        mut self,
        input: std::option::Option<crate::types::WorkflowStepAutomationConfiguration>,
    ) -> Self {
        self.workflow_step_automation_configuration = input;
        self
    }
    /// Appends an item to `step_target`.
    ///
    /// To override the contents of this collection use [`set_step_target`](Self::set_step_target).
    ///
    /// <p>The servers on which a step will be run.</p>
    pub fn step_target(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.step_target.unwrap_or_default();
        v.push(input.into());
        self.step_target = Some(v);
        self
    }
    /// <p>The servers on which a step will be run.</p>
    pub fn set_step_target(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.step_target = input;
        self
    }
    /// Appends an item to `outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// <p>The outputs of a step.</p>
    pub fn outputs(mut self, input: crate::types::WorkflowStepOutput) -> Self {
        let mut v = self.outputs.unwrap_or_default();
        v.push(input);
        self.outputs = Some(v);
        self
    }
    /// <p>The outputs of a step.</p>
    pub fn set_outputs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::WorkflowStepOutput>>,
    ) -> Self {
        self.outputs = input;
        self
    }
    /// Appends an item to `previous`.
    ///
    /// To override the contents of this collection use [`set_previous`](Self::set_previous).
    ///
    /// <p>The previous step.</p>
    pub fn previous(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.previous.unwrap_or_default();
        v.push(input.into());
        self.previous = Some(v);
        self
    }
    /// <p>The previous step.</p>
    pub fn set_previous(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.previous = input;
        self
    }
    /// Appends an item to `next`.
    ///
    /// To override the contents of this collection use [`set_next`](Self::set_next).
    ///
    /// <p>The next step.</p>
    pub fn next(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.next.unwrap_or_default();
        v.push(input.into());
        self.next = Some(v);
        self
    }
    /// <p>The next step.</p>
    pub fn set_next(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.next = input;
        self
    }
    /// <p>The status of the step.</p>
    pub fn status(mut self, input: crate::types::StepStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the step.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::StepStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateWorkflowStepInput`](crate::operation::update_workflow_step::UpdateWorkflowStepInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_workflow_step::UpdateWorkflowStepInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_workflow_step::UpdateWorkflowStepInput {
                id: self.id,
                step_group_id: self.step_group_id,
                workflow_id: self.workflow_id,
                name: self.name,
                description: self.description,
                step_action_type: self.step_action_type,
                workflow_step_automation_configuration: self.workflow_step_automation_configuration,
                step_target: self.step_target,
                outputs: self.outputs,
                previous: self.previous,
                next: self.next,
                status: self.status,
            },
        )
    }
}
