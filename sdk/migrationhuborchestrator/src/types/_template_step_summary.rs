// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the step.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TemplateStepSummary {
    /// <p>The ID of the step.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the step group.</p>
    pub step_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the template.</p>
    pub template_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the step.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub step_action_type: ::std::option::Option<crate::types::StepActionType>,
    /// <p>The servers on which to run the script.</p>
    pub target_type: ::std::option::Option<crate::types::TargetType>,
    /// <p>The owner of the step.</p>
    pub owner: ::std::option::Option<crate::types::Owner>,
    /// <p>The previous step.</p>
    pub previous: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The next step.</p>
    pub next: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl TemplateStepSummary {
    /// <p>The ID of the step.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the step group.</p>
    pub fn step_group_id(&self) -> ::std::option::Option<&str> {
        self.step_group_id.as_deref()
    }
    /// <p>The ID of the template.</p>
    pub fn template_id(&self) -> ::std::option::Option<&str> {
        self.template_id.as_deref()
    }
    /// <p>The name of the step.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn step_action_type(&self) -> ::std::option::Option<&crate::types::StepActionType> {
        self.step_action_type.as_ref()
    }
    /// <p>The servers on which to run the script.</p>
    pub fn target_type(&self) -> ::std::option::Option<&crate::types::TargetType> {
        self.target_type.as_ref()
    }
    /// <p>The owner of the step.</p>
    pub fn owner(&self) -> ::std::option::Option<&crate::types::Owner> {
        self.owner.as_ref()
    }
    /// <p>The previous step.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.previous.is_none()`.
    pub fn previous(&self) -> &[::std::string::String] {
        self.previous.as_deref().unwrap_or_default()
    }
    /// <p>The next step.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.next.is_none()`.
    pub fn next(&self) -> &[::std::string::String] {
        self.next.as_deref().unwrap_or_default()
    }
}
impl TemplateStepSummary {
    /// Creates a new builder-style object to manufacture [`TemplateStepSummary`](crate::types::TemplateStepSummary).
    pub fn builder() -> crate::types::builders::TemplateStepSummaryBuilder {
        crate::types::builders::TemplateStepSummaryBuilder::default()
    }
}

/// A builder for [`TemplateStepSummary`](crate::types::TemplateStepSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TemplateStepSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) step_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) template_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) step_action_type: ::std::option::Option<crate::types::StepActionType>,
    pub(crate) target_type: ::std::option::Option<crate::types::TargetType>,
    pub(crate) owner: ::std::option::Option<crate::types::Owner>,
    pub(crate) previous: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl TemplateStepSummaryBuilder {
    /// <p>The ID of the step.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the step.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the step.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ID of the step group.</p>
    pub fn step_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the step group.</p>
    pub fn set_step_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_group_id = input;
        self
    }
    /// <p>The ID of the step group.</p>
    pub fn get_step_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_group_id
    }
    /// <p>The ID of the template.</p>
    pub fn template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the template.</p>
    pub fn set_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_id = input;
        self
    }
    /// <p>The ID of the template.</p>
    pub fn get_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_id
    }
    /// <p>The name of the step.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the step.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the step.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn step_action_type(mut self, input: crate::types::StepActionType) -> Self {
        self.step_action_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn set_step_action_type(mut self, input: ::std::option::Option<crate::types::StepActionType>) -> Self {
        self.step_action_type = input;
        self
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn get_step_action_type(&self) -> &::std::option::Option<crate::types::StepActionType> {
        &self.step_action_type
    }
    /// <p>The servers on which to run the script.</p>
    pub fn target_type(mut self, input: crate::types::TargetType) -> Self {
        self.target_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The servers on which to run the script.</p>
    pub fn set_target_type(mut self, input: ::std::option::Option<crate::types::TargetType>) -> Self {
        self.target_type = input;
        self
    }
    /// <p>The servers on which to run the script.</p>
    pub fn get_target_type(&self) -> &::std::option::Option<crate::types::TargetType> {
        &self.target_type
    }
    /// <p>The owner of the step.</p>
    pub fn owner(mut self, input: crate::types::Owner) -> Self {
        self.owner = ::std::option::Option::Some(input);
        self
    }
    /// <p>The owner of the step.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<crate::types::Owner>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The owner of the step.</p>
    pub fn get_owner(&self) -> &::std::option::Option<crate::types::Owner> {
        &self.owner
    }
    /// Appends an item to `previous`.
    ///
    /// To override the contents of this collection use [`set_previous`](Self::set_previous).
    ///
    /// <p>The previous step.</p>
    pub fn previous(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.previous.unwrap_or_default();
        v.push(input.into());
        self.previous = ::std::option::Option::Some(v);
        self
    }
    /// <p>The previous step.</p>
    pub fn set_previous(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.previous = input;
        self
    }
    /// <p>The previous step.</p>
    pub fn get_previous(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.previous
    }
    /// Appends an item to `next`.
    ///
    /// To override the contents of this collection use [`set_next`](Self::set_next).
    ///
    /// <p>The next step.</p>
    pub fn next(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.next.unwrap_or_default();
        v.push(input.into());
        self.next = ::std::option::Option::Some(v);
        self
    }
    /// <p>The next step.</p>
    pub fn set_next(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.next = input;
        self
    }
    /// <p>The next step.</p>
    pub fn get_next(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.next
    }
    /// Consumes the builder and constructs a [`TemplateStepSummary`](crate::types::TemplateStepSummary).
    pub fn build(self) -> crate::types::TemplateStepSummary {
        crate::types::TemplateStepSummary {
            id: self.id,
            step_group_id: self.step_group_id,
            template_id: self.template_id,
            name: self.name,
            step_action_type: self.step_action_type,
            target_type: self.target_type,
            owner: self.owner,
            previous: self.previous,
            next: self.next,
        }
    }
}
