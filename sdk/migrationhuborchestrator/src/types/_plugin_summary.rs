// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the Migration Hub Orchestrator plugin.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PluginSummary {
    /// <p>The ID of the plugin.</p>
    #[doc(hidden)]
    pub plugin_id: std::option::Option<std::string::String>,
    /// <p>The name of the host.</p>
    #[doc(hidden)]
    pub hostname: std::option::Option<std::string::String>,
    /// <p>The status of the plugin.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::PluginHealth>,
    /// <p>The IP address at which the plugin is located.</p>
    #[doc(hidden)]
    pub ip_address: std::option::Option<std::string::String>,
    /// <p>The version of the plugin.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>The time at which the plugin was registered.</p>
    #[doc(hidden)]
    pub registered_time: std::option::Option<std::string::String>,
}
impl PluginSummary {
    /// <p>The ID of the plugin.</p>
    pub fn plugin_id(&self) -> std::option::Option<&str> {
        self.plugin_id.as_deref()
    }
    /// <p>The name of the host.</p>
    pub fn hostname(&self) -> std::option::Option<&str> {
        self.hostname.as_deref()
    }
    /// <p>The status of the plugin.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::PluginHealth> {
        self.status.as_ref()
    }
    /// <p>The IP address at which the plugin is located.</p>
    pub fn ip_address(&self) -> std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The version of the plugin.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The time at which the plugin was registered.</p>
    pub fn registered_time(&self) -> std::option::Option<&str> {
        self.registered_time.as_deref()
    }
}
impl PluginSummary {
    /// Creates a new builder-style object to manufacture [`PluginSummary`](crate::types::PluginSummary).
    pub fn builder() -> crate::types::builders::PluginSummaryBuilder {
        crate::types::builders::PluginSummaryBuilder::default()
    }
}

/// A builder for [`PluginSummary`](crate::types::PluginSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PluginSummaryBuilder {
    pub(crate) plugin_id: std::option::Option<std::string::String>,
    pub(crate) hostname: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::PluginHealth>,
    pub(crate) ip_address: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) registered_time: std::option::Option<std::string::String>,
}
impl PluginSummaryBuilder {
    /// <p>The ID of the plugin.</p>
    pub fn plugin_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.plugin_id = Some(input.into());
        self
    }
    /// <p>The ID of the plugin.</p>
    pub fn set_plugin_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.plugin_id = input;
        self
    }
    /// <p>The name of the host.</p>
    pub fn hostname(mut self, input: impl Into<std::string::String>) -> Self {
        self.hostname = Some(input.into());
        self
    }
    /// <p>The name of the host.</p>
    pub fn set_hostname(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hostname = input;
        self
    }
    /// <p>The status of the plugin.</p>
    pub fn status(mut self, input: crate::types::PluginHealth) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the plugin.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::PluginHealth>) -> Self {
        self.status = input;
        self
    }
    /// <p>The IP address at which the plugin is located.</p>
    pub fn ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip_address = Some(input.into());
        self
    }
    /// <p>The IP address at which the plugin is located.</p>
    pub fn set_ip_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The version of the plugin.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version of the plugin.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The time at which the plugin was registered.</p>
    pub fn registered_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.registered_time = Some(input.into());
        self
    }
    /// <p>The time at which the plugin was registered.</p>
    pub fn set_registered_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registered_time = input;
        self
    }
    /// Consumes the builder and constructs a [`PluginSummary`](crate::types::PluginSummary).
    pub fn build(self) -> crate::types::PluginSummary {
        crate::types::PluginSummary {
            plugin_id: self.plugin_id,
            hostname: self.hostname,
            status: self.status,
            ip_address: self.ip_address,
            version: self.version,
            registered_time: self.registered_time,
        }
    }
}
