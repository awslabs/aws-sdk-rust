// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output of a step.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkflowStepOutput {
    /// <p>The name of the step.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The data type of the output.</p>
    #[doc(hidden)]
    pub data_type: std::option::Option<crate::types::DataType>,
    /// <p>Determine if an output is required from a step.</p>
    #[doc(hidden)]
    pub required: std::option::Option<bool>,
    /// <p>The value of the output.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::WorkflowStepOutputUnion>,
}
impl WorkflowStepOutput {
    /// <p>The name of the step.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The data type of the output.</p>
    pub fn data_type(&self) -> std::option::Option<&crate::types::DataType> {
        self.data_type.as_ref()
    }
    /// <p>Determine if an output is required from a step.</p>
    pub fn required(&self) -> std::option::Option<bool> {
        self.required
    }
    /// <p>The value of the output.</p>
    pub fn value(&self) -> std::option::Option<&crate::types::WorkflowStepOutputUnion> {
        self.value.as_ref()
    }
}
impl WorkflowStepOutput {
    /// Creates a new builder-style object to manufacture [`WorkflowStepOutput`](crate::types::WorkflowStepOutput).
    pub fn builder() -> crate::types::builders::WorkflowStepOutputBuilder {
        crate::types::builders::WorkflowStepOutputBuilder::default()
    }
}

/// A builder for [`WorkflowStepOutput`](crate::types::WorkflowStepOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkflowStepOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) data_type: std::option::Option<crate::types::DataType>,
    pub(crate) required: std::option::Option<bool>,
    pub(crate) value: std::option::Option<crate::types::WorkflowStepOutputUnion>,
}
impl WorkflowStepOutputBuilder {
    /// <p>The name of the step.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the step.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The data type of the output.</p>
    pub fn data_type(mut self, input: crate::types::DataType) -> Self {
        self.data_type = Some(input);
        self
    }
    /// <p>The data type of the output.</p>
    pub fn set_data_type(mut self, input: std::option::Option<crate::types::DataType>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>Determine if an output is required from a step.</p>
    pub fn required(mut self, input: bool) -> Self {
        self.required = Some(input);
        self
    }
    /// <p>Determine if an output is required from a step.</p>
    pub fn set_required(mut self, input: std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// <p>The value of the output.</p>
    pub fn value(mut self, input: crate::types::WorkflowStepOutputUnion) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value of the output.</p>
    pub fn set_value(
        mut self,
        input: std::option::Option<crate::types::WorkflowStepOutputUnion>,
    ) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkflowStepOutput`](crate::types::WorkflowStepOutput).
    pub fn build(self) -> crate::types::WorkflowStepOutput {
        crate::types::WorkflowStepOutput {
            name: self.name,
            data_type: self.data_type,
            required: self.required,
            value: self.value,
        }
    }
}
