// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the step group in the template.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TemplateStepGroupSummary {
    /// <p>The ID of the step group.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the step group.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The previous step group.</p>
    #[doc(hidden)]
    pub previous: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The next step group.</p>
    #[doc(hidden)]
    pub next: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TemplateStepGroupSummary {
    /// <p>The ID of the step group.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the step group.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The previous step group.</p>
    pub fn previous(&self) -> std::option::Option<&[std::string::String]> {
        self.previous.as_deref()
    }
    /// <p>The next step group.</p>
    pub fn next(&self) -> std::option::Option<&[std::string::String]> {
        self.next.as_deref()
    }
}
impl TemplateStepGroupSummary {
    /// Creates a new builder-style object to manufacture [`TemplateStepGroupSummary`](crate::types::TemplateStepGroupSummary).
    pub fn builder() -> crate::types::builders::TemplateStepGroupSummaryBuilder {
        crate::types::builders::TemplateStepGroupSummaryBuilder::default()
    }
}

/// A builder for [`TemplateStepGroupSummary`](crate::types::TemplateStepGroupSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TemplateStepGroupSummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) previous: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TemplateStepGroupSummaryBuilder {
    /// <p>The ID of the step group.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the step group.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the step group.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the step group.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `previous`.
    ///
    /// To override the contents of this collection use [`set_previous`](Self::set_previous).
    ///
    /// <p>The previous step group.</p>
    pub fn previous(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.previous.unwrap_or_default();
        v.push(input.into());
        self.previous = Some(v);
        self
    }
    /// <p>The previous step group.</p>
    pub fn set_previous(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.previous = input;
        self
    }
    /// Appends an item to `next`.
    ///
    /// To override the contents of this collection use [`set_next`](Self::set_next).
    ///
    /// <p>The next step group.</p>
    pub fn next(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.next.unwrap_or_default();
        v.push(input.into());
        self.next = Some(v);
        self
    }
    /// <p>The next step group.</p>
    pub fn set_next(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.next = input;
        self
    }
    /// Consumes the builder and constructs a [`TemplateStepGroupSummary`](crate::types::TemplateStepGroupSummary).
    pub fn build(self) -> crate::types::TemplateStepGroupSummary {
        crate::types::TemplateStepGroupSummary {
            id: self.id,
            name: self.name,
            previous: self.previous,
            next: self.next,
        }
    }
}
