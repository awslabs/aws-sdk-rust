// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the step in a migration workflow.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkflowStepSummary {
    /// <p>The ID of the step.</p>
    #[doc(hidden)]
    pub step_id: std::option::Option<std::string::String>,
    /// <p>The name of the step.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    #[doc(hidden)]
    pub step_action_type: std::option::Option<crate::types::StepActionType>,
    /// <p>The owner of the step.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<crate::types::Owner>,
    /// <p>The previous step.</p>
    #[doc(hidden)]
    pub previous: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The next step.</p>
    #[doc(hidden)]
    pub next: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The status of the step.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::StepStatus>,
    /// <p>The status message of the migration workflow.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The number of servers that have been migrated.</p>
    #[doc(hidden)]
    pub no_of_srv_completed: std::option::Option<i32>,
    /// <p>The number of servers that have failed to migrate.</p>
    #[doc(hidden)]
    pub no_of_srv_failed: std::option::Option<i32>,
    /// <p>The total number of servers that have been migrated.</p>
    #[doc(hidden)]
    pub total_no_of_srv: std::option::Option<i32>,
    /// <p>The description of the step.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The location of the script.</p>
    #[doc(hidden)]
    pub script_location: std::option::Option<std::string::String>,
}
impl WorkflowStepSummary {
    /// <p>The ID of the step.</p>
    pub fn step_id(&self) -> std::option::Option<&str> {
        self.step_id.as_deref()
    }
    /// <p>The name of the step.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn step_action_type(&self) -> std::option::Option<&crate::types::StepActionType> {
        self.step_action_type.as_ref()
    }
    /// <p>The owner of the step.</p>
    pub fn owner(&self) -> std::option::Option<&crate::types::Owner> {
        self.owner.as_ref()
    }
    /// <p>The previous step.</p>
    pub fn previous(&self) -> std::option::Option<&[std::string::String]> {
        self.previous.as_deref()
    }
    /// <p>The next step.</p>
    pub fn next(&self) -> std::option::Option<&[std::string::String]> {
        self.next.as_deref()
    }
    /// <p>The status of the step.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::StepStatus> {
        self.status.as_ref()
    }
    /// <p>The status message of the migration workflow.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The number of servers that have been migrated.</p>
    pub fn no_of_srv_completed(&self) -> std::option::Option<i32> {
        self.no_of_srv_completed
    }
    /// <p>The number of servers that have failed to migrate.</p>
    pub fn no_of_srv_failed(&self) -> std::option::Option<i32> {
        self.no_of_srv_failed
    }
    /// <p>The total number of servers that have been migrated.</p>
    pub fn total_no_of_srv(&self) -> std::option::Option<i32> {
        self.total_no_of_srv
    }
    /// <p>The description of the step.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The location of the script.</p>
    pub fn script_location(&self) -> std::option::Option<&str> {
        self.script_location.as_deref()
    }
}
impl WorkflowStepSummary {
    /// Creates a new builder-style object to manufacture [`WorkflowStepSummary`](crate::types::WorkflowStepSummary).
    pub fn builder() -> crate::types::builders::WorkflowStepSummaryBuilder {
        crate::types::builders::WorkflowStepSummaryBuilder::default()
    }
}

/// A builder for [`WorkflowStepSummary`](crate::types::WorkflowStepSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkflowStepSummaryBuilder {
    pub(crate) step_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) step_action_type: std::option::Option<crate::types::StepActionType>,
    pub(crate) owner: std::option::Option<crate::types::Owner>,
    pub(crate) previous: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) status: std::option::Option<crate::types::StepStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) no_of_srv_completed: std::option::Option<i32>,
    pub(crate) no_of_srv_failed: std::option::Option<i32>,
    pub(crate) total_no_of_srv: std::option::Option<i32>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) script_location: std::option::Option<std::string::String>,
}
impl WorkflowStepSummaryBuilder {
    /// <p>The ID of the step.</p>
    pub fn step_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.step_id = Some(input.into());
        self
    }
    /// <p>The ID of the step.</p>
    pub fn set_step_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.step_id = input;
        self
    }
    /// <p>The name of the step.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the step.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn step_action_type(mut self, input: crate::types::StepActionType) -> Self {
        self.step_action_type = Some(input);
        self
    }
    /// <p>The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.</p>
    pub fn set_step_action_type(
        mut self,
        input: std::option::Option<crate::types::StepActionType>,
    ) -> Self {
        self.step_action_type = input;
        self
    }
    /// <p>The owner of the step.</p>
    pub fn owner(mut self, input: crate::types::Owner) -> Self {
        self.owner = Some(input);
        self
    }
    /// <p>The owner of the step.</p>
    pub fn set_owner(mut self, input: std::option::Option<crate::types::Owner>) -> Self {
        self.owner = input;
        self
    }
    /// Appends an item to `previous`.
    ///
    /// To override the contents of this collection use [`set_previous`](Self::set_previous).
    ///
    /// <p>The previous step.</p>
    pub fn previous(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.previous.unwrap_or_default();
        v.push(input.into());
        self.previous = Some(v);
        self
    }
    /// <p>The previous step.</p>
    pub fn set_previous(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.previous = input;
        self
    }
    /// Appends an item to `next`.
    ///
    /// To override the contents of this collection use [`set_next`](Self::set_next).
    ///
    /// <p>The next step.</p>
    pub fn next(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.next.unwrap_or_default();
        v.push(input.into());
        self.next = Some(v);
        self
    }
    /// <p>The next step.</p>
    pub fn set_next(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.next = input;
        self
    }
    /// <p>The status of the step.</p>
    pub fn status(mut self, input: crate::types::StepStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the step.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::StepStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status message of the migration workflow.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>The status message of the migration workflow.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The number of servers that have been migrated.</p>
    pub fn no_of_srv_completed(mut self, input: i32) -> Self {
        self.no_of_srv_completed = Some(input);
        self
    }
    /// <p>The number of servers that have been migrated.</p>
    pub fn set_no_of_srv_completed(mut self, input: std::option::Option<i32>) -> Self {
        self.no_of_srv_completed = input;
        self
    }
    /// <p>The number of servers that have failed to migrate.</p>
    pub fn no_of_srv_failed(mut self, input: i32) -> Self {
        self.no_of_srv_failed = Some(input);
        self
    }
    /// <p>The number of servers that have failed to migrate.</p>
    pub fn set_no_of_srv_failed(mut self, input: std::option::Option<i32>) -> Self {
        self.no_of_srv_failed = input;
        self
    }
    /// <p>The total number of servers that have been migrated.</p>
    pub fn total_no_of_srv(mut self, input: i32) -> Self {
        self.total_no_of_srv = Some(input);
        self
    }
    /// <p>The total number of servers that have been migrated.</p>
    pub fn set_total_no_of_srv(mut self, input: std::option::Option<i32>) -> Self {
        self.total_no_of_srv = input;
        self
    }
    /// <p>The description of the step.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the step.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The location of the script.</p>
    pub fn script_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.script_location = Some(input.into());
        self
    }
    /// <p>The location of the script.</p>
    pub fn set_script_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.script_location = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkflowStepSummary`](crate::types::WorkflowStepSummary).
    pub fn build(self) -> crate::types::WorkflowStepSummary {
        crate::types::WorkflowStepSummary {
            step_id: self.step_id,
            name: self.name,
            step_action_type: self.step_action_type,
            owner: self.owner,
            previous: self.previous,
            next: self.next,
            status: self.status,
            status_message: self.status_message,
            no_of_srv_completed: self.no_of_srv_completed,
            no_of_srv_failed: self.no_of_srv_failed,
            total_no_of_srv: self.total_no_of_srv,
            description: self.description,
            script_location: self.script_location,
        }
    }
}
