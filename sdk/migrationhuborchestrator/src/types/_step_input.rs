// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A map of key value pairs that is generated when you create a migration workflow. The key value pairs will differ based on your selection of the template.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum StepInput {
    /// <p>The value of the integer.</p>
    IntegerValue(i32),
    /// <p>List of string values.</p>
    ListOfStringsValue(std::vec::Vec<std::string::String>),
    /// <p>Map of string values.</p>
    MapOfStringValue(std::collections::HashMap<std::string::String, std::string::String>),
    /// <p>String value.</p>
    StringValue(std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl StepInput {
    /// Tries to convert the enum instance into [`IntegerValue`](crate::types::StepInput::IntegerValue), extracting the inner [`i32`](i32).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_integer_value(&self) -> std::result::Result<&i32, &Self> {
        if let StepInput::IntegerValue(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`IntegerValue`](crate::types::StepInput::IntegerValue).
    pub fn is_integer_value(&self) -> bool {
        self.as_integer_value().is_ok()
    }
    /// Tries to convert the enum instance into [`ListOfStringsValue`](crate::types::StepInput::ListOfStringsValue), extracting the inner [`Vec`](std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_list_of_strings_value(
        &self,
    ) -> std::result::Result<&std::vec::Vec<std::string::String>, &Self> {
        if let StepInput::ListOfStringsValue(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ListOfStringsValue`](crate::types::StepInput::ListOfStringsValue).
    pub fn is_list_of_strings_value(&self) -> bool {
        self.as_list_of_strings_value().is_ok()
    }
    /// Tries to convert the enum instance into [`MapOfStringValue`](crate::types::StepInput::MapOfStringValue), extracting the inner [`HashMap`](std::collections::HashMap).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_map_of_string_value(
        &self,
    ) -> std::result::Result<
        &std::collections::HashMap<std::string::String, std::string::String>,
        &Self,
    > {
        if let StepInput::MapOfStringValue(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`MapOfStringValue`](crate::types::StepInput::MapOfStringValue).
    pub fn is_map_of_string_value(&self) -> bool {
        self.as_map_of_string_value().is_ok()
    }
    /// Tries to convert the enum instance into [`StringValue`](crate::types::StepInput::StringValue), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string_value(&self) -> std::result::Result<&std::string::String, &Self> {
        if let StepInput::StringValue(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`StringValue`](crate::types::StepInput::StringValue).
    pub fn is_string_value(&self) -> bool {
        self.as_string_value().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
