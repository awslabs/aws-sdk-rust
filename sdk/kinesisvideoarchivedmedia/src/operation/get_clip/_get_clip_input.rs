// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetClipInput {
    /// <p>The name of the stream for which to retrieve the media clip. </p>
    /// <p>You must specify either the StreamName or the StreamARN. </p>
    #[doc(hidden)]
    pub stream_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the stream for which to retrieve the media clip. </p>
    /// <p>You must specify either the StreamName or the StreamARN. </p>
    #[doc(hidden)]
    pub stream_arn: std::option::Option<std::string::String>,
    /// <p>The time range of the requested clip and the source of the timestamps.</p>
    #[doc(hidden)]
    pub clip_fragment_selector: std::option::Option<crate::types::ClipFragmentSelector>,
}
impl GetClipInput {
    /// <p>The name of the stream for which to retrieve the media clip. </p>
    /// <p>You must specify either the StreamName or the StreamARN. </p>
    pub fn stream_name(&self) -> std::option::Option<&str> {
        self.stream_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the stream for which to retrieve the media clip. </p>
    /// <p>You must specify either the StreamName or the StreamARN. </p>
    pub fn stream_arn(&self) -> std::option::Option<&str> {
        self.stream_arn.as_deref()
    }
    /// <p>The time range of the requested clip and the source of the timestamps.</p>
    pub fn clip_fragment_selector(
        &self,
    ) -> std::option::Option<&crate::types::ClipFragmentSelector> {
        self.clip_fragment_selector.as_ref()
    }
}
impl GetClipInput {
    /// Creates a new builder-style object to manufacture [`GetClipInput`](crate::operation::get_clip::GetClipInput).
    pub fn builder() -> crate::operation::get_clip::builders::GetClipInputBuilder {
        crate::operation::get_clip::builders::GetClipInputBuilder::default()
    }
}

/// A builder for [`GetClipInput`](crate::operation::get_clip::GetClipInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetClipInputBuilder {
    pub(crate) stream_name: std::option::Option<std::string::String>,
    pub(crate) stream_arn: std::option::Option<std::string::String>,
    pub(crate) clip_fragment_selector: std::option::Option<crate::types::ClipFragmentSelector>,
}
impl GetClipInputBuilder {
    /// <p>The name of the stream for which to retrieve the media clip. </p>
    /// <p>You must specify either the StreamName or the StreamARN. </p>
    pub fn stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_name = Some(input.into());
        self
    }
    /// <p>The name of the stream for which to retrieve the media clip. </p>
    /// <p>You must specify either the StreamName or the StreamARN. </p>
    pub fn set_stream_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the stream for which to retrieve the media clip. </p>
    /// <p>You must specify either the StreamName or the StreamARN. </p>
    pub fn stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the stream for which to retrieve the media clip. </p>
    /// <p>You must specify either the StreamName or the StreamARN. </p>
    pub fn set_stream_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_arn = input;
        self
    }
    /// <p>The time range of the requested clip and the source of the timestamps.</p>
    pub fn clip_fragment_selector(mut self, input: crate::types::ClipFragmentSelector) -> Self {
        self.clip_fragment_selector = Some(input);
        self
    }
    /// <p>The time range of the requested clip and the source of the timestamps.</p>
    pub fn set_clip_fragment_selector(
        mut self,
        input: std::option::Option<crate::types::ClipFragmentSelector>,
    ) -> Self {
        self.clip_fragment_selector = input;
        self
    }
    /// Consumes the builder and constructs a [`GetClipInput`](crate::operation::get_clip::GetClipInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_clip::GetClipInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_clip::GetClipInput {
            stream_name: self.stream_name,
            stream_arn: self.stream_arn,
            clip_fragment_selector: self.clip_fragment_selector,
        })
    }
}
