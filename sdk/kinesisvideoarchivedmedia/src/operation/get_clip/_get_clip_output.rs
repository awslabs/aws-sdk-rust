// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetClipOutput {
    /// <p>The content type of the media in the requested clip.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
    /// <p>Traditional MP4 file that contains the media clip from the specified video stream. The output will contain the first 100 MB or the first 200 fragments from the specified start timestamp. For more information, see <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html">Kinesis Video Streams Limits</a>. </p>
    pub payload: aws_smithy_http::byte_stream::ByteStream,
    _request_id: Option<String>,
}
impl GetClipOutput {
    /// <p>The content type of the media in the requested clip.</p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>Traditional MP4 file that contains the media clip from the specified video stream. The output will contain the first 100 MB or the first 200 fragments from the specified start timestamp. For more information, see <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html">Kinesis Video Streams Limits</a>. </p>
    pub fn payload(&self) -> &aws_smithy_http::byte_stream::ByteStream {
        &self.payload
    }
}
impl aws_http::request_id::RequestId for GetClipOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetClipOutput {
    /// Creates a new builder-style object to manufacture [`GetClipOutput`](crate::operation::get_clip::GetClipOutput).
    pub fn builder() -> crate::operation::get_clip::builders::GetClipOutputBuilder {
        crate::operation::get_clip::builders::GetClipOutputBuilder::default()
    }
}

/// A builder for [`GetClipOutput`](crate::operation::get_clip::GetClipOutput).
#[non_exhaustive]
#[derive(std::default::Default, std::fmt::Debug)]
pub struct GetClipOutputBuilder {
    pub(crate) content_type: std::option::Option<std::string::String>,
    pub(crate) payload: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    _request_id: Option<String>,
}
impl GetClipOutputBuilder {
    /// <p>The content type of the media in the requested clip.</p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p>The content type of the media in the requested clip.</p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>Traditional MP4 file that contains the media clip from the specified video stream. The output will contain the first 100 MB or the first 200 fragments from the specified start timestamp. For more information, see <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html">Kinesis Video Streams Limits</a>. </p>
    pub fn payload(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
        self.payload = Some(input);
        self
    }
    /// <p>Traditional MP4 file that contains the media clip from the specified video stream. The output will contain the first 100 MB or the first 200 fragments from the specified start timestamp. For more information, see <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html">Kinesis Video Streams Limits</a>. </p>
    pub fn set_payload(
        mut self,
        input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    ) -> Self {
        self.payload = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetClipOutput`](crate::operation::get_clip::GetClipOutput).
    pub fn build(self) -> crate::operation::get_clip::GetClipOutput {
        crate::operation::get_clip::GetClipOutput {
            content_type: self.content_type,
            payload: self.payload.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
