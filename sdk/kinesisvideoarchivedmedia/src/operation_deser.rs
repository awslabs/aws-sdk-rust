// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_clip(
    response: &mut http::Response<smithy_http::body::SdkBody>,
) -> std::result::Result<crate::output::GetClipOutput, crate::error::GetClipError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_clip_output::Builder::default();
        let _ = response;
        output = output.set_content_type(
            crate::http_serde::deser_header_get_clip_get_clip_output_content_type(
                response.headers(),
            )
            .map_err(|_| {
                crate::error::GetClipError::unhandled(
                    "Failed to parse ContentType from header `Content-Type",
                )
            })?,
        );
        output = output.set_payload(Some(
            crate::http_serde::deser_payload_get_clip_get_clip_output_payload(response.body_mut())?,
        ));
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_clip_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetClipOutput, crate::error::GetClipError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetClipError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetClipError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ClientLimitExceededException" => {
            crate::error::GetClipError {
                meta: generic,
                kind: crate::error::GetClipErrorKind::ClientLimitExceededException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::client_limit_exceeded_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_client_limit_exceeded_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetClipError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InvalidArgumentException" => crate::error::GetClipError {
            meta: generic,
            kind: crate::error::GetClipErrorKind::InvalidArgumentException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_argument_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_argument_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetClipError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidCodecPrivateDataException" => crate::error::GetClipError {
            meta: generic,
            kind: crate::error::GetClipErrorKind::InvalidCodecPrivateDataException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_codec_private_data_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_codec_private_data_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetClipError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidMediaFrameException" => {
            crate::error::GetClipError {
                meta: generic,
                kind: crate::error::GetClipErrorKind::InvalidMediaFrameException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::invalid_media_frame_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_invalid_media_frame_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetClipError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "MissingCodecPrivateDataException" => crate::error::GetClipError {
            meta: generic,
            kind: crate::error::GetClipErrorKind::MissingCodecPrivateDataException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::missing_codec_private_data_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_missing_codec_private_data_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetClipError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "NoDataRetentionException" => crate::error::GetClipError {
            meta: generic,
            kind: crate::error::GetClipErrorKind::NoDataRetentionException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::no_data_retention_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_no_data_retention_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::GetClipError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "NotAuthorizedException" => crate::error::GetClipError {
            meta: generic,
            kind: crate::error::GetClipErrorKind::NotAuthorizedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::not_authorized_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_not_authorized_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetClipError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => {
            crate::error::GetClipError {
                meta: generic,
                kind: crate::error::GetClipErrorKind::ResourceNotFoundException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::resource_not_found_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_resource_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetClipError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnsupportedStreamMediaTypeException" => crate::error::GetClipError {
            meta: generic,
            kind: crate::error::GetClipErrorKind::UnsupportedStreamMediaTypeException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::unsupported_stream_media_type_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_stream_media_type_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetClipError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetClipError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_dash_streaming_session_url_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetDashStreamingSessionUrlOutput,
    crate::error::GetDASHStreamingSessionURLError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetDASHStreamingSessionURLError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetDASHStreamingSessionURLError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ClientLimitExceededException" => crate::error::GetDASHStreamingSessionURLError { meta: generic, kind: crate::error::GetDASHStreamingSessionURLErrorKind::ClientLimitExceededException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::client_limit_exceeded_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_client_limit_exceeded_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetDASHStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "InvalidArgumentException" => crate::error::GetDASHStreamingSessionURLError { meta: generic, kind: crate::error::GetDASHStreamingSessionURLErrorKind::InvalidArgumentException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::invalid_argument_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_argument_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetDASHStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "InvalidCodecPrivateDataException" => crate::error::GetDASHStreamingSessionURLError { meta: generic, kind: crate::error::GetDASHStreamingSessionURLErrorKind::InvalidCodecPrivateDataException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::invalid_codec_private_data_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_codec_private_data_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetDASHStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "MissingCodecPrivateDataException" => crate::error::GetDASHStreamingSessionURLError { meta: generic, kind: crate::error::GetDASHStreamingSessionURLErrorKind::MissingCodecPrivateDataException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::missing_codec_private_data_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_missing_codec_private_data_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetDASHStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "NoDataRetentionException" => crate::error::GetDASHStreamingSessionURLError { meta: generic, kind: crate::error::GetDASHStreamingSessionURLErrorKind::NoDataRetentionException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::no_data_retention_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_no_data_retention_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetDASHStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "NotAuthorizedException" => crate::error::GetDASHStreamingSessionURLError { meta: generic, kind: crate::error::GetDASHStreamingSessionURLErrorKind::NotAuthorizedException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::not_authorized_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_not_authorized_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetDASHStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "ResourceNotFoundException" => crate::error::GetDASHStreamingSessionURLError { meta: generic, kind: crate::error::GetDASHStreamingSessionURLErrorKind::ResourceNotFoundException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_resource_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetDASHStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "UnsupportedStreamMediaTypeException" => crate::error::GetDASHStreamingSessionURLError { meta: generic, kind: crate::error::GetDASHStreamingSessionURLErrorKind::UnsupportedStreamMediaTypeException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::unsupported_stream_media_type_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_stream_media_type_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetDASHStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::GetDASHStreamingSessionURLError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_dash_streaming_session_url_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetDashStreamingSessionUrlOutput,
    crate::error::GetDASHStreamingSessionURLError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_dash_streaming_session_url_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_get_dash_streaming_session_url(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetDASHStreamingSessionURLError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_hls_streaming_session_url_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetHlsStreamingSessionUrlOutput,
    crate::error::GetHLSStreamingSessionURLError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetHLSStreamingSessionURLError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetHLSStreamingSessionURLError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ClientLimitExceededException" => crate::error::GetHLSStreamingSessionURLError { meta: generic, kind: crate::error::GetHLSStreamingSessionURLErrorKind::ClientLimitExceededException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::client_limit_exceeded_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_client_limit_exceeded_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetHLSStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "InvalidArgumentException" => crate::error::GetHLSStreamingSessionURLError { meta: generic, kind: crate::error::GetHLSStreamingSessionURLErrorKind::InvalidArgumentException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::invalid_argument_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_argument_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetHLSStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "InvalidCodecPrivateDataException" => crate::error::GetHLSStreamingSessionURLError { meta: generic, kind: crate::error::GetHLSStreamingSessionURLErrorKind::InvalidCodecPrivateDataException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::invalid_codec_private_data_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_codec_private_data_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetHLSStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "MissingCodecPrivateDataException" => crate::error::GetHLSStreamingSessionURLError { meta: generic, kind: crate::error::GetHLSStreamingSessionURLErrorKind::MissingCodecPrivateDataException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::missing_codec_private_data_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_missing_codec_private_data_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetHLSStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "NoDataRetentionException" => crate::error::GetHLSStreamingSessionURLError { meta: generic, kind: crate::error::GetHLSStreamingSessionURLErrorKind::NoDataRetentionException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::no_data_retention_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_no_data_retention_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetHLSStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "NotAuthorizedException" => crate::error::GetHLSStreamingSessionURLError { meta: generic, kind: crate::error::GetHLSStreamingSessionURLErrorKind::NotAuthorizedException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::not_authorized_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_not_authorized_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetHLSStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "ResourceNotFoundException" => crate::error::GetHLSStreamingSessionURLError { meta: generic, kind: crate::error::GetHLSStreamingSessionURLErrorKind::ResourceNotFoundException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_resource_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetHLSStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "UnsupportedStreamMediaTypeException" => crate::error::GetHLSStreamingSessionURLError { meta: generic, kind: crate::error::GetHLSStreamingSessionURLErrorKind::UnsupportedStreamMediaTypeException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::unsupported_stream_media_type_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unsupported_stream_media_type_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetHLSStreamingSessionURLError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::GetHLSStreamingSessionURLError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_hls_streaming_session_url_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetHlsStreamingSessionUrlOutput,
    crate::error::GetHLSStreamingSessionURLError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_hls_streaming_session_url_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_get_hls_streaming_session_url(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetHLSStreamingSessionURLError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_media_for_fragment_list(
    response: &mut http::Response<smithy_http::body::SdkBody>,
) -> std::result::Result<
    crate::output::GetMediaForFragmentListOutput,
    crate::error::GetMediaForFragmentListError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_media_for_fragment_list_output::Builder::default();
        let _ = response;
        output = output.set_content_type(
            crate::http_serde::deser_header_get_media_for_fragment_list_get_media_for_fragment_list_output_content_type(response.headers())
                                        .map_err(|_|crate::error::GetMediaForFragmentListError::unhandled("Failed to parse ContentType from header `Content-Type"))?
        );
        output = output.set_payload(
            Some(crate::http_serde::deser_payload_get_media_for_fragment_list_get_media_for_fragment_list_output_payload(response.body_mut())?)
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_media_for_fragment_list_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetMediaForFragmentListOutput,
    crate::error::GetMediaForFragmentListError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetMediaForFragmentListError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetMediaForFragmentListError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ClientLimitExceededException" => {
            crate::error::GetMediaForFragmentListError {
                meta: generic,
                kind: crate::error::GetMediaForFragmentListErrorKind::ClientLimitExceededException(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::client_limit_exceeded_exception::Builder::default();
                            let _ = response;
                            output = crate::json_deser::deser_structure_client_limit_exceeded_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetMediaForFragmentListError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
            }
        }
        "InvalidArgumentException" => crate::error::GetMediaForFragmentListError {
            meta: generic,
            kind: crate::error::GetMediaForFragmentListErrorKind::InvalidArgumentException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_argument_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_argument_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetMediaForFragmentListError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "NotAuthorizedException" => crate::error::GetMediaForFragmentListError {
            meta: generic,
            kind: crate::error::GetMediaForFragmentListErrorKind::NotAuthorizedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::not_authorized_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_not_authorized_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetMediaForFragmentListError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => {
            crate::error::GetMediaForFragmentListError {
                meta: generic,
                kind: crate::error::GetMediaForFragmentListErrorKind::ResourceNotFoundException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::resource_not_found_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_resource_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetMediaForFragmentListError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        _ => crate::error::GetMediaForFragmentListError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_fragments_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListFragmentsOutput, crate::error::ListFragmentsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListFragmentsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListFragmentsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ClientLimitExceededException" => {
            crate::error::ListFragmentsError {
                meta: generic,
                kind: crate::error::ListFragmentsErrorKind::ClientLimitExceededException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::client_limit_exceeded_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_client_limit_exceeded_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListFragmentsError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InvalidArgumentException" => crate::error::ListFragmentsError {
            meta: generic,
            kind: crate::error::ListFragmentsErrorKind::InvalidArgumentException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_argument_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_argument_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListFragmentsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "NotAuthorizedException" => crate::error::ListFragmentsError {
            meta: generic,
            kind: crate::error::ListFragmentsErrorKind::NotAuthorizedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::not_authorized_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_not_authorized_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListFragmentsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => {
            crate::error::ListFragmentsError {
                meta: generic,
                kind: crate::error::ListFragmentsErrorKind::ResourceNotFoundException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::resource_not_found_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_resource_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListFragmentsError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        _ => crate::error::ListFragmentsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_fragments_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListFragmentsOutput, crate::error::ListFragmentsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_fragments_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_list_fragments(response.body().as_ref(), output)
                .map_err(crate::error::ListFragmentsError::unhandled)?;
        output.build()
    })
}
