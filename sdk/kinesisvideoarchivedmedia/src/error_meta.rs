// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Kinesis Video Streams has throttled the request because you have exceeded a limit. Try making the call later. For information about limits, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html">Kinesis Video Streams Limits</a>.</p>
    ClientLimitExceededException(crate::error::ClientLimitExceededException),
    /// <p>A specified parameter exceeds its restrictions, is not supported, or can't be used.</p>
    InvalidArgumentException(crate::error::InvalidArgumentException),
    /// <p>The codec private data in at least one of the tracks of the video stream is not valid for this operation.</p>
    InvalidCodecPrivateDataException(crate::error::InvalidCodecPrivateDataException),
    /// <p>One or more frames in the requested clip could not be parsed based on the specified codec.</p>
    InvalidMediaFrameException(crate::error::InvalidMediaFrameException),
    /// <p>No codec private data was found in at least one of tracks of the video stream.</p>
    MissingCodecPrivateDataException(crate::error::MissingCodecPrivateDataException),
    /// <p>A streaming session was requested for a stream that does not retain data (that is, has a <code>DataRetentionInHours</code> of 0). </p>
    NoDataRetentionException(crate::error::NoDataRetentionException),
    /// <p>Status Code: 403, The caller is not authorized to perform an operation on the given stream, or the token has expired.</p>
    NotAuthorizedException(crate::error::NotAuthorizedException),
    /// <p> <code>GetMedia</code> throws this error when Kinesis Video Streams can't find the stream that you specified.</p>
    /// <p> <code>GetHLSStreamingSessionURL</code> and <code>GetDASHStreamingSessionURL</code> throw this error if a session with a <code>PlaybackMode</code> of <code>ON_DEMAND</code> or <code>LIVE_REPLAY</code>is requested for a stream that has no fragments within the requested time range, or if a session with a <code>PlaybackMode</code> of <code>LIVE</code> is requested for a stream that has no fragments within the last 30 seconds.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The type of the media (for example, h.264 or h.265 video or ACC or G.711 audio) could not be determined from the codec IDs of the tracks in the first fragment for a playback session. The codec ID for track 1 should be <code>V_MPEG/ISO/AVC</code> and, optionally, the codec ID for track 2 should be <code>A_AAC</code>.</p>
    UnsupportedStreamMediaTypeException(crate::error::UnsupportedStreamMediaTypeException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ClientLimitExceededException(inner) => inner.fmt(f),
            Error::InvalidArgumentException(inner) => inner.fmt(f),
            Error::InvalidCodecPrivateDataException(inner) => inner.fmt(f),
            Error::InvalidMediaFrameException(inner) => inner.fmt(f),
            Error::MissingCodecPrivateDataException(inner) => inner.fmt(f),
            Error::NoDataRetentionException(inner) => inner.fmt(f),
            Error::NotAuthorizedException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::UnsupportedStreamMediaTypeException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetClipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetClipError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetClipError> for Error {
    fn from(err: crate::error::GetClipError) -> Self {
        match err {
            crate::error::GetClipError::ClientLimitExceededException(inner) => {
                Error::ClientLimitExceededException(inner)
            }
            crate::error::GetClipError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::GetClipError::InvalidCodecPrivateDataException(inner) => {
                Error::InvalidCodecPrivateDataException(inner)
            }
            crate::error::GetClipError::InvalidMediaFrameException(inner) => {
                Error::InvalidMediaFrameException(inner)
            }
            crate::error::GetClipError::MissingCodecPrivateDataException(inner) => {
                Error::MissingCodecPrivateDataException(inner)
            }
            crate::error::GetClipError::NoDataRetentionException(inner) => {
                Error::NoDataRetentionException(inner)
            }
            crate::error::GetClipError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetClipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetClipError::UnsupportedStreamMediaTypeException(inner) => {
                Error::UnsupportedStreamMediaTypeException(inner)
            }
            crate::error::GetClipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDASHStreamingSessionURLError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDASHStreamingSessionURLError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDASHStreamingSessionURLError> for Error {
    fn from(err: crate::error::GetDASHStreamingSessionURLError) -> Self {
        match err {
            crate::error::GetDASHStreamingSessionURLError::ClientLimitExceededException(inner) => {
                Error::ClientLimitExceededException(inner)
            }
            crate::error::GetDASHStreamingSessionURLError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::GetDASHStreamingSessionURLError::InvalidCodecPrivateDataException(
                inner,
            ) => Error::InvalidCodecPrivateDataException(inner),
            crate::error::GetDASHStreamingSessionURLError::MissingCodecPrivateDataException(
                inner,
            ) => Error::MissingCodecPrivateDataException(inner),
            crate::error::GetDASHStreamingSessionURLError::NoDataRetentionException(inner) => {
                Error::NoDataRetentionException(inner)
            }
            crate::error::GetDASHStreamingSessionURLError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetDASHStreamingSessionURLError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetDASHStreamingSessionURLError::UnsupportedStreamMediaTypeException(
                inner,
            ) => Error::UnsupportedStreamMediaTypeException(inner),
            crate::error::GetDASHStreamingSessionURLError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetHLSStreamingSessionURLError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetHLSStreamingSessionURLError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetHLSStreamingSessionURLError> for Error {
    fn from(err: crate::error::GetHLSStreamingSessionURLError) -> Self {
        match err {
            crate::error::GetHLSStreamingSessionURLError::ClientLimitExceededException(inner) => {
                Error::ClientLimitExceededException(inner)
            }
            crate::error::GetHLSStreamingSessionURLError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::GetHLSStreamingSessionURLError::InvalidCodecPrivateDataException(
                inner,
            ) => Error::InvalidCodecPrivateDataException(inner),
            crate::error::GetHLSStreamingSessionURLError::MissingCodecPrivateDataException(
                inner,
            ) => Error::MissingCodecPrivateDataException(inner),
            crate::error::GetHLSStreamingSessionURLError::NoDataRetentionException(inner) => {
                Error::NoDataRetentionException(inner)
            }
            crate::error::GetHLSStreamingSessionURLError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetHLSStreamingSessionURLError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetHLSStreamingSessionURLError::UnsupportedStreamMediaTypeException(
                inner,
            ) => Error::UnsupportedStreamMediaTypeException(inner),
            crate::error::GetHLSStreamingSessionURLError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetImagesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImagesError> for Error {
    fn from(err: crate::error::GetImagesError) -> Self {
        match err {
            crate::error::GetImagesError::ClientLimitExceededException(inner) => {
                Error::ClientLimitExceededException(inner)
            }
            crate::error::GetImagesError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::GetImagesError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetImagesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetImagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMediaForFragmentListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMediaForFragmentListError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMediaForFragmentListError> for Error {
    fn from(err: crate::error::GetMediaForFragmentListError) -> Self {
        match err {
            crate::error::GetMediaForFragmentListError::ClientLimitExceededException(inner) => {
                Error::ClientLimitExceededException(inner)
            }
            crate::error::GetMediaForFragmentListError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::GetMediaForFragmentListError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetMediaForFragmentListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetMediaForFragmentListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFragmentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFragmentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFragmentsError> for Error {
    fn from(err: crate::error::ListFragmentsError) -> Self {
        match err {
            crate::error::ListFragmentsError::ClientLimitExceededException(inner) => {
                Error::ClientLimitExceededException(inner)
            }
            crate::error::ListFragmentsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListFragmentsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListFragmentsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFragmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ClientLimitExceededException(e) => e.request_id(),
            Self::InvalidArgumentException(e) => e.request_id(),
            Self::InvalidCodecPrivateDataException(e) => e.request_id(),
            Self::InvalidMediaFrameException(e) => e.request_id(),
            Self::MissingCodecPrivateDataException(e) => e.request_id(),
            Self::NoDataRetentionException(e) => e.request_id(),
            Self::NotAuthorizedException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::UnsupportedStreamMediaTypeException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
