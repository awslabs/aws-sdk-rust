// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `GetClip`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_clip`](crate::client::Client::get_clip).
///
/// See [`crate::client::fluent_builders::GetClip`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetClip {
    _private: (),
}
impl GetClip {
    /// Creates a new builder-style object to manufacture [`GetClipInput`](crate::input::GetClipInput)
    pub fn builder() -> crate::input::get_clip_input::Builder {
        crate::input::get_clip_input::Builder::default()
    }
    /// Creates a new `GetClip` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseHttpResponse for GetClip {
    type Output = std::result::Result<crate::output::GetClipOutput, crate::error::GetClipError>;
    fn parse_unloaded(
        &self,
        response: &mut aws_smithy_http::operation::Response,
    ) -> Option<Self::Output> {
        // This is an error, defer to the non-streaming parser
        if !response.http().status().is_success() && response.http().status().as_u16() != 200 {
            return None;
        }
        Some(crate::operation_deser::parse_get_clip(response))
    }
    fn parse_loaded(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        // if streaming, we only hit this case if its an error
        crate::operation_deser::parse_get_clip_error(response)
    }
}

/// Operation shape for `GetDASHStreamingSessionURL`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_dash_streaming_session_url`](crate::client::Client::get_dash_streaming_session_url).
///
/// See [`crate::client::fluent_builders::GetDASHStreamingSessionURL`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDASHStreamingSessionURL {
    _private: (),
}
impl GetDASHStreamingSessionURL {
    /// Creates a new builder-style object to manufacture [`GetDashStreamingSessionUrlInput`](crate::input::GetDashStreamingSessionUrlInput)
    pub fn builder() -> crate::input::get_dash_streaming_session_url_input::Builder {
        crate::input::get_dash_streaming_session_url_input::Builder::default()
    }
    /// Creates a new `GetDASHStreamingSessionURL` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetDASHStreamingSessionURL {
    type Output = std::result::Result<
        crate::output::GetDashStreamingSessionUrlOutput,
        crate::error::GetDASHStreamingSessionURLError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_dash_streaming_session_url_error(response)
        } else {
            crate::operation_deser::parse_get_dash_streaming_session_url_response(response)
        }
    }
}

/// Operation shape for `GetHLSStreamingSessionURL`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_hls_streaming_session_url`](crate::client::Client::get_hls_streaming_session_url).
///
/// See [`crate::client::fluent_builders::GetHLSStreamingSessionURL`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetHLSStreamingSessionURL {
    _private: (),
}
impl GetHLSStreamingSessionURL {
    /// Creates a new builder-style object to manufacture [`GetHlsStreamingSessionUrlInput`](crate::input::GetHlsStreamingSessionUrlInput)
    pub fn builder() -> crate::input::get_hls_streaming_session_url_input::Builder {
        crate::input::get_hls_streaming_session_url_input::Builder::default()
    }
    /// Creates a new `GetHLSStreamingSessionURL` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetHLSStreamingSessionURL {
    type Output = std::result::Result<
        crate::output::GetHlsStreamingSessionUrlOutput,
        crate::error::GetHLSStreamingSessionURLError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_hls_streaming_session_url_error(response)
        } else {
            crate::operation_deser::parse_get_hls_streaming_session_url_response(response)
        }
    }
}

/// Operation shape for `GetMediaForFragmentList`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_media_for_fragment_list`](crate::client::Client::get_media_for_fragment_list).
///
/// See [`crate::client::fluent_builders::GetMediaForFragmentList`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMediaForFragmentList {
    _private: (),
}
impl GetMediaForFragmentList {
    /// Creates a new builder-style object to manufacture [`GetMediaForFragmentListInput`](crate::input::GetMediaForFragmentListInput)
    pub fn builder() -> crate::input::get_media_for_fragment_list_input::Builder {
        crate::input::get_media_for_fragment_list_input::Builder::default()
    }
    /// Creates a new `GetMediaForFragmentList` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseHttpResponse for GetMediaForFragmentList {
    type Output = std::result::Result<
        crate::output::GetMediaForFragmentListOutput,
        crate::error::GetMediaForFragmentListError,
    >;
    fn parse_unloaded(
        &self,
        response: &mut aws_smithy_http::operation::Response,
    ) -> Option<Self::Output> {
        // This is an error, defer to the non-streaming parser
        if !response.http().status().is_success() && response.http().status().as_u16() != 200 {
            return None;
        }
        Some(crate::operation_deser::parse_get_media_for_fragment_list(
            response,
        ))
    }
    fn parse_loaded(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        // if streaming, we only hit this case if its an error
        crate::operation_deser::parse_get_media_for_fragment_list_error(response)
    }
}

/// Operation shape for `ListFragments`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_fragments`](crate::client::Client::list_fragments).
///
/// See [`crate::client::fluent_builders::ListFragments`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFragments {
    _private: (),
}
impl ListFragments {
    /// Creates a new builder-style object to manufacture [`ListFragmentsInput`](crate::input::ListFragmentsInput)
    pub fn builder() -> crate::input::list_fragments_input::Builder {
        crate::input::list_fragments_input::Builder::default()
    }
    /// Creates a new `ListFragments` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListFragments {
    type Output =
        std::result::Result<crate::output::ListFragmentsOutput, crate::error::ListFragmentsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_fragments_error(response)
        } else {
            crate::operation_deser::parse_list_fragments_response(response)
        }
    }
}
