// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the timestamp range and timestamp origin of a range of fragments.</p>
/// <p>Only fragments with a start timestamp greater than or equal to the given start time and less than or equal to the end time are returned. For example, if a stream contains fragments with the following start timestamps: </p>
/// <ul>
/// <li> <p>00:00:00</p> </li>
/// <li> <p>00:00:02</p> </li>
/// <li> <p>00:00:04</p> </li>
/// <li> <p>00:00:06</p> </li>
/// </ul>
/// <p> A fragment selector range with a start time of 00:00:01 and end time of 00:00:04 would return the fragments with start times of 00:00:02 and 00:00:04. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FragmentSelector {
    /// <p>The origin of the timestamps to use (Server or Producer).</p>
    #[doc(hidden)]
    pub fragment_selector_type: std::option::Option<crate::types::FragmentSelectorType>,
    /// <p>The range of timestamps to return.</p>
    #[doc(hidden)]
    pub timestamp_range: std::option::Option<crate::types::TimestampRange>,
}
impl FragmentSelector {
    /// <p>The origin of the timestamps to use (Server or Producer).</p>
    pub fn fragment_selector_type(
        &self,
    ) -> std::option::Option<&crate::types::FragmentSelectorType> {
        self.fragment_selector_type.as_ref()
    }
    /// <p>The range of timestamps to return.</p>
    pub fn timestamp_range(&self) -> std::option::Option<&crate::types::TimestampRange> {
        self.timestamp_range.as_ref()
    }
}
impl FragmentSelector {
    /// Creates a new builder-style object to manufacture [`FragmentSelector`](crate::types::FragmentSelector).
    pub fn builder() -> crate::types::builders::FragmentSelectorBuilder {
        crate::types::builders::FragmentSelectorBuilder::default()
    }
}

/// A builder for [`FragmentSelector`](crate::types::FragmentSelector).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FragmentSelectorBuilder {
    pub(crate) fragment_selector_type: std::option::Option<crate::types::FragmentSelectorType>,
    pub(crate) timestamp_range: std::option::Option<crate::types::TimestampRange>,
}
impl FragmentSelectorBuilder {
    /// <p>The origin of the timestamps to use (Server or Producer).</p>
    pub fn fragment_selector_type(mut self, input: crate::types::FragmentSelectorType) -> Self {
        self.fragment_selector_type = Some(input);
        self
    }
    /// <p>The origin of the timestamps to use (Server or Producer).</p>
    pub fn set_fragment_selector_type(
        mut self,
        input: std::option::Option<crate::types::FragmentSelectorType>,
    ) -> Self {
        self.fragment_selector_type = input;
        self
    }
    /// <p>The range of timestamps to return.</p>
    pub fn timestamp_range(mut self, input: crate::types::TimestampRange) -> Self {
        self.timestamp_range = Some(input);
        self
    }
    /// <p>The range of timestamps to return.</p>
    pub fn set_timestamp_range(
        mut self,
        input: std::option::Option<crate::types::TimestampRange>,
    ) -> Self {
        self.timestamp_range = input;
        self
    }
    /// Consumes the builder and constructs a [`FragmentSelector`](crate::types::FragmentSelector).
    pub fn build(self) -> crate::types::FragmentSelector {
        crate::types::FragmentSelector {
            fragment_selector_type: self.fragment_selector_type,
            timestamp_range: self.timestamp_range,
        }
    }
}
