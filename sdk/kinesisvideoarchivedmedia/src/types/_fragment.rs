// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a segment of video or other time-delimited data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Fragment {
    /// <p>The unique identifier of the fragment. This value monotonically increases based on the ingestion order.</p>
    #[doc(hidden)]
    pub fragment_number: std::option::Option<std::string::String>,
    /// <p>The total fragment size, including information about the fragment and contained media data.</p>
    #[doc(hidden)]
    pub fragment_size_in_bytes: i64,
    /// <p>The timestamp from the producer corresponding to the fragment.</p>
    #[doc(hidden)]
    pub producer_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp from the AWS server corresponding to the fragment.</p>
    #[doc(hidden)]
    pub server_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The playback duration or other time value associated with the fragment.</p>
    #[doc(hidden)]
    pub fragment_length_in_milliseconds: i64,
}
impl Fragment {
    /// <p>The unique identifier of the fragment. This value monotonically increases based on the ingestion order.</p>
    pub fn fragment_number(&self) -> std::option::Option<&str> {
        self.fragment_number.as_deref()
    }
    /// <p>The total fragment size, including information about the fragment and contained media data.</p>
    pub fn fragment_size_in_bytes(&self) -> i64 {
        self.fragment_size_in_bytes
    }
    /// <p>The timestamp from the producer corresponding to the fragment.</p>
    pub fn producer_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.producer_timestamp.as_ref()
    }
    /// <p>The timestamp from the AWS server corresponding to the fragment.</p>
    pub fn server_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.server_timestamp.as_ref()
    }
    /// <p>The playback duration or other time value associated with the fragment.</p>
    pub fn fragment_length_in_milliseconds(&self) -> i64 {
        self.fragment_length_in_milliseconds
    }
}
impl Fragment {
    /// Creates a new builder-style object to manufacture [`Fragment`](crate::types::Fragment).
    pub fn builder() -> crate::types::builders::FragmentBuilder {
        crate::types::builders::FragmentBuilder::default()
    }
}

/// A builder for [`Fragment`](crate::types::Fragment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FragmentBuilder {
    pub(crate) fragment_number: std::option::Option<std::string::String>,
    pub(crate) fragment_size_in_bytes: std::option::Option<i64>,
    pub(crate) producer_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) server_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) fragment_length_in_milliseconds: std::option::Option<i64>,
}
impl FragmentBuilder {
    /// <p>The unique identifier of the fragment. This value monotonically increases based on the ingestion order.</p>
    pub fn fragment_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.fragment_number = Some(input.into());
        self
    }
    /// <p>The unique identifier of the fragment. This value monotonically increases based on the ingestion order.</p>
    pub fn set_fragment_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fragment_number = input;
        self
    }
    /// <p>The total fragment size, including information about the fragment and contained media data.</p>
    pub fn fragment_size_in_bytes(mut self, input: i64) -> Self {
        self.fragment_size_in_bytes = Some(input);
        self
    }
    /// <p>The total fragment size, including information about the fragment and contained media data.</p>
    pub fn set_fragment_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.fragment_size_in_bytes = input;
        self
    }
    /// <p>The timestamp from the producer corresponding to the fragment.</p>
    pub fn producer_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.producer_timestamp = Some(input);
        self
    }
    /// <p>The timestamp from the producer corresponding to the fragment.</p>
    pub fn set_producer_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.producer_timestamp = input;
        self
    }
    /// <p>The timestamp from the AWS server corresponding to the fragment.</p>
    pub fn server_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.server_timestamp = Some(input);
        self
    }
    /// <p>The timestamp from the AWS server corresponding to the fragment.</p>
    pub fn set_server_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.server_timestamp = input;
        self
    }
    /// <p>The playback duration or other time value associated with the fragment.</p>
    pub fn fragment_length_in_milliseconds(mut self, input: i64) -> Self {
        self.fragment_length_in_milliseconds = Some(input);
        self
    }
    /// <p>The playback duration or other time value associated with the fragment.</p>
    pub fn set_fragment_length_in_milliseconds(mut self, input: std::option::Option<i64>) -> Self {
        self.fragment_length_in_milliseconds = input;
        self
    }
    /// Consumes the builder and constructs a [`Fragment`](crate::types::Fragment).
    pub fn build(self) -> crate::types::Fragment {
        crate::types::Fragment {
            fragment_number: self.fragment_number,
            fragment_size_in_bytes: self.fragment_size_in_bytes.unwrap_or_default(),
            producer_timestamp: self.producer_timestamp,
            server_timestamp: self.server_timestamp,
            fragment_length_in_milliseconds: self
                .fragment_length_in_milliseconds
                .unwrap_or_default(),
        }
    }
}
