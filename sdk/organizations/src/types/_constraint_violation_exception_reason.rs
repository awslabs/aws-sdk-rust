// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ConstraintViolationExceptionReason`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let constraintviolationexceptionreason = unimplemented!();
/// match constraintviolationexceptionreason {
///     ConstraintViolationExceptionReason::AccountCannotLeaveOrganization => { /* ... */ },
///     ConstraintViolationExceptionReason::AccountCannotLeaveWithoutEula => { /* ... */ },
///     ConstraintViolationExceptionReason::AccountCannotLeaveWithoutPhoneVerification => { /* ... */ },
///     ConstraintViolationExceptionReason::AccountCreationRateLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::AccountNumberLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::CannotCloseManagementAccount => { /* ... */ },
///     ConstraintViolationExceptionReason::CannotRegisterMasterAsDelegatedAdministrator => { /* ... */ },
///     ConstraintViolationExceptionReason::CannotRemoveDelegatedAdministratorFromOrg => { /* ... */ },
///     ConstraintViolationExceptionReason::CloseAccountQuotaExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::CloseAccountRequestsLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::CreateOrganizationInBillingModeUnsupportedRegion => { /* ... */ },
///     ConstraintViolationExceptionReason::DelegatedAdministratorExistsForThisService => { /* ... */ },
///     ConstraintViolationExceptionReason::EmailVerificationCodeExpired => { /* ... */ },
///     ConstraintViolationExceptionReason::HandshakeRateLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::InvalidPaymentInstrument => { /* ... */ },
///     ConstraintViolationExceptionReason::MasterAccountAddressDoesNotMatchMarketplace => { /* ... */ },
///     ConstraintViolationExceptionReason::MasterAccountMissingBusinessLicense => { /* ... */ },
///     ConstraintViolationExceptionReason::MasterAccountMissingContactInfo => { /* ... */ },
///     ConstraintViolationExceptionReason::MasterAccountNotGovcloudEnabled => { /* ... */ },
///     ConstraintViolationExceptionReason::MasterAccountPaymentInstrumentRequired => { /* ... */ },
///     ConstraintViolationExceptionReason::MaxDelegatedAdministratorsForServiceLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::MaxPolicyTypeAttachmentLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::MaxTagLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::MemberAccountPaymentInstrumentRequired => { /* ... */ },
///     ConstraintViolationExceptionReason::MinPolicyTypeAttachmentLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::OrganizationNotInAllFeaturesMode => { /* ... */ },
///     ConstraintViolationExceptionReason::OuDepthLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::OuNumberLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::PolicyContentLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::PolicyNumberLimitExceeded => { /* ... */ },
///     ConstraintViolationExceptionReason::ServiceAccessNotEnabled => { /* ... */ },
///     ConstraintViolationExceptionReason::TagPolicyViolation => { /* ... */ },
///     ConstraintViolationExceptionReason::WaitPeriodActive => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `constraintviolationexceptionreason` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ConstraintViolationExceptionReason::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ConstraintViolationExceptionReason::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ConstraintViolationExceptionReason::NewFeature` is defined.
/// Specifically, when `constraintviolationexceptionreason` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ConstraintViolationExceptionReason::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ConstraintViolationExceptionReason {
    #[allow(missing_docs)] // documentation missing in model
    AccountCannotLeaveOrganization,
    #[allow(missing_docs)] // documentation missing in model
    AccountCannotLeaveWithoutEula,
    #[allow(missing_docs)] // documentation missing in model
    AccountCannotLeaveWithoutPhoneVerification,
    #[allow(missing_docs)] // documentation missing in model
    AccountCreationRateLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    AccountNumberLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    CannotCloseManagementAccount,
    #[allow(missing_docs)] // documentation missing in model
    CannotRegisterMasterAsDelegatedAdministrator,
    #[allow(missing_docs)] // documentation missing in model
    CannotRemoveDelegatedAdministratorFromOrg,
    #[allow(missing_docs)] // documentation missing in model
    CloseAccountQuotaExceeded,
    #[allow(missing_docs)] // documentation missing in model
    CloseAccountRequestsLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    CreateOrganizationInBillingModeUnsupportedRegion,
    #[allow(missing_docs)] // documentation missing in model
    DelegatedAdministratorExistsForThisService,
    #[allow(missing_docs)] // documentation missing in model
    EmailVerificationCodeExpired,
    #[allow(missing_docs)] // documentation missing in model
    HandshakeRateLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    InvalidPaymentInstrument,
    #[allow(missing_docs)] // documentation missing in model
    MasterAccountAddressDoesNotMatchMarketplace,
    #[allow(missing_docs)] // documentation missing in model
    MasterAccountMissingBusinessLicense,
    #[allow(missing_docs)] // documentation missing in model
    MasterAccountMissingContactInfo,
    #[allow(missing_docs)] // documentation missing in model
    MasterAccountNotGovcloudEnabled,
    #[allow(missing_docs)] // documentation missing in model
    MasterAccountPaymentInstrumentRequired,
    #[allow(missing_docs)] // documentation missing in model
    MaxDelegatedAdministratorsForServiceLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    MaxPolicyTypeAttachmentLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    MaxTagLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    MemberAccountPaymentInstrumentRequired,
    #[allow(missing_docs)] // documentation missing in model
    MinPolicyTypeAttachmentLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    OrganizationNotInAllFeaturesMode,
    #[allow(missing_docs)] // documentation missing in model
    OuDepthLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    OuNumberLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    PolicyContentLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    PolicyNumberLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    ServiceAccessNotEnabled,
    #[allow(missing_docs)] // documentation missing in model
    TagPolicyViolation,
    #[allow(missing_docs)] // documentation missing in model
    WaitPeriodActive,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ConstraintViolationExceptionReason {
    fn from(s: &str) -> Self {
        match s {
                        "ACCOUNT_CANNOT_LEAVE_ORGANIZATION" => ConstraintViolationExceptionReason::AccountCannotLeaveOrganization,
"ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA" => ConstraintViolationExceptionReason::AccountCannotLeaveWithoutEula,
"ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION" => ConstraintViolationExceptionReason::AccountCannotLeaveWithoutPhoneVerification,
"ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::AccountCreationRateLimitExceeded,
"ACCOUNT_NUMBER_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::AccountNumberLimitExceeded,
"CANNOT_CLOSE_MANAGEMENT_ACCOUNT" => ConstraintViolationExceptionReason::CannotCloseManagementAccount,
"CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR" => ConstraintViolationExceptionReason::CannotRegisterMasterAsDelegatedAdministrator,
"CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG" => ConstraintViolationExceptionReason::CannotRemoveDelegatedAdministratorFromOrg,
"CLOSE_ACCOUNT_QUOTA_EXCEEDED" => ConstraintViolationExceptionReason::CloseAccountQuotaExceeded,
"CLOSE_ACCOUNT_REQUESTS_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::CloseAccountRequestsLimitExceeded,
"CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION" => ConstraintViolationExceptionReason::CreateOrganizationInBillingModeUnsupportedRegion,
"DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE" => ConstraintViolationExceptionReason::DelegatedAdministratorExistsForThisService,
"EMAIL_VERIFICATION_CODE_EXPIRED" => ConstraintViolationExceptionReason::EmailVerificationCodeExpired,
"HANDSHAKE_RATE_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::HandshakeRateLimitExceeded,
"INVALID_PAYMENT_INSTRUMENT" => ConstraintViolationExceptionReason::InvalidPaymentInstrument,
"MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE" => ConstraintViolationExceptionReason::MasterAccountAddressDoesNotMatchMarketplace,
"MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE" => ConstraintViolationExceptionReason::MasterAccountMissingBusinessLicense,
"MASTER_ACCOUNT_MISSING_CONTACT_INFO" => ConstraintViolationExceptionReason::MasterAccountMissingContactInfo,
"MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED" => ConstraintViolationExceptionReason::MasterAccountNotGovcloudEnabled,
"MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED" => ConstraintViolationExceptionReason::MasterAccountPaymentInstrumentRequired,
"MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::MaxDelegatedAdministratorsForServiceLimitExceeded,
"MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::MaxPolicyTypeAttachmentLimitExceeded,
"MAX_TAG_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::MaxTagLimitExceeded,
"MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED" => ConstraintViolationExceptionReason::MemberAccountPaymentInstrumentRequired,
"MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::MinPolicyTypeAttachmentLimitExceeded,
"ORGANIZATION_NOT_IN_ALL_FEATURES_MODE" => ConstraintViolationExceptionReason::OrganizationNotInAllFeaturesMode,
"OU_DEPTH_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::OuDepthLimitExceeded,
"OU_NUMBER_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::OuNumberLimitExceeded,
"POLICY_CONTENT_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::PolicyContentLimitExceeded,
"POLICY_NUMBER_LIMIT_EXCEEDED" => ConstraintViolationExceptionReason::PolicyNumberLimitExceeded,
"SERVICE_ACCESS_NOT_ENABLED" => ConstraintViolationExceptionReason::ServiceAccessNotEnabled,
"TAG_POLICY_VIOLATION" => ConstraintViolationExceptionReason::TagPolicyViolation,
"WAIT_PERIOD_ACTIVE" => ConstraintViolationExceptionReason::WaitPeriodActive,
other => ConstraintViolationExceptionReason::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
                    }
    }
}
impl std::str::FromStr for ConstraintViolationExceptionReason {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ConstraintViolationExceptionReason::from(s))
    }
}
impl ConstraintViolationExceptionReason {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
    ConstraintViolationExceptionReason::AccountCannotLeaveOrganization => "ACCOUNT_CANNOT_LEAVE_ORGANIZATION",
    ConstraintViolationExceptionReason::AccountCannotLeaveWithoutEula => "ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA",
    ConstraintViolationExceptionReason::AccountCannotLeaveWithoutPhoneVerification => "ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION",
    ConstraintViolationExceptionReason::AccountCreationRateLimitExceeded => "ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::AccountNumberLimitExceeded => "ACCOUNT_NUMBER_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::CannotCloseManagementAccount => "CANNOT_CLOSE_MANAGEMENT_ACCOUNT",
    ConstraintViolationExceptionReason::CannotRegisterMasterAsDelegatedAdministrator => "CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR",
    ConstraintViolationExceptionReason::CannotRemoveDelegatedAdministratorFromOrg => "CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG",
    ConstraintViolationExceptionReason::CloseAccountQuotaExceeded => "CLOSE_ACCOUNT_QUOTA_EXCEEDED",
    ConstraintViolationExceptionReason::CloseAccountRequestsLimitExceeded => "CLOSE_ACCOUNT_REQUESTS_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::CreateOrganizationInBillingModeUnsupportedRegion => "CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION",
    ConstraintViolationExceptionReason::DelegatedAdministratorExistsForThisService => "DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE",
    ConstraintViolationExceptionReason::EmailVerificationCodeExpired => "EMAIL_VERIFICATION_CODE_EXPIRED",
    ConstraintViolationExceptionReason::HandshakeRateLimitExceeded => "HANDSHAKE_RATE_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::InvalidPaymentInstrument => "INVALID_PAYMENT_INSTRUMENT",
    ConstraintViolationExceptionReason::MasterAccountAddressDoesNotMatchMarketplace => "MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE",
    ConstraintViolationExceptionReason::MasterAccountMissingBusinessLicense => "MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE",
    ConstraintViolationExceptionReason::MasterAccountMissingContactInfo => "MASTER_ACCOUNT_MISSING_CONTACT_INFO",
    ConstraintViolationExceptionReason::MasterAccountNotGovcloudEnabled => "MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED",
    ConstraintViolationExceptionReason::MasterAccountPaymentInstrumentRequired => "MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED",
    ConstraintViolationExceptionReason::MaxDelegatedAdministratorsForServiceLimitExceeded => "MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::MaxPolicyTypeAttachmentLimitExceeded => "MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::MaxTagLimitExceeded => "MAX_TAG_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::MemberAccountPaymentInstrumentRequired => "MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED",
    ConstraintViolationExceptionReason::MinPolicyTypeAttachmentLimitExceeded => "MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::OrganizationNotInAllFeaturesMode => "ORGANIZATION_NOT_IN_ALL_FEATURES_MODE",
    ConstraintViolationExceptionReason::OuDepthLimitExceeded => "OU_DEPTH_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::OuNumberLimitExceeded => "OU_NUMBER_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::PolicyContentLimitExceeded => "POLICY_CONTENT_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::PolicyNumberLimitExceeded => "POLICY_NUMBER_LIMIT_EXCEEDED",
    ConstraintViolationExceptionReason::ServiceAccessNotEnabled => "SERVICE_ACCESS_NOT_ENABLED",
    ConstraintViolationExceptionReason::TagPolicyViolation => "TAG_POLICY_VIOLATION",
    ConstraintViolationExceptionReason::WaitPeriodActive => "WAIT_PERIOD_ACTIVE",
    ConstraintViolationExceptionReason::Unknown(value) => value.as_str()
}
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCOUNT_CANNOT_LEAVE_ORGANIZATION",
            "ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA",
            "ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION",
            "ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED",
            "ACCOUNT_NUMBER_LIMIT_EXCEEDED",
            "CANNOT_CLOSE_MANAGEMENT_ACCOUNT",
            "CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR",
            "CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG",
            "CLOSE_ACCOUNT_QUOTA_EXCEEDED",
            "CLOSE_ACCOUNT_REQUESTS_LIMIT_EXCEEDED",
            "CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION",
            "DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE",
            "EMAIL_VERIFICATION_CODE_EXPIRED",
            "HANDSHAKE_RATE_LIMIT_EXCEEDED",
            "INVALID_PAYMENT_INSTRUMENT",
            "MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE",
            "MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE",
            "MASTER_ACCOUNT_MISSING_CONTACT_INFO",
            "MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED",
            "MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED",
            "MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED",
            "MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED",
            "MAX_TAG_LIMIT_EXCEEDED",
            "MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED",
            "MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED",
            "ORGANIZATION_NOT_IN_ALL_FEATURES_MODE",
            "OU_DEPTH_LIMIT_EXCEEDED",
            "OU_NUMBER_LIMIT_EXCEEDED",
            "POLICY_CONTENT_LIMIT_EXCEEDED",
            "POLICY_NUMBER_LIMIT_EXCEEDED",
            "SERVICE_ACCESS_NOT_ENABLED",
            "TAG_POLICY_VIOLATION",
            "WAIT_PERIOD_ACTIVE",
        ]
    }
}
impl AsRef<str> for ConstraintViolationExceptionReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
