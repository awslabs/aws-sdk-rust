// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains rules to be applied to the affected accounts. Policies can be attached directly to accounts, or to roots and OUs to affect all accounts in those hierarchies.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Policy {
    /// <p>A structure that contains additional details about the policy.</p>
    #[doc(hidden)]
    pub policy_summary: std::option::Option<crate::types::PolicySummary>,
    /// <p>The text content of the policy.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
}
impl Policy {
    /// <p>A structure that contains additional details about the policy.</p>
    pub fn policy_summary(&self) -> std::option::Option<&crate::types::PolicySummary> {
        self.policy_summary.as_ref()
    }
    /// <p>The text content of the policy.</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
}
impl Policy {
    /// Creates a new builder-style object to manufacture [`Policy`](crate::types::Policy).
    pub fn builder() -> crate::types::builders::PolicyBuilder {
        crate::types::builders::PolicyBuilder::default()
    }
}

/// A builder for [`Policy`](crate::types::Policy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PolicyBuilder {
    pub(crate) policy_summary: std::option::Option<crate::types::PolicySummary>,
    pub(crate) content: std::option::Option<std::string::String>,
}
impl PolicyBuilder {
    /// <p>A structure that contains additional details about the policy.</p>
    pub fn policy_summary(mut self, input: crate::types::PolicySummary) -> Self {
        self.policy_summary = Some(input);
        self
    }
    /// <p>A structure that contains additional details about the policy.</p>
    pub fn set_policy_summary(
        mut self,
        input: std::option::Option<crate::types::PolicySummary>,
    ) -> Self {
        self.policy_summary = input;
        self
    }
    /// <p>The text content of the policy.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>The text content of the policy.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// Consumes the builder and constructs a [`Policy`](crate::types::Policy).
    pub fn build(self) -> crate::types::Policy {
        crate::types::Policy {
            policy_summary: self.policy_summary,
            content: self.content,
        }
    }
}
