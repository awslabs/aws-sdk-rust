// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about an organization. An organization is a collection of accounts that are centrally managed together using consolidated billing, organized hierarchically with organizational units (OUs), and controlled with policies .</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Organization {
    /// <p>The unique identifier (ID) of an organization.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organization ID string requires "o-" followed by from 10 to 32 lowercase letters or digits.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an organization.</p>
    /// <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN Formats Supported by Organizations</a> in the <i>Amazon Web Services Service Authorization Reference</i>.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>Specifies the functionality that currently is available to the organization. If set to "ALL", then all features are enabled and policies can be applied to accounts in the organization. If set to "CONSOLIDATED_BILLING", then only consolidated billing functionality is available. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features in Your Organization</a> in the <i>Organizations User Guide</i>.</p>
    #[doc(hidden)]
    pub feature_set: std::option::Option<crate::types::OrganizationFeatureSet>,
    /// <p>The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization.</p>
    /// <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN Formats Supported by Organizations</a> in the <i>Amazon Web Services Service Authorization Reference</i>.</p>
    #[doc(hidden)]
    pub master_account_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier (ID) of the management account of an organization.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12 digits.</p>
    #[doc(hidden)]
    pub master_account_id: std::option::Option<std::string::String>,
    /// <p>The email address that is associated with the Amazon Web Services account that is designated as the management account for the organization.</p>
    #[doc(hidden)]
    pub master_account_email: std::option::Option<std::string::String>,
    /// <important>
    /// <p>Do not use. This field is deprecated and doesn't provide complete information about the policies in your organization.</p>
    /// </important>
    /// <p>To determine the policies that are enabled and available for use in your organization, use the <code>ListRoots</code> operation instead.</p>
    #[doc(hidden)]
    pub available_policy_types: std::option::Option<std::vec::Vec<crate::types::PolicyTypeSummary>>,
}
impl Organization {
    /// <p>The unique identifier (ID) of an organization.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organization ID string requires "o-" followed by from 10 to 32 lowercase letters or digits.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an organization.</p>
    /// <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN Formats Supported by Organizations</a> in the <i>Amazon Web Services Service Authorization Reference</i>.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Specifies the functionality that currently is available to the organization. If set to "ALL", then all features are enabled and policies can be applied to accounts in the organization. If set to "CONSOLIDATED_BILLING", then only consolidated billing functionality is available. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features in Your Organization</a> in the <i>Organizations User Guide</i>.</p>
    pub fn feature_set(&self) -> std::option::Option<&crate::types::OrganizationFeatureSet> {
        self.feature_set.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization.</p>
    /// <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN Formats Supported by Organizations</a> in the <i>Amazon Web Services Service Authorization Reference</i>.</p>
    pub fn master_account_arn(&self) -> std::option::Option<&str> {
        self.master_account_arn.as_deref()
    }
    /// <p>The unique identifier (ID) of the management account of an organization.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12 digits.</p>
    pub fn master_account_id(&self) -> std::option::Option<&str> {
        self.master_account_id.as_deref()
    }
    /// <p>The email address that is associated with the Amazon Web Services account that is designated as the management account for the organization.</p>
    pub fn master_account_email(&self) -> std::option::Option<&str> {
        self.master_account_email.as_deref()
    }
    /// <important>
    /// <p>Do not use. This field is deprecated and doesn't provide complete information about the policies in your organization.</p>
    /// </important>
    /// <p>To determine the policies that are enabled and available for use in your organization, use the <code>ListRoots</code> operation instead.</p>
    pub fn available_policy_types(
        &self,
    ) -> std::option::Option<&[crate::types::PolicyTypeSummary]> {
        self.available_policy_types.as_deref()
    }
}
impl std::fmt::Debug for Organization {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Organization");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("feature_set", &self.feature_set);
        formatter.field("master_account_arn", &self.master_account_arn);
        formatter.field("master_account_id", &self.master_account_id);
        formatter.field("master_account_email", &"*** Sensitive Data Redacted ***");
        formatter.field("available_policy_types", &self.available_policy_types);
        formatter.finish()
    }
}
impl Organization {
    /// Creates a new builder-style object to manufacture [`Organization`](crate::types::Organization).
    pub fn builder() -> crate::types::builders::OrganizationBuilder {
        crate::types::builders::OrganizationBuilder::default()
    }
}

/// A builder for [`Organization`](crate::types::Organization).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct OrganizationBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) feature_set: std::option::Option<crate::types::OrganizationFeatureSet>,
    pub(crate) master_account_arn: std::option::Option<std::string::String>,
    pub(crate) master_account_id: std::option::Option<std::string::String>,
    pub(crate) master_account_email: std::option::Option<std::string::String>,
    pub(crate) available_policy_types:
        std::option::Option<std::vec::Vec<crate::types::PolicyTypeSummary>>,
}
impl OrganizationBuilder {
    /// <p>The unique identifier (ID) of an organization.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organization ID string requires "o-" followed by from 10 to 32 lowercase letters or digits.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier (ID) of an organization.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organization ID string requires "o-" followed by from 10 to 32 lowercase letters or digits.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an organization.</p>
    /// <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN Formats Supported by Organizations</a> in the <i>Amazon Web Services Service Authorization Reference</i>.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an organization.</p>
    /// <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN Formats Supported by Organizations</a> in the <i>Amazon Web Services Service Authorization Reference</i>.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Specifies the functionality that currently is available to the organization. If set to "ALL", then all features are enabled and policies can be applied to accounts in the organization. If set to "CONSOLIDATED_BILLING", then only consolidated billing functionality is available. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features in Your Organization</a> in the <i>Organizations User Guide</i>.</p>
    pub fn feature_set(mut self, input: crate::types::OrganizationFeatureSet) -> Self {
        self.feature_set = Some(input);
        self
    }
    /// <p>Specifies the functionality that currently is available to the organization. If set to "ALL", then all features are enabled and policies can be applied to accounts in the organization. If set to "CONSOLIDATED_BILLING", then only consolidated billing functionality is available. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features in Your Organization</a> in the <i>Organizations User Guide</i>.</p>
    pub fn set_feature_set(
        mut self,
        input: std::option::Option<crate::types::OrganizationFeatureSet>,
    ) -> Self {
        self.feature_set = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization.</p>
    /// <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN Formats Supported by Organizations</a> in the <i>Amazon Web Services Service Authorization Reference</i>.</p>
    pub fn master_account_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_account_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization.</p>
    /// <p>For more information about ARNs in Organizations, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies">ARN Formats Supported by Organizations</a> in the <i>Amazon Web Services Service Authorization Reference</i>.</p>
    pub fn set_master_account_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.master_account_arn = input;
        self
    }
    /// <p>The unique identifier (ID) of the management account of an organization.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12 digits.</p>
    pub fn master_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_account_id = Some(input.into());
        self
    }
    /// <p>The unique identifier (ID) of the management account of an organization.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12 digits.</p>
    pub fn set_master_account_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.master_account_id = input;
        self
    }
    /// <p>The email address that is associated with the Amazon Web Services account that is designated as the management account for the organization.</p>
    pub fn master_account_email(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_account_email = Some(input.into());
        self
    }
    /// <p>The email address that is associated with the Amazon Web Services account that is designated as the management account for the organization.</p>
    pub fn set_master_account_email(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.master_account_email = input;
        self
    }
    /// Appends an item to `available_policy_types`.
    ///
    /// To override the contents of this collection use [`set_available_policy_types`](Self::set_available_policy_types).
    ///
    /// <important>
    /// <p>Do not use. This field is deprecated and doesn't provide complete information about the policies in your organization.</p>
    /// </important>
    /// <p>To determine the policies that are enabled and available for use in your organization, use the <code>ListRoots</code> operation instead.</p>
    pub fn available_policy_types(mut self, input: crate::types::PolicyTypeSummary) -> Self {
        let mut v = self.available_policy_types.unwrap_or_default();
        v.push(input);
        self.available_policy_types = Some(v);
        self
    }
    /// <important>
    /// <p>Do not use. This field is deprecated and doesn't provide complete information about the policies in your organization.</p>
    /// </important>
    /// <p>To determine the policies that are enabled and available for use in your organization, use the <code>ListRoots</code> operation instead.</p>
    pub fn set_available_policy_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PolicyTypeSummary>>,
    ) -> Self {
        self.available_policy_types = input;
        self
    }
    /// Consumes the builder and constructs a [`Organization`](crate::types::Organization).
    pub fn build(self) -> crate::types::Organization {
        crate::types::Organization {
            id: self.id,
            arn: self.arn,
            feature_set: self.feature_set,
            master_account_arn: self.master_account_arn,
            master_account_id: self.master_account_id,
            master_account_email: self.master_account_email,
            available_policy_types: self.available_policy_types,
        }
    }
}
impl std::fmt::Debug for OrganizationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("OrganizationBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("feature_set", &self.feature_set);
        formatter.field("master_account_arn", &self.master_account_arn);
        formatter.field("master_account_id", &self.master_account_id);
        formatter.field("master_account_email", &"*** Sensitive Data Redacted ***");
        formatter.field("available_policy_types", &self.available_policy_types);
        formatter.finish()
    }
}
