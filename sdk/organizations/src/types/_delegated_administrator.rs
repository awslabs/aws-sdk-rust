// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the delegated administrator.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DelegatedAdministrator {
    /// <p>The unique identifier (ID) of the delegated administrator's account.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the delegated administrator's account.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The email address that is associated with the delegated administrator's Amazon Web Services account.</p>
    pub email: ::std::option::Option<::std::string::String>,
    /// <p>The friendly name of the delegated administrator's account.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the delegated administrator's account in the organization.</p>
    pub status: ::std::option::Option<crate::types::AccountStatus>,
    /// <p>Each state represents a specific phase in the account lifecycle. Use this information to manage account access, automate workflows, or trigger actions based on account state changes.</p>
    /// <p>For more information about account states and their implications, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_account_state.html">Monitor the state of your Amazon Web Services accounts </a> in the <i>Organizations User Guide</i>.</p>
    pub state: ::std::option::Option<crate::types::AccountState>,
    /// <p>The method by which the delegated administrator's account joined the organization.</p>
    pub joined_method: ::std::option::Option<crate::types::AccountJoinedMethod>,
    /// <p>The date when the delegated administrator's account became a part of the organization.</p>
    pub joined_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date when the account was made a delegated administrator.</p>
    pub delegation_enabled_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DelegatedAdministrator {
    /// <p>The unique identifier (ID) of the delegated administrator's account.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the delegated administrator's account.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The email address that is associated with the delegated administrator's Amazon Web Services account.</p>
    pub fn email(&self) -> ::std::option::Option<&str> {
        self.email.as_deref()
    }
    /// <p>The friendly name of the delegated administrator's account.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of the delegated administrator's account in the organization.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AccountStatus> {
        self.status.as_ref()
    }
    /// <p>Each state represents a specific phase in the account lifecycle. Use this information to manage account access, automate workflows, or trigger actions based on account state changes.</p>
    /// <p>For more information about account states and their implications, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_account_state.html">Monitor the state of your Amazon Web Services accounts </a> in the <i>Organizations User Guide</i>.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::AccountState> {
        self.state.as_ref()
    }
    /// <p>The method by which the delegated administrator's account joined the organization.</p>
    pub fn joined_method(&self) -> ::std::option::Option<&crate::types::AccountJoinedMethod> {
        self.joined_method.as_ref()
    }
    /// <p>The date when the delegated administrator's account became a part of the organization.</p>
    pub fn joined_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.joined_timestamp.as_ref()
    }
    /// <p>The date when the account was made a delegated administrator.</p>
    pub fn delegation_enabled_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.delegation_enabled_date.as_ref()
    }
}
impl ::std::fmt::Debug for DelegatedAdministrator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DelegatedAdministrator");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("state", &self.state);
        formatter.field("joined_method", &self.joined_method);
        formatter.field("joined_timestamp", &self.joined_timestamp);
        formatter.field("delegation_enabled_date", &self.delegation_enabled_date);
        formatter.finish()
    }
}
impl DelegatedAdministrator {
    /// Creates a new builder-style object to manufacture [`DelegatedAdministrator`](crate::types::DelegatedAdministrator).
    pub fn builder() -> crate::types::builders::DelegatedAdministratorBuilder {
        crate::types::builders::DelegatedAdministratorBuilder::default()
    }
}

/// A builder for [`DelegatedAdministrator`](crate::types::DelegatedAdministrator).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DelegatedAdministratorBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) email: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AccountStatus>,
    pub(crate) state: ::std::option::Option<crate::types::AccountState>,
    pub(crate) joined_method: ::std::option::Option<crate::types::AccountJoinedMethod>,
    pub(crate) joined_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) delegation_enabled_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DelegatedAdministratorBuilder {
    /// <p>The unique identifier (ID) of the delegated administrator's account.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier (ID) of the delegated administrator's account.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier (ID) of the delegated administrator's account.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the delegated administrator's account.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the delegated administrator's account.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the delegated administrator's account.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The email address that is associated with the delegated administrator's Amazon Web Services account.</p>
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address that is associated with the delegated administrator's Amazon Web Services account.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The email address that is associated with the delegated administrator's Amazon Web Services account.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.email
    }
    /// <p>The friendly name of the delegated administrator's account.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The friendly name of the delegated administrator's account.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The friendly name of the delegated administrator's account.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the delegated administrator's account in the organization.</p>
    pub fn status(mut self, input: crate::types::AccountStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the delegated administrator's account in the organization.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AccountStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the delegated administrator's account in the organization.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AccountStatus> {
        &self.status
    }
    /// <p>Each state represents a specific phase in the account lifecycle. Use this information to manage account access, automate workflows, or trigger actions based on account state changes.</p>
    /// <p>For more information about account states and their implications, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_account_state.html">Monitor the state of your Amazon Web Services accounts </a> in the <i>Organizations User Guide</i>.</p>
    pub fn state(mut self, input: crate::types::AccountState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Each state represents a specific phase in the account lifecycle. Use this information to manage account access, automate workflows, or trigger actions based on account state changes.</p>
    /// <p>For more information about account states and their implications, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_account_state.html">Monitor the state of your Amazon Web Services accounts </a> in the <i>Organizations User Guide</i>.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::AccountState>) -> Self {
        self.state = input;
        self
    }
    /// <p>Each state represents a specific phase in the account lifecycle. Use this information to manage account access, automate workflows, or trigger actions based on account state changes.</p>
    /// <p>For more information about account states and their implications, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_account_state.html">Monitor the state of your Amazon Web Services accounts </a> in the <i>Organizations User Guide</i>.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::AccountState> {
        &self.state
    }
    /// <p>The method by which the delegated administrator's account joined the organization.</p>
    pub fn joined_method(mut self, input: crate::types::AccountJoinedMethod) -> Self {
        self.joined_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method by which the delegated administrator's account joined the organization.</p>
    pub fn set_joined_method(mut self, input: ::std::option::Option<crate::types::AccountJoinedMethod>) -> Self {
        self.joined_method = input;
        self
    }
    /// <p>The method by which the delegated administrator's account joined the organization.</p>
    pub fn get_joined_method(&self) -> &::std::option::Option<crate::types::AccountJoinedMethod> {
        &self.joined_method
    }
    /// <p>The date when the delegated administrator's account became a part of the organization.</p>
    pub fn joined_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.joined_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the delegated administrator's account became a part of the organization.</p>
    pub fn set_joined_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.joined_timestamp = input;
        self
    }
    /// <p>The date when the delegated administrator's account became a part of the organization.</p>
    pub fn get_joined_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.joined_timestamp
    }
    /// <p>The date when the account was made a delegated administrator.</p>
    pub fn delegation_enabled_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.delegation_enabled_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the account was made a delegated administrator.</p>
    pub fn set_delegation_enabled_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.delegation_enabled_date = input;
        self
    }
    /// <p>The date when the account was made a delegated administrator.</p>
    pub fn get_delegation_enabled_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.delegation_enabled_date
    }
    /// Consumes the builder and constructs a [`DelegatedAdministrator`](crate::types::DelegatedAdministrator).
    pub fn build(self) -> crate::types::DelegatedAdministrator {
        crate::types::DelegatedAdministrator {
            id: self.id,
            arn: self.arn,
            email: self.email,
            name: self.name,
            status: self.status,
            state: self.state,
            joined_method: self.joined_method,
            joined_timestamp: self.joined_timestamp,
            delegation_enabled_date: self.delegation_enabled_date,
        }
    }
}
impl ::std::fmt::Debug for DelegatedAdministratorBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DelegatedAdministratorBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("state", &self.state);
        formatter.field("joined_method", &self.joined_method);
        formatter.field("joined_timestamp", &self.joined_timestamp);
        formatter.field("delegation_enabled_date", &self.delegation_enabled_date);
        formatter.finish()
    }
}
