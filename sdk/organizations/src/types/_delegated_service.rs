// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the Amazon Web Services service for which the account is a delegated administrator.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DelegatedService {
    /// <p>The name of an Amazon Web Services service that can request an operation for the specified service. This is typically in the form of a URL, such as: <code> <i>servicename</i>.amazonaws.com</code>.</p>
    #[doc(hidden)]
    pub service_principal: std::option::Option<std::string::String>,
    /// <p>The date that the account became a delegated administrator for this service. </p>
    #[doc(hidden)]
    pub delegation_enabled_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl DelegatedService {
    /// <p>The name of an Amazon Web Services service that can request an operation for the specified service. This is typically in the form of a URL, such as: <code> <i>servicename</i>.amazonaws.com</code>.</p>
    pub fn service_principal(&self) -> std::option::Option<&str> {
        self.service_principal.as_deref()
    }
    /// <p>The date that the account became a delegated administrator for this service. </p>
    pub fn delegation_enabled_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.delegation_enabled_date.as_ref()
    }
}
impl DelegatedService {
    /// Creates a new builder-style object to manufacture [`DelegatedService`](crate::types::DelegatedService).
    pub fn builder() -> crate::types::builders::DelegatedServiceBuilder {
        crate::types::builders::DelegatedServiceBuilder::default()
    }
}

/// A builder for [`DelegatedService`](crate::types::DelegatedService).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DelegatedServiceBuilder {
    pub(crate) service_principal: std::option::Option<std::string::String>,
    pub(crate) delegation_enabled_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl DelegatedServiceBuilder {
    /// <p>The name of an Amazon Web Services service that can request an operation for the specified service. This is typically in the form of a URL, such as: <code> <i>servicename</i>.amazonaws.com</code>.</p>
    pub fn service_principal(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_principal = Some(input.into());
        self
    }
    /// <p>The name of an Amazon Web Services service that can request an operation for the specified service. This is typically in the form of a URL, such as: <code> <i>servicename</i>.amazonaws.com</code>.</p>
    pub fn set_service_principal(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.service_principal = input;
        self
    }
    /// <p>The date that the account became a delegated administrator for this service. </p>
    pub fn delegation_enabled_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.delegation_enabled_date = Some(input);
        self
    }
    /// <p>The date that the account became a delegated administrator for this service. </p>
    pub fn set_delegation_enabled_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.delegation_enabled_date = input;
        self
    }
    /// Consumes the builder and constructs a [`DelegatedService`](crate::types::DelegatedService).
    pub fn build(self) -> crate::types::DelegatedService {
        crate::types::DelegatedService {
            service_principal: self.service_principal,
            delegation_enabled_date: self.delegation_enabled_date,
        }
    }
}
