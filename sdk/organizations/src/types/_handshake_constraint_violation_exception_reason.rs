// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `HandshakeConstraintViolationExceptionReason`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let handshakeconstraintviolationexceptionreason = unimplemented!();
/// match handshakeconstraintviolationexceptionreason {
///     HandshakeConstraintViolationExceptionReason::AccountNumberLimitExceeded => { /* ... */ },
///     HandshakeConstraintViolationExceptionReason::AlreadyInAnOrganization => { /* ... */ },
///     HandshakeConstraintViolationExceptionReason::HandshakeRateLimitExceeded => { /* ... */ },
///     HandshakeConstraintViolationExceptionReason::InviteDisabledDuringEnableAllFeatures => { /* ... */ },
///     HandshakeConstraintViolationExceptionReason::ManagementAccountEmailNotVerified => { /* ... */ },
///     HandshakeConstraintViolationExceptionReason::OrganizationAlreadyHasAllFeatures => { /* ... */ },
///     HandshakeConstraintViolationExceptionReason::OrganizationFromDifferentSellerOfRecord => { /* ... */ },
///     HandshakeConstraintViolationExceptionReason::OrganizationIsAlreadyPendingAllFeaturesMigration => { /* ... */ },
///     HandshakeConstraintViolationExceptionReason::OrganizationMembershipChangeRateLimitExceeded => { /* ... */ },
///     HandshakeConstraintViolationExceptionReason::PaymentInstrumentRequired => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `handshakeconstraintviolationexceptionreason` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `HandshakeConstraintViolationExceptionReason::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `HandshakeConstraintViolationExceptionReason::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `HandshakeConstraintViolationExceptionReason::NewFeature` is defined.
/// Specifically, when `handshakeconstraintviolationexceptionreason` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `HandshakeConstraintViolationExceptionReason::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum HandshakeConstraintViolationExceptionReason {
    #[allow(missing_docs)] // documentation missing in model
    AccountNumberLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    AlreadyInAnOrganization,
    #[allow(missing_docs)] // documentation missing in model
    HandshakeRateLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    InviteDisabledDuringEnableAllFeatures,
    #[allow(missing_docs)] // documentation missing in model
    ManagementAccountEmailNotVerified,
    #[allow(missing_docs)] // documentation missing in model
    OrganizationAlreadyHasAllFeatures,
    #[allow(missing_docs)] // documentation missing in model
    OrganizationFromDifferentSellerOfRecord,
    #[allow(missing_docs)] // documentation missing in model
    OrganizationIsAlreadyPendingAllFeaturesMigration,
    #[allow(missing_docs)] // documentation missing in model
    OrganizationMembershipChangeRateLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    PaymentInstrumentRequired,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for HandshakeConstraintViolationExceptionReason {
    fn from(s: &str) -> Self {
        match s {
                        "ACCOUNT_NUMBER_LIMIT_EXCEEDED" => HandshakeConstraintViolationExceptionReason::AccountNumberLimitExceeded,
"ALREADY_IN_AN_ORGANIZATION" => HandshakeConstraintViolationExceptionReason::AlreadyInAnOrganization,
"HANDSHAKE_RATE_LIMIT_EXCEEDED" => HandshakeConstraintViolationExceptionReason::HandshakeRateLimitExceeded,
"INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES" => HandshakeConstraintViolationExceptionReason::InviteDisabledDuringEnableAllFeatures,
"MANAGEMENT_ACCOUNT_EMAIL_NOT_VERIFIED" => HandshakeConstraintViolationExceptionReason::ManagementAccountEmailNotVerified,
"ORGANIZATION_ALREADY_HAS_ALL_FEATURES" => HandshakeConstraintViolationExceptionReason::OrganizationAlreadyHasAllFeatures,
"ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD" => HandshakeConstraintViolationExceptionReason::OrganizationFromDifferentSellerOfRecord,
"ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION" => HandshakeConstraintViolationExceptionReason::OrganizationIsAlreadyPendingAllFeaturesMigration,
"ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED" => HandshakeConstraintViolationExceptionReason::OrganizationMembershipChangeRateLimitExceeded,
"PAYMENT_INSTRUMENT_REQUIRED" => HandshakeConstraintViolationExceptionReason::PaymentInstrumentRequired,
other => HandshakeConstraintViolationExceptionReason::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
                    }
    }
}
impl std::str::FromStr for HandshakeConstraintViolationExceptionReason {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(HandshakeConstraintViolationExceptionReason::from(s))
    }
}
impl HandshakeConstraintViolationExceptionReason {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
    HandshakeConstraintViolationExceptionReason::AccountNumberLimitExceeded => "ACCOUNT_NUMBER_LIMIT_EXCEEDED",
    HandshakeConstraintViolationExceptionReason::AlreadyInAnOrganization => "ALREADY_IN_AN_ORGANIZATION",
    HandshakeConstraintViolationExceptionReason::HandshakeRateLimitExceeded => "HANDSHAKE_RATE_LIMIT_EXCEEDED",
    HandshakeConstraintViolationExceptionReason::InviteDisabledDuringEnableAllFeatures => "INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES",
    HandshakeConstraintViolationExceptionReason::ManagementAccountEmailNotVerified => "MANAGEMENT_ACCOUNT_EMAIL_NOT_VERIFIED",
    HandshakeConstraintViolationExceptionReason::OrganizationAlreadyHasAllFeatures => "ORGANIZATION_ALREADY_HAS_ALL_FEATURES",
    HandshakeConstraintViolationExceptionReason::OrganizationFromDifferentSellerOfRecord => "ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD",
    HandshakeConstraintViolationExceptionReason::OrganizationIsAlreadyPendingAllFeaturesMigration => "ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION",
    HandshakeConstraintViolationExceptionReason::OrganizationMembershipChangeRateLimitExceeded => "ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED",
    HandshakeConstraintViolationExceptionReason::PaymentInstrumentRequired => "PAYMENT_INSTRUMENT_REQUIRED",
    HandshakeConstraintViolationExceptionReason::Unknown(value) => value.as_str()
}
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCOUNT_NUMBER_LIMIT_EXCEEDED",
            "ALREADY_IN_AN_ORGANIZATION",
            "HANDSHAKE_RATE_LIMIT_EXCEEDED",
            "INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES",
            "MANAGEMENT_ACCOUNT_EMAIL_NOT_VERIFIED",
            "ORGANIZATION_ALREADY_HAS_ALL_FEATURES",
            "ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD",
            "ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION",
            "ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED",
            "PAYMENT_INSTRUMENT_REQUIRED",
        ]
    }
}
impl AsRef<str> for HandshakeConstraintViolationExceptionReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
