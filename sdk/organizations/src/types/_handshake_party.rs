// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifies a participant in a handshake.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct HandshakeParty {
    /// <p>The unique identifier (ID) for the party.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of party.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::HandshakePartyType>,
}
impl HandshakeParty {
    /// <p>The unique identifier (ID) for the party.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of party.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::HandshakePartyType> {
        self.r#type.as_ref()
    }
}
impl std::fmt::Debug for HandshakeParty {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("HandshakeParty");
        formatter.field("id", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
impl HandshakeParty {
    /// Creates a new builder-style object to manufacture [`HandshakeParty`](crate::types::HandshakeParty).
    pub fn builder() -> crate::types::builders::HandshakePartyBuilder {
        crate::types::builders::HandshakePartyBuilder::default()
    }
}

/// A builder for [`HandshakeParty`](crate::types::HandshakeParty).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct HandshakePartyBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::HandshakePartyType>,
}
impl HandshakePartyBuilder {
    /// <p>The unique identifier (ID) for the party.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier (ID) for the party.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The type of party.</p>
    pub fn r#type(mut self, input: crate::types::HandshakePartyType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of party.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::HandshakePartyType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`HandshakeParty`](crate::types::HandshakeParty).
    pub fn build(self) -> crate::types::HandshakeParty {
        crate::types::HandshakeParty {
            id: self.id,
            r#type: self.r#type,
        }
    }
}
impl std::fmt::Debug for HandshakePartyBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("HandshakePartyBuilder");
        formatter.field("id", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
