// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The requested operation would violate the constraint identified in the reason code.</p> <note>
/// <p>Some of the reasons in the following list might not be applicable to this specific API or operation:</p>
/// </note>
/// <ul>
/// <li> <p>ACCOUNT_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the limit on the number of accounts in an organization. Note that deleted and closed accounts still count toward your limit.</p> <important>
/// <p>If you get this exception immediately after creating the organization, wait one hour and try again. If after an hour it continues to fail with this error, contact <a href="https://docs.aws.amazon.com/support/home#/">Amazon Web Services Support</a>.</p>
/// </important> </li>
/// <li> <p>ALREADY_IN_AN_ORGANIZATION: The handshake request is invalid because the invited account is already a member of an organization.</p> </li>
/// <li> <p>HANDSHAKE_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of handshakes that you can send in one day.</p> </li>
/// <li> <p>INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES: You can't issue new invitations to join an organization while it's in the process of enabling all features. You can resume inviting accounts after you finalize the process when all accounts have agreed to the change.</p> </li>
/// <li> <p>ORGANIZATION_ALREADY_HAS_ALL_FEATURES: The handshake request is invalid because the organization has already enabled all features.</p> </li>
/// <li> <p>ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION: The handshake request is invalid because the organization has already started the process to enable all features.</p> </li>
/// <li> <p>ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD: The request failed because the account is from a different marketplace than the accounts in the organization. For example, accounts with India addresses must be associated with the AISPL marketplace. All accounts in an organization must be from the same marketplace.</p> </li>
/// <li> <p>ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED: You attempted to change the membership of an account too quickly after its previous change.</p> </li>
/// <li> <p>PAYMENT_INSTRUMENT_REQUIRED: You can't complete the operation with an account that doesn't have a payment instrument, such as a credit card, associated with it.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HandshakeConstraintViolationException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub reason: std::option::Option<crate::types::HandshakeConstraintViolationExceptionReason>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl HandshakeConstraintViolationException {
    #[allow(missing_docs)] // documentation missing in model
    pub fn reason(
        &self,
    ) -> std::option::Option<&crate::types::HandshakeConstraintViolationExceptionReason> {
        self.reason.as_ref()
    }
}
impl HandshakeConstraintViolationException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for HandshakeConstraintViolationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "HandshakeConstraintViolationException")?;
        if let Some(inner_1) = &self.message {
            {
                write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for HandshakeConstraintViolationException {}
impl aws_http::request_id::RequestId
    for crate::types::error::HandshakeConstraintViolationException
{
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata
    for HandshakeConstraintViolationException
{
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl HandshakeConstraintViolationException {
    /// Creates a new builder-style object to manufacture [`HandshakeConstraintViolationException`](crate::types::error::HandshakeConstraintViolationException).
    pub fn builder() -> crate::types::error::builders::HandshakeConstraintViolationExceptionBuilder
    {
        crate::types::error::builders::HandshakeConstraintViolationExceptionBuilder::default()
    }
}

/// A builder for [`HandshakeConstraintViolationException`](crate::types::error::HandshakeConstraintViolationException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HandshakeConstraintViolationExceptionBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) reason:
        std::option::Option<crate::types::HandshakeConstraintViolationExceptionReason>,
    meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
}
impl HandshakeConstraintViolationExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn reason(
        mut self,
        input: crate::types::HandshakeConstraintViolationExceptionReason,
    ) -> Self {
        self.reason = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_reason(
        mut self,
        input: std::option::Option<crate::types::HandshakeConstraintViolationExceptionReason>,
    ) -> Self {
        self.reason = input;
        self
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(
        &mut self,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`HandshakeConstraintViolationException`](crate::types::error::HandshakeConstraintViolationException).
    pub fn build(self) -> crate::types::error::HandshakeConstraintViolationException {
        crate::types::error::HandshakeConstraintViolationException {
            message: self.message,
            reason: self.reason,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
