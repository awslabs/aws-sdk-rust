// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Sends a response to the originator of a handshake agreeing to the action proposed by
/// the handshake request.</p>
/// <p>This operation can be called only by the following principals when they also have the
/// relevant IAM permissions:</p>
/// <ul>
/// <li>
/// <p>
/// <b>Invitation to join</b> or <b>Approve all features request</b> handshakes: only a principal from
/// the member account.</p>
/// <p>The user who calls the API for an invitation to join must have the
/// <code>organizations:AcceptHandshake</code> permission. If you enabled all
/// features in the organization, the user must also have the
/// <code>iam:CreateServiceLinkedRole</code> permission so that AWS Organizations can
/// create the required service-linked role named <code>AWSServiceRoleForOrganizations</code>. For
/// more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integration_services.html#orgs_integration_service-linked-roles">AWS Organizations and Service-Linked Roles</a> in the
/// <i>AWS Organizations User Guide</i>.</p>
/// </li>
/// <li>
/// <p>
/// <b>Enable all features final confirmation</b>
/// handshake: only a principal from the management account.</p>
/// <p>For more information about invitations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html">Inviting an AWS Account to Join Your Organization</a> in the
/// <i>AWS Organizations User Guide.</i> For more information about requests to
/// enable all features in the organization, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features in Your Organization</a> in
/// the <i>AWS Organizations User Guide.</i>
/// </p>
/// </li>
/// </ul>
/// <p>After you accept a handshake, it continues to appear in the results of relevant APIs
/// for only 30 days. After that, it's deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptHandshake {
    _private: (),
}
impl AcceptHandshake {
    /// Creates a new builder-style object to manufacture [`AcceptHandshakeInput`](crate::input::AcceptHandshakeInput)
    pub fn builder() -> crate::input::accept_handshake_input::Builder {
        crate::input::accept_handshake_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptHandshake {
    type Output = std::result::Result<
        crate::output::AcceptHandshakeOutput,
        crate::error::AcceptHandshakeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_handshake_error(response)
        } else {
            crate::operation_deser::parse_accept_handshake_response(response)
        }
    }
}

/// <p>Attaches a policy to a root, an organizational unit (OU), or an individual account.
/// How the policy affects accounts depends on the type of policy. Refer to the
/// <i>AWS Organizations User Guide</i> for information about each policy type:</p>
/// <ul>
/// <li>
/// <p>
/// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
/// </p>
/// </li>
/// <li>
/// <p>
/// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
/// </p>
/// </li>
/// <li>
/// <p>
/// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
/// </p>
/// </li>
/// <li>
/// <p>
/// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
/// </p>
/// </li>
/// </ul>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AttachPolicy {
    _private: (),
}
impl AttachPolicy {
    /// Creates a new builder-style object to manufacture [`AttachPolicyInput`](crate::input::AttachPolicyInput)
    pub fn builder() -> crate::input::attach_policy_input::Builder {
        crate::input::attach_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AttachPolicy {
    type Output =
        std::result::Result<crate::output::AttachPolicyOutput, crate::error::AttachPolicyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_attach_policy_error(response)
        } else {
            crate::operation_deser::parse_attach_policy_response(response)
        }
    }
}

/// <p>Cancels a handshake. Canceling a handshake sets the handshake state to
/// <code>CANCELED</code>.</p>
/// <p>This operation can be called only from the account that originated the handshake. The recipient of the handshake can't cancel it, but can use <a>DeclineHandshake</a> instead. After a handshake is canceled, the recipient
/// can no longer respond to that handshake.</p>
/// <p>After you cancel a handshake, it continues to appear in the results of relevant APIs
/// for only 30 days. After that, it's deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelHandshake {
    _private: (),
}
impl CancelHandshake {
    /// Creates a new builder-style object to manufacture [`CancelHandshakeInput`](crate::input::CancelHandshakeInput)
    pub fn builder() -> crate::input::cancel_handshake_input::Builder {
        crate::input::cancel_handshake_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelHandshake {
    type Output = std::result::Result<
        crate::output::CancelHandshakeOutput,
        crate::error::CancelHandshakeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_handshake_error(response)
        } else {
            crate::operation_deser::parse_cancel_handshake_response(response)
        }
    }
}

/// <p>Creates an AWS account that is automatically a member of the organization whose
/// credentials made the request. This is an asynchronous request that AWS performs in the
/// background. Because <code>CreateAccount</code> operates asynchronously, it can return a
/// successful completion message even though account initialization might still be in
/// progress. You might need to wait a few minutes before you can successfully access the
/// account. To check the status of the request, do one of the following:</p>
/// <ul>
/// <li>
/// <p>Use the <code>Id</code> member of the <code>CreateAccountStatus</code>
/// response element from this operation to provide as a parameter to the <a>DescribeCreateAccountStatus</a> operation.</p>
/// </li>
/// <li>
/// <p>Check the AWS CloudTrail log for the <code>CreateAccountResult</code> event. For
/// information on using AWS CloudTrail with AWS Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_security_incident-response.html#orgs_cloudtrail-integration">Logging and monitoring in AWS Organizations</a> in the
/// <i>AWS Organizations User Guide.</i>
/// </p>
/// </li>
/// </ul>
/// <p>The user who calls the API to create an account must have the
/// <code>organizations:CreateAccount</code> permission. If you enabled all features in
/// the organization, AWS Organizations creates the required service-linked role named
/// <code>AWSServiceRoleForOrganizations</code>. For more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs">AWS Organizations and Service-Linked Roles</a> in the
/// <i>AWS Organizations User Guide</i>.</p>
/// <p>If the request includes tags, then the requester must have the
/// <code>organizations:TagResource</code> permission.</p>
/// <p>AWS Organizations preconfigures the new member account with a role (named
/// <code>OrganizationAccountAccessRole</code> by default) that grants users in the
/// management account administrator permissions in the new member account. Principals in
/// the management account can assume the role. AWS Organizations clones the company name and address
/// information for the new account from the organization's management account.</p>
/// <p>This operation can be called only from the organization's management account.</p>
/// <p>For more information about creating accounts, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html">Creating
/// an AWS Account in Your Organization</a> in the
/// <i>AWS Organizations User Guide.</i>
/// </p>
/// <important>
/// <ul>
/// <li>
/// <p>When you create an account in an organization using the AWS Organizations console,
/// API, or CLI commands, the information required for the account to operate as
/// a standalone account, such as a payment method and signing the end user
/// license agreement (EULA) is <i>not</i> automatically
/// collected. If you must remove an account from your organization later, you
/// can do so only after you provide the missing information. Follow the steps
/// at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization as a member account</a> in the
/// <i>AWS Organizations User Guide</i>.</p>
/// </li>
/// <li>
/// <p>If you get an exception that indicates that you exceeded your account
/// limits for the organization, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support</a>.</p>
/// </li>
/// <li>
/// <p>If you get an exception that indicates that the operation failed because
/// your organization is still initializing, wait one hour and then try again.
/// If the error persists, contact <a href="https://console.aws.amazon.com/support/home#/">AWS
/// Support</a>.</p>
/// </li>
/// <li>
/// <p>Using <code>CreateAccount</code> to create multiple temporary accounts
/// isn't recommended. You can only close an account from the Billing and Cost
/// Management Console, and you must be signed in as the root user. For
/// information on the requirements and process for closing an account, see
/// <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html">Closing an
/// AWS Account</a> in the
/// <i>AWS Organizations User Guide</i>.</p>
/// </li>
/// </ul>
/// </important>
/// <note>
/// <p>When you create a member account with this operation, you can choose whether to
/// create the account with the <b>IAM User and Role Access to
/// Billing Information</b> switch enabled. If you enable it, IAM users and
/// roles that have appropriate permissions can view billing information for the
/// account. If you disable it, only the account root user can access billing
/// information. For information about how to disable this switch for an account, see
/// <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html">Granting
/// Access to Your Billing Information and Tools</a>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAccount {
    _private: (),
}
impl CreateAccount {
    /// Creates a new builder-style object to manufacture [`CreateAccountInput`](crate::input::CreateAccountInput)
    pub fn builder() -> crate::input::create_account_input::Builder {
        crate::input::create_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAccount {
    type Output =
        std::result::Result<crate::output::CreateAccountOutput, crate::error::CreateAccountError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_account_error(response)
        } else {
            crate::operation_deser::parse_create_account_response(response)
        }
    }
}

/// <p>This action is available if all of the following are true:</p>
/// <ul>
/// <li>
/// <p>You're authorized to create accounts in the AWS GovCloud (US) Region. For
/// more information on the AWS GovCloud (US) Region, see the <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/welcome.html">
/// <i>AWS GovCloud User Guide</i>.</a>
/// </p>
/// </li>
/// <li>
/// <p>You already have an account in the AWS GovCloud (US) Region that is paired
/// with a management account of an organization in the commercial Region.</p>
/// </li>
/// <li>
/// <p>You call this action from the management account of your organization in the
/// commercial Region.</p>
/// </li>
/// <li>
/// <p>You have the <code>organizations:CreateGovCloudAccount</code> permission.
/// </p>
/// </li>
/// </ul>
/// <p>AWS Organizations automatically creates the required service-linked role named
/// <code>AWSServiceRoleForOrganizations</code>. For more information, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html#orgs_integrate_services-using_slrs">AWS Organizations and Service-Linked Roles</a> in the
/// <i>AWS Organizations User Guide.</i>
/// </p>
/// <p>AWS automatically enables AWS CloudTrail for AWS GovCloud (US) accounts, but you should also
/// do the following:</p>
/// <ul>
/// <li>
/// <p>Verify that AWS CloudTrail is enabled to store logs.</p>
/// </li>
/// <li>
/// <p>Create an S3 bucket for AWS CloudTrail log storage.</p>
/// <p>For more information, see <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/verifying-cloudtrail.html">Verifying AWS CloudTrail Is
/// Enabled</a> in the <i>AWS GovCloud User Guide</i>.
/// </p>
/// </li>
/// </ul>
/// <p>If the request includes tags, then the requester must have the
/// <code>organizations:TagResource</code> permission. The tags are attached to the
/// commercial account associated with the GovCloud account, rather than the GovCloud
/// account itself. To add tags to the GovCloud account, call the <a>TagResource</a> operation in the GovCloud Region after the new GovCloud
/// account exists.</p>
/// <p>You call this action from the management account of your organization in the
/// commercial Region to create a standalone AWS account in the AWS GovCloud (US)
/// Region. After the account is created, the management account of an organization in the
/// AWS GovCloud (US) Region can invite it to that organization. For more information on
/// inviting standalone accounts in the AWS GovCloud (US) to join an organization, see
/// <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html">AWS Organizations</a> in
/// the <i>AWS GovCloud User Guide.</i>
/// </p>
/// <p>Calling <code>CreateGovCloudAccount</code> is an asynchronous request that AWS
/// performs in the background. Because <code>CreateGovCloudAccount</code> operates
/// asynchronously, it can return a successful completion message even though account
/// initialization might still be in progress. You might need to wait a few minutes before
/// you can successfully access the account. To check the status of the request, do one of
/// the following:</p>
/// <ul>
/// <li>
/// <p>Use the <code>OperationId</code> response element from this operation to
/// provide as a parameter to the <a>DescribeCreateAccountStatus</a>
/// operation.</p>
/// </li>
/// <li>
/// <p>Check the AWS CloudTrail log for the <code>CreateAccountResult</code> event. For
/// information on using AWS CloudTrail with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_monitoring.html">Monitoring the Activity in Your
/// Organization</a> in the <i>AWS Organizations User Guide.</i>
/// </p>
/// </li>
/// </ul>
/// <p></p>
/// <p>When you call the <code>CreateGovCloudAccount</code> action, you create two accounts:
/// a standalone account in the AWS GovCloud (US) Region and an associated account in the
/// commercial Region for billing and support purposes. The account in the commercial Region
/// is automatically a member of the organization whose credentials made the request. Both
/// accounts are associated with the same email address.</p>
/// <p>A role is created in the new account in the commercial Region that allows the
/// management account in the organization in the commercial Region to assume it. An AWS
/// GovCloud (US) account is then created and associated with the commercial account that
/// you just created. A role is also created in the new AWS GovCloud (US) account that can
/// be assumed by the AWS GovCloud (US) account that is associated with the management
/// account of the commercial organization. For more information and to view a diagram that
/// explains how account access works, see <a href="http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html">AWS Organizations</a> in the
/// <i>AWS GovCloud User Guide.</i>
/// </p>
/// <p>For more information about creating accounts, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html">Creating
/// an AWS Account in Your Organization</a> in the
/// <i>AWS Organizations User Guide.</i>
/// </p>
/// <important>
/// <ul>
/// <li>
/// <p>When you create an account in an organization using the AWS Organizations console,
/// API, or CLI commands, the information required for the account to operate as
/// a standalone account is <i>not</i> automatically collected.
/// This includes a payment method and signing the end user license agreement
/// (EULA). If you must remove an account from your organization later, you can
/// do so only after you provide the missing information. Follow the steps at
/// <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization as a member account</a> in the
/// <i>AWS Organizations User Guide.</i>
/// </p>
/// </li>
/// <li>
/// <p>If you get an exception that indicates that you exceeded your account
/// limits for the organization, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support</a>.</p>
/// </li>
/// <li>
/// <p>If you get an exception that indicates that the operation failed because
/// your organization is still initializing, wait one hour and then try again.
/// If the error persists, contact <a href="https://console.aws.amazon.com/support/home#/">AWS
/// Support</a>.</p>
/// </li>
/// <li>
/// <p>Using <code>CreateGovCloudAccount</code> to create multiple temporary
/// accounts isn't recommended. You can only close an account from the AWS
/// Billing and Cost Management console, and you must be signed in as the root
/// user. For information on the requirements and process for closing an
/// account, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html">Closing an AWS Account</a> in the
/// <i>AWS Organizations User Guide</i>.</p>
/// </li>
/// </ul>
/// </important>
/// <note>
/// <p>When you create a member account with this operation, you can choose whether to
/// create the account with the <b>IAM User and Role Access to
/// Billing Information</b> switch enabled. If you enable it, IAM users and
/// roles that have appropriate permissions can view billing information for the
/// account. If you disable it, only the account root user can access billing
/// information. For information about how to disable this switch for an account, see
/// <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html">Granting
/// Access to Your Billing Information and Tools</a>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGovCloudAccount {
    _private: (),
}
impl CreateGovCloudAccount {
    /// Creates a new builder-style object to manufacture [`CreateGovCloudAccountInput`](crate::input::CreateGovCloudAccountInput)
    pub fn builder() -> crate::input::create_gov_cloud_account_input::Builder {
        crate::input::create_gov_cloud_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateGovCloudAccount {
    type Output = std::result::Result<
        crate::output::CreateGovCloudAccountOutput,
        crate::error::CreateGovCloudAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_gov_cloud_account_error(response)
        } else {
            crate::operation_deser::parse_create_gov_cloud_account_response(response)
        }
    }
}

/// <p>Creates an AWS organization. The account whose user is calling the
/// <code>CreateOrganization</code> operation automatically becomes the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account">management account</a> of the new organization.</p>
/// <p>This operation must be called using credentials from the account that is to become the
/// new organization's management account. The principal must also have the relevant IAM
/// permissions.</p>
/// <p>By default (or if you set the <code>FeatureSet</code> parameter to <code>ALL</code>),
/// the new organization is created with all features enabled and service control policies
/// automatically enabled in the root. If you instead choose to create the organization
/// supporting only the consolidated billing features by setting the <code>FeatureSet</code>
/// parameter to <code>CONSOLIDATED_BILLING"</code>, no policy types are enabled by default,
/// and you can't use organization policies</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateOrganization {
    _private: (),
}
impl CreateOrganization {
    /// Creates a new builder-style object to manufacture [`CreateOrganizationInput`](crate::input::CreateOrganizationInput)
    pub fn builder() -> crate::input::create_organization_input::Builder {
        crate::input::create_organization_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateOrganization {
    type Output = std::result::Result<
        crate::output::CreateOrganizationOutput,
        crate::error::CreateOrganizationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_organization_error(response)
        } else {
            crate::operation_deser::parse_create_organization_response(response)
        }
    }
}

/// <p>Creates an organizational unit (OU) within a root or parent OU. An OU is a container
/// for accounts that enables you to organize your accounts to apply policies according to
/// your business requirements. The number of levels deep that you can nest OUs is dependent
/// upon the policy types enabled for that root. For service control policies, the limit is
/// five.</p>
/// <p>For more information about OUs, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html">Managing Organizational Units</a> in the
/// <i>AWS Organizations User Guide.</i>
/// </p>
/// <p>If the request includes tags, then the requester must have the
/// <code>organizations:TagResource</code> permission.</p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateOrganizationalUnit {
    _private: (),
}
impl CreateOrganizationalUnit {
    /// Creates a new builder-style object to manufacture [`CreateOrganizationalUnitInput`](crate::input::CreateOrganizationalUnitInput)
    pub fn builder() -> crate::input::create_organizational_unit_input::Builder {
        crate::input::create_organizational_unit_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateOrganizationalUnit {
    type Output = std::result::Result<
        crate::output::CreateOrganizationalUnitOutput,
        crate::error::CreateOrganizationalUnitError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_organizational_unit_error(response)
        } else {
            crate::operation_deser::parse_create_organizational_unit_response(response)
        }
    }
}

/// <p>Creates a policy of a specified type that you can attach to a root, an organizational
/// unit (OU), or an individual AWS account.</p>
/// <p>For more information about policies and their use, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html">Managing
/// Organization Policies</a>.</p>
/// <p>If the request includes tags, then the requester must have the
/// <code>organizations:TagResource</code> permission.</p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePolicy {
    _private: (),
}
impl CreatePolicy {
    /// Creates a new builder-style object to manufacture [`CreatePolicyInput`](crate::input::CreatePolicyInput)
    pub fn builder() -> crate::input::create_policy_input::Builder {
        crate::input::create_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePolicy {
    type Output =
        std::result::Result<crate::output::CreatePolicyOutput, crate::error::CreatePolicyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_policy_error(response)
        } else {
            crate::operation_deser::parse_create_policy_response(response)
        }
    }
}

/// <p>Declines a handshake request. This sets the handshake state to <code>DECLINED</code>
/// and effectively deactivates the request.</p>
/// <p>This operation can be called only from the account that received the handshake. The originator of the handshake can use <a>CancelHandshake</a>
/// instead. The originator can't reactivate a declined request, but can reinitiate the
/// process with a new handshake request.</p>
/// <p>After you decline a handshake, it continues to appear in the results of relevant APIs
/// for only 30 days. After that, it's deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeclineHandshake {
    _private: (),
}
impl DeclineHandshake {
    /// Creates a new builder-style object to manufacture [`DeclineHandshakeInput`](crate::input::DeclineHandshakeInput)
    pub fn builder() -> crate::input::decline_handshake_input::Builder {
        crate::input::decline_handshake_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeclineHandshake {
    type Output = std::result::Result<
        crate::output::DeclineHandshakeOutput,
        crate::error::DeclineHandshakeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_decline_handshake_error(response)
        } else {
            crate::operation_deser::parse_decline_handshake_response(response)
        }
    }
}

/// <p>Deletes the organization. You can delete an organization only by using credentials
/// from the management account. The organization must be empty of member accounts.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteOrganization {
    _private: (),
}
impl DeleteOrganization {
    /// Creates a new builder-style object to manufacture [`DeleteOrganizationInput`](crate::input::DeleteOrganizationInput)
    pub fn builder() -> crate::input::delete_organization_input::Builder {
        crate::input::delete_organization_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteOrganization {
    type Output = std::result::Result<
        crate::output::DeleteOrganizationOutput,
        crate::error::DeleteOrganizationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_organization_error(response)
        } else {
            crate::operation_deser::parse_delete_organization_response(response)
        }
    }
}

/// <p>Deletes an organizational unit (OU) from a root or another OU. You must first remove
/// all accounts and child OUs from the OU that you want to delete.</p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteOrganizationalUnit {
    _private: (),
}
impl DeleteOrganizationalUnit {
    /// Creates a new builder-style object to manufacture [`DeleteOrganizationalUnitInput`](crate::input::DeleteOrganizationalUnitInput)
    pub fn builder() -> crate::input::delete_organizational_unit_input::Builder {
        crate::input::delete_organizational_unit_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteOrganizationalUnit {
    type Output = std::result::Result<
        crate::output::DeleteOrganizationalUnitOutput,
        crate::error::DeleteOrganizationalUnitError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_organizational_unit_error(response)
        } else {
            crate::operation_deser::parse_delete_organizational_unit_response(response)
        }
    }
}

/// <p>Deletes the specified policy from your organization. Before you perform this
/// operation, you must first detach the policy from all organizational units (OUs), roots,
/// and accounts.</p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePolicy {
    _private: (),
}
impl DeletePolicy {
    /// Creates a new builder-style object to manufacture [`DeletePolicyInput`](crate::input::DeletePolicyInput)
    pub fn builder() -> crate::input::delete_policy_input::Builder {
        crate::input::delete_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePolicy {
    type Output =
        std::result::Result<crate::output::DeletePolicyOutput, crate::error::DeletePolicyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_policy_error(response)
        } else {
            crate::operation_deser::parse_delete_policy_response(response)
        }
    }
}

/// <p>Removes the specified member AWS account as a delegated administrator for the
/// specified AWS service.</p>
/// <important>
/// <p>Deregistering a delegated administrator can have unintended impacts on the
/// functionality of the enabled AWS service. See the documentation for the enabled
/// service before you deregister a delegated administrator so that you understand any
/// potential impacts.</p>
/// </important>
/// <p>You can run this action only for AWS services that support this
/// feature. For a current list of services that support it, see the column <i>Supports
/// Delegated Administrator</i> in the table at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html">AWS Services that you can use with
/// AWS Organizations</a> in the <i>AWS Organizations User Guide.</i>
/// </p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterDelegatedAdministrator {
    _private: (),
}
impl DeregisterDelegatedAdministrator {
    /// Creates a new builder-style object to manufacture [`DeregisterDelegatedAdministratorInput`](crate::input::DeregisterDelegatedAdministratorInput)
    pub fn builder() -> crate::input::deregister_delegated_administrator_input::Builder {
        crate::input::deregister_delegated_administrator_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterDelegatedAdministrator {
    type Output = std::result::Result<
        crate::output::DeregisterDelegatedAdministratorOutput,
        crate::error::DeregisterDelegatedAdministratorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_delegated_administrator_error(response)
        } else {
            crate::operation_deser::parse_deregister_delegated_administrator_response(response)
        }
    }
}

/// <p>Retrieves AWS Organizations-related information about the specified account.</p>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAccount {
    _private: (),
}
impl DescribeAccount {
    /// Creates a new builder-style object to manufacture [`DescribeAccountInput`](crate::input::DescribeAccountInput)
    pub fn builder() -> crate::input::describe_account_input::Builder {
        crate::input::describe_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAccount {
    type Output = std::result::Result<
        crate::output::DescribeAccountOutput,
        crate::error::DescribeAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_account_error(response)
        } else {
            crate::operation_deser::parse_describe_account_response(response)
        }
    }
}

/// <p>Retrieves the current status of an asynchronous request to create an account.</p>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCreateAccountStatus {
    _private: (),
}
impl DescribeCreateAccountStatus {
    /// Creates a new builder-style object to manufacture [`DescribeCreateAccountStatusInput`](crate::input::DescribeCreateAccountStatusInput)
    pub fn builder() -> crate::input::describe_create_account_status_input::Builder {
        crate::input::describe_create_account_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCreateAccountStatus {
    type Output = std::result::Result<
        crate::output::DescribeCreateAccountStatusOutput,
        crate::error::DescribeCreateAccountStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_create_account_status_error(response)
        } else {
            crate::operation_deser::parse_describe_create_account_status_response(response)
        }
    }
}

/// <p>Returns the contents of the effective policy for specified policy type and account.
/// The effective policy is the aggregation of any policies of the specified type that the
/// account inherits, plus any policy of that type that is directly attached to the
/// account.</p>
/// <p>This operation applies only to policy types <i>other</i> than service
/// control policies (SCPs).</p>
/// <p>For more information about policy inheritance, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies-inheritance.html">How Policy Inheritance
/// Works</a> in the <i>AWS Organizations User Guide</i>.</p>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEffectivePolicy {
    _private: (),
}
impl DescribeEffectivePolicy {
    /// Creates a new builder-style object to manufacture [`DescribeEffectivePolicyInput`](crate::input::DescribeEffectivePolicyInput)
    pub fn builder() -> crate::input::describe_effective_policy_input::Builder {
        crate::input::describe_effective_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEffectivePolicy {
    type Output = std::result::Result<
        crate::output::DescribeEffectivePolicyOutput,
        crate::error::DescribeEffectivePolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_effective_policy_error(response)
        } else {
            crate::operation_deser::parse_describe_effective_policy_response(response)
        }
    }
}

/// <p>Retrieves information about a previously requested handshake. The handshake ID comes
/// from the response to the original <a>InviteAccountToOrganization</a>
/// operation that generated the handshake.</p>
/// <p>You can access handshakes that are <code>ACCEPTED</code>, <code>DECLINED</code>, or
/// <code>CANCELED</code> for only 30 days after they change to that state. They're then
/// deleted and no longer accessible.</p>
/// <p>This operation can be called from any account in the organization.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHandshake {
    _private: (),
}
impl DescribeHandshake {
    /// Creates a new builder-style object to manufacture [`DescribeHandshakeInput`](crate::input::DescribeHandshakeInput)
    pub fn builder() -> crate::input::describe_handshake_input::Builder {
        crate::input::describe_handshake_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeHandshake {
    type Output = std::result::Result<
        crate::output::DescribeHandshakeOutput,
        crate::error::DescribeHandshakeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_handshake_error(response)
        } else {
            crate::operation_deser::parse_describe_handshake_response(response)
        }
    }
}

/// <p>Retrieves information about the organization that the user's account belongs
/// to.</p>
/// <p>This operation can be called from any account in the organization.</p>
/// <note>
/// <p>Even if a policy type is shown as available in the organization, you can disable
/// it separately at the root level with <a>DisablePolicyType</a>. Use <a>ListRoots</a> to see the status of policy types for a specified
/// root.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOrganization {
    _private: (),
}
impl DescribeOrganization {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationInput`](crate::input::DescribeOrganizationInput)
    pub fn builder() -> crate::input::describe_organization_input::Builder {
        crate::input::describe_organization_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeOrganization {
    type Output = std::result::Result<
        crate::output::DescribeOrganizationOutput,
        crate::error::DescribeOrganizationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_organization_error(response)
        } else {
            crate::operation_deser::parse_describe_organization_response(response)
        }
    }
}

/// <p>Retrieves information about an organizational unit (OU).</p>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOrganizationalUnit {
    _private: (),
}
impl DescribeOrganizationalUnit {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationalUnitInput`](crate::input::DescribeOrganizationalUnitInput)
    pub fn builder() -> crate::input::describe_organizational_unit_input::Builder {
        crate::input::describe_organizational_unit_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeOrganizationalUnit {
    type Output = std::result::Result<
        crate::output::DescribeOrganizationalUnitOutput,
        crate::error::DescribeOrganizationalUnitError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_organizational_unit_error(response)
        } else {
            crate::operation_deser::parse_describe_organizational_unit_response(response)
        }
    }
}

/// <p>Retrieves information about a policy.</p>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePolicy {
    _private: (),
}
impl DescribePolicy {
    /// Creates a new builder-style object to manufacture [`DescribePolicyInput`](crate::input::DescribePolicyInput)
    pub fn builder() -> crate::input::describe_policy_input::Builder {
        crate::input::describe_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePolicy {
    type Output =
        std::result::Result<crate::output::DescribePolicyOutput, crate::error::DescribePolicyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_policy_error(response)
        } else {
            crate::operation_deser::parse_describe_policy_response(response)
        }
    }
}

/// <p>Detaches a policy from a target root, organizational unit (OU), or account.</p>
/// <important>
/// <p>If the policy being detached is a service control policy (SCP), the changes to
/// permissions for AWS Identity and Access Management (IAM) users and roles in affected accounts are
/// immediate.</p>
/// </important>
/// <p>Every root, OU, and account must have at least one SCP attached. If you want to
/// replace the default <code>FullAWSAccess</code> policy with an SCP that limits the
/// permissions that can be delegated, you must attach the replacement SCP before you can
/// remove the default SCP. This is the authorization strategy of an "<a href="https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_allowlist">allow list</a>". If you instead attach a second SCP and
/// leave the <code>FullAWSAccess</code> SCP still attached, and specify <code>"Effect":
/// "Deny"</code> in the second SCP to override the <code>"Effect": "Allow"</code> in
/// the <code>FullAWSAccess</code> policy (or any other attached SCP), you're using the
/// authorization strategy of a "<a href="https://docs.aws.amazon.com/organizations/latest/userguide/SCP_strategies.html#orgs_policies_denylist">deny list</a>".</p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DetachPolicy {
    _private: (),
}
impl DetachPolicy {
    /// Creates a new builder-style object to manufacture [`DetachPolicyInput`](crate::input::DetachPolicyInput)
    pub fn builder() -> crate::input::detach_policy_input::Builder {
        crate::input::detach_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DetachPolicy {
    type Output =
        std::result::Result<crate::output::DetachPolicyOutput, crate::error::DetachPolicyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_detach_policy_error(response)
        } else {
            crate::operation_deser::parse_detach_policy_response(response)
        }
    }
}

/// <p>Disables the integration of an AWS service (the service that is specified by
/// <code>ServicePrincipal</code>) with AWS Organizations. When you disable integration, the
/// specified service no longer can create a <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">service-linked role</a> in
/// <i>new</i> accounts in your organization. This means the service can't
/// perform operations on your behalf on any new accounts in your organization. The service
/// can still perform operations in older accounts until the service completes its clean-up
/// from AWS Organizations.</p>
/// <important>
/// <p>We <b>
/// <i>strongly recommend</i>
/// </b> that
/// you don't use this command to disable integration between AWS Organizations and the specified
/// AWS service. Instead, use the console or commands that are provided by the
/// specified service. This lets the trusted service perform any required initialization
/// when enabling trusted access, such as creating any required resources and any
/// required clean up of resources when disabling trusted access. </p>
/// <p>For information about how to disable trusted service access to your organization
/// using the trusted service, see the <b>Learn more</b> link
/// under the <b>Supports Trusted Access</b> column at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html">AWS services that you can use with AWS Organizations</a>. on this page.</p>
/// <p>If you disable access by using this command, it causes the following actions to
/// occur:</p>
/// <ul>
/// <li>
/// <p>The service can no longer create a service-linked role in the accounts in
/// your organization. This means that the service can't perform operations on
/// your behalf on any new accounts in your organization. The service can still
/// perform operations in older accounts until the service completes its
/// clean-up from AWS Organizations. </p>
/// </li>
/// <li>
/// <p>The service can no longer perform tasks in the member accounts in the
/// organization, unless those operations are explicitly permitted by the IAM
/// policies that are attached to your roles. This includes any data aggregation
/// from the member accounts to the management account, or to a delegated
/// administrator account, where relevant.</p>
/// </li>
/// <li>
/// <p>Some services detect this and clean up any remaining data or resources
/// related to the integration, while other services stop accessing the
/// organization but leave any historical data and configuration in place to
/// support a possible re-enabling of the integration.</p>
/// </li>
/// </ul>
/// <p>Using the other service's console or commands to disable the integration ensures
/// that the other service is aware that it can clean up any resources that are required
/// only for the integration. How the service cleans up its resources in the
/// organization's accounts depends on that service. For more information, see the
/// documentation for the other AWS service. </p>
/// </important>
/// <p>After you perform the <code>DisableAWSServiceAccess</code> operation, the specified
/// service can no longer perform operations in your organization's accounts </p>
/// <p>For more information about integrating other services with AWS Organizations, including the
/// list of services that work with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating AWS Organizations with Other
/// AWS Services</a> in the <i>AWS Organizations User Guide.</i>
/// </p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableAWSServiceAccess {
    _private: (),
}
impl DisableAWSServiceAccess {
    /// Creates a new builder-style object to manufacture [`DisableAwsServiceAccessInput`](crate::input::DisableAwsServiceAccessInput)
    pub fn builder() -> crate::input::disable_aws_service_access_input::Builder {
        crate::input::disable_aws_service_access_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableAWSServiceAccess {
    type Output = std::result::Result<
        crate::output::DisableAwsServiceAccessOutput,
        crate::error::DisableAWSServiceAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_aws_service_access_error(response)
        } else {
            crate::operation_deser::parse_disable_aws_service_access_response(response)
        }
    }
}

/// <p>Disables an organizational policy type in a root. A policy of a certain type can be
/// attached to entities in a root only if that type is enabled in the root. After you
/// perform this operation, you no longer can attach policies of the specified type to that
/// root or to any organizational unit (OU) or account in that root. You can undo this by
/// using the <a>EnablePolicyType</a> operation.</p>
/// <p>This is an asynchronous request that AWS performs in the background. If you disable
/// a policy type for a root, it still appears enabled for the organization if <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all features</a> are enabled for the organization. AWS recommends that you
/// first use <a>ListRoots</a> to see the status of policy types for a specified
/// root, and then use this operation.</p>
/// <p>This operation can be called only from the organization's management account.</p>
/// <p> To view the status of available policy types in the organization, use <a>DescribeOrganization</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisablePolicyType {
    _private: (),
}
impl DisablePolicyType {
    /// Creates a new builder-style object to manufacture [`DisablePolicyTypeInput`](crate::input::DisablePolicyTypeInput)
    pub fn builder() -> crate::input::disable_policy_type_input::Builder {
        crate::input::disable_policy_type_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisablePolicyType {
    type Output = std::result::Result<
        crate::output::DisablePolicyTypeOutput,
        crate::error::DisablePolicyTypeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_policy_type_error(response)
        } else {
            crate::operation_deser::parse_disable_policy_type_response(response)
        }
    }
}

/// <p>Enables all features in an organization. This enables the use of organization policies
/// that can restrict the services and actions that can be called in each account. Until you
/// enable all features, you have access only to consolidated billing, and you can't use any
/// of the advanced account administration features that AWS Organizations supports. For more
/// information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling All Features in Your Organization</a> in the
/// <i>AWS Organizations User Guide.</i>
/// </p>
/// <important>
/// <p>This operation is required only for organizations that were created explicitly
/// with only the consolidated billing features enabled. Calling this operation sends a
/// handshake to every invited account in the organization. The feature set change can
/// be finalized and the additional features enabled only after all administrators in
/// the invited accounts approve the change by accepting the handshake.</p>
/// </important>
/// <p>After you enable all features, you can separately enable or disable individual policy
/// types in a root using <a>EnablePolicyType</a> and <a>DisablePolicyType</a>. To see the status of policy types in a root, use
/// <a>ListRoots</a>.</p>
/// <p>After all invited member accounts accept the handshake, you finalize the feature set
/// change by accepting the handshake that contains <code>"Action":
/// "ENABLE_ALL_FEATURES"</code>. This completes the change.</p>
/// <p>After you enable all features in your organization, the management account in the
/// organization can apply policies on all member accounts. These policies can restrict what
/// users and even administrators in those accounts can do. The management account can apply
/// policies that prevent accounts from leaving the organization. Ensure that your account
/// administrators are aware of this.</p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableAllFeatures {
    _private: (),
}
impl EnableAllFeatures {
    /// Creates a new builder-style object to manufacture [`EnableAllFeaturesInput`](crate::input::EnableAllFeaturesInput)
    pub fn builder() -> crate::input::enable_all_features_input::Builder {
        crate::input::enable_all_features_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableAllFeatures {
    type Output = std::result::Result<
        crate::output::EnableAllFeaturesOutput,
        crate::error::EnableAllFeaturesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_all_features_error(response)
        } else {
            crate::operation_deser::parse_enable_all_features_response(response)
        }
    }
}

/// <p>Enables the integration of an AWS service (the service that is specified by
/// <code>ServicePrincipal</code>) with AWS Organizations. When you enable integration, you allow
/// the specified service to create a <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">service-linked role</a> in
/// all the accounts in your organization. This allows the service to perform operations on
/// your behalf in your organization and its accounts.</p>
/// <important>
/// <p>We recommend that you enable integration between AWS Organizations and the specified AWS
/// service by using the console or commands that are provided by the specified service.
/// Doing so ensures that the service is aware that it can create the resources that are
/// required for the integration. How the service creates those resources in the
/// organization's accounts depends on that service. For more information, see the
/// documentation for the other AWS service.</p>
/// </important>
/// <p>For more information about enabling services to integrate with AWS Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating AWS Organizations with Other
/// AWS Services</a> in the <i>AWS Organizations User Guide.</i>
/// </p>
/// <p>This operation can be called only from the organization's management account and only
/// if the organization has <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">enabled all
/// features</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableAWSServiceAccess {
    _private: (),
}
impl EnableAWSServiceAccess {
    /// Creates a new builder-style object to manufacture [`EnableAwsServiceAccessInput`](crate::input::EnableAwsServiceAccessInput)
    pub fn builder() -> crate::input::enable_aws_service_access_input::Builder {
        crate::input::enable_aws_service_access_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableAWSServiceAccess {
    type Output = std::result::Result<
        crate::output::EnableAwsServiceAccessOutput,
        crate::error::EnableAWSServiceAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_aws_service_access_error(response)
        } else {
            crate::operation_deser::parse_enable_aws_service_access_response(response)
        }
    }
}

/// <p>Enables a policy type in a root. After you enable a policy type in a root, you can
/// attach policies of that type to the root, any organizational unit (OU), or account in
/// that root. You can undo this by using the <a>DisablePolicyType</a>
/// operation.</p>
/// <p>This is an asynchronous request that AWS performs in the background. AWS
/// recommends that you first use <a>ListRoots</a> to see the status of policy
/// types for a specified root, and then use this operation.</p>
/// <p>This operation can be called only from the organization's management account.</p>
/// <p>You can enable a policy type in a root only if that policy type is available in the
/// organization. To view the status of available policy types in the organization, use
/// <a>DescribeOrganization</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnablePolicyType {
    _private: (),
}
impl EnablePolicyType {
    /// Creates a new builder-style object to manufacture [`EnablePolicyTypeInput`](crate::input::EnablePolicyTypeInput)
    pub fn builder() -> crate::input::enable_policy_type_input::Builder {
        crate::input::enable_policy_type_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnablePolicyType {
    type Output = std::result::Result<
        crate::output::EnablePolicyTypeOutput,
        crate::error::EnablePolicyTypeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_policy_type_error(response)
        } else {
            crate::operation_deser::parse_enable_policy_type_response(response)
        }
    }
}

/// <p>Sends an invitation to another account to join your organization as a member account.
/// AWS Organizations sends email on your behalf to the email address that is associated with the
/// other account's owner. The invitation is implemented as a <a>Handshake</a>
/// whose details are in the response.</p>
/// <important>
/// <ul>
/// <li>
/// <p>You can invite AWS accounts only from the same seller as the management
/// account. For example, if your organization's management account was created
/// by Amazon Internet Services Pvt. Ltd (AISPL), an AWS seller in India, you
/// can invite only other AISPL accounts to your organization. You can't combine
/// accounts from AISPL and AWS or from any other AWS seller. For more
/// information, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/useconsolidatedbilliing-India.html">Consolidated
/// Billing in India</a>.</p>
/// </li>
/// <li>
/// <p>If you receive an exception that indicates that you exceeded your account
/// limits for the organization or that the operation failed because your
/// organization is still initializing, wait one hour and then try again. If the
/// error persists after an hour, contact <a href="https://console.aws.amazon.com/support/home#/">AWS Support</a>.</p>
/// </li>
/// </ul>
/// </important>
/// <p>If the request includes tags, then the requester must have the
/// <code>organizations:TagResource</code> permission.</p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct InviteAccountToOrganization {
    _private: (),
}
impl InviteAccountToOrganization {
    /// Creates a new builder-style object to manufacture [`InviteAccountToOrganizationInput`](crate::input::InviteAccountToOrganizationInput)
    pub fn builder() -> crate::input::invite_account_to_organization_input::Builder {
        crate::input::invite_account_to_organization_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for InviteAccountToOrganization {
    type Output = std::result::Result<
        crate::output::InviteAccountToOrganizationOutput,
        crate::error::InviteAccountToOrganizationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_invite_account_to_organization_error(response)
        } else {
            crate::operation_deser::parse_invite_account_to_organization_response(response)
        }
    }
}

/// <p>Removes a member account from its parent organization. This version of the operation
/// is performed by the account that wants to leave. To remove a member account as a user in
/// the management account, use <a>RemoveAccountFromOrganization</a>
/// instead.</p>
/// <p>This operation can be called only from a member account in the organization.</p>
/// <important>
/// <ul>
/// <li>
/// <p>The management account in an organization with all features enabled can
/// set service control policies (SCPs) that can restrict what administrators of
/// member accounts can do. This includes preventing them from successfully
/// calling <code>LeaveOrganization</code> and leaving the organization.</p>
/// </li>
/// <li>
/// <p>You can leave an organization as a member account only if the account is
/// configured with the information required to operate as a standalone account.
/// When you create an account in an organization using the AWS Organizations console,
/// API, or CLI commands, the information required of standalone accounts is
/// <i>not</i> automatically collected. For each account that
/// you want to make standalone, you must perform the following steps. If any of
/// the steps are already completed for this account, that step doesn't
/// appear.</p>
/// <ul>
/// <li>
/// <p>Choose a support plan</p>
/// </li>
/// <li>
/// <p>Provide and verify the required contact information</p>
/// </li>
/// <li>
/// <p>Provide a current payment method</p>
/// </li>
/// </ul>
/// <p>AWS uses the payment method to charge for any billable (not free tier)
/// AWS activity that occurs while the account isn't attached to an
/// organization. Follow the steps at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization when all required account information has not
/// yet been provided</a> in the
/// <i>AWS Organizations User Guide.</i>
/// </p>
/// </li>
/// <li>
/// <p>The account that you want to leave must not be a delegated administrator
/// account for any AWS service enabled for your organization. If the account
/// is a delegated administrator, you must first change the delegated
/// administrator account to another account that is remaining in the
/// organization.</p>
/// </li>
/// <li>
/// <p>You can leave an organization only after you enable IAM user access to
/// billing in your account. For more information, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate">Activating Access to the Billing and Cost Management Console</a> in
/// the <i>AWS Billing and Cost Management User Guide.</i>
/// </p>
/// </li>
/// <li>
/// <p>After the account leaves the organization, all tags that were attached to
/// the account object in the organization are deleted. AWS accounts outside
/// of an organization do not support tags.</p>
/// </li>
/// <li>
/// <p>A newly created account has a waiting period before it can be removed from
/// its organization. If you get an error that indicates that a wait period is
/// required, then try again in a few days.</p>
/// </li>
/// </ul>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct LeaveOrganization {
    _private: (),
}
impl LeaveOrganization {
    /// Creates a new builder-style object to manufacture [`LeaveOrganizationInput`](crate::input::LeaveOrganizationInput)
    pub fn builder() -> crate::input::leave_organization_input::Builder {
        crate::input::leave_organization_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for LeaveOrganization {
    type Output = std::result::Result<
        crate::output::LeaveOrganizationOutput,
        crate::error::LeaveOrganizationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_leave_organization_error(response)
        } else {
            crate::operation_deser::parse_leave_organization_response(response)
        }
    }
}

/// <p>Lists all the accounts in the organization. To request only the accounts in a
/// specified root or organizational unit (OU), use the <a>ListAccountsForParent</a> operation instead.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAccounts {
    _private: (),
}
impl ListAccounts {
    /// Creates a new builder-style object to manufacture [`ListAccountsInput`](crate::input::ListAccountsInput)
    pub fn builder() -> crate::input::list_accounts_input::Builder {
        crate::input::list_accounts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAccounts {
    type Output =
        std::result::Result<crate::output::ListAccountsOutput, crate::error::ListAccountsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_accounts_error(response)
        } else {
            crate::operation_deser::parse_list_accounts_response(response)
        }
    }
}

/// <p>Lists the accounts in an organization that are contained by the specified target root
/// or organizational unit (OU). If you specify the root, you get a list of all the accounts
/// that aren't in any OU. If you specify an OU, you get a list of all the accounts in only
/// that OU and not in any child OUs. To get a list of all accounts in the organization, use
/// the <a>ListAccounts</a> operation.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAccountsForParent {
    _private: (),
}
impl ListAccountsForParent {
    /// Creates a new builder-style object to manufacture [`ListAccountsForParentInput`](crate::input::ListAccountsForParentInput)
    pub fn builder() -> crate::input::list_accounts_for_parent_input::Builder {
        crate::input::list_accounts_for_parent_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAccountsForParent {
    type Output = std::result::Result<
        crate::output::ListAccountsForParentOutput,
        crate::error::ListAccountsForParentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_accounts_for_parent_error(response)
        } else {
            crate::operation_deser::parse_list_accounts_for_parent_response(response)
        }
    }
}

/// <p>Returns a list of the AWS services that you enabled to integrate with your
/// organization. After a service on this list creates the resources that it requires for
/// the integration, it can perform operations on your organization and its accounts.</p>
/// <p>For more information about integrating other services with AWS Organizations, including the
/// list of services that currently work with Organizations, see <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Integrating AWS Organizations with Other
/// AWS Services</a> in the <i>AWS Organizations User Guide.</i>
/// </p>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAWSServiceAccessForOrganization {
    _private: (),
}
impl ListAWSServiceAccessForOrganization {
    /// Creates a new builder-style object to manufacture [`ListAwsServiceAccessForOrganizationInput`](crate::input::ListAwsServiceAccessForOrganizationInput)
    pub fn builder() -> crate::input::list_aws_service_access_for_organization_input::Builder {
        crate::input::list_aws_service_access_for_organization_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAWSServiceAccessForOrganization {
    type Output = std::result::Result<
        crate::output::ListAwsServiceAccessForOrganizationOutput,
        crate::error::ListAWSServiceAccessForOrganizationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_aws_service_access_for_organization_error(response)
        } else {
            crate::operation_deser::parse_list_aws_service_access_for_organization_response(
                response,
            )
        }
    }
}

/// <p>Lists all of the organizational units (OUs) or accounts that are contained in the
/// specified parent OU or root. This operation, along with <a>ListParents</a>
/// enables you to traverse the tree structure that makes up this root.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChildren {
    _private: (),
}
impl ListChildren {
    /// Creates a new builder-style object to manufacture [`ListChildrenInput`](crate::input::ListChildrenInput)
    pub fn builder() -> crate::input::list_children_input::Builder {
        crate::input::list_children_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChildren {
    type Output =
        std::result::Result<crate::output::ListChildrenOutput, crate::error::ListChildrenError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_children_error(response)
        } else {
            crate::operation_deser::parse_list_children_response(response)
        }
    }
}

/// <p>Lists the account creation requests that match the specified status that is currently
/// being tracked for the organization.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListCreateAccountStatus {
    _private: (),
}
impl ListCreateAccountStatus {
    /// Creates a new builder-style object to manufacture [`ListCreateAccountStatusInput`](crate::input::ListCreateAccountStatusInput)
    pub fn builder() -> crate::input::list_create_account_status_input::Builder {
        crate::input::list_create_account_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListCreateAccountStatus {
    type Output = std::result::Result<
        crate::output::ListCreateAccountStatusOutput,
        crate::error::ListCreateAccountStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_create_account_status_error(response)
        } else {
            crate::operation_deser::parse_list_create_account_status_response(response)
        }
    }
}

/// <p>Lists the AWS accounts that are designated as delegated administrators in this
/// organization.</p>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDelegatedAdministrators {
    _private: (),
}
impl ListDelegatedAdministrators {
    /// Creates a new builder-style object to manufacture [`ListDelegatedAdministratorsInput`](crate::input::ListDelegatedAdministratorsInput)
    pub fn builder() -> crate::input::list_delegated_administrators_input::Builder {
        crate::input::list_delegated_administrators_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDelegatedAdministrators {
    type Output = std::result::Result<
        crate::output::ListDelegatedAdministratorsOutput,
        crate::error::ListDelegatedAdministratorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_delegated_administrators_error(response)
        } else {
            crate::operation_deser::parse_list_delegated_administrators_response(response)
        }
    }
}

/// <p>List the AWS services for which the specified account is a delegated
/// administrator.</p>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDelegatedServicesForAccount {
    _private: (),
}
impl ListDelegatedServicesForAccount {
    /// Creates a new builder-style object to manufacture [`ListDelegatedServicesForAccountInput`](crate::input::ListDelegatedServicesForAccountInput)
    pub fn builder() -> crate::input::list_delegated_services_for_account_input::Builder {
        crate::input::list_delegated_services_for_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDelegatedServicesForAccount {
    type Output = std::result::Result<
        crate::output::ListDelegatedServicesForAccountOutput,
        crate::error::ListDelegatedServicesForAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_delegated_services_for_account_error(response)
        } else {
            crate::operation_deser::parse_list_delegated_services_for_account_response(response)
        }
    }
}

/// <p>Lists the current handshakes that are associated with the account of the requesting
/// user.</p>
/// <p>Handshakes that are <code>ACCEPTED</code>, <code>DECLINED</code>, or
/// <code>CANCELED</code> appear in the results of this API for only 30 days after
/// changing to that state. After that, they're deleted and no longer accessible.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called from any account in the organization.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListHandshakesForAccount {
    _private: (),
}
impl ListHandshakesForAccount {
    /// Creates a new builder-style object to manufacture [`ListHandshakesForAccountInput`](crate::input::ListHandshakesForAccountInput)
    pub fn builder() -> crate::input::list_handshakes_for_account_input::Builder {
        crate::input::list_handshakes_for_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListHandshakesForAccount {
    type Output = std::result::Result<
        crate::output::ListHandshakesForAccountOutput,
        crate::error::ListHandshakesForAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_handshakes_for_account_error(response)
        } else {
            crate::operation_deser::parse_list_handshakes_for_account_response(response)
        }
    }
}

/// <p>Lists the handshakes that are associated with the organization that the requesting
/// user is part of. The <code>ListHandshakesForOrganization</code> operation returns a list
/// of handshake structures. Each structure contains details and status about a
/// handshake.</p>
/// <p>Handshakes that are <code>ACCEPTED</code>, <code>DECLINED</code>, or
/// <code>CANCELED</code> appear in the results of this API for only 30 days after
/// changing to that state. After that, they're deleted and no longer accessible.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListHandshakesForOrganization {
    _private: (),
}
impl ListHandshakesForOrganization {
    /// Creates a new builder-style object to manufacture [`ListHandshakesForOrganizationInput`](crate::input::ListHandshakesForOrganizationInput)
    pub fn builder() -> crate::input::list_handshakes_for_organization_input::Builder {
        crate::input::list_handshakes_for_organization_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListHandshakesForOrganization {
    type Output = std::result::Result<
        crate::output::ListHandshakesForOrganizationOutput,
        crate::error::ListHandshakesForOrganizationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_handshakes_for_organization_error(response)
        } else {
            crate::operation_deser::parse_list_handshakes_for_organization_response(response)
        }
    }
}

/// <p>Lists the organizational units (OUs) in a parent organizational unit or root.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListOrganizationalUnitsForParent {
    _private: (),
}
impl ListOrganizationalUnitsForParent {
    /// Creates a new builder-style object to manufacture [`ListOrganizationalUnitsForParentInput`](crate::input::ListOrganizationalUnitsForParentInput)
    pub fn builder() -> crate::input::list_organizational_units_for_parent_input::Builder {
        crate::input::list_organizational_units_for_parent_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListOrganizationalUnitsForParent {
    type Output = std::result::Result<
        crate::output::ListOrganizationalUnitsForParentOutput,
        crate::error::ListOrganizationalUnitsForParentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_organizational_units_for_parent_error(response)
        } else {
            crate::operation_deser::parse_list_organizational_units_for_parent_response(response)
        }
    }
}

/// <p>Lists the root or organizational units (OUs) that serve as the immediate parent of the
/// specified child OU or account. This operation, along with <a>ListChildren</a>
/// enables you to traverse the tree structure that makes up this root.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
/// <note>
/// <p>In the current release, a child can have only a single parent.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListParents {
    _private: (),
}
impl ListParents {
    /// Creates a new builder-style object to manufacture [`ListParentsInput`](crate::input::ListParentsInput)
    pub fn builder() -> crate::input::list_parents_input::Builder {
        crate::input::list_parents_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListParents {
    type Output =
        std::result::Result<crate::output::ListParentsOutput, crate::error::ListParentsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_parents_error(response)
        } else {
            crate::operation_deser::parse_list_parents_response(response)
        }
    }
}

/// <p>Retrieves the list of all policies in an organization of a specified type.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPolicies {
    _private: (),
}
impl ListPolicies {
    /// Creates a new builder-style object to manufacture [`ListPoliciesInput`](crate::input::ListPoliciesInput)
    pub fn builder() -> crate::input::list_policies_input::Builder {
        crate::input::list_policies_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPolicies {
    type Output =
        std::result::Result<crate::output::ListPoliciesOutput, crate::error::ListPoliciesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_policies_error(response)
        } else {
            crate::operation_deser::parse_list_policies_response(response)
        }
    }
}

/// <p>Lists the policies that are directly attached to the specified target root,
/// organizational unit (OU), or account. You must specify the policy type that you want
/// included in the returned list.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPoliciesForTarget {
    _private: (),
}
impl ListPoliciesForTarget {
    /// Creates a new builder-style object to manufacture [`ListPoliciesForTargetInput`](crate::input::ListPoliciesForTargetInput)
    pub fn builder() -> crate::input::list_policies_for_target_input::Builder {
        crate::input::list_policies_for_target_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPoliciesForTarget {
    type Output = std::result::Result<
        crate::output::ListPoliciesForTargetOutput,
        crate::error::ListPoliciesForTargetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_policies_for_target_error(response)
        } else {
            crate::operation_deser::parse_list_policies_for_target_response(response)
        }
    }
}

/// <p>Lists the roots that are defined in the current organization.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
/// <note>
/// <p>Policy types can be enabled and disabled in roots. This is distinct from whether
/// they're available in the organization. When you enable all features, you make policy
/// types available for use in that organization. Individual policy types can then be
/// enabled and disabled in a root. To see the availability of a policy type in an
/// organization, use <a>DescribeOrganization</a>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRoots {
    _private: (),
}
impl ListRoots {
    /// Creates a new builder-style object to manufacture [`ListRootsInput`](crate::input::ListRootsInput)
    pub fn builder() -> crate::input::list_roots_input::Builder {
        crate::input::list_roots_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRoots {
    type Output = std::result::Result<crate::output::ListRootsOutput, crate::error::ListRootsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_roots_error(response)
        } else {
            crate::operation_deser::parse_list_roots_response(response)
        }
    }
}

/// <p>Lists tags that are attached to the specified resource.</p>
/// <p>You can attach tags to the following resources in AWS Organizations.</p>
/// <ul>
/// <li>
/// <p>AWS account</p>
/// </li>
/// <li>
/// <p>Organization root</p>
/// </li>
/// <li>
/// <p>Organizational unit (OU)</p>
/// </li>
/// <li>
/// <p>Policy (any type)</p>
/// </li>
/// </ul>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Lists all the roots, organizational units (OUs), and accounts that the specified
/// policy is attached to.</p>
/// <note>
/// <p>Always check the <code>NextToken</code> response parameter
/// for a <code>null</code> value when calling a <code>List*</code> operation. These operations can
/// occasionally return an empty set of results even when there are more results available. The
/// <code>NextToken</code> response parameter value is <code>null</code>
/// <i>only</i>
/// when there are no more results to display.</p>
/// </note>
/// <p>This operation can be called only from the organization's
/// management account or by a member account that is a delegated administrator for an AWS service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTargetsForPolicy {
    _private: (),
}
impl ListTargetsForPolicy {
    /// Creates a new builder-style object to manufacture [`ListTargetsForPolicyInput`](crate::input::ListTargetsForPolicyInput)
    pub fn builder() -> crate::input::list_targets_for_policy_input::Builder {
        crate::input::list_targets_for_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTargetsForPolicy {
    type Output = std::result::Result<
        crate::output::ListTargetsForPolicyOutput,
        crate::error::ListTargetsForPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_targets_for_policy_error(response)
        } else {
            crate::operation_deser::parse_list_targets_for_policy_response(response)
        }
    }
}

/// <p>Moves an account from its current source parent root or organizational unit (OU) to
/// the specified destination parent root or OU.</p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct MoveAccount {
    _private: (),
}
impl MoveAccount {
    /// Creates a new builder-style object to manufacture [`MoveAccountInput`](crate::input::MoveAccountInput)
    pub fn builder() -> crate::input::move_account_input::Builder {
        crate::input::move_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for MoveAccount {
    type Output =
        std::result::Result<crate::output::MoveAccountOutput, crate::error::MoveAccountError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_move_account_error(response)
        } else {
            crate::operation_deser::parse_move_account_response(response)
        }
    }
}

/// <p>Enables the specified member account to administer the Organizations features of the specified
/// AWS service. It grants read-only access to AWS Organizations service data. The account still
/// requires IAM permissions to access and administer the AWS service.</p>
/// <p>You can run this action only for AWS services that support this
/// feature. For a current list of services that support it, see the column <i>Supports
/// Delegated Administrator</i> in the table at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html">AWS Services that you can use with
/// AWS Organizations</a> in the <i>AWS Organizations User Guide.</i>
/// </p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterDelegatedAdministrator {
    _private: (),
}
impl RegisterDelegatedAdministrator {
    /// Creates a new builder-style object to manufacture [`RegisterDelegatedAdministratorInput`](crate::input::RegisterDelegatedAdministratorInput)
    pub fn builder() -> crate::input::register_delegated_administrator_input::Builder {
        crate::input::register_delegated_administrator_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterDelegatedAdministrator {
    type Output = std::result::Result<
        crate::output::RegisterDelegatedAdministratorOutput,
        crate::error::RegisterDelegatedAdministratorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_delegated_administrator_error(response)
        } else {
            crate::operation_deser::parse_register_delegated_administrator_response(response)
        }
    }
}

/// <p>Removes the specified account from the organization.</p>
/// <p>The removed account becomes a standalone account that isn't a member of any
/// organization. It's no longer subject to any policies and is responsible for its own bill
/// payments. The organization's management account is no longer charged for any expenses
/// accrued by the member account after it's removed from the organization.</p>
/// <p>This operation can be called only from the organization's management account. Member accounts can remove themselves with <a>LeaveOrganization</a> instead.</p>
/// <important>
/// <ul>
/// <li>
/// <p>You can remove an account from your organization only if the account is
/// configured with the information required to operate as a standalone account.
/// When you create an account in an organization using the AWS Organizations console,
/// API, or CLI commands, the information required of standalone accounts is
/// <i>not</i> automatically collected. For an account that
/// you want to make standalone, you must choose a support plan, provide and
/// verify the required contact information, and provide a current payment
/// method. AWS uses the payment method to charge for any billable (not free
/// tier) AWS activity that occurs while the account isn't attached to an
/// organization. To remove an account that doesn't yet have this information,
/// you must sign in as the member account and follow the steps at <a href="http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info"> To leave an organization when all required account information has not
/// yet been provided</a> in the
/// <i>AWS Organizations User Guide.</i>
/// </p>
/// </li>
/// <li>
/// <p>The account that you want to leave must not be a delegated administrator
/// account for any AWS service enabled for your organization. If the account
/// is a delegated administrator, you must first change the delegated
/// administrator account to another account that is remaining in the
/// organization.</p>
/// </li>
/// <li>
/// <p>After the account leaves the organization, all tags that were attached to
/// the account object in the organization are deleted. AWS accounts outside
/// of an organization do not support tags.</p>
/// </li>
/// </ul>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveAccountFromOrganization {
    _private: (),
}
impl RemoveAccountFromOrganization {
    /// Creates a new builder-style object to manufacture [`RemoveAccountFromOrganizationInput`](crate::input::RemoveAccountFromOrganizationInput)
    pub fn builder() -> crate::input::remove_account_from_organization_input::Builder {
        crate::input::remove_account_from_organization_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveAccountFromOrganization {
    type Output = std::result::Result<
        crate::output::RemoveAccountFromOrganizationOutput,
        crate::error::RemoveAccountFromOrganizationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_account_from_organization_error(response)
        } else {
            crate::operation_deser::parse_remove_account_from_organization_response(response)
        }
    }
}

/// <p>Adds one or more tags to the specified resource.</p>
/// <p>Currently, you can attach tags to the following resources in AWS Organizations.</p>
/// <ul>
/// <li>
/// <p>AWS account</p>
/// </li>
/// <li>
/// <p>Organization root</p>
/// </li>
/// <li>
/// <p>Organizational unit (OU)</p>
/// </li>
/// <li>
/// <p>Policy (any type)</p>
/// </li>
/// </ul>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes any tags with the specified keys from the specified resource.</p>
/// <p>You can attach tags to the following resources in AWS Organizations.</p>
/// <ul>
/// <li>
/// <p>AWS account</p>
/// </li>
/// <li>
/// <p>Organization root</p>
/// </li>
/// <li>
/// <p>Organizational unit (OU)</p>
/// </li>
/// <li>
/// <p>Policy (any type)</p>
/// </li>
/// </ul>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Renames the specified organizational unit (OU). The ID and ARN don't change. The child
/// OUs and accounts remain in place, and any attached policies of the OU remain
/// attached.</p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateOrganizationalUnit {
    _private: (),
}
impl UpdateOrganizationalUnit {
    /// Creates a new builder-style object to manufacture [`UpdateOrganizationalUnitInput`](crate::input::UpdateOrganizationalUnitInput)
    pub fn builder() -> crate::input::update_organizational_unit_input::Builder {
        crate::input::update_organizational_unit_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateOrganizationalUnit {
    type Output = std::result::Result<
        crate::output::UpdateOrganizationalUnitOutput,
        crate::error::UpdateOrganizationalUnitError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_organizational_unit_error(response)
        } else {
            crate::operation_deser::parse_update_organizational_unit_response(response)
        }
    }
}

/// <p>Updates an existing policy with a new name, description, or content. If you don't
/// supply any parameter, that value remains unchanged. You can't change a policy's
/// type.</p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePolicy {
    _private: (),
}
impl UpdatePolicy {
    /// Creates a new builder-style object to manufacture [`UpdatePolicyInput`](crate::input::UpdatePolicyInput)
    pub fn builder() -> crate::input::update_policy_input::Builder {
        crate::input::update_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePolicy {
    type Output =
        std::result::Result<crate::output::UpdatePolicyOutput, crate::error::UpdatePolicyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_policy_error(response)
        } else {
            crate::operation_deser::parse_update_policy_response(response)
        }
    }
}
