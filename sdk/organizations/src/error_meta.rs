// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AwsOrganizationsNotInUseException(crate::error::AwsOrganizationsNotInUseException),
    AccessDeniedException(crate::error::AccessDeniedException),
    AccessDeniedForDependencyException(crate::error::AccessDeniedForDependencyException),
    AccountAlreadyRegisteredException(crate::error::AccountAlreadyRegisteredException),
    AccountNotFoundException(crate::error::AccountNotFoundException),
    AccountNotRegisteredException(crate::error::AccountNotRegisteredException),
    AccountOwnerNotVerifiedException(crate::error::AccountOwnerNotVerifiedException),
    AlreadyInOrganizationException(crate::error::AlreadyInOrganizationException),
    ChildNotFoundException(crate::error::ChildNotFoundException),
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    ConstraintViolationException(crate::error::ConstraintViolationException),
    CreateAccountStatusNotFoundException(crate::error::CreateAccountStatusNotFoundException),
    DestinationParentNotFoundException(crate::error::DestinationParentNotFoundException),
    DuplicateAccountException(crate::error::DuplicateAccountException),
    DuplicateHandshakeException(crate::error::DuplicateHandshakeException),
    DuplicateOrganizationalUnitException(crate::error::DuplicateOrganizationalUnitException),
    DuplicatePolicyAttachmentException(crate::error::DuplicatePolicyAttachmentException),
    DuplicatePolicyException(crate::error::DuplicatePolicyException),
    EffectivePolicyNotFoundException(crate::error::EffectivePolicyNotFoundException),
    FinalizingOrganizationException(crate::error::FinalizingOrganizationException),
    HandshakeAlreadyInStateException(crate::error::HandshakeAlreadyInStateException),
    HandshakeConstraintViolationException(crate::error::HandshakeConstraintViolationException),
    HandshakeNotFoundException(crate::error::HandshakeNotFoundException),
    InvalidHandshakeTransitionException(crate::error::InvalidHandshakeTransitionException),
    InvalidInputException(crate::error::InvalidInputException),
    MalformedPolicyDocumentException(crate::error::MalformedPolicyDocumentException),
    MasterCannotLeaveOrganizationException(crate::error::MasterCannotLeaveOrganizationException),
    OrganizationNotEmptyException(crate::error::OrganizationNotEmptyException),
    OrganizationalUnitNotEmptyException(crate::error::OrganizationalUnitNotEmptyException),
    OrganizationalUnitNotFoundException(crate::error::OrganizationalUnitNotFoundException),
    ParentNotFoundException(crate::error::ParentNotFoundException),
    PolicyChangesInProgressException(crate::error::PolicyChangesInProgressException),
    PolicyInUseException(crate::error::PolicyInUseException),
    PolicyNotAttachedException(crate::error::PolicyNotAttachedException),
    PolicyNotFoundException(crate::error::PolicyNotFoundException),
    PolicyTypeAlreadyEnabledException(crate::error::PolicyTypeAlreadyEnabledException),
    PolicyTypeNotAvailableForOrganizationException(
        crate::error::PolicyTypeNotAvailableForOrganizationException,
    ),
    PolicyTypeNotEnabledException(crate::error::PolicyTypeNotEnabledException),
    RootNotFoundException(crate::error::RootNotFoundException),
    ServiceException(crate::error::ServiceException),
    SourceParentNotFoundException(crate::error::SourceParentNotFoundException),
    TargetNotFoundException(crate::error::TargetNotFoundException),
    TooManyRequestsException(crate::error::TooManyRequestsException),
    UnsupportedApiEndpointException(crate::error::UnsupportedApiEndpointException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AwsOrganizationsNotInUseException(inner) => inner.fmt(f),
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AccessDeniedForDependencyException(inner) => inner.fmt(f),
            Error::AccountAlreadyRegisteredException(inner) => inner.fmt(f),
            Error::AccountNotFoundException(inner) => inner.fmt(f),
            Error::AccountNotRegisteredException(inner) => inner.fmt(f),
            Error::AccountOwnerNotVerifiedException(inner) => inner.fmt(f),
            Error::AlreadyInOrganizationException(inner) => inner.fmt(f),
            Error::ChildNotFoundException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::ConstraintViolationException(inner) => inner.fmt(f),
            Error::CreateAccountStatusNotFoundException(inner) => inner.fmt(f),
            Error::DestinationParentNotFoundException(inner) => inner.fmt(f),
            Error::DuplicateAccountException(inner) => inner.fmt(f),
            Error::DuplicateHandshakeException(inner) => inner.fmt(f),
            Error::DuplicateOrganizationalUnitException(inner) => inner.fmt(f),
            Error::DuplicatePolicyAttachmentException(inner) => inner.fmt(f),
            Error::DuplicatePolicyException(inner) => inner.fmt(f),
            Error::EffectivePolicyNotFoundException(inner) => inner.fmt(f),
            Error::FinalizingOrganizationException(inner) => inner.fmt(f),
            Error::HandshakeAlreadyInStateException(inner) => inner.fmt(f),
            Error::HandshakeConstraintViolationException(inner) => inner.fmt(f),
            Error::HandshakeNotFoundException(inner) => inner.fmt(f),
            Error::InvalidHandshakeTransitionException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::MalformedPolicyDocumentException(inner) => inner.fmt(f),
            Error::MasterCannotLeaveOrganizationException(inner) => inner.fmt(f),
            Error::OrganizationNotEmptyException(inner) => inner.fmt(f),
            Error::OrganizationalUnitNotEmptyException(inner) => inner.fmt(f),
            Error::OrganizationalUnitNotFoundException(inner) => inner.fmt(f),
            Error::ParentNotFoundException(inner) => inner.fmt(f),
            Error::PolicyChangesInProgressException(inner) => inner.fmt(f),
            Error::PolicyInUseException(inner) => inner.fmt(f),
            Error::PolicyNotAttachedException(inner) => inner.fmt(f),
            Error::PolicyNotFoundException(inner) => inner.fmt(f),
            Error::PolicyTypeAlreadyEnabledException(inner) => inner.fmt(f),
            Error::PolicyTypeNotAvailableForOrganizationException(inner) => inner.fmt(f),
            Error::PolicyTypeNotEnabledException(inner) => inner.fmt(f),
            Error::RootNotFoundException(inner) => inner.fmt(f),
            Error::ServiceException(inner) => inner.fmt(f),
            Error::SourceParentNotFoundException(inner) => inner.fmt(f),
            Error::TargetNotFoundException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::UnsupportedApiEndpointException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AcceptHandshakeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AcceptHandshakeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AcceptHandshakeErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::AcceptHandshakeErrorKind::AccessDeniedForDependencyException(
                    inner,
                ) => Error::AccessDeniedForDependencyException(inner),
                crate::error::AcceptHandshakeErrorKind::AwsOrganizationsNotInUseException(
                    inner,
                ) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::AcceptHandshakeErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::AcceptHandshakeErrorKind::HandshakeAlreadyInStateException(inner) => {
                    Error::HandshakeAlreadyInStateException(inner)
                }
                crate::error::AcceptHandshakeErrorKind::HandshakeConstraintViolationException(
                    inner,
                ) => Error::HandshakeConstraintViolationException(inner),
                crate::error::AcceptHandshakeErrorKind::HandshakeNotFoundException(inner) => {
                    Error::HandshakeNotFoundException(inner)
                }
                crate::error::AcceptHandshakeErrorKind::InvalidHandshakeTransitionException(
                    inner,
                ) => Error::InvalidHandshakeTransitionException(inner),
                crate::error::AcceptHandshakeErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::AcceptHandshakeErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::AcceptHandshakeErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AcceptHandshakeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AttachPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachPolicyErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::AttachPolicyErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::AttachPolicyErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::AttachPolicyErrorKind::ConstraintViolationException(inner) => {
                    Error::ConstraintViolationException(inner)
                }
                crate::error::AttachPolicyErrorKind::DuplicatePolicyAttachmentException(inner) => {
                    Error::DuplicatePolicyAttachmentException(inner)
                }
                crate::error::AttachPolicyErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::AttachPolicyErrorKind::PolicyChangesInProgressException(inner) => {
                    Error::PolicyChangesInProgressException(inner)
                }
                crate::error::AttachPolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::AttachPolicyErrorKind::PolicyTypeNotEnabledException(inner) => {
                    Error::PolicyTypeNotEnabledException(inner)
                }
                crate::error::AttachPolicyErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::AttachPolicyErrorKind::TargetNotFoundException(inner) => {
                    Error::TargetNotFoundException(inner)
                }
                crate::error::AttachPolicyErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AttachPolicyErrorKind::UnsupportedApiEndpointException(inner) => {
                    Error::UnsupportedApiEndpointException(inner)
                }
                crate::error::AttachPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelHandshakeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelHandshakeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelHandshakeErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::CancelHandshakeErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::CancelHandshakeErrorKind::HandshakeAlreadyInStateException(inner) => {
                    Error::HandshakeAlreadyInStateException(inner)
                }
                crate::error::CancelHandshakeErrorKind::HandshakeNotFoundException(inner) => {
                    Error::HandshakeNotFoundException(inner)
                }
                crate::error::CancelHandshakeErrorKind::InvalidHandshakeTransitionException(
                    inner,
                ) => Error::InvalidHandshakeTransitionException(inner),
                crate::error::CancelHandshakeErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::CancelHandshakeErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::CancelHandshakeErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::CancelHandshakeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAccountError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAccountError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAccountErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::CreateAccountErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::CreateAccountErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::CreateAccountErrorKind::ConstraintViolationException(inner) => {
                    Error::ConstraintViolationException(inner)
                }
                crate::error::CreateAccountErrorKind::FinalizingOrganizationException(inner) => {
                    Error::FinalizingOrganizationException(inner)
                }
                crate::error::CreateAccountErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::CreateAccountErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::CreateAccountErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::CreateAccountErrorKind::UnsupportedApiEndpointException(inner) => {
                    Error::UnsupportedApiEndpointException(inner)
                }
                crate::error::CreateAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateGovCloudAccountError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateGovCloudAccountError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateGovCloudAccountErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::CreateGovCloudAccountErrorKind::AwsOrganizationsNotInUseException(
                    inner,
                ) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::CreateGovCloudAccountErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::CreateGovCloudAccountErrorKind::ConstraintViolationException(
                    inner,
                ) => Error::ConstraintViolationException(inner),
                crate::error::CreateGovCloudAccountErrorKind::FinalizingOrganizationException(
                    inner,
                ) => Error::FinalizingOrganizationException(inner),
                crate::error::CreateGovCloudAccountErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::CreateGovCloudAccountErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::CreateGovCloudAccountErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::CreateGovCloudAccountErrorKind::UnsupportedApiEndpointException(
                    inner,
                ) => Error::UnsupportedApiEndpointException(inner),
                crate::error::CreateGovCloudAccountErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateOrganizationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateOrganizationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateOrganizationErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::CreateOrganizationErrorKind::AccessDeniedForDependencyException(
                    inner,
                ) => Error::AccessDeniedForDependencyException(inner),
                crate::error::CreateOrganizationErrorKind::AlreadyInOrganizationException(
                    inner,
                ) => Error::AlreadyInOrganizationException(inner),
                crate::error::CreateOrganizationErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::CreateOrganizationErrorKind::ConstraintViolationException(inner) => {
                    Error::ConstraintViolationException(inner)
                }
                crate::error::CreateOrganizationErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::CreateOrganizationErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::CreateOrganizationErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::CreateOrganizationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateOrganizationalUnitError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateOrganizationalUnitError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateOrganizationalUnitErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::CreateOrganizationalUnitErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::CreateOrganizationalUnitErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::CreateOrganizationalUnitErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::CreateOrganizationalUnitErrorKind::DuplicateOrganizationalUnitException(inner) => Error::DuplicateOrganizationalUnitException(inner),
                crate::error::CreateOrganizationalUnitErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::CreateOrganizationalUnitErrorKind::ParentNotFoundException(inner) => Error::ParentNotFoundException(inner),
                crate::error::CreateOrganizationalUnitErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::CreateOrganizationalUnitErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::CreateOrganizationalUnitErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreatePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreatePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreatePolicyErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::CreatePolicyErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::CreatePolicyErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::CreatePolicyErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::CreatePolicyErrorKind::DuplicatePolicyException(inner) => Error::DuplicatePolicyException(inner),
                crate::error::CreatePolicyErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::CreatePolicyErrorKind::MalformedPolicyDocumentException(inner) => Error::MalformedPolicyDocumentException(inner),
                crate::error::CreatePolicyErrorKind::PolicyTypeNotAvailableForOrganizationException(inner) => Error::PolicyTypeNotAvailableForOrganizationException(inner),
                crate::error::CreatePolicyErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::CreatePolicyErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::CreatePolicyErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::CreatePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeclineHandshakeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeclineHandshakeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeclineHandshakeErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::DeclineHandshakeErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::DeclineHandshakeErrorKind::HandshakeAlreadyInStateException(
                    inner,
                ) => Error::HandshakeAlreadyInStateException(inner),
                crate::error::DeclineHandshakeErrorKind::HandshakeNotFoundException(inner) => {
                    Error::HandshakeNotFoundException(inner)
                }
                crate::error::DeclineHandshakeErrorKind::InvalidHandshakeTransitionException(
                    inner,
                ) => Error::InvalidHandshakeTransitionException(inner),
                crate::error::DeclineHandshakeErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::DeclineHandshakeErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::DeclineHandshakeErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DeclineHandshakeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteOrganizationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteOrganizationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteOrganizationErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::DeleteOrganizationErrorKind::AwsOrganizationsNotInUseException(
                    inner,
                ) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::DeleteOrganizationErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::DeleteOrganizationErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::DeleteOrganizationErrorKind::OrganizationNotEmptyException(inner) => {
                    Error::OrganizationNotEmptyException(inner)
                }
                crate::error::DeleteOrganizationErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::DeleteOrganizationErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DeleteOrganizationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteOrganizationalUnitError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteOrganizationalUnitError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteOrganizationalUnitErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::DeleteOrganizationalUnitErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::DeleteOrganizationalUnitErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::DeleteOrganizationalUnitErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::DeleteOrganizationalUnitErrorKind::OrganizationalUnitNotEmptyException(inner) => Error::OrganizationalUnitNotEmptyException(inner),
                crate::error::DeleteOrganizationalUnitErrorKind::OrganizationalUnitNotFoundException(inner) => Error::OrganizationalUnitNotFoundException(inner),
                crate::error::DeleteOrganizationalUnitErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::DeleteOrganizationalUnitErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::DeleteOrganizationalUnitErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeletePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeletePolicyErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::DeletePolicyErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::DeletePolicyErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::DeletePolicyErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::DeletePolicyErrorKind::PolicyInUseException(inner) => {
                    Error::PolicyInUseException(inner)
                }
                crate::error::DeletePolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::DeletePolicyErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::DeletePolicyErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DeletePolicyErrorKind::UnsupportedApiEndpointException(inner) => {
                    Error::UnsupportedApiEndpointException(inner)
                }
                crate::error::DeletePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterDelegatedAdministratorError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeregisterDelegatedAdministratorError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeregisterDelegatedAdministratorErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::DeregisterDelegatedAdministratorErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
                crate::error::DeregisterDelegatedAdministratorErrorKind::AccountNotRegisteredException(inner) => Error::AccountNotRegisteredException(inner),
                crate::error::DeregisterDelegatedAdministratorErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::DeregisterDelegatedAdministratorErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::DeregisterDelegatedAdministratorErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::DeregisterDelegatedAdministratorErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::DeregisterDelegatedAdministratorErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::DeregisterDelegatedAdministratorErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::DeregisterDelegatedAdministratorErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::DeregisterDelegatedAdministratorErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAccountError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAccountError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAccountErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::DescribeAccountErrorKind::AccountNotFoundException(inner) => {
                    Error::AccountNotFoundException(inner)
                }
                crate::error::DescribeAccountErrorKind::AwsOrganizationsNotInUseException(
                    inner,
                ) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::DescribeAccountErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::DescribeAccountErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::DescribeAccountErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DescribeAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCreateAccountStatusError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCreateAccountStatusError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeCreateAccountStatusErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::DescribeCreateAccountStatusErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::DescribeCreateAccountStatusErrorKind::CreateAccountStatusNotFoundException(inner) => Error::CreateAccountStatusNotFoundException(inner),
                crate::error::DescribeCreateAccountStatusErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::DescribeCreateAccountStatusErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::DescribeCreateAccountStatusErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::DescribeCreateAccountStatusErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::DescribeCreateAccountStatusErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEffectivePolicyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEffectivePolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeEffectivePolicyErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::DescribeEffectivePolicyErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::DescribeEffectivePolicyErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::DescribeEffectivePolicyErrorKind::EffectivePolicyNotFoundException(inner) => Error::EffectivePolicyNotFoundException(inner),
                crate::error::DescribeEffectivePolicyErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::DescribeEffectivePolicyErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::DescribeEffectivePolicyErrorKind::TargetNotFoundException(inner) => Error::TargetNotFoundException(inner),
                crate::error::DescribeEffectivePolicyErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::DescribeEffectivePolicyErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::DescribeEffectivePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeHandshakeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeHandshakeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeHandshakeErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::DescribeHandshakeErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::DescribeHandshakeErrorKind::HandshakeNotFoundException(inner) => {
                    Error::HandshakeNotFoundException(inner)
                }
                crate::error::DescribeHandshakeErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::DescribeHandshakeErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::DescribeHandshakeErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DescribeHandshakeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeOrganizationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeOrganizationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeOrganizationErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::DescribeOrganizationErrorKind::AwsOrganizationsNotInUseException(
                    inner,
                ) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::DescribeOrganizationErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::DescribeOrganizationErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::DescribeOrganizationErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DescribeOrganizationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeOrganizationalUnitError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeOrganizationalUnitError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeOrganizationalUnitErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::DescribeOrganizationalUnitErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::DescribeOrganizationalUnitErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::DescribeOrganizationalUnitErrorKind::OrganizationalUnitNotFoundException(inner) => Error::OrganizationalUnitNotFoundException(inner),
                crate::error::DescribeOrganizationalUnitErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::DescribeOrganizationalUnitErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::DescribeOrganizationalUnitErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePolicyErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::DescribePolicyErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::DescribePolicyErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::DescribePolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::DescribePolicyErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::DescribePolicyErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DescribePolicyErrorKind::UnsupportedApiEndpointException(inner) => {
                    Error::UnsupportedApiEndpointException(inner)
                }
                crate::error::DescribePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetachPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachPolicyErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::DetachPolicyErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::DetachPolicyErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::DetachPolicyErrorKind::ConstraintViolationException(inner) => {
                    Error::ConstraintViolationException(inner)
                }
                crate::error::DetachPolicyErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::DetachPolicyErrorKind::PolicyChangesInProgressException(inner) => {
                    Error::PolicyChangesInProgressException(inner)
                }
                crate::error::DetachPolicyErrorKind::PolicyNotAttachedException(inner) => {
                    Error::PolicyNotAttachedException(inner)
                }
                crate::error::DetachPolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::DetachPolicyErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::DetachPolicyErrorKind::TargetNotFoundException(inner) => {
                    Error::TargetNotFoundException(inner)
                }
                crate::error::DetachPolicyErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DetachPolicyErrorKind::UnsupportedApiEndpointException(inner) => {
                    Error::UnsupportedApiEndpointException(inner)
                }
                crate::error::DetachPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableAWSServiceAccessError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisableAWSServiceAccessError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DisableAWSServiceAccessErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::DisableAWSServiceAccessErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::DisableAWSServiceAccessErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::DisableAWSServiceAccessErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::DisableAWSServiceAccessErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::DisableAWSServiceAccessErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::DisableAWSServiceAccessErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::DisableAWSServiceAccessErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::DisableAWSServiceAccessErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisablePolicyTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DisablePolicyTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisablePolicyTypeErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::DisablePolicyTypeErrorKind::AwsOrganizationsNotInUseException(
                    inner,
                ) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::DisablePolicyTypeErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::DisablePolicyTypeErrorKind::ConstraintViolationException(inner) => {
                    Error::ConstraintViolationException(inner)
                }
                crate::error::DisablePolicyTypeErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::DisablePolicyTypeErrorKind::PolicyChangesInProgressException(
                    inner,
                ) => Error::PolicyChangesInProgressException(inner),
                crate::error::DisablePolicyTypeErrorKind::PolicyTypeNotEnabledException(inner) => {
                    Error::PolicyTypeNotEnabledException(inner)
                }
                crate::error::DisablePolicyTypeErrorKind::RootNotFoundException(inner) => {
                    Error::RootNotFoundException(inner)
                }
                crate::error::DisablePolicyTypeErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::DisablePolicyTypeErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DisablePolicyTypeErrorKind::UnsupportedApiEndpointException(
                    inner,
                ) => Error::UnsupportedApiEndpointException(inner),
                crate::error::DisablePolicyTypeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableAllFeaturesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnableAllFeaturesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableAllFeaturesErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::EnableAllFeaturesErrorKind::AwsOrganizationsNotInUseException(
                    inner,
                ) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::EnableAllFeaturesErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::EnableAllFeaturesErrorKind::HandshakeConstraintViolationException(
                    inner,
                ) => Error::HandshakeConstraintViolationException(inner),
                crate::error::EnableAllFeaturesErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::EnableAllFeaturesErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::EnableAllFeaturesErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::EnableAllFeaturesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableAWSServiceAccessError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnableAWSServiceAccessError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::EnableAWSServiceAccessErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::EnableAWSServiceAccessErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::EnableAWSServiceAccessErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::EnableAWSServiceAccessErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::EnableAWSServiceAccessErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::EnableAWSServiceAccessErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::EnableAWSServiceAccessErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::EnableAWSServiceAccessErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::EnableAWSServiceAccessErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnablePolicyTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnablePolicyTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::EnablePolicyTypeErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::EnablePolicyTypeErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::EnablePolicyTypeErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::EnablePolicyTypeErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::EnablePolicyTypeErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::EnablePolicyTypeErrorKind::PolicyChangesInProgressException(inner) => Error::PolicyChangesInProgressException(inner),
                crate::error::EnablePolicyTypeErrorKind::PolicyTypeAlreadyEnabledException(inner) => Error::PolicyTypeAlreadyEnabledException(inner),
                crate::error::EnablePolicyTypeErrorKind::PolicyTypeNotAvailableForOrganizationException(inner) => Error::PolicyTypeNotAvailableForOrganizationException(inner),
                crate::error::EnablePolicyTypeErrorKind::RootNotFoundException(inner) => Error::RootNotFoundException(inner),
                crate::error::EnablePolicyTypeErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::EnablePolicyTypeErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::EnablePolicyTypeErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::EnablePolicyTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::InviteAccountToOrganizationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::InviteAccountToOrganizationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::InviteAccountToOrganizationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::InviteAccountToOrganizationErrorKind::AccountOwnerNotVerifiedException(inner) => Error::AccountOwnerNotVerifiedException(inner),
                crate::error::InviteAccountToOrganizationErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::InviteAccountToOrganizationErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::InviteAccountToOrganizationErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::InviteAccountToOrganizationErrorKind::DuplicateHandshakeException(inner) => Error::DuplicateHandshakeException(inner),
                crate::error::InviteAccountToOrganizationErrorKind::FinalizingOrganizationException(inner) => Error::FinalizingOrganizationException(inner),
                crate::error::InviteAccountToOrganizationErrorKind::HandshakeConstraintViolationException(inner) => Error::HandshakeConstraintViolationException(inner),
                crate::error::InviteAccountToOrganizationErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::InviteAccountToOrganizationErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::InviteAccountToOrganizationErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::InviteAccountToOrganizationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::LeaveOrganizationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::LeaveOrganizationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::LeaveOrganizationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::LeaveOrganizationErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
                crate::error::LeaveOrganizationErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::LeaveOrganizationErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::LeaveOrganizationErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::LeaveOrganizationErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::LeaveOrganizationErrorKind::MasterCannotLeaveOrganizationException(inner) => Error::MasterCannotLeaveOrganizationException(inner),
                crate::error::LeaveOrganizationErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::LeaveOrganizationErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::LeaveOrganizationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAccountsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAccountsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAccountsErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::ListAccountsErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::ListAccountsErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::ListAccountsErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::ListAccountsErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListAccountsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAccountsForParentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAccountsForParentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAccountsForParentErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::ListAccountsForParentErrorKind::AwsOrganizationsNotInUseException(
                    inner,
                ) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::ListAccountsForParentErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::ListAccountsForParentErrorKind::ParentNotFoundException(inner) => {
                    Error::ParentNotFoundException(inner)
                }
                crate::error::ListAccountsForParentErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::ListAccountsForParentErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListAccountsForParentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAWSServiceAccessForOrganizationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListAWSServiceAccessForOrganizationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListAWSServiceAccessForOrganizationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::ListAWSServiceAccessForOrganizationErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::ListAWSServiceAccessForOrganizationErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::ListAWSServiceAccessForOrganizationErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::ListAWSServiceAccessForOrganizationErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::ListAWSServiceAccessForOrganizationErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::ListAWSServiceAccessForOrganizationErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::ListAWSServiceAccessForOrganizationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListChildrenError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListChildrenError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListChildrenErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::ListChildrenErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::ListChildrenErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::ListChildrenErrorKind::ParentNotFoundException(inner) => {
                    Error::ParentNotFoundException(inner)
                }
                crate::error::ListChildrenErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::ListChildrenErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListChildrenErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListCreateAccountStatusError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListCreateAccountStatusError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListCreateAccountStatusErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::ListCreateAccountStatusErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::ListCreateAccountStatusErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::ListCreateAccountStatusErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::ListCreateAccountStatusErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::ListCreateAccountStatusErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::ListCreateAccountStatusErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDelegatedAdministratorsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListDelegatedAdministratorsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListDelegatedAdministratorsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::ListDelegatedAdministratorsErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::ListDelegatedAdministratorsErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::ListDelegatedAdministratorsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::ListDelegatedAdministratorsErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::ListDelegatedAdministratorsErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::ListDelegatedAdministratorsErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::ListDelegatedAdministratorsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDelegatedServicesForAccountError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListDelegatedServicesForAccountError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListDelegatedServicesForAccountErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::ListDelegatedServicesForAccountErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
                crate::error::ListDelegatedServicesForAccountErrorKind::AccountNotRegisteredException(inner) => Error::AccountNotRegisteredException(inner),
                crate::error::ListDelegatedServicesForAccountErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::ListDelegatedServicesForAccountErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::ListDelegatedServicesForAccountErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::ListDelegatedServicesForAccountErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::ListDelegatedServicesForAccountErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::ListDelegatedServicesForAccountErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::ListDelegatedServicesForAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListHandshakesForAccountError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListHandshakesForAccountError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListHandshakesForAccountErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::ListHandshakesForAccountErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::ListHandshakesForAccountErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::ListHandshakesForAccountErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::ListHandshakesForAccountErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::ListHandshakesForAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListHandshakesForOrganizationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListHandshakesForOrganizationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListHandshakesForOrganizationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::ListHandshakesForOrganizationErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::ListHandshakesForOrganizationErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::ListHandshakesForOrganizationErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::ListHandshakesForOrganizationErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::ListHandshakesForOrganizationErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::ListHandshakesForOrganizationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOrganizationalUnitsForParentError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListOrganizationalUnitsForParentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListOrganizationalUnitsForParentErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::ListOrganizationalUnitsForParentErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::ListOrganizationalUnitsForParentErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::ListOrganizationalUnitsForParentErrorKind::ParentNotFoundException(inner) => Error::ParentNotFoundException(inner),
                crate::error::ListOrganizationalUnitsForParentErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::ListOrganizationalUnitsForParentErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::ListOrganizationalUnitsForParentErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListParentsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListParentsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListParentsErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::ListParentsErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::ListParentsErrorKind::ChildNotFoundException(inner) => {
                    Error::ChildNotFoundException(inner)
                }
                crate::error::ListParentsErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::ListParentsErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::ListParentsErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListParentsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPoliciesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPoliciesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPoliciesErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::ListPoliciesErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::ListPoliciesErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::ListPoliciesErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::ListPoliciesErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListPoliciesErrorKind::UnsupportedApiEndpointException(inner) => {
                    Error::UnsupportedApiEndpointException(inner)
                }
                crate::error::ListPoliciesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPoliciesForTargetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPoliciesForTargetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPoliciesForTargetErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::ListPoliciesForTargetErrorKind::AwsOrganizationsNotInUseException(
                    inner,
                ) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::ListPoliciesForTargetErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::ListPoliciesForTargetErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::ListPoliciesForTargetErrorKind::TargetNotFoundException(inner) => {
                    Error::TargetNotFoundException(inner)
                }
                crate::error::ListPoliciesForTargetErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListPoliciesForTargetErrorKind::UnsupportedApiEndpointException(
                    inner,
                ) => Error::UnsupportedApiEndpointException(inner),
                crate::error::ListPoliciesForTargetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListRootsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListRootsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListRootsErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::ListRootsErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::ListRootsErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::ListRootsErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::ListRootsErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListRootsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::AwsOrganizationsNotInUseException(
                    inner,
                ) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::ListTagsForResourceErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::TargetNotFoundException(inner) => {
                    Error::TargetNotFoundException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTargetsForPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTargetsForPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTargetsForPolicyErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::ListTargetsForPolicyErrorKind::AwsOrganizationsNotInUseException(
                    inner,
                ) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::ListTargetsForPolicyErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::ListTargetsForPolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::ListTargetsForPolicyErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::ListTargetsForPolicyErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListTargetsForPolicyErrorKind::UnsupportedApiEndpointException(
                    inner,
                ) => Error::UnsupportedApiEndpointException(inner),
                crate::error::ListTargetsForPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::MoveAccountError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::MoveAccountError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::MoveAccountErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::MoveAccountErrorKind::AccountNotFoundException(inner) => {
                    Error::AccountNotFoundException(inner)
                }
                crate::error::MoveAccountErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::MoveAccountErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::MoveAccountErrorKind::DestinationParentNotFoundException(inner) => {
                    Error::DestinationParentNotFoundException(inner)
                }
                crate::error::MoveAccountErrorKind::DuplicateAccountException(inner) => {
                    Error::DuplicateAccountException(inner)
                }
                crate::error::MoveAccountErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::MoveAccountErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::MoveAccountErrorKind::SourceParentNotFoundException(inner) => {
                    Error::SourceParentNotFoundException(inner)
                }
                crate::error::MoveAccountErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::MoveAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterDelegatedAdministratorError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RegisterDelegatedAdministratorError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RegisterDelegatedAdministratorErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::RegisterDelegatedAdministratorErrorKind::AccountAlreadyRegisteredException(inner) => Error::AccountAlreadyRegisteredException(inner),
                crate::error::RegisterDelegatedAdministratorErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
                crate::error::RegisterDelegatedAdministratorErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::RegisterDelegatedAdministratorErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::RegisterDelegatedAdministratorErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::RegisterDelegatedAdministratorErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::RegisterDelegatedAdministratorErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::RegisterDelegatedAdministratorErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::RegisterDelegatedAdministratorErrorKind::UnsupportedApiEndpointException(inner) => Error::UnsupportedApiEndpointException(inner),
                crate::error::RegisterDelegatedAdministratorErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveAccountFromOrganizationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RemoveAccountFromOrganizationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RemoveAccountFromOrganizationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::RemoveAccountFromOrganizationErrorKind::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
                crate::error::RemoveAccountFromOrganizationErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::RemoveAccountFromOrganizationErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::RemoveAccountFromOrganizationErrorKind::ConstraintViolationException(inner) => Error::ConstraintViolationException(inner),
                crate::error::RemoveAccountFromOrganizationErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::RemoveAccountFromOrganizationErrorKind::MasterCannotLeaveOrganizationException(inner) => Error::MasterCannotLeaveOrganizationException(inner),
                crate::error::RemoveAccountFromOrganizationErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::RemoveAccountFromOrganizationErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::RemoveAccountFromOrganizationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::TagResourceErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::TagResourceErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::TagResourceErrorKind::ConstraintViolationException(inner) => {
                    Error::ConstraintViolationException(inner)
                }
                crate::error::TagResourceErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::TagResourceErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::TagResourceErrorKind::TargetNotFoundException(inner) => {
                    Error::TargetNotFoundException(inner)
                }
                crate::error::TagResourceErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::UntagResourceErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::UntagResourceErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::UntagResourceErrorKind::ConstraintViolationException(inner) => {
                    Error::ConstraintViolationException(inner)
                }
                crate::error::UntagResourceErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::UntagResourceErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::UntagResourceErrorKind::TargetNotFoundException(inner) => {
                    Error::TargetNotFoundException(inner)
                }
                crate::error::UntagResourceErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateOrganizationalUnitError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateOrganizationalUnitError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateOrganizationalUnitErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
                crate::error::UpdateOrganizationalUnitErrorKind::AwsOrganizationsNotInUseException(inner) => Error::AwsOrganizationsNotInUseException(inner),
                crate::error::UpdateOrganizationalUnitErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::UpdateOrganizationalUnitErrorKind::DuplicateOrganizationalUnitException(inner) => Error::DuplicateOrganizationalUnitException(inner),
                crate::error::UpdateOrganizationalUnitErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
                crate::error::UpdateOrganizationalUnitErrorKind::OrganizationalUnitNotFoundException(inner) => Error::OrganizationalUnitNotFoundException(inner),
                crate::error::UpdateOrganizationalUnitErrorKind::ServiceException(inner) => Error::ServiceException(inner),
                crate::error::UpdateOrganizationalUnitErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::UpdateOrganizationalUnitErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdatePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdatePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdatePolicyErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::UpdatePolicyErrorKind::AwsOrganizationsNotInUseException(inner) => {
                    Error::AwsOrganizationsNotInUseException(inner)
                }
                crate::error::UpdatePolicyErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::UpdatePolicyErrorKind::ConstraintViolationException(inner) => {
                    Error::ConstraintViolationException(inner)
                }
                crate::error::UpdatePolicyErrorKind::DuplicatePolicyException(inner) => {
                    Error::DuplicatePolicyException(inner)
                }
                crate::error::UpdatePolicyErrorKind::InvalidInputException(inner) => {
                    Error::InvalidInputException(inner)
                }
                crate::error::UpdatePolicyErrorKind::MalformedPolicyDocumentException(inner) => {
                    Error::MalformedPolicyDocumentException(inner)
                }
                crate::error::UpdatePolicyErrorKind::PolicyChangesInProgressException(inner) => {
                    Error::PolicyChangesInProgressException(inner)
                }
                crate::error::UpdatePolicyErrorKind::PolicyNotFoundException(inner) => {
                    Error::PolicyNotFoundException(inner)
                }
                crate::error::UpdatePolicyErrorKind::ServiceException(inner) => {
                    Error::ServiceException(inner)
                }
                crate::error::UpdatePolicyErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::UpdatePolicyErrorKind::UnsupportedApiEndpointException(inner) => {
                    Error::UnsupportedApiEndpointException(inner)
                }
                crate::error::UpdatePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
