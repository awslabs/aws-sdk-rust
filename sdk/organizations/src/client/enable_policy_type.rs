// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`EnablePolicyType`](crate::client::fluent_builders::EnablePolicyType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`root_id(impl Into<String>)`](crate::client::fluent_builders::EnablePolicyType::root_id) / [`set_root_id(Option<String>)`](crate::client::fluent_builders::EnablePolicyType::set_root_id): <p>The unique identifier (ID) of the root in which you want to enable a policy type. You can get the ID from the <code>ListRoots</code> operation.</p>  <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a root ID string requires "r-" followed by from 4 to 32 lowercase letters or digits.</p>
    ///   - [`policy_type(PolicyType)`](crate::client::fluent_builders::EnablePolicyType::policy_type) / [`set_policy_type(Option<PolicyType>)`](crate::client::fluent_builders::EnablePolicyType::set_policy_type): <p>The policy type that you want to enable. You can specify one of the following values:</p>  <ul>   <li> <p> <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a> </p> </li>   <li> <p> <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a> </p> </li>   <li> <p> <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a> </p> </li>   <li> <p> <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a> </p> </li>  </ul>
    /// - On success, responds with [`EnablePolicyTypeOutput`](crate::output::EnablePolicyTypeOutput) with field(s):
    ///   - [`root(Option<Root>)`](crate::output::EnablePolicyTypeOutput::root): <p>A structure that shows the root with the updated list of enabled policy types.</p>
    /// - On failure, responds with [`SdkError<EnablePolicyTypeError>`](crate::error::EnablePolicyTypeError)
    pub fn enable_policy_type(&self) -> crate::client::fluent_builders::EnablePolicyType {
        crate::client::fluent_builders::EnablePolicyType::new(self.handle.clone())
    }
}
