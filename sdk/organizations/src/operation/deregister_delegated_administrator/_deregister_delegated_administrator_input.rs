// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeregisterDelegatedAdministratorInput {
    /// <p>The account ID number of the member account in the organization that you want to deregister as a delegated administrator.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The service principal name of an Amazon Web Services service for which the account is a delegated administrator.</p>
    /// <p>Delegated administrator privileges are revoked for only the specified Amazon Web Services service from the member account. If the specified service is the only service for which the member account is a delegated administrator, the operation also revokes Organizations read action permissions.</p>
    #[doc(hidden)]
    pub service_principal: std::option::Option<std::string::String>,
}
impl DeregisterDelegatedAdministratorInput {
    /// <p>The account ID number of the member account in the organization that you want to deregister as a delegated administrator.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The service principal name of an Amazon Web Services service for which the account is a delegated administrator.</p>
    /// <p>Delegated administrator privileges are revoked for only the specified Amazon Web Services service from the member account. If the specified service is the only service for which the member account is a delegated administrator, the operation also revokes Organizations read action permissions.</p>
    pub fn service_principal(&self) -> std::option::Option<&str> {
        self.service_principal.as_deref()
    }
}
impl DeregisterDelegatedAdministratorInput {
    /// Creates a new builder-style object to manufacture [`DeregisterDelegatedAdministratorInput`](crate::operation::deregister_delegated_administrator::DeregisterDelegatedAdministratorInput).
    pub fn builder() -> crate::operation::deregister_delegated_administrator::builders::DeregisterDelegatedAdministratorInputBuilder{
        crate::operation::deregister_delegated_administrator::builders::DeregisterDelegatedAdministratorInputBuilder::default()
    }
}

/// A builder for [`DeregisterDelegatedAdministratorInput`](crate::operation::deregister_delegated_administrator::DeregisterDelegatedAdministratorInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeregisterDelegatedAdministratorInputBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) service_principal: std::option::Option<std::string::String>,
}
impl DeregisterDelegatedAdministratorInputBuilder {
    /// <p>The account ID number of the member account in the organization that you want to deregister as a delegated administrator.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The account ID number of the member account in the organization that you want to deregister as a delegated administrator.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The service principal name of an Amazon Web Services service for which the account is a delegated administrator.</p>
    /// <p>Delegated administrator privileges are revoked for only the specified Amazon Web Services service from the member account. If the specified service is the only service for which the member account is a delegated administrator, the operation also revokes Organizations read action permissions.</p>
    pub fn service_principal(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_principal = Some(input.into());
        self
    }
    /// <p>The service principal name of an Amazon Web Services service for which the account is a delegated administrator.</p>
    /// <p>Delegated administrator privileges are revoked for only the specified Amazon Web Services service from the member account. If the specified service is the only service for which the member account is a delegated administrator, the operation also revokes Organizations read action permissions.</p>
    pub fn set_service_principal(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.service_principal = input;
        self
    }
    /// Consumes the builder and constructs a [`DeregisterDelegatedAdministratorInput`](crate::operation::deregister_delegated_administrator::DeregisterDelegatedAdministratorInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::deregister_delegated_administrator::DeregisterDelegatedAdministratorInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::deregister_delegated_administrator::DeregisterDelegatedAdministratorInput {
                account_id: self.account_id
                ,
                service_principal: self.service_principal
                ,
            }
        )
    }
}
