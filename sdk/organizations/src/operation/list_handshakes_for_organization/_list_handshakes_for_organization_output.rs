// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListHandshakesForOrganizationOutput {
    /// <p>A list of <code>Handshake</code> objects with details about each of the handshakes that are associated with an organization.</p>
    pub handshakes: ::std::option::Option<::std::vec::Vec<crate::types::Handshake>>,
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListHandshakesForOrganizationOutput {
    /// <p>A list of <code>Handshake</code> objects with details about each of the handshakes that are associated with an organization.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.handshakes.is_none()`.
    pub fn handshakes(&self) -> &[crate::types::Handshake] {
        self.handshakes.as_deref().unwrap_or_default()
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListHandshakesForOrganizationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListHandshakesForOrganizationOutput {
    /// Creates a new builder-style object to manufacture [`ListHandshakesForOrganizationOutput`](crate::operation::list_handshakes_for_organization::ListHandshakesForOrganizationOutput).
    pub fn builder() -> crate::operation::list_handshakes_for_organization::builders::ListHandshakesForOrganizationOutputBuilder {
        crate::operation::list_handshakes_for_organization::builders::ListHandshakesForOrganizationOutputBuilder::default()
    }
}

/// A builder for [`ListHandshakesForOrganizationOutput`](crate::operation::list_handshakes_for_organization::ListHandshakesForOrganizationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListHandshakesForOrganizationOutputBuilder {
    pub(crate) handshakes: ::std::option::Option<::std::vec::Vec<crate::types::Handshake>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListHandshakesForOrganizationOutputBuilder {
    /// Appends an item to `handshakes`.
    ///
    /// To override the contents of this collection use [`set_handshakes`](Self::set_handshakes).
    ///
    /// <p>A list of <code>Handshake</code> objects with details about each of the handshakes that are associated with an organization.</p>
    pub fn handshakes(mut self, input: crate::types::Handshake) -> Self {
        let mut v = self.handshakes.unwrap_or_default();
        v.push(input);
        self.handshakes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>Handshake</code> objects with details about each of the handshakes that are associated with an organization.</p>
    pub fn set_handshakes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Handshake>>) -> Self {
        self.handshakes = input;
        self
    }
    /// <p>A list of <code>Handshake</code> objects with details about each of the handshakes that are associated with an organization.</p>
    pub fn get_handshakes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Handshake>> {
        &self.handshakes
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListHandshakesForOrganizationOutput`](crate::operation::list_handshakes_for_organization::ListHandshakesForOrganizationOutput).
    pub fn build(self) -> crate::operation::list_handshakes_for_organization::ListHandshakesForOrganizationOutput {
        crate::operation::list_handshakes_for_organization::ListHandshakesForOrganizationOutput {
            handshakes: self.handshakes,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
