// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeOrganizationOutput {
    /// <p>A structure that contains information about the organization.</p> <important>
    /// <p>The <code>AvailablePolicyTypes</code> part of the response is deprecated, and you shouldn't use it in your apps. It doesn't include any policy type supported by Organizations other than SCPs. To determine which policy types are enabled in your organization, use the <code> <code>ListRoots</code> </code> operation.</p>
    /// </important>
    #[doc(hidden)]
    pub organization: std::option::Option<crate::types::Organization>,
    _request_id: Option<String>,
}
impl DescribeOrganizationOutput {
    /// <p>A structure that contains information about the organization.</p> <important>
    /// <p>The <code>AvailablePolicyTypes</code> part of the response is deprecated, and you shouldn't use it in your apps. It doesn't include any policy type supported by Organizations other than SCPs. To determine which policy types are enabled in your organization, use the <code> <code>ListRoots</code> </code> operation.</p>
    /// </important>
    pub fn organization(&self) -> std::option::Option<&crate::types::Organization> {
        self.organization.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeOrganizationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeOrganizationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationOutput`](crate::operation::describe_organization::DescribeOrganizationOutput).
    pub fn builder(
    ) -> crate::operation::describe_organization::builders::DescribeOrganizationOutputBuilder {
        crate::operation::describe_organization::builders::DescribeOrganizationOutputBuilder::default()
    }
}

/// A builder for [`DescribeOrganizationOutput`](crate::operation::describe_organization::DescribeOrganizationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeOrganizationOutputBuilder {
    pub(crate) organization: std::option::Option<crate::types::Organization>,
    _request_id: Option<String>,
}
impl DescribeOrganizationOutputBuilder {
    /// <p>A structure that contains information about the organization.</p> <important>
    /// <p>The <code>AvailablePolicyTypes</code> part of the response is deprecated, and you shouldn't use it in your apps. It doesn't include any policy type supported by Organizations other than SCPs. To determine which policy types are enabled in your organization, use the <code> <code>ListRoots</code> </code> operation.</p>
    /// </important>
    pub fn organization(mut self, input: crate::types::Organization) -> Self {
        self.organization = Some(input);
        self
    }
    /// <p>A structure that contains information about the organization.</p> <important>
    /// <p>The <code>AvailablePolicyTypes</code> part of the response is deprecated, and you shouldn't use it in your apps. It doesn't include any policy type supported by Organizations other than SCPs. To determine which policy types are enabled in your organization, use the <code> <code>ListRoots</code> </code> operation.</p>
    /// </important>
    pub fn set_organization(
        mut self,
        input: std::option::Option<crate::types::Organization>,
    ) -> Self {
        self.organization = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeOrganizationOutput`](crate::operation::describe_organization::DescribeOrganizationOutput).
    pub fn build(self) -> crate::operation::describe_organization::DescribeOrganizationOutput {
        crate::operation::describe_organization::DescribeOrganizationOutput {
            organization: self.organization,
            _request_id: self._request_id,
        }
    }
}
