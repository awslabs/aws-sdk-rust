// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::accept_handshake::_accept_handshake_output::AcceptHandshakeOutputBuilder;

pub use crate::operation::accept_handshake::_accept_handshake_input::AcceptHandshakeInputBuilder;

impl crate::operation::accept_handshake::builders::AcceptHandshakeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::accept_handshake::AcceptHandshakeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::accept_handshake::AcceptHandshakeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.accept_handshake();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `AcceptHandshake`.
///
/// <p>Sends a response to the originator of a handshake agreeing to the action proposed by the handshake request.</p>
/// <p>You can only call this operation by the following principals when they also have the relevant IAM permissions:</p>
/// <ul>
/// <li>
/// <p><b>Invitation to join</b> or <b>Approve all features request</b> handshakes: only a principal from the member account.</p>
/// <p>The user who calls the API for an invitation to join must have the <code>organizations:AcceptHandshake</code> permission. If you enabled all features in the organization, the user must also have the <code>iam:CreateServiceLinkedRole</code> permission so that Organizations can create the required service-linked role named <code>AWSServiceRoleForOrganizations</code>. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integration_services.html#orgs_integrate_services-using_slrs">Organizations and service-linked roles</a> in the <i>Organizations User Guide</i>.</p></li>
/// <li>
/// <p><b>Enable all features final confirmation</b> handshake: only a principal from the management account.</p>
/// <p>For more information about invitations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html">Inviting an Amazon Web Services account to join your organization</a> in the <i>Organizations User Guide</i>. For more information about requests to enable all features in the organization, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">Enabling all features in your organization</a> in the <i>Organizations User Guide</i>.</p></li>
/// </ul>
/// <p>After you accept a handshake, it continues to appear in the results of relevant APIs for only 30 days. After that, it's deleted.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AcceptHandshakeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::accept_handshake::builders::AcceptHandshakeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::accept_handshake::AcceptHandshakeOutput,
        crate::operation::accept_handshake::AcceptHandshakeError,
    > for AcceptHandshakeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::accept_handshake::AcceptHandshakeOutput,
            crate::operation::accept_handshake::AcceptHandshakeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl AcceptHandshakeFluentBuilder {
    /// Creates a new `AcceptHandshake`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the AcceptHandshake as a reference.
    pub fn as_input(&self) -> &crate::operation::accept_handshake::builders::AcceptHandshakeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::accept_handshake::AcceptHandshakeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::accept_handshake::AcceptHandshakeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::accept_handshake::AcceptHandshake::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::accept_handshake::AcceptHandshake::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::accept_handshake::AcceptHandshakeOutput,
        crate::operation::accept_handshake::AcceptHandshakeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier (ID) of the handshake that you want to accept.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.</p>
    pub fn handshake_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.handshake_id(input.into());
        self
    }
    /// <p>The unique identifier (ID) of the handshake that you want to accept.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.</p>
    pub fn set_handshake_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_handshake_id(input);
        self
    }
    /// <p>The unique identifier (ID) of the handshake that you want to accept.</p>
    /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.</p>
    pub fn get_handshake_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_handshake_id()
    }
}
