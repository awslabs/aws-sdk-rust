// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDelegatedServicesForAccountOutput {
    /// <p>The services for which the account is a delegated administrator.</p>
    pub delegated_services: ::std::option::Option<::std::vec::Vec<crate::types::DelegatedService>>,
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListDelegatedServicesForAccountOutput {
    /// <p>The services for which the account is a delegated administrator.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.delegated_services.is_none()`.
    pub fn delegated_services(&self) -> &[crate::types::DelegatedService] {
        self.delegated_services.as_deref().unwrap_or_default()
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListDelegatedServicesForAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListDelegatedServicesForAccountOutput {
    /// Creates a new builder-style object to manufacture [`ListDelegatedServicesForAccountOutput`](crate::operation::list_delegated_services_for_account::ListDelegatedServicesForAccountOutput).
    pub fn builder() -> crate::operation::list_delegated_services_for_account::builders::ListDelegatedServicesForAccountOutputBuilder {
        crate::operation::list_delegated_services_for_account::builders::ListDelegatedServicesForAccountOutputBuilder::default()
    }
}

/// A builder for [`ListDelegatedServicesForAccountOutput`](crate::operation::list_delegated_services_for_account::ListDelegatedServicesForAccountOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListDelegatedServicesForAccountOutputBuilder {
    pub(crate) delegated_services: ::std::option::Option<::std::vec::Vec<crate::types::DelegatedService>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListDelegatedServicesForAccountOutputBuilder {
    /// Appends an item to `delegated_services`.
    ///
    /// To override the contents of this collection use [`set_delegated_services`](Self::set_delegated_services).
    ///
    /// <p>The services for which the account is a delegated administrator.</p>
    pub fn delegated_services(mut self, input: crate::types::DelegatedService) -> Self {
        let mut v = self.delegated_services.unwrap_or_default();
        v.push(input);
        self.delegated_services = ::std::option::Option::Some(v);
        self
    }
    /// <p>The services for which the account is a delegated administrator.</p>
    pub fn set_delegated_services(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DelegatedService>>) -> Self {
        self.delegated_services = input;
        self
    }
    /// <p>The services for which the account is a delegated administrator.</p>
    pub fn get_delegated_services(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DelegatedService>> {
        &self.delegated_services
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListDelegatedServicesForAccountOutput`](crate::operation::list_delegated_services_for_account::ListDelegatedServicesForAccountOutput).
    pub fn build(self) -> crate::operation::list_delegated_services_for_account::ListDelegatedServicesForAccountOutput {
        crate::operation::list_delegated_services_for_account::ListDelegatedServicesForAccountOutput {
            delegated_services: self.delegated_services,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
