// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_effective_policy::_describe_effective_policy_output::DescribeEffectivePolicyOutputBuilder;

pub use crate::operation::describe_effective_policy::_describe_effective_policy_input::DescribeEffectivePolicyInputBuilder;

impl crate::operation::describe_effective_policy::builders::DescribeEffectivePolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_effective_policy::DescribeEffectivePolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_effective_policy::DescribeEffectivePolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_effective_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeEffectivePolicy`.
///
/// <p>Returns the contents of the effective policy for specified policy type and account. The effective policy is the aggregation of any policies of the specified type that the account inherits, plus any policy of that type that is directly attached to the account.</p>
/// <p>This operation applies only to policy types <i>other</i> than service control policies (SCPs).</p>
/// <p>For more information about policy inheritance, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_inheritance_mgmt.html">Understanding management policy inheritance</a> in the <i>Organizations User Guide</i>.</p>
/// <p>This operation can be called from any account in the organization.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeEffectivePolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_effective_policy::builders::DescribeEffectivePolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_effective_policy::DescribeEffectivePolicyOutput,
        crate::operation::describe_effective_policy::DescribeEffectivePolicyError,
    > for DescribeEffectivePolicyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_effective_policy::DescribeEffectivePolicyOutput,
            crate::operation::describe_effective_policy::DescribeEffectivePolicyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeEffectivePolicyFluentBuilder {
    /// Creates a new `DescribeEffectivePolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeEffectivePolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_effective_policy::builders::DescribeEffectivePolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_effective_policy::DescribeEffectivePolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_effective_policy::DescribeEffectivePolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_effective_policy::DescribeEffectivePolicy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_effective_policy::DescribeEffectivePolicy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_effective_policy::DescribeEffectivePolicyOutput,
        crate::operation::describe_effective_policy::DescribeEffectivePolicyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The type of policy that you want information about. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a></p></li>
    /// </ul>
    pub fn policy_type(mut self, input: crate::types::EffectivePolicyType) -> Self {
        self.inner = self.inner.policy_type(input);
        self
    }
    /// <p>The type of policy that you want information about. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a></p></li>
    /// </ul>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::EffectivePolicyType>) -> Self {
        self.inner = self.inner.set_policy_type(input);
        self
    }
    /// <p>The type of policy that you want information about. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a></p></li>
    /// </ul>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::EffectivePolicyType> {
        self.inner.get_policy_type()
    }
    /// <p>When you're signed in as the management account, specify the ID of the account that you want details about. Specifying an organization root or organizational unit (OU) as the target is not supported.</p>
    pub fn target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.target_id(input.into());
        self
    }
    /// <p>When you're signed in as the management account, specify the ID of the account that you want details about. Specifying an organization root or organizational unit (OU) as the target is not supported.</p>
    pub fn set_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_target_id(input);
        self
    }
    /// <p>When you're signed in as the management account, specify the ID of the account that you want details about. Specifying an organization root or organizational unit (OU) as the target is not supported.</p>
    pub fn get_target_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_target_id()
    }
}
