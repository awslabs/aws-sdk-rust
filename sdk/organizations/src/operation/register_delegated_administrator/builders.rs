// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_delegated_administrator::_register_delegated_administrator_output::RegisterDelegatedAdministratorOutputBuilder;

pub use crate::operation::register_delegated_administrator::_register_delegated_administrator_input::RegisterDelegatedAdministratorInputBuilder;

/// Fluent builder constructing a request to `RegisterDelegatedAdministrator`.
///
/// <p>Enables the specified member account to administer the Organizations features of the specified Amazon Web Services service. It grants read-only access to Organizations service data. The account still requires IAM permissions to access and administer the Amazon Web Services service.</p>
/// <p>You can run this action only for Amazon Web Services services that support this feature. For a current list of services that support it, see the column <i>Supports Delegated Administrator</i> in the table at <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services_list.html">Amazon Web Services Services that you can use with Organizations</a> in the <i>Organizations User Guide.</i> </p>
/// <p>This operation can be called only from the organization's management account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RegisterDelegatedAdministratorFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::register_delegated_administrator::builders::RegisterDelegatedAdministratorInputBuilder
            }
impl RegisterDelegatedAdministratorFluentBuilder {
    /// Creates a new `RegisterDelegatedAdministrator`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::register_delegated_administrator::RegisterDelegatedAdministrator,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::register_delegated_administrator::RegisterDelegatedAdministratorError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::register_delegated_administrator::RegisterDelegatedAdministratorOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::register_delegated_administrator::RegisterDelegatedAdministratorError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The account ID number of the member account in the organization to register as a delegated administrator.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID number of the member account in the organization to register as a delegated administrator.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The service principal of the Amazon Web Services service for which you want to make the member account a delegated administrator.</p>
    pub fn service_principal(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_principal(input.into());
        self
    }
    /// <p>The service principal of the Amazon Web Services service for which you want to make the member account a delegated administrator.</p>
    pub fn set_service_principal(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_service_principal(input);
        self
    }
}
