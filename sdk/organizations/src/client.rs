// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn accept_handshake(&self) -> fluent_builders::AcceptHandshake<C> {
        fluent_builders::AcceptHandshake::new(self.handle.clone())
    }
    pub fn attach_policy(&self) -> fluent_builders::AttachPolicy<C> {
        fluent_builders::AttachPolicy::new(self.handle.clone())
    }
    pub fn cancel_handshake(&self) -> fluent_builders::CancelHandshake<C> {
        fluent_builders::CancelHandshake::new(self.handle.clone())
    }
    pub fn create_account(&self) -> fluent_builders::CreateAccount<C> {
        fluent_builders::CreateAccount::new(self.handle.clone())
    }
    pub fn create_gov_cloud_account(&self) -> fluent_builders::CreateGovCloudAccount<C> {
        fluent_builders::CreateGovCloudAccount::new(self.handle.clone())
    }
    pub fn create_organization(&self) -> fluent_builders::CreateOrganization<C> {
        fluent_builders::CreateOrganization::new(self.handle.clone())
    }
    pub fn create_organizational_unit(&self) -> fluent_builders::CreateOrganizationalUnit<C> {
        fluent_builders::CreateOrganizationalUnit::new(self.handle.clone())
    }
    pub fn create_policy(&self) -> fluent_builders::CreatePolicy<C> {
        fluent_builders::CreatePolicy::new(self.handle.clone())
    }
    pub fn decline_handshake(&self) -> fluent_builders::DeclineHandshake<C> {
        fluent_builders::DeclineHandshake::new(self.handle.clone())
    }
    pub fn delete_organization(&self) -> fluent_builders::DeleteOrganization<C> {
        fluent_builders::DeleteOrganization::new(self.handle.clone())
    }
    pub fn delete_organizational_unit(&self) -> fluent_builders::DeleteOrganizationalUnit<C> {
        fluent_builders::DeleteOrganizationalUnit::new(self.handle.clone())
    }
    pub fn delete_policy(&self) -> fluent_builders::DeletePolicy<C> {
        fluent_builders::DeletePolicy::new(self.handle.clone())
    }
    pub fn deregister_delegated_administrator(
        &self,
    ) -> fluent_builders::DeregisterDelegatedAdministrator<C> {
        fluent_builders::DeregisterDelegatedAdministrator::new(self.handle.clone())
    }
    pub fn describe_account(&self) -> fluent_builders::DescribeAccount<C> {
        fluent_builders::DescribeAccount::new(self.handle.clone())
    }
    pub fn describe_create_account_status(
        &self,
    ) -> fluent_builders::DescribeCreateAccountStatus<C> {
        fluent_builders::DescribeCreateAccountStatus::new(self.handle.clone())
    }
    pub fn describe_effective_policy(&self) -> fluent_builders::DescribeEffectivePolicy<C> {
        fluent_builders::DescribeEffectivePolicy::new(self.handle.clone())
    }
    pub fn describe_handshake(&self) -> fluent_builders::DescribeHandshake<C> {
        fluent_builders::DescribeHandshake::new(self.handle.clone())
    }
    pub fn describe_organization(&self) -> fluent_builders::DescribeOrganization<C> {
        fluent_builders::DescribeOrganization::new(self.handle.clone())
    }
    pub fn describe_organizational_unit(&self) -> fluent_builders::DescribeOrganizationalUnit<C> {
        fluent_builders::DescribeOrganizationalUnit::new(self.handle.clone())
    }
    pub fn describe_policy(&self) -> fluent_builders::DescribePolicy<C> {
        fluent_builders::DescribePolicy::new(self.handle.clone())
    }
    pub fn detach_policy(&self) -> fluent_builders::DetachPolicy<C> {
        fluent_builders::DetachPolicy::new(self.handle.clone())
    }
    pub fn disable_aws_service_access(&self) -> fluent_builders::DisableAWSServiceAccess<C> {
        fluent_builders::DisableAWSServiceAccess::new(self.handle.clone())
    }
    pub fn disable_policy_type(&self) -> fluent_builders::DisablePolicyType<C> {
        fluent_builders::DisablePolicyType::new(self.handle.clone())
    }
    pub fn enable_all_features(&self) -> fluent_builders::EnableAllFeatures<C> {
        fluent_builders::EnableAllFeatures::new(self.handle.clone())
    }
    pub fn enable_aws_service_access(&self) -> fluent_builders::EnableAWSServiceAccess<C> {
        fluent_builders::EnableAWSServiceAccess::new(self.handle.clone())
    }
    pub fn enable_policy_type(&self) -> fluent_builders::EnablePolicyType<C> {
        fluent_builders::EnablePolicyType::new(self.handle.clone())
    }
    pub fn invite_account_to_organization(
        &self,
    ) -> fluent_builders::InviteAccountToOrganization<C> {
        fluent_builders::InviteAccountToOrganization::new(self.handle.clone())
    }
    pub fn leave_organization(&self) -> fluent_builders::LeaveOrganization<C> {
        fluent_builders::LeaveOrganization::new(self.handle.clone())
    }
    pub fn list_accounts(&self) -> fluent_builders::ListAccounts<C> {
        fluent_builders::ListAccounts::new(self.handle.clone())
    }
    pub fn list_accounts_for_parent(&self) -> fluent_builders::ListAccountsForParent<C> {
        fluent_builders::ListAccountsForParent::new(self.handle.clone())
    }
    pub fn list_aws_service_access_for_organization(
        &self,
    ) -> fluent_builders::ListAWSServiceAccessForOrganization<C> {
        fluent_builders::ListAWSServiceAccessForOrganization::new(self.handle.clone())
    }
    pub fn list_children(&self) -> fluent_builders::ListChildren<C> {
        fluent_builders::ListChildren::new(self.handle.clone())
    }
    pub fn list_create_account_status(&self) -> fluent_builders::ListCreateAccountStatus<C> {
        fluent_builders::ListCreateAccountStatus::new(self.handle.clone())
    }
    pub fn list_delegated_administrators(&self) -> fluent_builders::ListDelegatedAdministrators<C> {
        fluent_builders::ListDelegatedAdministrators::new(self.handle.clone())
    }
    pub fn list_delegated_services_for_account(
        &self,
    ) -> fluent_builders::ListDelegatedServicesForAccount<C> {
        fluent_builders::ListDelegatedServicesForAccount::new(self.handle.clone())
    }
    pub fn list_handshakes_for_account(&self) -> fluent_builders::ListHandshakesForAccount<C> {
        fluent_builders::ListHandshakesForAccount::new(self.handle.clone())
    }
    pub fn list_handshakes_for_organization(
        &self,
    ) -> fluent_builders::ListHandshakesForOrganization<C> {
        fluent_builders::ListHandshakesForOrganization::new(self.handle.clone())
    }
    pub fn list_organizational_units_for_parent(
        &self,
    ) -> fluent_builders::ListOrganizationalUnitsForParent<C> {
        fluent_builders::ListOrganizationalUnitsForParent::new(self.handle.clone())
    }
    pub fn list_parents(&self) -> fluent_builders::ListParents<C> {
        fluent_builders::ListParents::new(self.handle.clone())
    }
    pub fn list_policies(&self) -> fluent_builders::ListPolicies<C> {
        fluent_builders::ListPolicies::new(self.handle.clone())
    }
    pub fn list_policies_for_target(&self) -> fluent_builders::ListPoliciesForTarget<C> {
        fluent_builders::ListPoliciesForTarget::new(self.handle.clone())
    }
    pub fn list_roots(&self) -> fluent_builders::ListRoots<C> {
        fluent_builders::ListRoots::new(self.handle.clone())
    }
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    pub fn list_targets_for_policy(&self) -> fluent_builders::ListTargetsForPolicy<C> {
        fluent_builders::ListTargetsForPolicy::new(self.handle.clone())
    }
    pub fn move_account(&self) -> fluent_builders::MoveAccount<C> {
        fluent_builders::MoveAccount::new(self.handle.clone())
    }
    pub fn register_delegated_administrator(
        &self,
    ) -> fluent_builders::RegisterDelegatedAdministrator<C> {
        fluent_builders::RegisterDelegatedAdministrator::new(self.handle.clone())
    }
    pub fn remove_account_from_organization(
        &self,
    ) -> fluent_builders::RemoveAccountFromOrganization<C> {
        fluent_builders::RemoveAccountFromOrganization::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_organizational_unit(&self) -> fluent_builders::UpdateOrganizationalUnit<C> {
        fluent_builders::UpdateOrganizationalUnit::new(self.handle.clone())
    }
    pub fn update_policy(&self) -> fluent_builders::UpdatePolicy<C> {
        fluent_builders::UpdatePolicy::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AcceptHandshake<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::accept_handshake_input::Builder,
    }
    impl<C> AcceptHandshake<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AcceptHandshakeOutput,
            smithy_http::result::SdkError<crate::error::AcceptHandshakeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the handshake that you want to accept.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
        /// followed by from 8 to 32 lowercase letters or digits.</p>
        pub fn handshake_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.handshake_id(input);
            self
        }
        pub fn set_handshake_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_handshake_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AttachPolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::attach_policy_input::Builder,
    }
    impl<C> AttachPolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AttachPolicyOutput,
            smithy_http::result::SdkError<crate::error::AttachPolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the policy that you want to attach to the target. You
        /// can get the ID for the policy by calling the <a>ListPolicies</a>
        /// operation.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
        /// by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
        pub fn policy_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.policy_id(input);
            self
        }
        pub fn set_policy_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_policy_id(input);
            self
        }
        /// <p>The unique identifier (ID) of the root, OU, or account that you want to attach the
        /// policy to. You can get the ID by calling the <a>ListRoots</a>, <a>ListOrganizationalUnitsForParent</a>, or <a>ListAccounts</a>
        /// operations.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a target ID string requires one of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
        /// digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Account</b> - A string that consists of exactly 12 digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
        /// lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
        /// "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
        /// </li>
        /// </ul>
        pub fn target_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.target_id(input);
            self
        }
        pub fn set_target_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_target_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CancelHandshake<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::cancel_handshake_input::Builder,
    }
    impl<C> CancelHandshake<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CancelHandshakeOutput,
            smithy_http::result::SdkError<crate::error::CancelHandshakeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the handshake that you want to cancel. You can get the
        /// ID from the <a>ListHandshakesForOrganization</a> operation.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
        /// followed by from 8 to 32 lowercase letters or digits.</p>
        pub fn handshake_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.handshake_id(input);
            self
        }
        pub fn set_handshake_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_handshake_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateAccount<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_account_input::Builder,
    }
    impl<C> CreateAccount<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateAccountOutput,
            smithy_http::result::SdkError<crate::error::CreateAccountError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The email address of the owner to assign to the new member account. This email address
        /// must not already be associated with another AWS account. You must use a valid email
        /// address to complete account creation. You can't access the root user of the account or
        /// remove an account that was created with an invalid email address.</p>
        pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email(input);
            self
        }
        pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_email(input);
            self
        }
        /// <p>The friendly name of the member account.</p>
        pub fn account_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_name(input);
            self
        }
        pub fn set_account_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_name(input);
            self
        }
        /// <p>(Optional)</p>
        /// <p>The name of an IAM role that AWS Organizations automatically preconfigures in the new member
        /// account. This role trusts the management account, allowing users in the management
        /// account to assume the role, as permitted by the management account administrator. The
        /// role has administrator permissions in the new member account.</p>
        /// <p>If you don't specify this parameter, the role name defaults to
        /// <code>OrganizationAccountAccessRole</code>.</p>
        /// <p>For more information about how to use this role to access the member account, see the
        /// following links:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html#orgs_manage_accounts_create-cross-account-role">Accessing and Administering the Member Accounts in Your
        /// Organization</a> in the <i>AWS Organizations User Guide</i>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Steps 2 and 3 in <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html">Tutorial:
        /// Delegate Access Across AWS Accounts Using IAM Roles</a> in the
        /// <i>IAM User Guide</i>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that
        /// is used to validate this parameter. The pattern can include uppercase
        /// letters, lowercase letters, digits with no spaces, and any of the following characters: =,.@-</p>
        pub fn role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_name(input);
            self
        }
        pub fn set_role_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_name(input);
            self
        }
        /// <p>If set to <code>ALLOW</code>, the new account enables IAM users to access account
        /// billing information <i>if</i> they have the required permissions. If set
        /// to <code>DENY</code>, only the root user of the new account can access account billing
        /// information. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate">Activating
        /// Access to the Billing and Cost Management Console</a> in the
        /// <i>AWS Billing and Cost Management User Guide</i>.</p>
        /// <p>If you don't specify this parameter, the value defaults to <code>ALLOW</code>, and
        /// IAM users and roles with the required permissions can access billing information for
        /// the new account.</p>
        pub fn iam_user_access_to_billing(
            mut self,
            input: crate::model::IamUserAccessToBilling,
        ) -> Self {
            self.inner = self.inner.iam_user_access_to_billing(input);
            self
        }
        pub fn set_iam_user_access_to_billing(
            mut self,
            input: std::option::Option<crate::model::IamUserAccessToBilling>,
        ) -> Self {
            self.inner = self.inner.set_iam_user_access_to_billing(input);
            self
        }
        /// <p>A list of tags that you want to attach to the newly created account. For each tag in
        /// the list, you must specify both a tag key and a value. You can set the value to an empty
        /// string, but you can't set it to <code>null</code>. For more information about tagging,
        /// see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html">Tagging AWS Organizations
        /// resources</a> in the AWS Organizations User Guide.</p>
        /// <note>
        /// <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
        /// an account, then the entire request fails and the account is not created.</p>
        /// </note>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateGovCloudAccount<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_gov_cloud_account_input::Builder,
    }
    impl<C> CreateGovCloudAccount<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateGovCloudAccountOutput,
            smithy_http::result::SdkError<crate::error::CreateGovCloudAccountError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The email address of the owner to assign to the new member account in the commercial
        /// Region. This email address must not already be associated with another AWS account.
        /// You must use a valid email address to complete account creation. You can't access the
        /// root user of the account or remove an account that was created with an invalid email
        /// address. Like all request parameters for <code>CreateGovCloudAccount</code>, the request
        /// for the email address for the AWS GovCloud (US) account originates from the commercial
        /// Region, not from the AWS GovCloud (US) Region.</p>
        pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email(input);
            self
        }
        pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_email(input);
            self
        }
        /// <p>The friendly name of the member account.</p>
        pub fn account_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_name(input);
            self
        }
        pub fn set_account_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_name(input);
            self
        }
        /// <p>(Optional)</p>
        /// <p>The name of an IAM role that AWS Organizations automatically preconfigures in the new member
        /// accounts in both the AWS GovCloud (US) Region and in the commercial Region. This role
        /// trusts the management account, allowing users in the management account to assume the
        /// role, as permitted by the management account administrator. The role has administrator
        /// permissions in the new member account.</p>
        /// <p>If you don't specify this parameter, the role name defaults to
        /// <code>OrganizationAccountAccessRole</code>.</p>
        /// <p>For more information about how to use this role to access the member account, see
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html#orgs_manage_accounts_create-cross-account-role">Accessing and Administering the Member Accounts in Your Organization</a> in the
        /// <i>AWS Organizations User Guide</i> and steps 2 and 3 in <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html">Tutorial: Delegate Access Across AWS Accounts Using IAM Roles</a> in the
        /// <i>IAM User Guide.</i>
        /// </p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that
        /// is used to validate this parameter. The pattern can include uppercase
        /// letters, lowercase letters, digits with no spaces, and any of the following characters: =,.@-</p>
        pub fn role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_name(input);
            self
        }
        pub fn set_role_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_name(input);
            self
        }
        /// <p>If set to <code>ALLOW</code>, the new linked account in the commercial Region enables
        /// IAM users to access account billing information <i>if</i> they have the
        /// required permissions. If set to <code>DENY</code>, only the root user of the new account
        /// can access account billing information. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate">Activating
        /// Access to the Billing and Cost Management Console</a> in the
        /// <i>AWS Billing and Cost Management User Guide.</i>
        /// </p>
        /// <p>If you don't specify this parameter, the value defaults to <code>ALLOW</code>, and
        /// IAM users and roles with the required permissions can access billing information for
        /// the new account.</p>
        pub fn iam_user_access_to_billing(
            mut self,
            input: crate::model::IamUserAccessToBilling,
        ) -> Self {
            self.inner = self.inner.iam_user_access_to_billing(input);
            self
        }
        pub fn set_iam_user_access_to_billing(
            mut self,
            input: std::option::Option<crate::model::IamUserAccessToBilling>,
        ) -> Self {
            self.inner = self.inner.set_iam_user_access_to_billing(input);
            self
        }
        /// <p>A list of tags that you want to attach to the newly created account. These tags are
        /// attached to the commercial account associated with the GovCloud account, and not to the
        /// GovCloud account itself. To add tags to the actual GovCloud account, call the <a>TagResource</a> operation in the GovCloud region after the new GovCloud
        /// account exists.</p>
        /// <p>For each tag in the list, you must specify both a tag key and a value. You can set the
        /// value to an empty string, but you can't set it to <code>null</code>. For more
        /// information about tagging, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html">Tagging AWS Organizations resources</a> in the
        /// AWS Organizations User Guide.</p>
        /// <note>
        /// <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
        /// an account, then the entire request fails and the account is not created.</p>
        /// </note>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateOrganization<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_organization_input::Builder,
    }
    impl<C> CreateOrganization<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateOrganizationOutput,
            smithy_http::result::SdkError<crate::error::CreateOrganizationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the feature set supported by the new organization. Each feature set supports
        /// different levels of functionality.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CONSOLIDATED_BILLING</code>: All member accounts have their bills
        /// consolidated to and paid by the management account. For more information, see
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#feature-set-cb-only">Consolidated billing</a> in the
        /// <i>AWS Organizations User Guide.</i>
        /// </p>
        /// <p> The consolidated billing feature subset isn't available for organizations in
        /// the AWS GovCloud (US) Region.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALL</code>: In addition to all the features supported by the
        /// consolidated billing feature set, the management account can also apply any
        /// policy type to any member account in the organization. For more information, see
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#feature-set-all">All
        /// features</a> in the <i>AWS Organizations User Guide.</i>
        /// </p>
        /// </li>
        /// </ul>
        pub fn feature_set(mut self, input: crate::model::OrganizationFeatureSet) -> Self {
            self.inner = self.inner.feature_set(input);
            self
        }
        pub fn set_feature_set(
            mut self,
            input: std::option::Option<crate::model::OrganizationFeatureSet>,
        ) -> Self {
            self.inner = self.inner.set_feature_set(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateOrganizationalUnit<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_organizational_unit_input::Builder,
    }
    impl<C> CreateOrganizationalUnit<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateOrganizationalUnitOutput,
            smithy_http::result::SdkError<crate::error::CreateOrganizationalUnitError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the parent root or OU that you want to create the new OU
        /// in.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string requires one of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
        /// digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
        /// lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
        /// "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
        /// </li>
        /// </ul>
        pub fn parent_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.parent_id(input);
            self
        }
        pub fn set_parent_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_parent_id(input);
            self
        }
        /// <p>The friendly name to assign to the new OU.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A list of tags that you want to attach to the newly created OU. For each tag in the
        /// list, you must specify both a tag key and a value. You can set the value to an empty
        /// string, but you can't set it to <code>null</code>. For more information about tagging,
        /// see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html">Tagging AWS Organizations
        /// resources</a> in the AWS Organizations User Guide.</p>
        /// <note>
        /// <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
        /// an OU, then the entire request fails and the OU is not created.</p>
        /// </note>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreatePolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_policy_input::Builder,
    }
    impl<C> CreatePolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreatePolicyOutput,
            smithy_http::result::SdkError<crate::error::CreatePolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The policy text content to add to the new policy. The text that you supply must adhere
        /// to the rules of the policy type you specify in the <code>Type</code> parameter.</p>
        pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.content(input);
            self
        }
        pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_content(input);
            self
        }
        /// <p>An optional description to assign to the policy.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The friendly name to assign to the policy.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
        /// that is used to validate this parameter is a string of any of the characters in the ASCII
        /// character range.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The type of policy to create. You can specify one of the following values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
        /// </p>
        /// </li>
        /// </ul>
        pub fn r#type(mut self, input: crate::model::PolicyType) -> Self {
            self.inner = self.inner.r#type(input);
            self
        }
        pub fn set_type(mut self, input: std::option::Option<crate::model::PolicyType>) -> Self {
            self.inner = self.inner.set_type(input);
            self
        }
        /// <p>A list of tags that you want to attach to the newly created policy. For each tag in
        /// the list, you must specify both a tag key and a value. You can set the value to an empty
        /// string, but you can't set it to <code>null</code>. For more information about tagging,
        /// see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html">Tagging AWS Organizations
        /// resources</a> in the AWS Organizations User Guide.</p>
        /// <note>
        /// <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
        /// a policy, then the entire request fails and the policy is not created.</p>
        /// </note>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeclineHandshake<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::decline_handshake_input::Builder,
    }
    impl<C> DeclineHandshake<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeclineHandshakeOutput,
            smithy_http::result::SdkError<crate::error::DeclineHandshakeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the handshake that you want to decline. You can get the
        /// ID from the <a>ListHandshakesForAccount</a> operation.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
        /// followed by from 8 to 32 lowercase letters or digits.</p>
        pub fn handshake_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.handshake_id(input);
            self
        }
        pub fn set_handshake_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_handshake_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteOrganization<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_organization_input::Builder,
    }
    impl<C> DeleteOrganization<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteOrganizationOutput,
            smithy_http::result::SdkError<crate::error::DeleteOrganizationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteOrganizationalUnit<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_organizational_unit_input::Builder,
    }
    impl<C> DeleteOrganizationalUnit<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteOrganizationalUnitOutput,
            smithy_http::result::SdkError<crate::error::DeleteOrganizationalUnitError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the organizational unit that you want to delete. You can
        /// get the ID from the <a>ListOrganizationalUnitsForParent</a> operation.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organizational unit ID string requires
        /// "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the
        /// OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters
        /// or digits.</p>
        pub fn organizational_unit_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.organizational_unit_id(input);
            self
        }
        pub fn set_organizational_unit_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_organizational_unit_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeletePolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_policy_input::Builder,
    }
    impl<C> DeletePolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeletePolicyOutput,
            smithy_http::result::SdkError<crate::error::DeletePolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the policy that you want to delete. You can get the ID
        /// from the <a>ListPolicies</a> or <a>ListPoliciesForTarget</a>
        /// operations.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
        /// by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
        pub fn policy_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.policy_id(input);
            self
        }
        pub fn set_policy_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_policy_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeregisterDelegatedAdministrator<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::deregister_delegated_administrator_input::Builder,
    }
    impl<C> DeregisterDelegatedAdministrator<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeregisterDelegatedAdministratorOutput,
            smithy_http::result::SdkError<crate::error::DeregisterDelegatedAdministratorError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID number of the member account in the organization that you want to
        /// deregister as a delegated administrator.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(input);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The service principal name of an AWS service for which the account is a delegated
        /// administrator.</p>
        /// <p>Delegated administrator privileges are revoked for only the specified AWS service
        /// from the member account. If the specified service is the only service for which the
        /// member account is a delegated administrator, the operation also revokes Organizations read action
        /// permissions.</p>
        pub fn service_principal(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_principal(input);
            self
        }
        pub fn set_service_principal(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_principal(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeAccount<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_account_input::Builder,
    }
    impl<C> DescribeAccount<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeAccountOutput,
            smithy_http::result::SdkError<crate::error::DescribeAccountError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the AWS account that you want information about. You
        /// can get the ID from the <a>ListAccounts</a> or <a>ListAccountsForParent</a> operations.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12
        /// digits.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(input);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeCreateAccountStatus<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_create_account_status_input::Builder,
    }
    impl<C> DescribeCreateAccountStatus<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeCreateAccountStatusOutput,
            smithy_http::result::SdkError<crate::error::DescribeCreateAccountStatusError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the <code>Id</code> value that uniquely identifies the
        /// <code>CreateAccount</code> request. You can get the value from the
        /// <code>CreateAccountStatus.Id</code> response in an earlier <a>CreateAccount</a> request, or from the <a>ListCreateAccountStatus</a> operation.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a create account request ID string
        /// requires "car-" followed by from 8 to 32 lowercase letters or digits.</p>
        pub fn create_account_request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.create_account_request_id(input);
            self
        }
        pub fn set_create_account_request_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_create_account_request_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeEffectivePolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_effective_policy_input::Builder,
    }
    impl<C> DescribeEffectivePolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeEffectivePolicyOutput,
            smithy_http::result::SdkError<crate::error::DescribeEffectivePolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The type of policy that you want information about. You can specify one of the
        /// following values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
        /// </p>
        /// </li>
        /// </ul>
        pub fn policy_type(mut self, input: crate::model::EffectivePolicyType) -> Self {
            self.inner = self.inner.policy_type(input);
            self
        }
        pub fn set_policy_type(
            mut self,
            input: std::option::Option<crate::model::EffectivePolicyType>,
        ) -> Self {
            self.inner = self.inner.set_policy_type(input);
            self
        }
        /// <p>When you're signed in as the management account, specify the ID of the account that
        /// you want details about. Specifying an organization root or organizational unit (OU) as
        /// the target is not supported.</p>
        pub fn target_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.target_id(input);
            self
        }
        pub fn set_target_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_target_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeHandshake<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_handshake_input::Builder,
    }
    impl<C> DescribeHandshake<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeHandshakeOutput,
            smithy_http::result::SdkError<crate::error::DescribeHandshakeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the handshake that you want information about. You can
        /// get the ID from the original call to <a>InviteAccountToOrganization</a>, or
        /// from a call to <a>ListHandshakesForAccount</a> or <a>ListHandshakesForOrganization</a>.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for  handshake ID string requires "h-"
        /// followed by from 8 to 32 lowercase letters or digits.</p>
        pub fn handshake_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.handshake_id(input);
            self
        }
        pub fn set_handshake_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_handshake_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeOrganization<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_organization_input::Builder,
    }
    impl<C> DescribeOrganization<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeOrganizationOutput,
            smithy_http::result::SdkError<crate::error::DescribeOrganizationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeOrganizationalUnit<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_organizational_unit_input::Builder,
    }
    impl<C> DescribeOrganizationalUnit<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeOrganizationalUnitOutput,
            smithy_http::result::SdkError<crate::error::DescribeOrganizationalUnitError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the organizational unit that you want details about. You
        /// can get the ID from the <a>ListOrganizationalUnitsForParent</a>
        /// operation.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organizational unit ID string requires
        /// "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the
        /// OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters
        /// or digits.</p>
        pub fn organizational_unit_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.organizational_unit_id(input);
            self
        }
        pub fn set_organizational_unit_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_organizational_unit_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribePolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_policy_input::Builder,
    }
    impl<C> DescribePolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribePolicyOutput,
            smithy_http::result::SdkError<crate::error::DescribePolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the policy that you want details about. You can get the
        /// ID from the <a>ListPolicies</a> or <a>ListPoliciesForTarget</a>
        /// operations.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
        /// by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
        pub fn policy_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.policy_id(input);
            self
        }
        pub fn set_policy_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_policy_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DetachPolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::detach_policy_input::Builder,
    }
    impl<C> DetachPolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DetachPolicyOutput,
            smithy_http::result::SdkError<crate::error::DetachPolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the policy you want to detach. You can get the ID from
        /// the <a>ListPolicies</a> or <a>ListPoliciesForTarget</a>
        /// operations.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
        /// by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
        pub fn policy_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.policy_id(input);
            self
        }
        pub fn set_policy_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_policy_id(input);
            self
        }
        /// <p>The unique identifier (ID) of the root, OU, or account that you want to detach the
        /// policy from. You can get the ID from the <a>ListRoots</a>, <a>ListOrganizationalUnitsForParent</a>, or <a>ListAccounts</a>
        /// operations.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a target ID string requires one of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
        /// digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Account</b> - A string that consists of exactly 12 digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
        /// lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
        /// "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
        /// </li>
        /// </ul>
        pub fn target_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.target_id(input);
            self
        }
        pub fn set_target_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_target_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisableAWSServiceAccess<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::disable_aws_service_access_input::Builder,
    }
    impl<C> DisableAWSServiceAccess<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisableAwsServiceAccessOutput,
            smithy_http::result::SdkError<crate::error::DisableAWSServiceAccessError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The service principal name of the AWS service for which you want to disable
        /// integration with your organization. This is typically in the form of a URL, such as
        /// <code>
        /// <i>service-abbreviation</i>.amazonaws.com</code>.</p>
        pub fn service_principal(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_principal(input);
            self
        }
        pub fn set_service_principal(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_principal(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisablePolicyType<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::disable_policy_type_input::Builder,
    }
    impl<C> DisablePolicyType<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisablePolicyTypeOutput,
            smithy_http::result::SdkError<crate::error::DisablePolicyTypeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the root in which you want to disable a policy type. You
        /// can get the ID from the <a>ListRoots</a> operation.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a root ID string requires "r-" followed by
        /// from 4 to 32 lowercase letters or digits.</p>
        pub fn root_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.root_id(input);
            self
        }
        pub fn set_root_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_root_id(input);
            self
        }
        /// <p>The policy type that you want to disable in this root. You can specify one of the
        /// following values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
        /// </p>
        /// </li>
        /// </ul>
        pub fn policy_type(mut self, input: crate::model::PolicyType) -> Self {
            self.inner = self.inner.policy_type(input);
            self
        }
        pub fn set_policy_type(
            mut self,
            input: std::option::Option<crate::model::PolicyType>,
        ) -> Self {
            self.inner = self.inner.set_policy_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct EnableAllFeatures<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::enable_all_features_input::Builder,
    }
    impl<C> EnableAllFeatures<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::EnableAllFeaturesOutput,
            smithy_http::result::SdkError<crate::error::EnableAllFeaturesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct EnableAWSServiceAccess<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::enable_aws_service_access_input::Builder,
    }
    impl<C> EnableAWSServiceAccess<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::EnableAwsServiceAccessOutput,
            smithy_http::result::SdkError<crate::error::EnableAWSServiceAccessError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The service principal name of the AWS service for which you want to enable
        /// integration with your organization. This is typically in the form of a URL, such as
        /// <code>
        /// <i>service-abbreviation</i>.amazonaws.com</code>.</p>
        pub fn service_principal(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_principal(input);
            self
        }
        pub fn set_service_principal(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_principal(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct EnablePolicyType<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::enable_policy_type_input::Builder,
    }
    impl<C> EnablePolicyType<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::EnablePolicyTypeOutput,
            smithy_http::result::SdkError<crate::error::EnablePolicyTypeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the root in which you want to enable a policy type. You
        /// can get the ID from the <a>ListRoots</a> operation.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a root ID string requires "r-" followed by
        /// from 4 to 32 lowercase letters or digits.</p>
        pub fn root_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.root_id(input);
            self
        }
        pub fn set_root_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_root_id(input);
            self
        }
        /// <p>The policy type that you want to enable. You can specify one of the following
        /// values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
        /// </p>
        /// </li>
        /// </ul>
        pub fn policy_type(mut self, input: crate::model::PolicyType) -> Self {
            self.inner = self.inner.policy_type(input);
            self
        }
        pub fn set_policy_type(
            mut self,
            input: std::option::Option<crate::model::PolicyType>,
        ) -> Self {
            self.inner = self.inner.set_policy_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct InviteAccountToOrganization<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::invite_account_to_organization_input::Builder,
    }
    impl<C> InviteAccountToOrganization<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::InviteAccountToOrganizationOutput,
            smithy_http::result::SdkError<crate::error::InviteAccountToOrganizationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier (ID) of the AWS account that you want to invite to join your
        /// organization. This is a JSON object that contains the following elements:</p>
        /// <p>
        /// <code>{ "Type": "ACCOUNT", "Id": "<<i>
        /// <b>account id
        /// number</b>
        /// </i>>" }</code>
        /// </p>
        /// <p>If you use the AWS CLI, you can submit this as a single string, similar to the following
        /// example:</p>
        /// <p>
        /// <code>--target Id=123456789012,Type=ACCOUNT</code>
        /// </p>
        /// <p>If you specify <code>"Type": "ACCOUNT"</code>, you must provide the AWS account ID
        /// number as the <code>Id</code>. If you specify <code>"Type": "EMAIL"</code>, you must
        /// specify the email address that is associated with the account.</p>
        /// <p>
        /// <code>--target Id=diego@example.com,Type=EMAIL</code>
        /// </p>
        pub fn target(mut self, input: crate::model::HandshakeParty) -> Self {
            self.inner = self.inner.target(input);
            self
        }
        pub fn set_target(
            mut self,
            input: std::option::Option<crate::model::HandshakeParty>,
        ) -> Self {
            self.inner = self.inner.set_target(input);
            self
        }
        /// <p>Additional information that you want to include in the generated email to the
        /// recipient account owner.</p>
        pub fn notes(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notes(input);
            self
        }
        pub fn set_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_notes(input);
            self
        }
        /// <p>A list of tags that you want to attach to the account when it becomes a member of the
        /// organization. For each tag in the list, you must specify both a tag key and a value. You
        /// can set the value to an empty string, but you can't set it to <code>null</code>. For
        /// more information about tagging, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html">Tagging AWS Organizations resources</a> in the
        /// AWS Organizations User Guide.</p>
        /// <important>
        /// <p>Any tags in the request are checked for compliance with any applicable tag
        /// policies when the request is made. The request is rejected if the tags in the
        /// request don't match the requirements of the policy at that time. Tag policy
        /// compliance is <i>
        /// <b>not</b>
        /// </i> checked
        /// again when the invitation is accepted and the tags are actually attached to the
        /// account. That means that if the tag policy changes between the invitation and the
        /// acceptance, then that tags could potentially be non-compliant.</p>
        /// </important>
        /// <note>
        /// <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
        /// an account, then the entire request fails and invitations are not sent.</p>
        /// </note>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct LeaveOrganization<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::leave_organization_input::Builder,
    }
    impl<C> LeaveOrganization<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::LeaveOrganizationOutput,
            smithy_http::result::SdkError<crate::error::LeaveOrganizationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListAccounts<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_accounts_input::Builder,
    }
    impl<C> ListAccounts<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListAccountsOutput,
            smithy_http::result::SdkError<crate::error::ListAccountsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListAccountsForParent<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_accounts_for_parent_input::Builder,
    }
    impl<C> ListAccountsForParent<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListAccountsForParentOutput,
            smithy_http::result::SdkError<crate::error::ListAccountsForParentError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) for the parent root or organization unit (OU) whose
        /// accounts you want to list.</p>
        pub fn parent_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.parent_id(input);
            self
        }
        pub fn set_parent_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_parent_id(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListAWSServiceAccessForOrganization<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_aws_service_access_for_organization_input::Builder,
    }
    impl<C> ListAWSServiceAccessForOrganization<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListAwsServiceAccessForOrganizationOutput,
            smithy_http::result::SdkError<crate::error::ListAWSServiceAccessForOrganizationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListChildren<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_children_input::Builder,
    }
    impl<C> ListChildren<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListChildrenOutput,
            smithy_http::result::SdkError<crate::error::ListChildrenError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) for the parent root or OU whose children you want to
        /// list.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string requires one of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
        /// digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
        /// lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
        /// "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
        /// </li>
        /// </ul>
        pub fn parent_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.parent_id(input);
            self
        }
        pub fn set_parent_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_parent_id(input);
            self
        }
        /// <p>Filters the output to include only the specified child type.</p>
        pub fn child_type(mut self, input: crate::model::ChildType) -> Self {
            self.inner = self.inner.child_type(input);
            self
        }
        pub fn set_child_type(
            mut self,
            input: std::option::Option<crate::model::ChildType>,
        ) -> Self {
            self.inner = self.inner.set_child_type(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListCreateAccountStatus<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_create_account_status_input::Builder,
    }
    impl<C> ListCreateAccountStatus<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListCreateAccountStatusOutput,
            smithy_http::result::SdkError<crate::error::ListCreateAccountStatusError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A list of one or more states that you want included in the response. If this parameter
        /// isn't present, all requests are included in the response.</p>
        pub fn states(mut self, inp: impl Into<crate::model::CreateAccountState>) -> Self {
            self.inner = self.inner.states(inp);
            self
        }
        pub fn set_states(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CreateAccountState>>,
        ) -> Self {
            self.inner = self.inner.set_states(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListDelegatedAdministrators<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_delegated_administrators_input::Builder,
    }
    impl<C> ListDelegatedAdministrators<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDelegatedAdministratorsOutput,
            smithy_http::result::SdkError<crate::error::ListDelegatedAdministratorsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies a service principal name. If specified, then the operation lists the
        /// delegated administrators only for the specified service.</p>
        /// <p>If you don't specify a service principal, the operation lists all delegated
        /// administrators for all services in your organization.</p>
        pub fn service_principal(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_principal(input);
            self
        }
        pub fn set_service_principal(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_principal(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListDelegatedServicesForAccount<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_delegated_services_for_account_input::Builder,
    }
    impl<C> ListDelegatedServicesForAccount<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDelegatedServicesForAccountOutput,
            smithy_http::result::SdkError<crate::error::ListDelegatedServicesForAccountError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID number of a delegated administrator account in the organization.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(input);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListHandshakesForAccount<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_handshakes_for_account_input::Builder,
    }
    impl<C> ListHandshakesForAccount<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListHandshakesForAccountOutput,
            smithy_http::result::SdkError<crate::error::ListHandshakesForAccountError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Filters the handshakes that you want included in the response. The default is all
        /// types. Use the <code>ActionType</code> element to limit the output to only a specified
        /// type, such as <code>INVITE</code>, <code>ENABLE_ALL_FEATURES</code>, or
        /// <code>APPROVE_ALL_FEATURES</code>. Alternatively, for the
        /// <code>ENABLE_ALL_FEATURES</code> handshake that generates a separate child handshake
        /// for each member account, you can specify <code>ParentHandshakeId</code> to see only the
        /// handshakes that were generated by that parent request.</p>
        pub fn filter(mut self, input: crate::model::HandshakeFilter) -> Self {
            self.inner = self.inner.filter(input);
            self
        }
        pub fn set_filter(
            mut self,
            input: std::option::Option<crate::model::HandshakeFilter>,
        ) -> Self {
            self.inner = self.inner.set_filter(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListHandshakesForOrganization<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_handshakes_for_organization_input::Builder,
    }
    impl<C> ListHandshakesForOrganization<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListHandshakesForOrganizationOutput,
            smithy_http::result::SdkError<crate::error::ListHandshakesForOrganizationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A filter of the handshakes that you want included in the response. The default is all
        /// types. Use the <code>ActionType</code> element to limit the output to only a specified
        /// type, such as <code>INVITE</code>, <code>ENABLE-ALL-FEATURES</code>, or
        /// <code>APPROVE-ALL-FEATURES</code>. Alternatively, for the
        /// <code>ENABLE-ALL-FEATURES</code> handshake that generates a separate child handshake
        /// for each member account, you can specify the <code>ParentHandshakeId</code> to see only
        /// the handshakes that were generated by that parent request.</p>
        pub fn filter(mut self, input: crate::model::HandshakeFilter) -> Self {
            self.inner = self.inner.filter(input);
            self
        }
        pub fn set_filter(
            mut self,
            input: std::option::Option<crate::model::HandshakeFilter>,
        ) -> Self {
            self.inner = self.inner.set_filter(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListOrganizationalUnitsForParent<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_organizational_units_for_parent_input::Builder,
    }
    impl<C> ListOrganizationalUnitsForParent<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListOrganizationalUnitsForParentOutput,
            smithy_http::result::SdkError<crate::error::ListOrganizationalUnitsForParentError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the root or OU whose child OUs you want to list.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string requires one of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
        /// digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
        /// lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
        /// "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
        /// </li>
        /// </ul>
        pub fn parent_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.parent_id(input);
            self
        }
        pub fn set_parent_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_parent_id(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListParents<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_parents_input::Builder,
    }
    impl<C> ListParents<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListParentsOutput,
            smithy_http::result::SdkError<crate::error::ListParentsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the OU or account whose parent containers you want to
        /// list. Don't specify a root.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a child ID string requires one of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>Account</b> - A string that consists of exactly 12 digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Organizational unit (OU)</b> - A string that begins with
        /// "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that
        /// contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional
        /// lowercase letters or digits.</p>
        /// </li>
        /// </ul>
        pub fn child_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.child_id(input);
            self
        }
        pub fn set_child_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_child_id(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListPolicies<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_policies_input::Builder,
    }
    impl<C> ListPolicies<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListPoliciesOutput,
            smithy_http::result::SdkError<crate::error::ListPoliciesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the type of policy that you want to include in the response. You must
        /// specify one of the following values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
        /// </p>
        /// </li>
        /// </ul>
        pub fn filter(mut self, input: crate::model::PolicyType) -> Self {
            self.inner = self.inner.filter(input);
            self
        }
        pub fn set_filter(mut self, input: std::option::Option<crate::model::PolicyType>) -> Self {
            self.inner = self.inner.set_filter(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListPoliciesForTarget<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_policies_for_target_input::Builder,
    }
    impl<C> ListPoliciesForTarget<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListPoliciesForTargetOutput,
            smithy_http::result::SdkError<crate::error::ListPoliciesForTargetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the root, organizational unit, or account whose policies
        /// you want to list.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a target ID string requires one of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
        /// digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Account</b> - A string that consists of exactly 12 digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
        /// lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
        /// "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
        /// </li>
        /// </ul>
        pub fn target_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.target_id(input);
            self
        }
        pub fn set_target_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_target_id(input);
            self
        }
        /// <p>The type of policy that you want to include in the returned list. You must specify one
        /// of the following values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html">SERVICE_CONTROL_POLICY</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a>
        /// </p>
        /// </li>
        /// </ul>
        pub fn filter(mut self, input: crate::model::PolicyType) -> Self {
            self.inner = self.inner.filter(input);
            self
        }
        pub fn set_filter(mut self, input: std::option::Option<crate::model::PolicyType>) -> Self {
            self.inner = self.inner.set_filter(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListRoots<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_roots_input::Builder,
    }
    impl<C> ListRoots<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListRootsOutput,
            smithy_http::result::SdkError<crate::error::ListRootsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C> ListTagsForResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the resource with the tags to list.</p>
        /// <p>You can specify any of the following taggable resources.</p>
        /// <ul>
        /// <li>
        /// <p>AWS account – specify the account ID number.</p>
        /// </li>
        /// <li>
        /// <p>Organizational unit  – specify the OU ID that begins with <code>ou-</code> and
        /// looks similar to: <code>ou-<i>1a2b-34uvwxyz</i>
        /// </code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Root – specify the root ID that begins with <code>r-</code> and looks similar
        /// to: <code>r-<i>1a2b</i>
        /// </code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Policy – specify the policy ID that begins with <code>p-</code> andlooks
        /// similar to: <code>p-<i>12abcdefg3</i>
        /// </code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(input);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTargetsForPolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_targets_for_policy_input::Builder,
    }
    impl<C> ListTargetsForPolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTargetsForPolicyOutput,
            smithy_http::result::SdkError<crate::error::ListTargetsForPolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the policy whose attachments you want to know.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
        /// by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
        pub fn policy_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.policy_id(input);
            self
        }
        pub fn set_policy_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_policy_id(input);
            self
        }
        /// <p>The parameter for receiving additional results if you receive a
        /// <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
        /// indicates that more output is available. Set this parameter to the value of the previous
        /// call's <code>NextToken</code> response to indicate where the output should continue
        /// from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The total number of results that you want included on each page of the
        /// response. If you do not include this parameter, it defaults to a value that is specific to the
        /// operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
        /// response element is present and has a value (is not null). Include that value as the
        /// <code>NextToken</code> request parameter in the next call to the operation to get the next part
        /// of the results. Note that Organizations might return fewer results than the maximum even when there are
        /// more results available. You should check <code>NextToken</code> after every operation to ensure
        /// that you receive all of the results.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct MoveAccount<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::move_account_input::Builder,
    }
    impl<C> MoveAccount<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::MoveAccountOutput,
            smithy_http::result::SdkError<crate::error::MoveAccountError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the account that you want to move.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12
        /// digits.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(input);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The unique identifier (ID) of the root or organizational unit that you want to move
        /// the account from.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string requires one of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
        /// digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
        /// lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
        /// "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
        /// </li>
        /// </ul>
        pub fn source_parent_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_parent_id(input);
            self
        }
        pub fn set_source_parent_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_parent_id(input);
            self
        }
        /// <p>The unique identifier (ID) of the root or organizational unit that you want to move
        /// the account to.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a parent ID string requires one of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>Root</b> - A string that begins with "r-" followed by from 4 to 32 lowercase letters or
        /// digits.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>Organizational unit (OU)</b> - A string that begins with "ou-" followed by from 4 to 32
        /// lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second
        /// "-" dash and from 8 to 32 additional lowercase letters or digits.</p>
        /// </li>
        /// </ul>
        pub fn destination_parent_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.destination_parent_id(input);
            self
        }
        pub fn set_destination_parent_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_destination_parent_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RegisterDelegatedAdministrator<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::register_delegated_administrator_input::Builder,
    }
    impl<C> RegisterDelegatedAdministrator<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RegisterDelegatedAdministratorOutput,
            smithy_http::result::SdkError<crate::error::RegisterDelegatedAdministratorError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID number of the member account in the organization to register as a
        /// delegated administrator.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(input);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The service principal of the AWS service for which you want to make the member
        /// account a delegated administrator.</p>
        pub fn service_principal(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_principal(input);
            self
        }
        pub fn set_service_principal(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_principal(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RemoveAccountFromOrganization<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::remove_account_from_organization_input::Builder,
    }
    impl<C> RemoveAccountFromOrganization<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RemoveAccountFromOrganizationOutput,
            smithy_http::result::SdkError<crate::error::RemoveAccountFromOrganizationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the member account that you want to remove from the
        /// organization.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an account ID string requires exactly 12
        /// digits.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(input);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C> TagResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the resource to add a tag to.</p>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(input);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>A list of tags to add to the specified resource.</p>
        /// <p>You can specify any of the following taggable resources.</p>
        /// <ul>
        /// <li>
        /// <p>AWS account – specify the account ID number.</p>
        /// </li>
        /// <li>
        /// <p>Organizational unit  – specify the OU ID that begins with <code>ou-</code> and
        /// looks similar to: <code>ou-<i>1a2b-34uvwxyz</i>
        /// </code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Root – specify the root ID that begins with <code>r-</code> and looks similar
        /// to: <code>r-<i>1a2b</i>
        /// </code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Policy – specify the policy ID that begins with <code>p-</code> andlooks
        /// similar to: <code>p-<i>12abcdefg3</i>
        /// </code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>For each tag in the list, you must specify both a tag key and a value. You can set the
        /// value to an empty string, but you can't set it to <code>null</code>.</p>
        /// <note>
        /// <p>If any one of the tags is invalid or if you exceed the allowed number of tags for
        /// an account user, then the entire request fails and the account is not
        /// created.</p>
        /// </note>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C> UntagResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the resource to remove a tag from.</p>
        /// <p>You can specify any of the following taggable resources.</p>
        /// <ul>
        /// <li>
        /// <p>AWS account – specify the account ID number.</p>
        /// </li>
        /// <li>
        /// <p>Organizational unit  – specify the OU ID that begins with <code>ou-</code> and
        /// looks similar to: <code>ou-<i>1a2b-34uvwxyz</i>
        /// </code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Root – specify the root ID that begins with <code>r-</code> and looks similar
        /// to: <code>r-<i>1a2b</i>
        /// </code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Policy – specify the policy ID that begins with <code>p-</code> andlooks
        /// similar to: <code>p-<i>12abcdefg3</i>
        /// </code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(input);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The list of keys for tags to remove from the specified resource.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateOrganizationalUnit<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_organizational_unit_input::Builder,
    }
    impl<C> UpdateOrganizationalUnit<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateOrganizationalUnitOutput,
            smithy_http::result::SdkError<crate::error::UpdateOrganizationalUnitError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the OU that you want to rename. You can get the ID from
        /// the <a>ListOrganizationalUnitsForParent</a> operation.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for an organizational unit ID string requires
        /// "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the
        /// OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters
        /// or digits.</p>
        pub fn organizational_unit_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.organizational_unit_id(input);
            self
        }
        pub fn set_organizational_unit_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_organizational_unit_id(input);
            self
        }
        /// <p>The new name that you want to assign to the OU.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
        /// that is used to validate this parameter is a string of any of the characters in the ASCII
        /// character range.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdatePolicy<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_policy_input::Builder,
    }
    impl<C> UpdatePolicy<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdatePolicyOutput,
            smithy_http::result::SdkError<crate::error::UpdatePolicyError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier (ID) of the policy that you want to update.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> for a policy ID string requires "p-" followed
        /// by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).</p>
        pub fn policy_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.policy_id(input);
            self
        }
        pub fn set_policy_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_policy_id(input);
            self
        }
        /// <p>If provided, the new name for the policy.</p>
        /// <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
        /// that is used to validate this parameter is a string of any of the characters in the ASCII
        /// character range.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>If provided, the new description for the policy.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>If provided, the new content for the policy. The text must be correctly formatted JSON
        /// that complies with the syntax for the policy's type. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html">Service
        /// Control Policy Syntax</a> in the <i>AWS Organizations User Guide.</i>
        /// </p>
        pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.content(input);
            self
        }
        pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_content(input);
            self
        }
    }
}
