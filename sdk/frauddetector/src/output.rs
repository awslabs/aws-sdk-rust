// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVariableOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateVariableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateVariableOutput`](crate::output::UpdateVariableOutput).
pub mod update_variable_output {

    /// A builder for [`UpdateVariableOutput`](crate::output::UpdateVariableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVariableOutput`](crate::output::UpdateVariableOutput).
        pub fn build(self) -> crate::output::UpdateVariableOutput {
            crate::output::UpdateVariableOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateVariableOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVariableOutput`](crate::output::UpdateVariableOutput).
    pub fn builder() -> crate::output::update_variable_output::Builder {
        crate::output::update_variable_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateRuleVersionOutput {
    /// <p>The new rule version that was created.</p>
    #[doc(hidden)]
    pub rule: std::option::Option<crate::model::Rule>,
    _request_id: Option<String>,
}
impl UpdateRuleVersionOutput {
    /// <p>The new rule version that was created.</p>
    pub fn rule(&self) -> std::option::Option<&crate::model::Rule> {
        self.rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateRuleVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateRuleVersionOutput`](crate::output::UpdateRuleVersionOutput).
pub mod update_rule_version_output {

    /// A builder for [`UpdateRuleVersionOutput`](crate::output::UpdateRuleVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rule: std::option::Option<crate::model::Rule>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The new rule version that was created.</p>
        pub fn rule(mut self, input: crate::model::Rule) -> Self {
            self.rule = Some(input);
            self
        }
        /// <p>The new rule version that was created.</p>
        pub fn set_rule(mut self, input: std::option::Option<crate::model::Rule>) -> Self {
            self.rule = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateRuleVersionOutput`](crate::output::UpdateRuleVersionOutput).
        pub fn build(self) -> crate::output::UpdateRuleVersionOutput {
            crate::output::UpdateRuleVersionOutput {
                rule: self.rule,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateRuleVersionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRuleVersionOutput`](crate::output::UpdateRuleVersionOutput).
    pub fn builder() -> crate::output::update_rule_version_output::Builder {
        crate::output::update_rule_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateRuleMetadataOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateRuleMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateRuleMetadataOutput`](crate::output::UpdateRuleMetadataOutput).
pub mod update_rule_metadata_output {

    /// A builder for [`UpdateRuleMetadataOutput`](crate::output::UpdateRuleMetadataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateRuleMetadataOutput`](crate::output::UpdateRuleMetadataOutput).
        pub fn build(self) -> crate::output::UpdateRuleMetadataOutput {
            crate::output::UpdateRuleMetadataOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateRuleMetadataOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRuleMetadataOutput`](crate::output::UpdateRuleMetadataOutput).
    pub fn builder() -> crate::output::update_rule_metadata_output::Builder {
        crate::output::update_rule_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateModelVersionStatusOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateModelVersionStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateModelVersionStatusOutput`](crate::output::UpdateModelVersionStatusOutput).
pub mod update_model_version_status_output {

    /// A builder for [`UpdateModelVersionStatusOutput`](crate::output::UpdateModelVersionStatusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateModelVersionStatusOutput`](crate::output::UpdateModelVersionStatusOutput).
        pub fn build(self) -> crate::output::UpdateModelVersionStatusOutput {
            crate::output::UpdateModelVersionStatusOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateModelVersionStatusOutput {
    /// Creates a new builder-style object to manufacture [`UpdateModelVersionStatusOutput`](crate::output::UpdateModelVersionStatusOutput).
    pub fn builder() -> crate::output::update_model_version_status_output::Builder {
        crate::output::update_model_version_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateModelVersionOutput {
    /// <p>The model ID.</p>
    #[doc(hidden)]
    pub model_id: std::option::Option<std::string::String>,
    /// <p>The model type.</p>
    #[doc(hidden)]
    pub model_type: std::option::Option<crate::model::ModelTypeEnum>,
    /// <p>The model version number of the model version updated.</p>
    #[doc(hidden)]
    pub model_version_number: std::option::Option<std::string::String>,
    /// <p>The status of the updated model version.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateModelVersionOutput {
    /// <p>The model ID.</p>
    pub fn model_id(&self) -> std::option::Option<&str> {
        self.model_id.as_deref()
    }
    /// <p>The model type.</p>
    pub fn model_type(&self) -> std::option::Option<&crate::model::ModelTypeEnum> {
        self.model_type.as_ref()
    }
    /// <p>The model version number of the model version updated.</p>
    pub fn model_version_number(&self) -> std::option::Option<&str> {
        self.model_version_number.as_deref()
    }
    /// <p>The status of the updated model version.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateModelVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateModelVersionOutput`](crate::output::UpdateModelVersionOutput).
pub mod update_model_version_output {

    /// A builder for [`UpdateModelVersionOutput`](crate::output::UpdateModelVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) model_id: std::option::Option<std::string::String>,
        pub(crate) model_type: std::option::Option<crate::model::ModelTypeEnum>,
        pub(crate) model_version_number: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The model ID.</p>
        pub fn model_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_id = Some(input.into());
            self
        }
        /// <p>The model ID.</p>
        pub fn set_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.model_id = input;
            self
        }
        /// <p>The model type.</p>
        pub fn model_type(mut self, input: crate::model::ModelTypeEnum) -> Self {
            self.model_type = Some(input);
            self
        }
        /// <p>The model type.</p>
        pub fn set_model_type(
            mut self,
            input: std::option::Option<crate::model::ModelTypeEnum>,
        ) -> Self {
            self.model_type = input;
            self
        }
        /// <p>The model version number of the model version updated.</p>
        pub fn model_version_number(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_version_number = Some(input.into());
            self
        }
        /// <p>The model version number of the model version updated.</p>
        pub fn set_model_version_number(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.model_version_number = input;
            self
        }
        /// <p>The status of the updated model version.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        /// <p>The status of the updated model version.</p>
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateModelVersionOutput`](crate::output::UpdateModelVersionOutput).
        pub fn build(self) -> crate::output::UpdateModelVersionOutput {
            crate::output::UpdateModelVersionOutput {
                model_id: self.model_id,
                model_type: self.model_type,
                model_version_number: self.model_version_number,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateModelVersionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateModelVersionOutput`](crate::output::UpdateModelVersionOutput).
    pub fn builder() -> crate::output::update_model_version_output::Builder {
        crate::output::update_model_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateModelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateModelOutput`](crate::output::UpdateModelOutput).
pub mod update_model_output {

    /// A builder for [`UpdateModelOutput`](crate::output::UpdateModelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateModelOutput`](crate::output::UpdateModelOutput).
        pub fn build(self) -> crate::output::UpdateModelOutput {
            crate::output::UpdateModelOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateModelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateModelOutput`](crate::output::UpdateModelOutput).
    pub fn builder() -> crate::output::update_model_output::Builder {
        crate::output::update_model_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateEventLabelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateEventLabelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateEventLabelOutput`](crate::output::UpdateEventLabelOutput).
pub mod update_event_label_output {

    /// A builder for [`UpdateEventLabelOutput`](crate::output::UpdateEventLabelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateEventLabelOutput`](crate::output::UpdateEventLabelOutput).
        pub fn build(self) -> crate::output::UpdateEventLabelOutput {
            crate::output::UpdateEventLabelOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateEventLabelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEventLabelOutput`](crate::output::UpdateEventLabelOutput).
    pub fn builder() -> crate::output::update_event_label_output::Builder {
        crate::output::update_event_label_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDetectorVersionStatusOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateDetectorVersionStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateDetectorVersionStatusOutput`](crate::output::UpdateDetectorVersionStatusOutput).
pub mod update_detector_version_status_output {

    /// A builder for [`UpdateDetectorVersionStatusOutput`](crate::output::UpdateDetectorVersionStatusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateDetectorVersionStatusOutput`](crate::output::UpdateDetectorVersionStatusOutput).
        pub fn build(self) -> crate::output::UpdateDetectorVersionStatusOutput {
            crate::output::UpdateDetectorVersionStatusOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateDetectorVersionStatusOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDetectorVersionStatusOutput`](crate::output::UpdateDetectorVersionStatusOutput).
    pub fn builder() -> crate::output::update_detector_version_status_output::Builder {
        crate::output::update_detector_version_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDetectorVersionMetadataOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateDetectorVersionMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateDetectorVersionMetadataOutput`](crate::output::UpdateDetectorVersionMetadataOutput).
pub mod update_detector_version_metadata_output {

    /// A builder for [`UpdateDetectorVersionMetadataOutput`](crate::output::UpdateDetectorVersionMetadataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateDetectorVersionMetadataOutput`](crate::output::UpdateDetectorVersionMetadataOutput).
        pub fn build(self) -> crate::output::UpdateDetectorVersionMetadataOutput {
            crate::output::UpdateDetectorVersionMetadataOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateDetectorVersionMetadataOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDetectorVersionMetadataOutput`](crate::output::UpdateDetectorVersionMetadataOutput).
    pub fn builder() -> crate::output::update_detector_version_metadata_output::Builder {
        crate::output::update_detector_version_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDetectorVersionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateDetectorVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateDetectorVersionOutput`](crate::output::UpdateDetectorVersionOutput).
pub mod update_detector_version_output {

    /// A builder for [`UpdateDetectorVersionOutput`](crate::output::UpdateDetectorVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateDetectorVersionOutput`](crate::output::UpdateDetectorVersionOutput).
        pub fn build(self) -> crate::output::UpdateDetectorVersionOutput {
            crate::output::UpdateDetectorVersionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateDetectorVersionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDetectorVersionOutput`](crate::output::UpdateDetectorVersionOutput).
    pub fn builder() -> crate::output::update_detector_version_output::Builder {
        crate::output::update_detector_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendEventOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for SendEventOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`SendEventOutput`](crate::output::SendEventOutput).
pub mod send_event_output {

    /// A builder for [`SendEventOutput`](crate::output::SendEventOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SendEventOutput`](crate::output::SendEventOutput).
        pub fn build(self) -> crate::output::SendEventOutput {
            crate::output::SendEventOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl SendEventOutput {
    /// Creates a new builder-style object to manufacture [`SendEventOutput`](crate::output::SendEventOutput).
    pub fn builder() -> crate::output::send_event_output::Builder {
        crate::output::send_event_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutOutcomeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutOutcomeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutOutcomeOutput`](crate::output::PutOutcomeOutput).
pub mod put_outcome_output {

    /// A builder for [`PutOutcomeOutput`](crate::output::PutOutcomeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutOutcomeOutput`](crate::output::PutOutcomeOutput).
        pub fn build(self) -> crate::output::PutOutcomeOutput {
            crate::output::PutOutcomeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutOutcomeOutput {
    /// Creates a new builder-style object to manufacture [`PutOutcomeOutput`](crate::output::PutOutcomeOutput).
    pub fn builder() -> crate::output::put_outcome_output::Builder {
        crate::output::put_outcome_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutLabelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutLabelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutLabelOutput`](crate::output::PutLabelOutput).
pub mod put_label_output {

    /// A builder for [`PutLabelOutput`](crate::output::PutLabelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutLabelOutput`](crate::output::PutLabelOutput).
        pub fn build(self) -> crate::output::PutLabelOutput {
            crate::output::PutLabelOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutLabelOutput {
    /// Creates a new builder-style object to manufacture [`PutLabelOutput`](crate::output::PutLabelOutput).
    pub fn builder() -> crate::output::put_label_output::Builder {
        crate::output::put_label_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutKmsEncryptionKeyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutKmsEncryptionKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutKmsEncryptionKeyOutput`](crate::output::PutKmsEncryptionKeyOutput).
pub mod put_kms_encryption_key_output {

    /// A builder for [`PutKmsEncryptionKeyOutput`](crate::output::PutKmsEncryptionKeyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutKmsEncryptionKeyOutput`](crate::output::PutKmsEncryptionKeyOutput).
        pub fn build(self) -> crate::output::PutKmsEncryptionKeyOutput {
            crate::output::PutKmsEncryptionKeyOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutKmsEncryptionKeyOutput {
    /// Creates a new builder-style object to manufacture [`PutKmsEncryptionKeyOutput`](crate::output::PutKmsEncryptionKeyOutput).
    pub fn builder() -> crate::output::put_kms_encryption_key_output::Builder {
        crate::output::put_kms_encryption_key_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutExternalModelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutExternalModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutExternalModelOutput`](crate::output::PutExternalModelOutput).
pub mod put_external_model_output {

    /// A builder for [`PutExternalModelOutput`](crate::output::PutExternalModelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutExternalModelOutput`](crate::output::PutExternalModelOutput).
        pub fn build(self) -> crate::output::PutExternalModelOutput {
            crate::output::PutExternalModelOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutExternalModelOutput {
    /// Creates a new builder-style object to manufacture [`PutExternalModelOutput`](crate::output::PutExternalModelOutput).
    pub fn builder() -> crate::output::put_external_model_output::Builder {
        crate::output::put_external_model_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutEventTypeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutEventTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutEventTypeOutput`](crate::output::PutEventTypeOutput).
pub mod put_event_type_output {

    /// A builder for [`PutEventTypeOutput`](crate::output::PutEventTypeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutEventTypeOutput`](crate::output::PutEventTypeOutput).
        pub fn build(self) -> crate::output::PutEventTypeOutput {
            crate::output::PutEventTypeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutEventTypeOutput {
    /// Creates a new builder-style object to manufacture [`PutEventTypeOutput`](crate::output::PutEventTypeOutput).
    pub fn builder() -> crate::output::put_event_type_output::Builder {
        crate::output::put_event_type_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutEntityTypeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutEntityTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutEntityTypeOutput`](crate::output::PutEntityTypeOutput).
pub mod put_entity_type_output {

    /// A builder for [`PutEntityTypeOutput`](crate::output::PutEntityTypeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutEntityTypeOutput`](crate::output::PutEntityTypeOutput).
        pub fn build(self) -> crate::output::PutEntityTypeOutput {
            crate::output::PutEntityTypeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutEntityTypeOutput {
    /// Creates a new builder-style object to manufacture [`PutEntityTypeOutput`](crate::output::PutEntityTypeOutput).
    pub fn builder() -> crate::output::put_entity_type_output::Builder {
        crate::output::put_entity_type_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutDetectorOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutDetectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutDetectorOutput`](crate::output::PutDetectorOutput).
pub mod put_detector_output {

    /// A builder for [`PutDetectorOutput`](crate::output::PutDetectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutDetectorOutput`](crate::output::PutDetectorOutput).
        pub fn build(self) -> crate::output::PutDetectorOutput {
            crate::output::PutDetectorOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutDetectorOutput {
    /// Creates a new builder-style object to manufacture [`PutDetectorOutput`](crate::output::PutDetectorOutput).
    pub fn builder() -> crate::output::put_detector_output::Builder {
        crate::output::put_detector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>A collection of key and value pairs.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>The next token for subsequent requests. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>A collection of key and value pairs.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The next token for subsequent requests. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A collection of key and value pairs.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>A collection of key and value pairs.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The next token for subsequent requests. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next token for subsequent requests. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListEventPredictionsOutput {
    /// <p> The summary of the past predictions. </p>
    #[doc(hidden)]
    pub event_prediction_summaries:
        std::option::Option<std::vec::Vec<crate::model::EventPredictionSummary>>,
    /// <p> Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListEventPredictionsOutput {
    /// <p> The summary of the past predictions. </p>
    pub fn event_prediction_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::EventPredictionSummary]> {
        self.event_prediction_summaries.as_deref()
    }
    /// <p> Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListEventPredictionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListEventPredictionsOutput`](crate::output::ListEventPredictionsOutput).
pub mod list_event_predictions_output {

    /// A builder for [`ListEventPredictionsOutput`](crate::output::ListEventPredictionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_prediction_summaries:
            std::option::Option<std::vec::Vec<crate::model::EventPredictionSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `event_prediction_summaries`.
        ///
        /// To override the contents of this collection use [`set_event_prediction_summaries`](Self::set_event_prediction_summaries).
        ///
        /// <p> The summary of the past predictions. </p>
        pub fn event_prediction_summaries(
            mut self,
            input: crate::model::EventPredictionSummary,
        ) -> Self {
            let mut v = self.event_prediction_summaries.unwrap_or_default();
            v.push(input);
            self.event_prediction_summaries = Some(v);
            self
        }
        /// <p> The summary of the past predictions. </p>
        pub fn set_event_prediction_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EventPredictionSummary>>,
        ) -> Self {
            self.event_prediction_summaries = input;
            self
        }
        /// <p> Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListEventPredictionsOutput`](crate::output::ListEventPredictionsOutput).
        pub fn build(self) -> crate::output::ListEventPredictionsOutput {
            crate::output::ListEventPredictionsOutput {
                event_prediction_summaries: self.event_prediction_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListEventPredictionsOutput {
    /// Creates a new builder-style object to manufacture [`ListEventPredictionsOutput`](crate::output::ListEventPredictionsOutput).
    pub fn builder() -> crate::output::list_event_predictions_output::Builder {
        crate::output::list_event_predictions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVariablesOutput {
    /// <p>The names of the variables returned. </p>
    #[doc(hidden)]
    pub variables: std::option::Option<std::vec::Vec<crate::model::Variable>>,
    /// <p>The next page token to be used in subsequent requests. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetVariablesOutput {
    /// <p>The names of the variables returned. </p>
    pub fn variables(&self) -> std::option::Option<&[crate::model::Variable]> {
        self.variables.as_deref()
    }
    /// <p>The next page token to be used in subsequent requests. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetVariablesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetVariablesOutput`](crate::output::GetVariablesOutput).
pub mod get_variables_output {

    /// A builder for [`GetVariablesOutput`](crate::output::GetVariablesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) variables: std::option::Option<std::vec::Vec<crate::model::Variable>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `variables`.
        ///
        /// To override the contents of this collection use [`set_variables`](Self::set_variables).
        ///
        /// <p>The names of the variables returned. </p>
        pub fn variables(mut self, input: crate::model::Variable) -> Self {
            let mut v = self.variables.unwrap_or_default();
            v.push(input);
            self.variables = Some(v);
            self
        }
        /// <p>The names of the variables returned. </p>
        pub fn set_variables(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Variable>>,
        ) -> Self {
            self.variables = input;
            self
        }
        /// <p>The next page token to be used in subsequent requests. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next page token to be used in subsequent requests. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVariablesOutput`](crate::output::GetVariablesOutput).
        pub fn build(self) -> crate::output::GetVariablesOutput {
            crate::output::GetVariablesOutput {
                variables: self.variables,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetVariablesOutput {
    /// Creates a new builder-style object to manufacture [`GetVariablesOutput`](crate::output::GetVariablesOutput).
    pub fn builder() -> crate::output::get_variables_output::Builder {
        crate::output::get_variables_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRulesOutput {
    /// <p>The details of the requested rule.</p>
    #[doc(hidden)]
    pub rule_details: std::option::Option<std::vec::Vec<crate::model::RuleDetail>>,
    /// <p>The next page token to be used in subsequent requests.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetRulesOutput {
    /// <p>The details of the requested rule.</p>
    pub fn rule_details(&self) -> std::option::Option<&[crate::model::RuleDetail]> {
        self.rule_details.as_deref()
    }
    /// <p>The next page token to be used in subsequent requests.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetRulesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetRulesOutput`](crate::output::GetRulesOutput).
pub mod get_rules_output {

    /// A builder for [`GetRulesOutput`](crate::output::GetRulesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rule_details: std::option::Option<std::vec::Vec<crate::model::RuleDetail>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `rule_details`.
        ///
        /// To override the contents of this collection use [`set_rule_details`](Self::set_rule_details).
        ///
        /// <p>The details of the requested rule.</p>
        pub fn rule_details(mut self, input: crate::model::RuleDetail) -> Self {
            let mut v = self.rule_details.unwrap_or_default();
            v.push(input);
            self.rule_details = Some(v);
            self
        }
        /// <p>The details of the requested rule.</p>
        pub fn set_rule_details(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RuleDetail>>,
        ) -> Self {
            self.rule_details = input;
            self
        }
        /// <p>The next page token to be used in subsequent requests.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next page token to be used in subsequent requests.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetRulesOutput`](crate::output::GetRulesOutput).
        pub fn build(self) -> crate::output::GetRulesOutput {
            crate::output::GetRulesOutput {
                rule_details: self.rule_details,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetRulesOutput {
    /// Creates a new builder-style object to manufacture [`GetRulesOutput`](crate::output::GetRulesOutput).
    pub fn builder() -> crate::output::get_rules_output::Builder {
        crate::output::get_rules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetOutcomesOutput {
    /// <p>The outcomes. </p>
    #[doc(hidden)]
    pub outcomes: std::option::Option<std::vec::Vec<crate::model::Outcome>>,
    /// <p>The next page token for subsequent requests.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetOutcomesOutput {
    /// <p>The outcomes. </p>
    pub fn outcomes(&self) -> std::option::Option<&[crate::model::Outcome]> {
        self.outcomes.as_deref()
    }
    /// <p>The next page token for subsequent requests.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetOutcomesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetOutcomesOutput`](crate::output::GetOutcomesOutput).
pub mod get_outcomes_output {

    /// A builder for [`GetOutcomesOutput`](crate::output::GetOutcomesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) outcomes: std::option::Option<std::vec::Vec<crate::model::Outcome>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `outcomes`.
        ///
        /// To override the contents of this collection use [`set_outcomes`](Self::set_outcomes).
        ///
        /// <p>The outcomes. </p>
        pub fn outcomes(mut self, input: crate::model::Outcome) -> Self {
            let mut v = self.outcomes.unwrap_or_default();
            v.push(input);
            self.outcomes = Some(v);
            self
        }
        /// <p>The outcomes. </p>
        pub fn set_outcomes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Outcome>>,
        ) -> Self {
            self.outcomes = input;
            self
        }
        /// <p>The next page token for subsequent requests.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next page token for subsequent requests.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetOutcomesOutput`](crate::output::GetOutcomesOutput).
        pub fn build(self) -> crate::output::GetOutcomesOutput {
            crate::output::GetOutcomesOutput {
                outcomes: self.outcomes,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetOutcomesOutput {
    /// Creates a new builder-style object to manufacture [`GetOutcomesOutput`](crate::output::GetOutcomesOutput).
    pub fn builder() -> crate::output::get_outcomes_output::Builder {
        crate::output::get_outcomes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetModelVersionOutput {
    /// <p>The model ID.</p>
    #[doc(hidden)]
    pub model_id: std::option::Option<std::string::String>,
    /// <p>The model type.</p>
    #[doc(hidden)]
    pub model_type: std::option::Option<crate::model::ModelTypeEnum>,
    /// <p>The model version number.</p>
    #[doc(hidden)]
    pub model_version_number: std::option::Option<std::string::String>,
    /// <p>The training data source.</p>
    #[doc(hidden)]
    pub training_data_source: std::option::Option<crate::model::TrainingDataSourceEnum>,
    /// <p>The training data schema.</p>
    #[doc(hidden)]
    pub training_data_schema: std::option::Option<crate::model::TrainingDataSchema>,
    /// <p>The details of the external events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code> </p>
    #[doc(hidden)]
    pub external_events_detail: std::option::Option<crate::model::ExternalEventsDetail>,
    /// <p>The details of the ingested events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    #[doc(hidden)]
    pub ingested_events_detail: std::option::Option<crate::model::IngestedEventsDetail>,
    /// <p>The model version status.</p>
    /// <p>Possible values are:</p>
    /// <ul>
    /// <li> <p> <code>TRAINING_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>TRAINING_COMPLETE</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>INACTIVE</code> </p> </li>
    /// <li> <p> <code>ERROR</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The model version ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetModelVersionOutput {
    /// <p>The model ID.</p>
    pub fn model_id(&self) -> std::option::Option<&str> {
        self.model_id.as_deref()
    }
    /// <p>The model type.</p>
    pub fn model_type(&self) -> std::option::Option<&crate::model::ModelTypeEnum> {
        self.model_type.as_ref()
    }
    /// <p>The model version number.</p>
    pub fn model_version_number(&self) -> std::option::Option<&str> {
        self.model_version_number.as_deref()
    }
    /// <p>The training data source.</p>
    pub fn training_data_source(
        &self,
    ) -> std::option::Option<&crate::model::TrainingDataSourceEnum> {
        self.training_data_source.as_ref()
    }
    /// <p>The training data schema.</p>
    pub fn training_data_schema(&self) -> std::option::Option<&crate::model::TrainingDataSchema> {
        self.training_data_schema.as_ref()
    }
    /// <p>The details of the external events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code> </p>
    pub fn external_events_detail(
        &self,
    ) -> std::option::Option<&crate::model::ExternalEventsDetail> {
        self.external_events_detail.as_ref()
    }
    /// <p>The details of the ingested events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    pub fn ingested_events_detail(
        &self,
    ) -> std::option::Option<&crate::model::IngestedEventsDetail> {
        self.ingested_events_detail.as_ref()
    }
    /// <p>The model version status.</p>
    /// <p>Possible values are:</p>
    /// <ul>
    /// <li> <p> <code>TRAINING_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>TRAINING_COMPLETE</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>INACTIVE</code> </p> </li>
    /// <li> <p> <code>ERROR</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The model version ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetModelVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetModelVersionOutput`](crate::output::GetModelVersionOutput).
pub mod get_model_version_output {

    /// A builder for [`GetModelVersionOutput`](crate::output::GetModelVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) model_id: std::option::Option<std::string::String>,
        pub(crate) model_type: std::option::Option<crate::model::ModelTypeEnum>,
        pub(crate) model_version_number: std::option::Option<std::string::String>,
        pub(crate) training_data_source: std::option::Option<crate::model::TrainingDataSourceEnum>,
        pub(crate) training_data_schema: std::option::Option<crate::model::TrainingDataSchema>,
        pub(crate) external_events_detail: std::option::Option<crate::model::ExternalEventsDetail>,
        pub(crate) ingested_events_detail: std::option::Option<crate::model::IngestedEventsDetail>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The model ID.</p>
        pub fn model_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_id = Some(input.into());
            self
        }
        /// <p>The model ID.</p>
        pub fn set_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.model_id = input;
            self
        }
        /// <p>The model type.</p>
        pub fn model_type(mut self, input: crate::model::ModelTypeEnum) -> Self {
            self.model_type = Some(input);
            self
        }
        /// <p>The model type.</p>
        pub fn set_model_type(
            mut self,
            input: std::option::Option<crate::model::ModelTypeEnum>,
        ) -> Self {
            self.model_type = input;
            self
        }
        /// <p>The model version number.</p>
        pub fn model_version_number(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_version_number = Some(input.into());
            self
        }
        /// <p>The model version number.</p>
        pub fn set_model_version_number(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.model_version_number = input;
            self
        }
        /// <p>The training data source.</p>
        pub fn training_data_source(mut self, input: crate::model::TrainingDataSourceEnum) -> Self {
            self.training_data_source = Some(input);
            self
        }
        /// <p>The training data source.</p>
        pub fn set_training_data_source(
            mut self,
            input: std::option::Option<crate::model::TrainingDataSourceEnum>,
        ) -> Self {
            self.training_data_source = input;
            self
        }
        /// <p>The training data schema.</p>
        pub fn training_data_schema(mut self, input: crate::model::TrainingDataSchema) -> Self {
            self.training_data_schema = Some(input);
            self
        }
        /// <p>The training data schema.</p>
        pub fn set_training_data_schema(
            mut self,
            input: std::option::Option<crate::model::TrainingDataSchema>,
        ) -> Self {
            self.training_data_schema = input;
            self
        }
        /// <p>The details of the external events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code> </p>
        pub fn external_events_detail(mut self, input: crate::model::ExternalEventsDetail) -> Self {
            self.external_events_detail = Some(input);
            self
        }
        /// <p>The details of the external events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code> </p>
        pub fn set_external_events_detail(
            mut self,
            input: std::option::Option<crate::model::ExternalEventsDetail>,
        ) -> Self {
            self.external_events_detail = input;
            self
        }
        /// <p>The details of the ingested events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
        pub fn ingested_events_detail(mut self, input: crate::model::IngestedEventsDetail) -> Self {
            self.ingested_events_detail = Some(input);
            self
        }
        /// <p>The details of the ingested events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
        pub fn set_ingested_events_detail(
            mut self,
            input: std::option::Option<crate::model::IngestedEventsDetail>,
        ) -> Self {
            self.ingested_events_detail = input;
            self
        }
        /// <p>The model version status.</p>
        /// <p>Possible values are:</p>
        /// <ul>
        /// <li> <p> <code>TRAINING_IN_PROGRESS</code> </p> </li>
        /// <li> <p> <code>TRAINING_COMPLETE</code> </p> </li>
        /// <li> <p> <code>ACTIVATE_REQUESTED</code> </p> </li>
        /// <li> <p> <code>ACTIVATE_IN_PROGRESS</code> </p> </li>
        /// <li> <p> <code>ACTIVE</code> </p> </li>
        /// <li> <p> <code>INACTIVATE_REQUESTED</code> </p> </li>
        /// <li> <p> <code>INACTIVATE_IN_PROGRESS</code> </p> </li>
        /// <li> <p> <code>INACTIVE</code> </p> </li>
        /// <li> <p> <code>ERROR</code> </p> </li>
        /// </ul>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        /// <p>The model version status.</p>
        /// <p>Possible values are:</p>
        /// <ul>
        /// <li> <p> <code>TRAINING_IN_PROGRESS</code> </p> </li>
        /// <li> <p> <code>TRAINING_COMPLETE</code> </p> </li>
        /// <li> <p> <code>ACTIVATE_REQUESTED</code> </p> </li>
        /// <li> <p> <code>ACTIVATE_IN_PROGRESS</code> </p> </li>
        /// <li> <p> <code>ACTIVE</code> </p> </li>
        /// <li> <p> <code>INACTIVATE_REQUESTED</code> </p> </li>
        /// <li> <p> <code>INACTIVATE_IN_PROGRESS</code> </p> </li>
        /// <li> <p> <code>INACTIVE</code> </p> </li>
        /// <li> <p> <code>ERROR</code> </p> </li>
        /// </ul>
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>The model version ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The model version ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetModelVersionOutput`](crate::output::GetModelVersionOutput).
        pub fn build(self) -> crate::output::GetModelVersionOutput {
            crate::output::GetModelVersionOutput {
                model_id: self.model_id,
                model_type: self.model_type,
                model_version_number: self.model_version_number,
                training_data_source: self.training_data_source,
                training_data_schema: self.training_data_schema,
                external_events_detail: self.external_events_detail,
                ingested_events_detail: self.ingested_events_detail,
                status: self.status,
                arn: self.arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetModelVersionOutput {
    /// Creates a new builder-style object to manufacture [`GetModelVersionOutput`](crate::output::GetModelVersionOutput).
    pub fn builder() -> crate::output::get_model_version_output::Builder {
        crate::output::get_model_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetModelsOutput {
    /// <p>The next page token to be used in subsequent requests.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The array of models.</p>
    #[doc(hidden)]
    pub models: std::option::Option<std::vec::Vec<crate::model::Model>>,
    _request_id: Option<String>,
}
impl GetModelsOutput {
    /// <p>The next page token to be used in subsequent requests.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The array of models.</p>
    pub fn models(&self) -> std::option::Option<&[crate::model::Model]> {
        self.models.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetModelsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetModelsOutput`](crate::output::GetModelsOutput).
pub mod get_models_output {

    /// A builder for [`GetModelsOutput`](crate::output::GetModelsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) models: std::option::Option<std::vec::Vec<crate::model::Model>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The next page token to be used in subsequent requests.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next page token to be used in subsequent requests.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `models`.
        ///
        /// To override the contents of this collection use [`set_models`](Self::set_models).
        ///
        /// <p>The array of models.</p>
        pub fn models(mut self, input: crate::model::Model) -> Self {
            let mut v = self.models.unwrap_or_default();
            v.push(input);
            self.models = Some(v);
            self
        }
        /// <p>The array of models.</p>
        pub fn set_models(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Model>>,
        ) -> Self {
            self.models = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetModelsOutput`](crate::output::GetModelsOutput).
        pub fn build(self) -> crate::output::GetModelsOutput {
            crate::output::GetModelsOutput {
                next_token: self.next_token,
                models: self.models,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetModelsOutput {
    /// Creates a new builder-style object to manufacture [`GetModelsOutput`](crate::output::GetModelsOutput).
    pub fn builder() -> crate::output::get_models_output::Builder {
        crate::output::get_models_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLabelsOutput {
    /// <p>An array of labels.</p>
    #[doc(hidden)]
    pub labels: std::option::Option<std::vec::Vec<crate::model::Label>>,
    /// <p>The next page token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetLabelsOutput {
    /// <p>An array of labels.</p>
    pub fn labels(&self) -> std::option::Option<&[crate::model::Label]> {
        self.labels.as_deref()
    }
    /// <p>The next page token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetLabelsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetLabelsOutput`](crate::output::GetLabelsOutput).
pub mod get_labels_output {

    /// A builder for [`GetLabelsOutput`](crate::output::GetLabelsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) labels: std::option::Option<std::vec::Vec<crate::model::Label>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `labels`.
        ///
        /// To override the contents of this collection use [`set_labels`](Self::set_labels).
        ///
        /// <p>An array of labels.</p>
        pub fn labels(mut self, input: crate::model::Label) -> Self {
            let mut v = self.labels.unwrap_or_default();
            v.push(input);
            self.labels = Some(v);
            self
        }
        /// <p>An array of labels.</p>
        pub fn set_labels(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Label>>,
        ) -> Self {
            self.labels = input;
            self
        }
        /// <p>The next page token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next page token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetLabelsOutput`](crate::output::GetLabelsOutput).
        pub fn build(self) -> crate::output::GetLabelsOutput {
            crate::output::GetLabelsOutput {
                labels: self.labels,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetLabelsOutput {
    /// Creates a new builder-style object to manufacture [`GetLabelsOutput`](crate::output::GetLabelsOutput).
    pub fn builder() -> crate::output::get_labels_output::Builder {
        crate::output::get_labels_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetKmsEncryptionKeyOutput {
    /// <p>The KMS encryption key.</p>
    #[doc(hidden)]
    pub kms_key: std::option::Option<crate::model::KmsKey>,
    _request_id: Option<String>,
}
impl GetKmsEncryptionKeyOutput {
    /// <p>The KMS encryption key.</p>
    pub fn kms_key(&self) -> std::option::Option<&crate::model::KmsKey> {
        self.kms_key.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetKmsEncryptionKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetKmsEncryptionKeyOutput`](crate::output::GetKmsEncryptionKeyOutput).
pub mod get_kms_encryption_key_output {

    /// A builder for [`GetKmsEncryptionKeyOutput`](crate::output::GetKmsEncryptionKeyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) kms_key: std::option::Option<crate::model::KmsKey>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The KMS encryption key.</p>
        pub fn kms_key(mut self, input: crate::model::KmsKey) -> Self {
            self.kms_key = Some(input);
            self
        }
        /// <p>The KMS encryption key.</p>
        pub fn set_kms_key(mut self, input: std::option::Option<crate::model::KmsKey>) -> Self {
            self.kms_key = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetKmsEncryptionKeyOutput`](crate::output::GetKmsEncryptionKeyOutput).
        pub fn build(self) -> crate::output::GetKmsEncryptionKeyOutput {
            crate::output::GetKmsEncryptionKeyOutput {
                kms_key: self.kms_key,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetKmsEncryptionKeyOutput {
    /// Creates a new builder-style object to manufacture [`GetKmsEncryptionKeyOutput`](crate::output::GetKmsEncryptionKeyOutput).
    pub fn builder() -> crate::output::get_kms_encryption_key_output::Builder {
        crate::output::get_kms_encryption_key_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetExternalModelsOutput {
    /// <p>Gets the Amazon SageMaker models.</p>
    #[doc(hidden)]
    pub external_models: std::option::Option<std::vec::Vec<crate::model::ExternalModel>>,
    /// <p>The next page token to be used in subsequent requests.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetExternalModelsOutput {
    /// <p>Gets the Amazon SageMaker models.</p>
    pub fn external_models(&self) -> std::option::Option<&[crate::model::ExternalModel]> {
        self.external_models.as_deref()
    }
    /// <p>The next page token to be used in subsequent requests.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetExternalModelsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetExternalModelsOutput`](crate::output::GetExternalModelsOutput).
pub mod get_external_models_output {

    /// A builder for [`GetExternalModelsOutput`](crate::output::GetExternalModelsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) external_models: std::option::Option<std::vec::Vec<crate::model::ExternalModel>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `external_models`.
        ///
        /// To override the contents of this collection use [`set_external_models`](Self::set_external_models).
        ///
        /// <p>Gets the Amazon SageMaker models.</p>
        pub fn external_models(mut self, input: crate::model::ExternalModel) -> Self {
            let mut v = self.external_models.unwrap_or_default();
            v.push(input);
            self.external_models = Some(v);
            self
        }
        /// <p>Gets the Amazon SageMaker models.</p>
        pub fn set_external_models(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExternalModel>>,
        ) -> Self {
            self.external_models = input;
            self
        }
        /// <p>The next page token to be used in subsequent requests.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next page token to be used in subsequent requests.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetExternalModelsOutput`](crate::output::GetExternalModelsOutput).
        pub fn build(self) -> crate::output::GetExternalModelsOutput {
            crate::output::GetExternalModelsOutput {
                external_models: self.external_models,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetExternalModelsOutput {
    /// Creates a new builder-style object to manufacture [`GetExternalModelsOutput`](crate::output::GetExternalModelsOutput).
    pub fn builder() -> crate::output::get_external_models_output::Builder {
        crate::output::get_external_models_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEventTypesOutput {
    /// <p>An array of event types.</p>
    #[doc(hidden)]
    pub event_types: std::option::Option<std::vec::Vec<crate::model::EventType>>,
    /// <p>The next page token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEventTypesOutput {
    /// <p>An array of event types.</p>
    pub fn event_types(&self) -> std::option::Option<&[crate::model::EventType]> {
        self.event_types.as_deref()
    }
    /// <p>The next page token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEventTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetEventTypesOutput`](crate::output::GetEventTypesOutput).
pub mod get_event_types_output {

    /// A builder for [`GetEventTypesOutput`](crate::output::GetEventTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_types: std::option::Option<std::vec::Vec<crate::model::EventType>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `event_types`.
        ///
        /// To override the contents of this collection use [`set_event_types`](Self::set_event_types).
        ///
        /// <p>An array of event types.</p>
        pub fn event_types(mut self, input: crate::model::EventType) -> Self {
            let mut v = self.event_types.unwrap_or_default();
            v.push(input);
            self.event_types = Some(v);
            self
        }
        /// <p>An array of event types.</p>
        pub fn set_event_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EventType>>,
        ) -> Self {
            self.event_types = input;
            self
        }
        /// <p>The next page token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next page token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEventTypesOutput`](crate::output::GetEventTypesOutput).
        pub fn build(self) -> crate::output::GetEventTypesOutput {
            crate::output::GetEventTypesOutput {
                event_types: self.event_types,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetEventTypesOutput {
    /// Creates a new builder-style object to manufacture [`GetEventTypesOutput`](crate::output::GetEventTypesOutput).
    pub fn builder() -> crate::output::get_event_types_output::Builder {
        crate::output::get_event_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEventPredictionMetadataOutput {
    /// <p> The event ID. </p>
    #[doc(hidden)]
    pub event_id: std::option::Option<std::string::String>,
    /// <p> The event type associated with the detector specified for this prediction. </p>
    #[doc(hidden)]
    pub event_type_name: std::option::Option<std::string::String>,
    /// <p> The entity ID. </p>
    #[doc(hidden)]
    pub entity_id: std::option::Option<std::string::String>,
    /// <p> The entity type. </p>
    #[doc(hidden)]
    pub entity_type: std::option::Option<std::string::String>,
    /// <p> The timestamp for when the prediction was generated for the associated event ID. </p>
    #[doc(hidden)]
    pub event_timestamp: std::option::Option<std::string::String>,
    /// <p> The detector ID. </p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p> The detector version ID. </p>
    #[doc(hidden)]
    pub detector_version_id: std::option::Option<std::string::String>,
    /// <p> The status of the detector version. </p>
    #[doc(hidden)]
    pub detector_version_status: std::option::Option<std::string::String>,
    /// <p> A list of event variables that influenced the prediction scores. </p>
    #[doc(hidden)]
    pub event_variables: std::option::Option<std::vec::Vec<crate::model::EventVariableSummary>>,
    /// <p> List of rules associated with the detector version that were used for evaluating variable values. </p>
    #[doc(hidden)]
    pub rules: std::option::Option<std::vec::Vec<crate::model::EvaluatedRule>>,
    /// <p> The execution mode of the rule used for evaluating variable values. </p>
    #[doc(hidden)]
    pub rule_execution_mode: std::option::Option<crate::model::RuleExecutionMode>,
    /// <p> The outcomes of the matched rule, based on the rule execution mode. </p>
    #[doc(hidden)]
    pub outcomes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> Model versions that were evaluated for generating predictions. </p>
    #[doc(hidden)]
    pub evaluated_model_versions:
        std::option::Option<std::vec::Vec<crate::model::EvaluatedModelVersion>>,
    /// <p> External (Amazon SageMaker) models that were evaluated for generating predictions. </p>
    #[doc(hidden)]
    pub evaluated_external_models:
        std::option::Option<std::vec::Vec<crate::model::EvaluatedExternalModel>>,
    /// <p>The timestamp that defines when the prediction was generated. </p>
    #[doc(hidden)]
    pub prediction_timestamp: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEventPredictionMetadataOutput {
    /// <p> The event ID. </p>
    pub fn event_id(&self) -> std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p> The event type associated with the detector specified for this prediction. </p>
    pub fn event_type_name(&self) -> std::option::Option<&str> {
        self.event_type_name.as_deref()
    }
    /// <p> The entity ID. </p>
    pub fn entity_id(&self) -> std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p> The entity type. </p>
    pub fn entity_type(&self) -> std::option::Option<&str> {
        self.entity_type.as_deref()
    }
    /// <p> The timestamp for when the prediction was generated for the associated event ID. </p>
    pub fn event_timestamp(&self) -> std::option::Option<&str> {
        self.event_timestamp.as_deref()
    }
    /// <p> The detector ID. </p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p> The detector version ID. </p>
    pub fn detector_version_id(&self) -> std::option::Option<&str> {
        self.detector_version_id.as_deref()
    }
    /// <p> The status of the detector version. </p>
    pub fn detector_version_status(&self) -> std::option::Option<&str> {
        self.detector_version_status.as_deref()
    }
    /// <p> A list of event variables that influenced the prediction scores. </p>
    pub fn event_variables(&self) -> std::option::Option<&[crate::model::EventVariableSummary]> {
        self.event_variables.as_deref()
    }
    /// <p> List of rules associated with the detector version that were used for evaluating variable values. </p>
    pub fn rules(&self) -> std::option::Option<&[crate::model::EvaluatedRule]> {
        self.rules.as_deref()
    }
    /// <p> The execution mode of the rule used for evaluating variable values. </p>
    pub fn rule_execution_mode(&self) -> std::option::Option<&crate::model::RuleExecutionMode> {
        self.rule_execution_mode.as_ref()
    }
    /// <p> The outcomes of the matched rule, based on the rule execution mode. </p>
    pub fn outcomes(&self) -> std::option::Option<&[std::string::String]> {
        self.outcomes.as_deref()
    }
    /// <p> Model versions that were evaluated for generating predictions. </p>
    pub fn evaluated_model_versions(
        &self,
    ) -> std::option::Option<&[crate::model::EvaluatedModelVersion]> {
        self.evaluated_model_versions.as_deref()
    }
    /// <p> External (Amazon SageMaker) models that were evaluated for generating predictions. </p>
    pub fn evaluated_external_models(
        &self,
    ) -> std::option::Option<&[crate::model::EvaluatedExternalModel]> {
        self.evaluated_external_models.as_deref()
    }
    /// <p>The timestamp that defines when the prediction was generated. </p>
    pub fn prediction_timestamp(&self) -> std::option::Option<&str> {
        self.prediction_timestamp.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEventPredictionMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetEventPredictionMetadataOutput`](crate::output::GetEventPredictionMetadataOutput).
pub mod get_event_prediction_metadata_output {

    /// A builder for [`GetEventPredictionMetadataOutput`](crate::output::GetEventPredictionMetadataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_id: std::option::Option<std::string::String>,
        pub(crate) event_type_name: std::option::Option<std::string::String>,
        pub(crate) entity_id: std::option::Option<std::string::String>,
        pub(crate) entity_type: std::option::Option<std::string::String>,
        pub(crate) event_timestamp: std::option::Option<std::string::String>,
        pub(crate) detector_id: std::option::Option<std::string::String>,
        pub(crate) detector_version_id: std::option::Option<std::string::String>,
        pub(crate) detector_version_status: std::option::Option<std::string::String>,
        pub(crate) event_variables:
            std::option::Option<std::vec::Vec<crate::model::EventVariableSummary>>,
        pub(crate) rules: std::option::Option<std::vec::Vec<crate::model::EvaluatedRule>>,
        pub(crate) rule_execution_mode: std::option::Option<crate::model::RuleExecutionMode>,
        pub(crate) outcomes: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) evaluated_model_versions:
            std::option::Option<std::vec::Vec<crate::model::EvaluatedModelVersion>>,
        pub(crate) evaluated_external_models:
            std::option::Option<std::vec::Vec<crate::model::EvaluatedExternalModel>>,
        pub(crate) prediction_timestamp: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The event ID. </p>
        pub fn event_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.event_id = Some(input.into());
            self
        }
        /// <p> The event ID. </p>
        pub fn set_event_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.event_id = input;
            self
        }
        /// <p> The event type associated with the detector specified for this prediction. </p>
        pub fn event_type_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.event_type_name = Some(input.into());
            self
        }
        /// <p> The event type associated with the detector specified for this prediction. </p>
        pub fn set_event_type_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.event_type_name = input;
            self
        }
        /// <p> The entity ID. </p>
        pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.entity_id = Some(input.into());
            self
        }
        /// <p> The entity ID. </p>
        pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.entity_id = input;
            self
        }
        /// <p> The entity type. </p>
        pub fn entity_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.entity_type = Some(input.into());
            self
        }
        /// <p> The entity type. </p>
        pub fn set_entity_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.entity_type = input;
            self
        }
        /// <p> The timestamp for when the prediction was generated for the associated event ID. </p>
        pub fn event_timestamp(mut self, input: impl Into<std::string::String>) -> Self {
            self.event_timestamp = Some(input.into());
            self
        }
        /// <p> The timestamp for when the prediction was generated for the associated event ID. </p>
        pub fn set_event_timestamp(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.event_timestamp = input;
            self
        }
        /// <p> The detector ID. </p>
        pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.detector_id = Some(input.into());
            self
        }
        /// <p> The detector ID. </p>
        pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.detector_id = input;
            self
        }
        /// <p> The detector version ID. </p>
        pub fn detector_version_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.detector_version_id = Some(input.into());
            self
        }
        /// <p> The detector version ID. </p>
        pub fn set_detector_version_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.detector_version_id = input;
            self
        }
        /// <p> The status of the detector version. </p>
        pub fn detector_version_status(mut self, input: impl Into<std::string::String>) -> Self {
            self.detector_version_status = Some(input.into());
            self
        }
        /// <p> The status of the detector version. </p>
        pub fn set_detector_version_status(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.detector_version_status = input;
            self
        }
        /// Appends an item to `event_variables`.
        ///
        /// To override the contents of this collection use [`set_event_variables`](Self::set_event_variables).
        ///
        /// <p> A list of event variables that influenced the prediction scores. </p>
        pub fn event_variables(mut self, input: crate::model::EventVariableSummary) -> Self {
            let mut v = self.event_variables.unwrap_or_default();
            v.push(input);
            self.event_variables = Some(v);
            self
        }
        /// <p> A list of event variables that influenced the prediction scores. </p>
        pub fn set_event_variables(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EventVariableSummary>>,
        ) -> Self {
            self.event_variables = input;
            self
        }
        /// Appends an item to `rules`.
        ///
        /// To override the contents of this collection use [`set_rules`](Self::set_rules).
        ///
        /// <p> List of rules associated with the detector version that were used for evaluating variable values. </p>
        pub fn rules(mut self, input: crate::model::EvaluatedRule) -> Self {
            let mut v = self.rules.unwrap_or_default();
            v.push(input);
            self.rules = Some(v);
            self
        }
        /// <p> List of rules associated with the detector version that were used for evaluating variable values. </p>
        pub fn set_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EvaluatedRule>>,
        ) -> Self {
            self.rules = input;
            self
        }
        /// <p> The execution mode of the rule used for evaluating variable values. </p>
        pub fn rule_execution_mode(mut self, input: crate::model::RuleExecutionMode) -> Self {
            self.rule_execution_mode = Some(input);
            self
        }
        /// <p> The execution mode of the rule used for evaluating variable values. </p>
        pub fn set_rule_execution_mode(
            mut self,
            input: std::option::Option<crate::model::RuleExecutionMode>,
        ) -> Self {
            self.rule_execution_mode = input;
            self
        }
        /// Appends an item to `outcomes`.
        ///
        /// To override the contents of this collection use [`set_outcomes`](Self::set_outcomes).
        ///
        /// <p> The outcomes of the matched rule, based on the rule execution mode. </p>
        pub fn outcomes(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.outcomes.unwrap_or_default();
            v.push(input.into());
            self.outcomes = Some(v);
            self
        }
        /// <p> The outcomes of the matched rule, based on the rule execution mode. </p>
        pub fn set_outcomes(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.outcomes = input;
            self
        }
        /// Appends an item to `evaluated_model_versions`.
        ///
        /// To override the contents of this collection use [`set_evaluated_model_versions`](Self::set_evaluated_model_versions).
        ///
        /// <p> Model versions that were evaluated for generating predictions. </p>
        pub fn evaluated_model_versions(
            mut self,
            input: crate::model::EvaluatedModelVersion,
        ) -> Self {
            let mut v = self.evaluated_model_versions.unwrap_or_default();
            v.push(input);
            self.evaluated_model_versions = Some(v);
            self
        }
        /// <p> Model versions that were evaluated for generating predictions. </p>
        pub fn set_evaluated_model_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EvaluatedModelVersion>>,
        ) -> Self {
            self.evaluated_model_versions = input;
            self
        }
        /// Appends an item to `evaluated_external_models`.
        ///
        /// To override the contents of this collection use [`set_evaluated_external_models`](Self::set_evaluated_external_models).
        ///
        /// <p> External (Amazon SageMaker) models that were evaluated for generating predictions. </p>
        pub fn evaluated_external_models(
            mut self,
            input: crate::model::EvaluatedExternalModel,
        ) -> Self {
            let mut v = self.evaluated_external_models.unwrap_or_default();
            v.push(input);
            self.evaluated_external_models = Some(v);
            self
        }
        /// <p> External (Amazon SageMaker) models that were evaluated for generating predictions. </p>
        pub fn set_evaluated_external_models(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EvaluatedExternalModel>>,
        ) -> Self {
            self.evaluated_external_models = input;
            self
        }
        /// <p>The timestamp that defines when the prediction was generated. </p>
        pub fn prediction_timestamp(mut self, input: impl Into<std::string::String>) -> Self {
            self.prediction_timestamp = Some(input.into());
            self
        }
        /// <p>The timestamp that defines when the prediction was generated. </p>
        pub fn set_prediction_timestamp(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.prediction_timestamp = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEventPredictionMetadataOutput`](crate::output::GetEventPredictionMetadataOutput).
        pub fn build(self) -> crate::output::GetEventPredictionMetadataOutput {
            crate::output::GetEventPredictionMetadataOutput {
                event_id: self.event_id,
                event_type_name: self.event_type_name,
                entity_id: self.entity_id,
                entity_type: self.entity_type,
                event_timestamp: self.event_timestamp,
                detector_id: self.detector_id,
                detector_version_id: self.detector_version_id,
                detector_version_status: self.detector_version_status,
                event_variables: self.event_variables,
                rules: self.rules,
                rule_execution_mode: self.rule_execution_mode,
                outcomes: self.outcomes,
                evaluated_model_versions: self.evaluated_model_versions,
                evaluated_external_models: self.evaluated_external_models,
                prediction_timestamp: self.prediction_timestamp,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetEventPredictionMetadataOutput {
    /// Creates a new builder-style object to manufacture [`GetEventPredictionMetadataOutput`](crate::output::GetEventPredictionMetadataOutput).
    pub fn builder() -> crate::output::get_event_prediction_metadata_output::Builder {
        crate::output::get_event_prediction_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEventPredictionOutput {
    /// <p>The model scores. Amazon Fraud Detector generates model scores between 0 and 1000, where 0 is low fraud risk and 1000 is high fraud risk. Model scores are directly related to the false positive rate (FPR). For example, a score of 600 corresponds to an estimated 10% false positive rate whereas a score of 900 corresponds to an estimated 2% false positive rate.</p>
    #[doc(hidden)]
    pub model_scores: std::option::Option<std::vec::Vec<crate::model::ModelScores>>,
    /// <p>The results from the rules.</p>
    #[doc(hidden)]
    pub rule_results: std::option::Option<std::vec::Vec<crate::model::RuleResult>>,
    /// <p>The model scores for Amazon SageMaker models.</p>
    #[doc(hidden)]
    pub external_model_outputs:
        std::option::Option<std::vec::Vec<crate::model::ExternalModelOutputs>>,
    _request_id: Option<String>,
}
impl GetEventPredictionOutput {
    /// <p>The model scores. Amazon Fraud Detector generates model scores between 0 and 1000, where 0 is low fraud risk and 1000 is high fraud risk. Model scores are directly related to the false positive rate (FPR). For example, a score of 600 corresponds to an estimated 10% false positive rate whereas a score of 900 corresponds to an estimated 2% false positive rate.</p>
    pub fn model_scores(&self) -> std::option::Option<&[crate::model::ModelScores]> {
        self.model_scores.as_deref()
    }
    /// <p>The results from the rules.</p>
    pub fn rule_results(&self) -> std::option::Option<&[crate::model::RuleResult]> {
        self.rule_results.as_deref()
    }
    /// <p>The model scores for Amazon SageMaker models.</p>
    pub fn external_model_outputs(
        &self,
    ) -> std::option::Option<&[crate::model::ExternalModelOutputs]> {
        self.external_model_outputs.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEventPredictionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetEventPredictionOutput`](crate::output::GetEventPredictionOutput).
pub mod get_event_prediction_output {

    /// A builder for [`GetEventPredictionOutput`](crate::output::GetEventPredictionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) model_scores: std::option::Option<std::vec::Vec<crate::model::ModelScores>>,
        pub(crate) rule_results: std::option::Option<std::vec::Vec<crate::model::RuleResult>>,
        pub(crate) external_model_outputs:
            std::option::Option<std::vec::Vec<crate::model::ExternalModelOutputs>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `model_scores`.
        ///
        /// To override the contents of this collection use [`set_model_scores`](Self::set_model_scores).
        ///
        /// <p>The model scores. Amazon Fraud Detector generates model scores between 0 and 1000, where 0 is low fraud risk and 1000 is high fraud risk. Model scores are directly related to the false positive rate (FPR). For example, a score of 600 corresponds to an estimated 10% false positive rate whereas a score of 900 corresponds to an estimated 2% false positive rate.</p>
        pub fn model_scores(mut self, input: crate::model::ModelScores) -> Self {
            let mut v = self.model_scores.unwrap_or_default();
            v.push(input);
            self.model_scores = Some(v);
            self
        }
        /// <p>The model scores. Amazon Fraud Detector generates model scores between 0 and 1000, where 0 is low fraud risk and 1000 is high fraud risk. Model scores are directly related to the false positive rate (FPR). For example, a score of 600 corresponds to an estimated 10% false positive rate whereas a score of 900 corresponds to an estimated 2% false positive rate.</p>
        pub fn set_model_scores(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ModelScores>>,
        ) -> Self {
            self.model_scores = input;
            self
        }
        /// Appends an item to `rule_results`.
        ///
        /// To override the contents of this collection use [`set_rule_results`](Self::set_rule_results).
        ///
        /// <p>The results from the rules.</p>
        pub fn rule_results(mut self, input: crate::model::RuleResult) -> Self {
            let mut v = self.rule_results.unwrap_or_default();
            v.push(input);
            self.rule_results = Some(v);
            self
        }
        /// <p>The results from the rules.</p>
        pub fn set_rule_results(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RuleResult>>,
        ) -> Self {
            self.rule_results = input;
            self
        }
        /// Appends an item to `external_model_outputs`.
        ///
        /// To override the contents of this collection use [`set_external_model_outputs`](Self::set_external_model_outputs).
        ///
        /// <p>The model scores for Amazon SageMaker models.</p>
        pub fn external_model_outputs(mut self, input: crate::model::ExternalModelOutputs) -> Self {
            let mut v = self.external_model_outputs.unwrap_or_default();
            v.push(input);
            self.external_model_outputs = Some(v);
            self
        }
        /// <p>The model scores for Amazon SageMaker models.</p>
        pub fn set_external_model_outputs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExternalModelOutputs>>,
        ) -> Self {
            self.external_model_outputs = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEventPredictionOutput`](crate::output::GetEventPredictionOutput).
        pub fn build(self) -> crate::output::GetEventPredictionOutput {
            crate::output::GetEventPredictionOutput {
                model_scores: self.model_scores,
                rule_results: self.rule_results,
                external_model_outputs: self.external_model_outputs,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetEventPredictionOutput {
    /// Creates a new builder-style object to manufacture [`GetEventPredictionOutput`](crate::output::GetEventPredictionOutput).
    pub fn builder() -> crate::output::get_event_prediction_output::Builder {
        crate::output::get_event_prediction_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEventOutput {
    /// <p>The details of the event.</p>
    #[doc(hidden)]
    pub event: std::option::Option<crate::model::Event>,
    _request_id: Option<String>,
}
impl GetEventOutput {
    /// <p>The details of the event.</p>
    pub fn event(&self) -> std::option::Option<&crate::model::Event> {
        self.event.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetEventOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetEventOutput`](crate::output::GetEventOutput).
pub mod get_event_output {

    /// A builder for [`GetEventOutput`](crate::output::GetEventOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event: std::option::Option<crate::model::Event>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The details of the event.</p>
        pub fn event(mut self, input: crate::model::Event) -> Self {
            self.event = Some(input);
            self
        }
        /// <p>The details of the event.</p>
        pub fn set_event(mut self, input: std::option::Option<crate::model::Event>) -> Self {
            self.event = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEventOutput`](crate::output::GetEventOutput).
        pub fn build(self) -> crate::output::GetEventOutput {
            crate::output::GetEventOutput {
                event: self.event,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetEventOutput {
    /// Creates a new builder-style object to manufacture [`GetEventOutput`](crate::output::GetEventOutput).
    pub fn builder() -> crate::output::get_event_output::Builder {
        crate::output::get_event_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEntityTypesOutput {
    /// <p>An array of entity types.</p>
    #[doc(hidden)]
    pub entity_types: std::option::Option<std::vec::Vec<crate::model::EntityType>>,
    /// <p>The next page token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEntityTypesOutput {
    /// <p>An array of entity types.</p>
    pub fn entity_types(&self) -> std::option::Option<&[crate::model::EntityType]> {
        self.entity_types.as_deref()
    }
    /// <p>The next page token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEntityTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetEntityTypesOutput`](crate::output::GetEntityTypesOutput).
pub mod get_entity_types_output {

    /// A builder for [`GetEntityTypesOutput`](crate::output::GetEntityTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entity_types: std::option::Option<std::vec::Vec<crate::model::EntityType>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `entity_types`.
        ///
        /// To override the contents of this collection use [`set_entity_types`](Self::set_entity_types).
        ///
        /// <p>An array of entity types.</p>
        pub fn entity_types(mut self, input: crate::model::EntityType) -> Self {
            let mut v = self.entity_types.unwrap_or_default();
            v.push(input);
            self.entity_types = Some(v);
            self
        }
        /// <p>An array of entity types.</p>
        pub fn set_entity_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EntityType>>,
        ) -> Self {
            self.entity_types = input;
            self
        }
        /// <p>The next page token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next page token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEntityTypesOutput`](crate::output::GetEntityTypesOutput).
        pub fn build(self) -> crate::output::GetEntityTypesOutput {
            crate::output::GetEntityTypesOutput {
                entity_types: self.entity_types,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetEntityTypesOutput {
    /// Creates a new builder-style object to manufacture [`GetEntityTypesOutput`](crate::output::GetEntityTypesOutput).
    pub fn builder() -> crate::output::get_entity_types_output::Builder {
        crate::output::get_entity_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDetectorVersionOutput {
    /// <p>The detector ID.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The detector version ID.</p>
    #[doc(hidden)]
    pub detector_version_id: std::option::Option<std::string::String>,
    /// <p>The detector version description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon SageMaker model endpoints included in the detector version.</p>
    #[doc(hidden)]
    pub external_model_endpoints: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The model versions included in the detector version. </p>
    #[doc(hidden)]
    pub model_versions: std::option::Option<std::vec::Vec<crate::model::ModelVersion>>,
    /// <p>The rules included in the detector version.</p>
    #[doc(hidden)]
    pub rules: std::option::Option<std::vec::Vec<crate::model::Rule>>,
    /// <p>The status of the detector version.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::DetectorVersionStatus>,
    /// <p>The timestamp when the detector version was last updated. </p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<std::string::String>,
    /// <p>The timestamp when the detector version was created. </p>
    #[doc(hidden)]
    pub created_time: std::option::Option<std::string::String>,
    /// <p>The execution mode of the rule in the dectector</p>
    /// <p> <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
    /// <p> <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    #[doc(hidden)]
    pub rule_execution_mode: std::option::Option<crate::model::RuleExecutionMode>,
    /// <p>The detector version ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDetectorVersionOutput {
    /// <p>The detector ID.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The detector version ID.</p>
    pub fn detector_version_id(&self) -> std::option::Option<&str> {
        self.detector_version_id.as_deref()
    }
    /// <p>The detector version description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon SageMaker model endpoints included in the detector version.</p>
    pub fn external_model_endpoints(&self) -> std::option::Option<&[std::string::String]> {
        self.external_model_endpoints.as_deref()
    }
    /// <p>The model versions included in the detector version. </p>
    pub fn model_versions(&self) -> std::option::Option<&[crate::model::ModelVersion]> {
        self.model_versions.as_deref()
    }
    /// <p>The rules included in the detector version.</p>
    pub fn rules(&self) -> std::option::Option<&[crate::model::Rule]> {
        self.rules.as_deref()
    }
    /// <p>The status of the detector version.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::DetectorVersionStatus> {
        self.status.as_ref()
    }
    /// <p>The timestamp when the detector version was last updated. </p>
    pub fn last_updated_time(&self) -> std::option::Option<&str> {
        self.last_updated_time.as_deref()
    }
    /// <p>The timestamp when the detector version was created. </p>
    pub fn created_time(&self) -> std::option::Option<&str> {
        self.created_time.as_deref()
    }
    /// <p>The execution mode of the rule in the dectector</p>
    /// <p> <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
    /// <p> <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    pub fn rule_execution_mode(&self) -> std::option::Option<&crate::model::RuleExecutionMode> {
        self.rule_execution_mode.as_ref()
    }
    /// <p>The detector version ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDetectorVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetDetectorVersionOutput`](crate::output::GetDetectorVersionOutput).
pub mod get_detector_version_output {

    /// A builder for [`GetDetectorVersionOutput`](crate::output::GetDetectorVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) detector_id: std::option::Option<std::string::String>,
        pub(crate) detector_version_id: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) external_model_endpoints:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) model_versions: std::option::Option<std::vec::Vec<crate::model::ModelVersion>>,
        pub(crate) rules: std::option::Option<std::vec::Vec<crate::model::Rule>>,
        pub(crate) status: std::option::Option<crate::model::DetectorVersionStatus>,
        pub(crate) last_updated_time: std::option::Option<std::string::String>,
        pub(crate) created_time: std::option::Option<std::string::String>,
        pub(crate) rule_execution_mode: std::option::Option<crate::model::RuleExecutionMode>,
        pub(crate) arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The detector ID.</p>
        pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.detector_id = Some(input.into());
            self
        }
        /// <p>The detector ID.</p>
        pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.detector_id = input;
            self
        }
        /// <p>The detector version ID.</p>
        pub fn detector_version_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.detector_version_id = Some(input.into());
            self
        }
        /// <p>The detector version ID.</p>
        pub fn set_detector_version_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.detector_version_id = input;
            self
        }
        /// <p>The detector version description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The detector version description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// Appends an item to `external_model_endpoints`.
        ///
        /// To override the contents of this collection use [`set_external_model_endpoints`](Self::set_external_model_endpoints).
        ///
        /// <p>The Amazon SageMaker model endpoints included in the detector version.</p>
        pub fn external_model_endpoints(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.external_model_endpoints.unwrap_or_default();
            v.push(input.into());
            self.external_model_endpoints = Some(v);
            self
        }
        /// <p>The Amazon SageMaker model endpoints included in the detector version.</p>
        pub fn set_external_model_endpoints(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.external_model_endpoints = input;
            self
        }
        /// Appends an item to `model_versions`.
        ///
        /// To override the contents of this collection use [`set_model_versions`](Self::set_model_versions).
        ///
        /// <p>The model versions included in the detector version. </p>
        pub fn model_versions(mut self, input: crate::model::ModelVersion) -> Self {
            let mut v = self.model_versions.unwrap_or_default();
            v.push(input);
            self.model_versions = Some(v);
            self
        }
        /// <p>The model versions included in the detector version. </p>
        pub fn set_model_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ModelVersion>>,
        ) -> Self {
            self.model_versions = input;
            self
        }
        /// Appends an item to `rules`.
        ///
        /// To override the contents of this collection use [`set_rules`](Self::set_rules).
        ///
        /// <p>The rules included in the detector version.</p>
        pub fn rules(mut self, input: crate::model::Rule) -> Self {
            let mut v = self.rules.unwrap_or_default();
            v.push(input);
            self.rules = Some(v);
            self
        }
        /// <p>The rules included in the detector version.</p>
        pub fn set_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Rule>>,
        ) -> Self {
            self.rules = input;
            self
        }
        /// <p>The status of the detector version.</p>
        pub fn status(mut self, input: crate::model::DetectorVersionStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the detector version.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::DetectorVersionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The timestamp when the detector version was last updated. </p>
        pub fn last_updated_time(mut self, input: impl Into<std::string::String>) -> Self {
            self.last_updated_time = Some(input.into());
            self
        }
        /// <p>The timestamp when the detector version was last updated. </p>
        pub fn set_last_updated_time(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.last_updated_time = input;
            self
        }
        /// <p>The timestamp when the detector version was created. </p>
        pub fn created_time(mut self, input: impl Into<std::string::String>) -> Self {
            self.created_time = Some(input.into());
            self
        }
        /// <p>The timestamp when the detector version was created. </p>
        pub fn set_created_time(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.created_time = input;
            self
        }
        /// <p>The execution mode of the rule in the dectector</p>
        /// <p> <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
        /// <p> <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
        pub fn rule_execution_mode(mut self, input: crate::model::RuleExecutionMode) -> Self {
            self.rule_execution_mode = Some(input);
            self
        }
        /// <p>The execution mode of the rule in the dectector</p>
        /// <p> <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
        /// <p> <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
        pub fn set_rule_execution_mode(
            mut self,
            input: std::option::Option<crate::model::RuleExecutionMode>,
        ) -> Self {
            self.rule_execution_mode = input;
            self
        }
        /// <p>The detector version ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The detector version ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetDetectorVersionOutput`](crate::output::GetDetectorVersionOutput).
        pub fn build(self) -> crate::output::GetDetectorVersionOutput {
            crate::output::GetDetectorVersionOutput {
                detector_id: self.detector_id,
                detector_version_id: self.detector_version_id,
                description: self.description,
                external_model_endpoints: self.external_model_endpoints,
                model_versions: self.model_versions,
                rules: self.rules,
                status: self.status,
                last_updated_time: self.last_updated_time,
                created_time: self.created_time,
                rule_execution_mode: self.rule_execution_mode,
                arn: self.arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetDetectorVersionOutput {
    /// Creates a new builder-style object to manufacture [`GetDetectorVersionOutput`](crate::output::GetDetectorVersionOutput).
    pub fn builder() -> crate::output::get_detector_version_output::Builder {
        crate::output::get_detector_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDetectorsOutput {
    /// <p>The detectors.</p>
    #[doc(hidden)]
    pub detectors: std::option::Option<std::vec::Vec<crate::model::Detector>>,
    /// <p>The next page token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDetectorsOutput {
    /// <p>The detectors.</p>
    pub fn detectors(&self) -> std::option::Option<&[crate::model::Detector]> {
        self.detectors.as_deref()
    }
    /// <p>The next page token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDetectorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetDetectorsOutput`](crate::output::GetDetectorsOutput).
pub mod get_detectors_output {

    /// A builder for [`GetDetectorsOutput`](crate::output::GetDetectorsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) detectors: std::option::Option<std::vec::Vec<crate::model::Detector>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `detectors`.
        ///
        /// To override the contents of this collection use [`set_detectors`](Self::set_detectors).
        ///
        /// <p>The detectors.</p>
        pub fn detectors(mut self, input: crate::model::Detector) -> Self {
            let mut v = self.detectors.unwrap_or_default();
            v.push(input);
            self.detectors = Some(v);
            self
        }
        /// <p>The detectors.</p>
        pub fn set_detectors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Detector>>,
        ) -> Self {
            self.detectors = input;
            self
        }
        /// <p>The next page token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next page token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetDetectorsOutput`](crate::output::GetDetectorsOutput).
        pub fn build(self) -> crate::output::GetDetectorsOutput {
            crate::output::GetDetectorsOutput {
                detectors: self.detectors,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetDetectorsOutput {
    /// Creates a new builder-style object to manufacture [`GetDetectorsOutput`](crate::output::GetDetectorsOutput).
    pub fn builder() -> crate::output::get_detectors_output::Builder {
        crate::output::get_detectors_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeleteEventsByEventTypeStatusOutput {
    /// <p>The event type name.</p>
    #[doc(hidden)]
    pub event_type_name: std::option::Option<std::string::String>,
    /// <p>The deletion status.</p>
    #[doc(hidden)]
    pub events_deletion_status: std::option::Option<crate::model::AsyncJobStatus>,
    _request_id: Option<String>,
}
impl GetDeleteEventsByEventTypeStatusOutput {
    /// <p>The event type name.</p>
    pub fn event_type_name(&self) -> std::option::Option<&str> {
        self.event_type_name.as_deref()
    }
    /// <p>The deletion status.</p>
    pub fn events_deletion_status(&self) -> std::option::Option<&crate::model::AsyncJobStatus> {
        self.events_deletion_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetDeleteEventsByEventTypeStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetDeleteEventsByEventTypeStatusOutput`](crate::output::GetDeleteEventsByEventTypeStatusOutput).
pub mod get_delete_events_by_event_type_status_output {

    /// A builder for [`GetDeleteEventsByEventTypeStatusOutput`](crate::output::GetDeleteEventsByEventTypeStatusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_type_name: std::option::Option<std::string::String>,
        pub(crate) events_deletion_status: std::option::Option<crate::model::AsyncJobStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The event type name.</p>
        pub fn event_type_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.event_type_name = Some(input.into());
            self
        }
        /// <p>The event type name.</p>
        pub fn set_event_type_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.event_type_name = input;
            self
        }
        /// <p>The deletion status.</p>
        pub fn events_deletion_status(mut self, input: crate::model::AsyncJobStatus) -> Self {
            self.events_deletion_status = Some(input);
            self
        }
        /// <p>The deletion status.</p>
        pub fn set_events_deletion_status(
            mut self,
            input: std::option::Option<crate::model::AsyncJobStatus>,
        ) -> Self {
            self.events_deletion_status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetDeleteEventsByEventTypeStatusOutput`](crate::output::GetDeleteEventsByEventTypeStatusOutput).
        pub fn build(self) -> crate::output::GetDeleteEventsByEventTypeStatusOutput {
            crate::output::GetDeleteEventsByEventTypeStatusOutput {
                event_type_name: self.event_type_name,
                events_deletion_status: self.events_deletion_status,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetDeleteEventsByEventTypeStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetDeleteEventsByEventTypeStatusOutput`](crate::output::GetDeleteEventsByEventTypeStatusOutput).
    pub fn builder() -> crate::output::get_delete_events_by_event_type_status_output::Builder {
        crate::output::get_delete_events_by_event_type_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetBatchPredictionJobsOutput {
    /// <p>An array containing the details of each batch prediction job.</p>
    #[doc(hidden)]
    pub batch_predictions: std::option::Option<std::vec::Vec<crate::model::BatchPrediction>>,
    /// <p>The next token for the subsequent request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetBatchPredictionJobsOutput {
    /// <p>An array containing the details of each batch prediction job.</p>
    pub fn batch_predictions(&self) -> std::option::Option<&[crate::model::BatchPrediction]> {
        self.batch_predictions.as_deref()
    }
    /// <p>The next token for the subsequent request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetBatchPredictionJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetBatchPredictionJobsOutput`](crate::output::GetBatchPredictionJobsOutput).
pub mod get_batch_prediction_jobs_output {

    /// A builder for [`GetBatchPredictionJobsOutput`](crate::output::GetBatchPredictionJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) batch_predictions:
            std::option::Option<std::vec::Vec<crate::model::BatchPrediction>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `batch_predictions`.
        ///
        /// To override the contents of this collection use [`set_batch_predictions`](Self::set_batch_predictions).
        ///
        /// <p>An array containing the details of each batch prediction job.</p>
        pub fn batch_predictions(mut self, input: crate::model::BatchPrediction) -> Self {
            let mut v = self.batch_predictions.unwrap_or_default();
            v.push(input);
            self.batch_predictions = Some(v);
            self
        }
        /// <p>An array containing the details of each batch prediction job.</p>
        pub fn set_batch_predictions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BatchPrediction>>,
        ) -> Self {
            self.batch_predictions = input;
            self
        }
        /// <p>The next token for the subsequent request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next token for the subsequent request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetBatchPredictionJobsOutput`](crate::output::GetBatchPredictionJobsOutput).
        pub fn build(self) -> crate::output::GetBatchPredictionJobsOutput {
            crate::output::GetBatchPredictionJobsOutput {
                batch_predictions: self.batch_predictions,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetBatchPredictionJobsOutput {
    /// Creates a new builder-style object to manufacture [`GetBatchPredictionJobsOutput`](crate::output::GetBatchPredictionJobsOutput).
    pub fn builder() -> crate::output::get_batch_prediction_jobs_output::Builder {
        crate::output::get_batch_prediction_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetBatchImportJobsOutput {
    /// <p>An array containing the details of each batch import job.</p>
    #[doc(hidden)]
    pub batch_imports: std::option::Option<std::vec::Vec<crate::model::BatchImport>>,
    /// <p>The next token for the subsequent resquest.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetBatchImportJobsOutput {
    /// <p>An array containing the details of each batch import job.</p>
    pub fn batch_imports(&self) -> std::option::Option<&[crate::model::BatchImport]> {
        self.batch_imports.as_deref()
    }
    /// <p>The next token for the subsequent resquest.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetBatchImportJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetBatchImportJobsOutput`](crate::output::GetBatchImportJobsOutput).
pub mod get_batch_import_jobs_output {

    /// A builder for [`GetBatchImportJobsOutput`](crate::output::GetBatchImportJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) batch_imports: std::option::Option<std::vec::Vec<crate::model::BatchImport>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `batch_imports`.
        ///
        /// To override the contents of this collection use [`set_batch_imports`](Self::set_batch_imports).
        ///
        /// <p>An array containing the details of each batch import job.</p>
        pub fn batch_imports(mut self, input: crate::model::BatchImport) -> Self {
            let mut v = self.batch_imports.unwrap_or_default();
            v.push(input);
            self.batch_imports = Some(v);
            self
        }
        /// <p>An array containing the details of each batch import job.</p>
        pub fn set_batch_imports(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BatchImport>>,
        ) -> Self {
            self.batch_imports = input;
            self
        }
        /// <p>The next token for the subsequent resquest.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next token for the subsequent resquest.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetBatchImportJobsOutput`](crate::output::GetBatchImportJobsOutput).
        pub fn build(self) -> crate::output::GetBatchImportJobsOutput {
            crate::output::GetBatchImportJobsOutput {
                batch_imports: self.batch_imports,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetBatchImportJobsOutput {
    /// Creates a new builder-style object to manufacture [`GetBatchImportJobsOutput`](crate::output::GetBatchImportJobsOutput).
    pub fn builder() -> crate::output::get_batch_import_jobs_output::Builder {
        crate::output::get_batch_import_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeModelVersionsOutput {
    /// <p>The model version details.</p>
    #[doc(hidden)]
    pub model_version_details: std::option::Option<std::vec::Vec<crate::model::ModelVersionDetail>>,
    /// <p>The next token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeModelVersionsOutput {
    /// <p>The model version details.</p>
    pub fn model_version_details(
        &self,
    ) -> std::option::Option<&[crate::model::ModelVersionDetail]> {
        self.model_version_details.as_deref()
    }
    /// <p>The next token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeModelVersionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeModelVersionsOutput`](crate::output::DescribeModelVersionsOutput).
pub mod describe_model_versions_output {

    /// A builder for [`DescribeModelVersionsOutput`](crate::output::DescribeModelVersionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) model_version_details:
            std::option::Option<std::vec::Vec<crate::model::ModelVersionDetail>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `model_version_details`.
        ///
        /// To override the contents of this collection use [`set_model_version_details`](Self::set_model_version_details).
        ///
        /// <p>The model version details.</p>
        pub fn model_version_details(mut self, input: crate::model::ModelVersionDetail) -> Self {
            let mut v = self.model_version_details.unwrap_or_default();
            v.push(input);
            self.model_version_details = Some(v);
            self
        }
        /// <p>The model version details.</p>
        pub fn set_model_version_details(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ModelVersionDetail>>,
        ) -> Self {
            self.model_version_details = input;
            self
        }
        /// <p>The next token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeModelVersionsOutput`](crate::output::DescribeModelVersionsOutput).
        pub fn build(self) -> crate::output::DescribeModelVersionsOutput {
            crate::output::DescribeModelVersionsOutput {
                model_version_details: self.model_version_details,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeModelVersionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeModelVersionsOutput`](crate::output::DescribeModelVersionsOutput).
    pub fn builder() -> crate::output::describe_model_versions_output::Builder {
        crate::output::describe_model_versions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDetectorOutput {
    /// <p>The detector ID.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The status and description for each detector version.</p>
    #[doc(hidden)]
    pub detector_version_summaries:
        std::option::Option<std::vec::Vec<crate::model::DetectorVersionSummary>>,
    /// <p>The next token to be used for subsequent requests.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The detector ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDetectorOutput {
    /// <p>The detector ID.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The status and description for each detector version.</p>
    pub fn detector_version_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::DetectorVersionSummary]> {
        self.detector_version_summaries.as_deref()
    }
    /// <p>The next token to be used for subsequent requests.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The detector ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeDetectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeDetectorOutput`](crate::output::DescribeDetectorOutput).
pub mod describe_detector_output {

    /// A builder for [`DescribeDetectorOutput`](crate::output::DescribeDetectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) detector_id: std::option::Option<std::string::String>,
        pub(crate) detector_version_summaries:
            std::option::Option<std::vec::Vec<crate::model::DetectorVersionSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The detector ID.</p>
        pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.detector_id = Some(input.into());
            self
        }
        /// <p>The detector ID.</p>
        pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.detector_id = input;
            self
        }
        /// Appends an item to `detector_version_summaries`.
        ///
        /// To override the contents of this collection use [`set_detector_version_summaries`](Self::set_detector_version_summaries).
        ///
        /// <p>The status and description for each detector version.</p>
        pub fn detector_version_summaries(
            mut self,
            input: crate::model::DetectorVersionSummary,
        ) -> Self {
            let mut v = self.detector_version_summaries.unwrap_or_default();
            v.push(input);
            self.detector_version_summaries = Some(v);
            self
        }
        /// <p>The status and description for each detector version.</p>
        pub fn set_detector_version_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DetectorVersionSummary>>,
        ) -> Self {
            self.detector_version_summaries = input;
            self
        }
        /// <p>The next token to be used for subsequent requests.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The next token to be used for subsequent requests.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>The detector ARN.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The detector ARN.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDetectorOutput`](crate::output::DescribeDetectorOutput).
        pub fn build(self) -> crate::output::DescribeDetectorOutput {
            crate::output::DescribeDetectorOutput {
                detector_id: self.detector_id,
                detector_version_summaries: self.detector_version_summaries,
                next_token: self.next_token,
                arn: self.arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeDetectorOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDetectorOutput`](crate::output::DescribeDetectorOutput).
    pub fn builder() -> crate::output::describe_detector_output::Builder {
        crate::output::describe_detector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVariableOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVariableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVariableOutput`](crate::output::DeleteVariableOutput).
pub mod delete_variable_output {

    /// A builder for [`DeleteVariableOutput`](crate::output::DeleteVariableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVariableOutput`](crate::output::DeleteVariableOutput).
        pub fn build(self) -> crate::output::DeleteVariableOutput {
            crate::output::DeleteVariableOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVariableOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVariableOutput`](crate::output::DeleteVariableOutput).
    pub fn builder() -> crate::output::delete_variable_output::Builder {
        crate::output::delete_variable_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRuleOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteRuleOutput`](crate::output::DeleteRuleOutput).
pub mod delete_rule_output {

    /// A builder for [`DeleteRuleOutput`](crate::output::DeleteRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteRuleOutput`](crate::output::DeleteRuleOutput).
        pub fn build(self) -> crate::output::DeleteRuleOutput {
            crate::output::DeleteRuleOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteRuleOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRuleOutput`](crate::output::DeleteRuleOutput).
    pub fn builder() -> crate::output::delete_rule_output::Builder {
        crate::output::delete_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteOutcomeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteOutcomeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteOutcomeOutput`](crate::output::DeleteOutcomeOutput).
pub mod delete_outcome_output {

    /// A builder for [`DeleteOutcomeOutput`](crate::output::DeleteOutcomeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteOutcomeOutput`](crate::output::DeleteOutcomeOutput).
        pub fn build(self) -> crate::output::DeleteOutcomeOutput {
            crate::output::DeleteOutcomeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteOutcomeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteOutcomeOutput`](crate::output::DeleteOutcomeOutput).
    pub fn builder() -> crate::output::delete_outcome_output::Builder {
        crate::output::delete_outcome_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteModelVersionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteModelVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteModelVersionOutput`](crate::output::DeleteModelVersionOutput).
pub mod delete_model_version_output {

    /// A builder for [`DeleteModelVersionOutput`](crate::output::DeleteModelVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteModelVersionOutput`](crate::output::DeleteModelVersionOutput).
        pub fn build(self) -> crate::output::DeleteModelVersionOutput {
            crate::output::DeleteModelVersionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteModelVersionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteModelVersionOutput`](crate::output::DeleteModelVersionOutput).
    pub fn builder() -> crate::output::delete_model_version_output::Builder {
        crate::output::delete_model_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteModelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteModelOutput`](crate::output::DeleteModelOutput).
pub mod delete_model_output {

    /// A builder for [`DeleteModelOutput`](crate::output::DeleteModelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteModelOutput`](crate::output::DeleteModelOutput).
        pub fn build(self) -> crate::output::DeleteModelOutput {
            crate::output::DeleteModelOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteModelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteModelOutput`](crate::output::DeleteModelOutput).
    pub fn builder() -> crate::output::delete_model_output::Builder {
        crate::output::delete_model_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLabelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteLabelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLabelOutput`](crate::output::DeleteLabelOutput).
pub mod delete_label_output {

    /// A builder for [`DeleteLabelOutput`](crate::output::DeleteLabelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLabelOutput`](crate::output::DeleteLabelOutput).
        pub fn build(self) -> crate::output::DeleteLabelOutput {
            crate::output::DeleteLabelOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLabelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLabelOutput`](crate::output::DeleteLabelOutput).
    pub fn builder() -> crate::output::delete_label_output::Builder {
        crate::output::delete_label_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteExternalModelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteExternalModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteExternalModelOutput`](crate::output::DeleteExternalModelOutput).
pub mod delete_external_model_output {

    /// A builder for [`DeleteExternalModelOutput`](crate::output::DeleteExternalModelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteExternalModelOutput`](crate::output::DeleteExternalModelOutput).
        pub fn build(self) -> crate::output::DeleteExternalModelOutput {
            crate::output::DeleteExternalModelOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteExternalModelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteExternalModelOutput`](crate::output::DeleteExternalModelOutput).
    pub fn builder() -> crate::output::delete_external_model_output::Builder {
        crate::output::delete_external_model_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteEventTypeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteEventTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteEventTypeOutput`](crate::output::DeleteEventTypeOutput).
pub mod delete_event_type_output {

    /// A builder for [`DeleteEventTypeOutput`](crate::output::DeleteEventTypeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEventTypeOutput`](crate::output::DeleteEventTypeOutput).
        pub fn build(self) -> crate::output::DeleteEventTypeOutput {
            crate::output::DeleteEventTypeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteEventTypeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEventTypeOutput`](crate::output::DeleteEventTypeOutput).
    pub fn builder() -> crate::output::delete_event_type_output::Builder {
        crate::output::delete_event_type_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteEventsByEventTypeOutput {
    /// <p>Name of event type for which to delete the events.</p>
    #[doc(hidden)]
    pub event_type_name: std::option::Option<std::string::String>,
    /// <p>The status of the delete request.</p>
    #[doc(hidden)]
    pub events_deletion_status: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteEventsByEventTypeOutput {
    /// <p>Name of event type for which to delete the events.</p>
    pub fn event_type_name(&self) -> std::option::Option<&str> {
        self.event_type_name.as_deref()
    }
    /// <p>The status of the delete request.</p>
    pub fn events_deletion_status(&self) -> std::option::Option<&str> {
        self.events_deletion_status.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteEventsByEventTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteEventsByEventTypeOutput`](crate::output::DeleteEventsByEventTypeOutput).
pub mod delete_events_by_event_type_output {

    /// A builder for [`DeleteEventsByEventTypeOutput`](crate::output::DeleteEventsByEventTypeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_type_name: std::option::Option<std::string::String>,
        pub(crate) events_deletion_status: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Name of event type for which to delete the events.</p>
        pub fn event_type_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.event_type_name = Some(input.into());
            self
        }
        /// <p>Name of event type for which to delete the events.</p>
        pub fn set_event_type_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.event_type_name = input;
            self
        }
        /// <p>The status of the delete request.</p>
        pub fn events_deletion_status(mut self, input: impl Into<std::string::String>) -> Self {
            self.events_deletion_status = Some(input.into());
            self
        }
        /// <p>The status of the delete request.</p>
        pub fn set_events_deletion_status(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.events_deletion_status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEventsByEventTypeOutput`](crate::output::DeleteEventsByEventTypeOutput).
        pub fn build(self) -> crate::output::DeleteEventsByEventTypeOutput {
            crate::output::DeleteEventsByEventTypeOutput {
                event_type_name: self.event_type_name,
                events_deletion_status: self.events_deletion_status,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteEventsByEventTypeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEventsByEventTypeOutput`](crate::output::DeleteEventsByEventTypeOutput).
    pub fn builder() -> crate::output::delete_events_by_event_type_output::Builder {
        crate::output::delete_events_by_event_type_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteEventOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteEventOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteEventOutput`](crate::output::DeleteEventOutput).
pub mod delete_event_output {

    /// A builder for [`DeleteEventOutput`](crate::output::DeleteEventOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEventOutput`](crate::output::DeleteEventOutput).
        pub fn build(self) -> crate::output::DeleteEventOutput {
            crate::output::DeleteEventOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteEventOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEventOutput`](crate::output::DeleteEventOutput).
    pub fn builder() -> crate::output::delete_event_output::Builder {
        crate::output::delete_event_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteEntityTypeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteEntityTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteEntityTypeOutput`](crate::output::DeleteEntityTypeOutput).
pub mod delete_entity_type_output {

    /// A builder for [`DeleteEntityTypeOutput`](crate::output::DeleteEntityTypeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEntityTypeOutput`](crate::output::DeleteEntityTypeOutput).
        pub fn build(self) -> crate::output::DeleteEntityTypeOutput {
            crate::output::DeleteEntityTypeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteEntityTypeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEntityTypeOutput`](crate::output::DeleteEntityTypeOutput).
    pub fn builder() -> crate::output::delete_entity_type_output::Builder {
        crate::output::delete_entity_type_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteDetectorVersionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteDetectorVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteDetectorVersionOutput`](crate::output::DeleteDetectorVersionOutput).
pub mod delete_detector_version_output {

    /// A builder for [`DeleteDetectorVersionOutput`](crate::output::DeleteDetectorVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDetectorVersionOutput`](crate::output::DeleteDetectorVersionOutput).
        pub fn build(self) -> crate::output::DeleteDetectorVersionOutput {
            crate::output::DeleteDetectorVersionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteDetectorVersionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDetectorVersionOutput`](crate::output::DeleteDetectorVersionOutput).
    pub fn builder() -> crate::output::delete_detector_version_output::Builder {
        crate::output::delete_detector_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteDetectorOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteDetectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteDetectorOutput`](crate::output::DeleteDetectorOutput).
pub mod delete_detector_output {

    /// A builder for [`DeleteDetectorOutput`](crate::output::DeleteDetectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDetectorOutput`](crate::output::DeleteDetectorOutput).
        pub fn build(self) -> crate::output::DeleteDetectorOutput {
            crate::output::DeleteDetectorOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteDetectorOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDetectorOutput`](crate::output::DeleteDetectorOutput).
    pub fn builder() -> crate::output::delete_detector_output::Builder {
        crate::output::delete_detector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteBatchPredictionJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteBatchPredictionJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteBatchPredictionJobOutput`](crate::output::DeleteBatchPredictionJobOutput).
pub mod delete_batch_prediction_job_output {

    /// A builder for [`DeleteBatchPredictionJobOutput`](crate::output::DeleteBatchPredictionJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteBatchPredictionJobOutput`](crate::output::DeleteBatchPredictionJobOutput).
        pub fn build(self) -> crate::output::DeleteBatchPredictionJobOutput {
            crate::output::DeleteBatchPredictionJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteBatchPredictionJobOutput {
    /// Creates a new builder-style object to manufacture [`DeleteBatchPredictionJobOutput`](crate::output::DeleteBatchPredictionJobOutput).
    pub fn builder() -> crate::output::delete_batch_prediction_job_output::Builder {
        crate::output::delete_batch_prediction_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteBatchImportJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteBatchImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteBatchImportJobOutput`](crate::output::DeleteBatchImportJobOutput).
pub mod delete_batch_import_job_output {

    /// A builder for [`DeleteBatchImportJobOutput`](crate::output::DeleteBatchImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteBatchImportJobOutput`](crate::output::DeleteBatchImportJobOutput).
        pub fn build(self) -> crate::output::DeleteBatchImportJobOutput {
            crate::output::DeleteBatchImportJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteBatchImportJobOutput {
    /// Creates a new builder-style object to manufacture [`DeleteBatchImportJobOutput`](crate::output::DeleteBatchImportJobOutput).
    pub fn builder() -> crate::output::delete_batch_import_job_output::Builder {
        crate::output::delete_batch_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVariableOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateVariableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVariableOutput`](crate::output::CreateVariableOutput).
pub mod create_variable_output {

    /// A builder for [`CreateVariableOutput`](crate::output::CreateVariableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVariableOutput`](crate::output::CreateVariableOutput).
        pub fn build(self) -> crate::output::CreateVariableOutput {
            crate::output::CreateVariableOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVariableOutput {
    /// Creates a new builder-style object to manufacture [`CreateVariableOutput`](crate::output::CreateVariableOutput).
    pub fn builder() -> crate::output::create_variable_output::Builder {
        crate::output::create_variable_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateRuleOutput {
    /// <p>The created rule.</p>
    #[doc(hidden)]
    pub rule: std::option::Option<crate::model::Rule>,
    _request_id: Option<String>,
}
impl CreateRuleOutput {
    /// <p>The created rule.</p>
    pub fn rule(&self) -> std::option::Option<&crate::model::Rule> {
        self.rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateRuleOutput`](crate::output::CreateRuleOutput).
pub mod create_rule_output {

    /// A builder for [`CreateRuleOutput`](crate::output::CreateRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rule: std::option::Option<crate::model::Rule>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The created rule.</p>
        pub fn rule(mut self, input: crate::model::Rule) -> Self {
            self.rule = Some(input);
            self
        }
        /// <p>The created rule.</p>
        pub fn set_rule(mut self, input: std::option::Option<crate::model::Rule>) -> Self {
            self.rule = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateRuleOutput`](crate::output::CreateRuleOutput).
        pub fn build(self) -> crate::output::CreateRuleOutput {
            crate::output::CreateRuleOutput {
                rule: self.rule,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateRuleOutput {
    /// Creates a new builder-style object to manufacture [`CreateRuleOutput`](crate::output::CreateRuleOutput).
    pub fn builder() -> crate::output::create_rule_output::Builder {
        crate::output::create_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateModelVersionOutput {
    /// <p>The model ID.</p>
    #[doc(hidden)]
    pub model_id: std::option::Option<std::string::String>,
    /// <p>The model type.</p>
    #[doc(hidden)]
    pub model_type: std::option::Option<crate::model::ModelTypeEnum>,
    /// <p>The model version number of the model version created.</p>
    #[doc(hidden)]
    pub model_version_number: std::option::Option<std::string::String>,
    /// <p>The model version status. </p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateModelVersionOutput {
    /// <p>The model ID.</p>
    pub fn model_id(&self) -> std::option::Option<&str> {
        self.model_id.as_deref()
    }
    /// <p>The model type.</p>
    pub fn model_type(&self) -> std::option::Option<&crate::model::ModelTypeEnum> {
        self.model_type.as_ref()
    }
    /// <p>The model version number of the model version created.</p>
    pub fn model_version_number(&self) -> std::option::Option<&str> {
        self.model_version_number.as_deref()
    }
    /// <p>The model version status. </p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateModelVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateModelVersionOutput`](crate::output::CreateModelVersionOutput).
pub mod create_model_version_output {

    /// A builder for [`CreateModelVersionOutput`](crate::output::CreateModelVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) model_id: std::option::Option<std::string::String>,
        pub(crate) model_type: std::option::Option<crate::model::ModelTypeEnum>,
        pub(crate) model_version_number: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The model ID.</p>
        pub fn model_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_id = Some(input.into());
            self
        }
        /// <p>The model ID.</p>
        pub fn set_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.model_id = input;
            self
        }
        /// <p>The model type.</p>
        pub fn model_type(mut self, input: crate::model::ModelTypeEnum) -> Self {
            self.model_type = Some(input);
            self
        }
        /// <p>The model type.</p>
        pub fn set_model_type(
            mut self,
            input: std::option::Option<crate::model::ModelTypeEnum>,
        ) -> Self {
            self.model_type = input;
            self
        }
        /// <p>The model version number of the model version created.</p>
        pub fn model_version_number(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_version_number = Some(input.into());
            self
        }
        /// <p>The model version number of the model version created.</p>
        pub fn set_model_version_number(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.model_version_number = input;
            self
        }
        /// <p>The model version status. </p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        /// <p>The model version status. </p>
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateModelVersionOutput`](crate::output::CreateModelVersionOutput).
        pub fn build(self) -> crate::output::CreateModelVersionOutput {
            crate::output::CreateModelVersionOutput {
                model_id: self.model_id,
                model_type: self.model_type,
                model_version_number: self.model_version_number,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateModelVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateModelVersionOutput`](crate::output::CreateModelVersionOutput).
    pub fn builder() -> crate::output::create_model_version_output::Builder {
        crate::output::create_model_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateModelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateModelOutput`](crate::output::CreateModelOutput).
pub mod create_model_output {

    /// A builder for [`CreateModelOutput`](crate::output::CreateModelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateModelOutput`](crate::output::CreateModelOutput).
        pub fn build(self) -> crate::output::CreateModelOutput {
            crate::output::CreateModelOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateModelOutput {
    /// Creates a new builder-style object to manufacture [`CreateModelOutput`](crate::output::CreateModelOutput).
    pub fn builder() -> crate::output::create_model_output::Builder {
        crate::output::create_model_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDetectorVersionOutput {
    /// <p>The ID for the created version's parent detector.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The ID for the created detector. </p>
    #[doc(hidden)]
    pub detector_version_id: std::option::Option<std::string::String>,
    /// <p>The status of the detector version.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::DetectorVersionStatus>,
    _request_id: Option<String>,
}
impl CreateDetectorVersionOutput {
    /// <p>The ID for the created version's parent detector.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The ID for the created detector. </p>
    pub fn detector_version_id(&self) -> std::option::Option<&str> {
        self.detector_version_id.as_deref()
    }
    /// <p>The status of the detector version.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::DetectorVersionStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateDetectorVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateDetectorVersionOutput`](crate::output::CreateDetectorVersionOutput).
pub mod create_detector_version_output {

    /// A builder for [`CreateDetectorVersionOutput`](crate::output::CreateDetectorVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) detector_id: std::option::Option<std::string::String>,
        pub(crate) detector_version_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::DetectorVersionStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID for the created version's parent detector.</p>
        pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.detector_id = Some(input.into());
            self
        }
        /// <p>The ID for the created version's parent detector.</p>
        pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.detector_id = input;
            self
        }
        /// <p>The ID for the created detector. </p>
        pub fn detector_version_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.detector_version_id = Some(input.into());
            self
        }
        /// <p>The ID for the created detector. </p>
        pub fn set_detector_version_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.detector_version_id = input;
            self
        }
        /// <p>The status of the detector version.</p>
        pub fn status(mut self, input: crate::model::DetectorVersionStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the detector version.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::DetectorVersionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateDetectorVersionOutput`](crate::output::CreateDetectorVersionOutput).
        pub fn build(self) -> crate::output::CreateDetectorVersionOutput {
            crate::output::CreateDetectorVersionOutput {
                detector_id: self.detector_id,
                detector_version_id: self.detector_version_id,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateDetectorVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateDetectorVersionOutput`](crate::output::CreateDetectorVersionOutput).
    pub fn builder() -> crate::output::create_detector_version_output::Builder {
        crate::output::create_detector_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBatchPredictionJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateBatchPredictionJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateBatchPredictionJobOutput`](crate::output::CreateBatchPredictionJobOutput).
pub mod create_batch_prediction_job_output {

    /// A builder for [`CreateBatchPredictionJobOutput`](crate::output::CreateBatchPredictionJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateBatchPredictionJobOutput`](crate::output::CreateBatchPredictionJobOutput).
        pub fn build(self) -> crate::output::CreateBatchPredictionJobOutput {
            crate::output::CreateBatchPredictionJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateBatchPredictionJobOutput {
    /// Creates a new builder-style object to manufacture [`CreateBatchPredictionJobOutput`](crate::output::CreateBatchPredictionJobOutput).
    pub fn builder() -> crate::output::create_batch_prediction_job_output::Builder {
        crate::output::create_batch_prediction_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBatchImportJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateBatchImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateBatchImportJobOutput`](crate::output::CreateBatchImportJobOutput).
pub mod create_batch_import_job_output {

    /// A builder for [`CreateBatchImportJobOutput`](crate::output::CreateBatchImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateBatchImportJobOutput`](crate::output::CreateBatchImportJobOutput).
        pub fn build(self) -> crate::output::CreateBatchImportJobOutput {
            crate::output::CreateBatchImportJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateBatchImportJobOutput {
    /// Creates a new builder-style object to manufacture [`CreateBatchImportJobOutput`](crate::output::CreateBatchImportJobOutput).
    pub fn builder() -> crate::output::create_batch_import_job_output::Builder {
        crate::output::create_batch_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelBatchPredictionJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CancelBatchPredictionJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelBatchPredictionJobOutput`](crate::output::CancelBatchPredictionJobOutput).
pub mod cancel_batch_prediction_job_output {

    /// A builder for [`CancelBatchPredictionJobOutput`](crate::output::CancelBatchPredictionJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelBatchPredictionJobOutput`](crate::output::CancelBatchPredictionJobOutput).
        pub fn build(self) -> crate::output::CancelBatchPredictionJobOutput {
            crate::output::CancelBatchPredictionJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelBatchPredictionJobOutput {
    /// Creates a new builder-style object to manufacture [`CancelBatchPredictionJobOutput`](crate::output::CancelBatchPredictionJobOutput).
    pub fn builder() -> crate::output::cancel_batch_prediction_job_output::Builder {
        crate::output::cancel_batch_prediction_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelBatchImportJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CancelBatchImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelBatchImportJobOutput`](crate::output::CancelBatchImportJobOutput).
pub mod cancel_batch_import_job_output {

    /// A builder for [`CancelBatchImportJobOutput`](crate::output::CancelBatchImportJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelBatchImportJobOutput`](crate::output::CancelBatchImportJobOutput).
        pub fn build(self) -> crate::output::CancelBatchImportJobOutput {
            crate::output::CancelBatchImportJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelBatchImportJobOutput {
    /// Creates a new builder-style object to manufacture [`CancelBatchImportJobOutput`](crate::output::CancelBatchImportJobOutput).
    pub fn builder() -> crate::output::cancel_batch_import_job_output::Builder {
        crate::output::cancel_batch_import_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetVariableOutput {
    /// <p>The returned variables.</p>
    #[doc(hidden)]
    pub variables: std::option::Option<std::vec::Vec<crate::model::Variable>>,
    /// <p>The errors from the request.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::BatchGetVariableError>>,
    _request_id: Option<String>,
}
impl BatchGetVariableOutput {
    /// <p>The returned variables.</p>
    pub fn variables(&self) -> std::option::Option<&[crate::model::Variable]> {
        self.variables.as_deref()
    }
    /// <p>The errors from the request.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::BatchGetVariableError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchGetVariableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`BatchGetVariableOutput`](crate::output::BatchGetVariableOutput).
pub mod batch_get_variable_output {

    /// A builder for [`BatchGetVariableOutput`](crate::output::BatchGetVariableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) variables: std::option::Option<std::vec::Vec<crate::model::Variable>>,
        pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::BatchGetVariableError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `variables`.
        ///
        /// To override the contents of this collection use [`set_variables`](Self::set_variables).
        ///
        /// <p>The returned variables.</p>
        pub fn variables(mut self, input: crate::model::Variable) -> Self {
            let mut v = self.variables.unwrap_or_default();
            v.push(input);
            self.variables = Some(v);
            self
        }
        /// <p>The returned variables.</p>
        pub fn set_variables(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Variable>>,
        ) -> Self {
            self.variables = input;
            self
        }
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>The errors from the request.</p>
        pub fn errors(mut self, input: crate::model::BatchGetVariableError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>The errors from the request.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BatchGetVariableError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchGetVariableOutput`](crate::output::BatchGetVariableOutput).
        pub fn build(self) -> crate::output::BatchGetVariableOutput {
            crate::output::BatchGetVariableOutput {
                variables: self.variables,
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}
impl BatchGetVariableOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetVariableOutput`](crate::output::BatchGetVariableOutput).
    pub fn builder() -> crate::output::batch_get_variable_output::Builder {
        crate::output::batch_get_variable_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchCreateVariableOutput {
    /// <p>Provides the errors for the <code>BatchCreateVariable</code> request.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::BatchCreateVariableError>>,
    _request_id: Option<String>,
}
impl BatchCreateVariableOutput {
    /// <p>Provides the errors for the <code>BatchCreateVariable</code> request.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::BatchCreateVariableError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchCreateVariableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`BatchCreateVariableOutput`](crate::output::BatchCreateVariableOutput).
pub mod batch_create_variable_output {

    /// A builder for [`BatchCreateVariableOutput`](crate::output::BatchCreateVariableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) errors:
            std::option::Option<std::vec::Vec<crate::model::BatchCreateVariableError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>Provides the errors for the <code>BatchCreateVariable</code> request.</p>
        pub fn errors(mut self, input: crate::model::BatchCreateVariableError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>Provides the errors for the <code>BatchCreateVariable</code> request.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BatchCreateVariableError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchCreateVariableOutput`](crate::output::BatchCreateVariableOutput).
        pub fn build(self) -> crate::output::BatchCreateVariableOutput {
            crate::output::BatchCreateVariableOutput {
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}
impl BatchCreateVariableOutput {
    /// Creates a new builder-style object to manufacture [`BatchCreateVariableOutput`](crate::output::BatchCreateVariableOutput).
    pub fn builder() -> crate::output::batch_create_variable_output::Builder {
        crate::output::batch_create_variable_output::Builder::default()
    }
}
