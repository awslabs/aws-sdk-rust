// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutExternalModelInput {
    /// <p>The model endpoints name.</p>
    pub model_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The source of the model.</p>
    pub model_source: ::std::option::Option<crate::types::ModelSource>,
    /// <p>The IAM role used to invoke the model endpoint.</p>
    pub invoke_model_endpoint_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The model endpoint input configuration.</p>
    pub input_configuration: ::std::option::Option<crate::types::ModelInputConfiguration>,
    /// <p>The model endpoint output configuration.</p>
    pub output_configuration: ::std::option::Option<crate::types::ModelOutputConfiguration>,
    /// <p>The model endpoint’s status in Amazon Fraud Detector.</p>
    pub model_endpoint_status: ::std::option::Option<crate::types::ModelEndpointStatus>,
    /// <p>A collection of key and value pairs.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl PutExternalModelInput {
    /// <p>The model endpoints name.</p>
    pub fn model_endpoint(&self) -> ::std::option::Option<&str> {
        self.model_endpoint.as_deref()
    }
    /// <p>The source of the model.</p>
    pub fn model_source(&self) -> ::std::option::Option<&crate::types::ModelSource> {
        self.model_source.as_ref()
    }
    /// <p>The IAM role used to invoke the model endpoint.</p>
    pub fn invoke_model_endpoint_role_arn(&self) -> ::std::option::Option<&str> {
        self.invoke_model_endpoint_role_arn.as_deref()
    }
    /// <p>The model endpoint input configuration.</p>
    pub fn input_configuration(&self) -> ::std::option::Option<&crate::types::ModelInputConfiguration> {
        self.input_configuration.as_ref()
    }
    /// <p>The model endpoint output configuration.</p>
    pub fn output_configuration(&self) -> ::std::option::Option<&crate::types::ModelOutputConfiguration> {
        self.output_configuration.as_ref()
    }
    /// <p>The model endpoint’s status in Amazon Fraud Detector.</p>
    pub fn model_endpoint_status(&self) -> ::std::option::Option<&crate::types::ModelEndpointStatus> {
        self.model_endpoint_status.as_ref()
    }
    /// <p>A collection of key and value pairs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl PutExternalModelInput {
    /// Creates a new builder-style object to manufacture [`PutExternalModelInput`](crate::operation::put_external_model::PutExternalModelInput).
    pub fn builder() -> crate::operation::put_external_model::builders::PutExternalModelInputBuilder {
        crate::operation::put_external_model::builders::PutExternalModelInputBuilder::default()
    }
}

/// A builder for [`PutExternalModelInput`](crate::operation::put_external_model::PutExternalModelInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutExternalModelInputBuilder {
    pub(crate) model_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) model_source: ::std::option::Option<crate::types::ModelSource>,
    pub(crate) invoke_model_endpoint_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) input_configuration: ::std::option::Option<crate::types::ModelInputConfiguration>,
    pub(crate) output_configuration: ::std::option::Option<crate::types::ModelOutputConfiguration>,
    pub(crate) model_endpoint_status: ::std::option::Option<crate::types::ModelEndpointStatus>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl PutExternalModelInputBuilder {
    /// <p>The model endpoints name.</p>
    /// This field is required.
    pub fn model_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The model endpoints name.</p>
    pub fn set_model_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_endpoint = input;
        self
    }
    /// <p>The model endpoints name.</p>
    pub fn get_model_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_endpoint
    }
    /// <p>The source of the model.</p>
    /// This field is required.
    pub fn model_source(mut self, input: crate::types::ModelSource) -> Self {
        self.model_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the model.</p>
    pub fn set_model_source(mut self, input: ::std::option::Option<crate::types::ModelSource>) -> Self {
        self.model_source = input;
        self
    }
    /// <p>The source of the model.</p>
    pub fn get_model_source(&self) -> &::std::option::Option<crate::types::ModelSource> {
        &self.model_source
    }
    /// <p>The IAM role used to invoke the model endpoint.</p>
    /// This field is required.
    pub fn invoke_model_endpoint_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invoke_model_endpoint_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role used to invoke the model endpoint.</p>
    pub fn set_invoke_model_endpoint_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invoke_model_endpoint_role_arn = input;
        self
    }
    /// <p>The IAM role used to invoke the model endpoint.</p>
    pub fn get_invoke_model_endpoint_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.invoke_model_endpoint_role_arn
    }
    /// <p>The model endpoint input configuration.</p>
    /// This field is required.
    pub fn input_configuration(mut self, input: crate::types::ModelInputConfiguration) -> Self {
        self.input_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The model endpoint input configuration.</p>
    pub fn set_input_configuration(mut self, input: ::std::option::Option<crate::types::ModelInputConfiguration>) -> Self {
        self.input_configuration = input;
        self
    }
    /// <p>The model endpoint input configuration.</p>
    pub fn get_input_configuration(&self) -> &::std::option::Option<crate::types::ModelInputConfiguration> {
        &self.input_configuration
    }
    /// <p>The model endpoint output configuration.</p>
    /// This field is required.
    pub fn output_configuration(mut self, input: crate::types::ModelOutputConfiguration) -> Self {
        self.output_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The model endpoint output configuration.</p>
    pub fn set_output_configuration(mut self, input: ::std::option::Option<crate::types::ModelOutputConfiguration>) -> Self {
        self.output_configuration = input;
        self
    }
    /// <p>The model endpoint output configuration.</p>
    pub fn get_output_configuration(&self) -> &::std::option::Option<crate::types::ModelOutputConfiguration> {
        &self.output_configuration
    }
    /// <p>The model endpoint’s status in Amazon Fraud Detector.</p>
    /// This field is required.
    pub fn model_endpoint_status(mut self, input: crate::types::ModelEndpointStatus) -> Self {
        self.model_endpoint_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The model endpoint’s status in Amazon Fraud Detector.</p>
    pub fn set_model_endpoint_status(mut self, input: ::std::option::Option<crate::types::ModelEndpointStatus>) -> Self {
        self.model_endpoint_status = input;
        self
    }
    /// <p>The model endpoint’s status in Amazon Fraud Detector.</p>
    pub fn get_model_endpoint_status(&self) -> &::std::option::Option<crate::types::ModelEndpointStatus> {
        &self.model_endpoint_status
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of key and value pairs.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A collection of key and value pairs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A collection of key and value pairs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`PutExternalModelInput`](crate::operation::put_external_model::PutExternalModelInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_external_model::PutExternalModelInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_external_model::PutExternalModelInput {
            model_endpoint: self.model_endpoint,
            model_source: self.model_source,
            invoke_model_endpoint_role_arn: self.invoke_model_endpoint_role_arn,
            input_configuration: self.input_configuration,
            output_configuration: self.output_configuration,
            model_endpoint_status: self.model_endpoint_status,
            tags: self.tags,
        })
    }
}
