// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBatchImportJobInput {
    /// <p>The ID of the batch import job. The ID cannot be of a past job, unless the job exists in <code>CREATE_FAILED</code> state.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The URI that points to the Amazon S3 location of your data file.</p>
    #[doc(hidden)]
    pub input_path: std::option::Option<std::string::String>,
    /// <p>The URI that points to the Amazon S3 location for storing your results. </p>
    #[doc(hidden)]
    pub output_path: std::option::Option<std::string::String>,
    /// <p>The name of the event type.</p>
    #[doc(hidden)]
    pub event_type_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the IAM role created for Amazon S3 bucket that holds your data file.</p>
    /// <p>The IAM role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    #[doc(hidden)]
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>A collection of key-value pairs associated with this request. </p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateBatchImportJobInput {
    /// <p>The ID of the batch import job. The ID cannot be of a past job, unless the job exists in <code>CREATE_FAILED</code> state.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The URI that points to the Amazon S3 location of your data file.</p>
    pub fn input_path(&self) -> std::option::Option<&str> {
        self.input_path.as_deref()
    }
    /// <p>The URI that points to the Amazon S3 location for storing your results. </p>
    pub fn output_path(&self) -> std::option::Option<&str> {
        self.output_path.as_deref()
    }
    /// <p>The name of the event type.</p>
    pub fn event_type_name(&self) -> std::option::Option<&str> {
        self.event_type_name.as_deref()
    }
    /// <p>The ARN of the IAM role created for Amazon S3 bucket that holds your data file.</p>
    /// <p>The IAM role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn iam_role_arn(&self) -> std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>A collection of key-value pairs associated with this request. </p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateBatchImportJobInput {
    /// Creates a new builder-style object to manufacture [`CreateBatchImportJobInput`](crate::operation::create_batch_import_job::CreateBatchImportJobInput).
    pub fn builder(
    ) -> crate::operation::create_batch_import_job::builders::CreateBatchImportJobInputBuilder {
        crate::operation::create_batch_import_job::builders::CreateBatchImportJobInputBuilder::default()
    }
}

/// A builder for [`CreateBatchImportJobInput`](crate::operation::create_batch_import_job::CreateBatchImportJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBatchImportJobInputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) input_path: std::option::Option<std::string::String>,
    pub(crate) output_path: std::option::Option<std::string::String>,
    pub(crate) event_type_name: std::option::Option<std::string::String>,
    pub(crate) iam_role_arn: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateBatchImportJobInputBuilder {
    /// <p>The ID of the batch import job. The ID cannot be of a past job, unless the job exists in <code>CREATE_FAILED</code> state.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The ID of the batch import job. The ID cannot be of a past job, unless the job exists in <code>CREATE_FAILED</code> state.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The URI that points to the Amazon S3 location of your data file.</p>
    pub fn input_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_path = Some(input.into());
        self
    }
    /// <p>The URI that points to the Amazon S3 location of your data file.</p>
    pub fn set_input_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input_path = input;
        self
    }
    /// <p>The URI that points to the Amazon S3 location for storing your results. </p>
    pub fn output_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.output_path = Some(input.into());
        self
    }
    /// <p>The URI that points to the Amazon S3 location for storing your results. </p>
    pub fn set_output_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.output_path = input;
        self
    }
    /// <p>The name of the event type.</p>
    pub fn event_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_type_name = Some(input.into());
        self
    }
    /// <p>The name of the event type.</p>
    pub fn set_event_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_type_name = input;
        self
    }
    /// <p>The ARN of the IAM role created for Amazon S3 bucket that holds your data file.</p>
    /// <p>The IAM role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.iam_role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role created for Amazon S3 bucket that holds your data file.</p>
    /// <p>The IAM role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of key-value pairs associated with this request. </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A collection of key-value pairs associated with this request. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateBatchImportJobInput`](crate::operation::create_batch_import_job::CreateBatchImportJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_batch_import_job::CreateBatchImportJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_batch_import_job::CreateBatchImportJobInput {
                job_id: self.job_id,
                input_path: self.input_path,
                output_path: self.output_path,
                event_type_name: self.event_type_name,
                iam_role_arn: self.iam_role_arn,
                tags: self.tags,
            },
        )
    }
}
