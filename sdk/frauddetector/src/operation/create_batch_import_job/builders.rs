// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_batch_import_job::_create_batch_import_job_output::CreateBatchImportJobOutputBuilder;

pub use crate::operation::create_batch_import_job::_create_batch_import_job_input::CreateBatchImportJobInputBuilder;

/// Fluent builder constructing a request to `CreateBatchImportJob`.
///
/// <p>Creates a batch import job. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateBatchImportJobFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_batch_import_job::builders::CreateBatchImportJobInputBuilder,
}
impl CreateBatchImportJobFluentBuilder {
    /// Creates a new `CreateBatchImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_batch_import_job::CreateBatchImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_batch_import_job::CreateBatchImportJobError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_batch_import_job::CreateBatchImportJobOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_batch_import_job::CreateBatchImportJobError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the batch import job. The ID cannot be of a past job, unless the job exists in <code>CREATE_FAILED</code> state.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The ID of the batch import job. The ID cannot be of a past job, unless the job exists in <code>CREATE_FAILED</code> state.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
    /// <p>The URI that points to the Amazon S3 location of your data file.</p>
    pub fn input_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.input_path(input.into());
        self
    }
    /// <p>The URI that points to the Amazon S3 location of your data file.</p>
    pub fn set_input_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_input_path(input);
        self
    }
    /// <p>The URI that points to the Amazon S3 location for storing your results. </p>
    pub fn output_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.output_path(input.into());
        self
    }
    /// <p>The URI that points to the Amazon S3 location for storing your results. </p>
    pub fn set_output_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_output_path(input);
        self
    }
    /// <p>The name of the event type.</p>
    pub fn event_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.event_type_name(input.into());
        self
    }
    /// <p>The name of the event type.</p>
    pub fn set_event_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_event_type_name(input);
        self
    }
    /// <p>The ARN of the IAM role created for Amazon S3 bucket that holds your data file.</p>
    /// <p>The IAM role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.iam_role_arn(input.into());
        self
    }
    /// <p>The ARN of the IAM role created for Amazon S3 bucket that holds your data file.</p>
    /// <p>The IAM role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_iam_role_arn(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of key-value pairs associated with this request. </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A collection of key-value pairs associated with this request. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
