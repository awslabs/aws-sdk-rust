// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteRuleInput {
    /// <p>A rule.</p>
    pub rule: ::std::option::Option<crate::types::Rule>,
}
impl DeleteRuleInput {
    /// <p>A rule.</p>
    pub fn rule(&self) -> ::std::option::Option<&crate::types::Rule> {
        self.rule.as_ref()
    }
}
impl DeleteRuleInput {
    /// Creates a new builder-style object to manufacture [`DeleteRuleInput`](crate::operation::delete_rule::DeleteRuleInput).
    pub fn builder() -> crate::operation::delete_rule::builders::DeleteRuleInputBuilder {
        crate::operation::delete_rule::builders::DeleteRuleInputBuilder::default()
    }
}

/// A builder for [`DeleteRuleInput`](crate::operation::delete_rule::DeleteRuleInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteRuleInputBuilder {
    pub(crate) rule: ::std::option::Option<crate::types::Rule>,
}
impl DeleteRuleInputBuilder {
    /// <p>A rule.</p>
    /// This field is required.
    pub fn rule(mut self, input: crate::types::Rule) -> Self {
        self.rule = ::std::option::Option::Some(input);
        self
    }
    /// <p>A rule.</p>
    pub fn set_rule(mut self, input: ::std::option::Option<crate::types::Rule>) -> Self {
        self.rule = input;
        self
    }
    /// <p>A rule.</p>
    pub fn get_rule(&self) -> &::std::option::Option<crate::types::Rule> {
        &self.rule
    }
    /// Consumes the builder and constructs a [`DeleteRuleInput`](crate::operation::delete_rule::DeleteRuleInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::delete_rule::DeleteRuleInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_rule::DeleteRuleInput { rule: self.rule })
    }
}
