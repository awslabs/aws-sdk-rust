// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetEventPredictionInput {
    /// <p>The detector ID.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The detector version ID.</p>
    #[doc(hidden)]
    pub detector_version_id: std::option::Option<std::string::String>,
    /// <p>The unique ID used to identify the event.</p>
    #[doc(hidden)]
    pub event_id: std::option::Option<std::string::String>,
    /// <p>The event type associated with the detector specified for the prediction.</p>
    #[doc(hidden)]
    pub event_type_name: std::option::Option<std::string::String>,
    /// <p>The entity type (associated with the detector's event type) and specific entity ID representing who performed the event. If an entity id is not available, use "UNKNOWN."</p>
    #[doc(hidden)]
    pub entities: std::option::Option<std::vec::Vec<crate::types::Entity>>,
    /// <p>Timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
    #[doc(hidden)]
    pub event_timestamp: std::option::Option<std::string::String>,
    /// <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p> <important>
    /// <p>You must provide at least one eventVariable</p>
    /// </important>
    /// <p>To ensure most accurate fraud prediction and to simplify your data preparation, Amazon Fraud Detector will replace all missing variables or values as follows:</p>
    /// <p> <b>For Amazon Fraud Detector trained models:</b> </p>
    /// <p>If a null value is provided explicitly for a variable or if a variable is missing, model will replace the null value or the missing variable (no variable name in the eventVariables map) with calculated default mean/medians for numeric variables and with special values for categorical variables.</p>
    /// <p> <b>For imported SageMaker models:</b> </p>
    /// <p>If a null value is provided explicitly for a variable, the model and rules will use “null” as the value. If a variable is not provided (no variable name in the eventVariables map), model and rules will use the default value that is provided for the variable. </p>
    #[doc(hidden)]
    pub event_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The Amazon SageMaker model endpoint input data blobs.</p>
    #[doc(hidden)]
    pub external_model_endpoint_data_blobs: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ModelEndpointDataBlob>,
    >,
}
impl GetEventPredictionInput {
    /// <p>The detector ID.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The detector version ID.</p>
    pub fn detector_version_id(&self) -> std::option::Option<&str> {
        self.detector_version_id.as_deref()
    }
    /// <p>The unique ID used to identify the event.</p>
    pub fn event_id(&self) -> std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The event type associated with the detector specified for the prediction.</p>
    pub fn event_type_name(&self) -> std::option::Option<&str> {
        self.event_type_name.as_deref()
    }
    /// <p>The entity type (associated with the detector's event type) and specific entity ID representing who performed the event. If an entity id is not available, use "UNKNOWN."</p>
    pub fn entities(&self) -> std::option::Option<&[crate::types::Entity]> {
        self.entities.as_deref()
    }
    /// <p>Timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
    pub fn event_timestamp(&self) -> std::option::Option<&str> {
        self.event_timestamp.as_deref()
    }
    /// <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p> <important>
    /// <p>You must provide at least one eventVariable</p>
    /// </important>
    /// <p>To ensure most accurate fraud prediction and to simplify your data preparation, Amazon Fraud Detector will replace all missing variables or values as follows:</p>
    /// <p> <b>For Amazon Fraud Detector trained models:</b> </p>
    /// <p>If a null value is provided explicitly for a variable or if a variable is missing, model will replace the null value or the missing variable (no variable name in the eventVariables map) with calculated default mean/medians for numeric variables and with special values for categorical variables.</p>
    /// <p> <b>For imported SageMaker models:</b> </p>
    /// <p>If a null value is provided explicitly for a variable, the model and rules will use “null” as the value. If a variable is not provided (no variable name in the eventVariables map), model and rules will use the default value that is provided for the variable. </p>
    pub fn event_variables(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.event_variables.as_ref()
    }
    /// <p>The Amazon SageMaker model endpoint input data blobs.</p>
    pub fn external_model_endpoint_data_blobs(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::ModelEndpointDataBlob>,
    > {
        self.external_model_endpoint_data_blobs.as_ref()
    }
}
impl std::fmt::Debug for GetEventPredictionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEventPredictionInput");
        formatter.field("detector_id", &self.detector_id);
        formatter.field("detector_version_id", &self.detector_version_id);
        formatter.field("event_id", &self.event_id);
        formatter.field("event_type_name", &self.event_type_name);
        formatter.field("entities", &self.entities);
        formatter.field("event_timestamp", &self.event_timestamp);
        formatter.field("event_variables", &self.event_variables);
        formatter.field(
            "external_model_endpoint_data_blobs",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.finish()
    }
}
impl GetEventPredictionInput {
    /// Creates a new builder-style object to manufacture [`GetEventPredictionInput`](crate::operation::get_event_prediction::GetEventPredictionInput).
    pub fn builder(
    ) -> crate::operation::get_event_prediction::builders::GetEventPredictionInputBuilder {
        crate::operation::get_event_prediction::builders::GetEventPredictionInputBuilder::default()
    }
}

/// A builder for [`GetEventPredictionInput`](crate::operation::get_event_prediction::GetEventPredictionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetEventPredictionInputBuilder {
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) detector_version_id: std::option::Option<std::string::String>,
    pub(crate) event_id: std::option::Option<std::string::String>,
    pub(crate) event_type_name: std::option::Option<std::string::String>,
    pub(crate) entities: std::option::Option<std::vec::Vec<crate::types::Entity>>,
    pub(crate) event_timestamp: std::option::Option<std::string::String>,
    pub(crate) event_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) external_model_endpoint_data_blobs: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ModelEndpointDataBlob>,
    >,
}
impl GetEventPredictionInputBuilder {
    /// <p>The detector ID.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p>The detector ID.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The detector version ID.</p>
    pub fn detector_version_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_version_id = Some(input.into());
        self
    }
    /// <p>The detector version ID.</p>
    pub fn set_detector_version_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.detector_version_id = input;
        self
    }
    /// <p>The unique ID used to identify the event.</p>
    pub fn event_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_id = Some(input.into());
        self
    }
    /// <p>The unique ID used to identify the event.</p>
    pub fn set_event_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The event type associated with the detector specified for the prediction.</p>
    pub fn event_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_type_name = Some(input.into());
        self
    }
    /// <p>The event type associated with the detector specified for the prediction.</p>
    pub fn set_event_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_type_name = input;
        self
    }
    /// Appends an item to `entities`.
    ///
    /// To override the contents of this collection use [`set_entities`](Self::set_entities).
    ///
    /// <p>The entity type (associated with the detector's event type) and specific entity ID representing who performed the event. If an entity id is not available, use "UNKNOWN."</p>
    pub fn entities(mut self, input: crate::types::Entity) -> Self {
        let mut v = self.entities.unwrap_or_default();
        v.push(input);
        self.entities = Some(v);
        self
    }
    /// <p>The entity type (associated with the detector's event type) and specific entity ID representing who performed the event. If an entity id is not available, use "UNKNOWN."</p>
    pub fn set_entities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Entity>>,
    ) -> Self {
        self.entities = input;
        self
    }
    /// <p>Timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
    pub fn event_timestamp(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_timestamp = Some(input.into());
        self
    }
    /// <p>Timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
    pub fn set_event_timestamp(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_timestamp = input;
        self
    }
    /// Adds a key-value pair to `event_variables`.
    ///
    /// To override the contents of this collection use [`set_event_variables`](Self::set_event_variables).
    ///
    /// <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p> <important>
    /// <p>You must provide at least one eventVariable</p>
    /// </important>
    /// <p>To ensure most accurate fraud prediction and to simplify your data preparation, Amazon Fraud Detector will replace all missing variables or values as follows:</p>
    /// <p> <b>For Amazon Fraud Detector trained models:</b> </p>
    /// <p>If a null value is provided explicitly for a variable or if a variable is missing, model will replace the null value or the missing variable (no variable name in the eventVariables map) with calculated default mean/medians for numeric variables and with special values for categorical variables.</p>
    /// <p> <b>For imported SageMaker models:</b> </p>
    /// <p>If a null value is provided explicitly for a variable, the model and rules will use “null” as the value. If a variable is not provided (no variable name in the eventVariables map), model and rules will use the default value that is provided for the variable. </p>
    pub fn event_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.event_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.event_variables = Some(hash_map);
        self
    }
    /// <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p> <important>
    /// <p>You must provide at least one eventVariable</p>
    /// </important>
    /// <p>To ensure most accurate fraud prediction and to simplify your data preparation, Amazon Fraud Detector will replace all missing variables or values as follows:</p>
    /// <p> <b>For Amazon Fraud Detector trained models:</b> </p>
    /// <p>If a null value is provided explicitly for a variable or if a variable is missing, model will replace the null value or the missing variable (no variable name in the eventVariables map) with calculated default mean/medians for numeric variables and with special values for categorical variables.</p>
    /// <p> <b>For imported SageMaker models:</b> </p>
    /// <p>If a null value is provided explicitly for a variable, the model and rules will use “null” as the value. If a variable is not provided (no variable name in the eventVariables map), model and rules will use the default value that is provided for the variable. </p>
    pub fn set_event_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.event_variables = input;
        self
    }
    /// Adds a key-value pair to `external_model_endpoint_data_blobs`.
    ///
    /// To override the contents of this collection use [`set_external_model_endpoint_data_blobs`](Self::set_external_model_endpoint_data_blobs).
    ///
    /// <p>The Amazon SageMaker model endpoint input data blobs.</p>
    pub fn external_model_endpoint_data_blobs(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ModelEndpointDataBlob,
    ) -> Self {
        let mut hash_map = self.external_model_endpoint_data_blobs.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.external_model_endpoint_data_blobs = Some(hash_map);
        self
    }
    /// <p>The Amazon SageMaker model endpoint input data blobs.</p>
    pub fn set_external_model_endpoint_data_blobs(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::ModelEndpointDataBlob>,
        >,
    ) -> Self {
        self.external_model_endpoint_data_blobs = input;
        self
    }
    /// Consumes the builder and constructs a [`GetEventPredictionInput`](crate::operation::get_event_prediction::GetEventPredictionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_event_prediction::GetEventPredictionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_event_prediction::GetEventPredictionInput {
                detector_id: self.detector_id,
                detector_version_id: self.detector_version_id,
                event_id: self.event_id,
                event_type_name: self.event_type_name,
                entities: self.entities,
                event_timestamp: self.event_timestamp,
                event_variables: self.event_variables,
                external_model_endpoint_data_blobs: self.external_model_endpoint_data_blobs,
            },
        )
    }
}
impl std::fmt::Debug for GetEventPredictionInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEventPredictionInputBuilder");
        formatter.field("detector_id", &self.detector_id);
        formatter.field("detector_version_id", &self.detector_version_id);
        formatter.field("event_id", &self.event_id);
        formatter.field("event_type_name", &self.event_type_name);
        formatter.field("entities", &self.entities);
        formatter.field("event_timestamp", &self.event_timestamp);
        formatter.field("event_variables", &self.event_variables);
        formatter.field(
            "external_model_endpoint_data_blobs",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.finish()
    }
}
