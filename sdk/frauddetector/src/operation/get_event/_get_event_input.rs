// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEventInput {
    /// <p>The ID of the event to retrieve.</p>
    #[doc(hidden)]
    pub event_id: std::option::Option<std::string::String>,
    /// <p>The event type of the event to retrieve.</p>
    #[doc(hidden)]
    pub event_type_name: std::option::Option<std::string::String>,
}
impl GetEventInput {
    /// <p>The ID of the event to retrieve.</p>
    pub fn event_id(&self) -> std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The event type of the event to retrieve.</p>
    pub fn event_type_name(&self) -> std::option::Option<&str> {
        self.event_type_name.as_deref()
    }
}
impl GetEventInput {
    /// Creates a new builder-style object to manufacture [`GetEventInput`](crate::operation::get_event::GetEventInput).
    pub fn builder() -> crate::operation::get_event::builders::GetEventInputBuilder {
        crate::operation::get_event::builders::GetEventInputBuilder::default()
    }
}

/// A builder for [`GetEventInput`](crate::operation::get_event::GetEventInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEventInputBuilder {
    pub(crate) event_id: std::option::Option<std::string::String>,
    pub(crate) event_type_name: std::option::Option<std::string::String>,
}
impl GetEventInputBuilder {
    /// <p>The ID of the event to retrieve.</p>
    pub fn event_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_id = Some(input.into());
        self
    }
    /// <p>The ID of the event to retrieve.</p>
    pub fn set_event_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The event type of the event to retrieve.</p>
    pub fn event_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_type_name = Some(input.into());
        self
    }
    /// <p>The event type of the event to retrieve.</p>
    pub fn set_event_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_type_name = input;
        self
    }
    /// Consumes the builder and constructs a [`GetEventInput`](crate::operation::get_event::GetEventInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_event::GetEventInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_event::GetEventInput {
            event_id: self.event_id,
            event_type_name: self.event_type_name,
        })
    }
}
