// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDetectorOutput {
    /// <p>The detector ID.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The status and description for each detector version.</p>
    #[doc(hidden)]
    pub detector_version_summaries:
        std::option::Option<std::vec::Vec<crate::types::DetectorVersionSummary>>,
    /// <p>The next token to be used for subsequent requests.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The detector ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDetectorOutput {
    /// <p>The detector ID.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The status and description for each detector version.</p>
    pub fn detector_version_summaries(
        &self,
    ) -> std::option::Option<&[crate::types::DetectorVersionSummary]> {
        self.detector_version_summaries.as_deref()
    }
    /// <p>The next token to be used for subsequent requests.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The detector ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeDetectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDetectorOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDetectorOutput`](crate::operation::describe_detector::DescribeDetectorOutput).
    pub fn builder() -> crate::operation::describe_detector::builders::DescribeDetectorOutputBuilder
    {
        crate::operation::describe_detector::builders::DescribeDetectorOutputBuilder::default()
    }
}

/// A builder for [`DescribeDetectorOutput`](crate::operation::describe_detector::DescribeDetectorOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDetectorOutputBuilder {
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) detector_version_summaries:
        std::option::Option<std::vec::Vec<crate::types::DetectorVersionSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDetectorOutputBuilder {
    /// <p>The detector ID.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p>The detector ID.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// Appends an item to `detector_version_summaries`.
    ///
    /// To override the contents of this collection use [`set_detector_version_summaries`](Self::set_detector_version_summaries).
    ///
    /// <p>The status and description for each detector version.</p>
    pub fn detector_version_summaries(
        mut self,
        input: crate::types::DetectorVersionSummary,
    ) -> Self {
        let mut v = self.detector_version_summaries.unwrap_or_default();
        v.push(input);
        self.detector_version_summaries = Some(v);
        self
    }
    /// <p>The status and description for each detector version.</p>
    pub fn set_detector_version_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DetectorVersionSummary>>,
    ) -> Self {
        self.detector_version_summaries = input;
        self
    }
    /// <p>The next token to be used for subsequent requests.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The next token to be used for subsequent requests.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The detector ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The detector ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDetectorOutput`](crate::operation::describe_detector::DescribeDetectorOutput).
    pub fn build(self) -> crate::operation::describe_detector::DescribeDetectorOutput {
        crate::operation::describe_detector::DescribeDetectorOutput {
            detector_id: self.detector_id,
            detector_version_summaries: self.detector_version_summaries,
            next_token: self.next_token,
            arn: self.arn,
            _request_id: self._request_id,
        }
    }
}
