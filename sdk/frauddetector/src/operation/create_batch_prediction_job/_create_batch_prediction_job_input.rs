// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateBatchPredictionJobInput {
    /// <p>The ID of the batch prediction job.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 location of your training file.</p>
    pub input_path: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 location of your output file.</p>
    pub output_path: ::std::option::Option<::std::string::String>,
    /// <p>The name of the event type.</p>
    pub event_type_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the detector.</p>
    pub detector_name: ::std::option::Option<::std::string::String>,
    /// <p>The detector version.</p>
    pub detector_version: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the IAM role to use for this job request.</p>
    /// <p>The IAM Role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub iam_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>A collection of key and value pairs.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateBatchPredictionJobInput {
    /// <p>The ID of the batch prediction job.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The Amazon S3 location of your training file.</p>
    pub fn input_path(&self) -> ::std::option::Option<&str> {
        self.input_path.as_deref()
    }
    /// <p>The Amazon S3 location of your output file.</p>
    pub fn output_path(&self) -> ::std::option::Option<&str> {
        self.output_path.as_deref()
    }
    /// <p>The name of the event type.</p>
    pub fn event_type_name(&self) -> ::std::option::Option<&str> {
        self.event_type_name.as_deref()
    }
    /// <p>The name of the detector.</p>
    pub fn detector_name(&self) -> ::std::option::Option<&str> {
        self.detector_name.as_deref()
    }
    /// <p>The detector version.</p>
    pub fn detector_version(&self) -> ::std::option::Option<&str> {
        self.detector_version.as_deref()
    }
    /// <p>The ARN of the IAM role to use for this job request.</p>
    /// <p>The IAM Role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>A collection of key and value pairs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateBatchPredictionJobInput {
    /// Creates a new builder-style object to manufacture [`CreateBatchPredictionJobInput`](crate::operation::create_batch_prediction_job::CreateBatchPredictionJobInput).
    pub fn builder() -> crate::operation::create_batch_prediction_job::builders::CreateBatchPredictionJobInputBuilder {
        crate::operation::create_batch_prediction_job::builders::CreateBatchPredictionJobInputBuilder::default()
    }
}

/// A builder for [`CreateBatchPredictionJobInput`](crate::operation::create_batch_prediction_job::CreateBatchPredictionJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateBatchPredictionJobInputBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) input_path: ::std::option::Option<::std::string::String>,
    pub(crate) output_path: ::std::option::Option<::std::string::String>,
    pub(crate) event_type_name: ::std::option::Option<::std::string::String>,
    pub(crate) detector_name: ::std::option::Option<::std::string::String>,
    pub(crate) detector_version: ::std::option::Option<::std::string::String>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateBatchPredictionJobInputBuilder {
    /// <p>The ID of the batch prediction job.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the batch prediction job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The ID of the batch prediction job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The Amazon S3 location of your training file.</p>
    /// This field is required.
    pub fn input_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 location of your training file.</p>
    pub fn set_input_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_path = input;
        self
    }
    /// <p>The Amazon S3 location of your training file.</p>
    pub fn get_input_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_path
    }
    /// <p>The Amazon S3 location of your output file.</p>
    /// This field is required.
    pub fn output_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 location of your output file.</p>
    pub fn set_output_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_path = input;
        self
    }
    /// <p>The Amazon S3 location of your output file.</p>
    pub fn get_output_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_path
    }
    /// <p>The name of the event type.</p>
    /// This field is required.
    pub fn event_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the event type.</p>
    pub fn set_event_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_type_name = input;
        self
    }
    /// <p>The name of the event type.</p>
    pub fn get_event_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_type_name
    }
    /// <p>The name of the detector.</p>
    /// This field is required.
    pub fn detector_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the detector.</p>
    pub fn set_detector_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_name = input;
        self
    }
    /// <p>The name of the detector.</p>
    pub fn get_detector_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_name
    }
    /// <p>The detector version.</p>
    pub fn detector_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The detector version.</p>
    pub fn set_detector_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_version = input;
        self
    }
    /// <p>The detector version.</p>
    pub fn get_detector_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_version
    }
    /// <p>The ARN of the IAM role to use for this job request.</p>
    /// <p>The IAM Role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    /// This field is required.
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role to use for this job request.</p>
    /// <p>The IAM Role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role to use for this job request.</p>
    /// <p>The IAM Role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of key and value pairs.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A collection of key and value pairs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A collection of key and value pairs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateBatchPredictionJobInput`](crate::operation::create_batch_prediction_job::CreateBatchPredictionJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_batch_prediction_job::CreateBatchPredictionJobInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_batch_prediction_job::CreateBatchPredictionJobInput {
            job_id: self.job_id,
            input_path: self.input_path,
            output_path: self.output_path,
            event_type_name: self.event_type_name,
            detector_name: self.detector_name,
            detector_version: self.detector_version,
            iam_role_arn: self.iam_role_arn,
            tags: self.tags,
        })
    }
}
