// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDetectorVersionInput {
    /// <p>The parent detector ID for the detector version you want to update.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The detector version ID. </p>
    #[doc(hidden)]
    pub detector_version_id: std::option::Option<std::string::String>,
    /// <p>The Amazon SageMaker model endpoints to include in the detector version.</p>
    #[doc(hidden)]
    pub external_model_endpoints: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The rules to include in the detector version.</p>
    #[doc(hidden)]
    pub rules: std::option::Option<std::vec::Vec<crate::types::Rule>>,
    /// <p>The detector version description. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The model versions to include in the detector version.</p>
    #[doc(hidden)]
    pub model_versions: std::option::Option<std::vec::Vec<crate::types::ModelVersion>>,
    /// <p>The rule execution mode to add to the detector.</p>
    /// <p>If you specify <code>FIRST_MATCHED</code>, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
    /// <p>If you specifiy <code>ALL_MATCHED</code>, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    /// <p>The default behavior is <code>FIRST_MATCHED</code>.</p>
    #[doc(hidden)]
    pub rule_execution_mode: std::option::Option<crate::types::RuleExecutionMode>,
}
impl UpdateDetectorVersionInput {
    /// <p>The parent detector ID for the detector version you want to update.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The detector version ID. </p>
    pub fn detector_version_id(&self) -> std::option::Option<&str> {
        self.detector_version_id.as_deref()
    }
    /// <p>The Amazon SageMaker model endpoints to include in the detector version.</p>
    pub fn external_model_endpoints(&self) -> std::option::Option<&[std::string::String]> {
        self.external_model_endpoints.as_deref()
    }
    /// <p>The rules to include in the detector version.</p>
    pub fn rules(&self) -> std::option::Option<&[crate::types::Rule]> {
        self.rules.as_deref()
    }
    /// <p>The detector version description. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The model versions to include in the detector version.</p>
    pub fn model_versions(&self) -> std::option::Option<&[crate::types::ModelVersion]> {
        self.model_versions.as_deref()
    }
    /// <p>The rule execution mode to add to the detector.</p>
    /// <p>If you specify <code>FIRST_MATCHED</code>, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
    /// <p>If you specifiy <code>ALL_MATCHED</code>, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    /// <p>The default behavior is <code>FIRST_MATCHED</code>.</p>
    pub fn rule_execution_mode(&self) -> std::option::Option<&crate::types::RuleExecutionMode> {
        self.rule_execution_mode.as_ref()
    }
}
impl UpdateDetectorVersionInput {
    /// Creates a new builder-style object to manufacture [`UpdateDetectorVersionInput`](crate::operation::update_detector_version::UpdateDetectorVersionInput).
    pub fn builder(
    ) -> crate::operation::update_detector_version::builders::UpdateDetectorVersionInputBuilder
    {
        crate::operation::update_detector_version::builders::UpdateDetectorVersionInputBuilder::default()
    }
}

/// A builder for [`UpdateDetectorVersionInput`](crate::operation::update_detector_version::UpdateDetectorVersionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateDetectorVersionInputBuilder {
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) detector_version_id: std::option::Option<std::string::String>,
    pub(crate) external_model_endpoints: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) rules: std::option::Option<std::vec::Vec<crate::types::Rule>>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) model_versions: std::option::Option<std::vec::Vec<crate::types::ModelVersion>>,
    pub(crate) rule_execution_mode: std::option::Option<crate::types::RuleExecutionMode>,
}
impl UpdateDetectorVersionInputBuilder {
    /// <p>The parent detector ID for the detector version you want to update.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p>The parent detector ID for the detector version you want to update.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The detector version ID. </p>
    pub fn detector_version_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_version_id = Some(input.into());
        self
    }
    /// <p>The detector version ID. </p>
    pub fn set_detector_version_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.detector_version_id = input;
        self
    }
    /// Appends an item to `external_model_endpoints`.
    ///
    /// To override the contents of this collection use [`set_external_model_endpoints`](Self::set_external_model_endpoints).
    ///
    /// <p>The Amazon SageMaker model endpoints to include in the detector version.</p>
    pub fn external_model_endpoints(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.external_model_endpoints.unwrap_or_default();
        v.push(input.into());
        self.external_model_endpoints = Some(v);
        self
    }
    /// <p>The Amazon SageMaker model endpoints to include in the detector version.</p>
    pub fn set_external_model_endpoints(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.external_model_endpoints = input;
        self
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The rules to include in the detector version.</p>
    pub fn rules(mut self, input: crate::types::Rule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = Some(v);
        self
    }
    /// <p>The rules to include in the detector version.</p>
    pub fn set_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Rule>>,
    ) -> Self {
        self.rules = input;
        self
    }
    /// <p>The detector version description. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The detector version description. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `model_versions`.
    ///
    /// To override the contents of this collection use [`set_model_versions`](Self::set_model_versions).
    ///
    /// <p>The model versions to include in the detector version.</p>
    pub fn model_versions(mut self, input: crate::types::ModelVersion) -> Self {
        let mut v = self.model_versions.unwrap_or_default();
        v.push(input);
        self.model_versions = Some(v);
        self
    }
    /// <p>The model versions to include in the detector version.</p>
    pub fn set_model_versions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ModelVersion>>,
    ) -> Self {
        self.model_versions = input;
        self
    }
    /// <p>The rule execution mode to add to the detector.</p>
    /// <p>If you specify <code>FIRST_MATCHED</code>, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
    /// <p>If you specifiy <code>ALL_MATCHED</code>, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    /// <p>The default behavior is <code>FIRST_MATCHED</code>.</p>
    pub fn rule_execution_mode(mut self, input: crate::types::RuleExecutionMode) -> Self {
        self.rule_execution_mode = Some(input);
        self
    }
    /// <p>The rule execution mode to add to the detector.</p>
    /// <p>If you specify <code>FIRST_MATCHED</code>, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
    /// <p>If you specifiy <code>ALL_MATCHED</code>, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    /// <p>The default behavior is <code>FIRST_MATCHED</code>.</p>
    pub fn set_rule_execution_mode(
        mut self,
        input: std::option::Option<crate::types::RuleExecutionMode>,
    ) -> Self {
        self.rule_execution_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDetectorVersionInput`](crate::operation::update_detector_version::UpdateDetectorVersionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_detector_version::UpdateDetectorVersionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_detector_version::UpdateDetectorVersionInput {
                detector_id: self.detector_id,
                detector_version_id: self.detector_version_id,
                external_model_endpoints: self.external_model_endpoints,
                rules: self.rules,
                description: self.description,
                model_versions: self.model_versions,
                rule_execution_mode: self.rule_execution_mode,
            },
        )
    }
}
