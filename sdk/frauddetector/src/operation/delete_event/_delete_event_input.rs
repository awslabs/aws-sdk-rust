// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteEventInput {
    /// <p>The ID of the event to delete.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the event type.</p>
    pub event_type_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether or not to delete any predictions associated with the event. If set to <code>True</code>, </p>
    pub delete_audit_history: ::std::option::Option<bool>,
}
impl DeleteEventInput {
    /// <p>The ID of the event to delete.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The name of the event type.</p>
    pub fn event_type_name(&self) -> ::std::option::Option<&str> {
        self.event_type_name.as_deref()
    }
    /// <p>Specifies whether or not to delete any predictions associated with the event. If set to <code>True</code>, </p>
    pub fn delete_audit_history(&self) -> ::std::option::Option<bool> {
        self.delete_audit_history
    }
}
impl DeleteEventInput {
    /// Creates a new builder-style object to manufacture [`DeleteEventInput`](crate::operation::delete_event::DeleteEventInput).
    pub fn builder() -> crate::operation::delete_event::builders::DeleteEventInputBuilder {
        crate::operation::delete_event::builders::DeleteEventInputBuilder::default()
    }
}

/// A builder for [`DeleteEventInput`](crate::operation::delete_event::DeleteEventInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteEventInputBuilder {
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_type_name: ::std::option::Option<::std::string::String>,
    pub(crate) delete_audit_history: ::std::option::Option<bool>,
}
impl DeleteEventInputBuilder {
    /// <p>The ID of the event to delete.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the event to delete.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The ID of the event to delete.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The name of the event type.</p>
    /// This field is required.
    pub fn event_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the event type.</p>
    pub fn set_event_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_type_name = input;
        self
    }
    /// <p>The name of the event type.</p>
    pub fn get_event_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_type_name
    }
    /// <p>Specifies whether or not to delete any predictions associated with the event. If set to <code>True</code>, </p>
    pub fn delete_audit_history(mut self, input: bool) -> Self {
        self.delete_audit_history = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether or not to delete any predictions associated with the event. If set to <code>True</code>, </p>
    pub fn set_delete_audit_history(mut self, input: ::std::option::Option<bool>) -> Self {
        self.delete_audit_history = input;
        self
    }
    /// <p>Specifies whether or not to delete any predictions associated with the event. If set to <code>True</code>, </p>
    pub fn get_delete_audit_history(&self) -> &::std::option::Option<bool> {
        &self.delete_audit_history
    }
    /// Consumes the builder and constructs a [`DeleteEventInput`](crate::operation::delete_event::DeleteEventInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::delete_event::DeleteEventInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_event::DeleteEventInput {
            event_id: self.event_id,
            event_type_name: self.event_type_name,
            delete_audit_history: self.delete_audit_history,
        })
    }
}
