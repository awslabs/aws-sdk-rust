// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_event_type::_put_event_type_output::PutEventTypeOutputBuilder;

pub use crate::operation::put_event_type::_put_event_type_input::PutEventTypeInputBuilder;

impl crate::operation::put_event_type::builders::PutEventTypeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::put_event_type::PutEventTypeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_event_type::PutEventTypeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.put_event_type();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PutEventType`.
///
/// <p>Creates or updates an event type. An event is a business activity that is evaluated for fraud risk. With Amazon Fraud Detector, you generate fraud predictions for events. An event type defines the structure for an event sent to Amazon Fraud Detector. This includes the variables sent as part of the event, the entity performing the event (such as a customer), and the labels that classify the event. Example event types include online payment transactions, account registrations, and authentications.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutEventTypeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_event_type::builders::PutEventTypeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::put_event_type::PutEventTypeOutput,
        crate::operation::put_event_type::PutEventTypeError,
    > for PutEventTypeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::put_event_type::PutEventTypeOutput,
            crate::operation::put_event_type::PutEventTypeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PutEventTypeFluentBuilder {
    /// Creates a new `PutEventType`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutEventType as a reference.
    pub fn as_input(&self) -> &crate::operation::put_event_type::builders::PutEventTypeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_event_type::PutEventTypeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_event_type::PutEventTypeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::put_event_type::PutEventType::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::put_event_type::PutEventType::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::put_event_type::PutEventTypeOutput,
        crate::operation::put_event_type::PutEventTypeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The description of the event type.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the event type.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description of the event type.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Appends an item to `eventVariables`.
    ///
    /// To override the contents of this collection use [`set_event_variables`](Self::set_event_variables).
    ///
    /// <p>The event type variables.</p>
    pub fn event_variables(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.event_variables(input.into());
        self
    }
    /// <p>The event type variables.</p>
    pub fn set_event_variables(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_event_variables(input);
        self
    }
    /// <p>The event type variables.</p>
    pub fn get_event_variables(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_event_variables()
    }
    ///
    /// Appends an item to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>The event type labels.</p>
    pub fn labels(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.labels(input.into());
        self
    }
    /// <p>The event type labels.</p>
    pub fn set_labels(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_labels(input);
        self
    }
    /// <p>The event type labels.</p>
    pub fn get_labels(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_labels()
    }
    ///
    /// Appends an item to `entityTypes`.
    ///
    /// To override the contents of this collection use [`set_entity_types`](Self::set_entity_types).
    ///
    /// <p>The entity type for the event type. Example entity types: customer, merchant, account.</p>
    pub fn entity_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.entity_types(input.into());
        self
    }
    /// <p>The entity type for the event type. Example entity types: customer, merchant, account.</p>
    pub fn set_entity_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_entity_types(input);
        self
    }
    /// <p>The entity type for the event type. Example entity types: customer, merchant, account.</p>
    pub fn get_entity_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_entity_types()
    }
    /// <p>Specifies if ingestion is enabled or disabled.</p>
    pub fn event_ingestion(mut self, input: crate::types::EventIngestion) -> Self {
        self.inner = self.inner.event_ingestion(input);
        self
    }
    /// <p>Specifies if ingestion is enabled or disabled.</p>
    pub fn set_event_ingestion(mut self, input: ::std::option::Option<crate::types::EventIngestion>) -> Self {
        self.inner = self.inner.set_event_ingestion(input);
        self
    }
    /// <p>Specifies if ingestion is enabled or disabled.</p>
    pub fn get_event_ingestion(&self) -> &::std::option::Option<crate::types::EventIngestion> {
        self.inner.get_event_ingestion()
    }
    ///
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of key and value pairs.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A collection of key and value pairs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A collection of key and value pairs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>Enables or disables event orchestration. If enabled, you can send event predictions to select AWS services for downstream processing of the events.</p>
    pub fn event_orchestration(mut self, input: crate::types::EventOrchestration) -> Self {
        self.inner = self.inner.event_orchestration(input);
        self
    }
    /// <p>Enables or disables event orchestration. If enabled, you can send event predictions to select AWS services for downstream processing of the events.</p>
    pub fn set_event_orchestration(mut self, input: ::std::option::Option<crate::types::EventOrchestration>) -> Self {
        self.inner = self.inner.set_event_orchestration(input);
        self
    }
    /// <p>Enables or disables event orchestration. If enabled, you can send event predictions to select AWS services for downstream processing of the events.</p>
    pub fn get_event_orchestration(&self) -> &::std::option::Option<crate::types::EventOrchestration> {
        self.inner.get_event_orchestration()
    }
}
