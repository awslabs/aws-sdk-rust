// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutEventTypeInput {
    /// <p>The name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the event type.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The event type variables.</p>
    #[doc(hidden)]
    pub event_variables: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The event type labels.</p>
    #[doc(hidden)]
    pub labels: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The entity type for the event type. Example entity types: customer, merchant, account.</p>
    #[doc(hidden)]
    pub entity_types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies if ingenstion is enabled or disabled.</p>
    #[doc(hidden)]
    pub event_ingestion: std::option::Option<crate::types::EventIngestion>,
    /// <p>A collection of key and value pairs.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl PutEventTypeInput {
    /// <p>The name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the event type.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The event type variables.</p>
    pub fn event_variables(&self) -> std::option::Option<&[std::string::String]> {
        self.event_variables.as_deref()
    }
    /// <p>The event type labels.</p>
    pub fn labels(&self) -> std::option::Option<&[std::string::String]> {
        self.labels.as_deref()
    }
    /// <p>The entity type for the event type. Example entity types: customer, merchant, account.</p>
    pub fn entity_types(&self) -> std::option::Option<&[std::string::String]> {
        self.entity_types.as_deref()
    }
    /// <p>Specifies if ingenstion is enabled or disabled.</p>
    pub fn event_ingestion(&self) -> std::option::Option<&crate::types::EventIngestion> {
        self.event_ingestion.as_ref()
    }
    /// <p>A collection of key and value pairs.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl PutEventTypeInput {
    /// Creates a new builder-style object to manufacture [`PutEventTypeInput`](crate::operation::put_event_type::PutEventTypeInput).
    pub fn builder() -> crate::operation::put_event_type::builders::PutEventTypeInputBuilder {
        crate::operation::put_event_type::builders::PutEventTypeInputBuilder::default()
    }
}

/// A builder for [`PutEventTypeInput`](crate::operation::put_event_type::PutEventTypeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutEventTypeInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) event_variables: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) labels: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) entity_types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) event_ingestion: std::option::Option<crate::types::EventIngestion>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl PutEventTypeInputBuilder {
    /// <p>The name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the event type.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the event type.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `event_variables`.
    ///
    /// To override the contents of this collection use [`set_event_variables`](Self::set_event_variables).
    ///
    /// <p>The event type variables.</p>
    pub fn event_variables(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.event_variables.unwrap_or_default();
        v.push(input.into());
        self.event_variables = Some(v);
        self
    }
    /// <p>The event type variables.</p>
    pub fn set_event_variables(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.event_variables = input;
        self
    }
    /// Appends an item to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>The event type labels.</p>
    pub fn labels(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.labels.unwrap_or_default();
        v.push(input.into());
        self.labels = Some(v);
        self
    }
    /// <p>The event type labels.</p>
    pub fn set_labels(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.labels = input;
        self
    }
    /// Appends an item to `entity_types`.
    ///
    /// To override the contents of this collection use [`set_entity_types`](Self::set_entity_types).
    ///
    /// <p>The entity type for the event type. Example entity types: customer, merchant, account.</p>
    pub fn entity_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.entity_types.unwrap_or_default();
        v.push(input.into());
        self.entity_types = Some(v);
        self
    }
    /// <p>The entity type for the event type. Example entity types: customer, merchant, account.</p>
    pub fn set_entity_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.entity_types = input;
        self
    }
    /// <p>Specifies if ingenstion is enabled or disabled.</p>
    pub fn event_ingestion(mut self, input: crate::types::EventIngestion) -> Self {
        self.event_ingestion = Some(input);
        self
    }
    /// <p>Specifies if ingenstion is enabled or disabled.</p>
    pub fn set_event_ingestion(
        mut self,
        input: std::option::Option<crate::types::EventIngestion>,
    ) -> Self {
        self.event_ingestion = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of key and value pairs.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A collection of key and value pairs.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`PutEventTypeInput`](crate::operation::put_event_type::PutEventTypeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_event_type::PutEventTypeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::put_event_type::PutEventTypeInput {
            name: self.name,
            description: self.description,
            event_variables: self.event_variables,
            labels: self.labels,
            entity_types: self.entity_types,
            event_ingestion: self.event_ingestion,
            tags: self.tags,
        })
    }
}
