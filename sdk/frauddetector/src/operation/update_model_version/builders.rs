// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_model_version::_update_model_version_output::UpdateModelVersionOutputBuilder;

pub use crate::operation::update_model_version::_update_model_version_input::UpdateModelVersionInputBuilder;

/// Fluent builder constructing a request to `UpdateModelVersion`.
///
/// <p>Updates a model version. Updating a model version retrains an existing model version using updated training data and produces a new minor version of the model. You can update the training data set location and data access role attributes using this action. This action creates and trains a new minor version of the model, for example version 1.01, 1.02, 1.03.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateModelVersionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_model_version::builders::UpdateModelVersionInputBuilder,
}
impl UpdateModelVersionFluentBuilder {
    /// Creates a new `UpdateModelVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_model_version::UpdateModelVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_model_version::UpdateModelVersionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_model_version::UpdateModelVersionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_model_version::UpdateModelVersionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The model ID.</p>
    pub fn model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.model_id(input.into());
        self
    }
    /// <p>The model ID.</p>
    pub fn set_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_model_id(input);
        self
    }
    /// <p>The model type.</p>
    pub fn model_type(mut self, input: crate::types::ModelTypeEnum) -> Self {
        self.inner = self.inner.model_type(input);
        self
    }
    /// <p>The model type.</p>
    pub fn set_model_type(
        mut self,
        input: std::option::Option<crate::types::ModelTypeEnum>,
    ) -> Self {
        self.inner = self.inner.set_model_type(input);
        self
    }
    /// <p>The major version number.</p>
    pub fn major_version_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.major_version_number(input.into());
        self
    }
    /// <p>The major version number.</p>
    pub fn set_major_version_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_major_version_number(input);
        self
    }
    /// <p>The details of the external events data used for training the model version. Required if <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code>.</p>
    pub fn external_events_detail(mut self, input: crate::types::ExternalEventsDetail) -> Self {
        self.inner = self.inner.external_events_detail(input);
        self
    }
    /// <p>The details of the external events data used for training the model version. Required if <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code>.</p>
    pub fn set_external_events_detail(
        mut self,
        input: std::option::Option<crate::types::ExternalEventsDetail>,
    ) -> Self {
        self.inner = self.inner.set_external_events_detail(input);
        self
    }
    /// <p>The details of the ingested event used for training the model version. Required if your <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    pub fn ingested_events_detail(mut self, input: crate::types::IngestedEventsDetail) -> Self {
        self.inner = self.inner.ingested_events_detail(input);
        self
    }
    /// <p>The details of the ingested event used for training the model version. Required if your <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    pub fn set_ingested_events_detail(
        mut self,
        input: std::option::Option<crate::types::IngestedEventsDetail>,
    ) -> Self {
        self.inner = self.inner.set_ingested_events_detail(input);
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of key and value pairs.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A collection of key and value pairs.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
