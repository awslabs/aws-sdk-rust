// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateModelVersionOutput {
    /// <p>The model ID.</p>
    #[doc(hidden)]
    pub model_id: std::option::Option<std::string::String>,
    /// <p>The model type.</p>
    #[doc(hidden)]
    pub model_type: std::option::Option<crate::types::ModelTypeEnum>,
    /// <p>The model version number of the model version updated.</p>
    #[doc(hidden)]
    pub model_version_number: std::option::Option<std::string::String>,
    /// <p>The status of the updated model version.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateModelVersionOutput {
    /// <p>The model ID.</p>
    pub fn model_id(&self) -> std::option::Option<&str> {
        self.model_id.as_deref()
    }
    /// <p>The model type.</p>
    pub fn model_type(&self) -> std::option::Option<&crate::types::ModelTypeEnum> {
        self.model_type.as_ref()
    }
    /// <p>The model version number of the model version updated.</p>
    pub fn model_version_number(&self) -> std::option::Option<&str> {
        self.model_version_number.as_deref()
    }
    /// <p>The status of the updated model version.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateModelVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateModelVersionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateModelVersionOutput`](crate::operation::update_model_version::UpdateModelVersionOutput).
    pub fn builder(
    ) -> crate::operation::update_model_version::builders::UpdateModelVersionOutputBuilder {
        crate::operation::update_model_version::builders::UpdateModelVersionOutputBuilder::default()
    }
}

/// A builder for [`UpdateModelVersionOutput`](crate::operation::update_model_version::UpdateModelVersionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateModelVersionOutputBuilder {
    pub(crate) model_id: std::option::Option<std::string::String>,
    pub(crate) model_type: std::option::Option<crate::types::ModelTypeEnum>,
    pub(crate) model_version_number: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateModelVersionOutputBuilder {
    /// <p>The model ID.</p>
    pub fn model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_id = Some(input.into());
        self
    }
    /// <p>The model ID.</p>
    pub fn set_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_id = input;
        self
    }
    /// <p>The model type.</p>
    pub fn model_type(mut self, input: crate::types::ModelTypeEnum) -> Self {
        self.model_type = Some(input);
        self
    }
    /// <p>The model type.</p>
    pub fn set_model_type(
        mut self,
        input: std::option::Option<crate::types::ModelTypeEnum>,
    ) -> Self {
        self.model_type = input;
        self
    }
    /// <p>The model version number of the model version updated.</p>
    pub fn model_version_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_version_number = Some(input.into());
        self
    }
    /// <p>The model version number of the model version updated.</p>
    pub fn set_model_version_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_version_number = input;
        self
    }
    /// <p>The status of the updated model version.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the updated model version.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateModelVersionOutput`](crate::operation::update_model_version::UpdateModelVersionOutput).
    pub fn build(self) -> crate::operation::update_model_version::UpdateModelVersionOutput {
        crate::operation::update_model_version::UpdateModelVersionOutput {
            model_id: self.model_id,
            model_type: self.model_type,
            model_version_number: self.model_version_number,
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
