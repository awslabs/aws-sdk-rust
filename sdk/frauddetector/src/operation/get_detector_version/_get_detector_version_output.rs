// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDetectorVersionOutput {
    /// <p>The detector ID.</p>
    pub detector_id: ::std::option::Option<::std::string::String>,
    /// <p>The detector version ID.</p>
    pub detector_version_id: ::std::option::Option<::std::string::String>,
    /// <p>The detector version description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon SageMaker model endpoints included in the detector version.</p>
    pub external_model_endpoints: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The model versions included in the detector version. </p>
    pub model_versions: ::std::option::Option<::std::vec::Vec<crate::types::ModelVersion>>,
    /// <p>The rules included in the detector version.</p>
    pub rules: ::std::option::Option<::std::vec::Vec<crate::types::Rule>>,
    /// <p>The status of the detector version.</p>
    pub status: ::std::option::Option<crate::types::DetectorVersionStatus>,
    /// <p>The timestamp when the detector version was last updated. </p>
    pub last_updated_time: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the detector version was created. </p>
    pub created_time: ::std::option::Option<::std::string::String>,
    /// <p>The execution mode of the rule in the dectector</p>
    /// <p> <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
    /// <p> <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    pub rule_execution_mode: ::std::option::Option<crate::types::RuleExecutionMode>,
    /// <p>The detector version ARN.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetDetectorVersionOutput {
    /// <p>The detector ID.</p>
    pub fn detector_id(&self) -> ::std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The detector version ID.</p>
    pub fn detector_version_id(&self) -> ::std::option::Option<&str> {
        self.detector_version_id.as_deref()
    }
    /// <p>The detector version description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon SageMaker model endpoints included in the detector version.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.external_model_endpoints.is_none()`.
    pub fn external_model_endpoints(&self) -> &[::std::string::String] {
        self.external_model_endpoints.as_deref().unwrap_or_default()
    }
    /// <p>The model versions included in the detector version. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.model_versions.is_none()`.
    pub fn model_versions(&self) -> &[crate::types::ModelVersion] {
        self.model_versions.as_deref().unwrap_or_default()
    }
    /// <p>The rules included in the detector version.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rules.is_none()`.
    pub fn rules(&self) -> &[crate::types::Rule] {
        self.rules.as_deref().unwrap_or_default()
    }
    /// <p>The status of the detector version.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DetectorVersionStatus> {
        self.status.as_ref()
    }
    /// <p>The timestamp when the detector version was last updated. </p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&str> {
        self.last_updated_time.as_deref()
    }
    /// <p>The timestamp when the detector version was created. </p>
    pub fn created_time(&self) -> ::std::option::Option<&str> {
        self.created_time.as_deref()
    }
    /// <p>The execution mode of the rule in the dectector</p>
    /// <p> <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
    /// <p> <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    pub fn rule_execution_mode(&self) -> ::std::option::Option<&crate::types::RuleExecutionMode> {
        self.rule_execution_mode.as_ref()
    }
    /// <p>The detector version ARN.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetDetectorVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDetectorVersionOutput {
    /// Creates a new builder-style object to manufacture [`GetDetectorVersionOutput`](crate::operation::get_detector_version::GetDetectorVersionOutput).
    pub fn builder() -> crate::operation::get_detector_version::builders::GetDetectorVersionOutputBuilder {
        crate::operation::get_detector_version::builders::GetDetectorVersionOutputBuilder::default()
    }
}

/// A builder for [`GetDetectorVersionOutput`](crate::operation::get_detector_version::GetDetectorVersionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDetectorVersionOutputBuilder {
    pub(crate) detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) detector_version_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) external_model_endpoints: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) model_versions: ::std::option::Option<::std::vec::Vec<crate::types::ModelVersion>>,
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<crate::types::Rule>>,
    pub(crate) status: ::std::option::Option<crate::types::DetectorVersionStatus>,
    pub(crate) last_updated_time: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::std::string::String>,
    pub(crate) rule_execution_mode: ::std::option::Option<crate::types::RuleExecutionMode>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetDetectorVersionOutputBuilder {
    /// <p>The detector ID.</p>
    pub fn detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The detector ID.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The detector ID.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_id
    }
    /// <p>The detector version ID.</p>
    pub fn detector_version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The detector version ID.</p>
    pub fn set_detector_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_version_id = input;
        self
    }
    /// <p>The detector version ID.</p>
    pub fn get_detector_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_version_id
    }
    /// <p>The detector version description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The detector version description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The detector version description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `external_model_endpoints`.
    ///
    /// To override the contents of this collection use [`set_external_model_endpoints`](Self::set_external_model_endpoints).
    ///
    /// <p>The Amazon SageMaker model endpoints included in the detector version.</p>
    pub fn external_model_endpoints(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.external_model_endpoints.unwrap_or_default();
        v.push(input.into());
        self.external_model_endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon SageMaker model endpoints included in the detector version.</p>
    pub fn set_external_model_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.external_model_endpoints = input;
        self
    }
    /// <p>The Amazon SageMaker model endpoints included in the detector version.</p>
    pub fn get_external_model_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.external_model_endpoints
    }
    /// Appends an item to `model_versions`.
    ///
    /// To override the contents of this collection use [`set_model_versions`](Self::set_model_versions).
    ///
    /// <p>The model versions included in the detector version. </p>
    pub fn model_versions(mut self, input: crate::types::ModelVersion) -> Self {
        let mut v = self.model_versions.unwrap_or_default();
        v.push(input);
        self.model_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The model versions included in the detector version. </p>
    pub fn set_model_versions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ModelVersion>>) -> Self {
        self.model_versions = input;
        self
    }
    /// <p>The model versions included in the detector version. </p>
    pub fn get_model_versions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ModelVersion>> {
        &self.model_versions
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The rules included in the detector version.</p>
    pub fn rules(mut self, input: crate::types::Rule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The rules included in the detector version.</p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Rule>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>The rules included in the detector version.</p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Rule>> {
        &self.rules
    }
    /// <p>The status of the detector version.</p>
    pub fn status(mut self, input: crate::types::DetectorVersionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the detector version.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DetectorVersionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the detector version.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DetectorVersionStatus> {
        &self.status
    }
    /// <p>The timestamp when the detector version was last updated. </p>
    pub fn last_updated_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp when the detector version was last updated. </p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The timestamp when the detector version was last updated. </p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_time
    }
    /// <p>The timestamp when the detector version was created. </p>
    pub fn created_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp when the detector version was created. </p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp when the detector version was created. </p>
    pub fn get_created_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_time
    }
    /// <p>The execution mode of the rule in the dectector</p>
    /// <p> <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
    /// <p> <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    pub fn rule_execution_mode(mut self, input: crate::types::RuleExecutionMode) -> Self {
        self.rule_execution_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The execution mode of the rule in the dectector</p>
    /// <p> <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
    /// <p> <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    pub fn set_rule_execution_mode(mut self, input: ::std::option::Option<crate::types::RuleExecutionMode>) -> Self {
        self.rule_execution_mode = input;
        self
    }
    /// <p>The execution mode of the rule in the dectector</p>
    /// <p> <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
    /// <p> <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    pub fn get_rule_execution_mode(&self) -> &::std::option::Option<crate::types::RuleExecutionMode> {
        &self.rule_execution_mode
    }
    /// <p>The detector version ARN.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The detector version ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The detector version ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDetectorVersionOutput`](crate::operation::get_detector_version::GetDetectorVersionOutput).
    pub fn build(self) -> crate::operation::get_detector_version::GetDetectorVersionOutput {
        crate::operation::get_detector_version::GetDetectorVersionOutput {
            detector_id: self.detector_id,
            detector_version_id: self.detector_version_id,
            description: self.description,
            external_model_endpoints: self.external_model_endpoints,
            model_versions: self.model_versions,
            rules: self.rules,
            status: self.status,
            last_updated_time: self.last_updated_time,
            created_time: self.created_time,
            rule_execution_mode: self.rule_execution_mode,
            arn: self.arn,
            _request_id: self._request_id,
        }
    }
}
