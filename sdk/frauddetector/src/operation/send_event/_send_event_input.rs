// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendEventInput {
    /// <p>The event ID to upload.</p>
    #[doc(hidden)]
    pub event_id: std::option::Option<std::string::String>,
    /// <p>The event type name of the event.</p>
    #[doc(hidden)]
    pub event_type_name: std::option::Option<std::string::String>,
    /// <p>The timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
    #[doc(hidden)]
    pub event_timestamp: std::option::Option<std::string::String>,
    /// <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p>
    #[doc(hidden)]
    pub event_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The label to associate with the event. Required if specifying <code>labelTimestamp</code>.</p>
    #[doc(hidden)]
    pub assigned_label: std::option::Option<std::string::String>,
    /// <p>The timestamp associated with the label. Required if specifying <code>assignedLabel</code>.</p>
    #[doc(hidden)]
    pub label_timestamp: std::option::Option<std::string::String>,
    /// <p>An array of entities.</p>
    #[doc(hidden)]
    pub entities: std::option::Option<std::vec::Vec<crate::types::Entity>>,
}
impl SendEventInput {
    /// <p>The event ID to upload.</p>
    pub fn event_id(&self) -> std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The event type name of the event.</p>
    pub fn event_type_name(&self) -> std::option::Option<&str> {
        self.event_type_name.as_deref()
    }
    /// <p>The timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
    pub fn event_timestamp(&self) -> std::option::Option<&str> {
        self.event_timestamp.as_deref()
    }
    /// <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p>
    pub fn event_variables(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.event_variables.as_ref()
    }
    /// <p>The label to associate with the event. Required if specifying <code>labelTimestamp</code>.</p>
    pub fn assigned_label(&self) -> std::option::Option<&str> {
        self.assigned_label.as_deref()
    }
    /// <p>The timestamp associated with the label. Required if specifying <code>assignedLabel</code>.</p>
    pub fn label_timestamp(&self) -> std::option::Option<&str> {
        self.label_timestamp.as_deref()
    }
    /// <p>An array of entities.</p>
    pub fn entities(&self) -> std::option::Option<&[crate::types::Entity]> {
        self.entities.as_deref()
    }
}
impl SendEventInput {
    /// Creates a new builder-style object to manufacture [`SendEventInput`](crate::operation::send_event::SendEventInput).
    pub fn builder() -> crate::operation::send_event::builders::SendEventInputBuilder {
        crate::operation::send_event::builders::SendEventInputBuilder::default()
    }
}

/// A builder for [`SendEventInput`](crate::operation::send_event::SendEventInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendEventInputBuilder {
    pub(crate) event_id: std::option::Option<std::string::String>,
    pub(crate) event_type_name: std::option::Option<std::string::String>,
    pub(crate) event_timestamp: std::option::Option<std::string::String>,
    pub(crate) event_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) assigned_label: std::option::Option<std::string::String>,
    pub(crate) label_timestamp: std::option::Option<std::string::String>,
    pub(crate) entities: std::option::Option<std::vec::Vec<crate::types::Entity>>,
}
impl SendEventInputBuilder {
    /// <p>The event ID to upload.</p>
    pub fn event_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_id = Some(input.into());
        self
    }
    /// <p>The event ID to upload.</p>
    pub fn set_event_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The event type name of the event.</p>
    pub fn event_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_type_name = Some(input.into());
        self
    }
    /// <p>The event type name of the event.</p>
    pub fn set_event_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_type_name = input;
        self
    }
    /// <p>The timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
    pub fn event_timestamp(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_timestamp = Some(input.into());
        self
    }
    /// <p>The timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
    pub fn set_event_timestamp(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_timestamp = input;
        self
    }
    /// Adds a key-value pair to `event_variables`.
    ///
    /// To override the contents of this collection use [`set_event_variables`](Self::set_event_variables).
    ///
    /// <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p>
    pub fn event_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.event_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.event_variables = Some(hash_map);
        self
    }
    /// <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p>
    pub fn set_event_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.event_variables = input;
        self
    }
    /// <p>The label to associate with the event. Required if specifying <code>labelTimestamp</code>.</p>
    pub fn assigned_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.assigned_label = Some(input.into());
        self
    }
    /// <p>The label to associate with the event. Required if specifying <code>labelTimestamp</code>.</p>
    pub fn set_assigned_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.assigned_label = input;
        self
    }
    /// <p>The timestamp associated with the label. Required if specifying <code>assignedLabel</code>.</p>
    pub fn label_timestamp(mut self, input: impl Into<std::string::String>) -> Self {
        self.label_timestamp = Some(input.into());
        self
    }
    /// <p>The timestamp associated with the label. Required if specifying <code>assignedLabel</code>.</p>
    pub fn set_label_timestamp(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.label_timestamp = input;
        self
    }
    /// Appends an item to `entities`.
    ///
    /// To override the contents of this collection use [`set_entities`](Self::set_entities).
    ///
    /// <p>An array of entities.</p>
    pub fn entities(mut self, input: crate::types::Entity) -> Self {
        let mut v = self.entities.unwrap_or_default();
        v.push(input);
        self.entities = Some(v);
        self
    }
    /// <p>An array of entities.</p>
    pub fn set_entities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Entity>>,
    ) -> Self {
        self.entities = input;
        self
    }
    /// Consumes the builder and constructs a [`SendEventInput`](crate::operation::send_event::SendEventInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::send_event::SendEventInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::send_event::SendEventInput {
            event_id: self.event_id,
            event_type_name: self.event_type_name,
            event_timestamp: self.event_timestamp,
            event_variables: self.event_variables,
            assigned_label: self.assigned_label,
            label_timestamp: self.label_timestamp,
            entities: self.entities,
        })
    }
}
