// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetModelVersionOutput {
    /// <p>The model ID.</p>
    #[doc(hidden)]
    pub model_id: std::option::Option<std::string::String>,
    /// <p>The model type.</p>
    #[doc(hidden)]
    pub model_type: std::option::Option<crate::types::ModelTypeEnum>,
    /// <p>The model version number.</p>
    #[doc(hidden)]
    pub model_version_number: std::option::Option<std::string::String>,
    /// <p>The training data source.</p>
    #[doc(hidden)]
    pub training_data_source: std::option::Option<crate::types::TrainingDataSourceEnum>,
    /// <p>The training data schema.</p>
    #[doc(hidden)]
    pub training_data_schema: std::option::Option<crate::types::TrainingDataSchema>,
    /// <p>The details of the external events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code> </p>
    #[doc(hidden)]
    pub external_events_detail: std::option::Option<crate::types::ExternalEventsDetail>,
    /// <p>The details of the ingested events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    #[doc(hidden)]
    pub ingested_events_detail: std::option::Option<crate::types::IngestedEventsDetail>,
    /// <p>The model version status.</p>
    /// <p>Possible values are:</p>
    /// <ul>
    /// <li> <p> <code>TRAINING_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>TRAINING_COMPLETE</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>INACTIVE</code> </p> </li>
    /// <li> <p> <code>ERROR</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The model version ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetModelVersionOutput {
    /// <p>The model ID.</p>
    pub fn model_id(&self) -> std::option::Option<&str> {
        self.model_id.as_deref()
    }
    /// <p>The model type.</p>
    pub fn model_type(&self) -> std::option::Option<&crate::types::ModelTypeEnum> {
        self.model_type.as_ref()
    }
    /// <p>The model version number.</p>
    pub fn model_version_number(&self) -> std::option::Option<&str> {
        self.model_version_number.as_deref()
    }
    /// <p>The training data source.</p>
    pub fn training_data_source(
        &self,
    ) -> std::option::Option<&crate::types::TrainingDataSourceEnum> {
        self.training_data_source.as_ref()
    }
    /// <p>The training data schema.</p>
    pub fn training_data_schema(&self) -> std::option::Option<&crate::types::TrainingDataSchema> {
        self.training_data_schema.as_ref()
    }
    /// <p>The details of the external events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code> </p>
    pub fn external_events_detail(
        &self,
    ) -> std::option::Option<&crate::types::ExternalEventsDetail> {
        self.external_events_detail.as_ref()
    }
    /// <p>The details of the ingested events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    pub fn ingested_events_detail(
        &self,
    ) -> std::option::Option<&crate::types::IngestedEventsDetail> {
        self.ingested_events_detail.as_ref()
    }
    /// <p>The model version status.</p>
    /// <p>Possible values are:</p>
    /// <ul>
    /// <li> <p> <code>TRAINING_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>TRAINING_COMPLETE</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>INACTIVE</code> </p> </li>
    /// <li> <p> <code>ERROR</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The model version ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetModelVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetModelVersionOutput {
    /// Creates a new builder-style object to manufacture [`GetModelVersionOutput`](crate::operation::get_model_version::GetModelVersionOutput).
    pub fn builder() -> crate::operation::get_model_version::builders::GetModelVersionOutputBuilder
    {
        crate::operation::get_model_version::builders::GetModelVersionOutputBuilder::default()
    }
}

/// A builder for [`GetModelVersionOutput`](crate::operation::get_model_version::GetModelVersionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetModelVersionOutputBuilder {
    pub(crate) model_id: std::option::Option<std::string::String>,
    pub(crate) model_type: std::option::Option<crate::types::ModelTypeEnum>,
    pub(crate) model_version_number: std::option::Option<std::string::String>,
    pub(crate) training_data_source: std::option::Option<crate::types::TrainingDataSourceEnum>,
    pub(crate) training_data_schema: std::option::Option<crate::types::TrainingDataSchema>,
    pub(crate) external_events_detail: std::option::Option<crate::types::ExternalEventsDetail>,
    pub(crate) ingested_events_detail: std::option::Option<crate::types::IngestedEventsDetail>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetModelVersionOutputBuilder {
    /// <p>The model ID.</p>
    pub fn model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_id = Some(input.into());
        self
    }
    /// <p>The model ID.</p>
    pub fn set_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_id = input;
        self
    }
    /// <p>The model type.</p>
    pub fn model_type(mut self, input: crate::types::ModelTypeEnum) -> Self {
        self.model_type = Some(input);
        self
    }
    /// <p>The model type.</p>
    pub fn set_model_type(
        mut self,
        input: std::option::Option<crate::types::ModelTypeEnum>,
    ) -> Self {
        self.model_type = input;
        self
    }
    /// <p>The model version number.</p>
    pub fn model_version_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_version_number = Some(input.into());
        self
    }
    /// <p>The model version number.</p>
    pub fn set_model_version_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.model_version_number = input;
        self
    }
    /// <p>The training data source.</p>
    pub fn training_data_source(mut self, input: crate::types::TrainingDataSourceEnum) -> Self {
        self.training_data_source = Some(input);
        self
    }
    /// <p>The training data source.</p>
    pub fn set_training_data_source(
        mut self,
        input: std::option::Option<crate::types::TrainingDataSourceEnum>,
    ) -> Self {
        self.training_data_source = input;
        self
    }
    /// <p>The training data schema.</p>
    pub fn training_data_schema(mut self, input: crate::types::TrainingDataSchema) -> Self {
        self.training_data_schema = Some(input);
        self
    }
    /// <p>The training data schema.</p>
    pub fn set_training_data_schema(
        mut self,
        input: std::option::Option<crate::types::TrainingDataSchema>,
    ) -> Self {
        self.training_data_schema = input;
        self
    }
    /// <p>The details of the external events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code> </p>
    pub fn external_events_detail(mut self, input: crate::types::ExternalEventsDetail) -> Self {
        self.external_events_detail = Some(input);
        self
    }
    /// <p>The details of the external events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code> </p>
    pub fn set_external_events_detail(
        mut self,
        input: std::option::Option<crate::types::ExternalEventsDetail>,
    ) -> Self {
        self.external_events_detail = input;
        self
    }
    /// <p>The details of the ingested events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    pub fn ingested_events_detail(mut self, input: crate::types::IngestedEventsDetail) -> Self {
        self.ingested_events_detail = Some(input);
        self
    }
    /// <p>The details of the ingested events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    pub fn set_ingested_events_detail(
        mut self,
        input: std::option::Option<crate::types::IngestedEventsDetail>,
    ) -> Self {
        self.ingested_events_detail = input;
        self
    }
    /// <p>The model version status.</p>
    /// <p>Possible values are:</p>
    /// <ul>
    /// <li> <p> <code>TRAINING_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>TRAINING_COMPLETE</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>INACTIVE</code> </p> </li>
    /// <li> <p> <code>ERROR</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The model version status.</p>
    /// <p>Possible values are:</p>
    /// <ul>
    /// <li> <p> <code>TRAINING_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>TRAINING_COMPLETE</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>ACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_REQUESTED</code> </p> </li>
    /// <li> <p> <code>INACTIVATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>INACTIVE</code> </p> </li>
    /// <li> <p> <code>ERROR</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The model version ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The model version ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetModelVersionOutput`](crate::operation::get_model_version::GetModelVersionOutput).
    pub fn build(self) -> crate::operation::get_model_version::GetModelVersionOutput {
        crate::operation::get_model_version::GetModelVersionOutput {
            model_id: self.model_id,
            model_type: self.model_type,
            model_version_number: self.model_version_number,
            training_data_source: self.training_data_source,
            training_data_schema: self.training_data_schema,
            external_events_detail: self.external_events_detail,
            ingested_events_detail: self.ingested_events_detail,
            status: self.status,
            arn: self.arn,
            _request_id: self._request_id,
        }
    }
}
