// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateRuleInput {
    /// <p>The rule ID.</p>
    #[doc(hidden)]
    pub rule_id: std::option::Option<std::string::String>,
    /// <p>The detector ID for the rule's parent detector.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The rule description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The rule expression.</p>
    #[doc(hidden)]
    pub expression: std::option::Option<std::string::String>,
    /// <p>The language of the rule.</p>
    #[doc(hidden)]
    pub language: std::option::Option<crate::types::Language>,
    /// <p>The outcome or outcomes returned when the rule expression matches.</p>
    #[doc(hidden)]
    pub outcomes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A collection of key and value pairs.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateRuleInput {
    /// <p>The rule ID.</p>
    pub fn rule_id(&self) -> std::option::Option<&str> {
        self.rule_id.as_deref()
    }
    /// <p>The detector ID for the rule's parent detector.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The rule description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The rule expression.</p>
    pub fn expression(&self) -> std::option::Option<&str> {
        self.expression.as_deref()
    }
    /// <p>The language of the rule.</p>
    pub fn language(&self) -> std::option::Option<&crate::types::Language> {
        self.language.as_ref()
    }
    /// <p>The outcome or outcomes returned when the rule expression matches.</p>
    pub fn outcomes(&self) -> std::option::Option<&[std::string::String]> {
        self.outcomes.as_deref()
    }
    /// <p>A collection of key and value pairs.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for CreateRuleInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateRuleInput");
        formatter.field("rule_id", &self.rule_id);
        formatter.field("detector_id", &self.detector_id);
        formatter.field("description", &self.description);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("language", &self.language);
        formatter.field("outcomes", &self.outcomes);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateRuleInput {
    /// Creates a new builder-style object to manufacture [`CreateRuleInput`](crate::operation::create_rule::CreateRuleInput).
    pub fn builder() -> crate::operation::create_rule::builders::CreateRuleInputBuilder {
        crate::operation::create_rule::builders::CreateRuleInputBuilder::default()
    }
}

/// A builder for [`CreateRuleInput`](crate::operation::create_rule::CreateRuleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateRuleInputBuilder {
    pub(crate) rule_id: std::option::Option<std::string::String>,
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) expression: std::option::Option<std::string::String>,
    pub(crate) language: std::option::Option<crate::types::Language>,
    pub(crate) outcomes: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateRuleInputBuilder {
    /// <p>The rule ID.</p>
    pub fn rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_id = Some(input.into());
        self
    }
    /// <p>The rule ID.</p>
    pub fn set_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>The detector ID for the rule's parent detector.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p>The detector ID for the rule's parent detector.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The rule description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The rule description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The rule expression.</p>
    pub fn expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.expression = Some(input.into());
        self
    }
    /// <p>The rule expression.</p>
    pub fn set_expression(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The language of the rule.</p>
    pub fn language(mut self, input: crate::types::Language) -> Self {
        self.language = Some(input);
        self
    }
    /// <p>The language of the rule.</p>
    pub fn set_language(mut self, input: std::option::Option<crate::types::Language>) -> Self {
        self.language = input;
        self
    }
    /// Appends an item to `outcomes`.
    ///
    /// To override the contents of this collection use [`set_outcomes`](Self::set_outcomes).
    ///
    /// <p>The outcome or outcomes returned when the rule expression matches.</p>
    pub fn outcomes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.outcomes.unwrap_or_default();
        v.push(input.into());
        self.outcomes = Some(v);
        self
    }
    /// <p>The outcome or outcomes returned when the rule expression matches.</p>
    pub fn set_outcomes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.outcomes = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of key and value pairs.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A collection of key and value pairs.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateRuleInput`](crate::operation::create_rule::CreateRuleInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_rule::CreateRuleInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_rule::CreateRuleInput {
            rule_id: self.rule_id,
            detector_id: self.detector_id,
            description: self.description,
            expression: self.expression,
            language: self.language,
            outcomes: self.outcomes,
            tags: self.tags,
        })
    }
}
impl std::fmt::Debug for CreateRuleInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateRuleInputBuilder");
        formatter.field("rule_id", &self.rule_id);
        formatter.field("detector_id", &self.detector_id);
        formatter.field("description", &self.description);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("language", &self.language);
        formatter.field("outcomes", &self.outcomes);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
