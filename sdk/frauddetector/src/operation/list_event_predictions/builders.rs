// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_event_predictions::_list_event_predictions_output::ListEventPredictionsOutputBuilder;

pub use crate::operation::list_event_predictions::_list_event_predictions_input::ListEventPredictionsInputBuilder;

impl crate::operation::list_event_predictions::builders::ListEventPredictionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_event_predictions::ListEventPredictionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_event_predictions::ListEventPredictionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_event_predictions();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListEventPredictions`.
///
/// <p>Gets a list of past predictions. The list can be filtered by detector ID, detector version ID, event ID, event type, or by specifying a time period. If filter is not specified, the most recent prediction is returned.</p>
/// <p>For example, the following filter lists all past predictions for <code>xyz</code> event type - <code>{ "eventType":{ "value": "xyz" }‚Äù } </code></p>
/// <p>This is a paginated API. If you provide a null <code>maxResults</code>, this action will retrieve a maximum of 10 records per page. If you provide a <code>maxResults</code>, the value must be between 50 and 100. To get the next page results, provide the <code>nextToken</code> from the response as part of your request. A null <code>nextToken</code> fetches the records from the beginning.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListEventPredictionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_event_predictions::builders::ListEventPredictionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_event_predictions::ListEventPredictionsOutput,
        crate::operation::list_event_predictions::ListEventPredictionsError,
    > for ListEventPredictionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_event_predictions::ListEventPredictionsOutput,
            crate::operation::list_event_predictions::ListEventPredictionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListEventPredictionsFluentBuilder {
    /// Creates a new `ListEventPredictions`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListEventPredictions as a reference.
    pub fn as_input(&self) -> &crate::operation::list_event_predictions::builders::ListEventPredictionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_event_predictions::ListEventPredictionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_event_predictions::ListEventPredictionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_event_predictions::ListEventPredictions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_event_predictions::ListEventPredictions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_event_predictions::ListEventPredictionsOutput,
        crate::operation::list_event_predictions::ListEventPredictionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_event_predictions::paginator::ListEventPredictionsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_event_predictions::paginator::ListEventPredictionsPaginator {
        crate::operation::list_event_predictions::paginator::ListEventPredictionsPaginator::new(self.handle, self.inner)
    }
    /// <p>The event ID.</p>
    pub fn event_id(mut self, input: crate::types::FilterCondition) -> Self {
        self.inner = self.inner.event_id(input);
        self
    }
    /// <p>The event ID.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<crate::types::FilterCondition>) -> Self {
        self.inner = self.inner.set_event_id(input);
        self
    }
    /// <p>The event ID.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<crate::types::FilterCondition> {
        self.inner.get_event_id()
    }
    /// <p>The event type associated with the detector.</p>
    pub fn event_type(mut self, input: crate::types::FilterCondition) -> Self {
        self.inner = self.inner.event_type(input);
        self
    }
    /// <p>The event type associated with the detector.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::FilterCondition>) -> Self {
        self.inner = self.inner.set_event_type(input);
        self
    }
    /// <p>The event type associated with the detector.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::FilterCondition> {
        self.inner.get_event_type()
    }
    /// <p>The detector ID.</p>
    pub fn detector_id(mut self, input: crate::types::FilterCondition) -> Self {
        self.inner = self.inner.detector_id(input);
        self
    }
    /// <p>The detector ID.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<crate::types::FilterCondition>) -> Self {
        self.inner = self.inner.set_detector_id(input);
        self
    }
    /// <p>The detector ID.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<crate::types::FilterCondition> {
        self.inner.get_detector_id()
    }
    /// <p>The detector version ID.</p>
    pub fn detector_version_id(mut self, input: crate::types::FilterCondition) -> Self {
        self.inner = self.inner.detector_version_id(input);
        self
    }
    /// <p>The detector version ID.</p>
    pub fn set_detector_version_id(mut self, input: ::std::option::Option<crate::types::FilterCondition>) -> Self {
        self.inner = self.inner.set_detector_version_id(input);
        self
    }
    /// <p>The detector version ID.</p>
    pub fn get_detector_version_id(&self) -> &::std::option::Option<crate::types::FilterCondition> {
        self.inner.get_detector_version_id()
    }
    /// <p>The time period for when the predictions were generated.</p>
    pub fn prediction_time_range(mut self, input: crate::types::PredictionTimeRange) -> Self {
        self.inner = self.inner.prediction_time_range(input);
        self
    }
    /// <p>The time period for when the predictions were generated.</p>
    pub fn set_prediction_time_range(mut self, input: ::std::option::Option<crate::types::PredictionTimeRange>) -> Self {
        self.inner = self.inner.set_prediction_time_range(input);
        self
    }
    /// <p>The time period for when the predictions were generated.</p>
    pub fn get_prediction_time_range(&self) -> &::std::option::Option<crate::types::PredictionTimeRange> {
        self.inner.get_prediction_time_range()
    }
    /// <p>Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of predictions to return for the request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of predictions to return for the request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of predictions to return for the request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
