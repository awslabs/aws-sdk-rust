// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListEventPredictionsOutput {
    /// <p> The summary of the past predictions. </p>
    #[doc(hidden)]
    pub event_prediction_summaries:
        std::option::Option<std::vec::Vec<crate::types::EventPredictionSummary>>,
    /// <p> Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListEventPredictionsOutput {
    /// <p> The summary of the past predictions. </p>
    pub fn event_prediction_summaries(
        &self,
    ) -> std::option::Option<&[crate::types::EventPredictionSummary]> {
        self.event_prediction_summaries.as_deref()
    }
    /// <p> Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListEventPredictionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListEventPredictionsOutput {
    /// Creates a new builder-style object to manufacture [`ListEventPredictionsOutput`](crate::operation::list_event_predictions::ListEventPredictionsOutput).
    pub fn builder(
    ) -> crate::operation::list_event_predictions::builders::ListEventPredictionsOutputBuilder {
        crate::operation::list_event_predictions::builders::ListEventPredictionsOutputBuilder::default()
    }
}

/// A builder for [`ListEventPredictionsOutput`](crate::operation::list_event_predictions::ListEventPredictionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListEventPredictionsOutputBuilder {
    pub(crate) event_prediction_summaries:
        std::option::Option<std::vec::Vec<crate::types::EventPredictionSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListEventPredictionsOutputBuilder {
    /// Appends an item to `event_prediction_summaries`.
    ///
    /// To override the contents of this collection use [`set_event_prediction_summaries`](Self::set_event_prediction_summaries).
    ///
    /// <p> The summary of the past predictions. </p>
    pub fn event_prediction_summaries(
        mut self,
        input: crate::types::EventPredictionSummary,
    ) -> Self {
        let mut v = self.event_prediction_summaries.unwrap_or_default();
        v.push(input);
        self.event_prediction_summaries = Some(v);
        self
    }
    /// <p> The summary of the past predictions. </p>
    pub fn set_event_prediction_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EventPredictionSummary>>,
    ) -> Self {
        self.event_prediction_summaries = input;
        self
    }
    /// <p> Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListEventPredictionsOutput`](crate::operation::list_event_predictions::ListEventPredictionsOutput).
    pub fn build(self) -> crate::operation::list_event_predictions::ListEventPredictionsOutput {
        crate::operation::list_event_predictions::ListEventPredictionsOutput {
            event_prediction_summaries: self.event_prediction_summaries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
