// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateRuleVersionInput {
    /// <p>The rule to update.</p>
    #[doc(hidden)]
    pub rule: std::option::Option<crate::types::Rule>,
    /// <p>The description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The rule expression.</p>
    #[doc(hidden)]
    pub expression: std::option::Option<std::string::String>,
    /// <p>The language.</p>
    #[doc(hidden)]
    pub language: std::option::Option<crate::types::Language>,
    /// <p>The outcomes.</p>
    #[doc(hidden)]
    pub outcomes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The tags to assign to the rule version.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl UpdateRuleVersionInput {
    /// <p>The rule to update.</p>
    pub fn rule(&self) -> std::option::Option<&crate::types::Rule> {
        self.rule.as_ref()
    }
    /// <p>The description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The rule expression.</p>
    pub fn expression(&self) -> std::option::Option<&str> {
        self.expression.as_deref()
    }
    /// <p>The language.</p>
    pub fn language(&self) -> std::option::Option<&crate::types::Language> {
        self.language.as_ref()
    }
    /// <p>The outcomes.</p>
    pub fn outcomes(&self) -> std::option::Option<&[std::string::String]> {
        self.outcomes.as_deref()
    }
    /// <p>The tags to assign to the rule version.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for UpdateRuleVersionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRuleVersionInput");
        formatter.field("rule", &self.rule);
        formatter.field("description", &self.description);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("language", &self.language);
        formatter.field("outcomes", &self.outcomes);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl UpdateRuleVersionInput {
    /// Creates a new builder-style object to manufacture [`UpdateRuleVersionInput`](crate::operation::update_rule_version::UpdateRuleVersionInput).
    pub fn builder(
    ) -> crate::operation::update_rule_version::builders::UpdateRuleVersionInputBuilder {
        crate::operation::update_rule_version::builders::UpdateRuleVersionInputBuilder::default()
    }
}

/// A builder for [`UpdateRuleVersionInput`](crate::operation::update_rule_version::UpdateRuleVersionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateRuleVersionInputBuilder {
    pub(crate) rule: std::option::Option<crate::types::Rule>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) expression: std::option::Option<std::string::String>,
    pub(crate) language: std::option::Option<crate::types::Language>,
    pub(crate) outcomes: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl UpdateRuleVersionInputBuilder {
    /// <p>The rule to update.</p>
    pub fn rule(mut self, input: crate::types::Rule) -> Self {
        self.rule = Some(input);
        self
    }
    /// <p>The rule to update.</p>
    pub fn set_rule(mut self, input: std::option::Option<crate::types::Rule>) -> Self {
        self.rule = input;
        self
    }
    /// <p>The description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The rule expression.</p>
    pub fn expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.expression = Some(input.into());
        self
    }
    /// <p>The rule expression.</p>
    pub fn set_expression(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The language.</p>
    pub fn language(mut self, input: crate::types::Language) -> Self {
        self.language = Some(input);
        self
    }
    /// <p>The language.</p>
    pub fn set_language(mut self, input: std::option::Option<crate::types::Language>) -> Self {
        self.language = input;
        self
    }
    /// Appends an item to `outcomes`.
    ///
    /// To override the contents of this collection use [`set_outcomes`](Self::set_outcomes).
    ///
    /// <p>The outcomes.</p>
    pub fn outcomes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.outcomes.unwrap_or_default();
        v.push(input.into());
        self.outcomes = Some(v);
        self
    }
    /// <p>The outcomes.</p>
    pub fn set_outcomes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.outcomes = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to assign to the rule version.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags to assign to the rule version.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRuleVersionInput`](crate::operation::update_rule_version::UpdateRuleVersionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_rule_version::UpdateRuleVersionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_rule_version::UpdateRuleVersionInput {
                rule: self.rule,
                description: self.description,
                expression: self.expression,
                language: self.language,
                outcomes: self.outcomes,
                tags: self.tags,
            },
        )
    }
}
impl std::fmt::Debug for UpdateRuleVersionInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRuleVersionInputBuilder");
        formatter.field("rule", &self.rule);
        formatter.field("description", &self.description);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("language", &self.language);
        formatter.field("outcomes", &self.outcomes);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
