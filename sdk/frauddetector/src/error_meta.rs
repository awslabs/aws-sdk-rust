// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>An exception indicating Amazon Fraud Detector does not have the needed permissions. This can occur if you submit a request, such as <code>PutExternalModel</code>, that specifies a role that is not in your account.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>An exception indicating there was a conflict during a delete operation.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An exception indicating an internal server error.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>An exception indicating the specified resource was not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>An exception indicating that the attached customer-owned (external) model threw an exception when Amazon Fraud Detector invoked the model.</p>
    ResourceUnavailableException(crate::types::error::ResourceUnavailableException),
    /// <p>An exception indicating a throttling error.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>An exception indicating a specified value is not allowed.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_create_variable::BatchCreateVariableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_create_variable::BatchCreateVariableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_create_variable::BatchCreateVariableError> for Error {
    fn from(err: crate::operation::batch_create_variable::BatchCreateVariableError) -> Self {
        match err {
            crate::operation::batch_create_variable::BatchCreateVariableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_create_variable::BatchCreateVariableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_create_variable::BatchCreateVariableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_create_variable::BatchCreateVariableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_create_variable::BatchCreateVariableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_variable::BatchGetVariableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_variable::BatchGetVariableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_variable::BatchGetVariableError> for Error {
    fn from(err: crate::operation::batch_get_variable::BatchGetVariableError) -> Self {
        match err {
            crate::operation::batch_get_variable::BatchGetVariableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_get_variable::BatchGetVariableError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_get_variable::BatchGetVariableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_get_variable::BatchGetVariableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_get_variable::BatchGetVariableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_batch_import_job::CancelBatchImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_batch_import_job::CancelBatchImportJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_batch_import_job::CancelBatchImportJobError> for Error {
    fn from(err: crate::operation::cancel_batch_import_job::CancelBatchImportJobError) -> Self {
        match err {
            crate::operation::cancel_batch_import_job::CancelBatchImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_batch_import_job::CancelBatchImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::cancel_batch_import_job::CancelBatchImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::cancel_batch_import_job::CancelBatchImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_batch_import_job::CancelBatchImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_batch_import_job::CancelBatchImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_batch_prediction_job::CancelBatchPredictionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_batch_prediction_job::CancelBatchPredictionJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_batch_prediction_job::CancelBatchPredictionJobError> for Error {
    fn from(err: crate::operation::cancel_batch_prediction_job::CancelBatchPredictionJobError) -> Self {
        match err {
            crate::operation::cancel_batch_prediction_job::CancelBatchPredictionJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::cancel_batch_prediction_job::CancelBatchPredictionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::cancel_batch_prediction_job::CancelBatchPredictionJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::cancel_batch_prediction_job::CancelBatchPredictionJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::cancel_batch_prediction_job::CancelBatchPredictionJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::cancel_batch_prediction_job::CancelBatchPredictionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_batch_import_job::CreateBatchImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_batch_import_job::CreateBatchImportJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_batch_import_job::CreateBatchImportJobError> for Error {
    fn from(err: crate::operation::create_batch_import_job::CreateBatchImportJobError) -> Self {
        match err {
            crate::operation::create_batch_import_job::CreateBatchImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_batch_import_job::CreateBatchImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_batch_import_job::CreateBatchImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_batch_import_job::CreateBatchImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_batch_import_job::CreateBatchImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_batch_import_job::CreateBatchImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_batch_prediction_job::CreateBatchPredictionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_batch_prediction_job::CreateBatchPredictionJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_batch_prediction_job::CreateBatchPredictionJobError> for Error {
    fn from(err: crate::operation::create_batch_prediction_job::CreateBatchPredictionJobError) -> Self {
        match err {
            crate::operation::create_batch_prediction_job::CreateBatchPredictionJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_batch_prediction_job::CreateBatchPredictionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_batch_prediction_job::CreateBatchPredictionJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_batch_prediction_job::CreateBatchPredictionJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_batch_prediction_job::CreateBatchPredictionJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_batch_prediction_job::CreateBatchPredictionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_detector_version::CreateDetectorVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_detector_version::CreateDetectorVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_detector_version::CreateDetectorVersionError> for Error {
    fn from(err: crate::operation::create_detector_version::CreateDetectorVersionError) -> Self {
        match err {
            crate::operation::create_detector_version::CreateDetectorVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_detector_version::CreateDetectorVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_detector_version::CreateDetectorVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_detector_version::CreateDetectorVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_detector_version::CreateDetectorVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_detector_version::CreateDetectorVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_list::CreateListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_list::CreateListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_list::CreateListError> for Error {
    fn from(err: crate::operation::create_list::CreateListError) -> Self {
        match err {
            crate::operation::create_list::CreateListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_list::CreateListError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_list::CreateListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_list::CreateListError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_list::CreateListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model::CreateModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model::CreateModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model::CreateModelError> for Error {
    fn from(err: crate::operation::create_model::CreateModelError) -> Self {
        match err {
            crate::operation::create_model::CreateModelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_model::CreateModelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_model::CreateModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_model::CreateModelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_model::CreateModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model_version::CreateModelVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model_version::CreateModelVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model_version::CreateModelVersionError> for Error {
    fn from(err: crate::operation::create_model_version::CreateModelVersionError) -> Self {
        match err {
            crate::operation::create_model_version::CreateModelVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_model_version::CreateModelVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_model_version::CreateModelVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_model_version::CreateModelVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_model_version::CreateModelVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_model_version::CreateModelVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rule::CreateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rule::CreateRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_rule::CreateRuleError> for Error {
    fn from(err: crate::operation::create_rule::CreateRuleError) -> Self {
        match err {
            crate::operation::create_rule::CreateRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_rule::CreateRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_rule::CreateRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_rule::CreateRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_rule::CreateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_variable::CreateVariableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_variable::CreateVariableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_variable::CreateVariableError> for Error {
    fn from(err: crate::operation::create_variable::CreateVariableError) -> Self {
        match err {
            crate::operation::create_variable::CreateVariableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_variable::CreateVariableError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_variable::CreateVariableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_variable::CreateVariableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_variable::CreateVariableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_batch_import_job::DeleteBatchImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_batch_import_job::DeleteBatchImportJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_batch_import_job::DeleteBatchImportJobError> for Error {
    fn from(err: crate::operation::delete_batch_import_job::DeleteBatchImportJobError) -> Self {
        match err {
            crate::operation::delete_batch_import_job::DeleteBatchImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_batch_import_job::DeleteBatchImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_batch_import_job::DeleteBatchImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_batch_import_job::DeleteBatchImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_batch_import_job::DeleteBatchImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_batch_prediction_job::DeleteBatchPredictionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_batch_prediction_job::DeleteBatchPredictionJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_batch_prediction_job::DeleteBatchPredictionJobError> for Error {
    fn from(err: crate::operation::delete_batch_prediction_job::DeleteBatchPredictionJobError) -> Self {
        match err {
            crate::operation::delete_batch_prediction_job::DeleteBatchPredictionJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_batch_prediction_job::DeleteBatchPredictionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_batch_prediction_job::DeleteBatchPredictionJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_batch_prediction_job::DeleteBatchPredictionJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_batch_prediction_job::DeleteBatchPredictionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_detector::DeleteDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_detector::DeleteDetectorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_detector::DeleteDetectorError> for Error {
    fn from(err: crate::operation::delete_detector::DeleteDetectorError) -> Self {
        match err {
            crate::operation::delete_detector::DeleteDetectorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_detector::DeleteDetectorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_detector::DeleteDetectorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_detector::DeleteDetectorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_detector::DeleteDetectorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_detector::DeleteDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_detector_version::DeleteDetectorVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_detector_version::DeleteDetectorVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_detector_version::DeleteDetectorVersionError> for Error {
    fn from(err: crate::operation::delete_detector_version::DeleteDetectorVersionError) -> Self {
        match err {
            crate::operation::delete_detector_version::DeleteDetectorVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_detector_version::DeleteDetectorVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_detector_version::DeleteDetectorVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_detector_version::DeleteDetectorVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_detector_version::DeleteDetectorVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_detector_version::DeleteDetectorVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_detector_version::DeleteDetectorVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_entity_type::DeleteEntityTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_entity_type::DeleteEntityTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_entity_type::DeleteEntityTypeError> for Error {
    fn from(err: crate::operation::delete_entity_type::DeleteEntityTypeError) -> Self {
        match err {
            crate::operation::delete_entity_type::DeleteEntityTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_entity_type::DeleteEntityTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_entity_type::DeleteEntityTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_entity_type::DeleteEntityTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_entity_type::DeleteEntityTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_entity_type::DeleteEntityTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event::DeleteEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event::DeleteEventError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_event::DeleteEventError> for Error {
    fn from(err: crate::operation::delete_event::DeleteEventError) -> Self {
        match err {
            crate::operation::delete_event::DeleteEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_event::DeleteEventError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_event::DeleteEventError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_event::DeleteEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_event::DeleteEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_events_by_event_type::DeleteEventsByEventTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_events_by_event_type::DeleteEventsByEventTypeError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_events_by_event_type::DeleteEventsByEventTypeError> for Error {
    fn from(err: crate::operation::delete_events_by_event_type::DeleteEventsByEventTypeError) -> Self {
        match err {
            crate::operation::delete_events_by_event_type::DeleteEventsByEventTypeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_events_by_event_type::DeleteEventsByEventTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_events_by_event_type::DeleteEventsByEventTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_events_by_event_type::DeleteEventsByEventTypeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_events_by_event_type::DeleteEventsByEventTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_events_by_event_type::DeleteEventsByEventTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_events_by_event_type::DeleteEventsByEventTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event_type::DeleteEventTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event_type::DeleteEventTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_event_type::DeleteEventTypeError> for Error {
    fn from(err: crate::operation::delete_event_type::DeleteEventTypeError) -> Self {
        match err {
            crate::operation::delete_event_type::DeleteEventTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_event_type::DeleteEventTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_event_type::DeleteEventTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_event_type::DeleteEventTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_event_type::DeleteEventTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_event_type::DeleteEventTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_external_model::DeleteExternalModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_external_model::DeleteExternalModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_external_model::DeleteExternalModelError> for Error {
    fn from(err: crate::operation::delete_external_model::DeleteExternalModelError) -> Self {
        match err {
            crate::operation::delete_external_model::DeleteExternalModelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_external_model::DeleteExternalModelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_external_model::DeleteExternalModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_external_model::DeleteExternalModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_external_model::DeleteExternalModelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_external_model::DeleteExternalModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_label::DeleteLabelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_label::DeleteLabelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_label::DeleteLabelError> for Error {
    fn from(err: crate::operation::delete_label::DeleteLabelError) -> Self {
        match err {
            crate::operation::delete_label::DeleteLabelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_label::DeleteLabelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_label::DeleteLabelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_label::DeleteLabelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_label::DeleteLabelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_list::DeleteListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_list::DeleteListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_list::DeleteListError> for Error {
    fn from(err: crate::operation::delete_list::DeleteListError) -> Self {
        match err {
            crate::operation::delete_list::DeleteListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_list::DeleteListError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_list::DeleteListError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_list::DeleteListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_list::DeleteListError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_list::DeleteListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_model::DeleteModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_model::DeleteModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model::DeleteModelError> for Error {
    fn from(err: crate::operation::delete_model::DeleteModelError) -> Self {
        match err {
            crate::operation::delete_model::DeleteModelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_model::DeleteModelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_model::DeleteModelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_model::DeleteModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_model::DeleteModelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_model::DeleteModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_model_version::DeleteModelVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_model_version::DeleteModelVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model_version::DeleteModelVersionError> for Error {
    fn from(err: crate::operation::delete_model_version::DeleteModelVersionError) -> Self {
        match err {
            crate::operation::delete_model_version::DeleteModelVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_model_version::DeleteModelVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_model_version::DeleteModelVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_model_version::DeleteModelVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_model_version::DeleteModelVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_model_version::DeleteModelVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_outcome::DeleteOutcomeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_outcome::DeleteOutcomeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_outcome::DeleteOutcomeError> for Error {
    fn from(err: crate::operation::delete_outcome::DeleteOutcomeError) -> Self {
        match err {
            crate::operation::delete_outcome::DeleteOutcomeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_outcome::DeleteOutcomeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_outcome::DeleteOutcomeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_outcome::DeleteOutcomeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_outcome::DeleteOutcomeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_outcome::DeleteOutcomeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rule::DeleteRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rule::DeleteRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_rule::DeleteRuleError> for Error {
    fn from(err: crate::operation::delete_rule::DeleteRuleError) -> Self {
        match err {
            crate::operation::delete_rule::DeleteRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_rule::DeleteRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_rule::DeleteRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_rule::DeleteRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_rule::DeleteRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_rule::DeleteRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_variable::DeleteVariableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_variable::DeleteVariableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_variable::DeleteVariableError> for Error {
    fn from(err: crate::operation::delete_variable::DeleteVariableError) -> Self {
        match err {
            crate::operation::delete_variable::DeleteVariableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_variable::DeleteVariableError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_variable::DeleteVariableError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_variable::DeleteVariableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_variable::DeleteVariableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_variable::DeleteVariableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_detector::DescribeDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_detector::DescribeDetectorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_detector::DescribeDetectorError> for Error {
    fn from(err: crate::operation::describe_detector::DescribeDetectorError) -> Self {
        match err {
            crate::operation::describe_detector::DescribeDetectorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_detector::DescribeDetectorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_detector::DescribeDetectorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_detector::DescribeDetectorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_detector::DescribeDetectorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_detector::DescribeDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_model_versions::DescribeModelVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_model_versions::DescribeModelVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_model_versions::DescribeModelVersionsError> for Error {
    fn from(err: crate::operation::describe_model_versions::DescribeModelVersionsError) -> Self {
        match err {
            crate::operation::describe_model_versions::DescribeModelVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_model_versions::DescribeModelVersionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_model_versions::DescribeModelVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_model_versions::DescribeModelVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_model_versions::DescribeModelVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_model_versions::DescribeModelVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_batch_import_jobs::GetBatchImportJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_batch_import_jobs::GetBatchImportJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_batch_import_jobs::GetBatchImportJobsError> for Error {
    fn from(err: crate::operation::get_batch_import_jobs::GetBatchImportJobsError) -> Self {
        match err {
            crate::operation::get_batch_import_jobs::GetBatchImportJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_batch_import_jobs::GetBatchImportJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_batch_import_jobs::GetBatchImportJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_batch_import_jobs::GetBatchImportJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_batch_import_jobs::GetBatchImportJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_batch_import_jobs::GetBatchImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_batch_prediction_jobs::GetBatchPredictionJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_batch_prediction_jobs::GetBatchPredictionJobsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_batch_prediction_jobs::GetBatchPredictionJobsError> for Error {
    fn from(err: crate::operation::get_batch_prediction_jobs::GetBatchPredictionJobsError) -> Self {
        match err {
            crate::operation::get_batch_prediction_jobs::GetBatchPredictionJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_batch_prediction_jobs::GetBatchPredictionJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_batch_prediction_jobs::GetBatchPredictionJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_batch_prediction_jobs::GetBatchPredictionJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_batch_prediction_jobs::GetBatchPredictionJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_batch_prediction_jobs::GetBatchPredictionJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_delete_events_by_event_type_status::GetDeleteEventsByEventTypeStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_delete_events_by_event_type_status::GetDeleteEventsByEventTypeStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_delete_events_by_event_type_status::GetDeleteEventsByEventTypeStatusError> for Error {
    fn from(err: crate::operation::get_delete_events_by_event_type_status::GetDeleteEventsByEventTypeStatusError) -> Self {
        match err {
            crate::operation::get_delete_events_by_event_type_status::GetDeleteEventsByEventTypeStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_delete_events_by_event_type_status::GetDeleteEventsByEventTypeStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_delete_events_by_event_type_status::GetDeleteEventsByEventTypeStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_delete_events_by_event_type_status::GetDeleteEventsByEventTypeStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_delete_events_by_event_type_status::GetDeleteEventsByEventTypeStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_delete_events_by_event_type_status::GetDeleteEventsByEventTypeStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_detectors::GetDetectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_detectors::GetDetectorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_detectors::GetDetectorsError> for Error {
    fn from(err: crate::operation::get_detectors::GetDetectorsError) -> Self {
        match err {
            crate::operation::get_detectors::GetDetectorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_detectors::GetDetectorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_detectors::GetDetectorsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_detectors::GetDetectorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_detectors::GetDetectorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_detectors::GetDetectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_detector_version::GetDetectorVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_detector_version::GetDetectorVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_detector_version::GetDetectorVersionError> for Error {
    fn from(err: crate::operation::get_detector_version::GetDetectorVersionError) -> Self {
        match err {
            crate::operation::get_detector_version::GetDetectorVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_detector_version::GetDetectorVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_detector_version::GetDetectorVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_detector_version::GetDetectorVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_detector_version::GetDetectorVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_detector_version::GetDetectorVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_entity_types::GetEntityTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_entity_types::GetEntityTypesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_entity_types::GetEntityTypesError> for Error {
    fn from(err: crate::operation::get_entity_types::GetEntityTypesError) -> Self {
        match err {
            crate::operation::get_entity_types::GetEntityTypesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_entity_types::GetEntityTypesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_entity_types::GetEntityTypesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_entity_types::GetEntityTypesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_entity_types::GetEntityTypesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_entity_types::GetEntityTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event::GetEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event::GetEventError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_event::GetEventError> for Error {
    fn from(err: crate::operation::get_event::GetEventError) -> Self {
        match err {
            crate::operation::get_event::GetEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_event::GetEventError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_event::GetEventError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_event::GetEventError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_event::GetEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_event::GetEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_prediction::GetEventPredictionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_prediction::GetEventPredictionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_event_prediction::GetEventPredictionError> for Error {
    fn from(err: crate::operation::get_event_prediction::GetEventPredictionError) -> Self {
        match err {
            crate::operation::get_event_prediction::GetEventPredictionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_event_prediction::GetEventPredictionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_event_prediction::GetEventPredictionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_event_prediction::GetEventPredictionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_event_prediction::GetEventPredictionError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::operation::get_event_prediction::GetEventPredictionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_event_prediction::GetEventPredictionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_event_prediction::GetEventPredictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_prediction_metadata::GetEventPredictionMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_prediction_metadata::GetEventPredictionMetadataError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_event_prediction_metadata::GetEventPredictionMetadataError> for Error {
    fn from(err: crate::operation::get_event_prediction_metadata::GetEventPredictionMetadataError) -> Self {
        match err {
            crate::operation::get_event_prediction_metadata::GetEventPredictionMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_event_prediction_metadata::GetEventPredictionMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_event_prediction_metadata::GetEventPredictionMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_event_prediction_metadata::GetEventPredictionMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_event_prediction_metadata::GetEventPredictionMetadataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_event_prediction_metadata::GetEventPredictionMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_types::GetEventTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_types::GetEventTypesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_event_types::GetEventTypesError> for Error {
    fn from(err: crate::operation::get_event_types::GetEventTypesError) -> Self {
        match err {
            crate::operation::get_event_types::GetEventTypesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_event_types::GetEventTypesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_event_types::GetEventTypesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_event_types::GetEventTypesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_event_types::GetEventTypesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_event_types::GetEventTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_external_models::GetExternalModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_external_models::GetExternalModelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_external_models::GetExternalModelsError> for Error {
    fn from(err: crate::operation::get_external_models::GetExternalModelsError) -> Self {
        match err {
            crate::operation::get_external_models::GetExternalModelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_external_models::GetExternalModelsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_external_models::GetExternalModelsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_external_models::GetExternalModelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_external_models::GetExternalModelsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_external_models::GetExternalModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kms_encryption_key::GetKMSEncryptionKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kms_encryption_key::GetKMSEncryptionKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_kms_encryption_key::GetKMSEncryptionKeyError> for Error {
    fn from(err: crate::operation::get_kms_encryption_key::GetKMSEncryptionKeyError) -> Self {
        match err {
            crate::operation::get_kms_encryption_key::GetKMSEncryptionKeyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_kms_encryption_key::GetKMSEncryptionKeyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_kms_encryption_key::GetKMSEncryptionKeyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_kms_encryption_key::GetKMSEncryptionKeyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_kms_encryption_key::GetKMSEncryptionKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_labels::GetLabelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_labels::GetLabelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_labels::GetLabelsError> for Error {
    fn from(err: crate::operation::get_labels::GetLabelsError) -> Self {
        match err {
            crate::operation::get_labels::GetLabelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_labels::GetLabelsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_labels::GetLabelsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_labels::GetLabelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_labels::GetLabelsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_labels::GetLabelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_list_elements::GetListElementsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_list_elements::GetListElementsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_list_elements::GetListElementsError> for Error {
    fn from(err: crate::operation::get_list_elements::GetListElementsError) -> Self {
        match err {
            crate::operation::get_list_elements::GetListElementsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_list_elements::GetListElementsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_list_elements::GetListElementsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_list_elements::GetListElementsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_list_elements::GetListElementsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_list_elements::GetListElementsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lists_metadata::GetListsMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lists_metadata::GetListsMetadataError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_lists_metadata::GetListsMetadataError> for Error {
    fn from(err: crate::operation::get_lists_metadata::GetListsMetadataError) -> Self {
        match err {
            crate::operation::get_lists_metadata::GetListsMetadataError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_lists_metadata::GetListsMetadataError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_lists_metadata::GetListsMetadataError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_lists_metadata::GetListsMetadataError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_lists_metadata::GetListsMetadataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_lists_metadata::GetListsMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_models::GetModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_models::GetModelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_models::GetModelsError> for Error {
    fn from(err: crate::operation::get_models::GetModelsError) -> Self {
        match err {
            crate::operation::get_models::GetModelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_models::GetModelsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_models::GetModelsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_models::GetModelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_models::GetModelsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_models::GetModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_version::GetModelVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_version::GetModelVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_model_version::GetModelVersionError> for Error {
    fn from(err: crate::operation::get_model_version::GetModelVersionError) -> Self {
        match err {
            crate::operation::get_model_version::GetModelVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_model_version::GetModelVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_model_version::GetModelVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_model_version::GetModelVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_model_version::GetModelVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_model_version::GetModelVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_outcomes::GetOutcomesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_outcomes::GetOutcomesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_outcomes::GetOutcomesError> for Error {
    fn from(err: crate::operation::get_outcomes::GetOutcomesError) -> Self {
        match err {
            crate::operation::get_outcomes::GetOutcomesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_outcomes::GetOutcomesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_outcomes::GetOutcomesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_outcomes::GetOutcomesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_outcomes::GetOutcomesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_outcomes::GetOutcomesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rules::GetRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rules::GetRulesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_rules::GetRulesError> for Error {
    fn from(err: crate::operation::get_rules::GetRulesError) -> Self {
        match err {
            crate::operation::get_rules::GetRulesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_rules::GetRulesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_rules::GetRulesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_rules::GetRulesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_rules::GetRulesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_rules::GetRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_variables::GetVariablesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_variables::GetVariablesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_variables::GetVariablesError> for Error {
    fn from(err: crate::operation::get_variables::GetVariablesError) -> Self {
        match err {
            crate::operation::get_variables::GetVariablesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_variables::GetVariablesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_variables::GetVariablesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_variables::GetVariablesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_variables::GetVariablesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_variables::GetVariablesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_event_predictions::ListEventPredictionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_event_predictions::ListEventPredictionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_event_predictions::ListEventPredictionsError> for Error {
    fn from(err: crate::operation::list_event_predictions::ListEventPredictionsError) -> Self {
        match err {
            crate::operation::list_event_predictions::ListEventPredictionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_event_predictions::ListEventPredictionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_event_predictions::ListEventPredictionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_event_predictions::ListEventPredictionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_event_predictions::ListEventPredictionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_detector::PutDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_detector::PutDetectorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_detector::PutDetectorError> for Error {
    fn from(err: crate::operation::put_detector::PutDetectorError) -> Self {
        match err {
            crate::operation::put_detector::PutDetectorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_detector::PutDetectorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_detector::PutDetectorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_detector::PutDetectorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_detector::PutDetectorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_detector::PutDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_entity_type::PutEntityTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_entity_type::PutEntityTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_entity_type::PutEntityTypeError> for Error {
    fn from(err: crate::operation::put_entity_type::PutEntityTypeError) -> Self {
        match err {
            crate::operation::put_entity_type::PutEntityTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_entity_type::PutEntityTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_entity_type::PutEntityTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_entity_type::PutEntityTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_entity_type::PutEntityTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_entity_type::PutEntityTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_event_type::PutEventTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_event_type::PutEventTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_event_type::PutEventTypeError> for Error {
    fn from(err: crate::operation::put_event_type::PutEventTypeError) -> Self {
        match err {
            crate::operation::put_event_type::PutEventTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_event_type::PutEventTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_event_type::PutEventTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_event_type::PutEventTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_event_type::PutEventTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_event_type::PutEventTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_external_model::PutExternalModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_external_model::PutExternalModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_external_model::PutExternalModelError> for Error {
    fn from(err: crate::operation::put_external_model::PutExternalModelError) -> Self {
        match err {
            crate::operation::put_external_model::PutExternalModelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_external_model::PutExternalModelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_external_model::PutExternalModelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_external_model::PutExternalModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_external_model::PutExternalModelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_external_model::PutExternalModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_kms_encryption_key::PutKMSEncryptionKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_kms_encryption_key::PutKMSEncryptionKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_kms_encryption_key::PutKMSEncryptionKeyError> for Error {
    fn from(err: crate::operation::put_kms_encryption_key::PutKMSEncryptionKeyError) -> Self {
        match err {
            crate::operation::put_kms_encryption_key::PutKMSEncryptionKeyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_kms_encryption_key::PutKMSEncryptionKeyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_kms_encryption_key::PutKMSEncryptionKeyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_kms_encryption_key::PutKMSEncryptionKeyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_kms_encryption_key::PutKMSEncryptionKeyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_kms_encryption_key::PutKMSEncryptionKeyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_kms_encryption_key::PutKMSEncryptionKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_label::PutLabelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_label::PutLabelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_label::PutLabelError> for Error {
    fn from(err: crate::operation::put_label::PutLabelError) -> Self {
        match err {
            crate::operation::put_label::PutLabelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_label::PutLabelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_label::PutLabelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_label::PutLabelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_label::PutLabelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_label::PutLabelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_outcome::PutOutcomeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_outcome::PutOutcomeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_outcome::PutOutcomeError> for Error {
    fn from(err: crate::operation::put_outcome::PutOutcomeError) -> Self {
        match err {
            crate::operation::put_outcome::PutOutcomeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_outcome::PutOutcomeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_outcome::PutOutcomeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_outcome::PutOutcomeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_outcome::PutOutcomeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_outcome::PutOutcomeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_event::SendEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_event::SendEventError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_event::SendEventError> for Error {
    fn from(err: crate::operation::send_event::SendEventError) -> Self {
        match err {
            crate::operation::send_event::SendEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::send_event::SendEventError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::send_event::SendEventError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::send_event::SendEventError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::send_event::SendEventError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::send_event::SendEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::send_event::SendEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_detector_version::UpdateDetectorVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_detector_version::UpdateDetectorVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_detector_version::UpdateDetectorVersionError> for Error {
    fn from(err: crate::operation::update_detector_version::UpdateDetectorVersionError) -> Self {
        match err {
            crate::operation::update_detector_version::UpdateDetectorVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_detector_version::UpdateDetectorVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_detector_version::UpdateDetectorVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_detector_version::UpdateDetectorVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_detector_version::UpdateDetectorVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_detector_version::UpdateDetectorVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_detector_version::UpdateDetectorVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_detector_version_metadata::UpdateDetectorVersionMetadataError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_detector_version_metadata::UpdateDetectorVersionMetadataError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_detector_version_metadata::UpdateDetectorVersionMetadataError> for Error {
    fn from(err: crate::operation::update_detector_version_metadata::UpdateDetectorVersionMetadataError) -> Self {
        match err {
            crate::operation::update_detector_version_metadata::UpdateDetectorVersionMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_detector_version_metadata::UpdateDetectorVersionMetadataError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_detector_version_metadata::UpdateDetectorVersionMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_detector_version_metadata::UpdateDetectorVersionMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_detector_version_metadata::UpdateDetectorVersionMetadataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_detector_version_metadata::UpdateDetectorVersionMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_detector_version_status::UpdateDetectorVersionStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_detector_version_status::UpdateDetectorVersionStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_detector_version_status::UpdateDetectorVersionStatusError> for Error {
    fn from(err: crate::operation::update_detector_version_status::UpdateDetectorVersionStatusError) -> Self {
        match err {
            crate::operation::update_detector_version_status::UpdateDetectorVersionStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_detector_version_status::UpdateDetectorVersionStatusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_detector_version_status::UpdateDetectorVersionStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_detector_version_status::UpdateDetectorVersionStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_detector_version_status::UpdateDetectorVersionStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_detector_version_status::UpdateDetectorVersionStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_detector_version_status::UpdateDetectorVersionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_event_label::UpdateEventLabelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_event_label::UpdateEventLabelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_event_label::UpdateEventLabelError> for Error {
    fn from(err: crate::operation::update_event_label::UpdateEventLabelError) -> Self {
        match err {
            crate::operation::update_event_label::UpdateEventLabelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_event_label::UpdateEventLabelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_event_label::UpdateEventLabelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_event_label::UpdateEventLabelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_event_label::UpdateEventLabelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_event_label::UpdateEventLabelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_event_label::UpdateEventLabelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_list::UpdateListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_list::UpdateListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_list::UpdateListError> for Error {
    fn from(err: crate::operation::update_list::UpdateListError) -> Self {
        match err {
            crate::operation::update_list::UpdateListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_list::UpdateListError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_list::UpdateListError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_list::UpdateListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_list::UpdateListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_list::UpdateListError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_list::UpdateListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_model::UpdateModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_model::UpdateModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_model::UpdateModelError> for Error {
    fn from(err: crate::operation::update_model::UpdateModelError) -> Self {
        match err {
            crate::operation::update_model::UpdateModelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_model::UpdateModelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_model::UpdateModelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_model::UpdateModelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_model::UpdateModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_model::UpdateModelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_model::UpdateModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_model_version::UpdateModelVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_model_version::UpdateModelVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_model_version::UpdateModelVersionError> for Error {
    fn from(err: crate::operation::update_model_version::UpdateModelVersionError) -> Self {
        match err {
            crate::operation::update_model_version::UpdateModelVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_model_version::UpdateModelVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_model_version::UpdateModelVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_model_version::UpdateModelVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_model_version::UpdateModelVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_model_version::UpdateModelVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_model_version::UpdateModelVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_model_version_status::UpdateModelVersionStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_model_version_status::UpdateModelVersionStatusError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_model_version_status::UpdateModelVersionStatusError> for Error {
    fn from(err: crate::operation::update_model_version_status::UpdateModelVersionStatusError) -> Self {
        match err {
            crate::operation::update_model_version_status::UpdateModelVersionStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_model_version_status::UpdateModelVersionStatusError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_model_version_status::UpdateModelVersionStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_model_version_status::UpdateModelVersionStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_model_version_status::UpdateModelVersionStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_model_version_status::UpdateModelVersionStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_model_version_status::UpdateModelVersionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rule_metadata::UpdateRuleMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rule_metadata::UpdateRuleMetadataError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_rule_metadata::UpdateRuleMetadataError> for Error {
    fn from(err: crate::operation::update_rule_metadata::UpdateRuleMetadataError) -> Self {
        match err {
            crate::operation::update_rule_metadata::UpdateRuleMetadataError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_rule_metadata::UpdateRuleMetadataError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_rule_metadata::UpdateRuleMetadataError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_rule_metadata::UpdateRuleMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_rule_metadata::UpdateRuleMetadataError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_rule_metadata::UpdateRuleMetadataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_rule_metadata::UpdateRuleMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rule_version::UpdateRuleVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rule_version::UpdateRuleVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_rule_version::UpdateRuleVersionError> for Error {
    fn from(err: crate::operation::update_rule_version::UpdateRuleVersionError) -> Self {
        match err {
            crate::operation::update_rule_version::UpdateRuleVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_rule_version::UpdateRuleVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_rule_version::UpdateRuleVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_rule_version::UpdateRuleVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_rule_version::UpdateRuleVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_rule_version::UpdateRuleVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_rule_version::UpdateRuleVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_variable::UpdateVariableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_variable::UpdateVariableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_variable::UpdateVariableError> for Error {
    fn from(err: crate::operation::update_variable::UpdateVariableError) -> Self {
        match err {
            crate::operation::update_variable::UpdateVariableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_variable::UpdateVariableError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_variable::UpdateVariableError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_variable::UpdateVariableError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_variable::UpdateVariableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_variable::UpdateVariableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_variable::UpdateVariableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ResourceUnavailableException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
