// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>An exception indicating Amazon Fraud Detector does not have the needed permissions. This can occur if you submit a request, such as <code>PutExternalModel</code>, that specifies a role that is not in your account.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>An exception indicating there was a conflict during a delete operation.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>An exception indicating an internal server error.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>An exception indicating the specified resource was not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>An exception indicating that the attached customer-owned (external) model threw an exception when Amazon Fraud Detector invoked the model.</p>
    ResourceUnavailableException(crate::error::ResourceUnavailableException),
    /// <p>An exception indicating a throttling error.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>An exception indicating a specified value is not allowed.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchCreateVariableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchCreateVariableError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchCreateVariableError> for Error {
    fn from(err: crate::error::BatchCreateVariableError) -> Self {
        match err {
            crate::error::BatchCreateVariableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchCreateVariableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchCreateVariableError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchCreateVariableError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchCreateVariableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetVariableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchGetVariableError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchGetVariableError> for Error {
    fn from(err: crate::error::BatchGetVariableError) -> Self {
        match err {
            crate::error::BatchGetVariableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchGetVariableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchGetVariableError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchGetVariableError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchGetVariableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelBatchImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelBatchImportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelBatchImportJobError> for Error {
    fn from(err: crate::error::CancelBatchImportJobError) -> Self {
        match err {
            crate::error::CancelBatchImportJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CancelBatchImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelBatchImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelBatchImportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelBatchImportJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CancelBatchImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelBatchPredictionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelBatchPredictionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelBatchPredictionJobError> for Error {
    fn from(err: crate::error::CancelBatchPredictionJobError) -> Self {
        match err {
            crate::error::CancelBatchPredictionJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CancelBatchPredictionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelBatchPredictionJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelBatchPredictionJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelBatchPredictionJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CancelBatchPredictionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBatchImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBatchImportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBatchImportJobError> for Error {
    fn from(err: crate::error::CreateBatchImportJobError) -> Self {
        match err {
            crate::error::CreateBatchImportJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateBatchImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateBatchImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateBatchImportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateBatchImportJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateBatchImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBatchPredictionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBatchPredictionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBatchPredictionJobError> for Error {
    fn from(err: crate::error::CreateBatchPredictionJobError) -> Self {
        match err {
            crate::error::CreateBatchPredictionJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateBatchPredictionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateBatchPredictionJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateBatchPredictionJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateBatchPredictionJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateBatchPredictionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDetectorVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDetectorVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDetectorVersionError> for Error {
    fn from(err: crate::error::CreateDetectorVersionError) -> Self {
        match err {
            crate::error::CreateDetectorVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDetectorVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateDetectorVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateDetectorVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateDetectorVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateDetectorVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateModelError> for Error {
    fn from(err: crate::error::CreateModelError) -> Self {
        match err {
            crate::error::CreateModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateModelVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateModelVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateModelVersionError> for Error {
    fn from(err: crate::error::CreateModelVersionError) -> Self {
        match err {
            crate::error::CreateModelVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateModelVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateModelVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateModelVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateModelVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateModelVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRuleError> for Error {
    fn from(err: crate::error::CreateRuleError) -> Self {
        match err {
            crate::error::CreateRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVariableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateVariableError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVariableError> for Error {
    fn from(err: crate::error::CreateVariableError) -> Self {
        match err {
            crate::error::CreateVariableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateVariableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateVariableError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateVariableError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateVariableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBatchImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBatchImportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBatchImportJobError> for Error {
    fn from(err: crate::error::DeleteBatchImportJobError) -> Self {
        match err {
            crate::error::DeleteBatchImportJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteBatchImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteBatchImportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteBatchImportJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteBatchImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBatchPredictionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBatchPredictionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBatchPredictionJobError> for Error {
    fn from(err: crate::error::DeleteBatchPredictionJobError) -> Self {
        match err {
            crate::error::DeleteBatchPredictionJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteBatchPredictionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteBatchPredictionJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteBatchPredictionJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteBatchPredictionJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDetectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDetectorError> for Error {
    fn from(err: crate::error::DeleteDetectorError) -> Self {
        match err {
            crate::error::DeleteDetectorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDetectorError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteDetectorError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteDetectorError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteDetectorError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDetectorVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDetectorVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDetectorVersionError> for Error {
    fn from(err: crate::error::DeleteDetectorVersionError) -> Self {
        match err {
            crate::error::DeleteDetectorVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDetectorVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteDetectorVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteDetectorVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDetectorVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteDetectorVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteDetectorVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEntityTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEntityTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEntityTypeError> for Error {
    fn from(err: crate::error::DeleteEntityTypeError) -> Self {
        match err {
            crate::error::DeleteEntityTypeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteEntityTypeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteEntityTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteEntityTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteEntityTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteEntityTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteEventError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEventError> for Error {
    fn from(err: crate::error::DeleteEventError) -> Self {
        match err {
            crate::error::DeleteEventError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteEventError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteEventError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteEventError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEventsByEventTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEventsByEventTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEventsByEventTypeError> for Error {
    fn from(err: crate::error::DeleteEventsByEventTypeError) -> Self {
        match err {
            crate::error::DeleteEventsByEventTypeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteEventsByEventTypeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteEventsByEventTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteEventsByEventTypeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteEventsByEventTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteEventsByEventTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteEventsByEventTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEventTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteEventTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEventTypeError> for Error {
    fn from(err: crate::error::DeleteEventTypeError) -> Self {
        match err {
            crate::error::DeleteEventTypeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteEventTypeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteEventTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteEventTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteEventTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteEventTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteExternalModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteExternalModelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteExternalModelError> for Error {
    fn from(err: crate::error::DeleteExternalModelError) -> Self {
        match err {
            crate::error::DeleteExternalModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteExternalModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteExternalModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteExternalModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteExternalModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteExternalModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLabelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteLabelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLabelError> for Error {
    fn from(err: crate::error::DeleteLabelError) -> Self {
        match err {
            crate::error::DeleteLabelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteLabelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteLabelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteLabelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteLabelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteModelError> for Error {
    fn from(err: crate::error::DeleteModelError) -> Self {
        match err {
            crate::error::DeleteModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteModelVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteModelVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteModelVersionError> for Error {
    fn from(err: crate::error::DeleteModelVersionError) -> Self {
        match err {
            crate::error::DeleteModelVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteModelVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteModelVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteModelVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteModelVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteModelVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteOutcomeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteOutcomeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOutcomeError> for Error {
    fn from(err: crate::error::DeleteOutcomeError) -> Self {
        match err {
            crate::error::DeleteOutcomeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteOutcomeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteOutcomeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteOutcomeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteOutcomeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteOutcomeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRuleError> for Error {
    fn from(err: crate::error::DeleteRuleError) -> Self {
        match err {
            crate::error::DeleteRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVariableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVariableError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVariableError> for Error {
    fn from(err: crate::error::DeleteVariableError) -> Self {
        match err {
            crate::error::DeleteVariableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteVariableError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteVariableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteVariableError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteVariableError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteVariableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDetectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDetectorError> for Error {
    fn from(err: crate::error::DescribeDetectorError) -> Self {
        match err {
            crate::error::DescribeDetectorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeDetectorError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeDetectorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDetectorError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeDetectorError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeModelVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeModelVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeModelVersionsError> for Error {
    fn from(err: crate::error::DescribeModelVersionsError) -> Self {
        match err {
            crate::error::DescribeModelVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeModelVersionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeModelVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeModelVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeModelVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeModelVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBatchImportJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBatchImportJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBatchImportJobsError> for Error {
    fn from(err: crate::error::GetBatchImportJobsError) -> Self {
        match err {
            crate::error::GetBatchImportJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetBatchImportJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetBatchImportJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetBatchImportJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetBatchImportJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetBatchImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBatchPredictionJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBatchPredictionJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBatchPredictionJobsError> for Error {
    fn from(err: crate::error::GetBatchPredictionJobsError) -> Self {
        match err {
            crate::error::GetBatchPredictionJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetBatchPredictionJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetBatchPredictionJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetBatchPredictionJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetBatchPredictionJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetBatchPredictionJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetDeleteEventsByEventTypeStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetDeleteEventsByEventTypeStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDeleteEventsByEventTypeStatusError> for Error {
    fn from(err: crate::error::GetDeleteEventsByEventTypeStatusError) -> Self {
        match err {
            crate::error::GetDeleteEventsByEventTypeStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDeleteEventsByEventTypeStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetDeleteEventsByEventTypeStatusError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::GetDeleteEventsByEventTypeStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetDeleteEventsByEventTypeStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetDeleteEventsByEventTypeStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDetectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDetectorsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDetectorsError> for Error {
    fn from(err: crate::error::GetDetectorsError) -> Self {
        match err {
            crate::error::GetDetectorsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDetectorsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetDetectorsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetDetectorsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetDetectorsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetDetectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDetectorVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDetectorVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDetectorVersionError> for Error {
    fn from(err: crate::error::GetDetectorVersionError) -> Self {
        match err {
            crate::error::GetDetectorVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDetectorVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetDetectorVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetDetectorVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetDetectorVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetDetectorVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEntityTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetEntityTypesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEntityTypesError> for Error {
    fn from(err: crate::error::GetEntityTypesError) -> Self {
        match err {
            crate::error::GetEntityTypesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEntityTypesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEntityTypesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEntityTypesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetEntityTypesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEntityTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetEventError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEventError> for Error {
    fn from(err: crate::error::GetEventError) -> Self {
        match err {
            crate::error::GetEventError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEventError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEventError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEventError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetEventError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEventPredictionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetEventPredictionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEventPredictionError> for Error {
    fn from(err: crate::error::GetEventPredictionError) -> Self {
        match err {
            crate::error::GetEventPredictionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEventPredictionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetEventPredictionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEventPredictionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEventPredictionError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::GetEventPredictionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetEventPredictionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEventPredictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEventPredictionMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetEventPredictionMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEventPredictionMetadataError> for Error {
    fn from(err: crate::error::GetEventPredictionMetadataError) -> Self {
        match err {
            crate::error::GetEventPredictionMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEventPredictionMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEventPredictionMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEventPredictionMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetEventPredictionMetadataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEventPredictionMetadataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEventTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetEventTypesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEventTypesError> for Error {
    fn from(err: crate::error::GetEventTypesError) -> Self {
        match err {
            crate::error::GetEventTypesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEventTypesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEventTypesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEventTypesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetEventTypesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEventTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetExternalModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetExternalModelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetExternalModelsError> for Error {
    fn from(err: crate::error::GetExternalModelsError) -> Self {
        match err {
            crate::error::GetExternalModelsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetExternalModelsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetExternalModelsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetExternalModelsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetExternalModelsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetExternalModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetKMSEncryptionKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetKMSEncryptionKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetKMSEncryptionKeyError> for Error {
    fn from(err: crate::error::GetKMSEncryptionKeyError) -> Self {
        match err {
            crate::error::GetKMSEncryptionKeyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetKMSEncryptionKeyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetKMSEncryptionKeyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetKMSEncryptionKeyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetKMSEncryptionKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLabelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetLabelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLabelsError> for Error {
    fn from(err: crate::error::GetLabelsError) -> Self {
        match err {
            crate::error::GetLabelsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLabelsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetLabelsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetLabelsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetLabelsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetLabelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetModelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetModelsError> for Error {
    fn from(err: crate::error::GetModelsError) -> Self {
        match err {
            crate::error::GetModelsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetModelsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetModelsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetModelsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetModelsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetModelVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetModelVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetModelVersionError> for Error {
    fn from(err: crate::error::GetModelVersionError) -> Self {
        match err {
            crate::error::GetModelVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetModelVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetModelVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetModelVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetModelVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetModelVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOutcomesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetOutcomesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOutcomesError> for Error {
    fn from(err: crate::error::GetOutcomesError) -> Self {
        match err {
            crate::error::GetOutcomesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetOutcomesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetOutcomesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetOutcomesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetOutcomesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetOutcomesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRulesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRulesError> for Error {
    fn from(err: crate::error::GetRulesError) -> Self {
        match err {
            crate::error::GetRulesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRulesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetRulesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetRulesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetRulesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVariablesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVariablesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVariablesError> for Error {
    fn from(err: crate::error::GetVariablesError) -> Self {
        match err {
            crate::error::GetVariablesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetVariablesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetVariablesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetVariablesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetVariablesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetVariablesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEventPredictionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEventPredictionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEventPredictionsError> for Error {
    fn from(err: crate::error::ListEventPredictionsError) -> Self {
        match err {
            crate::error::ListEventPredictionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListEventPredictionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEventPredictionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListEventPredictionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListEventPredictionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutDetectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutDetectorError> for Error {
    fn from(err: crate::error::PutDetectorError) -> Self {
        match err {
            crate::error::PutDetectorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutDetectorError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutDetectorError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutDetectorError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutDetectorError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutEntityTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutEntityTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutEntityTypeError> for Error {
    fn from(err: crate::error::PutEntityTypeError) -> Self {
        match err {
            crate::error::PutEntityTypeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutEntityTypeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutEntityTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutEntityTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutEntityTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutEntityTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutEventTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutEventTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutEventTypeError> for Error {
    fn from(err: crate::error::PutEventTypeError) -> Self {
        match err {
            crate::error::PutEventTypeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutEventTypeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutEventTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutEventTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutEventTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutEventTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutExternalModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutExternalModelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutExternalModelError> for Error {
    fn from(err: crate::error::PutExternalModelError) -> Self {
        match err {
            crate::error::PutExternalModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutExternalModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutExternalModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutExternalModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutExternalModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutExternalModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutKMSEncryptionKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutKMSEncryptionKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutKMSEncryptionKeyError> for Error {
    fn from(err: crate::error::PutKMSEncryptionKeyError) -> Self {
        match err {
            crate::error::PutKMSEncryptionKeyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutKMSEncryptionKeyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutKMSEncryptionKeyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutKMSEncryptionKeyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutKMSEncryptionKeyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutKMSEncryptionKeyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutKMSEncryptionKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutLabelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutLabelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutLabelError> for Error {
    fn from(err: crate::error::PutLabelError) -> Self {
        match err {
            crate::error::PutLabelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutLabelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutLabelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutLabelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutLabelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutLabelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutOutcomeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutOutcomeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutOutcomeError> for Error {
    fn from(err: crate::error::PutOutcomeError) -> Self {
        match err {
            crate::error::PutOutcomeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutOutcomeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutOutcomeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutOutcomeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutOutcomeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutOutcomeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SendEventError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendEventError> for Error {
    fn from(err: crate::error::SendEventError) -> Self {
        match err {
            crate::error::SendEventError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SendEventError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::SendEventError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SendEventError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SendEventError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SendEventError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SendEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDetectorVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDetectorVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDetectorVersionError> for Error {
    fn from(err: crate::error::UpdateDetectorVersionError) -> Self {
        match err {
            crate::error::UpdateDetectorVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDetectorVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDetectorVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateDetectorVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDetectorVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDetectorVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateDetectorVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDetectorVersionMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDetectorVersionMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDetectorVersionMetadataError> for Error {
    fn from(err: crate::error::UpdateDetectorVersionMetadataError) -> Self {
        match err {
            crate::error::UpdateDetectorVersionMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDetectorVersionMetadataError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDetectorVersionMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateDetectorVersionMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDetectorVersionMetadataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateDetectorVersionMetadataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDetectorVersionStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDetectorVersionStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDetectorVersionStatusError> for Error {
    fn from(err: crate::error::UpdateDetectorVersionStatusError) -> Self {
        match err {
            crate::error::UpdateDetectorVersionStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDetectorVersionStatusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDetectorVersionStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateDetectorVersionStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDetectorVersionStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDetectorVersionStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateDetectorVersionStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEventLabelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateEventLabelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEventLabelError> for Error {
    fn from(err: crate::error::UpdateEventLabelError) -> Self {
        match err {
            crate::error::UpdateEventLabelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateEventLabelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateEventLabelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateEventLabelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateEventLabelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateEventLabelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateEventLabelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateModelError> for Error {
    fn from(err: crate::error::UpdateModelError) -> Self {
        match err {
            crate::error::UpdateModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateModelVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateModelVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateModelVersionError> for Error {
    fn from(err: crate::error::UpdateModelVersionError) -> Self {
        match err {
            crate::error::UpdateModelVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateModelVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateModelVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateModelVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateModelVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateModelVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateModelVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateModelVersionStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateModelVersionStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateModelVersionStatusError> for Error {
    fn from(err: crate::error::UpdateModelVersionStatusError) -> Self {
        match err {
            crate::error::UpdateModelVersionStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateModelVersionStatusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateModelVersionStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateModelVersionStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateModelVersionStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateModelVersionStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateModelVersionStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRuleMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRuleMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRuleMetadataError> for Error {
    fn from(err: crate::error::UpdateRuleMetadataError) -> Self {
        match err {
            crate::error::UpdateRuleMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateRuleMetadataError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateRuleMetadataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateRuleMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateRuleMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateRuleMetadataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateRuleMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRuleVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRuleVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRuleVersionError> for Error {
    fn from(err: crate::error::UpdateRuleVersionError) -> Self {
        match err {
            crate::error::UpdateRuleVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateRuleVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateRuleVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateRuleVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateRuleVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateRuleVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateRuleVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVariableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateVariableError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVariableError> for Error {
    fn from(err: crate::error::UpdateVariableError) -> Self {
        match err {
            crate::error::UpdateVariableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateVariableError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVariableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateVariableError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateVariableError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateVariableError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateVariableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
