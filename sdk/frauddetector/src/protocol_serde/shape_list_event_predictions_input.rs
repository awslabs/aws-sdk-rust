// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_event_predictions_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_event_predictions::ListEventPredictionsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.event_id {
        #[allow(unused_mut)]
        let mut object_2 = object.key("eventId").start_object();
        crate::protocol_serde::shape_filter_condition::ser_filter_condition(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.event_type {
        #[allow(unused_mut)]
        let mut object_4 = object.key("eventType").start_object();
        crate::protocol_serde::shape_filter_condition::ser_filter_condition(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.detector_id {
        #[allow(unused_mut)]
        let mut object_6 = object.key("detectorId").start_object();
        crate::protocol_serde::shape_filter_condition::ser_filter_condition(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.detector_version_id {
        #[allow(unused_mut)]
        let mut object_8 = object.key("detectorVersionId").start_object();
        crate::protocol_serde::shape_filter_condition::ser_filter_condition(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.prediction_time_range {
        #[allow(unused_mut)]
        let mut object_10 = object.key("predictionTimeRange").start_object();
        crate::protocol_serde::shape_prediction_time_range::ser_prediction_time_range(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.next_token {
        object.key("nextToken").string(var_11.as_str());
    }
    if let Some(var_12) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    Ok(())
}
