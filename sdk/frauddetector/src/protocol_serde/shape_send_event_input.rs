// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_event_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::send_event::SendEventInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.event_id {
        object.key("eventId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.event_type_name {
        object.key("eventTypeName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.event_timestamp {
        object.key("eventTimestamp").string(var_3.as_str());
    }
    if let Some(var_4) = &input.event_variables {
        #[allow(unused_mut)]
        let mut object_5 = object.key("eventVariables").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.assigned_label {
        object.key("assignedLabel").string(var_8.as_str());
    }
    if let Some(var_9) = &input.label_timestamp {
        object.key("labelTimestamp").string(var_9.as_str());
    }
    if let Some(var_10) = &input.entities {
        let mut array_11 = object.key("entities").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_entity::ser_entity(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}
