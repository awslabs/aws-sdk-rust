// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_detector_version_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_detector_version::UpdateDetectorVersionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.detector_id {
        object.key("detectorId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.detector_version_id {
        object.key("detectorVersionId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.external_model_endpoints {
        let mut array_4 = object.key("externalModelEndpoints").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.rules {
        let mut array_7 = object.key("rules").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_rule::ser_rule(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.description {
        object.key("description").string(var_10.as_str());
    }
    if let Some(var_11) = &input.model_versions {
        let mut array_12 = object.key("modelVersions").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_model_version::ser_model_version(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.rule_execution_mode {
        object.key("ruleExecutionMode").string(var_15.as_str());
    }
    Ok(())
}
