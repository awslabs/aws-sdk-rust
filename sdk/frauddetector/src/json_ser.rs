// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_variable_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreateVariableInput,
) {
    if let Some(var_1) = &input.variable_entries {
        let mut array_2 = object.key("variableEntries").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_variable_entry(
                    &mut object_4,
                    item_3,
                );
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("tags").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_8, item_7);
                object_8.finish();
            }
        }
        array_6.finish();
    }
}

pub fn serialize_structure_crate_input_batch_get_variable_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetVariableInput,
) {
    if let Some(var_9) = &input.names {
        let mut array_10 = object.key("names").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11);
            }
        }
        array_10.finish();
    }
}

pub fn serialize_structure_crate_input_cancel_batch_prediction_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelBatchPredictionJobInput,
) {
    if let Some(var_12) = &input.job_id {
        object.key("jobId").string(var_12);
    }
}

pub fn serialize_structure_crate_input_create_batch_prediction_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBatchPredictionJobInput,
) {
    if let Some(var_13) = &input.job_id {
        object.key("jobId").string(var_13);
    }
    if let Some(var_14) = &input.input_path {
        object.key("inputPath").string(var_14);
    }
    if let Some(var_15) = &input.output_path {
        object.key("outputPath").string(var_15);
    }
    if let Some(var_16) = &input.event_type_name {
        object.key("eventTypeName").string(var_16);
    }
    if let Some(var_17) = &input.detector_name {
        object.key("detectorName").string(var_17);
    }
    if let Some(var_18) = &input.detector_version {
        object.key("detectorVersion").string(var_18);
    }
    if let Some(var_19) = &input.iam_role_arn {
        object.key("iamRoleArn").string(var_19);
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_23, item_22);
                object_23.finish();
            }
        }
        array_21.finish();
    }
}

pub fn serialize_structure_crate_input_create_detector_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDetectorVersionInput,
) {
    if let Some(var_24) = &input.detector_id {
        object.key("detectorId").string(var_24);
    }
    if let Some(var_25) = &input.description {
        object.key("description").string(var_25);
    }
    if let Some(var_26) = &input.external_model_endpoints {
        let mut array_27 = object.key("externalModelEndpoints").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28);
            }
        }
        array_27.finish();
    }
    if let Some(var_29) = &input.rules {
        let mut array_30 = object.key("rules").start_array();
        for item_31 in var_29 {
            {
                let mut object_32 = array_30.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_32, item_31);
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.model_versions {
        let mut array_34 = object.key("modelVersions").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_version(
                    &mut object_36,
                    item_35,
                );
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.rule_execution_mode {
        object.key("ruleExecutionMode").string(var_37.as_str());
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
}

pub fn serialize_structure_crate_input_create_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelInput,
) {
    if let Some(var_42) = &input.model_id {
        object.key("modelId").string(var_42);
    }
    if let Some(var_43) = &input.model_type {
        object.key("modelType").string(var_43.as_str());
    }
    if let Some(var_44) = &input.description {
        object.key("description").string(var_44);
    }
    if let Some(var_45) = &input.event_type_name {
        object.key("eventTypeName").string(var_45);
    }
    if let Some(var_46) = &input.tags {
        let mut array_47 = object.key("tags").start_array();
        for item_48 in var_46 {
            {
                let mut object_49 = array_47.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_49, item_48);
                object_49.finish();
            }
        }
        array_47.finish();
    }
}

pub fn serialize_structure_crate_input_create_model_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelVersionInput,
) {
    if let Some(var_50) = &input.model_id {
        object.key("modelId").string(var_50);
    }
    if let Some(var_51) = &input.model_type {
        object.key("modelType").string(var_51.as_str());
    }
    if let Some(var_52) = &input.training_data_source {
        object.key("trainingDataSource").string(var_52.as_str());
    }
    if let Some(var_53) = &input.training_data_schema {
        let mut object_54 = object.key("trainingDataSchema").start_object();
        crate::json_ser::serialize_structure_crate_model_training_data_schema(
            &mut object_54,
            var_53,
        );
        object_54.finish();
    }
    if let Some(var_55) = &input.external_events_detail {
        let mut object_56 = object.key("externalEventsDetail").start_object();
        crate::json_ser::serialize_structure_crate_model_external_events_detail(
            &mut object_56,
            var_55,
        );
        object_56.finish();
    }
    if let Some(var_57) = &input.tags {
        let mut array_58 = object.key("tags").start_array();
        for item_59 in var_57 {
            {
                let mut object_60 = array_58.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_60, item_59);
                object_60.finish();
            }
        }
        array_58.finish();
    }
}

pub fn serialize_structure_crate_input_create_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRuleInput,
) {
    if let Some(var_61) = &input.rule_id {
        object.key("ruleId").string(var_61);
    }
    if let Some(var_62) = &input.detector_id {
        object.key("detectorId").string(var_62);
    }
    if let Some(var_63) = &input.description {
        object.key("description").string(var_63);
    }
    if let Some(var_64) = &input.expression {
        object.key("expression").string(var_64);
    }
    if let Some(var_65) = &input.language {
        object.key("language").string(var_65.as_str());
    }
    if let Some(var_66) = &input.outcomes {
        let mut array_67 = object.key("outcomes").start_array();
        for item_68 in var_66 {
            {
                array_67.value().string(item_68);
            }
        }
        array_67.finish();
    }
    if let Some(var_69) = &input.tags {
        let mut array_70 = object.key("tags").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_72, item_71);
                object_72.finish();
            }
        }
        array_70.finish();
    }
}

pub fn serialize_structure_crate_input_create_variable_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVariableInput,
) {
    if let Some(var_73) = &input.name {
        object.key("name").string(var_73);
    }
    if let Some(var_74) = &input.data_type {
        object.key("dataType").string(var_74.as_str());
    }
    if let Some(var_75) = &input.data_source {
        object.key("dataSource").string(var_75.as_str());
    }
    if let Some(var_76) = &input.default_value {
        object.key("defaultValue").string(var_76);
    }
    if let Some(var_77) = &input.description {
        object.key("description").string(var_77);
    }
    if let Some(var_78) = &input.variable_type {
        object.key("variableType").string(var_78);
    }
    if let Some(var_79) = &input.tags {
        let mut array_80 = object.key("tags").start_array();
        for item_81 in var_79 {
            {
                let mut object_82 = array_80.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_82, item_81);
                object_82.finish();
            }
        }
        array_80.finish();
    }
}

pub fn serialize_structure_crate_input_delete_batch_prediction_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBatchPredictionJobInput,
) {
    if let Some(var_83) = &input.job_id {
        object.key("jobId").string(var_83);
    }
}

pub fn serialize_structure_crate_input_delete_detector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDetectorInput,
) {
    if let Some(var_84) = &input.detector_id {
        object.key("detectorId").string(var_84);
    }
}

pub fn serialize_structure_crate_input_delete_detector_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDetectorVersionInput,
) {
    if let Some(var_85) = &input.detector_id {
        object.key("detectorId").string(var_85);
    }
    if let Some(var_86) = &input.detector_version_id {
        object.key("detectorVersionId").string(var_86);
    }
}

pub fn serialize_structure_crate_input_delete_entity_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEntityTypeInput,
) {
    if let Some(var_87) = &input.name {
        object.key("name").string(var_87);
    }
}

pub fn serialize_structure_crate_input_delete_event_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEventInput,
) {
    if let Some(var_88) = &input.event_id {
        object.key("eventId").string(var_88);
    }
    if let Some(var_89) = &input.event_type_name {
        object.key("eventTypeName").string(var_89);
    }
}

pub fn serialize_structure_crate_input_delete_event_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEventTypeInput,
) {
    if let Some(var_90) = &input.name {
        object.key("name").string(var_90);
    }
}

pub fn serialize_structure_crate_input_delete_external_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExternalModelInput,
) {
    if let Some(var_91) = &input.model_endpoint {
        object.key("modelEndpoint").string(var_91);
    }
}

pub fn serialize_structure_crate_input_delete_label_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLabelInput,
) {
    if let Some(var_92) = &input.name {
        object.key("name").string(var_92);
    }
}

pub fn serialize_structure_crate_input_delete_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelInput,
) {
    if let Some(var_93) = &input.model_id {
        object.key("modelId").string(var_93);
    }
    if let Some(var_94) = &input.model_type {
        object.key("modelType").string(var_94.as_str());
    }
}

pub fn serialize_structure_crate_input_delete_model_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelVersionInput,
) {
    if let Some(var_95) = &input.model_id {
        object.key("modelId").string(var_95);
    }
    if let Some(var_96) = &input.model_type {
        object.key("modelType").string(var_96.as_str());
    }
    if let Some(var_97) = &input.model_version_number {
        object.key("modelVersionNumber").string(var_97);
    }
}

pub fn serialize_structure_crate_input_delete_outcome_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOutcomeInput,
) {
    if let Some(var_98) = &input.name {
        object.key("name").string(var_98);
    }
}

pub fn serialize_structure_crate_input_delete_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRuleInput,
) {
    if let Some(var_99) = &input.rule {
        let mut object_100 = object.key("rule").start_object();
        crate::json_ser::serialize_structure_crate_model_rule(&mut object_100, var_99);
        object_100.finish();
    }
}

pub fn serialize_structure_crate_input_delete_variable_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVariableInput,
) {
    if let Some(var_101) = &input.name {
        object.key("name").string(var_101);
    }
}

pub fn serialize_structure_crate_input_describe_detector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDetectorInput,
) {
    if let Some(var_102) = &input.detector_id {
        object.key("detectorId").string(var_102);
    }
    if let Some(var_103) = &input.next_token {
        object.key("nextToken").string(var_103);
    }
    if let Some(var_104) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_104).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_model_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelVersionsInput,
) {
    if let Some(var_105) = &input.model_id {
        object.key("modelId").string(var_105);
    }
    if let Some(var_106) = &input.model_version_number {
        object.key("modelVersionNumber").string(var_106);
    }
    if let Some(var_107) = &input.model_type {
        object.key("modelType").string(var_107.as_str());
    }
    if let Some(var_108) = &input.next_token {
        object.key("nextToken").string(var_108);
    }
    if let Some(var_109) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_109).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_batch_prediction_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBatchPredictionJobsInput,
) {
    if let Some(var_110) = &input.job_id {
        object.key("jobId").string(var_110);
    }
    if let Some(var_111) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_111).into()),
        );
    }
    if let Some(var_112) = &input.next_token {
        object.key("nextToken").string(var_112);
    }
}

pub fn serialize_structure_crate_input_get_detectors_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDetectorsInput,
) {
    if let Some(var_113) = &input.detector_id {
        object.key("detectorId").string(var_113);
    }
    if let Some(var_114) = &input.next_token {
        object.key("nextToken").string(var_114);
    }
    if let Some(var_115) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_115).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_detector_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDetectorVersionInput,
) {
    if let Some(var_116) = &input.detector_id {
        object.key("detectorId").string(var_116);
    }
    if let Some(var_117) = &input.detector_version_id {
        object.key("detectorVersionId").string(var_117);
    }
}

pub fn serialize_structure_crate_input_get_entity_types_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEntityTypesInput,
) {
    if let Some(var_118) = &input.name {
        object.key("name").string(var_118);
    }
    if let Some(var_119) = &input.next_token {
        object.key("nextToken").string(var_119);
    }
    if let Some(var_120) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_120).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_event_prediction_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEventPredictionInput,
) {
    if let Some(var_121) = &input.detector_id {
        object.key("detectorId").string(var_121);
    }
    if let Some(var_122) = &input.detector_version_id {
        object.key("detectorVersionId").string(var_122);
    }
    if let Some(var_123) = &input.event_id {
        object.key("eventId").string(var_123);
    }
    if let Some(var_124) = &input.event_type_name {
        object.key("eventTypeName").string(var_124);
    }
    if let Some(var_125) = &input.entities {
        let mut array_126 = object.key("entities").start_array();
        for item_127 in var_125 {
            {
                let mut object_128 = array_126.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity(&mut object_128, item_127);
                object_128.finish();
            }
        }
        array_126.finish();
    }
    if let Some(var_129) = &input.event_timestamp {
        object.key("eventTimestamp").string(var_129);
    }
    if let Some(var_130) = &input.event_variables {
        let mut object_131 = object.key("eventVariables").start_object();
        for (key_132, value_133) in var_130 {
            {
                object_131.key(key_132).string(value_133);
            }
        }
        object_131.finish();
    }
    if let Some(var_134) = &input.external_model_endpoint_data_blobs {
        let mut object_135 = object.key("externalModelEndpointDataBlobs").start_object();
        for (key_136, value_137) in var_134 {
            {
                let mut object_138 = object_135.key(key_136).start_object();
                crate::json_ser::serialize_structure_crate_model_model_endpoint_data_blob(
                    &mut object_138,
                    value_137,
                );
                object_138.finish();
            }
        }
        object_135.finish();
    }
}

pub fn serialize_structure_crate_input_get_event_types_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEventTypesInput,
) {
    if let Some(var_139) = &input.name {
        object.key("name").string(var_139);
    }
    if let Some(var_140) = &input.next_token {
        object.key("nextToken").string(var_140);
    }
    if let Some(var_141) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_141).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_external_models_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetExternalModelsInput,
) {
    if let Some(var_142) = &input.model_endpoint {
        object.key("modelEndpoint").string(var_142);
    }
    if let Some(var_143) = &input.next_token {
        object.key("nextToken").string(var_143);
    }
    if let Some(var_144) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_144).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_labels_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLabelsInput,
) {
    if let Some(var_145) = &input.name {
        object.key("name").string(var_145);
    }
    if let Some(var_146) = &input.next_token {
        object.key("nextToken").string(var_146);
    }
    if let Some(var_147) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_147).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_models_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetModelsInput,
) {
    if let Some(var_148) = &input.model_id {
        object.key("modelId").string(var_148);
    }
    if let Some(var_149) = &input.model_type {
        object.key("modelType").string(var_149.as_str());
    }
    if let Some(var_150) = &input.next_token {
        object.key("nextToken").string(var_150);
    }
    if let Some(var_151) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_151).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_model_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetModelVersionInput,
) {
    if let Some(var_152) = &input.model_id {
        object.key("modelId").string(var_152);
    }
    if let Some(var_153) = &input.model_type {
        object.key("modelType").string(var_153.as_str());
    }
    if let Some(var_154) = &input.model_version_number {
        object.key("modelVersionNumber").string(var_154);
    }
}

pub fn serialize_structure_crate_input_get_outcomes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOutcomesInput,
) {
    if let Some(var_155) = &input.name {
        object.key("name").string(var_155);
    }
    if let Some(var_156) = &input.next_token {
        object.key("nextToken").string(var_156);
    }
    if let Some(var_157) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_157).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_rules_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRulesInput,
) {
    if let Some(var_158) = &input.rule_id {
        object.key("ruleId").string(var_158);
    }
    if let Some(var_159) = &input.detector_id {
        object.key("detectorId").string(var_159);
    }
    if let Some(var_160) = &input.rule_version {
        object.key("ruleVersion").string(var_160);
    }
    if let Some(var_161) = &input.next_token {
        object.key("nextToken").string(var_161);
    }
    if let Some(var_162) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_162).into()),
        );
    }
}

pub fn serialize_structure_crate_input_get_variables_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetVariablesInput,
) {
    if let Some(var_163) = &input.name {
        object.key("name").string(var_163);
    }
    if let Some(var_164) = &input.next_token {
        object.key("nextToken").string(var_164);
    }
    if let Some(var_165) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_165).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_166) = &input.resource_arn {
        object.key("resourceARN").string(var_166);
    }
    if let Some(var_167) = &input.next_token {
        object.key("nextToken").string(var_167);
    }
    if let Some(var_168) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_168).into()),
        );
    }
}

pub fn serialize_structure_crate_input_put_detector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDetectorInput,
) {
    if let Some(var_169) = &input.detector_id {
        object.key("detectorId").string(var_169);
    }
    if let Some(var_170) = &input.description {
        object.key("description").string(var_170);
    }
    if let Some(var_171) = &input.event_type_name {
        object.key("eventTypeName").string(var_171);
    }
    if let Some(var_172) = &input.tags {
        let mut array_173 = object.key("tags").start_array();
        for item_174 in var_172 {
            {
                let mut object_175 = array_173.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_175, item_174);
                object_175.finish();
            }
        }
        array_173.finish();
    }
}

pub fn serialize_structure_crate_input_put_entity_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEntityTypeInput,
) {
    if let Some(var_176) = &input.name {
        object.key("name").string(var_176);
    }
    if let Some(var_177) = &input.description {
        object.key("description").string(var_177);
    }
    if let Some(var_178) = &input.tags {
        let mut array_179 = object.key("tags").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_181, item_180);
                object_181.finish();
            }
        }
        array_179.finish();
    }
}

pub fn serialize_structure_crate_input_put_event_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEventTypeInput,
) {
    if let Some(var_182) = &input.name {
        object.key("name").string(var_182);
    }
    if let Some(var_183) = &input.description {
        object.key("description").string(var_183);
    }
    if let Some(var_184) = &input.event_variables {
        let mut array_185 = object.key("eventVariables").start_array();
        for item_186 in var_184 {
            {
                array_185.value().string(item_186);
            }
        }
        array_185.finish();
    }
    if let Some(var_187) = &input.labels {
        let mut array_188 = object.key("labels").start_array();
        for item_189 in var_187 {
            {
                array_188.value().string(item_189);
            }
        }
        array_188.finish();
    }
    if let Some(var_190) = &input.entity_types {
        let mut array_191 = object.key("entityTypes").start_array();
        for item_192 in var_190 {
            {
                array_191.value().string(item_192);
            }
        }
        array_191.finish();
    }
    if let Some(var_193) = &input.tags {
        let mut array_194 = object.key("tags").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_196, item_195);
                object_196.finish();
            }
        }
        array_194.finish();
    }
}

pub fn serialize_structure_crate_input_put_external_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutExternalModelInput,
) {
    if let Some(var_197) = &input.model_endpoint {
        object.key("modelEndpoint").string(var_197);
    }
    if let Some(var_198) = &input.model_source {
        object.key("modelSource").string(var_198.as_str());
    }
    if let Some(var_199) = &input.invoke_model_endpoint_role_arn {
        object.key("invokeModelEndpointRoleArn").string(var_199);
    }
    if let Some(var_200) = &input.input_configuration {
        let mut object_201 = object.key("inputConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_model_input_configuration(
            &mut object_201,
            var_200,
        );
        object_201.finish();
    }
    if let Some(var_202) = &input.output_configuration {
        let mut object_203 = object.key("outputConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_model_output_configuration(
            &mut object_203,
            var_202,
        );
        object_203.finish();
    }
    if let Some(var_204) = &input.model_endpoint_status {
        object.key("modelEndpointStatus").string(var_204.as_str());
    }
    if let Some(var_205) = &input.tags {
        let mut array_206 = object.key("tags").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_208, item_207);
                object_208.finish();
            }
        }
        array_206.finish();
    }
}

pub fn serialize_structure_crate_input_put_kms_encryption_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutKmsEncryptionKeyInput,
) {
    if let Some(var_209) = &input.kms_encryption_key_arn {
        object.key("kmsEncryptionKeyArn").string(var_209);
    }
}

pub fn serialize_structure_crate_input_put_label_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutLabelInput,
) {
    if let Some(var_210) = &input.name {
        object.key("name").string(var_210);
    }
    if let Some(var_211) = &input.description {
        object.key("description").string(var_211);
    }
    if let Some(var_212) = &input.tags {
        let mut array_213 = object.key("tags").start_array();
        for item_214 in var_212 {
            {
                let mut object_215 = array_213.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_215, item_214);
                object_215.finish();
            }
        }
        array_213.finish();
    }
}

pub fn serialize_structure_crate_input_put_outcome_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutOutcomeInput,
) {
    if let Some(var_216) = &input.name {
        object.key("name").string(var_216);
    }
    if let Some(var_217) = &input.description {
        object.key("description").string(var_217);
    }
    if let Some(var_218) = &input.tags {
        let mut array_219 = object.key("tags").start_array();
        for item_220 in var_218 {
            {
                let mut object_221 = array_219.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_221, item_220);
                object_221.finish();
            }
        }
        array_219.finish();
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_222) = &input.resource_arn {
        object.key("resourceARN").string(var_222);
    }
    if let Some(var_223) = &input.tags {
        let mut array_224 = object.key("tags").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_226, item_225);
                object_226.finish();
            }
        }
        array_224.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_227) = &input.resource_arn {
        object.key("resourceARN").string(var_227);
    }
    if let Some(var_228) = &input.tag_keys {
        let mut array_229 = object.key("tagKeys").start_array();
        for item_230 in var_228 {
            {
                array_229.value().string(item_230);
            }
        }
        array_229.finish();
    }
}

pub fn serialize_structure_crate_input_update_detector_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDetectorVersionInput,
) {
    if let Some(var_231) = &input.detector_id {
        object.key("detectorId").string(var_231);
    }
    if let Some(var_232) = &input.detector_version_id {
        object.key("detectorVersionId").string(var_232);
    }
    if let Some(var_233) = &input.external_model_endpoints {
        let mut array_234 = object.key("externalModelEndpoints").start_array();
        for item_235 in var_233 {
            {
                array_234.value().string(item_235);
            }
        }
        array_234.finish();
    }
    if let Some(var_236) = &input.rules {
        let mut array_237 = object.key("rules").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule(&mut object_239, item_238);
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.description {
        object.key("description").string(var_240);
    }
    if let Some(var_241) = &input.model_versions {
        let mut array_242 = object.key("modelVersions").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_version(
                    &mut object_244,
                    item_243,
                );
                object_244.finish();
            }
        }
        array_242.finish();
    }
    if let Some(var_245) = &input.rule_execution_mode {
        object.key("ruleExecutionMode").string(var_245.as_str());
    }
}

pub fn serialize_structure_crate_input_update_detector_version_metadata_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDetectorVersionMetadataInput,
) {
    if let Some(var_246) = &input.detector_id {
        object.key("detectorId").string(var_246);
    }
    if let Some(var_247) = &input.detector_version_id {
        object.key("detectorVersionId").string(var_247);
    }
    if let Some(var_248) = &input.description {
        object.key("description").string(var_248);
    }
}

pub fn serialize_structure_crate_input_update_detector_version_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDetectorVersionStatusInput,
) {
    if let Some(var_249) = &input.detector_id {
        object.key("detectorId").string(var_249);
    }
    if let Some(var_250) = &input.detector_version_id {
        object.key("detectorVersionId").string(var_250);
    }
    if let Some(var_251) = &input.status {
        object.key("status").string(var_251.as_str());
    }
}

pub fn serialize_structure_crate_input_update_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateModelInput,
) {
    if let Some(var_252) = &input.model_id {
        object.key("modelId").string(var_252);
    }
    if let Some(var_253) = &input.model_type {
        object.key("modelType").string(var_253.as_str());
    }
    if let Some(var_254) = &input.description {
        object.key("description").string(var_254);
    }
}

pub fn serialize_structure_crate_input_update_model_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateModelVersionInput,
) {
    if let Some(var_255) = &input.model_id {
        object.key("modelId").string(var_255);
    }
    if let Some(var_256) = &input.model_type {
        object.key("modelType").string(var_256.as_str());
    }
    if let Some(var_257) = &input.major_version_number {
        object.key("majorVersionNumber").string(var_257);
    }
    if let Some(var_258) = &input.external_events_detail {
        let mut object_259 = object.key("externalEventsDetail").start_object();
        crate::json_ser::serialize_structure_crate_model_external_events_detail(
            &mut object_259,
            var_258,
        );
        object_259.finish();
    }
    if let Some(var_260) = &input.tags {
        let mut array_261 = object.key("tags").start_array();
        for item_262 in var_260 {
            {
                let mut object_263 = array_261.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_263, item_262);
                object_263.finish();
            }
        }
        array_261.finish();
    }
}

pub fn serialize_structure_crate_input_update_model_version_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateModelVersionStatusInput,
) {
    if let Some(var_264) = &input.model_id {
        object.key("modelId").string(var_264);
    }
    if let Some(var_265) = &input.model_type {
        object.key("modelType").string(var_265.as_str());
    }
    if let Some(var_266) = &input.model_version_number {
        object.key("modelVersionNumber").string(var_266);
    }
    if let Some(var_267) = &input.status {
        object.key("status").string(var_267.as_str());
    }
}

pub fn serialize_structure_crate_input_update_rule_metadata_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRuleMetadataInput,
) {
    if let Some(var_268) = &input.rule {
        let mut object_269 = object.key("rule").start_object();
        crate::json_ser::serialize_structure_crate_model_rule(&mut object_269, var_268);
        object_269.finish();
    }
    if let Some(var_270) = &input.description {
        object.key("description").string(var_270);
    }
}

pub fn serialize_structure_crate_input_update_rule_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRuleVersionInput,
) {
    if let Some(var_271) = &input.rule {
        let mut object_272 = object.key("rule").start_object();
        crate::json_ser::serialize_structure_crate_model_rule(&mut object_272, var_271);
        object_272.finish();
    }
    if let Some(var_273) = &input.description {
        object.key("description").string(var_273);
    }
    if let Some(var_274) = &input.expression {
        object.key("expression").string(var_274);
    }
    if let Some(var_275) = &input.language {
        object.key("language").string(var_275.as_str());
    }
    if let Some(var_276) = &input.outcomes {
        let mut array_277 = object.key("outcomes").start_array();
        for item_278 in var_276 {
            {
                array_277.value().string(item_278);
            }
        }
        array_277.finish();
    }
    if let Some(var_279) = &input.tags {
        let mut array_280 = object.key("tags").start_array();
        for item_281 in var_279 {
            {
                let mut object_282 = array_280.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_282, item_281);
                object_282.finish();
            }
        }
        array_280.finish();
    }
}

pub fn serialize_structure_crate_input_update_variable_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVariableInput,
) {
    if let Some(var_283) = &input.name {
        object.key("name").string(var_283);
    }
    if let Some(var_284) = &input.default_value {
        object.key("defaultValue").string(var_284);
    }
    if let Some(var_285) = &input.description {
        object.key("description").string(var_285);
    }
    if let Some(var_286) = &input.variable_type {
        object.key("variableType").string(var_286);
    }
}

pub fn serialize_structure_crate_model_variable_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VariableEntry,
) {
    if let Some(var_287) = &input.name {
        object.key("name").string(var_287);
    }
    if let Some(var_288) = &input.data_type {
        object.key("dataType").string(var_288);
    }
    if let Some(var_289) = &input.data_source {
        object.key("dataSource").string(var_289);
    }
    if let Some(var_290) = &input.default_value {
        object.key("defaultValue").string(var_290);
    }
    if let Some(var_291) = &input.description {
        object.key("description").string(var_291);
    }
    if let Some(var_292) = &input.variable_type {
        object.key("variableType").string(var_292);
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_293) = &input.key {
        object.key("key").string(var_293);
    }
    if let Some(var_294) = &input.value {
        object.key("value").string(var_294);
    }
}

pub fn serialize_structure_crate_model_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Rule,
) {
    if let Some(var_295) = &input.detector_id {
        object.key("detectorId").string(var_295);
    }
    if let Some(var_296) = &input.rule_id {
        object.key("ruleId").string(var_296);
    }
    if let Some(var_297) = &input.rule_version {
        object.key("ruleVersion").string(var_297);
    }
}

pub fn serialize_structure_crate_model_model_version(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelVersion,
) {
    if let Some(var_298) = &input.model_id {
        object.key("modelId").string(var_298);
    }
    if let Some(var_299) = &input.model_type {
        object.key("modelType").string(var_299.as_str());
    }
    if let Some(var_300) = &input.model_version_number {
        object.key("modelVersionNumber").string(var_300);
    }
    if let Some(var_301) = &input.arn {
        object.key("arn").string(var_301);
    }
}

pub fn serialize_structure_crate_model_training_data_schema(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingDataSchema,
) {
    if let Some(var_302) = &input.model_variables {
        let mut array_303 = object.key("modelVariables").start_array();
        for item_304 in var_302 {
            {
                array_303.value().string(item_304);
            }
        }
        array_303.finish();
    }
    if let Some(var_305) = &input.label_schema {
        let mut object_306 = object.key("labelSchema").start_object();
        crate::json_ser::serialize_structure_crate_model_label_schema(&mut object_306, var_305);
        object_306.finish();
    }
}

pub fn serialize_structure_crate_model_external_events_detail(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExternalEventsDetail,
) {
    if let Some(var_307) = &input.data_location {
        object.key("dataLocation").string(var_307);
    }
    if let Some(var_308) = &input.data_access_role_arn {
        object.key("dataAccessRoleArn").string(var_308);
    }
}

pub fn serialize_structure_crate_model_entity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Entity,
) {
    if let Some(var_309) = &input.entity_type {
        object.key("entityType").string(var_309);
    }
    if let Some(var_310) = &input.entity_id {
        object.key("entityId").string(var_310);
    }
}

pub fn serialize_structure_crate_model_model_endpoint_data_blob(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelEndpointDataBlob,
) {
    if let Some(var_311) = &input.byte_buffer {
        object
            .key("byteBuffer")
            .string_unchecked(&smithy_types::base64::encode(var_311));
    }
    if let Some(var_312) = &input.content_type {
        object.key("contentType").string(var_312);
    }
}

pub fn serialize_structure_crate_model_model_input_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelInputConfiguration,
) {
    if let Some(var_313) = &input.event_type_name {
        object.key("eventTypeName").string(var_313);
    }
    if let Some(var_314) = &input.format {
        object.key("format").string(var_314.as_str());
    }
    if let Some(var_315) = &input.use_event_variables {
        object.key("useEventVariables").boolean(*var_315);
    }
    if let Some(var_316) = &input.json_input_template {
        object.key("jsonInputTemplate").string(var_316);
    }
    if let Some(var_317) = &input.csv_input_template {
        object.key("csvInputTemplate").string(var_317);
    }
}

pub fn serialize_structure_crate_model_model_output_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelOutputConfiguration,
) {
    if let Some(var_318) = &input.format {
        object.key("format").string(var_318.as_str());
    }
    if let Some(var_319) = &input.json_key_to_variable_map {
        let mut object_320 = object.key("jsonKeyToVariableMap").start_object();
        for (key_321, value_322) in var_319 {
            {
                object_320.key(key_321).string(value_322);
            }
        }
        object_320.finish();
    }
    if let Some(var_323) = &input.csv_index_to_variable_map {
        let mut object_324 = object.key("csvIndexToVariableMap").start_object();
        for (key_325, value_326) in var_323 {
            {
                object_324.key(key_325).string(value_326);
            }
        }
        object_324.finish();
    }
}

pub fn serialize_structure_crate_model_label_schema(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelSchema,
) {
    if let Some(var_327) = &input.label_mapper {
        let mut object_328 = object.key("labelMapper").start_object();
        for (key_329, value_330) in var_327 {
            {
                let mut array_331 = object_328.key(key_329).start_array();
                for item_332 in value_330 {
                    {
                        array_331.value().string(item_332);
                    }
                }
                array_331.finish();
            }
        }
        object_328.finish();
    }
}
