// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about the summary of an event variable that was evaluated for generating prediction. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EventVariableSummary {
    /// <p> The event variable name. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The value of the event variable. </p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p> The event variable source. </p>
    #[doc(hidden)]
    pub source: std::option::Option<std::string::String>,
}
impl EventVariableSummary {
    /// <p> The event variable name. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The value of the event variable. </p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p> The event variable source. </p>
    pub fn source(&self) -> std::option::Option<&str> {
        self.source.as_deref()
    }
}
impl std::fmt::Debug for EventVariableSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EventVariableSummary");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.field("source", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EventVariableSummary {
    /// Creates a new builder-style object to manufacture [`EventVariableSummary`](crate::types::EventVariableSummary).
    pub fn builder() -> crate::types::builders::EventVariableSummaryBuilder {
        crate::types::builders::EventVariableSummaryBuilder::default()
    }
}

/// A builder for [`EventVariableSummary`](crate::types::EventVariableSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct EventVariableSummaryBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<std::string::String>,
}
impl EventVariableSummaryBuilder {
    /// <p> The event variable name. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The event variable name. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The value of the event variable. </p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p> The value of the event variable. </p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p> The event variable source. </p>
    pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
        self.source = Some(input.into());
        self
    }
    /// <p> The event variable source. </p>
    pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// Consumes the builder and constructs a [`EventVariableSummary`](crate::types::EventVariableSummary).
    pub fn build(self) -> crate::types::EventVariableSummary {
        crate::types::EventVariableSummary {
            name: self.name,
            value: self.value,
            source: self.source,
        }
    }
}
impl std::fmt::Debug for EventVariableSummaryBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EventVariableSummaryBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.field("source", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
