// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The model version evaluated for generating prediction. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EvaluatedModelVersion {
    /// <p> The model ID. </p>
    #[doc(hidden)]
    pub model_id: std::option::Option<std::string::String>,
    /// <p> The model version. </p>
    #[doc(hidden)]
    pub model_version: std::option::Option<std::string::String>,
    /// <p>The model type. </p>
    /// <p>Valid values: <code>ONLINE_FRAUD_INSIGHTS</code> | <code>TRANSACTION_FRAUD_INSIGHTS</code> </p>
    #[doc(hidden)]
    pub model_type: std::option::Option<std::string::String>,
    /// <p> Evaluations generated for the model version. </p>
    #[doc(hidden)]
    pub evaluations: std::option::Option<std::vec::Vec<crate::types::ModelVersionEvaluation>>,
}
impl EvaluatedModelVersion {
    /// <p> The model ID. </p>
    pub fn model_id(&self) -> std::option::Option<&str> {
        self.model_id.as_deref()
    }
    /// <p> The model version. </p>
    pub fn model_version(&self) -> std::option::Option<&str> {
        self.model_version.as_deref()
    }
    /// <p>The model type. </p>
    /// <p>Valid values: <code>ONLINE_FRAUD_INSIGHTS</code> | <code>TRANSACTION_FRAUD_INSIGHTS</code> </p>
    pub fn model_type(&self) -> std::option::Option<&str> {
        self.model_type.as_deref()
    }
    /// <p> Evaluations generated for the model version. </p>
    pub fn evaluations(&self) -> std::option::Option<&[crate::types::ModelVersionEvaluation]> {
        self.evaluations.as_deref()
    }
}
impl EvaluatedModelVersion {
    /// Creates a new builder-style object to manufacture [`EvaluatedModelVersion`](crate::types::EvaluatedModelVersion).
    pub fn builder() -> crate::types::builders::EvaluatedModelVersionBuilder {
        crate::types::builders::EvaluatedModelVersionBuilder::default()
    }
}

/// A builder for [`EvaluatedModelVersion`](crate::types::EvaluatedModelVersion).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EvaluatedModelVersionBuilder {
    pub(crate) model_id: std::option::Option<std::string::String>,
    pub(crate) model_version: std::option::Option<std::string::String>,
    pub(crate) model_type: std::option::Option<std::string::String>,
    pub(crate) evaluations:
        std::option::Option<std::vec::Vec<crate::types::ModelVersionEvaluation>>,
}
impl EvaluatedModelVersionBuilder {
    /// <p> The model ID. </p>
    pub fn model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_id = Some(input.into());
        self
    }
    /// <p> The model ID. </p>
    pub fn set_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_id = input;
        self
    }
    /// <p> The model version. </p>
    pub fn model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_version = Some(input.into());
        self
    }
    /// <p> The model version. </p>
    pub fn set_model_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_version = input;
        self
    }
    /// <p>The model type. </p>
    /// <p>Valid values: <code>ONLINE_FRAUD_INSIGHTS</code> | <code>TRANSACTION_FRAUD_INSIGHTS</code> </p>
    pub fn model_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_type = Some(input.into());
        self
    }
    /// <p>The model type. </p>
    /// <p>Valid values: <code>ONLINE_FRAUD_INSIGHTS</code> | <code>TRANSACTION_FRAUD_INSIGHTS</code> </p>
    pub fn set_model_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_type = input;
        self
    }
    /// Appends an item to `evaluations`.
    ///
    /// To override the contents of this collection use [`set_evaluations`](Self::set_evaluations).
    ///
    /// <p> Evaluations generated for the model version. </p>
    pub fn evaluations(mut self, input: crate::types::ModelVersionEvaluation) -> Self {
        let mut v = self.evaluations.unwrap_or_default();
        v.push(input);
        self.evaluations = Some(v);
        self
    }
    /// <p> Evaluations generated for the model version. </p>
    pub fn set_evaluations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ModelVersionEvaluation>>,
    ) -> Self {
        self.evaluations = input;
        self
    }
    /// Consumes the builder and constructs a [`EvaluatedModelVersion`](crate::types::EvaluatedModelVersion).
    pub fn build(self) -> crate::types::EvaluatedModelVersion {
        crate::types::EvaluatedModelVersion {
            model_id: self.model_id,
            model_version: self.model_version,
            model_type: self.model_type,
            evaluations: self.evaluations,
        }
    }
}
