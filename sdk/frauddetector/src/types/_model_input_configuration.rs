// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon SageMaker model input configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModelInputConfiguration {
    /// <p>The event type name.</p>
    #[doc(hidden)]
    pub event_type_name: std::option::Option<std::string::String>,
    /// <p> The format of the model input configuration. The format differs depending on if it is passed through to SageMaker or constructed by Amazon Fraud Detector.</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::ModelInputDataFormat>,
    /// <p>The event variables.</p>
    #[doc(hidden)]
    pub use_event_variables: std::option::Option<bool>,
    /// <p> Template for constructing the JSON input-data sent to SageMaker. At event-evaluation, the placeholders for variable names in the template will be replaced with the variable values before being sent to SageMaker. </p>
    #[doc(hidden)]
    pub json_input_template: std::option::Option<std::string::String>,
    /// <p> Template for constructing the CSV input-data sent to SageMaker. At event-evaluation, the placeholders for variable-names in the template will be replaced with the variable values before being sent to SageMaker. </p>
    #[doc(hidden)]
    pub csv_input_template: std::option::Option<std::string::String>,
}
impl ModelInputConfiguration {
    /// <p>The event type name.</p>
    pub fn event_type_name(&self) -> std::option::Option<&str> {
        self.event_type_name.as_deref()
    }
    /// <p> The format of the model input configuration. The format differs depending on if it is passed through to SageMaker or constructed by Amazon Fraud Detector.</p>
    pub fn format(&self) -> std::option::Option<&crate::types::ModelInputDataFormat> {
        self.format.as_ref()
    }
    /// <p>The event variables.</p>
    pub fn use_event_variables(&self) -> std::option::Option<bool> {
        self.use_event_variables
    }
    /// <p> Template for constructing the JSON input-data sent to SageMaker. At event-evaluation, the placeholders for variable names in the template will be replaced with the variable values before being sent to SageMaker. </p>
    pub fn json_input_template(&self) -> std::option::Option<&str> {
        self.json_input_template.as_deref()
    }
    /// <p> Template for constructing the CSV input-data sent to SageMaker. At event-evaluation, the placeholders for variable-names in the template will be replaced with the variable values before being sent to SageMaker. </p>
    pub fn csv_input_template(&self) -> std::option::Option<&str> {
        self.csv_input_template.as_deref()
    }
}
impl ModelInputConfiguration {
    /// Creates a new builder-style object to manufacture [`ModelInputConfiguration`](crate::types::ModelInputConfiguration).
    pub fn builder() -> crate::types::builders::ModelInputConfigurationBuilder {
        crate::types::builders::ModelInputConfigurationBuilder::default()
    }
}

/// A builder for [`ModelInputConfiguration`](crate::types::ModelInputConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModelInputConfigurationBuilder {
    pub(crate) event_type_name: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::ModelInputDataFormat>,
    pub(crate) use_event_variables: std::option::Option<bool>,
    pub(crate) json_input_template: std::option::Option<std::string::String>,
    pub(crate) csv_input_template: std::option::Option<std::string::String>,
}
impl ModelInputConfigurationBuilder {
    /// <p>The event type name.</p>
    pub fn event_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_type_name = Some(input.into());
        self
    }
    /// <p>The event type name.</p>
    pub fn set_event_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_type_name = input;
        self
    }
    /// <p> The format of the model input configuration. The format differs depending on if it is passed through to SageMaker or constructed by Amazon Fraud Detector.</p>
    pub fn format(mut self, input: crate::types::ModelInputDataFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p> The format of the model input configuration. The format differs depending on if it is passed through to SageMaker or constructed by Amazon Fraud Detector.</p>
    pub fn set_format(
        mut self,
        input: std::option::Option<crate::types::ModelInputDataFormat>,
    ) -> Self {
        self.format = input;
        self
    }
    /// <p>The event variables.</p>
    pub fn use_event_variables(mut self, input: bool) -> Self {
        self.use_event_variables = Some(input);
        self
    }
    /// <p>The event variables.</p>
    pub fn set_use_event_variables(mut self, input: std::option::Option<bool>) -> Self {
        self.use_event_variables = input;
        self
    }
    /// <p> Template for constructing the JSON input-data sent to SageMaker. At event-evaluation, the placeholders for variable names in the template will be replaced with the variable values before being sent to SageMaker. </p>
    pub fn json_input_template(mut self, input: impl Into<std::string::String>) -> Self {
        self.json_input_template = Some(input.into());
        self
    }
    /// <p> Template for constructing the JSON input-data sent to SageMaker. At event-evaluation, the placeholders for variable names in the template will be replaced with the variable values before being sent to SageMaker. </p>
    pub fn set_json_input_template(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.json_input_template = input;
        self
    }
    /// <p> Template for constructing the CSV input-data sent to SageMaker. At event-evaluation, the placeholders for variable-names in the template will be replaced with the variable values before being sent to SageMaker. </p>
    pub fn csv_input_template(mut self, input: impl Into<std::string::String>) -> Self {
        self.csv_input_template = Some(input.into());
        self
    }
    /// <p> Template for constructing the CSV input-data sent to SageMaker. At event-evaluation, the placeholders for variable-names in the template will be replaced with the variable values before being sent to SageMaker. </p>
    pub fn set_csv_input_template(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.csv_input_template = input;
        self
    }
    /// Consumes the builder and constructs a [`ModelInputConfiguration`](crate::types::ModelInputConfiguration).
    pub fn build(self) -> crate::types::ModelInputConfiguration {
        crate::types::ModelInputConfiguration {
            event_type_name: self.event_type_name,
            format: self.format,
            use_event_variables: self.use_event_variables,
            json_input_template: self.json_input_template,
            csv_input_template: self.csv_input_template,
        }
    }
}
