// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about the summary of an event prediction. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EventPredictionSummary {
    /// <p> The event ID. </p>
    #[doc(hidden)]
    pub event_id: std::option::Option<std::string::String>,
    /// <p> The event type. </p>
    #[doc(hidden)]
    pub event_type_name: std::option::Option<std::string::String>,
    /// <p> The timestamp of the event. </p>
    #[doc(hidden)]
    pub event_timestamp: std::option::Option<std::string::String>,
    /// <p> The timestamp when the prediction was generated. </p>
    #[doc(hidden)]
    pub prediction_timestamp: std::option::Option<std::string::String>,
    /// <p> The detector ID. </p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p> The detector version ID. </p>
    #[doc(hidden)]
    pub detector_version_id: std::option::Option<std::string::String>,
}
impl EventPredictionSummary {
    /// <p> The event ID. </p>
    pub fn event_id(&self) -> std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p> The event type. </p>
    pub fn event_type_name(&self) -> std::option::Option<&str> {
        self.event_type_name.as_deref()
    }
    /// <p> The timestamp of the event. </p>
    pub fn event_timestamp(&self) -> std::option::Option<&str> {
        self.event_timestamp.as_deref()
    }
    /// <p> The timestamp when the prediction was generated. </p>
    pub fn prediction_timestamp(&self) -> std::option::Option<&str> {
        self.prediction_timestamp.as_deref()
    }
    /// <p> The detector ID. </p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p> The detector version ID. </p>
    pub fn detector_version_id(&self) -> std::option::Option<&str> {
        self.detector_version_id.as_deref()
    }
}
impl EventPredictionSummary {
    /// Creates a new builder-style object to manufacture [`EventPredictionSummary`](crate::types::EventPredictionSummary).
    pub fn builder() -> crate::types::builders::EventPredictionSummaryBuilder {
        crate::types::builders::EventPredictionSummaryBuilder::default()
    }
}

/// A builder for [`EventPredictionSummary`](crate::types::EventPredictionSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventPredictionSummaryBuilder {
    pub(crate) event_id: std::option::Option<std::string::String>,
    pub(crate) event_type_name: std::option::Option<std::string::String>,
    pub(crate) event_timestamp: std::option::Option<std::string::String>,
    pub(crate) prediction_timestamp: std::option::Option<std::string::String>,
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) detector_version_id: std::option::Option<std::string::String>,
}
impl EventPredictionSummaryBuilder {
    /// <p> The event ID. </p>
    pub fn event_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_id = Some(input.into());
        self
    }
    /// <p> The event ID. </p>
    pub fn set_event_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p> The event type. </p>
    pub fn event_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_type_name = Some(input.into());
        self
    }
    /// <p> The event type. </p>
    pub fn set_event_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_type_name = input;
        self
    }
    /// <p> The timestamp of the event. </p>
    pub fn event_timestamp(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_timestamp = Some(input.into());
        self
    }
    /// <p> The timestamp of the event. </p>
    pub fn set_event_timestamp(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_timestamp = input;
        self
    }
    /// <p> The timestamp when the prediction was generated. </p>
    pub fn prediction_timestamp(mut self, input: impl Into<std::string::String>) -> Self {
        self.prediction_timestamp = Some(input.into());
        self
    }
    /// <p> The timestamp when the prediction was generated. </p>
    pub fn set_prediction_timestamp(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.prediction_timestamp = input;
        self
    }
    /// <p> The detector ID. </p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p> The detector ID. </p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p> The detector version ID. </p>
    pub fn detector_version_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_version_id = Some(input.into());
        self
    }
    /// <p> The detector version ID. </p>
    pub fn set_detector_version_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.detector_version_id = input;
        self
    }
    /// Consumes the builder and constructs a [`EventPredictionSummary`](crate::types::EventPredictionSummary).
    pub fn build(self) -> crate::types::EventPredictionSummary {
        crate::types::EventPredictionSummary {
            event_id: self.event_id,
            event_type_name: self.event_type_name,
            event_timestamp: self.event_timestamp,
            prediction_timestamp: self.prediction_timestamp,
            detector_id: self.detector_id,
            detector_version_id: self.detector_version_id,
        }
    }
}
