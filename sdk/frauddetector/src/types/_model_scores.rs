// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The fraud prediction scores.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModelScores {
    /// <p>The model version.</p>
    #[doc(hidden)]
    pub model_version: std::option::Option<crate::types::ModelVersion>,
    /// <p>The model's fraud prediction scores.</p>
    #[doc(hidden)]
    pub scores: std::option::Option<std::collections::HashMap<std::string::String, f32>>,
}
impl ModelScores {
    /// <p>The model version.</p>
    pub fn model_version(&self) -> std::option::Option<&crate::types::ModelVersion> {
        self.model_version.as_ref()
    }
    /// <p>The model's fraud prediction scores.</p>
    pub fn scores(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, f32>> {
        self.scores.as_ref()
    }
}
impl ModelScores {
    /// Creates a new builder-style object to manufacture [`ModelScores`](crate::types::ModelScores).
    pub fn builder() -> crate::types::builders::ModelScoresBuilder {
        crate::types::builders::ModelScoresBuilder::default()
    }
}

/// A builder for [`ModelScores`](crate::types::ModelScores).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModelScoresBuilder {
    pub(crate) model_version: std::option::Option<crate::types::ModelVersion>,
    pub(crate) scores: std::option::Option<std::collections::HashMap<std::string::String, f32>>,
}
impl ModelScoresBuilder {
    /// <p>The model version.</p>
    pub fn model_version(mut self, input: crate::types::ModelVersion) -> Self {
        self.model_version = Some(input);
        self
    }
    /// <p>The model version.</p>
    pub fn set_model_version(
        mut self,
        input: std::option::Option<crate::types::ModelVersion>,
    ) -> Self {
        self.model_version = input;
        self
    }
    /// Adds a key-value pair to `scores`.
    ///
    /// To override the contents of this collection use [`set_scores`](Self::set_scores).
    ///
    /// <p>The model's fraud prediction scores.</p>
    pub fn scores(mut self, k: impl Into<std::string::String>, v: f32) -> Self {
        let mut hash_map = self.scores.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.scores = Some(hash_map);
        self
    }
    /// <p>The model's fraud prediction scores.</p>
    pub fn set_scores(
        mut self,
        input: std::option::Option<std::collections::HashMap<std::string::String, f32>>,
    ) -> Self {
        self.scores = input;
        self
    }
    /// Consumes the builder and constructs a [`ModelScores`](crate::types::ModelScores).
    pub fn build(self) -> crate::types::ModelScores {
        crate::types::ModelScores {
            model_version: self.model_version,
            scores: self.scores,
        }
    }
}
