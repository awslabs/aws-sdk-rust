// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The event type details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EventType {
    /// <p>The event type name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The event type description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The event type event variables.</p>
    #[doc(hidden)]
    pub event_variables: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The event type labels.</p>
    #[doc(hidden)]
    pub labels: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The event type entity types.</p>
    #[doc(hidden)]
    pub entity_types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>If <code>Enabled</code>, Amazon Fraud Detector stores event data when you generate a prediction and uses that data to update calculated variables in near real-time. Amazon Fraud Detector uses this data, known as <code>INGESTED_EVENTS</code>, to train your model and improve fraud predictions.</p>
    #[doc(hidden)]
    pub event_ingestion: std::option::Option<crate::types::EventIngestion>,
    /// <p>Data about the stored events.</p>
    #[doc(hidden)]
    pub ingested_event_statistics: std::option::Option<crate::types::IngestedEventStatistics>,
    /// <p>Timestamp of when the event type was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<std::string::String>,
    /// <p>Timestamp of when the event type was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<std::string::String>,
    /// <p>The entity type ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
}
impl EventType {
    /// <p>The event type name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The event type description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The event type event variables.</p>
    pub fn event_variables(&self) -> std::option::Option<&[std::string::String]> {
        self.event_variables.as_deref()
    }
    /// <p>The event type labels.</p>
    pub fn labels(&self) -> std::option::Option<&[std::string::String]> {
        self.labels.as_deref()
    }
    /// <p>The event type entity types.</p>
    pub fn entity_types(&self) -> std::option::Option<&[std::string::String]> {
        self.entity_types.as_deref()
    }
    /// <p>If <code>Enabled</code>, Amazon Fraud Detector stores event data when you generate a prediction and uses that data to update calculated variables in near real-time. Amazon Fraud Detector uses this data, known as <code>INGESTED_EVENTS</code>, to train your model and improve fraud predictions.</p>
    pub fn event_ingestion(&self) -> std::option::Option<&crate::types::EventIngestion> {
        self.event_ingestion.as_ref()
    }
    /// <p>Data about the stored events.</p>
    pub fn ingested_event_statistics(
        &self,
    ) -> std::option::Option<&crate::types::IngestedEventStatistics> {
        self.ingested_event_statistics.as_ref()
    }
    /// <p>Timestamp of when the event type was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&str> {
        self.last_updated_time.as_deref()
    }
    /// <p>Timestamp of when the event type was created.</p>
    pub fn created_time(&self) -> std::option::Option<&str> {
        self.created_time.as_deref()
    }
    /// <p>The entity type ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl std::fmt::Debug for EventType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EventType");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("event_variables", &"*** Sensitive Data Redacted ***");
        formatter.field("labels", &"*** Sensitive Data Redacted ***");
        formatter.field("entity_types", &"*** Sensitive Data Redacted ***");
        formatter.field("event_ingestion", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "ingested_event_statistics",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.field("last_updated_time", &"*** Sensitive Data Redacted ***");
        formatter.field("created_time", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EventType {
    /// Creates a new builder-style object to manufacture [`EventType`](crate::types::EventType).
    pub fn builder() -> crate::types::builders::EventTypeBuilder {
        crate::types::builders::EventTypeBuilder::default()
    }
}

/// A builder for [`EventType`](crate::types::EventType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct EventTypeBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) event_variables: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) labels: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) entity_types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) event_ingestion: std::option::Option<crate::types::EventIngestion>,
    pub(crate) ingested_event_statistics:
        std::option::Option<crate::types::IngestedEventStatistics>,
    pub(crate) last_updated_time: std::option::Option<std::string::String>,
    pub(crate) created_time: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
}
impl EventTypeBuilder {
    /// <p>The event type name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The event type name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The event type description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The event type description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `event_variables`.
    ///
    /// To override the contents of this collection use [`set_event_variables`](Self::set_event_variables).
    ///
    /// <p>The event type event variables.</p>
    pub fn event_variables(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.event_variables.unwrap_or_default();
        v.push(input.into());
        self.event_variables = Some(v);
        self
    }
    /// <p>The event type event variables.</p>
    pub fn set_event_variables(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.event_variables = input;
        self
    }
    /// Appends an item to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>The event type labels.</p>
    pub fn labels(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.labels.unwrap_or_default();
        v.push(input.into());
        self.labels = Some(v);
        self
    }
    /// <p>The event type labels.</p>
    pub fn set_labels(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.labels = input;
        self
    }
    /// Appends an item to `entity_types`.
    ///
    /// To override the contents of this collection use [`set_entity_types`](Self::set_entity_types).
    ///
    /// <p>The event type entity types.</p>
    pub fn entity_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.entity_types.unwrap_or_default();
        v.push(input.into());
        self.entity_types = Some(v);
        self
    }
    /// <p>The event type entity types.</p>
    pub fn set_entity_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.entity_types = input;
        self
    }
    /// <p>If <code>Enabled</code>, Amazon Fraud Detector stores event data when you generate a prediction and uses that data to update calculated variables in near real-time. Amazon Fraud Detector uses this data, known as <code>INGESTED_EVENTS</code>, to train your model and improve fraud predictions.</p>
    pub fn event_ingestion(mut self, input: crate::types::EventIngestion) -> Self {
        self.event_ingestion = Some(input);
        self
    }
    /// <p>If <code>Enabled</code>, Amazon Fraud Detector stores event data when you generate a prediction and uses that data to update calculated variables in near real-time. Amazon Fraud Detector uses this data, known as <code>INGESTED_EVENTS</code>, to train your model and improve fraud predictions.</p>
    pub fn set_event_ingestion(
        mut self,
        input: std::option::Option<crate::types::EventIngestion>,
    ) -> Self {
        self.event_ingestion = input;
        self
    }
    /// <p>Data about the stored events.</p>
    pub fn ingested_event_statistics(
        mut self,
        input: crate::types::IngestedEventStatistics,
    ) -> Self {
        self.ingested_event_statistics = Some(input);
        self
    }
    /// <p>Data about the stored events.</p>
    pub fn set_ingested_event_statistics(
        mut self,
        input: std::option::Option<crate::types::IngestedEventStatistics>,
    ) -> Self {
        self.ingested_event_statistics = input;
        self
    }
    /// <p>Timestamp of when the event type was last updated.</p>
    pub fn last_updated_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_updated_time = Some(input.into());
        self
    }
    /// <p>Timestamp of when the event type was last updated.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>Timestamp of when the event type was created.</p>
    pub fn created_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_time = Some(input.into());
        self
    }
    /// <p>Timestamp of when the event type was created.</p>
    pub fn set_created_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The entity type ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The entity type ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Consumes the builder and constructs a [`EventType`](crate::types::EventType).
    pub fn build(self) -> crate::types::EventType {
        crate::types::EventType {
            name: self.name,
            description: self.description,
            event_variables: self.event_variables,
            labels: self.labels,
            entity_types: self.entity_types,
            event_ingestion: self.event_ingestion,
            ingested_event_statistics: self.ingested_event_statistics,
            last_updated_time: self.last_updated_time,
            created_time: self.created_time,
            arn: self.arn,
        }
    }
}
impl std::fmt::Debug for EventTypeBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EventTypeBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("event_variables", &"*** Sensitive Data Redacted ***");
        formatter.field("labels", &"*** Sensitive Data Redacted ***");
        formatter.field("entity_types", &"*** Sensitive Data Redacted ***");
        formatter.field("event_ingestion", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "ingested_event_statistics",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.field("last_updated_time", &"*** Sensitive Data Redacted ***");
        formatter.field("created_time", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
