// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon SageMaker model.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExternalModel {
    /// <p>The Amazon SageMaker model endpoints.</p>
    #[doc(hidden)]
    pub model_endpoint: std::option::Option<std::string::String>,
    /// <p>The source of the model.</p>
    #[doc(hidden)]
    pub model_source: std::option::Option<crate::types::ModelSource>,
    /// <p>The role used to invoke the model. </p>
    #[doc(hidden)]
    pub invoke_model_endpoint_role_arn: std::option::Option<std::string::String>,
    /// <p>The input configuration.</p>
    #[doc(hidden)]
    pub input_configuration: std::option::Option<crate::types::ModelInputConfiguration>,
    /// <p>The output configuration.</p>
    #[doc(hidden)]
    pub output_configuration: std::option::Option<crate::types::ModelOutputConfiguration>,
    /// <p>The Amazon Fraud Detector status for the external model endpoint</p>
    #[doc(hidden)]
    pub model_endpoint_status: std::option::Option<crate::types::ModelEndpointStatus>,
    /// <p>Timestamp of when the model was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<std::string::String>,
    /// <p>Timestamp of when the model was last created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<std::string::String>,
    /// <p>The model ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
}
impl ExternalModel {
    /// <p>The Amazon SageMaker model endpoints.</p>
    pub fn model_endpoint(&self) -> std::option::Option<&str> {
        self.model_endpoint.as_deref()
    }
    /// <p>The source of the model.</p>
    pub fn model_source(&self) -> std::option::Option<&crate::types::ModelSource> {
        self.model_source.as_ref()
    }
    /// <p>The role used to invoke the model. </p>
    pub fn invoke_model_endpoint_role_arn(&self) -> std::option::Option<&str> {
        self.invoke_model_endpoint_role_arn.as_deref()
    }
    /// <p>The input configuration.</p>
    pub fn input_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ModelInputConfiguration> {
        self.input_configuration.as_ref()
    }
    /// <p>The output configuration.</p>
    pub fn output_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ModelOutputConfiguration> {
        self.output_configuration.as_ref()
    }
    /// <p>The Amazon Fraud Detector status for the external model endpoint</p>
    pub fn model_endpoint_status(&self) -> std::option::Option<&crate::types::ModelEndpointStatus> {
        self.model_endpoint_status.as_ref()
    }
    /// <p>Timestamp of when the model was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&str> {
        self.last_updated_time.as_deref()
    }
    /// <p>Timestamp of when the model was last created.</p>
    pub fn created_time(&self) -> std::option::Option<&str> {
        self.created_time.as_deref()
    }
    /// <p>The model ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl ExternalModel {
    /// Creates a new builder-style object to manufacture [`ExternalModel`](crate::types::ExternalModel).
    pub fn builder() -> crate::types::builders::ExternalModelBuilder {
        crate::types::builders::ExternalModelBuilder::default()
    }
}

/// A builder for [`ExternalModel`](crate::types::ExternalModel).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExternalModelBuilder {
    pub(crate) model_endpoint: std::option::Option<std::string::String>,
    pub(crate) model_source: std::option::Option<crate::types::ModelSource>,
    pub(crate) invoke_model_endpoint_role_arn: std::option::Option<std::string::String>,
    pub(crate) input_configuration: std::option::Option<crate::types::ModelInputConfiguration>,
    pub(crate) output_configuration: std::option::Option<crate::types::ModelOutputConfiguration>,
    pub(crate) model_endpoint_status: std::option::Option<crate::types::ModelEndpointStatus>,
    pub(crate) last_updated_time: std::option::Option<std::string::String>,
    pub(crate) created_time: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
}
impl ExternalModelBuilder {
    /// <p>The Amazon SageMaker model endpoints.</p>
    pub fn model_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_endpoint = Some(input.into());
        self
    }
    /// <p>The Amazon SageMaker model endpoints.</p>
    pub fn set_model_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_endpoint = input;
        self
    }
    /// <p>The source of the model.</p>
    pub fn model_source(mut self, input: crate::types::ModelSource) -> Self {
        self.model_source = Some(input);
        self
    }
    /// <p>The source of the model.</p>
    pub fn set_model_source(
        mut self,
        input: std::option::Option<crate::types::ModelSource>,
    ) -> Self {
        self.model_source = input;
        self
    }
    /// <p>The role used to invoke the model. </p>
    pub fn invoke_model_endpoint_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.invoke_model_endpoint_role_arn = Some(input.into());
        self
    }
    /// <p>The role used to invoke the model. </p>
    pub fn set_invoke_model_endpoint_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.invoke_model_endpoint_role_arn = input;
        self
    }
    /// <p>The input configuration.</p>
    pub fn input_configuration(mut self, input: crate::types::ModelInputConfiguration) -> Self {
        self.input_configuration = Some(input);
        self
    }
    /// <p>The input configuration.</p>
    pub fn set_input_configuration(
        mut self,
        input: std::option::Option<crate::types::ModelInputConfiguration>,
    ) -> Self {
        self.input_configuration = input;
        self
    }
    /// <p>The output configuration.</p>
    pub fn output_configuration(mut self, input: crate::types::ModelOutputConfiguration) -> Self {
        self.output_configuration = Some(input);
        self
    }
    /// <p>The output configuration.</p>
    pub fn set_output_configuration(
        mut self,
        input: std::option::Option<crate::types::ModelOutputConfiguration>,
    ) -> Self {
        self.output_configuration = input;
        self
    }
    /// <p>The Amazon Fraud Detector status for the external model endpoint</p>
    pub fn model_endpoint_status(mut self, input: crate::types::ModelEndpointStatus) -> Self {
        self.model_endpoint_status = Some(input);
        self
    }
    /// <p>The Amazon Fraud Detector status for the external model endpoint</p>
    pub fn set_model_endpoint_status(
        mut self,
        input: std::option::Option<crate::types::ModelEndpointStatus>,
    ) -> Self {
        self.model_endpoint_status = input;
        self
    }
    /// <p>Timestamp of when the model was last updated.</p>
    pub fn last_updated_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_updated_time = Some(input.into());
        self
    }
    /// <p>Timestamp of when the model was last updated.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>Timestamp of when the model was last created.</p>
    pub fn created_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_time = Some(input.into());
        self
    }
    /// <p>Timestamp of when the model was last created.</p>
    pub fn set_created_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The model ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The model ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Consumes the builder and constructs a [`ExternalModel`](crate::types::ExternalModel).
    pub fn build(self) -> crate::types::ExternalModel {
        crate::types::ExternalModel {
            model_endpoint: self.model_endpoint,
            model_source: self.model_source,
            invoke_model_endpoint_role_arn: self.invoke_model_endpoint_role_arn,
            input_configuration: self.input_configuration,
            output_configuration: self.output_configuration,
            model_endpoint_status: self.model_endpoint_status,
            last_updated_time: self.last_updated_time,
            created_time: self.created_time,
            arn: self.arn,
        }
    }
}
