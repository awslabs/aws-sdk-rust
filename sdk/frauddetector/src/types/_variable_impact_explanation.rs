// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The details of the event variable's impact on the prediction score. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VariableImpactExplanation {
    /// <p> The event variable name. </p>
    #[doc(hidden)]
    pub event_variable_name: std::option::Option<std::string::String>,
    /// <p> The event variable's relative impact in terms of magnitude on the prediction scores. The relative impact values consist of a numerical rating (0-5, 5 being the highest) and direction (increased/decreased) impact of the fraud risk. </p>
    #[doc(hidden)]
    pub relative_impact: std::option::Option<std::string::String>,
    /// <p> The raw, uninterpreted value represented as log-odds of the fraud. These values are usually between -10 to +10, but range from - infinity to + infinity.</p>
    /// <ul>
    /// <li> <p>A positive value indicates that the variable drove the risk score up.</p> </li>
    /// <li> <p>A negative value indicates that the variable drove the risk score down.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub log_odds_impact: std::option::Option<f32>,
}
impl VariableImpactExplanation {
    /// <p> The event variable name. </p>
    pub fn event_variable_name(&self) -> std::option::Option<&str> {
        self.event_variable_name.as_deref()
    }
    /// <p> The event variable's relative impact in terms of magnitude on the prediction scores. The relative impact values consist of a numerical rating (0-5, 5 being the highest) and direction (increased/decreased) impact of the fraud risk. </p>
    pub fn relative_impact(&self) -> std::option::Option<&str> {
        self.relative_impact.as_deref()
    }
    /// <p> The raw, uninterpreted value represented as log-odds of the fraud. These values are usually between -10 to +10, but range from - infinity to + infinity.</p>
    /// <ul>
    /// <li> <p>A positive value indicates that the variable drove the risk score up.</p> </li>
    /// <li> <p>A negative value indicates that the variable drove the risk score down.</p> </li>
    /// </ul>
    pub fn log_odds_impact(&self) -> std::option::Option<f32> {
        self.log_odds_impact
    }
}
impl VariableImpactExplanation {
    /// Creates a new builder-style object to manufacture [`VariableImpactExplanation`](crate::types::VariableImpactExplanation).
    pub fn builder() -> crate::types::builders::VariableImpactExplanationBuilder {
        crate::types::builders::VariableImpactExplanationBuilder::default()
    }
}

/// A builder for [`VariableImpactExplanation`](crate::types::VariableImpactExplanation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VariableImpactExplanationBuilder {
    pub(crate) event_variable_name: std::option::Option<std::string::String>,
    pub(crate) relative_impact: std::option::Option<std::string::String>,
    pub(crate) log_odds_impact: std::option::Option<f32>,
}
impl VariableImpactExplanationBuilder {
    /// <p> The event variable name. </p>
    pub fn event_variable_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_variable_name = Some(input.into());
        self
    }
    /// <p> The event variable name. </p>
    pub fn set_event_variable_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.event_variable_name = input;
        self
    }
    /// <p> The event variable's relative impact in terms of magnitude on the prediction scores. The relative impact values consist of a numerical rating (0-5, 5 being the highest) and direction (increased/decreased) impact of the fraud risk. </p>
    pub fn relative_impact(mut self, input: impl Into<std::string::String>) -> Self {
        self.relative_impact = Some(input.into());
        self
    }
    /// <p> The event variable's relative impact in terms of magnitude on the prediction scores. The relative impact values consist of a numerical rating (0-5, 5 being the highest) and direction (increased/decreased) impact of the fraud risk. </p>
    pub fn set_relative_impact(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.relative_impact = input;
        self
    }
    /// <p> The raw, uninterpreted value represented as log-odds of the fraud. These values are usually between -10 to +10, but range from - infinity to + infinity.</p>
    /// <ul>
    /// <li> <p>A positive value indicates that the variable drove the risk score up.</p> </li>
    /// <li> <p>A negative value indicates that the variable drove the risk score down.</p> </li>
    /// </ul>
    pub fn log_odds_impact(mut self, input: f32) -> Self {
        self.log_odds_impact = Some(input);
        self
    }
    /// <p> The raw, uninterpreted value represented as log-odds of the fraud. These values are usually between -10 to +10, but range from - infinity to + infinity.</p>
    /// <ul>
    /// <li> <p>A positive value indicates that the variable drove the risk score up.</p> </li>
    /// <li> <p>A negative value indicates that the variable drove the risk score down.</p> </li>
    /// </ul>
    pub fn set_log_odds_impact(mut self, input: std::option::Option<f32>) -> Self {
        self.log_odds_impact = input;
        self
    }
    /// Consumes the builder and constructs a [`VariableImpactExplanation`](crate::types::VariableImpactExplanation).
    pub fn build(self) -> crate::types::VariableImpactExplanation {
        crate::types::VariableImpactExplanation {
            event_variable_name: self.event_variable_name,
            relative_impact: self.relative_impact,
            log_odds_impact: self.log_odds_impact,
        }
    }
}
