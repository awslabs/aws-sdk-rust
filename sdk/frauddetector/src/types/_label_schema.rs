// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The label schema.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LabelSchema {
    /// <p>The label mapper maps the Amazon Fraud Detector supported model classification labels (<code>FRAUD</code>, <code>LEGIT</code>) to the appropriate event type labels. For example, if "<code>FRAUD</code>" and "<code>LEGIT</code>" are Amazon Fraud Detector supported labels, this mapper could be: <code>{"FRAUD" =&gt; ["0"]</code>, <code>"LEGIT" =&gt; ["1"]}</code> or <code>{"FRAUD" =&gt; ["false"]</code>, <code>"LEGIT" =&gt; ["true"]}</code> or <code>{"FRAUD" =&gt; ["fraud", "abuse"]</code>, <code>"LEGIT" =&gt; ["legit", "safe"]}</code>. The value part of the mapper is a list, because you may have multiple label variants from your event type for a single Amazon Fraud Detector label. </p>
    #[doc(hidden)]
    pub label_mapper: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    /// <p>The action to take for unlabeled events.</p>
    #[doc(hidden)]
    pub unlabeled_events_treatment: std::option::Option<crate::types::UnlabeledEventsTreatment>,
}
impl LabelSchema {
    /// <p>The label mapper maps the Amazon Fraud Detector supported model classification labels (<code>FRAUD</code>, <code>LEGIT</code>) to the appropriate event type labels. For example, if "<code>FRAUD</code>" and "<code>LEGIT</code>" are Amazon Fraud Detector supported labels, this mapper could be: <code>{"FRAUD" =&gt; ["0"]</code>, <code>"LEGIT" =&gt; ["1"]}</code> or <code>{"FRAUD" =&gt; ["false"]</code>, <code>"LEGIT" =&gt; ["true"]}</code> or <code>{"FRAUD" =&gt; ["fraud", "abuse"]</code>, <code>"LEGIT" =&gt; ["legit", "safe"]}</code>. The value part of the mapper is a list, because you may have multiple label variants from your event type for a single Amazon Fraud Detector label. </p>
    pub fn label_mapper(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.label_mapper.as_ref()
    }
    /// <p>The action to take for unlabeled events.</p>
    pub fn unlabeled_events_treatment(
        &self,
    ) -> std::option::Option<&crate::types::UnlabeledEventsTreatment> {
        self.unlabeled_events_treatment.as_ref()
    }
}
impl LabelSchema {
    /// Creates a new builder-style object to manufacture [`LabelSchema`](crate::types::LabelSchema).
    pub fn builder() -> crate::types::builders::LabelSchemaBuilder {
        crate::types::builders::LabelSchemaBuilder::default()
    }
}

/// A builder for [`LabelSchema`](crate::types::LabelSchema).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LabelSchemaBuilder {
    pub(crate) label_mapper: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    pub(crate) unlabeled_events_treatment:
        std::option::Option<crate::types::UnlabeledEventsTreatment>,
}
impl LabelSchemaBuilder {
    /// Adds a key-value pair to `label_mapper`.
    ///
    /// To override the contents of this collection use [`set_label_mapper`](Self::set_label_mapper).
    ///
    /// <p>The label mapper maps the Amazon Fraud Detector supported model classification labels (<code>FRAUD</code>, <code>LEGIT</code>) to the appropriate event type labels. For example, if "<code>FRAUD</code>" and "<code>LEGIT</code>" are Amazon Fraud Detector supported labels, this mapper could be: <code>{"FRAUD" =&gt; ["0"]</code>, <code>"LEGIT" =&gt; ["1"]}</code> or <code>{"FRAUD" =&gt; ["false"]</code>, <code>"LEGIT" =&gt; ["true"]}</code> or <code>{"FRAUD" =&gt; ["fraud", "abuse"]</code>, <code>"LEGIT" =&gt; ["legit", "safe"]}</code>. The value part of the mapper is a list, because you may have multiple label variants from your event type for a single Amazon Fraud Detector label. </p>
    pub fn label_mapper(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.label_mapper.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.label_mapper = Some(hash_map);
        self
    }
    /// <p>The label mapper maps the Amazon Fraud Detector supported model classification labels (<code>FRAUD</code>, <code>LEGIT</code>) to the appropriate event type labels. For example, if "<code>FRAUD</code>" and "<code>LEGIT</code>" are Amazon Fraud Detector supported labels, this mapper could be: <code>{"FRAUD" =&gt; ["0"]</code>, <code>"LEGIT" =&gt; ["1"]}</code> or <code>{"FRAUD" =&gt; ["false"]</code>, <code>"LEGIT" =&gt; ["true"]}</code> or <code>{"FRAUD" =&gt; ["fraud", "abuse"]</code>, <code>"LEGIT" =&gt; ["legit", "safe"]}</code>. The value part of the mapper is a list, because you may have multiple label variants from your event type for a single Amazon Fraud Detector label. </p>
    pub fn set_label_mapper(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.label_mapper = input;
        self
    }
    /// <p>The action to take for unlabeled events.</p>
    pub fn unlabeled_events_treatment(
        mut self,
        input: crate::types::UnlabeledEventsTreatment,
    ) -> Self {
        self.unlabeled_events_treatment = Some(input);
        self
    }
    /// <p>The action to take for unlabeled events.</p>
    pub fn set_unlabeled_events_treatment(
        mut self,
        input: std::option::Option<crate::types::UnlabeledEventsTreatment>,
    ) -> Self {
        self.unlabeled_events_treatment = input;
        self
    }
    /// Consumes the builder and constructs a [`LabelSchema`](crate::types::LabelSchema).
    pub fn build(self) -> crate::types::LabelSchema {
        crate::types::LabelSchema {
            label_mapper: self.label_mapper,
            unlabeled_events_treatment: self.unlabeled_events_treatment,
        }
    }
}
