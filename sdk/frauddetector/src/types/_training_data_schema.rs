// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The training data schema.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrainingDataSchema {
    /// <p>The training data schema variables.</p>
    #[doc(hidden)]
    pub model_variables: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The label schema.</p>
    #[doc(hidden)]
    pub label_schema: std::option::Option<crate::types::LabelSchema>,
}
impl TrainingDataSchema {
    /// <p>The training data schema variables.</p>
    pub fn model_variables(&self) -> std::option::Option<&[std::string::String]> {
        self.model_variables.as_deref()
    }
    /// <p>The label schema.</p>
    pub fn label_schema(&self) -> std::option::Option<&crate::types::LabelSchema> {
        self.label_schema.as_ref()
    }
}
impl TrainingDataSchema {
    /// Creates a new builder-style object to manufacture [`TrainingDataSchema`](crate::types::TrainingDataSchema).
    pub fn builder() -> crate::types::builders::TrainingDataSchemaBuilder {
        crate::types::builders::TrainingDataSchemaBuilder::default()
    }
}

/// A builder for [`TrainingDataSchema`](crate::types::TrainingDataSchema).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrainingDataSchemaBuilder {
    pub(crate) model_variables: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) label_schema: std::option::Option<crate::types::LabelSchema>,
}
impl TrainingDataSchemaBuilder {
    /// Appends an item to `model_variables`.
    ///
    /// To override the contents of this collection use [`set_model_variables`](Self::set_model_variables).
    ///
    /// <p>The training data schema variables.</p>
    pub fn model_variables(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.model_variables.unwrap_or_default();
        v.push(input.into());
        self.model_variables = Some(v);
        self
    }
    /// <p>The training data schema variables.</p>
    pub fn set_model_variables(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.model_variables = input;
        self
    }
    /// <p>The label schema.</p>
    pub fn label_schema(mut self, input: crate::types::LabelSchema) -> Self {
        self.label_schema = Some(input);
        self
    }
    /// <p>The label schema.</p>
    pub fn set_label_schema(
        mut self,
        input: std::option::Option<crate::types::LabelSchema>,
    ) -> Self {
        self.label_schema = input;
        self
    }
    /// Consumes the builder and constructs a [`TrainingDataSchema`](crate::types::TrainingDataSchema).
    pub fn build(self) -> crate::types::TrainingDataSchema {
        crate::types::TrainingDataSchema {
            model_variables: self.model_variables,
            label_schema: self.label_schema,
        }
    }
}
