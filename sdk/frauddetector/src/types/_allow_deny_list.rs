// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The metadata of a list. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AllowDenyList {
    /// <p> The name of the list. </p>
    pub name: ::std::string::String,
    /// <p> The description of the list. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> The variable type of the list. </p>
    pub variable_type: ::std::option::Option<::std::string::String>,
    /// <p> The time the list was created. </p>
    pub created_time: ::std::option::Option<::std::string::String>,
    /// <p> The time the list was last updated. </p>
    pub updated_time: ::std::option::Option<::std::string::String>,
    /// <p> The ARN of the list. </p>
    pub arn: ::std::option::Option<::std::string::String>,
}
impl AllowDenyList {
    /// <p> The name of the list. </p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p> The description of the list. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The variable type of the list. </p>
    pub fn variable_type(&self) -> ::std::option::Option<&str> {
        self.variable_type.as_deref()
    }
    /// <p> The time the list was created. </p>
    pub fn created_time(&self) -> ::std::option::Option<&str> {
        self.created_time.as_deref()
    }
    /// <p> The time the list was last updated. </p>
    pub fn updated_time(&self) -> ::std::option::Option<&str> {
        self.updated_time.as_deref()
    }
    /// <p> The ARN of the list. </p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl AllowDenyList {
    /// Creates a new builder-style object to manufacture [`AllowDenyList`](crate::types::AllowDenyList).
    pub fn builder() -> crate::types::builders::AllowDenyListBuilder {
        crate::types::builders::AllowDenyListBuilder::default()
    }
}

/// A builder for [`AllowDenyList`](crate::types::AllowDenyList).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AllowDenyListBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) variable_type: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::std::string::String>,
    pub(crate) updated_time: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
}
impl AllowDenyListBuilder {
    /// <p> The name of the list. </p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the list. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of the list. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The description of the list. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The description of the list. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The description of the list. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p> The variable type of the list. </p>
    pub fn variable_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.variable_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The variable type of the list. </p>
    pub fn set_variable_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.variable_type = input;
        self
    }
    /// <p> The variable type of the list. </p>
    pub fn get_variable_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.variable_type
    }
    /// <p> The time the list was created. </p>
    pub fn created_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The time the list was created. </p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_time = input;
        self
    }
    /// <p> The time the list was created. </p>
    pub fn get_created_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_time
    }
    /// <p> The time the list was last updated. </p>
    pub fn updated_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The time the list was last updated. </p>
    pub fn set_updated_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_time = input;
        self
    }
    /// <p> The time the list was last updated. </p>
    pub fn get_updated_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_time
    }
    /// <p> The ARN of the list. </p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ARN of the list. </p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p> The ARN of the list. </p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Consumes the builder and constructs a [`AllowDenyList`](crate::types::AllowDenyList).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AllowDenyListBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::AllowDenyList, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AllowDenyList {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AllowDenyList",
                )
            })?,
            description: self.description,
            variable_type: self.variable_type,
            created_time: self.created_time,
            updated_time: self.updated_time,
            arn: self.arn,
        })
    }
}
