// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The details of the impact of aggregated variables on the prediction score. </p>
/// <p>Account Takeover Insights (ATI) model uses the login data you provide to continuously calculate a set of variables (aggregated variables) based on historical events. For example, the model might calculate the number of times an user has logged in using the same IP address. In this case, event variables used to derive the aggregated variables are <code>IP address</code> and <code>user</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AggregatedVariablesImpactExplanation {
    /// <p> The names of all the event variables that were used to derive the aggregated variables. </p>
    #[doc(hidden)]
    pub event_variable_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> The relative impact of the aggregated variables in terms of magnitude on the prediction scores. </p>
    #[doc(hidden)]
    pub relative_impact: std::option::Option<std::string::String>,
    /// <p> The raw, uninterpreted value represented as log-odds of the fraud. These values are usually between -10 to +10, but range from -infinity to +infinity.</p>
    /// <ul>
    /// <li> <p>A positive value indicates that the variables drove the risk score up.</p> </li>
    /// <li> <p>A negative value indicates that the variables drove the risk score down.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub log_odds_impact: std::option::Option<f32>,
}
impl AggregatedVariablesImpactExplanation {
    /// <p> The names of all the event variables that were used to derive the aggregated variables. </p>
    pub fn event_variable_names(&self) -> std::option::Option<&[std::string::String]> {
        self.event_variable_names.as_deref()
    }
    /// <p> The relative impact of the aggregated variables in terms of magnitude on the prediction scores. </p>
    pub fn relative_impact(&self) -> std::option::Option<&str> {
        self.relative_impact.as_deref()
    }
    /// <p> The raw, uninterpreted value represented as log-odds of the fraud. These values are usually between -10 to +10, but range from -infinity to +infinity.</p>
    /// <ul>
    /// <li> <p>A positive value indicates that the variables drove the risk score up.</p> </li>
    /// <li> <p>A negative value indicates that the variables drove the risk score down.</p> </li>
    /// </ul>
    pub fn log_odds_impact(&self) -> std::option::Option<f32> {
        self.log_odds_impact
    }
}
impl AggregatedVariablesImpactExplanation {
    /// Creates a new builder-style object to manufacture [`AggregatedVariablesImpactExplanation`](crate::types::AggregatedVariablesImpactExplanation).
    pub fn builder() -> crate::types::builders::AggregatedVariablesImpactExplanationBuilder {
        crate::types::builders::AggregatedVariablesImpactExplanationBuilder::default()
    }
}

/// A builder for [`AggregatedVariablesImpactExplanation`](crate::types::AggregatedVariablesImpactExplanation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AggregatedVariablesImpactExplanationBuilder {
    pub(crate) event_variable_names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) relative_impact: std::option::Option<std::string::String>,
    pub(crate) log_odds_impact: std::option::Option<f32>,
}
impl AggregatedVariablesImpactExplanationBuilder {
    /// Appends an item to `event_variable_names`.
    ///
    /// To override the contents of this collection use [`set_event_variable_names`](Self::set_event_variable_names).
    ///
    /// <p> The names of all the event variables that were used to derive the aggregated variables. </p>
    pub fn event_variable_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.event_variable_names.unwrap_or_default();
        v.push(input.into());
        self.event_variable_names = Some(v);
        self
    }
    /// <p> The names of all the event variables that were used to derive the aggregated variables. </p>
    pub fn set_event_variable_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.event_variable_names = input;
        self
    }
    /// <p> The relative impact of the aggregated variables in terms of magnitude on the prediction scores. </p>
    pub fn relative_impact(mut self, input: impl Into<std::string::String>) -> Self {
        self.relative_impact = Some(input.into());
        self
    }
    /// <p> The relative impact of the aggregated variables in terms of magnitude on the prediction scores. </p>
    pub fn set_relative_impact(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.relative_impact = input;
        self
    }
    /// <p> The raw, uninterpreted value represented as log-odds of the fraud. These values are usually between -10 to +10, but range from -infinity to +infinity.</p>
    /// <ul>
    /// <li> <p>A positive value indicates that the variables drove the risk score up.</p> </li>
    /// <li> <p>A negative value indicates that the variables drove the risk score down.</p> </li>
    /// </ul>
    pub fn log_odds_impact(mut self, input: f32) -> Self {
        self.log_odds_impact = Some(input);
        self
    }
    /// <p> The raw, uninterpreted value represented as log-odds of the fraud. These values are usually between -10 to +10, but range from -infinity to +infinity.</p>
    /// <ul>
    /// <li> <p>A positive value indicates that the variables drove the risk score up.</p> </li>
    /// <li> <p>A negative value indicates that the variables drove the risk score down.</p> </li>
    /// </ul>
    pub fn set_log_odds_impact(mut self, input: std::option::Option<f32>) -> Self {
        self.log_odds_impact = input;
        self
    }
    /// Consumes the builder and constructs a [`AggregatedVariablesImpactExplanation`](crate::types::AggregatedVariablesImpactExplanation).
    pub fn build(self) -> crate::types::AggregatedVariablesImpactExplanation {
        crate::types::AggregatedVariablesImpactExplanation {
            event_variable_names: self.event_variable_names,
            relative_impact: self.relative_impact,
            log_odds_impact: self.log_odds_impact,
        }
    }
}
