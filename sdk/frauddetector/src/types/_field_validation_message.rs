// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The message details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldValidationMessage {
    /// <p>The field name.</p>
    #[doc(hidden)]
    pub field_name: std::option::Option<std::string::String>,
    /// <p>The message ID.</p>
    #[doc(hidden)]
    pub identifier: std::option::Option<std::string::String>,
    /// <p>The message title.</p>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
    /// <p>The message content.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
    /// <p>The message type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl FieldValidationMessage {
    /// <p>The field name.</p>
    pub fn field_name(&self) -> std::option::Option<&str> {
        self.field_name.as_deref()
    }
    /// <p>The message ID.</p>
    pub fn identifier(&self) -> std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The message title.</p>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The message content.</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>The message type.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl FieldValidationMessage {
    /// Creates a new builder-style object to manufacture [`FieldValidationMessage`](crate::types::FieldValidationMessage).
    pub fn builder() -> crate::types::builders::FieldValidationMessageBuilder {
        crate::types::builders::FieldValidationMessageBuilder::default()
    }
}

/// A builder for [`FieldValidationMessage`](crate::types::FieldValidationMessage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldValidationMessageBuilder {
    pub(crate) field_name: std::option::Option<std::string::String>,
    pub(crate) identifier: std::option::Option<std::string::String>,
    pub(crate) title: std::option::Option<std::string::String>,
    pub(crate) content: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl FieldValidationMessageBuilder {
    /// <p>The field name.</p>
    pub fn field_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_name = Some(input.into());
        self
    }
    /// <p>The field name.</p>
    pub fn set_field_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>The message ID.</p>
    pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.identifier = Some(input.into());
        self
    }
    /// <p>The message ID.</p>
    pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The message title.</p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>The message title.</p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The message content.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>The message content.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The message type.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The message type.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldValidationMessage`](crate::types::FieldValidationMessage).
    pub fn build(self) -> crate::types::FieldValidationMessage {
        crate::types::FieldValidationMessage {
            field_name: self.field_name,
            identifier: self.identifier,
            title: self.title,
            content: self.content,
            r#type: self.r#type,
        }
    }
}
