// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Model performance metrics data points.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricDataPoint {
    /// <p>The false positive rate. This is the percentage of total legitimate events that are incorrectly predicted as fraud.</p>
    #[doc(hidden)]
    pub fpr: std::option::Option<f32>,
    /// <p>The percentage of fraud events correctly predicted as fraudulent as compared to all events predicted as fraudulent.</p>
    #[doc(hidden)]
    pub precision: std::option::Option<f32>,
    /// <p>The true positive rate. This is the percentage of total fraud the model detects. Also known as capture rate.</p>
    #[doc(hidden)]
    pub tpr: std::option::Option<f32>,
    /// <p>The model threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud.</p>
    #[doc(hidden)]
    pub threshold: std::option::Option<f32>,
}
impl MetricDataPoint {
    /// <p>The false positive rate. This is the percentage of total legitimate events that are incorrectly predicted as fraud.</p>
    pub fn fpr(&self) -> std::option::Option<f32> {
        self.fpr
    }
    /// <p>The percentage of fraud events correctly predicted as fraudulent as compared to all events predicted as fraudulent.</p>
    pub fn precision(&self) -> std::option::Option<f32> {
        self.precision
    }
    /// <p>The true positive rate. This is the percentage of total fraud the model detects. Also known as capture rate.</p>
    pub fn tpr(&self) -> std::option::Option<f32> {
        self.tpr
    }
    /// <p>The model threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud.</p>
    pub fn threshold(&self) -> std::option::Option<f32> {
        self.threshold
    }
}
impl MetricDataPoint {
    /// Creates a new builder-style object to manufacture [`MetricDataPoint`](crate::types::MetricDataPoint).
    pub fn builder() -> crate::types::builders::MetricDataPointBuilder {
        crate::types::builders::MetricDataPointBuilder::default()
    }
}

/// A builder for [`MetricDataPoint`](crate::types::MetricDataPoint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricDataPointBuilder {
    pub(crate) fpr: std::option::Option<f32>,
    pub(crate) precision: std::option::Option<f32>,
    pub(crate) tpr: std::option::Option<f32>,
    pub(crate) threshold: std::option::Option<f32>,
}
impl MetricDataPointBuilder {
    /// <p>The false positive rate. This is the percentage of total legitimate events that are incorrectly predicted as fraud.</p>
    pub fn fpr(mut self, input: f32) -> Self {
        self.fpr = Some(input);
        self
    }
    /// <p>The false positive rate. This is the percentage of total legitimate events that are incorrectly predicted as fraud.</p>
    pub fn set_fpr(mut self, input: std::option::Option<f32>) -> Self {
        self.fpr = input;
        self
    }
    /// <p>The percentage of fraud events correctly predicted as fraudulent as compared to all events predicted as fraudulent.</p>
    pub fn precision(mut self, input: f32) -> Self {
        self.precision = Some(input);
        self
    }
    /// <p>The percentage of fraud events correctly predicted as fraudulent as compared to all events predicted as fraudulent.</p>
    pub fn set_precision(mut self, input: std::option::Option<f32>) -> Self {
        self.precision = input;
        self
    }
    /// <p>The true positive rate. This is the percentage of total fraud the model detects. Also known as capture rate.</p>
    pub fn tpr(mut self, input: f32) -> Self {
        self.tpr = Some(input);
        self
    }
    /// <p>The true positive rate. This is the percentage of total fraud the model detects. Also known as capture rate.</p>
    pub fn set_tpr(mut self, input: std::option::Option<f32>) -> Self {
        self.tpr = input;
        self
    }
    /// <p>The model threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud.</p>
    pub fn threshold(mut self, input: f32) -> Self {
        self.threshold = Some(input);
        self
    }
    /// <p>The model threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud.</p>
    pub fn set_threshold(mut self, input: std::option::Option<f32>) -> Self {
        self.threshold = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricDataPoint`](crate::types::MetricDataPoint).
    pub fn build(self) -> crate::types::MetricDataPoint {
        crate::types::MetricDataPoint {
            fpr: self.fpr,
            precision: self.precision,
            tpr: self.tpr,
            threshold: self.threshold,
        }
    }
}
