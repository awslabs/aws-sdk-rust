// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The training result details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrainingResult {
    /// <p>The validation metrics.</p>
    #[doc(hidden)]
    pub data_validation_metrics: std::option::Option<crate::types::DataValidationMetrics>,
    /// <p>The training metric details.</p>
    #[doc(hidden)]
    pub training_metrics: std::option::Option<crate::types::TrainingMetrics>,
    /// <p>The variable importance metrics.</p>
    #[doc(hidden)]
    pub variable_importance_metrics: std::option::Option<crate::types::VariableImportanceMetrics>,
}
impl TrainingResult {
    /// <p>The validation metrics.</p>
    pub fn data_validation_metrics(
        &self,
    ) -> std::option::Option<&crate::types::DataValidationMetrics> {
        self.data_validation_metrics.as_ref()
    }
    /// <p>The training metric details.</p>
    pub fn training_metrics(&self) -> std::option::Option<&crate::types::TrainingMetrics> {
        self.training_metrics.as_ref()
    }
    /// <p>The variable importance metrics.</p>
    pub fn variable_importance_metrics(
        &self,
    ) -> std::option::Option<&crate::types::VariableImportanceMetrics> {
        self.variable_importance_metrics.as_ref()
    }
}
impl TrainingResult {
    /// Creates a new builder-style object to manufacture [`TrainingResult`](crate::types::TrainingResult).
    pub fn builder() -> crate::types::builders::TrainingResultBuilder {
        crate::types::builders::TrainingResultBuilder::default()
    }
}

/// A builder for [`TrainingResult`](crate::types::TrainingResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrainingResultBuilder {
    pub(crate) data_validation_metrics: std::option::Option<crate::types::DataValidationMetrics>,
    pub(crate) training_metrics: std::option::Option<crate::types::TrainingMetrics>,
    pub(crate) variable_importance_metrics:
        std::option::Option<crate::types::VariableImportanceMetrics>,
}
impl TrainingResultBuilder {
    /// <p>The validation metrics.</p>
    pub fn data_validation_metrics(mut self, input: crate::types::DataValidationMetrics) -> Self {
        self.data_validation_metrics = Some(input);
        self
    }
    /// <p>The validation metrics.</p>
    pub fn set_data_validation_metrics(
        mut self,
        input: std::option::Option<crate::types::DataValidationMetrics>,
    ) -> Self {
        self.data_validation_metrics = input;
        self
    }
    /// <p>The training metric details.</p>
    pub fn training_metrics(mut self, input: crate::types::TrainingMetrics) -> Self {
        self.training_metrics = Some(input);
        self
    }
    /// <p>The training metric details.</p>
    pub fn set_training_metrics(
        mut self,
        input: std::option::Option<crate::types::TrainingMetrics>,
    ) -> Self {
        self.training_metrics = input;
        self
    }
    /// <p>The variable importance metrics.</p>
    pub fn variable_importance_metrics(
        mut self,
        input: crate::types::VariableImportanceMetrics,
    ) -> Self {
        self.variable_importance_metrics = Some(input);
        self
    }
    /// <p>The variable importance metrics.</p>
    pub fn set_variable_importance_metrics(
        mut self,
        input: std::option::Option<crate::types::VariableImportanceMetrics>,
    ) -> Self {
        self.variable_importance_metrics = input;
        self
    }
    /// Consumes the builder and constructs a [`TrainingResult`](crate::types::TrainingResult).
    pub fn build(self) -> crate::types::TrainingResult {
        crate::types::TrainingResult {
            data_validation_metrics: self.data_validation_metrics,
            training_metrics: self.training_metrics,
            variable_importance_metrics: self.variable_importance_metrics,
        }
    }
}
