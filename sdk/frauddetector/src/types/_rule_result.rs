// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The rule results.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleResult {
    /// <p>The rule ID that was matched, based on the rule execution mode.</p>
    pub rule_id: ::std::option::Option<::std::string::String>,
    /// <p>The outcomes of the matched rule, based on the rule execution mode.</p>
    pub outcomes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RuleResult {
    /// <p>The rule ID that was matched, based on the rule execution mode.</p>
    pub fn rule_id(&self) -> ::std::option::Option<&str> {
        self.rule_id.as_deref()
    }
    /// <p>The outcomes of the matched rule, based on the rule execution mode.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.outcomes.is_none()`.
    pub fn outcomes(&self) -> &[::std::string::String] {
        self.outcomes.as_deref().unwrap_or_default()
    }
}
impl RuleResult {
    /// Creates a new builder-style object to manufacture [`RuleResult`](crate::types::RuleResult).
    pub fn builder() -> crate::types::builders::RuleResultBuilder {
        crate::types::builders::RuleResultBuilder::default()
    }
}

/// A builder for [`RuleResult`](crate::types::RuleResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RuleResultBuilder {
    pub(crate) rule_id: ::std::option::Option<::std::string::String>,
    pub(crate) outcomes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RuleResultBuilder {
    /// <p>The rule ID that was matched, based on the rule execution mode.</p>
    pub fn rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The rule ID that was matched, based on the rule execution mode.</p>
    pub fn set_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>The rule ID that was matched, based on the rule execution mode.</p>
    pub fn get_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_id
    }
    /// Appends an item to `outcomes`.
    ///
    /// To override the contents of this collection use [`set_outcomes`](Self::set_outcomes).
    ///
    /// <p>The outcomes of the matched rule, based on the rule execution mode.</p>
    pub fn outcomes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.outcomes.unwrap_or_default();
        v.push(input.into());
        self.outcomes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The outcomes of the matched rule, based on the rule execution mode.</p>
    pub fn set_outcomes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.outcomes = input;
        self
    }
    /// <p>The outcomes of the matched rule, based on the rule execution mode.</p>
    pub fn get_outcomes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.outcomes
    }
    /// Consumes the builder and constructs a [`RuleResult`](crate::types::RuleResult).
    pub fn build(self) -> crate::types::RuleResult {
        crate::types::RuleResult {
            rule_id: self.rule_id,
            outcomes: self.outcomes,
        }
    }
}
