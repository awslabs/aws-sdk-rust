// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Data about the stored events.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IngestedEventStatistics {
    /// <p>The number of stored events.</p>
    #[doc(hidden)]
    pub number_of_events: std::option::Option<i64>,
    /// <p>The total size of the stored events.</p>
    #[doc(hidden)]
    pub event_data_size_in_bytes: std::option::Option<i64>,
    /// <p>The oldest stored event.</p>
    #[doc(hidden)]
    pub least_recent_event: std::option::Option<std::string::String>,
    /// <p>The newest stored event.</p>
    #[doc(hidden)]
    pub most_recent_event: std::option::Option<std::string::String>,
    /// <p>Timestamp of when the stored event was last updated. </p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<std::string::String>,
}
impl IngestedEventStatistics {
    /// <p>The number of stored events.</p>
    pub fn number_of_events(&self) -> std::option::Option<i64> {
        self.number_of_events
    }
    /// <p>The total size of the stored events.</p>
    pub fn event_data_size_in_bytes(&self) -> std::option::Option<i64> {
        self.event_data_size_in_bytes
    }
    /// <p>The oldest stored event.</p>
    pub fn least_recent_event(&self) -> std::option::Option<&str> {
        self.least_recent_event.as_deref()
    }
    /// <p>The newest stored event.</p>
    pub fn most_recent_event(&self) -> std::option::Option<&str> {
        self.most_recent_event.as_deref()
    }
    /// <p>Timestamp of when the stored event was last updated. </p>
    pub fn last_updated_time(&self) -> std::option::Option<&str> {
        self.last_updated_time.as_deref()
    }
}
impl IngestedEventStatistics {
    /// Creates a new builder-style object to manufacture [`IngestedEventStatistics`](crate::types::IngestedEventStatistics).
    pub fn builder() -> crate::types::builders::IngestedEventStatisticsBuilder {
        crate::types::builders::IngestedEventStatisticsBuilder::default()
    }
}

/// A builder for [`IngestedEventStatistics`](crate::types::IngestedEventStatistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IngestedEventStatisticsBuilder {
    pub(crate) number_of_events: std::option::Option<i64>,
    pub(crate) event_data_size_in_bytes: std::option::Option<i64>,
    pub(crate) least_recent_event: std::option::Option<std::string::String>,
    pub(crate) most_recent_event: std::option::Option<std::string::String>,
    pub(crate) last_updated_time: std::option::Option<std::string::String>,
}
impl IngestedEventStatisticsBuilder {
    /// <p>The number of stored events.</p>
    pub fn number_of_events(mut self, input: i64) -> Self {
        self.number_of_events = Some(input);
        self
    }
    /// <p>The number of stored events.</p>
    pub fn set_number_of_events(mut self, input: std::option::Option<i64>) -> Self {
        self.number_of_events = input;
        self
    }
    /// <p>The total size of the stored events.</p>
    pub fn event_data_size_in_bytes(mut self, input: i64) -> Self {
        self.event_data_size_in_bytes = Some(input);
        self
    }
    /// <p>The total size of the stored events.</p>
    pub fn set_event_data_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.event_data_size_in_bytes = input;
        self
    }
    /// <p>The oldest stored event.</p>
    pub fn least_recent_event(mut self, input: impl Into<std::string::String>) -> Self {
        self.least_recent_event = Some(input.into());
        self
    }
    /// <p>The oldest stored event.</p>
    pub fn set_least_recent_event(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.least_recent_event = input;
        self
    }
    /// <p>The newest stored event.</p>
    pub fn most_recent_event(mut self, input: impl Into<std::string::String>) -> Self {
        self.most_recent_event = Some(input.into());
        self
    }
    /// <p>The newest stored event.</p>
    pub fn set_most_recent_event(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.most_recent_event = input;
        self
    }
    /// <p>Timestamp of when the stored event was last updated. </p>
    pub fn last_updated_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_updated_time = Some(input.into());
        self
    }
    /// <p>Timestamp of when the stored event was last updated. </p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// Consumes the builder and constructs a [`IngestedEventStatistics`](crate::types::IngestedEventStatistics).
    pub fn build(self) -> crate::types::IngestedEventStatistics {
        crate::types::IngestedEventStatistics {
            number_of_events: self.number_of_events,
            event_data_size_in_bytes: self.event_data_size_in_bytes,
            least_recent_event: self.least_recent_event,
            most_recent_event: self.most_recent_event,
            last_updated_time: self.last_updated_time,
        }
    }
}
