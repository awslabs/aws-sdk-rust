// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The log odds metric details.</p>
/// <p>Account Takeover Insights (ATI) model uses event variables from the login data you provide to continuously calculate a set of variables (aggregated variables) based on historical events. For example, your ATI model might calculate the number of times an user has logged in using the same IP address. In this case, event variables used to derive the aggregated variables are <code>IP address</code> and <code>user</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AggregatedLogOddsMetric {
    /// <p> The names of all the variables. </p>
    #[doc(hidden)]
    pub variable_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> The relative importance of the variables in the list to the other event variable. </p>
    #[doc(hidden)]
    pub aggregated_variables_importance: std::option::Option<f32>,
}
impl AggregatedLogOddsMetric {
    /// <p> The names of all the variables. </p>
    pub fn variable_names(&self) -> std::option::Option<&[std::string::String]> {
        self.variable_names.as_deref()
    }
    /// <p> The relative importance of the variables in the list to the other event variable. </p>
    pub fn aggregated_variables_importance(&self) -> std::option::Option<f32> {
        self.aggregated_variables_importance
    }
}
impl AggregatedLogOddsMetric {
    /// Creates a new builder-style object to manufacture [`AggregatedLogOddsMetric`](crate::types::AggregatedLogOddsMetric).
    pub fn builder() -> crate::types::builders::AggregatedLogOddsMetricBuilder {
        crate::types::builders::AggregatedLogOddsMetricBuilder::default()
    }
}

/// A builder for [`AggregatedLogOddsMetric`](crate::types::AggregatedLogOddsMetric).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AggregatedLogOddsMetricBuilder {
    pub(crate) variable_names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) aggregated_variables_importance: std::option::Option<f32>,
}
impl AggregatedLogOddsMetricBuilder {
    /// Appends an item to `variable_names`.
    ///
    /// To override the contents of this collection use [`set_variable_names`](Self::set_variable_names).
    ///
    /// <p> The names of all the variables. </p>
    pub fn variable_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.variable_names.unwrap_or_default();
        v.push(input.into());
        self.variable_names = Some(v);
        self
    }
    /// <p> The names of all the variables. </p>
    pub fn set_variable_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.variable_names = input;
        self
    }
    /// <p> The relative importance of the variables in the list to the other event variable. </p>
    pub fn aggregated_variables_importance(mut self, input: f32) -> Self {
        self.aggregated_variables_importance = Some(input);
        self
    }
    /// <p> The relative importance of the variables in the list to the other event variable. </p>
    pub fn set_aggregated_variables_importance(mut self, input: std::option::Option<f32>) -> Self {
        self.aggregated_variables_importance = input;
        self
    }
    /// Consumes the builder and constructs a [`AggregatedLogOddsMetric`](crate::types::AggregatedLogOddsMetric).
    pub fn build(self) -> crate::types::AggregatedLogOddsMetric {
        crate::types::AggregatedLogOddsMetric {
            variable_names: self.variable_names,
            aggregated_variables_importance: self.aggregated_variables_importance,
        }
    }
}
