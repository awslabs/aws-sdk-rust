// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Fraud Detector
///
/// Client for invoking operations on Amazon Fraud Detector. Each operation on Amazon Fraud Detector is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_frauddetector::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_frauddetector::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_frauddetector::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchCreateVariable`](crate::client::fluent_builders::BatchCreateVariable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`variable_entries(Vec<VariableEntry>)`](crate::client::fluent_builders::BatchCreateVariable::variable_entries) / [`set_variable_entries(Option<Vec<VariableEntry>>)`](crate::client::fluent_builders::BatchCreateVariable::set_variable_entries): <p>The list of variables for the batch create variable request.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::BatchCreateVariable::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::BatchCreateVariable::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`BatchCreateVariableOutput`](crate::output::BatchCreateVariableOutput) with field(s):
    ///   - [`errors(Option<Vec<BatchCreateVariableError>>)`](crate::output::BatchCreateVariableOutput::errors): <p>Provides the errors for the <code>BatchCreateVariable</code> request.</p>
    /// - On failure, responds with [`SdkError<BatchCreateVariableError>`](crate::error::BatchCreateVariableError)
    pub fn batch_create_variable(&self) -> crate::client::fluent_builders::BatchCreateVariable {
        crate::client::fluent_builders::BatchCreateVariable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchGetVariable`](crate::client::fluent_builders::BatchGetVariable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`names(Vec<String>)`](crate::client::fluent_builders::BatchGetVariable::names) / [`set_names(Option<Vec<String>>)`](crate::client::fluent_builders::BatchGetVariable::set_names): <p>The list of variable names to get.</p>
    /// - On success, responds with [`BatchGetVariableOutput`](crate::output::BatchGetVariableOutput) with field(s):
    ///   - [`variables(Option<Vec<Variable>>)`](crate::output::BatchGetVariableOutput::variables): <p>The returned variables.</p>
    ///   - [`errors(Option<Vec<BatchGetVariableError>>)`](crate::output::BatchGetVariableOutput::errors): <p>The errors from the request.</p>
    /// - On failure, responds with [`SdkError<BatchGetVariableError>`](crate::error::BatchGetVariableError)
    pub fn batch_get_variable(&self) -> crate::client::fluent_builders::BatchGetVariable {
        crate::client::fluent_builders::BatchGetVariable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CancelBatchImportJob`](crate::client::fluent_builders::CancelBatchImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::CancelBatchImportJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::CancelBatchImportJob::set_job_id): <p> The ID of an in-progress batch import job to cancel. </p>  <p>Amazon Fraud Detector will throw an error if the batch import job is in <code>FAILED</code>, <code>CANCELED</code>, or <code>COMPLETED</code> state.</p>
    /// - On success, responds with [`CancelBatchImportJobOutput`](crate::output::CancelBatchImportJobOutput)

    /// - On failure, responds with [`SdkError<CancelBatchImportJobError>`](crate::error::CancelBatchImportJobError)
    pub fn cancel_batch_import_job(&self) -> crate::client::fluent_builders::CancelBatchImportJob {
        crate::client::fluent_builders::CancelBatchImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CancelBatchPredictionJob`](crate::client::fluent_builders::CancelBatchPredictionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::CancelBatchPredictionJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::CancelBatchPredictionJob::set_job_id): <p>The ID of the batch prediction job to cancel.</p>
    /// - On success, responds with [`CancelBatchPredictionJobOutput`](crate::output::CancelBatchPredictionJobOutput)

    /// - On failure, responds with [`SdkError<CancelBatchPredictionJobError>`](crate::error::CancelBatchPredictionJobError)
    pub fn cancel_batch_prediction_job(
        &self,
    ) -> crate::client::fluent_builders::CancelBatchPredictionJob {
        crate::client::fluent_builders::CancelBatchPredictionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateBatchImportJob`](crate::client::fluent_builders::CreateBatchImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::CreateBatchImportJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::CreateBatchImportJob::set_job_id): <p>The ID of the batch import job. The ID cannot be of a past job, unless the job exists in <code>CREATE_FAILED</code> state.</p>
    ///   - [`input_path(impl Into<String>)`](crate::client::fluent_builders::CreateBatchImportJob::input_path) / [`set_input_path(Option<String>)`](crate::client::fluent_builders::CreateBatchImportJob::set_input_path): <p>The URI that points to the Amazon S3 location of your data file.</p>
    ///   - [`output_path(impl Into<String>)`](crate::client::fluent_builders::CreateBatchImportJob::output_path) / [`set_output_path(Option<String>)`](crate::client::fluent_builders::CreateBatchImportJob::set_output_path): <p>The URI that points to the Amazon S3 location for storing your results. </p>
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::CreateBatchImportJob::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::CreateBatchImportJob::set_event_type_name): <p>The name of the event type.</p>
    ///   - [`iam_role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateBatchImportJob::iam_role_arn) / [`set_iam_role_arn(Option<String>)`](crate::client::fluent_builders::CreateBatchImportJob::set_iam_role_arn): <p>The ARN of the IAM role created for Amazon S3 bucket that holds your data file.</p>  <p>The IAM role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateBatchImportJob::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateBatchImportJob::set_tags): <p>A collection of key-value pairs associated with this request. </p>
    /// - On success, responds with [`CreateBatchImportJobOutput`](crate::output::CreateBatchImportJobOutput)

    /// - On failure, responds with [`SdkError<CreateBatchImportJobError>`](crate::error::CreateBatchImportJobError)
    pub fn create_batch_import_job(&self) -> crate::client::fluent_builders::CreateBatchImportJob {
        crate::client::fluent_builders::CreateBatchImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateBatchPredictionJob`](crate::client::fluent_builders::CreateBatchPredictionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::set_job_id): <p>The ID of the batch prediction job.</p>
    ///   - [`input_path(impl Into<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::input_path) / [`set_input_path(Option<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::set_input_path): <p>The Amazon S3 location of your training file.</p>
    ///   - [`output_path(impl Into<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::output_path) / [`set_output_path(Option<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::set_output_path): <p>The Amazon S3 location of your output file.</p>
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::set_event_type_name): <p>The name of the event type.</p>
    ///   - [`detector_name(impl Into<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::detector_name) / [`set_detector_name(Option<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::set_detector_name): <p>The name of the detector.</p>
    ///   - [`detector_version(impl Into<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::detector_version) / [`set_detector_version(Option<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::set_detector_version): <p>The detector version.</p>
    ///   - [`iam_role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::iam_role_arn) / [`set_iam_role_arn(Option<String>)`](crate::client::fluent_builders::CreateBatchPredictionJob::set_iam_role_arn): <p>The ARN of the IAM role to use for this job request.</p>  <p>The IAM Role must have read permissions to your input S3 bucket and write permissions to your output S3 bucket. For more information about bucket permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-policies-s3.html">User policy examples</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateBatchPredictionJob::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateBatchPredictionJob::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`CreateBatchPredictionJobOutput`](crate::output::CreateBatchPredictionJobOutput)

    /// - On failure, responds with [`SdkError<CreateBatchPredictionJobError>`](crate::error::CreateBatchPredictionJobError)
    pub fn create_batch_prediction_job(
        &self,
    ) -> crate::client::fluent_builders::CreateBatchPredictionJob {
        crate::client::fluent_builders::CreateBatchPredictionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDetectorVersion`](crate::client::fluent_builders::CreateDetectorVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::CreateDetectorVersion::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::CreateDetectorVersion::set_detector_id): <p>The ID of the detector under which you want to create a new version.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateDetectorVersion::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateDetectorVersion::set_description): <p>The description of the detector version.</p>
    ///   - [`external_model_endpoints(Vec<String>)`](crate::client::fluent_builders::CreateDetectorVersion::external_model_endpoints) / [`set_external_model_endpoints(Option<Vec<String>>)`](crate::client::fluent_builders::CreateDetectorVersion::set_external_model_endpoints): <p>The Amazon Sagemaker model endpoints to include in the detector version.</p>
    ///   - [`rules(Vec<Rule>)`](crate::client::fluent_builders::CreateDetectorVersion::rules) / [`set_rules(Option<Vec<Rule>>)`](crate::client::fluent_builders::CreateDetectorVersion::set_rules): <p>The rules to include in the detector version.</p>
    ///   - [`model_versions(Vec<ModelVersion>)`](crate::client::fluent_builders::CreateDetectorVersion::model_versions) / [`set_model_versions(Option<Vec<ModelVersion>>)`](crate::client::fluent_builders::CreateDetectorVersion::set_model_versions): <p>The model versions to include in the detector version.</p>
    ///   - [`rule_execution_mode(RuleExecutionMode)`](crate::client::fluent_builders::CreateDetectorVersion::rule_execution_mode) / [`set_rule_execution_mode(Option<RuleExecutionMode>)`](crate::client::fluent_builders::CreateDetectorVersion::set_rule_execution_mode): <p>The rule execution mode for the rules included in the detector version.</p>  <p>You can define and edit the rule mode at the detector version level, when it is in draft status.</p>  <p>If you specify <code>FIRST_MATCHED</code>, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>  <p>If you specifiy <code>ALL_MATCHED</code>, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. </p>  <p>The default behavior is <code>FIRST_MATCHED</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateDetectorVersion::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateDetectorVersion::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`CreateDetectorVersionOutput`](crate::output::CreateDetectorVersionOutput) with field(s):
    ///   - [`detector_id(Option<String>)`](crate::output::CreateDetectorVersionOutput::detector_id): <p>The ID for the created version's parent detector.</p>
    ///   - [`detector_version_id(Option<String>)`](crate::output::CreateDetectorVersionOutput::detector_version_id): <p>The ID for the created detector. </p>
    ///   - [`status(Option<DetectorVersionStatus>)`](crate::output::CreateDetectorVersionOutput::status): <p>The status of the detector version.</p>
    /// - On failure, responds with [`SdkError<CreateDetectorVersionError>`](crate::error::CreateDetectorVersionError)
    pub fn create_detector_version(&self) -> crate::client::fluent_builders::CreateDetectorVersion {
        crate::client::fluent_builders::CreateDetectorVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateModel`](crate::client::fluent_builders::CreateModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_id(impl Into<String>)`](crate::client::fluent_builders::CreateModel::model_id) / [`set_model_id(Option<String>)`](crate::client::fluent_builders::CreateModel::set_model_id): <p>The model ID.</p>
    ///   - [`model_type(ModelTypeEnum)`](crate::client::fluent_builders::CreateModel::model_type) / [`set_model_type(Option<ModelTypeEnum>)`](crate::client::fluent_builders::CreateModel::set_model_type): <p>The model type. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateModel::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateModel::set_description): <p>The model description. </p>
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::CreateModel::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::CreateModel::set_event_type_name): <p>The name of the event type.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateModel::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateModel::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`CreateModelOutput`](crate::output::CreateModelOutput)

    /// - On failure, responds with [`SdkError<CreateModelError>`](crate::error::CreateModelError)
    pub fn create_model(&self) -> crate::client::fluent_builders::CreateModel {
        crate::client::fluent_builders::CreateModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateModelVersion`](crate::client::fluent_builders::CreateModelVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_id(impl Into<String>)`](crate::client::fluent_builders::CreateModelVersion::model_id) / [`set_model_id(Option<String>)`](crate::client::fluent_builders::CreateModelVersion::set_model_id): <p>The model ID. </p>
    ///   - [`model_type(ModelTypeEnum)`](crate::client::fluent_builders::CreateModelVersion::model_type) / [`set_model_type(Option<ModelTypeEnum>)`](crate::client::fluent_builders::CreateModelVersion::set_model_type): <p>The model type.</p>
    ///   - [`training_data_source(TrainingDataSourceEnum)`](crate::client::fluent_builders::CreateModelVersion::training_data_source) / [`set_training_data_source(Option<TrainingDataSourceEnum>)`](crate::client::fluent_builders::CreateModelVersion::set_training_data_source): <p>The training data source location in Amazon S3. </p>
    ///   - [`training_data_schema(TrainingDataSchema)`](crate::client::fluent_builders::CreateModelVersion::training_data_schema) / [`set_training_data_schema(Option<TrainingDataSchema>)`](crate::client::fluent_builders::CreateModelVersion::set_training_data_schema): <p>The training data schema.</p>
    ///   - [`external_events_detail(ExternalEventsDetail)`](crate::client::fluent_builders::CreateModelVersion::external_events_detail) / [`set_external_events_detail(Option<ExternalEventsDetail>)`](crate::client::fluent_builders::CreateModelVersion::set_external_events_detail): <p>Details of the external events data used for model version training. Required if <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code>.</p>
    ///   - [`ingested_events_detail(IngestedEventsDetail)`](crate::client::fluent_builders::CreateModelVersion::ingested_events_detail) / [`set_ingested_events_detail(Option<IngestedEventsDetail>)`](crate::client::fluent_builders::CreateModelVersion::set_ingested_events_detail): <p>Details of the ingested events data used for model version training. Required if <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateModelVersion::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateModelVersion::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`CreateModelVersionOutput`](crate::output::CreateModelVersionOutput) with field(s):
    ///   - [`model_id(Option<String>)`](crate::output::CreateModelVersionOutput::model_id): <p>The model ID.</p>
    ///   - [`model_type(Option<ModelTypeEnum>)`](crate::output::CreateModelVersionOutput::model_type): <p>The model type.</p>
    ///   - [`model_version_number(Option<String>)`](crate::output::CreateModelVersionOutput::model_version_number): <p>The model version number of the model version created.</p>
    ///   - [`status(Option<String>)`](crate::output::CreateModelVersionOutput::status): <p>The model version status. </p>
    /// - On failure, responds with [`SdkError<CreateModelVersionError>`](crate::error::CreateModelVersionError)
    pub fn create_model_version(&self) -> crate::client::fluent_builders::CreateModelVersion {
        crate::client::fluent_builders::CreateModelVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRule`](crate::client::fluent_builders::CreateRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_id(impl Into<String>)`](crate::client::fluent_builders::CreateRule::rule_id) / [`set_rule_id(Option<String>)`](crate::client::fluent_builders::CreateRule::set_rule_id): <p>The rule ID.</p>
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::CreateRule::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::CreateRule::set_detector_id): <p>The detector ID for the rule's parent detector.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateRule::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateRule::set_description): <p>The rule description.</p>
    ///   - [`expression(impl Into<String>)`](crate::client::fluent_builders::CreateRule::expression) / [`set_expression(Option<String>)`](crate::client::fluent_builders::CreateRule::set_expression): <p>The rule expression.</p>
    ///   - [`language(Language)`](crate::client::fluent_builders::CreateRule::language) / [`set_language(Option<Language>)`](crate::client::fluent_builders::CreateRule::set_language): <p>The language of the rule.</p>
    ///   - [`outcomes(Vec<String>)`](crate::client::fluent_builders::CreateRule::outcomes) / [`set_outcomes(Option<Vec<String>>)`](crate::client::fluent_builders::CreateRule::set_outcomes): <p>The outcome or outcomes returned when the rule expression matches.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateRule::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateRule::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`CreateRuleOutput`](crate::output::CreateRuleOutput) with field(s):
    ///   - [`rule(Option<Rule>)`](crate::output::CreateRuleOutput::rule): <p>The created rule.</p>
    /// - On failure, responds with [`SdkError<CreateRuleError>`](crate::error::CreateRuleError)
    pub fn create_rule(&self) -> crate::client::fluent_builders::CreateRule {
        crate::client::fluent_builders::CreateRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateVariable`](crate::client::fluent_builders::CreateVariable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateVariable::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateVariable::set_name): <p>The name of the variable.</p>
    ///   - [`data_type(DataType)`](crate::client::fluent_builders::CreateVariable::data_type) / [`set_data_type(Option<DataType>)`](crate::client::fluent_builders::CreateVariable::set_data_type): <p>The data type.</p>
    ///   - [`data_source(DataSource)`](crate::client::fluent_builders::CreateVariable::data_source) / [`set_data_source(Option<DataSource>)`](crate::client::fluent_builders::CreateVariable::set_data_source): <p>The source of the data.</p>
    ///   - [`default_value(impl Into<String>)`](crate::client::fluent_builders::CreateVariable::default_value) / [`set_default_value(Option<String>)`](crate::client::fluent_builders::CreateVariable::set_default_value): <p>The default value for the variable when no value is received.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateVariable::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateVariable::set_description): <p>The description.</p>
    ///   - [`variable_type(impl Into<String>)`](crate::client::fluent_builders::CreateVariable::variable_type) / [`set_variable_type(Option<String>)`](crate::client::fluent_builders::CreateVariable::set_variable_type): <p>The variable type. For more information see <a href="https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types">Variable types</a>. </p>  <p>Valid Values: <code>AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT</code> </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateVariable::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateVariable::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`CreateVariableOutput`](crate::output::CreateVariableOutput)

    /// - On failure, responds with [`SdkError<CreateVariableError>`](crate::error::CreateVariableError)
    pub fn create_variable(&self) -> crate::client::fluent_builders::CreateVariable {
        crate::client::fluent_builders::CreateVariable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteBatchImportJob`](crate::client::fluent_builders::DeleteBatchImportJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::DeleteBatchImportJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::DeleteBatchImportJob::set_job_id): <p>The ID of the batch import job to delete. </p>
    /// - On success, responds with [`DeleteBatchImportJobOutput`](crate::output::DeleteBatchImportJobOutput)

    /// - On failure, responds with [`SdkError<DeleteBatchImportJobError>`](crate::error::DeleteBatchImportJobError)
    pub fn delete_batch_import_job(&self) -> crate::client::fluent_builders::DeleteBatchImportJob {
        crate::client::fluent_builders::DeleteBatchImportJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteBatchPredictionJob`](crate::client::fluent_builders::DeleteBatchPredictionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::DeleteBatchPredictionJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::DeleteBatchPredictionJob::set_job_id): <p>The ID of the batch prediction job to delete.</p>
    /// - On success, responds with [`DeleteBatchPredictionJobOutput`](crate::output::DeleteBatchPredictionJobOutput)

    /// - On failure, responds with [`SdkError<DeleteBatchPredictionJobError>`](crate::error::DeleteBatchPredictionJobError)
    pub fn delete_batch_prediction_job(
        &self,
    ) -> crate::client::fluent_builders::DeleteBatchPredictionJob {
        crate::client::fluent_builders::DeleteBatchPredictionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDetector`](crate::client::fluent_builders::DeleteDetector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::DeleteDetector::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::DeleteDetector::set_detector_id): <p>The ID of the detector to delete.</p>
    /// - On success, responds with [`DeleteDetectorOutput`](crate::output::DeleteDetectorOutput)

    /// - On failure, responds with [`SdkError<DeleteDetectorError>`](crate::error::DeleteDetectorError)
    pub fn delete_detector(&self) -> crate::client::fluent_builders::DeleteDetector {
        crate::client::fluent_builders::DeleteDetector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDetectorVersion`](crate::client::fluent_builders::DeleteDetectorVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::DeleteDetectorVersion::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::DeleteDetectorVersion::set_detector_id): <p>The ID of the parent detector for the detector version to delete.</p>
    ///   - [`detector_version_id(impl Into<String>)`](crate::client::fluent_builders::DeleteDetectorVersion::detector_version_id) / [`set_detector_version_id(Option<String>)`](crate::client::fluent_builders::DeleteDetectorVersion::set_detector_version_id): <p>The ID of the detector version to delete.</p>
    /// - On success, responds with [`DeleteDetectorVersionOutput`](crate::output::DeleteDetectorVersionOutput)

    /// - On failure, responds with [`SdkError<DeleteDetectorVersionError>`](crate::error::DeleteDetectorVersionError)
    pub fn delete_detector_version(&self) -> crate::client::fluent_builders::DeleteDetectorVersion {
        crate::client::fluent_builders::DeleteDetectorVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteEntityType`](crate::client::fluent_builders::DeleteEntityType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteEntityType::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteEntityType::set_name): <p>The name of the entity type to delete.</p>
    /// - On success, responds with [`DeleteEntityTypeOutput`](crate::output::DeleteEntityTypeOutput)

    /// - On failure, responds with [`SdkError<DeleteEntityTypeError>`](crate::error::DeleteEntityTypeError)
    pub fn delete_entity_type(&self) -> crate::client::fluent_builders::DeleteEntityType {
        crate::client::fluent_builders::DeleteEntityType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteEvent`](crate::client::fluent_builders::DeleteEvent) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_id(impl Into<String>)`](crate::client::fluent_builders::DeleteEvent::event_id) / [`set_event_id(Option<String>)`](crate::client::fluent_builders::DeleteEvent::set_event_id): <p>The ID of the event to delete.</p>
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::DeleteEvent::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::DeleteEvent::set_event_type_name): <p>The name of the event type.</p>
    ///   - [`delete_audit_history(bool)`](crate::client::fluent_builders::DeleteEvent::delete_audit_history) / [`set_delete_audit_history(Option<bool>)`](crate::client::fluent_builders::DeleteEvent::set_delete_audit_history): <p>Specifies whether or not to delete any predictions associated with the event.</p>
    /// - On success, responds with [`DeleteEventOutput`](crate::output::DeleteEventOutput)

    /// - On failure, responds with [`SdkError<DeleteEventError>`](crate::error::DeleteEventError)
    pub fn delete_event(&self) -> crate::client::fluent_builders::DeleteEvent {
        crate::client::fluent_builders::DeleteEvent::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteEventsByEventType`](crate::client::fluent_builders::DeleteEventsByEventType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::DeleteEventsByEventType::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::DeleteEventsByEventType::set_event_type_name): <p>The name of the event type.</p>
    /// - On success, responds with [`DeleteEventsByEventTypeOutput`](crate::output::DeleteEventsByEventTypeOutput) with field(s):
    ///   - [`event_type_name(Option<String>)`](crate::output::DeleteEventsByEventTypeOutput::event_type_name): <p>Name of event type for which to delete the events.</p>
    ///   - [`events_deletion_status(Option<String>)`](crate::output::DeleteEventsByEventTypeOutput::events_deletion_status): <p>The status of the delete request.</p>
    /// - On failure, responds with [`SdkError<DeleteEventsByEventTypeError>`](crate::error::DeleteEventsByEventTypeError)
    pub fn delete_events_by_event_type(
        &self,
    ) -> crate::client::fluent_builders::DeleteEventsByEventType {
        crate::client::fluent_builders::DeleteEventsByEventType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteEventType`](crate::client::fluent_builders::DeleteEventType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteEventType::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteEventType::set_name): <p>The name of the event type to delete.</p>
    /// - On success, responds with [`DeleteEventTypeOutput`](crate::output::DeleteEventTypeOutput)

    /// - On failure, responds with [`SdkError<DeleteEventTypeError>`](crate::error::DeleteEventTypeError)
    pub fn delete_event_type(&self) -> crate::client::fluent_builders::DeleteEventType {
        crate::client::fluent_builders::DeleteEventType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteExternalModel`](crate::client::fluent_builders::DeleteExternalModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_endpoint(impl Into<String>)`](crate::client::fluent_builders::DeleteExternalModel::model_endpoint) / [`set_model_endpoint(Option<String>)`](crate::client::fluent_builders::DeleteExternalModel::set_model_endpoint): <p>The endpoint of the Amazon Sagemaker model to delete.</p>
    /// - On success, responds with [`DeleteExternalModelOutput`](crate::output::DeleteExternalModelOutput)

    /// - On failure, responds with [`SdkError<DeleteExternalModelError>`](crate::error::DeleteExternalModelError)
    pub fn delete_external_model(&self) -> crate::client::fluent_builders::DeleteExternalModel {
        crate::client::fluent_builders::DeleteExternalModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLabel`](crate::client::fluent_builders::DeleteLabel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteLabel::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteLabel::set_name): <p>The name of the label to delete.</p>
    /// - On success, responds with [`DeleteLabelOutput`](crate::output::DeleteLabelOutput)

    /// - On failure, responds with [`SdkError<DeleteLabelError>`](crate::error::DeleteLabelError)
    pub fn delete_label(&self) -> crate::client::fluent_builders::DeleteLabel {
        crate::client::fluent_builders::DeleteLabel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteModel`](crate::client::fluent_builders::DeleteModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_id(impl Into<String>)`](crate::client::fluent_builders::DeleteModel::model_id) / [`set_model_id(Option<String>)`](crate::client::fluent_builders::DeleteModel::set_model_id): <p>The model ID of the model to delete.</p>
    ///   - [`model_type(ModelTypeEnum)`](crate::client::fluent_builders::DeleteModel::model_type) / [`set_model_type(Option<ModelTypeEnum>)`](crate::client::fluent_builders::DeleteModel::set_model_type): <p>The model type of the model to delete.</p>
    /// - On success, responds with [`DeleteModelOutput`](crate::output::DeleteModelOutput)

    /// - On failure, responds with [`SdkError<DeleteModelError>`](crate::error::DeleteModelError)
    pub fn delete_model(&self) -> crate::client::fluent_builders::DeleteModel {
        crate::client::fluent_builders::DeleteModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteModelVersion`](crate::client::fluent_builders::DeleteModelVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_id(impl Into<String>)`](crate::client::fluent_builders::DeleteModelVersion::model_id) / [`set_model_id(Option<String>)`](crate::client::fluent_builders::DeleteModelVersion::set_model_id): <p>The model ID of the model version to delete.</p>
    ///   - [`model_type(ModelTypeEnum)`](crate::client::fluent_builders::DeleteModelVersion::model_type) / [`set_model_type(Option<ModelTypeEnum>)`](crate::client::fluent_builders::DeleteModelVersion::set_model_type): <p>The model type of the model version to delete.</p>
    ///   - [`model_version_number(impl Into<String>)`](crate::client::fluent_builders::DeleteModelVersion::model_version_number) / [`set_model_version_number(Option<String>)`](crate::client::fluent_builders::DeleteModelVersion::set_model_version_number): <p>The model version number of the model version to delete.</p>
    /// - On success, responds with [`DeleteModelVersionOutput`](crate::output::DeleteModelVersionOutput)

    /// - On failure, responds with [`SdkError<DeleteModelVersionError>`](crate::error::DeleteModelVersionError)
    pub fn delete_model_version(&self) -> crate::client::fluent_builders::DeleteModelVersion {
        crate::client::fluent_builders::DeleteModelVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteOutcome`](crate::client::fluent_builders::DeleteOutcome) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteOutcome::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteOutcome::set_name): <p>The name of the outcome to delete.</p>
    /// - On success, responds with [`DeleteOutcomeOutput`](crate::output::DeleteOutcomeOutput)

    /// - On failure, responds with [`SdkError<DeleteOutcomeError>`](crate::error::DeleteOutcomeError)
    pub fn delete_outcome(&self) -> crate::client::fluent_builders::DeleteOutcome {
        crate::client::fluent_builders::DeleteOutcome::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRule`](crate::client::fluent_builders::DeleteRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule(Rule)`](crate::client::fluent_builders::DeleteRule::rule) / [`set_rule(Option<Rule>)`](crate::client::fluent_builders::DeleteRule::set_rule): <p>A rule.</p>
    /// - On success, responds with [`DeleteRuleOutput`](crate::output::DeleteRuleOutput)

    /// - On failure, responds with [`SdkError<DeleteRuleError>`](crate::error::DeleteRuleError)
    pub fn delete_rule(&self) -> crate::client::fluent_builders::DeleteRule {
        crate::client::fluent_builders::DeleteRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteVariable`](crate::client::fluent_builders::DeleteVariable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteVariable::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteVariable::set_name): <p>The name of the variable to delete.</p>
    /// - On success, responds with [`DeleteVariableOutput`](crate::output::DeleteVariableOutput)

    /// - On failure, responds with [`SdkError<DeleteVariableError>`](crate::error::DeleteVariableError)
    pub fn delete_variable(&self) -> crate::client::fluent_builders::DeleteVariable {
        crate::client::fluent_builders::DeleteVariable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDetector`](crate::client::fluent_builders::DescribeDetector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::DescribeDetector::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::DescribeDetector::set_detector_id): <p>The detector ID.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeDetector::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeDetector::set_next_token): <p>The next token from the previous response.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeDetector::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeDetector::set_max_results): <p>The maximum number of results to return for the request.</p>
    /// - On success, responds with [`DescribeDetectorOutput`](crate::output::DescribeDetectorOutput) with field(s):
    ///   - [`detector_id(Option<String>)`](crate::output::DescribeDetectorOutput::detector_id): <p>The detector ID.</p>
    ///   - [`detector_version_summaries(Option<Vec<DetectorVersionSummary>>)`](crate::output::DescribeDetectorOutput::detector_version_summaries): <p>The status and description for each detector version.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeDetectorOutput::next_token): <p>The next token to be used for subsequent requests.</p>
    ///   - [`arn(Option<String>)`](crate::output::DescribeDetectorOutput::arn): <p>The detector ARN.</p>
    /// - On failure, responds with [`SdkError<DescribeDetectorError>`](crate::error::DescribeDetectorError)
    pub fn describe_detector(&self) -> crate::client::fluent_builders::DescribeDetector {
        crate::client::fluent_builders::DescribeDetector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeModelVersions`](crate::client::fluent_builders::DescribeModelVersions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeModelVersions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_id(impl Into<String>)`](crate::client::fluent_builders::DescribeModelVersions::model_id) / [`set_model_id(Option<String>)`](crate::client::fluent_builders::DescribeModelVersions::set_model_id): <p>The model ID.</p>
    ///   - [`model_version_number(impl Into<String>)`](crate::client::fluent_builders::DescribeModelVersions::model_version_number) / [`set_model_version_number(Option<String>)`](crate::client::fluent_builders::DescribeModelVersions::set_model_version_number): <p>The model version number.</p>
    ///   - [`model_type(ModelTypeEnum)`](crate::client::fluent_builders::DescribeModelVersions::model_type) / [`set_model_type(Option<ModelTypeEnum>)`](crate::client::fluent_builders::DescribeModelVersions::set_model_type): <p>The model type.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeModelVersions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeModelVersions::set_next_token): <p>The next token from the previous results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeModelVersions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeModelVersions::set_max_results): <p>The maximum number of results to return.</p>
    /// - On success, responds with [`DescribeModelVersionsOutput`](crate::output::DescribeModelVersionsOutput) with field(s):
    ///   - [`model_version_details(Option<Vec<ModelVersionDetail>>)`](crate::output::DescribeModelVersionsOutput::model_version_details): <p>The model version details.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeModelVersionsOutput::next_token): <p>The next token.</p>
    /// - On failure, responds with [`SdkError<DescribeModelVersionsError>`](crate::error::DescribeModelVersionsError)
    pub fn describe_model_versions(&self) -> crate::client::fluent_builders::DescribeModelVersions {
        crate::client::fluent_builders::DescribeModelVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetBatchImportJobs`](crate::client::fluent_builders::GetBatchImportJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetBatchImportJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetBatchImportJobs::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetBatchImportJobs::set_job_id): <p>The ID of the batch import job to get.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetBatchImportJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetBatchImportJobs::set_max_results): <p>The maximum number of objects to return for request.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetBatchImportJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetBatchImportJobs::set_next_token): <p>The next token from the previous request.</p>
    /// - On success, responds with [`GetBatchImportJobsOutput`](crate::output::GetBatchImportJobsOutput) with field(s):
    ///   - [`batch_imports(Option<Vec<BatchImport>>)`](crate::output::GetBatchImportJobsOutput::batch_imports): <p>An array containing the details of each batch import job.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetBatchImportJobsOutput::next_token): <p>The next token for the subsequent resquest.</p>
    /// - On failure, responds with [`SdkError<GetBatchImportJobsError>`](crate::error::GetBatchImportJobsError)
    pub fn get_batch_import_jobs(&self) -> crate::client::fluent_builders::GetBatchImportJobs {
        crate::client::fluent_builders::GetBatchImportJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetBatchPredictionJobs`](crate::client::fluent_builders::GetBatchPredictionJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetBatchPredictionJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetBatchPredictionJobs::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetBatchPredictionJobs::set_job_id): <p>The batch prediction job for which to get the details.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetBatchPredictionJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetBatchPredictionJobs::set_max_results): <p>The maximum number of objects to return for the request.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetBatchPredictionJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetBatchPredictionJobs::set_next_token): <p>The next token from the previous request.</p>
    /// - On success, responds with [`GetBatchPredictionJobsOutput`](crate::output::GetBatchPredictionJobsOutput) with field(s):
    ///   - [`batch_predictions(Option<Vec<BatchPrediction>>)`](crate::output::GetBatchPredictionJobsOutput::batch_predictions): <p>An array containing the details of each batch prediction job.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetBatchPredictionJobsOutput::next_token): <p>The next token for the subsequent request.</p>
    /// - On failure, responds with [`SdkError<GetBatchPredictionJobsError>`](crate::error::GetBatchPredictionJobsError)
    pub fn get_batch_prediction_jobs(
        &self,
    ) -> crate::client::fluent_builders::GetBatchPredictionJobs {
        crate::client::fluent_builders::GetBatchPredictionJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDeleteEventsByEventTypeStatus`](crate::client::fluent_builders::GetDeleteEventsByEventTypeStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::GetDeleteEventsByEventTypeStatus::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::GetDeleteEventsByEventTypeStatus::set_event_type_name): <p>Name of event type for which to get the deletion status.</p>
    /// - On success, responds with [`GetDeleteEventsByEventTypeStatusOutput`](crate::output::GetDeleteEventsByEventTypeStatusOutput) with field(s):
    ///   - [`event_type_name(Option<String>)`](crate::output::GetDeleteEventsByEventTypeStatusOutput::event_type_name): <p>The event type name.</p>
    ///   - [`events_deletion_status(Option<AsyncJobStatus>)`](crate::output::GetDeleteEventsByEventTypeStatusOutput::events_deletion_status): <p>The deletion status.</p>
    /// - On failure, responds with [`SdkError<GetDeleteEventsByEventTypeStatusError>`](crate::error::GetDeleteEventsByEventTypeStatusError)
    pub fn get_delete_events_by_event_type_status(
        &self,
    ) -> crate::client::fluent_builders::GetDeleteEventsByEventTypeStatus {
        crate::client::fluent_builders::GetDeleteEventsByEventTypeStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDetectors`](crate::client::fluent_builders::GetDetectors) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetDetectors::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::GetDetectors::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::GetDetectors::set_detector_id): <p>The detector ID.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetDetectors::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetDetectors::set_next_token): <p>The next token for the subsequent request.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetDetectors::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetDetectors::set_max_results): <p>The maximum number of objects to return for the request.</p>
    /// - On success, responds with [`GetDetectorsOutput`](crate::output::GetDetectorsOutput) with field(s):
    ///   - [`detectors(Option<Vec<Detector>>)`](crate::output::GetDetectorsOutput::detectors): <p>The detectors.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetDetectorsOutput::next_token): <p>The next page token.</p>
    /// - On failure, responds with [`SdkError<GetDetectorsError>`](crate::error::GetDetectorsError)
    pub fn get_detectors(&self) -> crate::client::fluent_builders::GetDetectors {
        crate::client::fluent_builders::GetDetectors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDetectorVersion`](crate::client::fluent_builders::GetDetectorVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::GetDetectorVersion::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::GetDetectorVersion::set_detector_id): <p>The detector ID.</p>
    ///   - [`detector_version_id(impl Into<String>)`](crate::client::fluent_builders::GetDetectorVersion::detector_version_id) / [`set_detector_version_id(Option<String>)`](crate::client::fluent_builders::GetDetectorVersion::set_detector_version_id): <p>The detector version ID.</p>
    /// - On success, responds with [`GetDetectorVersionOutput`](crate::output::GetDetectorVersionOutput) with field(s):
    ///   - [`detector_id(Option<String>)`](crate::output::GetDetectorVersionOutput::detector_id): <p>The detector ID.</p>
    ///   - [`detector_version_id(Option<String>)`](crate::output::GetDetectorVersionOutput::detector_version_id): <p>The detector version ID.</p>
    ///   - [`description(Option<String>)`](crate::output::GetDetectorVersionOutput::description): <p>The detector version description.</p>
    ///   - [`external_model_endpoints(Option<Vec<String>>)`](crate::output::GetDetectorVersionOutput::external_model_endpoints): <p>The Amazon SageMaker model endpoints included in the detector version.</p>
    ///   - [`model_versions(Option<Vec<ModelVersion>>)`](crate::output::GetDetectorVersionOutput::model_versions): <p>The model versions included in the detector version. </p>
    ///   - [`rules(Option<Vec<Rule>>)`](crate::output::GetDetectorVersionOutput::rules): <p>The rules included in the detector version.</p>
    ///   - [`status(Option<DetectorVersionStatus>)`](crate::output::GetDetectorVersionOutput::status): <p>The status of the detector version.</p>
    ///   - [`last_updated_time(Option<String>)`](crate::output::GetDetectorVersionOutput::last_updated_time): <p>The timestamp when the detector version was last updated. </p>
    ///   - [`created_time(Option<String>)`](crate::output::GetDetectorVersionOutput::created_time): <p>The timestamp when the detector version was created. </p>
    ///   - [`rule_execution_mode(Option<RuleExecutionMode>)`](crate::output::GetDetectorVersionOutput::rule_execution_mode): <p>The execution mode of the rule in the dectector</p>  <p> <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>  <p> <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
    ///   - [`arn(Option<String>)`](crate::output::GetDetectorVersionOutput::arn): <p>The detector version ARN.</p>
    /// - On failure, responds with [`SdkError<GetDetectorVersionError>`](crate::error::GetDetectorVersionError)
    pub fn get_detector_version(&self) -> crate::client::fluent_builders::GetDetectorVersion {
        crate::client::fluent_builders::GetDetectorVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetEntityTypes`](crate::client::fluent_builders::GetEntityTypes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetEntityTypes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetEntityTypes::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetEntityTypes::set_name): <p>The name.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetEntityTypes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetEntityTypes::set_next_token): <p>The next token for the subsequent request.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetEntityTypes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetEntityTypes::set_max_results): <p>The maximum number of objects to return for the request.</p>
    /// - On success, responds with [`GetEntityTypesOutput`](crate::output::GetEntityTypesOutput) with field(s):
    ///   - [`entity_types(Option<Vec<EntityType>>)`](crate::output::GetEntityTypesOutput::entity_types): <p>An array of entity types.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetEntityTypesOutput::next_token): <p>The next page token.</p>
    /// - On failure, responds with [`SdkError<GetEntityTypesError>`](crate::error::GetEntityTypesError)
    pub fn get_entity_types(&self) -> crate::client::fluent_builders::GetEntityTypes {
        crate::client::fluent_builders::GetEntityTypes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetEvent`](crate::client::fluent_builders::GetEvent) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_id(impl Into<String>)`](crate::client::fluent_builders::GetEvent::event_id) / [`set_event_id(Option<String>)`](crate::client::fluent_builders::GetEvent::set_event_id): <p>The ID of the event to retrieve.</p>
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::GetEvent::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::GetEvent::set_event_type_name): <p>The event type of the event to retrieve.</p>
    /// - On success, responds with [`GetEventOutput`](crate::output::GetEventOutput) with field(s):
    ///   - [`event(Option<Event>)`](crate::output::GetEventOutput::event): <p>The details of the event.</p>
    /// - On failure, responds with [`SdkError<GetEventError>`](crate::error::GetEventError)
    pub fn get_event(&self) -> crate::client::fluent_builders::GetEvent {
        crate::client::fluent_builders::GetEvent::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetEventPrediction`](crate::client::fluent_builders::GetEventPrediction) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::GetEventPrediction::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::GetEventPrediction::set_detector_id): <p>The detector ID.</p>
    ///   - [`detector_version_id(impl Into<String>)`](crate::client::fluent_builders::GetEventPrediction::detector_version_id) / [`set_detector_version_id(Option<String>)`](crate::client::fluent_builders::GetEventPrediction::set_detector_version_id): <p>The detector version ID.</p>
    ///   - [`event_id(impl Into<String>)`](crate::client::fluent_builders::GetEventPrediction::event_id) / [`set_event_id(Option<String>)`](crate::client::fluent_builders::GetEventPrediction::set_event_id): <p>The unique ID used to identify the event.</p>
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::GetEventPrediction::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::GetEventPrediction::set_event_type_name): <p>The event type associated with the detector specified for the prediction.</p>
    ///   - [`entities(Vec<Entity>)`](crate::client::fluent_builders::GetEventPrediction::entities) / [`set_entities(Option<Vec<Entity>>)`](crate::client::fluent_builders::GetEventPrediction::set_entities): <p>The entity type (associated with the detector's event type) and specific entity ID representing who performed the event. If an entity id is not available, use "UNKNOWN."</p>
    ///   - [`event_timestamp(impl Into<String>)`](crate::client::fluent_builders::GetEventPrediction::event_timestamp) / [`set_event_timestamp(Option<String>)`](crate::client::fluent_builders::GetEventPrediction::set_event_timestamp): <p>Timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
    ///   - [`event_variables(HashMap<String, String>)`](crate::client::fluent_builders::GetEventPrediction::event_variables) / [`set_event_variables(Option<HashMap<String, String>>)`](crate::client::fluent_builders::GetEventPrediction::set_event_variables): <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p> <important>   <p>You must provide at least one eventVariable</p>  </important>  <p>To ensure most accurate fraud prediction and to simplify your data preparation, Amazon Fraud Detector will replace all missing variables or values as follows:</p>  <p> <b>For Amazon Fraud Detector trained models:</b> </p>  <p>If a null value is provided explicitly for a variable or if a variable is missing, model will replace the null value or the missing variable (no variable name in the eventVariables map) with calculated default mean/medians for numeric variables and with special values for categorical variables.</p>  <p> <b>For imported SageMaker models:</b> </p>  <p>If a null value is provided explicitly for a variable, the model and rules will use “null” as the value. If a variable is not provided (no variable name in the eventVariables map), model and rules will use the default value that is provided for the variable. </p>
    ///   - [`external_model_endpoint_data_blobs(HashMap<String, ModelEndpointDataBlob>)`](crate::client::fluent_builders::GetEventPrediction::external_model_endpoint_data_blobs) / [`set_external_model_endpoint_data_blobs(Option<HashMap<String, ModelEndpointDataBlob>>)`](crate::client::fluent_builders::GetEventPrediction::set_external_model_endpoint_data_blobs): <p>The Amazon SageMaker model endpoint input data blobs.</p>
    /// - On success, responds with [`GetEventPredictionOutput`](crate::output::GetEventPredictionOutput) with field(s):
    ///   - [`model_scores(Option<Vec<ModelScores>>)`](crate::output::GetEventPredictionOutput::model_scores): <p>The model scores. Amazon Fraud Detector generates model scores between 0 and 1000, where 0 is low fraud risk and 1000 is high fraud risk. Model scores are directly related to the false positive rate (FPR). For example, a score of 600 corresponds to an estimated 10% false positive rate whereas a score of 900 corresponds to an estimated 2% false positive rate.</p>
    ///   - [`rule_results(Option<Vec<RuleResult>>)`](crate::output::GetEventPredictionOutput::rule_results): <p>The results from the rules.</p>
    ///   - [`external_model_outputs(Option<Vec<ExternalModelOutputs>>)`](crate::output::GetEventPredictionOutput::external_model_outputs): <p>The model scores for Amazon SageMaker models.</p>
    /// - On failure, responds with [`SdkError<GetEventPredictionError>`](crate::error::GetEventPredictionError)
    pub fn get_event_prediction(&self) -> crate::client::fluent_builders::GetEventPrediction {
        crate::client::fluent_builders::GetEventPrediction::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetEventPredictionMetadata`](crate::client::fluent_builders::GetEventPredictionMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_id(impl Into<String>)`](crate::client::fluent_builders::GetEventPredictionMetadata::event_id) / [`set_event_id(Option<String>)`](crate::client::fluent_builders::GetEventPredictionMetadata::set_event_id): <p> The event ID. </p>
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::GetEventPredictionMetadata::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::GetEventPredictionMetadata::set_event_type_name): <p> The event type associated with the detector specified for the prediction. </p>
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::GetEventPredictionMetadata::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::GetEventPredictionMetadata::set_detector_id): <p> The detector ID. </p>
    ///   - [`detector_version_id(impl Into<String>)`](crate::client::fluent_builders::GetEventPredictionMetadata::detector_version_id) / [`set_detector_version_id(Option<String>)`](crate::client::fluent_builders::GetEventPredictionMetadata::set_detector_version_id): <p> The detector version ID. </p>
    ///   - [`prediction_timestamp(impl Into<String>)`](crate::client::fluent_builders::GetEventPredictionMetadata::prediction_timestamp) / [`set_prediction_timestamp(Option<String>)`](crate::client::fluent_builders::GetEventPredictionMetadata::set_prediction_timestamp): <p> The timestamp that defines when the prediction was generated. The timestamp must be specified using ISO 8601 standard in UTC.</p>  <p>We recommend calling <a href="https://docs.aws.amazon.com/frauddetector/latest/api/API_ListEventPredictions.html">ListEventPredictions</a> first, and using the <code>predictionTimestamp</code> value in the response to provide an accurate prediction timestamp value.</p>
    /// - On success, responds with [`GetEventPredictionMetadataOutput`](crate::output::GetEventPredictionMetadataOutput) with field(s):
    ///   - [`event_id(Option<String>)`](crate::output::GetEventPredictionMetadataOutput::event_id): <p> The event ID. </p>
    ///   - [`event_type_name(Option<String>)`](crate::output::GetEventPredictionMetadataOutput::event_type_name): <p> The event type associated with the detector specified for this prediction. </p>
    ///   - [`entity_id(Option<String>)`](crate::output::GetEventPredictionMetadataOutput::entity_id): <p> The entity ID. </p>
    ///   - [`entity_type(Option<String>)`](crate::output::GetEventPredictionMetadataOutput::entity_type): <p> The entity type. </p>
    ///   - [`event_timestamp(Option<String>)`](crate::output::GetEventPredictionMetadataOutput::event_timestamp): <p> The timestamp for when the prediction was generated for the associated event ID. </p>
    ///   - [`detector_id(Option<String>)`](crate::output::GetEventPredictionMetadataOutput::detector_id): <p> The detector ID. </p>
    ///   - [`detector_version_id(Option<String>)`](crate::output::GetEventPredictionMetadataOutput::detector_version_id): <p> The detector version ID. </p>
    ///   - [`detector_version_status(Option<String>)`](crate::output::GetEventPredictionMetadataOutput::detector_version_status): <p> The status of the detector version. </p>
    ///   - [`event_variables(Option<Vec<EventVariableSummary>>)`](crate::output::GetEventPredictionMetadataOutput::event_variables): <p> A list of event variables that influenced the prediction scores. </p>
    ///   - [`rules(Option<Vec<EvaluatedRule>>)`](crate::output::GetEventPredictionMetadataOutput::rules): <p> List of rules associated with the detector version that were used for evaluating variable values. </p>
    ///   - [`rule_execution_mode(Option<RuleExecutionMode>)`](crate::output::GetEventPredictionMetadataOutput::rule_execution_mode): <p> The execution mode of the rule used for evaluating variable values. </p>
    ///   - [`outcomes(Option<Vec<String>>)`](crate::output::GetEventPredictionMetadataOutput::outcomes): <p> The outcomes of the matched rule, based on the rule execution mode. </p>
    ///   - [`evaluated_model_versions(Option<Vec<EvaluatedModelVersion>>)`](crate::output::GetEventPredictionMetadataOutput::evaluated_model_versions): <p> Model versions that were evaluated for generating predictions. </p>
    ///   - [`evaluated_external_models(Option<Vec<EvaluatedExternalModel>>)`](crate::output::GetEventPredictionMetadataOutput::evaluated_external_models): <p> External (Amazon SageMaker) models that were evaluated for generating predictions. </p>
    ///   - [`prediction_timestamp(Option<String>)`](crate::output::GetEventPredictionMetadataOutput::prediction_timestamp): <p>The timestamp that defines when the prediction was generated. </p>
    /// - On failure, responds with [`SdkError<GetEventPredictionMetadataError>`](crate::error::GetEventPredictionMetadataError)
    pub fn get_event_prediction_metadata(
        &self,
    ) -> crate::client::fluent_builders::GetEventPredictionMetadata {
        crate::client::fluent_builders::GetEventPredictionMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetEventTypes`](crate::client::fluent_builders::GetEventTypes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetEventTypes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetEventTypes::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetEventTypes::set_name): <p>The name.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetEventTypes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetEventTypes::set_next_token): <p>The next token for the subsequent request.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetEventTypes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetEventTypes::set_max_results): <p>The maximum number of objects to return for the request.</p>
    /// - On success, responds with [`GetEventTypesOutput`](crate::output::GetEventTypesOutput) with field(s):
    ///   - [`event_types(Option<Vec<EventType>>)`](crate::output::GetEventTypesOutput::event_types): <p>An array of event types.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetEventTypesOutput::next_token): <p>The next page token.</p>
    /// - On failure, responds with [`SdkError<GetEventTypesError>`](crate::error::GetEventTypesError)
    pub fn get_event_types(&self) -> crate::client::fluent_builders::GetEventTypes {
        crate::client::fluent_builders::GetEventTypes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetExternalModels`](crate::client::fluent_builders::GetExternalModels) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetExternalModels::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_endpoint(impl Into<String>)`](crate::client::fluent_builders::GetExternalModels::model_endpoint) / [`set_model_endpoint(Option<String>)`](crate::client::fluent_builders::GetExternalModels::set_model_endpoint): <p>The Amazon SageMaker model endpoint.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetExternalModels::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetExternalModels::set_next_token): <p>The next page token for the request.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetExternalModels::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetExternalModels::set_max_results): <p>The maximum number of objects to return for the request.</p>
    /// - On success, responds with [`GetExternalModelsOutput`](crate::output::GetExternalModelsOutput) with field(s):
    ///   - [`external_models(Option<Vec<ExternalModel>>)`](crate::output::GetExternalModelsOutput::external_models): <p>Gets the Amazon SageMaker models.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetExternalModelsOutput::next_token): <p>The next page token to be used in subsequent requests.</p>
    /// - On failure, responds with [`SdkError<GetExternalModelsError>`](crate::error::GetExternalModelsError)
    pub fn get_external_models(&self) -> crate::client::fluent_builders::GetExternalModels {
        crate::client::fluent_builders::GetExternalModels::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetKMSEncryptionKey`](crate::client::fluent_builders::GetKMSEncryptionKey) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::GetKMSEncryptionKey::send) it.

    /// - On success, responds with [`GetKmsEncryptionKeyOutput`](crate::output::GetKmsEncryptionKeyOutput) with field(s):
    ///   - [`kms_key(Option<KmsKey>)`](crate::output::GetKmsEncryptionKeyOutput::kms_key): <p>The KMS encryption key.</p>
    /// - On failure, responds with [`SdkError<GetKMSEncryptionKeyError>`](crate::error::GetKMSEncryptionKeyError)
    pub fn get_kms_encryption_key(&self) -> crate::client::fluent_builders::GetKMSEncryptionKey {
        crate::client::fluent_builders::GetKMSEncryptionKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLabels`](crate::client::fluent_builders::GetLabels) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetLabels::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetLabels::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetLabels::set_name): <p>The name of the label or labels to get.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetLabels::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetLabels::set_next_token): <p>The next token for the subsequent request.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetLabels::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetLabels::set_max_results): <p>The maximum number of objects to return for the request.</p>
    /// - On success, responds with [`GetLabelsOutput`](crate::output::GetLabelsOutput) with field(s):
    ///   - [`labels(Option<Vec<Label>>)`](crate::output::GetLabelsOutput::labels): <p>An array of labels.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetLabelsOutput::next_token): <p>The next page token.</p>
    /// - On failure, responds with [`SdkError<GetLabelsError>`](crate::error::GetLabelsError)
    pub fn get_labels(&self) -> crate::client::fluent_builders::GetLabels {
        crate::client::fluent_builders::GetLabels::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetModels`](crate::client::fluent_builders::GetModels) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetModels::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_id(impl Into<String>)`](crate::client::fluent_builders::GetModels::model_id) / [`set_model_id(Option<String>)`](crate::client::fluent_builders::GetModels::set_model_id): <p>The model ID.</p>
    ///   - [`model_type(ModelTypeEnum)`](crate::client::fluent_builders::GetModels::model_type) / [`set_model_type(Option<ModelTypeEnum>)`](crate::client::fluent_builders::GetModels::set_model_type): <p>The model type.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetModels::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetModels::set_next_token): <p>The next token for the subsequent request.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetModels::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetModels::set_max_results): <p>The maximum number of objects to return for the request. </p>
    /// - On success, responds with [`GetModelsOutput`](crate::output::GetModelsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::GetModelsOutput::next_token): <p>The next page token to be used in subsequent requests.</p>
    ///   - [`models(Option<Vec<Model>>)`](crate::output::GetModelsOutput::models): <p>The array of models.</p>
    /// - On failure, responds with [`SdkError<GetModelsError>`](crate::error::GetModelsError)
    pub fn get_models(&self) -> crate::client::fluent_builders::GetModels {
        crate::client::fluent_builders::GetModels::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetModelVersion`](crate::client::fluent_builders::GetModelVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_id(impl Into<String>)`](crate::client::fluent_builders::GetModelVersion::model_id) / [`set_model_id(Option<String>)`](crate::client::fluent_builders::GetModelVersion::set_model_id): <p>The model ID.</p>
    ///   - [`model_type(ModelTypeEnum)`](crate::client::fluent_builders::GetModelVersion::model_type) / [`set_model_type(Option<ModelTypeEnum>)`](crate::client::fluent_builders::GetModelVersion::set_model_type): <p>The model type.</p>
    ///   - [`model_version_number(impl Into<String>)`](crate::client::fluent_builders::GetModelVersion::model_version_number) / [`set_model_version_number(Option<String>)`](crate::client::fluent_builders::GetModelVersion::set_model_version_number): <p>The model version number.</p>
    /// - On success, responds with [`GetModelVersionOutput`](crate::output::GetModelVersionOutput) with field(s):
    ///   - [`model_id(Option<String>)`](crate::output::GetModelVersionOutput::model_id): <p>The model ID.</p>
    ///   - [`model_type(Option<ModelTypeEnum>)`](crate::output::GetModelVersionOutput::model_type): <p>The model type.</p>
    ///   - [`model_version_number(Option<String>)`](crate::output::GetModelVersionOutput::model_version_number): <p>The model version number.</p>
    ///   - [`training_data_source(Option<TrainingDataSourceEnum>)`](crate::output::GetModelVersionOutput::training_data_source): <p>The training data source.</p>
    ///   - [`training_data_schema(Option<TrainingDataSchema>)`](crate::output::GetModelVersionOutput::training_data_schema): <p>The training data schema.</p>
    ///   - [`external_events_detail(Option<ExternalEventsDetail>)`](crate::output::GetModelVersionOutput::external_events_detail): <p>The details of the external events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code> </p>
    ///   - [`ingested_events_detail(Option<IngestedEventsDetail>)`](crate::output::GetModelVersionOutput::ingested_events_detail): <p>The details of the ingested events data used for training the model version. This will be populated if the <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    ///   - [`status(Option<String>)`](crate::output::GetModelVersionOutput::status): <p>The model version status.</p>  <p>Possible values are:</p>  <ul>   <li> <p> <code>TRAINING_IN_PROGRESS</code> </p> </li>   <li> <p> <code>TRAINING_COMPLETE</code> </p> </li>   <li> <p> <code>ACTIVATE_REQUESTED</code> </p> </li>   <li> <p> <code>ACTIVATE_IN_PROGRESS</code> </p> </li>   <li> <p> <code>ACTIVE</code> </p> </li>   <li> <p> <code>INACTIVATE_REQUESTED</code> </p> </li>   <li> <p> <code>INACTIVATE_IN_PROGRESS</code> </p> </li>   <li> <p> <code>INACTIVE</code> </p> </li>   <li> <p> <code>ERROR</code> </p> </li>  </ul>
    ///   - [`arn(Option<String>)`](crate::output::GetModelVersionOutput::arn): <p>The model version ARN.</p>
    /// - On failure, responds with [`SdkError<GetModelVersionError>`](crate::error::GetModelVersionError)
    pub fn get_model_version(&self) -> crate::client::fluent_builders::GetModelVersion {
        crate::client::fluent_builders::GetModelVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetOutcomes`](crate::client::fluent_builders::GetOutcomes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetOutcomes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetOutcomes::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetOutcomes::set_name): <p>The name of the outcome or outcomes to get.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetOutcomes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetOutcomes::set_next_token): <p>The next page token for the request. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetOutcomes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetOutcomes::set_max_results): <p>The maximum number of objects to return for the request. </p>
    /// - On success, responds with [`GetOutcomesOutput`](crate::output::GetOutcomesOutput) with field(s):
    ///   - [`outcomes(Option<Vec<Outcome>>)`](crate::output::GetOutcomesOutput::outcomes): <p>The outcomes. </p>
    ///   - [`next_token(Option<String>)`](crate::output::GetOutcomesOutput::next_token): <p>The next page token for subsequent requests.</p>
    /// - On failure, responds with [`SdkError<GetOutcomesError>`](crate::error::GetOutcomesError)
    pub fn get_outcomes(&self) -> crate::client::fluent_builders::GetOutcomes {
        crate::client::fluent_builders::GetOutcomes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRules`](crate::client::fluent_builders::GetRules) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetRules::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_id(impl Into<String>)`](crate::client::fluent_builders::GetRules::rule_id) / [`set_rule_id(Option<String>)`](crate::client::fluent_builders::GetRules::set_rule_id): <p>The rule ID.</p>
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::GetRules::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::GetRules::set_detector_id): <p>The detector ID.</p>
    ///   - [`rule_version(impl Into<String>)`](crate::client::fluent_builders::GetRules::rule_version) / [`set_rule_version(Option<String>)`](crate::client::fluent_builders::GetRules::set_rule_version): <p>The rule version.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetRules::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetRules::set_next_token): <p>The next page token.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetRules::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetRules::set_max_results): <p>The maximum number of rules to return for the request.</p>
    /// - On success, responds with [`GetRulesOutput`](crate::output::GetRulesOutput) with field(s):
    ///   - [`rule_details(Option<Vec<RuleDetail>>)`](crate::output::GetRulesOutput::rule_details): <p>The details of the requested rule.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetRulesOutput::next_token): <p>The next page token to be used in subsequent requests.</p>
    /// - On failure, responds with [`SdkError<GetRulesError>`](crate::error::GetRulesError)
    pub fn get_rules(&self) -> crate::client::fluent_builders::GetRules {
        crate::client::fluent_builders::GetRules::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetVariables`](crate::client::fluent_builders::GetVariables) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetVariables::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetVariables::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetVariables::set_name): <p>The name of the variable. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetVariables::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetVariables::set_next_token): <p>The next page token of the get variable request. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetVariables::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetVariables::set_max_results): <p>The max size per page determined for the get variable request. </p>
    /// - On success, responds with [`GetVariablesOutput`](crate::output::GetVariablesOutput) with field(s):
    ///   - [`variables(Option<Vec<Variable>>)`](crate::output::GetVariablesOutput::variables): <p>The names of the variables returned. </p>
    ///   - [`next_token(Option<String>)`](crate::output::GetVariablesOutput::next_token): <p>The next page token to be used in subsequent requests. </p>
    /// - On failure, responds with [`SdkError<GetVariablesError>`](crate::error::GetVariablesError)
    pub fn get_variables(&self) -> crate::client::fluent_builders::GetVariables {
        crate::client::fluent_builders::GetVariables::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEventPredictions`](crate::client::fluent_builders::ListEventPredictions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListEventPredictions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_id(FilterCondition)`](crate::client::fluent_builders::ListEventPredictions::event_id) / [`set_event_id(Option<FilterCondition>)`](crate::client::fluent_builders::ListEventPredictions::set_event_id): <p> The event ID. </p>
    ///   - [`event_type(FilterCondition)`](crate::client::fluent_builders::ListEventPredictions::event_type) / [`set_event_type(Option<FilterCondition>)`](crate::client::fluent_builders::ListEventPredictions::set_event_type): <p> The event type associated with the detector. </p>
    ///   - [`detector_id(FilterCondition)`](crate::client::fluent_builders::ListEventPredictions::detector_id) / [`set_detector_id(Option<FilterCondition>)`](crate::client::fluent_builders::ListEventPredictions::set_detector_id): <p> The detector ID. </p>
    ///   - [`detector_version_id(FilterCondition)`](crate::client::fluent_builders::ListEventPredictions::detector_version_id) / [`set_detector_version_id(Option<FilterCondition>)`](crate::client::fluent_builders::ListEventPredictions::set_detector_version_id): <p> The detector version ID. </p>
    ///   - [`prediction_time_range(PredictionTimeRange)`](crate::client::fluent_builders::ListEventPredictions::prediction_time_range) / [`set_prediction_time_range(Option<PredictionTimeRange>)`](crate::client::fluent_builders::ListEventPredictions::set_prediction_time_range): <p> The time period for when the predictions were generated. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEventPredictions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEventPredictions::set_next_token): <p> Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEventPredictions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEventPredictions::set_max_results): <p> The maximum number of predictions to return for the request. </p>
    /// - On success, responds with [`ListEventPredictionsOutput`](crate::output::ListEventPredictionsOutput) with field(s):
    ///   - [`event_prediction_summaries(Option<Vec<EventPredictionSummary>>)`](crate::output::ListEventPredictionsOutput::event_prediction_summaries): <p> The summary of the past predictions. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListEventPredictionsOutput::next_token): <p> Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. </p>
    /// - On failure, responds with [`SdkError<ListEventPredictionsError>`](crate::error::ListEventPredictionsError)
    pub fn list_event_predictions(&self) -> crate::client::fluent_builders::ListEventPredictions {
        crate::client::fluent_builders::ListEventPredictions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTagsForResource::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN that specifies the resource whose tags you want to list.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_next_token): <p>The next token from the previous results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTagsForResource::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTagsForResource::set_max_results): <p>The maximum number of objects to return for the request. </p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>A collection of key and value pairs.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTagsForResourceOutput::next_token): <p>The next token for subsequent requests. </p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutDetector`](crate::client::fluent_builders::PutDetector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::PutDetector::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::PutDetector::set_detector_id): <p>The detector ID. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::PutDetector::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::PutDetector::set_description): <p>The description of the detector.</p>
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::PutDetector::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::PutDetector::set_event_type_name): <p>The name of the event type.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::PutDetector::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::PutDetector::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`PutDetectorOutput`](crate::output::PutDetectorOutput)

    /// - On failure, responds with [`SdkError<PutDetectorError>`](crate::error::PutDetectorError)
    pub fn put_detector(&self) -> crate::client::fluent_builders::PutDetector {
        crate::client::fluent_builders::PutDetector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutEntityType`](crate::client::fluent_builders::PutEntityType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::PutEntityType::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::PutEntityType::set_name): <p>The name of the entity type.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::PutEntityType::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::PutEntityType::set_description): <p>The description.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::PutEntityType::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::PutEntityType::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`PutEntityTypeOutput`](crate::output::PutEntityTypeOutput)

    /// - On failure, responds with [`SdkError<PutEntityTypeError>`](crate::error::PutEntityTypeError)
    pub fn put_entity_type(&self) -> crate::client::fluent_builders::PutEntityType {
        crate::client::fluent_builders::PutEntityType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutEventType`](crate::client::fluent_builders::PutEventType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::PutEventType::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::PutEventType::set_name): <p>The name.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::PutEventType::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::PutEventType::set_description): <p>The description of the event type.</p>
    ///   - [`event_variables(Vec<String>)`](crate::client::fluent_builders::PutEventType::event_variables) / [`set_event_variables(Option<Vec<String>>)`](crate::client::fluent_builders::PutEventType::set_event_variables): <p>The event type variables.</p>
    ///   - [`labels(Vec<String>)`](crate::client::fluent_builders::PutEventType::labels) / [`set_labels(Option<Vec<String>>)`](crate::client::fluent_builders::PutEventType::set_labels): <p>The event type labels.</p>
    ///   - [`entity_types(Vec<String>)`](crate::client::fluent_builders::PutEventType::entity_types) / [`set_entity_types(Option<Vec<String>>)`](crate::client::fluent_builders::PutEventType::set_entity_types): <p>The entity type for the event type. Example entity types: customer, merchant, account.</p>
    ///   - [`event_ingestion(EventIngestion)`](crate::client::fluent_builders::PutEventType::event_ingestion) / [`set_event_ingestion(Option<EventIngestion>)`](crate::client::fluent_builders::PutEventType::set_event_ingestion): <p>Specifies if ingenstion is enabled or disabled.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::PutEventType::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::PutEventType::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`PutEventTypeOutput`](crate::output::PutEventTypeOutput)

    /// - On failure, responds with [`SdkError<PutEventTypeError>`](crate::error::PutEventTypeError)
    pub fn put_event_type(&self) -> crate::client::fluent_builders::PutEventType {
        crate::client::fluent_builders::PutEventType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutExternalModel`](crate::client::fluent_builders::PutExternalModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_endpoint(impl Into<String>)`](crate::client::fluent_builders::PutExternalModel::model_endpoint) / [`set_model_endpoint(Option<String>)`](crate::client::fluent_builders::PutExternalModel::set_model_endpoint): <p>The model endpoints name.</p>
    ///   - [`model_source(ModelSource)`](crate::client::fluent_builders::PutExternalModel::model_source) / [`set_model_source(Option<ModelSource>)`](crate::client::fluent_builders::PutExternalModel::set_model_source): <p>The source of the model.</p>
    ///   - [`invoke_model_endpoint_role_arn(impl Into<String>)`](crate::client::fluent_builders::PutExternalModel::invoke_model_endpoint_role_arn) / [`set_invoke_model_endpoint_role_arn(Option<String>)`](crate::client::fluent_builders::PutExternalModel::set_invoke_model_endpoint_role_arn): <p>The IAM role used to invoke the model endpoint.</p>
    ///   - [`input_configuration(ModelInputConfiguration)`](crate::client::fluent_builders::PutExternalModel::input_configuration) / [`set_input_configuration(Option<ModelInputConfiguration>)`](crate::client::fluent_builders::PutExternalModel::set_input_configuration): <p>The model endpoint input configuration.</p>
    ///   - [`output_configuration(ModelOutputConfiguration)`](crate::client::fluent_builders::PutExternalModel::output_configuration) / [`set_output_configuration(Option<ModelOutputConfiguration>)`](crate::client::fluent_builders::PutExternalModel::set_output_configuration): <p>The model endpoint output configuration.</p>
    ///   - [`model_endpoint_status(ModelEndpointStatus)`](crate::client::fluent_builders::PutExternalModel::model_endpoint_status) / [`set_model_endpoint_status(Option<ModelEndpointStatus>)`](crate::client::fluent_builders::PutExternalModel::set_model_endpoint_status): <p>The model endpoint’s status in Amazon Fraud Detector.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::PutExternalModel::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::PutExternalModel::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`PutExternalModelOutput`](crate::output::PutExternalModelOutput)

    /// - On failure, responds with [`SdkError<PutExternalModelError>`](crate::error::PutExternalModelError)
    pub fn put_external_model(&self) -> crate::client::fluent_builders::PutExternalModel {
        crate::client::fluent_builders::PutExternalModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutKMSEncryptionKey`](crate::client::fluent_builders::PutKMSEncryptionKey) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`kms_encryption_key_arn(impl Into<String>)`](crate::client::fluent_builders::PutKMSEncryptionKey::kms_encryption_key_arn) / [`set_kms_encryption_key_arn(Option<String>)`](crate::client::fluent_builders::PutKMSEncryptionKey::set_kms_encryption_key_arn): <p>The KMS encryption key ARN.</p>  <p>The KMS key must be single-Region key. Amazon Fraud Detector does not support multi-Region KMS key.</p>
    /// - On success, responds with [`PutKmsEncryptionKeyOutput`](crate::output::PutKmsEncryptionKeyOutput)

    /// - On failure, responds with [`SdkError<PutKMSEncryptionKeyError>`](crate::error::PutKMSEncryptionKeyError)
    pub fn put_kms_encryption_key(&self) -> crate::client::fluent_builders::PutKMSEncryptionKey {
        crate::client::fluent_builders::PutKMSEncryptionKey::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutLabel`](crate::client::fluent_builders::PutLabel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::PutLabel::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::PutLabel::set_name): <p>The label name.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::PutLabel::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::PutLabel::set_description): <p>The label description.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::PutLabel::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::PutLabel::set_tags): <p></p>
    /// - On success, responds with [`PutLabelOutput`](crate::output::PutLabelOutput)

    /// - On failure, responds with [`SdkError<PutLabelError>`](crate::error::PutLabelError)
    pub fn put_label(&self) -> crate::client::fluent_builders::PutLabel {
        crate::client::fluent_builders::PutLabel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutOutcome`](crate::client::fluent_builders::PutOutcome) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::PutOutcome::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::PutOutcome::set_name): <p>The name of the outcome.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::PutOutcome::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::PutOutcome::set_description): <p>The outcome description.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::PutOutcome::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::PutOutcome::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`PutOutcomeOutput`](crate::output::PutOutcomeOutput)

    /// - On failure, responds with [`SdkError<PutOutcomeError>`](crate::error::PutOutcomeError)
    pub fn put_outcome(&self) -> crate::client::fluent_builders::PutOutcome {
        crate::client::fluent_builders::PutOutcome::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SendEvent`](crate::client::fluent_builders::SendEvent) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_id(impl Into<String>)`](crate::client::fluent_builders::SendEvent::event_id) / [`set_event_id(Option<String>)`](crate::client::fluent_builders::SendEvent::set_event_id): <p>The event ID to upload.</p>
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::SendEvent::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::SendEvent::set_event_type_name): <p>The event type name of the event.</p>
    ///   - [`event_timestamp(impl Into<String>)`](crate::client::fluent_builders::SendEvent::event_timestamp) / [`set_event_timestamp(Option<String>)`](crate::client::fluent_builders::SendEvent::set_event_timestamp): <p>The timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
    ///   - [`event_variables(HashMap<String, String>)`](crate::client::fluent_builders::SendEvent::event_variables) / [`set_event_variables(Option<HashMap<String, String>>)`](crate::client::fluent_builders::SendEvent::set_event_variables): <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p>
    ///   - [`assigned_label(impl Into<String>)`](crate::client::fluent_builders::SendEvent::assigned_label) / [`set_assigned_label(Option<String>)`](crate::client::fluent_builders::SendEvent::set_assigned_label): <p>The label to associate with the event. Required if specifying <code>labelTimestamp</code>.</p>
    ///   - [`label_timestamp(impl Into<String>)`](crate::client::fluent_builders::SendEvent::label_timestamp) / [`set_label_timestamp(Option<String>)`](crate::client::fluent_builders::SendEvent::set_label_timestamp): <p>The timestamp associated with the label. Required if specifying <code>assignedLabel</code>.</p>
    ///   - [`entities(Vec<Entity>)`](crate::client::fluent_builders::SendEvent::entities) / [`set_entities(Option<Vec<Entity>>)`](crate::client::fluent_builders::SendEvent::set_entities): <p>An array of entities.</p>
    /// - On success, responds with [`SendEventOutput`](crate::output::SendEventOutput)

    /// - On failure, responds with [`SdkError<SendEventError>`](crate::error::SendEventError)
    pub fn send_event(&self) -> crate::client::fluent_builders::SendEvent {
        crate::client::fluent_builders::SendEvent::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The resource ARN.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags to assign to the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the resource from which to remove the tag.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The resource ARN.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDetectorVersion`](crate::client::fluent_builders::UpdateDetectorVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDetectorVersion::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::UpdateDetectorVersion::set_detector_id): <p>The parent detector ID for the detector version you want to update.</p>
    ///   - [`detector_version_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDetectorVersion::detector_version_id) / [`set_detector_version_id(Option<String>)`](crate::client::fluent_builders::UpdateDetectorVersion::set_detector_version_id): <p>The detector version ID. </p>
    ///   - [`external_model_endpoints(Vec<String>)`](crate::client::fluent_builders::UpdateDetectorVersion::external_model_endpoints) / [`set_external_model_endpoints(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateDetectorVersion::set_external_model_endpoints): <p>The Amazon SageMaker model endpoints to include in the detector version.</p>
    ///   - [`rules(Vec<Rule>)`](crate::client::fluent_builders::UpdateDetectorVersion::rules) / [`set_rules(Option<Vec<Rule>>)`](crate::client::fluent_builders::UpdateDetectorVersion::set_rules): <p>The rules to include in the detector version.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateDetectorVersion::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateDetectorVersion::set_description): <p>The detector version description. </p>
    ///   - [`model_versions(Vec<ModelVersion>)`](crate::client::fluent_builders::UpdateDetectorVersion::model_versions) / [`set_model_versions(Option<Vec<ModelVersion>>)`](crate::client::fluent_builders::UpdateDetectorVersion::set_model_versions): <p>The model versions to include in the detector version.</p>
    ///   - [`rule_execution_mode(RuleExecutionMode)`](crate::client::fluent_builders::UpdateDetectorVersion::rule_execution_mode) / [`set_rule_execution_mode(Option<RuleExecutionMode>)`](crate::client::fluent_builders::UpdateDetectorVersion::set_rule_execution_mode): <p>The rule execution mode to add to the detector.</p>  <p>If you specify <code>FIRST_MATCHED</code>, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>  <p>If you specifiy <code>ALL_MATCHED</code>, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>  <p>The default behavior is <code>FIRST_MATCHED</code>.</p>
    /// - On success, responds with [`UpdateDetectorVersionOutput`](crate::output::UpdateDetectorVersionOutput)

    /// - On failure, responds with [`SdkError<UpdateDetectorVersionError>`](crate::error::UpdateDetectorVersionError)
    pub fn update_detector_version(&self) -> crate::client::fluent_builders::UpdateDetectorVersion {
        crate::client::fluent_builders::UpdateDetectorVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDetectorVersionMetadata`](crate::client::fluent_builders::UpdateDetectorVersionMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDetectorVersionMetadata::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::UpdateDetectorVersionMetadata::set_detector_id): <p>The detector ID.</p>
    ///   - [`detector_version_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDetectorVersionMetadata::detector_version_id) / [`set_detector_version_id(Option<String>)`](crate::client::fluent_builders::UpdateDetectorVersionMetadata::set_detector_version_id): <p>The detector version ID. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateDetectorVersionMetadata::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateDetectorVersionMetadata::set_description): <p>The description.</p>
    /// - On success, responds with [`UpdateDetectorVersionMetadataOutput`](crate::output::UpdateDetectorVersionMetadataOutput)

    /// - On failure, responds with [`SdkError<UpdateDetectorVersionMetadataError>`](crate::error::UpdateDetectorVersionMetadataError)
    pub fn update_detector_version_metadata(
        &self,
    ) -> crate::client::fluent_builders::UpdateDetectorVersionMetadata {
        crate::client::fluent_builders::UpdateDetectorVersionMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDetectorVersionStatus`](crate::client::fluent_builders::UpdateDetectorVersionStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDetectorVersionStatus::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::UpdateDetectorVersionStatus::set_detector_id): <p>The detector ID. </p>
    ///   - [`detector_version_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDetectorVersionStatus::detector_version_id) / [`set_detector_version_id(Option<String>)`](crate::client::fluent_builders::UpdateDetectorVersionStatus::set_detector_version_id): <p>The detector version ID. </p>
    ///   - [`status(DetectorVersionStatus)`](crate::client::fluent_builders::UpdateDetectorVersionStatus::status) / [`set_status(Option<DetectorVersionStatus>)`](crate::client::fluent_builders::UpdateDetectorVersionStatus::set_status): <p>The new status.</p>  <p>The only supported values are <code>ACTIVE</code> and <code>INACTIVE</code> </p>
    /// - On success, responds with [`UpdateDetectorVersionStatusOutput`](crate::output::UpdateDetectorVersionStatusOutput)

    /// - On failure, responds with [`SdkError<UpdateDetectorVersionStatusError>`](crate::error::UpdateDetectorVersionStatusError)
    pub fn update_detector_version_status(
        &self,
    ) -> crate::client::fluent_builders::UpdateDetectorVersionStatus {
        crate::client::fluent_builders::UpdateDetectorVersionStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateEventLabel`](crate::client::fluent_builders::UpdateEventLabel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_id(impl Into<String>)`](crate::client::fluent_builders::UpdateEventLabel::event_id) / [`set_event_id(Option<String>)`](crate::client::fluent_builders::UpdateEventLabel::set_event_id): <p>The ID of the event associated with the label to update.</p>
    ///   - [`event_type_name(impl Into<String>)`](crate::client::fluent_builders::UpdateEventLabel::event_type_name) / [`set_event_type_name(Option<String>)`](crate::client::fluent_builders::UpdateEventLabel::set_event_type_name): <p>The event type of the event associated with the label to update.</p>
    ///   - [`assigned_label(impl Into<String>)`](crate::client::fluent_builders::UpdateEventLabel::assigned_label) / [`set_assigned_label(Option<String>)`](crate::client::fluent_builders::UpdateEventLabel::set_assigned_label): <p>The new label to assign to the event.</p>
    ///   - [`label_timestamp(impl Into<String>)`](crate::client::fluent_builders::UpdateEventLabel::label_timestamp) / [`set_label_timestamp(Option<String>)`](crate::client::fluent_builders::UpdateEventLabel::set_label_timestamp): <p>The timestamp associated with the label. The timestamp must be specified using ISO 8601 standard in UTC. </p>
    /// - On success, responds with [`UpdateEventLabelOutput`](crate::output::UpdateEventLabelOutput)

    /// - On failure, responds with [`SdkError<UpdateEventLabelError>`](crate::error::UpdateEventLabelError)
    pub fn update_event_label(&self) -> crate::client::fluent_builders::UpdateEventLabel {
        crate::client::fluent_builders::UpdateEventLabel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateModel`](crate::client::fluent_builders::UpdateModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_id(impl Into<String>)`](crate::client::fluent_builders::UpdateModel::model_id) / [`set_model_id(Option<String>)`](crate::client::fluent_builders::UpdateModel::set_model_id): <p>The model ID.</p>
    ///   - [`model_type(ModelTypeEnum)`](crate::client::fluent_builders::UpdateModel::model_type) / [`set_model_type(Option<ModelTypeEnum>)`](crate::client::fluent_builders::UpdateModel::set_model_type): <p>The model type.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateModel::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateModel::set_description): <p>The new model description.</p>
    /// - On success, responds with [`UpdateModelOutput`](crate::output::UpdateModelOutput)

    /// - On failure, responds with [`SdkError<UpdateModelError>`](crate::error::UpdateModelError)
    pub fn update_model(&self) -> crate::client::fluent_builders::UpdateModel {
        crate::client::fluent_builders::UpdateModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateModelVersion`](crate::client::fluent_builders::UpdateModelVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_id(impl Into<String>)`](crate::client::fluent_builders::UpdateModelVersion::model_id) / [`set_model_id(Option<String>)`](crate::client::fluent_builders::UpdateModelVersion::set_model_id): <p>The model ID.</p>
    ///   - [`model_type(ModelTypeEnum)`](crate::client::fluent_builders::UpdateModelVersion::model_type) / [`set_model_type(Option<ModelTypeEnum>)`](crate::client::fluent_builders::UpdateModelVersion::set_model_type): <p>The model type.</p>
    ///   - [`major_version_number(impl Into<String>)`](crate::client::fluent_builders::UpdateModelVersion::major_version_number) / [`set_major_version_number(Option<String>)`](crate::client::fluent_builders::UpdateModelVersion::set_major_version_number): <p>The major version number.</p>
    ///   - [`external_events_detail(ExternalEventsDetail)`](crate::client::fluent_builders::UpdateModelVersion::external_events_detail) / [`set_external_events_detail(Option<ExternalEventsDetail>)`](crate::client::fluent_builders::UpdateModelVersion::set_external_events_detail): <p>The details of the external events data used for training the model version. Required if <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code>.</p>
    ///   - [`ingested_events_detail(IngestedEventsDetail)`](crate::client::fluent_builders::UpdateModelVersion::ingested_events_detail) / [`set_ingested_events_detail(Option<IngestedEventsDetail>)`](crate::client::fluent_builders::UpdateModelVersion::set_ingested_events_detail): <p>The details of the ingested event used for training the model version. Required if your <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::UpdateModelVersion::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::UpdateModelVersion::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`UpdateModelVersionOutput`](crate::output::UpdateModelVersionOutput) with field(s):
    ///   - [`model_id(Option<String>)`](crate::output::UpdateModelVersionOutput::model_id): <p>The model ID.</p>
    ///   - [`model_type(Option<ModelTypeEnum>)`](crate::output::UpdateModelVersionOutput::model_type): <p>The model type.</p>
    ///   - [`model_version_number(Option<String>)`](crate::output::UpdateModelVersionOutput::model_version_number): <p>The model version number of the model version updated.</p>
    ///   - [`status(Option<String>)`](crate::output::UpdateModelVersionOutput::status): <p>The status of the updated model version.</p>
    /// - On failure, responds with [`SdkError<UpdateModelVersionError>`](crate::error::UpdateModelVersionError)
    pub fn update_model_version(&self) -> crate::client::fluent_builders::UpdateModelVersion {
        crate::client::fluent_builders::UpdateModelVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateModelVersionStatus`](crate::client::fluent_builders::UpdateModelVersionStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_id(impl Into<String>)`](crate::client::fluent_builders::UpdateModelVersionStatus::model_id) / [`set_model_id(Option<String>)`](crate::client::fluent_builders::UpdateModelVersionStatus::set_model_id): <p>The model ID of the model version to update.</p>
    ///   - [`model_type(ModelTypeEnum)`](crate::client::fluent_builders::UpdateModelVersionStatus::model_type) / [`set_model_type(Option<ModelTypeEnum>)`](crate::client::fluent_builders::UpdateModelVersionStatus::set_model_type): <p>The model type.</p>
    ///   - [`model_version_number(impl Into<String>)`](crate::client::fluent_builders::UpdateModelVersionStatus::model_version_number) / [`set_model_version_number(Option<String>)`](crate::client::fluent_builders::UpdateModelVersionStatus::set_model_version_number): <p>The model version number.</p>
    ///   - [`status(ModelVersionStatus)`](crate::client::fluent_builders::UpdateModelVersionStatus::status) / [`set_status(Option<ModelVersionStatus>)`](crate::client::fluent_builders::UpdateModelVersionStatus::set_status): <p>The model version status.</p>
    /// - On success, responds with [`UpdateModelVersionStatusOutput`](crate::output::UpdateModelVersionStatusOutput)

    /// - On failure, responds with [`SdkError<UpdateModelVersionStatusError>`](crate::error::UpdateModelVersionStatusError)
    pub fn update_model_version_status(
        &self,
    ) -> crate::client::fluent_builders::UpdateModelVersionStatus {
        crate::client::fluent_builders::UpdateModelVersionStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRuleMetadata`](crate::client::fluent_builders::UpdateRuleMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule(Rule)`](crate::client::fluent_builders::UpdateRuleMetadata::rule) / [`set_rule(Option<Rule>)`](crate::client::fluent_builders::UpdateRuleMetadata::set_rule): <p>The rule to update.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateRuleMetadata::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateRuleMetadata::set_description): <p>The rule description.</p>
    /// - On success, responds with [`UpdateRuleMetadataOutput`](crate::output::UpdateRuleMetadataOutput)

    /// - On failure, responds with [`SdkError<UpdateRuleMetadataError>`](crate::error::UpdateRuleMetadataError)
    pub fn update_rule_metadata(&self) -> crate::client::fluent_builders::UpdateRuleMetadata {
        crate::client::fluent_builders::UpdateRuleMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRuleVersion`](crate::client::fluent_builders::UpdateRuleVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule(Rule)`](crate::client::fluent_builders::UpdateRuleVersion::rule) / [`set_rule(Option<Rule>)`](crate::client::fluent_builders::UpdateRuleVersion::set_rule): <p>The rule to update.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateRuleVersion::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateRuleVersion::set_description): <p>The description.</p>
    ///   - [`expression(impl Into<String>)`](crate::client::fluent_builders::UpdateRuleVersion::expression) / [`set_expression(Option<String>)`](crate::client::fluent_builders::UpdateRuleVersion::set_expression): <p>The rule expression.</p>
    ///   - [`language(Language)`](crate::client::fluent_builders::UpdateRuleVersion::language) / [`set_language(Option<Language>)`](crate::client::fluent_builders::UpdateRuleVersion::set_language): <p>The language.</p>
    ///   - [`outcomes(Vec<String>)`](crate::client::fluent_builders::UpdateRuleVersion::outcomes) / [`set_outcomes(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateRuleVersion::set_outcomes): <p>The outcomes.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::UpdateRuleVersion::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::UpdateRuleVersion::set_tags): <p>The tags to assign to the rule version.</p>
    /// - On success, responds with [`UpdateRuleVersionOutput`](crate::output::UpdateRuleVersionOutput) with field(s):
    ///   - [`rule(Option<Rule>)`](crate::output::UpdateRuleVersionOutput::rule): <p>The new rule version that was created.</p>
    /// - On failure, responds with [`SdkError<UpdateRuleVersionError>`](crate::error::UpdateRuleVersionError)
    pub fn update_rule_version(&self) -> crate::client::fluent_builders::UpdateRuleVersion {
        crate::client::fluent_builders::UpdateRuleVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateVariable`](crate::client::fluent_builders::UpdateVariable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateVariable::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateVariable::set_name): <p>The name of the variable.</p>
    ///   - [`default_value(impl Into<String>)`](crate::client::fluent_builders::UpdateVariable::default_value) / [`set_default_value(Option<String>)`](crate::client::fluent_builders::UpdateVariable::set_default_value): <p>The new default value of the variable.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateVariable::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateVariable::set_description): <p>The new description.</p>
    ///   - [`variable_type(impl Into<String>)`](crate::client::fluent_builders::UpdateVariable::variable_type) / [`set_variable_type(Option<String>)`](crate::client::fluent_builders::UpdateVariable::set_variable_type): <p>The variable type. For more information see <a href="https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types">Variable types</a>.</p>
    /// - On success, responds with [`UpdateVariableOutput`](crate::output::UpdateVariableOutput)

    /// - On failure, responds with [`SdkError<UpdateVariableError>`](crate::error::UpdateVariableError)
    pub fn update_variable(&self) -> crate::client::fluent_builders::UpdateVariable {
        crate::client::fluent_builders::UpdateVariable::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
