// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SendEvent`](crate::operation::send_event::builders::SendEventFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_id(impl Into<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::event_id) / [`set_event_id(Option<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::set_event_id):<br>required: **true**<br><p>The event ID to upload.</p><br>
    ///   - [`event_type_name(impl Into<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::event_type_name) / [`set_event_type_name(Option<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::set_event_type_name):<br>required: **true**<br><p>The event type name of the event.</p><br>
    ///   - [`event_timestamp(impl Into<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::event_timestamp) / [`set_event_timestamp(Option<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::set_event_timestamp):<br>required: **true**<br><p>The timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p><br>
    ///   - [`event_variables(impl Into<String>, impl Into<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::event_variables) / [`set_event_variables(Option<HashMap::<String, String>>)`](crate::operation::send_event::builders::SendEventFluentBuilder::set_event_variables):<br>required: **true**<br><p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p><br>
    ///   - [`assigned_label(impl Into<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::assigned_label) / [`set_assigned_label(Option<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::set_assigned_label):<br>required: **false**<br><p>The label to associate with the event. Required if specifying <code>labelTimestamp</code>.</p><br>
    ///   - [`label_timestamp(impl Into<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::label_timestamp) / [`set_label_timestamp(Option<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::set_label_timestamp):<br>required: **false**<br><p>The timestamp associated with the label. Required if specifying <code>assignedLabel</code>.</p><br>
    ///   - [`entities(Entity)`](crate::operation::send_event::builders::SendEventFluentBuilder::entities) / [`set_entities(Option<Vec::<Entity>>)`](crate::operation::send_event::builders::SendEventFluentBuilder::set_entities):<br>required: **true**<br><p>An array of entities.</p><br>
    /// - On success, responds with [`SendEventOutput`](crate::operation::send_event::SendEventOutput)
    /// - On failure, responds with [`SdkError<SendEventError>`](crate::operation::send_event::SendEventError)
    pub fn send_event(&self) -> crate::operation::send_event::builders::SendEventFluentBuilder {
        crate::operation::send_event::builders::SendEventFluentBuilder::new(self.handle.clone())
    }
}
