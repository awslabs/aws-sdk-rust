// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateModelVersion`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_id(impl Into<String>)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::model_id) / [`set_model_id(Option<String>)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::set_model_id): <p>The model ID. </p>
    ///   - [`model_type(ModelTypeEnum)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::model_type) / [`set_model_type(Option<ModelTypeEnum>)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::set_model_type): <p>The model type.</p>
    ///   - [`training_data_source(TrainingDataSourceEnum)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::training_data_source) / [`set_training_data_source(Option<TrainingDataSourceEnum>)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::set_training_data_source): <p>The training data source location in Amazon S3. </p>
    ///   - [`training_data_schema(TrainingDataSchema)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::training_data_schema) / [`set_training_data_schema(Option<TrainingDataSchema>)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::set_training_data_schema): <p>The training data schema.</p>
    ///   - [`external_events_detail(ExternalEventsDetail)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::external_events_detail) / [`set_external_events_detail(Option<ExternalEventsDetail>)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::set_external_events_detail): <p>Details of the external events data used for model version training. Required if <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code>.</p>
    ///   - [`ingested_events_detail(IngestedEventsDetail)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::ingested_events_detail) / [`set_ingested_events_detail(Option<IngestedEventsDetail>)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::set_ingested_events_detail): <p>Details of the ingested events data used for model version training. Required if <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::set_tags): <p>A collection of key and value pairs.</p>
    /// - On success, responds with [`CreateModelVersionOutput`](crate::operation::create_model_version::CreateModelVersionOutput) with field(s):
    ///   - [`model_id(Option<String>)`](crate::operation::create_model_version::CreateModelVersionOutput::model_id): <p>The model ID.</p>
    ///   - [`model_type(Option<ModelTypeEnum>)`](crate::operation::create_model_version::CreateModelVersionOutput::model_type): <p>The model type.</p>
    ///   - [`model_version_number(Option<String>)`](crate::operation::create_model_version::CreateModelVersionOutput::model_version_number): <p>The model version number of the model version created.</p>
    ///   - [`status(Option<String>)`](crate::operation::create_model_version::CreateModelVersionOutput::status): <p>The model version status. </p>
    /// - On failure, responds with [`SdkError<CreateModelVersionError>`](crate::operation::create_model_version::CreateModelVersionError)
    pub fn create_model_version(
        &self,
    ) -> crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder {
        crate::operation::create_model_version::builders::CreateModelVersionFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
