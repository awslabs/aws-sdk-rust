// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn external_events_detail_correct_errors(
    mut builder: crate::types::builders::ExternalEventsDetailBuilder,
) -> crate::types::builders::ExternalEventsDetailBuilder {
    if builder.data_location.is_none() {
        builder.data_location = Some(Default::default())
    }
    if builder.data_access_role_arn.is_none() {
        builder.data_access_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ingested_events_detail_correct_errors(
    mut builder: crate::types::builders::IngestedEventsDetailBuilder,
) -> crate::types::builders::IngestedEventsDetailBuilder {
    if builder.ingested_events_time_window.is_none() {
        builder.ingested_events_time_window = {
            let builder = crate::types::builders::IngestedEventsTimeWindowBuilder::default();
            crate::serde_util::ingested_events_time_window_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn rule_correct_errors(mut builder: crate::types::builders::RuleBuilder) -> crate::types::builders::RuleBuilder {
    if builder.detector_id.is_none() {
        builder.detector_id = Some(Default::default())
    }
    if builder.rule_id.is_none() {
        builder.rule_id = Some(Default::default())
    }
    if builder.rule_version.is_none() {
        builder.rule_version = Some(Default::default())
    }
    builder
}

pub(crate) fn training_data_schema_correct_errors(
    mut builder: crate::types::builders::TrainingDataSchemaBuilder,
) -> crate::types::builders::TrainingDataSchemaBuilder {
    if builder.model_variables.is_none() {
        builder.model_variables = Some(Default::default())
    }
    builder
}

pub(crate) fn allow_deny_list_correct_errors(
    mut builder: crate::types::builders::AllowDenyListBuilder,
) -> crate::types::builders::AllowDenyListBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn ingested_events_time_window_correct_errors(
    mut builder: crate::types::builders::IngestedEventsTimeWindowBuilder,
) -> crate::types::builders::IngestedEventsTimeWindowBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(Default::default())
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(Default::default())
    }
    builder
}

pub(crate) fn model_version_correct_errors(mut builder: crate::types::builders::ModelVersionBuilder) -> crate::types::builders::ModelVersionBuilder {
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    if builder.model_type.is_none() {
        builder.model_type = "no value was set".parse::<crate::types::ModelTypeEnum>().ok()
    }
    if builder.model_version_number.is_none() {
        builder.model_version_number = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn entity_correct_errors(mut builder: crate::types::builders::EntityBuilder) -> crate::types::builders::EntityBuilder {
    if builder.entity_type.is_none() {
        builder.entity_type = Some(Default::default())
    }
    if builder.entity_id.is_none() {
        builder.entity_id = Some(Default::default())
    }
    builder
}

pub(crate) fn event_orchestration_correct_errors(
    mut builder: crate::types::builders::EventOrchestrationBuilder,
) -> crate::types::builders::EventOrchestrationBuilder {
    if builder.event_bridge_enabled.is_none() {
        builder.event_bridge_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn model_input_configuration_correct_errors(
    mut builder: crate::types::builders::ModelInputConfigurationBuilder,
) -> crate::types::builders::ModelInputConfigurationBuilder {
    if builder.use_event_variables.is_none() {
        builder.use_event_variables = Some(Default::default())
    }
    builder
}

pub(crate) fn model_output_configuration_correct_errors(
    mut builder: crate::types::builders::ModelOutputConfigurationBuilder,
) -> crate::types::builders::ModelOutputConfigurationBuilder {
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::ModelOutputDataFormat>().ok()
    }
    builder
}

pub(crate) fn aggregated_log_odds_metric_correct_errors(
    mut builder: crate::types::builders::AggregatedLogOddsMetricBuilder,
) -> crate::types::builders::AggregatedLogOddsMetricBuilder {
    if builder.variable_names.is_none() {
        builder.variable_names = Some(Default::default())
    }
    if builder.aggregated_variables_importance.is_none() {
        builder.aggregated_variables_importance = Some(Default::default())
    }
    builder
}

pub(crate) fn log_odds_metric_correct_errors(
    mut builder: crate::types::builders::LogOddsMetricBuilder,
) -> crate::types::builders::LogOddsMetricBuilder {
    if builder.variable_name.is_none() {
        builder.variable_name = Some(Default::default())
    }
    if builder.variable_type.is_none() {
        builder.variable_type = Some(Default::default())
    }
    if builder.variable_importance.is_none() {
        builder.variable_importance = Some(Default::default())
    }
    builder
}

pub(crate) fn uncertainty_range_correct_errors(
    mut builder: crate::types::builders::UncertaintyRangeBuilder,
) -> crate::types::builders::UncertaintyRangeBuilder {
    if builder.lower_bound_value.is_none() {
        builder.lower_bound_value = Some(Default::default())
    }
    if builder.upper_bound_value.is_none() {
        builder.upper_bound_value = Some(Default::default())
    }
    builder
}
