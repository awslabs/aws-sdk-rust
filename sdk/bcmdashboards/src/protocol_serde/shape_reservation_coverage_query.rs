// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_reservation_coverage_query(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ReservationCoverageQuery,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.time_range {
        #[allow(unused_mut)]
        let mut object_2 = object.key("timeRange").start_object();
        crate::protocol_serde::shape_date_time_range::ser_date_time_range(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.group_by {
        let mut array_4 = object.key("groupBy").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_group_definition::ser_group_definition(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.granularity {
        object.key("granularity").string(var_7.as_str());
    }
    if let Some(var_8) = &input.filter {
        #[allow(unused_mut)]
        let mut object_9 = object.key("filter").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.metrics {
        let mut array_11 = object.key("metrics").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    Ok(())
}

pub(crate) fn de_reservation_coverage_query<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::ReservationCoverageQuery>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ReservationCoverageQueryBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "timeRange" => {
                            builder = builder.set_time_range(crate::protocol_serde::shape_date_time_range::de_date_time_range(tokens)?);
                        }
                        "groupBy" => {
                            builder = builder.set_group_by(crate::protocol_serde::shape_group_definitions::de_group_definitions(tokens)?);
                        }
                        "granularity" => {
                            builder = builder.set_granularity(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Granularity::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "filter" => {
                            builder = builder.set_filter(crate::protocol_serde::shape_expression::de_expression(tokens)?);
                        }
                        "metrics" => {
                            builder = builder.set_metrics(crate::protocol_serde::shape_metric_names::de_metric_names(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::reservation_coverage_query_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
