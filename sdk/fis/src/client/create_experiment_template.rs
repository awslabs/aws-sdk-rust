// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateExperimentTemplate`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::set_client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::set_description): <p>A description for the experiment template.</p>
    ///   - [`stop_conditions(Vec<CreateExperimentTemplateStopConditionInput>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::stop_conditions) / [`set_stop_conditions(Option<Vec<CreateExperimentTemplateStopConditionInput>>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::set_stop_conditions): <p>The stop conditions.</p>
    ///   - [`targets(HashMap<String, CreateExperimentTemplateTargetInput>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::targets) / [`set_targets(Option<HashMap<String, CreateExperimentTemplateTargetInput>>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::set_targets): <p>The targets for the experiment.</p>
    ///   - [`actions(HashMap<String, CreateExperimentTemplateActionInput>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::actions) / [`set_actions(Option<HashMap<String, CreateExperimentTemplateActionInput>>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::set_actions): <p>The actions for the experiment.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::set_role_arn): <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::set_tags): <p>The tags to apply to the experiment template.</p>
    ///   - [`log_configuration(CreateExperimentTemplateLogConfigurationInput)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::log_configuration) / [`set_log_configuration(Option<CreateExperimentTemplateLogConfigurationInput>)`](crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::set_log_configuration): <p>The configuration for experiment logging.</p>
    /// - On success, responds with [`CreateExperimentTemplateOutput`](crate::operation::create_experiment_template::CreateExperimentTemplateOutput) with field(s):
    ///   - [`experiment_template(Option<ExperimentTemplate>)`](crate::operation::create_experiment_template::CreateExperimentTemplateOutput::experiment_template): <p>Information about the experiment template.</p>
    /// - On failure, responds with [`SdkError<CreateExperimentTemplateError>`](crate::operation::create_experiment_template::CreateExperimentTemplateError)
    pub fn create_experiment_template(
        &self,
    ) -> crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder
    {
        crate::operation::create_experiment_template::builders::CreateExperimentTemplateFluentBuilder::new(self.handle.clone())
    }
}
