// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Fault Injection Simulator
///
/// Client for invoking operations on AWS Fault Injection Simulator. Each operation on AWS Fault Injection Simulator is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_fis::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_fis::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_fis::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateExperimentTemplate`](crate::client::fluent_builders::CreateExperimentTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateExperimentTemplate::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateExperimentTemplate::set_client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateExperimentTemplate::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateExperimentTemplate::set_description): <p>A description for the experiment template.</p>
    ///   - [`stop_conditions(Vec<CreateExperimentTemplateStopConditionInput>)`](crate::client::fluent_builders::CreateExperimentTemplate::stop_conditions) / [`set_stop_conditions(Option<Vec<CreateExperimentTemplateStopConditionInput>>)`](crate::client::fluent_builders::CreateExperimentTemplate::set_stop_conditions): <p>The stop conditions.</p>
    ///   - [`targets(HashMap<String, CreateExperimentTemplateTargetInput>)`](crate::client::fluent_builders::CreateExperimentTemplate::targets) / [`set_targets(Option<HashMap<String, CreateExperimentTemplateTargetInput>>)`](crate::client::fluent_builders::CreateExperimentTemplate::set_targets): <p>The targets for the experiment.</p>
    ///   - [`actions(HashMap<String, CreateExperimentTemplateActionInput>)`](crate::client::fluent_builders::CreateExperimentTemplate::actions) / [`set_actions(Option<HashMap<String, CreateExperimentTemplateActionInput>>)`](crate::client::fluent_builders::CreateExperimentTemplate::set_actions): <p>The actions for the experiment.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateExperimentTemplate::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::CreateExperimentTemplate::set_role_arn): <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateExperimentTemplate::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateExperimentTemplate::set_tags): <p>The tags to apply to the experiment template.</p>
    ///   - [`log_configuration(CreateExperimentTemplateLogConfigurationInput)`](crate::client::fluent_builders::CreateExperimentTemplate::log_configuration) / [`set_log_configuration(Option<CreateExperimentTemplateLogConfigurationInput>)`](crate::client::fluent_builders::CreateExperimentTemplate::set_log_configuration): <p>The configuration for experiment logging.</p>
    /// - On success, responds with [`CreateExperimentTemplateOutput`](crate::output::CreateExperimentTemplateOutput) with field(s):
    ///   - [`experiment_template(Option<ExperimentTemplate>)`](crate::output::CreateExperimentTemplateOutput::experiment_template): <p>Information about the experiment template.</p>
    /// - On failure, responds with [`SdkError<CreateExperimentTemplateError>`](crate::error::CreateExperimentTemplateError)
    pub fn create_experiment_template(
        &self,
    ) -> crate::client::fluent_builders::CreateExperimentTemplate {
        crate::client::fluent_builders::CreateExperimentTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteExperimentTemplate`](crate::client::fluent_builders::DeleteExperimentTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteExperimentTemplate::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteExperimentTemplate::set_id): <p>The ID of the experiment template.</p>
    /// - On success, responds with [`DeleteExperimentTemplateOutput`](crate::output::DeleteExperimentTemplateOutput) with field(s):
    ///   - [`experiment_template(Option<ExperimentTemplate>)`](crate::output::DeleteExperimentTemplateOutput::experiment_template): <p>Information about the experiment template.</p>
    /// - On failure, responds with [`SdkError<DeleteExperimentTemplateError>`](crate::error::DeleteExperimentTemplateError)
    pub fn delete_experiment_template(
        &self,
    ) -> crate::client::fluent_builders::DeleteExperimentTemplate {
        crate::client::fluent_builders::DeleteExperimentTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAction`](crate::client::fluent_builders::GetAction) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetAction::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetAction::set_id): <p>The ID of the action.</p>
    /// - On success, responds with [`GetActionOutput`](crate::output::GetActionOutput) with field(s):
    ///   - [`action(Option<Action>)`](crate::output::GetActionOutput::action): <p>Information about the action.</p>
    /// - On failure, responds with [`SdkError<GetActionError>`](crate::error::GetActionError)
    pub fn get_action(&self) -> crate::client::fluent_builders::GetAction {
        crate::client::fluent_builders::GetAction::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetExperiment`](crate::client::fluent_builders::GetExperiment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetExperiment::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetExperiment::set_id): <p>The ID of the experiment.</p>
    /// - On success, responds with [`GetExperimentOutput`](crate::output::GetExperimentOutput) with field(s):
    ///   - [`experiment(Option<Experiment>)`](crate::output::GetExperimentOutput::experiment): <p>Information about the experiment.</p>
    /// - On failure, responds with [`SdkError<GetExperimentError>`](crate::error::GetExperimentError)
    pub fn get_experiment(&self) -> crate::client::fluent_builders::GetExperiment {
        crate::client::fluent_builders::GetExperiment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetExperimentTemplate`](crate::client::fluent_builders::GetExperimentTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetExperimentTemplate::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetExperimentTemplate::set_id): <p>The ID of the experiment template.</p>
    /// - On success, responds with [`GetExperimentTemplateOutput`](crate::output::GetExperimentTemplateOutput) with field(s):
    ///   - [`experiment_template(Option<ExperimentTemplate>)`](crate::output::GetExperimentTemplateOutput::experiment_template): <p>Information about the experiment template.</p>
    /// - On failure, responds with [`SdkError<GetExperimentTemplateError>`](crate::error::GetExperimentTemplateError)
    pub fn get_experiment_template(&self) -> crate::client::fluent_builders::GetExperimentTemplate {
        crate::client::fluent_builders::GetExperimentTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTargetResourceType`](crate::client::fluent_builders::GetTargetResourceType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_type(impl Into<String>)`](crate::client::fluent_builders::GetTargetResourceType::resource_type) / [`set_resource_type(Option<String>)`](crate::client::fluent_builders::GetTargetResourceType::set_resource_type): <p>The resource type.</p>
    /// - On success, responds with [`GetTargetResourceTypeOutput`](crate::output::GetTargetResourceTypeOutput) with field(s):
    ///   - [`target_resource_type(Option<TargetResourceType>)`](crate::output::GetTargetResourceTypeOutput::target_resource_type): <p>Information about the resource type.</p>
    /// - On failure, responds with [`SdkError<GetTargetResourceTypeError>`](crate::error::GetTargetResourceTypeError)
    pub fn get_target_resource_type(
        &self,
    ) -> crate::client::fluent_builders::GetTargetResourceType {
        crate::client::fluent_builders::GetTargetResourceType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListActions`](crate::client::fluent_builders::ListActions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListActions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListActions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListActions::set_max_results): <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListActions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListActions::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`ListActionsOutput`](crate::output::ListActionsOutput) with field(s):
    ///   - [`actions(Option<Vec<ActionSummary>>)`](crate::output::ListActionsOutput::actions): <p>The actions.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListActionsOutput::next_token): <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListActionsError>`](crate::error::ListActionsError)
    pub fn list_actions(&self) -> crate::client::fluent_builders::ListActions {
        crate::client::fluent_builders::ListActions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListExperiments`](crate::client::fluent_builders::ListExperiments) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExperiments::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExperiments::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExperiments::set_max_results): <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExperiments::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExperiments::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`ListExperimentsOutput`](crate::output::ListExperimentsOutput) with field(s):
    ///   - [`experiments(Option<Vec<ExperimentSummary>>)`](crate::output::ListExperimentsOutput::experiments): <p>The experiments.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListExperimentsOutput::next_token): <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListExperimentsError>`](crate::error::ListExperimentsError)
    pub fn list_experiments(&self) -> crate::client::fluent_builders::ListExperiments {
        crate::client::fluent_builders::ListExperiments::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListExperimentTemplates`](crate::client::fluent_builders::ListExperimentTemplates) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExperimentTemplates::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExperimentTemplates::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExperimentTemplates::set_max_results): <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExperimentTemplates::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExperimentTemplates::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`ListExperimentTemplatesOutput`](crate::output::ListExperimentTemplatesOutput) with field(s):
    ///   - [`experiment_templates(Option<Vec<ExperimentTemplateSummary>>)`](crate::output::ListExperimentTemplatesOutput::experiment_templates): <p>The experiment templates.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListExperimentTemplatesOutput::next_token): <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListExperimentTemplatesError>`](crate::error::ListExperimentTemplatesError)
    pub fn list_experiment_templates(
        &self,
    ) -> crate::client::fluent_builders::ListExperimentTemplates {
        crate::client::fluent_builders::ListExperimentTemplates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags for the resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTargetResourceTypes`](crate::client::fluent_builders::ListTargetResourceTypes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTargetResourceTypes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTargetResourceTypes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTargetResourceTypes::set_max_results): <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTargetResourceTypes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTargetResourceTypes::set_next_token): <p>The token for the next page of results.</p>
    /// - On success, responds with [`ListTargetResourceTypesOutput`](crate::output::ListTargetResourceTypesOutput) with field(s):
    ///   - [`target_resource_types(Option<Vec<TargetResourceTypeSummary>>)`](crate::output::ListTargetResourceTypesOutput::target_resource_types): <p>The target resource types.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTargetResourceTypesOutput::next_token): <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListTargetResourceTypesError>`](crate::error::ListTargetResourceTypesError)
    pub fn list_target_resource_types(
        &self,
    ) -> crate::client::fluent_builders::ListTargetResourceTypes {
        crate::client::fluent_builders::ListTargetResourceTypes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartExperiment`](crate::client::fluent_builders::StartExperiment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StartExperiment::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StartExperiment::set_client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    ///   - [`experiment_template_id(impl Into<String>)`](crate::client::fluent_builders::StartExperiment::experiment_template_id) / [`set_experiment_template_id(Option<String>)`](crate::client::fluent_builders::StartExperiment::set_experiment_template_id): <p>The ID of the experiment template.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::StartExperiment::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::StartExperiment::set_tags): <p>The tags to apply to the experiment.</p>
    /// - On success, responds with [`StartExperimentOutput`](crate::output::StartExperimentOutput) with field(s):
    ///   - [`experiment(Option<Experiment>)`](crate::output::StartExperimentOutput::experiment): <p>Information about the experiment.</p>
    /// - On failure, responds with [`SdkError<StartExperimentError>`](crate::error::StartExperimentError)
    pub fn start_experiment(&self) -> crate::client::fluent_builders::StartExperiment {
        crate::client::fluent_builders::StartExperiment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopExperiment`](crate::client::fluent_builders::StopExperiment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::StopExperiment::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::StopExperiment::set_id): <p>The ID of the experiment.</p>
    /// - On success, responds with [`StopExperimentOutput`](crate::output::StopExperimentOutput) with field(s):
    ///   - [`experiment(Option<Experiment>)`](crate::output::StopExperimentOutput::experiment): <p>Information about the experiment.</p>
    /// - On failure, responds with [`SdkError<StopExperimentError>`](crate::error::StopExperimentError)
    pub fn stop_experiment(&self) -> crate::client::fluent_builders::StopExperiment {
        crate::client::fluent_builders::StopExperiment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags for the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The tag keys to remove.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateExperimentTemplate`](crate::client::fluent_builders::UpdateExperimentTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::UpdateExperimentTemplate::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::UpdateExperimentTemplate::set_id): <p>The ID of the experiment template.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateExperimentTemplate::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateExperimentTemplate::set_description): <p>A description for the template.</p>
    ///   - [`stop_conditions(Vec<UpdateExperimentTemplateStopConditionInput>)`](crate::client::fluent_builders::UpdateExperimentTemplate::stop_conditions) / [`set_stop_conditions(Option<Vec<UpdateExperimentTemplateStopConditionInput>>)`](crate::client::fluent_builders::UpdateExperimentTemplate::set_stop_conditions): <p>The stop conditions for the experiment.</p>
    ///   - [`targets(HashMap<String, UpdateExperimentTemplateTargetInput>)`](crate::client::fluent_builders::UpdateExperimentTemplate::targets) / [`set_targets(Option<HashMap<String, UpdateExperimentTemplateTargetInput>>)`](crate::client::fluent_builders::UpdateExperimentTemplate::set_targets): <p>The targets for the experiment.</p>
    ///   - [`actions(HashMap<String, UpdateExperimentTemplateActionInputItem>)`](crate::client::fluent_builders::UpdateExperimentTemplate::actions) / [`set_actions(Option<HashMap<String, UpdateExperimentTemplateActionInputItem>>)`](crate::client::fluent_builders::UpdateExperimentTemplate::set_actions): <p>The actions for the experiment.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateExperimentTemplate::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::UpdateExperimentTemplate::set_role_arn): <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    ///   - [`log_configuration(UpdateExperimentTemplateLogConfigurationInput)`](crate::client::fluent_builders::UpdateExperimentTemplate::log_configuration) / [`set_log_configuration(Option<UpdateExperimentTemplateLogConfigurationInput>)`](crate::client::fluent_builders::UpdateExperimentTemplate::set_log_configuration): <p>The configuration for experiment logging.</p>
    /// - On success, responds with [`UpdateExperimentTemplateOutput`](crate::output::UpdateExperimentTemplateOutput) with field(s):
    ///   - [`experiment_template(Option<ExperimentTemplate>)`](crate::output::UpdateExperimentTemplateOutput::experiment_template): <p>Information about the experiment template.</p>
    /// - On failure, responds with [`SdkError<UpdateExperimentTemplateError>`](crate::error::UpdateExperimentTemplateError)
    pub fn update_experiment_template(
        &self,
    ) -> crate::client::fluent_builders::UpdateExperimentTemplate {
        crate::client::fluent_builders::UpdateExperimentTemplate::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
