// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateExperimentTemplateInput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>A description for the experiment template.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The stop conditions.</p>
    #[doc(hidden)]
    pub stop_conditions: std::option::Option<
        std::vec::Vec<crate::types::CreateExperimentTemplateStopConditionInput>,
    >,
    /// <p>The targets for the experiment.</p>
    #[doc(hidden)]
    pub targets: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::CreateExperimentTemplateTargetInput,
        >,
    >,
    /// <p>The actions for the experiment.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::CreateExperimentTemplateActionInput,
        >,
    >,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The tags to apply to the experiment template.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The configuration for experiment logging.</p>
    #[doc(hidden)]
    pub log_configuration:
        std::option::Option<crate::types::CreateExperimentTemplateLogConfigurationInput>,
}
impl CreateExperimentTemplateInput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A description for the experiment template.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The stop conditions.</p>
    pub fn stop_conditions(
        &self,
    ) -> std::option::Option<&[crate::types::CreateExperimentTemplateStopConditionInput]> {
        self.stop_conditions.as_deref()
    }
    /// <p>The targets for the experiment.</p>
    pub fn targets(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            crate::types::CreateExperimentTemplateTargetInput,
        >,
    > {
        self.targets.as_ref()
    }
    /// <p>The actions for the experiment.</p>
    pub fn actions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            crate::types::CreateExperimentTemplateActionInput,
        >,
    > {
        self.actions.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The tags to apply to the experiment template.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The configuration for experiment logging.</p>
    pub fn log_configuration(
        &self,
    ) -> std::option::Option<&crate::types::CreateExperimentTemplateLogConfigurationInput> {
        self.log_configuration.as_ref()
    }
}
impl CreateExperimentTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateExperimentTemplateInput`](crate::operation::create_experiment_template::CreateExperimentTemplateInput).
    pub fn builder(
    ) -> crate::operation::create_experiment_template::builders::CreateExperimentTemplateInputBuilder
    {
        crate::operation::create_experiment_template::builders::CreateExperimentTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateExperimentTemplateInput`](crate::operation::create_experiment_template::CreateExperimentTemplateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateExperimentTemplateInputBuilder {
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) stop_conditions: std::option::Option<
        std::vec::Vec<crate::types::CreateExperimentTemplateStopConditionInput>,
    >,
    pub(crate) targets: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::CreateExperimentTemplateTargetInput,
        >,
    >,
    pub(crate) actions: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::CreateExperimentTemplateActionInput,
        >,
    >,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) log_configuration:
        std::option::Option<crate::types::CreateExperimentTemplateLogConfigurationInput>,
}
impl CreateExperimentTemplateInputBuilder {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A description for the experiment template.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the experiment template.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `stop_conditions`.
    ///
    /// To override the contents of this collection use [`set_stop_conditions`](Self::set_stop_conditions).
    ///
    /// <p>The stop conditions.</p>
    pub fn stop_conditions(
        mut self,
        input: crate::types::CreateExperimentTemplateStopConditionInput,
    ) -> Self {
        let mut v = self.stop_conditions.unwrap_or_default();
        v.push(input);
        self.stop_conditions = Some(v);
        self
    }
    /// <p>The stop conditions.</p>
    pub fn set_stop_conditions(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::CreateExperimentTemplateStopConditionInput>,
        >,
    ) -> Self {
        self.stop_conditions = input;
        self
    }
    /// Adds a key-value pair to `targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The targets for the experiment.</p>
    pub fn targets(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::CreateExperimentTemplateTargetInput,
    ) -> Self {
        let mut hash_map = self.targets.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.targets = Some(hash_map);
        self
    }
    /// <p>The targets for the experiment.</p>
    pub fn set_targets(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::types::CreateExperimentTemplateTargetInput,
            >,
        >,
    ) -> Self {
        self.targets = input;
        self
    }
    /// Adds a key-value pair to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions for the experiment.</p>
    pub fn actions(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::CreateExperimentTemplateActionInput,
    ) -> Self {
        let mut hash_map = self.actions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.actions = Some(hash_map);
        self
    }
    /// <p>The actions for the experiment.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::types::CreateExperimentTemplateActionInput,
            >,
        >,
    ) -> Self {
        self.actions = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to apply to the experiment template.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags to apply to the experiment template.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The configuration for experiment logging.</p>
    pub fn log_configuration(
        mut self,
        input: crate::types::CreateExperimentTemplateLogConfigurationInput,
    ) -> Self {
        self.log_configuration = Some(input);
        self
    }
    /// <p>The configuration for experiment logging.</p>
    pub fn set_log_configuration(
        mut self,
        input: std::option::Option<crate::types::CreateExperimentTemplateLogConfigurationInput>,
    ) -> Self {
        self.log_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateExperimentTemplateInput`](crate::operation::create_experiment_template::CreateExperimentTemplateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_experiment_template::CreateExperimentTemplateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_experiment_template::CreateExperimentTemplateInput {
                client_token: self.client_token,
                description: self.description,
                stop_conditions: self.stop_conditions,
                targets: self.targets,
                actions: self.actions,
                role_arn: self.role_arn,
                tags: self.tags,
                log_configuration: self.log_configuration,
            },
        )
    }
}
