// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the parameters for a resource type. Use parameters to determine which tasks are identified during target resolution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TargetResourceTypeParameter {
    /// <p>A description of the parameter.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Indicates whether the parameter is required.</p>
    #[doc(hidden)]
    pub required: std::option::Option<bool>,
}
impl TargetResourceTypeParameter {
    /// <p>A description of the parameter.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Indicates whether the parameter is required.</p>
    pub fn required(&self) -> std::option::Option<bool> {
        self.required
    }
}
impl TargetResourceTypeParameter {
    /// Creates a new builder-style object to manufacture [`TargetResourceTypeParameter`](crate::types::TargetResourceTypeParameter).
    pub fn builder() -> crate::types::builders::TargetResourceTypeParameterBuilder {
        crate::types::builders::TargetResourceTypeParameterBuilder::default()
    }
}

/// A builder for [`TargetResourceTypeParameter`](crate::types::TargetResourceTypeParameter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TargetResourceTypeParameterBuilder {
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) required: std::option::Option<bool>,
}
impl TargetResourceTypeParameterBuilder {
    /// <p>A description of the parameter.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the parameter.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Indicates whether the parameter is required.</p>
    pub fn required(mut self, input: bool) -> Self {
        self.required = Some(input);
        self
    }
    /// <p>Indicates whether the parameter is required.</p>
    pub fn set_required(mut self, input: std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// Consumes the builder and constructs a [`TargetResourceTypeParameter`](crate::types::TargetResourceTypeParameter).
    pub fn build(self) -> crate::types::TargetResourceTypeParameter {
        crate::types::TargetResourceTypeParameter {
            description: self.description,
            required: self.required,
        }
    }
}
