// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a resource type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TargetResourceType {
    /// <p>The resource type.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>A description of the resource type.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The parameters for the resource type.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::TargetResourceTypeParameter>,
    >,
}
impl TargetResourceType {
    /// <p>The resource type.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>A description of the resource type.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The parameters for the resource type.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::TargetResourceTypeParameter>,
    > {
        self.parameters.as_ref()
    }
}
impl TargetResourceType {
    /// Creates a new builder-style object to manufacture [`TargetResourceType`](crate::types::TargetResourceType).
    pub fn builder() -> crate::types::builders::TargetResourceTypeBuilder {
        crate::types::builders::TargetResourceTypeBuilder::default()
    }
}

/// A builder for [`TargetResourceType`](crate::types::TargetResourceType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TargetResourceTypeBuilder {
    pub(crate) resource_type: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) parameters: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::TargetResourceTypeParameter>,
    >,
}
impl TargetResourceTypeBuilder {
    /// <p>The resource type.</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The resource type.</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>A description of the resource type.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the resource type.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameters for the resource type.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::TargetResourceTypeParameter,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = Some(hash_map);
        self
    }
    /// <p>The parameters for the resource type.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::types::TargetResourceTypeParameter,
            >,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`TargetResourceType`](crate::types::TargetResourceType).
    pub fn build(self) -> crate::types::TargetResourceType {
        crate::types::TargetResourceType {
            resource_type: self.resource_type,
            description: self.description,
            parameters: self.parameters,
        }
    }
}
