// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the state of an experiment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExperimentState {
    /// <p>The state of the experiment.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ExperimentStatus>,
    /// <p>The reason for the state.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<std::string::String>,
}
impl ExperimentState {
    /// <p>The state of the experiment.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ExperimentStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the state.</p>
    pub fn reason(&self) -> std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl ExperimentState {
    /// Creates a new builder-style object to manufacture [`ExperimentState`](crate::types::ExperimentState).
    pub fn builder() -> crate::types::builders::ExperimentStateBuilder {
        crate::types::builders::ExperimentStateBuilder::default()
    }
}

/// A builder for [`ExperimentState`](crate::types::ExperimentState).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExperimentStateBuilder {
    pub(crate) status: std::option::Option<crate::types::ExperimentStatus>,
    pub(crate) reason: std::option::Option<std::string::String>,
}
impl ExperimentStateBuilder {
    /// <p>The state of the experiment.</p>
    pub fn status(mut self, input: crate::types::ExperimentStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The state of the experiment.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ExperimentStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The reason for the state.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason = Some(input.into());
        self
    }
    /// <p>The reason for the state.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// Consumes the builder and constructs a [`ExperimentState`](crate::types::ExperimentState).
    pub fn build(self) -> crate::types::ExperimentState {
        crate::types::ExperimentState {
            status: self.status,
            reason: self.reason,
        }
    }
}
