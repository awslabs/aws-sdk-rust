// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a target for an experiment. You must specify at least one Amazon Resource Name (ARN) or at least one resource tag. You cannot specify both ARNs and tags.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/targets.html">Targets</a> in the <i>Fault Injection Simulator User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateExperimentTemplateTargetInput {
    /// <p>The resource type. The resource type must be supported for the specified action.</p>
    pub resource_type: ::std::string::String,
    /// <p>The Amazon Resource Names (ARNs) of the resources.</p>
    pub resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The tags for the target resources.</p>
    pub resource_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The filters to apply to identify target resources using specific attributes.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateTargetInputFilter>>,
    /// <p>Scopes the identified resources to a specific count of the resources at random, or a percentage of the resources. All identified resources are included in the target.</p>
    /// <ul>
    /// <li> <p>ALL - Run the action on all identified targets. This is the default.</p> </li>
    /// <li> <p>COUNT(n) - Run the action on the specified number of targets, chosen from the identified targets at random. For example, COUNT(1) selects one of the targets.</p> </li>
    /// <li> <p>PERCENT(n) - Run the action on the specified percentage of targets, chosen from the identified targets at random. For example, PERCENT(25) selects 25% of the targets.</p> </li>
    /// </ul>
    pub selection_mode: ::std::string::String,
    /// <p>The resource type parameters.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateExperimentTemplateTargetInput {
    /// <p>The resource type. The resource type must be supported for the specified action.</p>
    pub fn resource_type(&self) -> &str {
        use std::ops::Deref;
        self.resource_type.deref()
    }
    /// <p>The Amazon Resource Names (ARNs) of the resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_arns.is_none()`.
    pub fn resource_arns(&self) -> &[::std::string::String] {
        self.resource_arns.as_deref().unwrap_or_default()
    }
    /// <p>The tags for the target resources.</p>
    pub fn resource_tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.resource_tags.as_ref()
    }
    /// <p>The filters to apply to identify target resources using specific attributes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::ExperimentTemplateTargetInputFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>Scopes the identified resources to a specific count of the resources at random, or a percentage of the resources. All identified resources are included in the target.</p>
    /// <ul>
    /// <li> <p>ALL - Run the action on all identified targets. This is the default.</p> </li>
    /// <li> <p>COUNT(n) - Run the action on the specified number of targets, chosen from the identified targets at random. For example, COUNT(1) selects one of the targets.</p> </li>
    /// <li> <p>PERCENT(n) - Run the action on the specified percentage of targets, chosen from the identified targets at random. For example, PERCENT(25) selects 25% of the targets.</p> </li>
    /// </ul>
    pub fn selection_mode(&self) -> &str {
        use std::ops::Deref;
        self.selection_mode.deref()
    }
    /// <p>The resource type parameters.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.parameters.as_ref()
    }
}
impl CreateExperimentTemplateTargetInput {
    /// Creates a new builder-style object to manufacture [`CreateExperimentTemplateTargetInput`](crate::types::CreateExperimentTemplateTargetInput).
    pub fn builder() -> crate::types::builders::CreateExperimentTemplateTargetInputBuilder {
        crate::types::builders::CreateExperimentTemplateTargetInputBuilder::default()
    }
}

/// A builder for [`CreateExperimentTemplateTargetInput`](crate::types::CreateExperimentTemplateTargetInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateExperimentTemplateTargetInputBuilder {
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) resource_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateTargetInputFilter>>,
    pub(crate) selection_mode: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateExperimentTemplateTargetInputBuilder {
    /// <p>The resource type. The resource type must be supported for the specified action.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource type. The resource type must be supported for the specified action.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The resource type. The resource type must be supported for the specified action.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// Appends an item to `resource_arns`.
    ///
    /// To override the contents of this collection use [`set_resource_arns`](Self::set_resource_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the resources.</p>
    pub fn resource_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resource_arns.unwrap_or_default();
        v.push(input.into());
        self.resource_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the resources.</p>
    pub fn set_resource_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resource_arns = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the resources.</p>
    pub fn get_resource_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resource_arns
    }
    /// Adds a key-value pair to `resource_tags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>The tags for the target resources.</p>
    pub fn resource_tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.resource_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.resource_tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags for the target resources.</p>
    pub fn set_resource_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.resource_tags = input;
        self
    }
    /// <p>The tags for the target resources.</p>
    pub fn get_resource_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.resource_tags
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters to apply to identify target resources using specific attributes.</p>
    pub fn filters(mut self, input: crate::types::ExperimentTemplateTargetInputFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filters to apply to identify target resources using specific attributes.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateTargetInputFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filters to apply to identify target resources using specific attributes.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateTargetInputFilter>> {
        &self.filters
    }
    /// <p>Scopes the identified resources to a specific count of the resources at random, or a percentage of the resources. All identified resources are included in the target.</p>
    /// <ul>
    /// <li> <p>ALL - Run the action on all identified targets. This is the default.</p> </li>
    /// <li> <p>COUNT(n) - Run the action on the specified number of targets, chosen from the identified targets at random. For example, COUNT(1) selects one of the targets.</p> </li>
    /// <li> <p>PERCENT(n) - Run the action on the specified percentage of targets, chosen from the identified targets at random. For example, PERCENT(25) selects 25% of the targets.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn selection_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.selection_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Scopes the identified resources to a specific count of the resources at random, or a percentage of the resources. All identified resources are included in the target.</p>
    /// <ul>
    /// <li> <p>ALL - Run the action on all identified targets. This is the default.</p> </li>
    /// <li> <p>COUNT(n) - Run the action on the specified number of targets, chosen from the identified targets at random. For example, COUNT(1) selects one of the targets.</p> </li>
    /// <li> <p>PERCENT(n) - Run the action on the specified percentage of targets, chosen from the identified targets at random. For example, PERCENT(25) selects 25% of the targets.</p> </li>
    /// </ul>
    pub fn set_selection_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.selection_mode = input;
        self
    }
    /// <p>Scopes the identified resources to a specific count of the resources at random, or a percentage of the resources. All identified resources are included in the target.</p>
    /// <ul>
    /// <li> <p>ALL - Run the action on all identified targets. This is the default.</p> </li>
    /// <li> <p>COUNT(n) - Run the action on the specified number of targets, chosen from the identified targets at random. For example, COUNT(1) selects one of the targets.</p> </li>
    /// <li> <p>PERCENT(n) - Run the action on the specified percentage of targets, chosen from the identified targets at random. For example, PERCENT(25) selects 25% of the targets.</p> </li>
    /// </ul>
    pub fn get_selection_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.selection_mode
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The resource type parameters.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The resource type parameters.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The resource type parameters.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`CreateExperimentTemplateTargetInput`](crate::types::CreateExperimentTemplateTargetInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`resource_type`](crate::types::builders::CreateExperimentTemplateTargetInputBuilder::resource_type)
    /// - [`selection_mode`](crate::types::builders::CreateExperimentTemplateTargetInputBuilder::selection_mode)
    pub fn build(self) -> ::std::result::Result<crate::types::CreateExperimentTemplateTargetInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CreateExperimentTemplateTargetInput {
            resource_type: self.resource_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_type",
                    "resource_type was not specified but it is required when building CreateExperimentTemplateTargetInput",
                )
            })?,
            resource_arns: self.resource_arns,
            resource_tags: self.resource_tags,
            filters: self.filters,
            selection_mode: self.selection_mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "selection_mode",
                    "selection_mode was not specified but it is required when building CreateExperimentTemplateTargetInput",
                )
            })?,
            parameters: self.parameters,
        })
    }
}
