// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an experiment template.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExperimentTemplate {
    /// <p>The ID of the experiment template.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the experiment template.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The description for the experiment template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The targets for the experiment.</p>
    pub targets: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTemplateTarget>>,
    /// <p>The actions for the experiment.</p>
    pub actions: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTemplateAction>>,
    /// <p>The stop conditions for the experiment.</p>
    pub stop_conditions: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateStopCondition>>,
    /// <p>The time the experiment template was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time the experiment template was last updated.</p>
    pub last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The tags for the experiment template.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The configuration for experiment logging.</p>
    pub log_configuration: ::std::option::Option<crate::types::ExperimentTemplateLogConfiguration>,
    /// <p>The experiment options for an experiment template.</p>
    pub experiment_options: ::std::option::Option<crate::types::ExperimentTemplateExperimentOptions>,
    /// <p>The count of target account configurations for the experiment template.</p>
    pub target_account_configurations_count: ::std::option::Option<i64>,
}
impl ExperimentTemplate {
    /// <p>The ID of the experiment template.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the experiment template.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The description for the experiment template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The targets for the experiment.</p>
    pub fn targets(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ExperimentTemplateTarget>> {
        self.targets.as_ref()
    }
    /// <p>The actions for the experiment.</p>
    pub fn actions(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ExperimentTemplateAction>> {
        self.actions.as_ref()
    }
    /// <p>The stop conditions for the experiment.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stop_conditions.is_none()`.
    pub fn stop_conditions(&self) -> &[crate::types::ExperimentTemplateStopCondition] {
        self.stop_conditions.as_deref().unwrap_or_default()
    }
    /// <p>The time the experiment template was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time the experiment template was last updated.</p>
    pub fn last_update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The tags for the experiment template.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The configuration for experiment logging.</p>
    pub fn log_configuration(&self) -> ::std::option::Option<&crate::types::ExperimentTemplateLogConfiguration> {
        self.log_configuration.as_ref()
    }
    /// <p>The experiment options for an experiment template.</p>
    pub fn experiment_options(&self) -> ::std::option::Option<&crate::types::ExperimentTemplateExperimentOptions> {
        self.experiment_options.as_ref()
    }
    /// <p>The count of target account configurations for the experiment template.</p>
    pub fn target_account_configurations_count(&self) -> ::std::option::Option<i64> {
        self.target_account_configurations_count
    }
}
impl ExperimentTemplate {
    /// Creates a new builder-style object to manufacture [`ExperimentTemplate`](crate::types::ExperimentTemplate).
    pub fn builder() -> crate::types::builders::ExperimentTemplateBuilder {
        crate::types::builders::ExperimentTemplateBuilder::default()
    }
}

/// A builder for [`ExperimentTemplate`](crate::types::ExperimentTemplate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExperimentTemplateBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) targets: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTemplateTarget>>,
    pub(crate) actions: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTemplateAction>>,
    pub(crate) stop_conditions: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateStopCondition>>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) log_configuration: ::std::option::Option<crate::types::ExperimentTemplateLogConfiguration>,
    pub(crate) experiment_options: ::std::option::Option<crate::types::ExperimentTemplateExperimentOptions>,
    pub(crate) target_account_configurations_count: ::std::option::Option<i64>,
}
impl ExperimentTemplateBuilder {
    /// <p>The ID of the experiment template.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the experiment template.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the experiment template.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the experiment template.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the experiment template.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the experiment template.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The description for the experiment template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the experiment template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for the experiment template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The targets for the experiment.</p>
    pub fn targets(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ExperimentTemplateTarget) -> Self {
        let mut hash_map = self.targets.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.targets = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The targets for the experiment.</p>
    pub fn set_targets(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTemplateTarget>>,
    ) -> Self {
        self.targets = input;
        self
    }
    /// <p>The targets for the experiment.</p>
    pub fn get_targets(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTemplateTarget>> {
        &self.targets
    }
    /// Adds a key-value pair to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions for the experiment.</p>
    pub fn actions(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ExperimentTemplateAction) -> Self {
        let mut hash_map = self.actions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.actions = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The actions for the experiment.</p>
    pub fn set_actions(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTemplateAction>>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// <p>The actions for the experiment.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTemplateAction>> {
        &self.actions
    }
    /// Appends an item to `stop_conditions`.
    ///
    /// To override the contents of this collection use [`set_stop_conditions`](Self::set_stop_conditions).
    ///
    /// <p>The stop conditions for the experiment.</p>
    pub fn stop_conditions(mut self, input: crate::types::ExperimentTemplateStopCondition) -> Self {
        let mut v = self.stop_conditions.unwrap_or_default();
        v.push(input);
        self.stop_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The stop conditions for the experiment.</p>
    pub fn set_stop_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateStopCondition>>) -> Self {
        self.stop_conditions = input;
        self
    }
    /// <p>The stop conditions for the experiment.</p>
    pub fn get_stop_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExperimentTemplateStopCondition>> {
        &self.stop_conditions
    }
    /// <p>The time the experiment template was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the experiment template was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the experiment template was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time the experiment template was last updated.</p>
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the experiment template was last updated.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The time the experiment template was last updated.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the experiment template.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags for the experiment template.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags for the experiment template.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The configuration for experiment logging.</p>
    pub fn log_configuration(mut self, input: crate::types::ExperimentTemplateLogConfiguration) -> Self {
        self.log_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for experiment logging.</p>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::ExperimentTemplateLogConfiguration>) -> Self {
        self.log_configuration = input;
        self
    }
    /// <p>The configuration for experiment logging.</p>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::ExperimentTemplateLogConfiguration> {
        &self.log_configuration
    }
    /// <p>The experiment options for an experiment template.</p>
    pub fn experiment_options(mut self, input: crate::types::ExperimentTemplateExperimentOptions) -> Self {
        self.experiment_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The experiment options for an experiment template.</p>
    pub fn set_experiment_options(mut self, input: ::std::option::Option<crate::types::ExperimentTemplateExperimentOptions>) -> Self {
        self.experiment_options = input;
        self
    }
    /// <p>The experiment options for an experiment template.</p>
    pub fn get_experiment_options(&self) -> &::std::option::Option<crate::types::ExperimentTemplateExperimentOptions> {
        &self.experiment_options
    }
    /// <p>The count of target account configurations for the experiment template.</p>
    pub fn target_account_configurations_count(mut self, input: i64) -> Self {
        self.target_account_configurations_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The count of target account configurations for the experiment template.</p>
    pub fn set_target_account_configurations_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.target_account_configurations_count = input;
        self
    }
    /// <p>The count of target account configurations for the experiment template.</p>
    pub fn get_target_account_configurations_count(&self) -> &::std::option::Option<i64> {
        &self.target_account_configurations_count
    }
    /// Consumes the builder and constructs a [`ExperimentTemplate`](crate::types::ExperimentTemplate).
    pub fn build(self) -> crate::types::ExperimentTemplate {
        crate::types::ExperimentTemplate {
            id: self.id,
            arn: self.arn,
            description: self.description,
            targets: self.targets,
            actions: self.actions,
            stop_conditions: self.stop_conditions,
            creation_time: self.creation_time,
            last_update_time: self.last_update_time,
            role_arn: self.role_arn,
            tags: self.tags,
            log_configuration: self.log_configuration,
            experiment_options: self.experiment_options,
            target_account_configurations_count: self.target_account_configurations_count,
        }
    }
}
