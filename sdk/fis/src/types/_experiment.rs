// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an experiment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Experiment {
    /// <p>The ID of the experiment.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the experiment template.</p>
    pub experiment_template_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The state of the experiment.</p>
    pub state: ::std::option::Option<crate::types::ExperimentState>,
    /// <p>The targets for the experiment.</p>
    pub targets: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTarget>>,
    /// <p>The actions for the experiment.</p>
    pub actions: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentAction>>,
    /// <p>The stop conditions for the experiment.</p>
    pub stop_conditions: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentStopCondition>>,
    /// <p>The time that the experiment was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the experiment started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the experiment ended.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The tags for the experiment.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The configuration for experiment logging.</p>
    pub log_configuration: ::std::option::Option<crate::types::ExperimentLogConfiguration>,
}
impl Experiment {
    /// <p>The ID of the experiment.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the experiment template.</p>
    pub fn experiment_template_id(&self) -> ::std::option::Option<&str> {
        self.experiment_template_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The state of the experiment.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ExperimentState> {
        self.state.as_ref()
    }
    /// <p>The targets for the experiment.</p>
    pub fn targets(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ExperimentTarget>> {
        self.targets.as_ref()
    }
    /// <p>The actions for the experiment.</p>
    pub fn actions(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ExperimentAction>> {
        self.actions.as_ref()
    }
    /// <p>The stop conditions for the experiment.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stop_conditions.is_none()`.
    pub fn stop_conditions(&self) -> &[crate::types::ExperimentStopCondition] {
        self.stop_conditions.as_deref().unwrap_or_default()
    }
    /// <p>The time that the experiment was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time that the experiment started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time that the experiment ended.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The tags for the experiment.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The configuration for experiment logging.</p>
    pub fn log_configuration(&self) -> ::std::option::Option<&crate::types::ExperimentLogConfiguration> {
        self.log_configuration.as_ref()
    }
}
impl Experiment {
    /// Creates a new builder-style object to manufacture [`Experiment`](crate::types::Experiment).
    pub fn builder() -> crate::types::builders::ExperimentBuilder {
        crate::types::builders::ExperimentBuilder::default()
    }
}

/// A builder for [`Experiment`](crate::types::Experiment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExperimentBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) experiment_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::ExperimentState>,
    pub(crate) targets: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTarget>>,
    pub(crate) actions: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentAction>>,
    pub(crate) stop_conditions: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentStopCondition>>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) log_configuration: ::std::option::Option<crate::types::ExperimentLogConfiguration>,
}
impl ExperimentBuilder {
    /// <p>The ID of the experiment.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the experiment.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the experiment.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ID of the experiment template.</p>
    pub fn experiment_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.experiment_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the experiment template.</p>
    pub fn set_experiment_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.experiment_template_id = input;
        self
    }
    /// <p>The ID of the experiment template.</p>
    pub fn get_experiment_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.experiment_template_id
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The state of the experiment.</p>
    pub fn state(mut self, input: crate::types::ExperimentState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the experiment.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ExperimentState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the experiment.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ExperimentState> {
        &self.state
    }
    /// Adds a key-value pair to `targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The targets for the experiment.</p>
    pub fn targets(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ExperimentTarget) -> Self {
        let mut hash_map = self.targets.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.targets = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The targets for the experiment.</p>
    pub fn set_targets(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTarget>>,
    ) -> Self {
        self.targets = input;
        self
    }
    /// <p>The targets for the experiment.</p>
    pub fn get_targets(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentTarget>> {
        &self.targets
    }
    /// Adds a key-value pair to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions for the experiment.</p>
    pub fn actions(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ExperimentAction) -> Self {
        let mut hash_map = self.actions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.actions = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The actions for the experiment.</p>
    pub fn set_actions(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentAction>>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// <p>The actions for the experiment.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ExperimentAction>> {
        &self.actions
    }
    /// Appends an item to `stop_conditions`.
    ///
    /// To override the contents of this collection use [`set_stop_conditions`](Self::set_stop_conditions).
    ///
    /// <p>The stop conditions for the experiment.</p>
    pub fn stop_conditions(mut self, input: crate::types::ExperimentStopCondition) -> Self {
        let mut v = self.stop_conditions.unwrap_or_default();
        v.push(input);
        self.stop_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The stop conditions for the experiment.</p>
    pub fn set_stop_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExperimentStopCondition>>) -> Self {
        self.stop_conditions = input;
        self
    }
    /// <p>The stop conditions for the experiment.</p>
    pub fn get_stop_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExperimentStopCondition>> {
        &self.stop_conditions
    }
    /// <p>The time that the experiment was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the experiment was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the experiment was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time that the experiment started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the experiment started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time that the experiment started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time that the experiment ended.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the experiment ended.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time that the experiment ended.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the experiment.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags for the experiment.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags for the experiment.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The configuration for experiment logging.</p>
    pub fn log_configuration(mut self, input: crate::types::ExperimentLogConfiguration) -> Self {
        self.log_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for experiment logging.</p>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::ExperimentLogConfiguration>) -> Self {
        self.log_configuration = input;
        self
    }
    /// <p>The configuration for experiment logging.</p>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::ExperimentLogConfiguration> {
        &self.log_configuration
    }
    /// Consumes the builder and constructs a [`Experiment`](crate::types::Experiment).
    pub fn build(self) -> crate::types::Experiment {
        crate::types::Experiment {
            id: self.id,
            experiment_template_id: self.experiment_template_id,
            role_arn: self.role_arn,
            state: self.state,
            targets: self.targets,
            actions: self.actions,
            stop_conditions: self.stop_conditions,
            creation_time: self.creation_time,
            start_time: self.start_time,
            end_time: self.end_time,
            tags: self.tags,
            log_configuration: self.log_configuration,
        }
    }
}
