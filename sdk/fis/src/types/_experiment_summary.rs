// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summary of an experiment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExperimentSummary {
    /// <p>The ID of the experiment.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The ID of the experiment template.</p>
    #[doc(hidden)]
    pub experiment_template_id: std::option::Option<std::string::String>,
    /// <p>The state of the experiment.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ExperimentState>,
    /// <p>The time that the experiment was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The tags for the experiment.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ExperimentSummary {
    /// <p>The ID of the experiment.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the experiment template.</p>
    pub fn experiment_template_id(&self) -> std::option::Option<&str> {
        self.experiment_template_id.as_deref()
    }
    /// <p>The state of the experiment.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ExperimentState> {
        self.state.as_ref()
    }
    /// <p>The time that the experiment was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The tags for the experiment.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl ExperimentSummary {
    /// Creates a new builder-style object to manufacture [`ExperimentSummary`](crate::types::ExperimentSummary).
    pub fn builder() -> crate::types::builders::ExperimentSummaryBuilder {
        crate::types::builders::ExperimentSummaryBuilder::default()
    }
}

/// A builder for [`ExperimentSummary`](crate::types::ExperimentSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExperimentSummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) experiment_template_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ExperimentState>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ExperimentSummaryBuilder {
    /// <p>The ID of the experiment.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the experiment.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the experiment template.</p>
    pub fn experiment_template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.experiment_template_id = Some(input.into());
        self
    }
    /// <p>The ID of the experiment template.</p>
    pub fn set_experiment_template_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.experiment_template_id = input;
        self
    }
    /// <p>The state of the experiment.</p>
    pub fn state(mut self, input: crate::types::ExperimentState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the experiment.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::ExperimentState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The time that the experiment was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time that the experiment was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the experiment.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags for the experiment.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`ExperimentSummary`](crate::types::ExperimentSummary).
    pub fn build(self) -> crate::types::ExperimentSummary {
        crate::types::ExperimentSummary {
            id: self.id,
            experiment_template_id: self.experiment_template_id,
            state: self.state,
            creation_time: self.creation_time,
            tags: self.tags,
        }
    }
}
