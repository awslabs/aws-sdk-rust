// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration for experiment logging.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateExperimentTemplateLogConfigurationInput {
    /// <p>The configuration for experiment logging to Amazon CloudWatch Logs.</p>
    pub cloud_watch_logs_configuration: ::std::option::Option<crate::types::ExperimentTemplateCloudWatchLogsLogConfigurationInput>,
    /// <p>The configuration for experiment logging to Amazon S3.</p>
    pub s3_configuration: ::std::option::Option<crate::types::ExperimentTemplateS3LogConfigurationInput>,
    /// <p>The schema version.</p>
    pub log_schema_version: i32,
}
impl CreateExperimentTemplateLogConfigurationInput {
    /// <p>The configuration for experiment logging to Amazon CloudWatch Logs.</p>
    pub fn cloud_watch_logs_configuration(&self) -> ::std::option::Option<&crate::types::ExperimentTemplateCloudWatchLogsLogConfigurationInput> {
        self.cloud_watch_logs_configuration.as_ref()
    }
    /// <p>The configuration for experiment logging to Amazon S3.</p>
    pub fn s3_configuration(&self) -> ::std::option::Option<&crate::types::ExperimentTemplateS3LogConfigurationInput> {
        self.s3_configuration.as_ref()
    }
    /// <p>The schema version.</p>
    pub fn log_schema_version(&self) -> i32 {
        self.log_schema_version
    }
}
impl CreateExperimentTemplateLogConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateExperimentTemplateLogConfigurationInput`](crate::types::CreateExperimentTemplateLogConfigurationInput).
    pub fn builder() -> crate::types::builders::CreateExperimentTemplateLogConfigurationInputBuilder {
        crate::types::builders::CreateExperimentTemplateLogConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateExperimentTemplateLogConfigurationInput`](crate::types::CreateExperimentTemplateLogConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateExperimentTemplateLogConfigurationInputBuilder {
    pub(crate) cloud_watch_logs_configuration: ::std::option::Option<crate::types::ExperimentTemplateCloudWatchLogsLogConfigurationInput>,
    pub(crate) s3_configuration: ::std::option::Option<crate::types::ExperimentTemplateS3LogConfigurationInput>,
    pub(crate) log_schema_version: ::std::option::Option<i32>,
}
impl CreateExperimentTemplateLogConfigurationInputBuilder {
    /// <p>The configuration for experiment logging to Amazon CloudWatch Logs.</p>
    pub fn cloud_watch_logs_configuration(mut self, input: crate::types::ExperimentTemplateCloudWatchLogsLogConfigurationInput) -> Self {
        self.cloud_watch_logs_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for experiment logging to Amazon CloudWatch Logs.</p>
    pub fn set_cloud_watch_logs_configuration(
        mut self,
        input: ::std::option::Option<crate::types::ExperimentTemplateCloudWatchLogsLogConfigurationInput>,
    ) -> Self {
        self.cloud_watch_logs_configuration = input;
        self
    }
    /// <p>The configuration for experiment logging to Amazon CloudWatch Logs.</p>
    pub fn get_cloud_watch_logs_configuration(&self) -> &::std::option::Option<crate::types::ExperimentTemplateCloudWatchLogsLogConfigurationInput> {
        &self.cloud_watch_logs_configuration
    }
    /// <p>The configuration for experiment logging to Amazon S3.</p>
    pub fn s3_configuration(mut self, input: crate::types::ExperimentTemplateS3LogConfigurationInput) -> Self {
        self.s3_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for experiment logging to Amazon S3.</p>
    pub fn set_s3_configuration(mut self, input: ::std::option::Option<crate::types::ExperimentTemplateS3LogConfigurationInput>) -> Self {
        self.s3_configuration = input;
        self
    }
    /// <p>The configuration for experiment logging to Amazon S3.</p>
    pub fn get_s3_configuration(&self) -> &::std::option::Option<crate::types::ExperimentTemplateS3LogConfigurationInput> {
        &self.s3_configuration
    }
    /// <p>The schema version.</p>
    /// This field is required.
    pub fn log_schema_version(mut self, input: i32) -> Self {
        self.log_schema_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schema version.</p>
    pub fn set_log_schema_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.log_schema_version = input;
        self
    }
    /// <p>The schema version.</p>
    pub fn get_log_schema_version(&self) -> &::std::option::Option<i32> {
        &self.log_schema_version
    }
    /// Consumes the builder and constructs a [`CreateExperimentTemplateLogConfigurationInput`](crate::types::CreateExperimentTemplateLogConfigurationInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`log_schema_version`](crate::types::builders::CreateExperimentTemplateLogConfigurationInputBuilder::log_schema_version)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::CreateExperimentTemplateLogConfigurationInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CreateExperimentTemplateLogConfigurationInput {
            cloud_watch_logs_configuration: self.cloud_watch_logs_configuration,
            s3_configuration: self.s3_configuration,
            log_schema_version: self.log_schema_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "log_schema_version",
                    "log_schema_version was not specified but it is required when building CreateExperimentTemplateLogConfigurationInput",
                )
            })?,
        })
    }
}
