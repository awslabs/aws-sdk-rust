// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    #[doc(hidden)]
    pub experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
    _request_id: Option<String>,
}
impl UpdateExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    pub fn experiment_template(&self) -> std::option::Option<&crate::model::ExperimentTemplate> {
        self.experiment_template.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateExperimentTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateExperimentTemplateOutput {
    /// Creates a new builder-style object to manufacture [`UpdateExperimentTemplateOutput`](crate::output::UpdateExperimentTemplateOutput).
    pub fn builder() -> crate::output::update_experiment_template_output::Builder {
        crate::output::update_experiment_template_output::Builder::default()
    }
}

/// See [`UpdateExperimentTemplateOutput`](crate::output::UpdateExperimentTemplateOutput).
pub mod update_experiment_template_output {

    /// A builder for [`UpdateExperimentTemplateOutput`](crate::output::UpdateExperimentTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the experiment template.</p>
        pub fn experiment_template(mut self, input: crate::model::ExperimentTemplate) -> Self {
            self.experiment_template = Some(input);
            self
        }
        /// <p>Information about the experiment template.</p>
        pub fn set_experiment_template(
            mut self,
            input: std::option::Option<crate::model::ExperimentTemplate>,
        ) -> Self {
            self.experiment_template = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateExperimentTemplateOutput`](crate::output::UpdateExperimentTemplateOutput).
        pub fn build(self) -> crate::output::UpdateExperimentTemplateOutput {
            crate::output::UpdateExperimentTemplateOutput {
                experiment_template: self.experiment_template,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopExperimentOutput {
    /// <p>Information about the experiment.</p>
    #[doc(hidden)]
    pub experiment: std::option::Option<crate::model::Experiment>,
    _request_id: Option<String>,
}
impl StopExperimentOutput {
    /// <p>Information about the experiment.</p>
    pub fn experiment(&self) -> std::option::Option<&crate::model::Experiment> {
        self.experiment.as_ref()
    }
}
impl aws_http::request_id::RequestId for StopExperimentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StopExperimentOutput {
    /// Creates a new builder-style object to manufacture [`StopExperimentOutput`](crate::output::StopExperimentOutput).
    pub fn builder() -> crate::output::stop_experiment_output::Builder {
        crate::output::stop_experiment_output::Builder::default()
    }
}

/// See [`StopExperimentOutput`](crate::output::StopExperimentOutput).
pub mod stop_experiment_output {

    /// A builder for [`StopExperimentOutput`](crate::output::StopExperimentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment: std::option::Option<crate::model::Experiment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the experiment.</p>
        pub fn experiment(mut self, input: crate::model::Experiment) -> Self {
            self.experiment = Some(input);
            self
        }
        /// <p>Information about the experiment.</p>
        pub fn set_experiment(
            mut self,
            input: std::option::Option<crate::model::Experiment>,
        ) -> Self {
            self.experiment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopExperimentOutput`](crate::output::StopExperimentOutput).
        pub fn build(self) -> crate::output::StopExperimentOutput {
            crate::output::StopExperimentOutput {
                experiment: self.experiment,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartExperimentOutput {
    /// <p>Information about the experiment.</p>
    #[doc(hidden)]
    pub experiment: std::option::Option<crate::model::Experiment>,
    _request_id: Option<String>,
}
impl StartExperimentOutput {
    /// <p>Information about the experiment.</p>
    pub fn experiment(&self) -> std::option::Option<&crate::model::Experiment> {
        self.experiment.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartExperimentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartExperimentOutput {
    /// Creates a new builder-style object to manufacture [`StartExperimentOutput`](crate::output::StartExperimentOutput).
    pub fn builder() -> crate::output::start_experiment_output::Builder {
        crate::output::start_experiment_output::Builder::default()
    }
}

/// See [`StartExperimentOutput`](crate::output::StartExperimentOutput).
pub mod start_experiment_output {

    /// A builder for [`StartExperimentOutput`](crate::output::StartExperimentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment: std::option::Option<crate::model::Experiment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the experiment.</p>
        pub fn experiment(mut self, input: crate::model::Experiment) -> Self {
            self.experiment = Some(input);
            self
        }
        /// <p>Information about the experiment.</p>
        pub fn set_experiment(
            mut self,
            input: std::option::Option<crate::model::Experiment>,
        ) -> Self {
            self.experiment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartExperimentOutput`](crate::output::StartExperimentOutput).
        pub fn build(self) -> crate::output::StartExperimentOutput {
            crate::output::StartExperimentOutput {
                experiment: self.experiment,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTargetResourceTypesOutput {
    /// <p>The target resource types.</p>
    #[doc(hidden)]
    pub target_resource_types:
        std::option::Option<std::vec::Vec<crate::model::TargetResourceTypeSummary>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListTargetResourceTypesOutput {
    /// <p>The target resource types.</p>
    pub fn target_resource_types(
        &self,
    ) -> std::option::Option<&[crate::model::TargetResourceTypeSummary]> {
        self.target_resource_types.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTargetResourceTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTargetResourceTypesOutput {
    /// Creates a new builder-style object to manufacture [`ListTargetResourceTypesOutput`](crate::output::ListTargetResourceTypesOutput).
    pub fn builder() -> crate::output::list_target_resource_types_output::Builder {
        crate::output::list_target_resource_types_output::Builder::default()
    }
}

/// See [`ListTargetResourceTypesOutput`](crate::output::ListTargetResourceTypesOutput).
pub mod list_target_resource_types_output {

    /// A builder for [`ListTargetResourceTypesOutput`](crate::output::ListTargetResourceTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) target_resource_types:
            std::option::Option<std::vec::Vec<crate::model::TargetResourceTypeSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `target_resource_types`.
        ///
        /// To override the contents of this collection use [`set_target_resource_types`](Self::set_target_resource_types).
        ///
        /// <p>The target resource types.</p>
        pub fn target_resource_types(
            mut self,
            input: crate::model::TargetResourceTypeSummary,
        ) -> Self {
            let mut v = self.target_resource_types.unwrap_or_default();
            v.push(input);
            self.target_resource_types = Some(v);
            self
        }
        /// <p>The target resource types.</p>
        pub fn set_target_resource_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TargetResourceTypeSummary>>,
        ) -> Self {
            self.target_resource_types = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTargetResourceTypesOutput`](crate::output::ListTargetResourceTypesOutput).
        pub fn build(self) -> crate::output::ListTargetResourceTypesOutput {
            crate::output::ListTargetResourceTypesOutput {
                target_resource_types: self.target_resource_types,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags for the resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags for the resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags for the resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags for the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListExperimentTemplatesOutput {
    /// <p>The experiment templates.</p>
    #[doc(hidden)]
    pub experiment_templates:
        std::option::Option<std::vec::Vec<crate::model::ExperimentTemplateSummary>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListExperimentTemplatesOutput {
    /// <p>The experiment templates.</p>
    pub fn experiment_templates(
        &self,
    ) -> std::option::Option<&[crate::model::ExperimentTemplateSummary]> {
        self.experiment_templates.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListExperimentTemplatesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListExperimentTemplatesOutput {
    /// Creates a new builder-style object to manufacture [`ListExperimentTemplatesOutput`](crate::output::ListExperimentTemplatesOutput).
    pub fn builder() -> crate::output::list_experiment_templates_output::Builder {
        crate::output::list_experiment_templates_output::Builder::default()
    }
}

/// See [`ListExperimentTemplatesOutput`](crate::output::ListExperimentTemplatesOutput).
pub mod list_experiment_templates_output {

    /// A builder for [`ListExperimentTemplatesOutput`](crate::output::ListExperimentTemplatesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment_templates:
            std::option::Option<std::vec::Vec<crate::model::ExperimentTemplateSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `experiment_templates`.
        ///
        /// To override the contents of this collection use [`set_experiment_templates`](Self::set_experiment_templates).
        ///
        /// <p>The experiment templates.</p>
        pub fn experiment_templates(
            mut self,
            input: crate::model::ExperimentTemplateSummary,
        ) -> Self {
            let mut v = self.experiment_templates.unwrap_or_default();
            v.push(input);
            self.experiment_templates = Some(v);
            self
        }
        /// <p>The experiment templates.</p>
        pub fn set_experiment_templates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExperimentTemplateSummary>>,
        ) -> Self {
            self.experiment_templates = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListExperimentTemplatesOutput`](crate::output::ListExperimentTemplatesOutput).
        pub fn build(self) -> crate::output::ListExperimentTemplatesOutput {
            crate::output::ListExperimentTemplatesOutput {
                experiment_templates: self.experiment_templates,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListExperimentsOutput {
    /// <p>The experiments.</p>
    #[doc(hidden)]
    pub experiments: std::option::Option<std::vec::Vec<crate::model::ExperimentSummary>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListExperimentsOutput {
    /// <p>The experiments.</p>
    pub fn experiments(&self) -> std::option::Option<&[crate::model::ExperimentSummary]> {
        self.experiments.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListExperimentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListExperimentsOutput {
    /// Creates a new builder-style object to manufacture [`ListExperimentsOutput`](crate::output::ListExperimentsOutput).
    pub fn builder() -> crate::output::list_experiments_output::Builder {
        crate::output::list_experiments_output::Builder::default()
    }
}

/// See [`ListExperimentsOutput`](crate::output::ListExperimentsOutput).
pub mod list_experiments_output {

    /// A builder for [`ListExperimentsOutput`](crate::output::ListExperimentsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiments: std::option::Option<std::vec::Vec<crate::model::ExperimentSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `experiments`.
        ///
        /// To override the contents of this collection use [`set_experiments`](Self::set_experiments).
        ///
        /// <p>The experiments.</p>
        pub fn experiments(mut self, input: crate::model::ExperimentSummary) -> Self {
            let mut v = self.experiments.unwrap_or_default();
            v.push(input);
            self.experiments = Some(v);
            self
        }
        /// <p>The experiments.</p>
        pub fn set_experiments(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExperimentSummary>>,
        ) -> Self {
            self.experiments = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListExperimentsOutput`](crate::output::ListExperimentsOutput).
        pub fn build(self) -> crate::output::ListExperimentsOutput {
            crate::output::ListExperimentsOutput {
                experiments: self.experiments,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListActionsOutput {
    /// <p>The actions.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<std::vec::Vec<crate::model::ActionSummary>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListActionsOutput {
    /// <p>The actions.</p>
    pub fn actions(&self) -> std::option::Option<&[crate::model::ActionSummary]> {
        self.actions.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListActionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListActionsOutput {
    /// Creates a new builder-style object to manufacture [`ListActionsOutput`](crate::output::ListActionsOutput).
    pub fn builder() -> crate::output::list_actions_output::Builder {
        crate::output::list_actions_output::Builder::default()
    }
}

/// See [`ListActionsOutput`](crate::output::ListActionsOutput).
pub mod list_actions_output {

    /// A builder for [`ListActionsOutput`](crate::output::ListActionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) actions: std::option::Option<std::vec::Vec<crate::model::ActionSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `actions`.
        ///
        /// To override the contents of this collection use [`set_actions`](Self::set_actions).
        ///
        /// <p>The actions.</p>
        pub fn actions(mut self, input: crate::model::ActionSummary) -> Self {
            let mut v = self.actions.unwrap_or_default();
            v.push(input);
            self.actions = Some(v);
            self
        }
        /// <p>The actions.</p>
        pub fn set_actions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ActionSummary>>,
        ) -> Self {
            self.actions = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListActionsOutput`](crate::output::ListActionsOutput).
        pub fn build(self) -> crate::output::ListActionsOutput {
            crate::output::ListActionsOutput {
                actions: self.actions,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTargetResourceTypeOutput {
    /// <p>Information about the resource type.</p>
    #[doc(hidden)]
    pub target_resource_type: std::option::Option<crate::model::TargetResourceType>,
    _request_id: Option<String>,
}
impl GetTargetResourceTypeOutput {
    /// <p>Information about the resource type.</p>
    pub fn target_resource_type(&self) -> std::option::Option<&crate::model::TargetResourceType> {
        self.target_resource_type.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetTargetResourceTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTargetResourceTypeOutput {
    /// Creates a new builder-style object to manufacture [`GetTargetResourceTypeOutput`](crate::output::GetTargetResourceTypeOutput).
    pub fn builder() -> crate::output::get_target_resource_type_output::Builder {
        crate::output::get_target_resource_type_output::Builder::default()
    }
}

/// See [`GetTargetResourceTypeOutput`](crate::output::GetTargetResourceTypeOutput).
pub mod get_target_resource_type_output {

    /// A builder for [`GetTargetResourceTypeOutput`](crate::output::GetTargetResourceTypeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) target_resource_type: std::option::Option<crate::model::TargetResourceType>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the resource type.</p>
        pub fn target_resource_type(mut self, input: crate::model::TargetResourceType) -> Self {
            self.target_resource_type = Some(input);
            self
        }
        /// <p>Information about the resource type.</p>
        pub fn set_target_resource_type(
            mut self,
            input: std::option::Option<crate::model::TargetResourceType>,
        ) -> Self {
            self.target_resource_type = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTargetResourceTypeOutput`](crate::output::GetTargetResourceTypeOutput).
        pub fn build(self) -> crate::output::GetTargetResourceTypeOutput {
            crate::output::GetTargetResourceTypeOutput {
                target_resource_type: self.target_resource_type,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    #[doc(hidden)]
    pub experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
    _request_id: Option<String>,
}
impl GetExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    pub fn experiment_template(&self) -> std::option::Option<&crate::model::ExperimentTemplate> {
        self.experiment_template.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetExperimentTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetExperimentTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetExperimentTemplateOutput`](crate::output::GetExperimentTemplateOutput).
    pub fn builder() -> crate::output::get_experiment_template_output::Builder {
        crate::output::get_experiment_template_output::Builder::default()
    }
}

/// See [`GetExperimentTemplateOutput`](crate::output::GetExperimentTemplateOutput).
pub mod get_experiment_template_output {

    /// A builder for [`GetExperimentTemplateOutput`](crate::output::GetExperimentTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the experiment template.</p>
        pub fn experiment_template(mut self, input: crate::model::ExperimentTemplate) -> Self {
            self.experiment_template = Some(input);
            self
        }
        /// <p>Information about the experiment template.</p>
        pub fn set_experiment_template(
            mut self,
            input: std::option::Option<crate::model::ExperimentTemplate>,
        ) -> Self {
            self.experiment_template = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetExperimentTemplateOutput`](crate::output::GetExperimentTemplateOutput).
        pub fn build(self) -> crate::output::GetExperimentTemplateOutput {
            crate::output::GetExperimentTemplateOutput {
                experiment_template: self.experiment_template,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetExperimentOutput {
    /// <p>Information about the experiment.</p>
    #[doc(hidden)]
    pub experiment: std::option::Option<crate::model::Experiment>,
    _request_id: Option<String>,
}
impl GetExperimentOutput {
    /// <p>Information about the experiment.</p>
    pub fn experiment(&self) -> std::option::Option<&crate::model::Experiment> {
        self.experiment.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetExperimentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetExperimentOutput {
    /// Creates a new builder-style object to manufacture [`GetExperimentOutput`](crate::output::GetExperimentOutput).
    pub fn builder() -> crate::output::get_experiment_output::Builder {
        crate::output::get_experiment_output::Builder::default()
    }
}

/// See [`GetExperimentOutput`](crate::output::GetExperimentOutput).
pub mod get_experiment_output {

    /// A builder for [`GetExperimentOutput`](crate::output::GetExperimentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment: std::option::Option<crate::model::Experiment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the experiment.</p>
        pub fn experiment(mut self, input: crate::model::Experiment) -> Self {
            self.experiment = Some(input);
            self
        }
        /// <p>Information about the experiment.</p>
        pub fn set_experiment(
            mut self,
            input: std::option::Option<crate::model::Experiment>,
        ) -> Self {
            self.experiment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetExperimentOutput`](crate::output::GetExperimentOutput).
        pub fn build(self) -> crate::output::GetExperimentOutput {
            crate::output::GetExperimentOutput {
                experiment: self.experiment,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetActionOutput {
    /// <p>Information about the action.</p>
    #[doc(hidden)]
    pub action: std::option::Option<crate::model::Action>,
    _request_id: Option<String>,
}
impl GetActionOutput {
    /// <p>Information about the action.</p>
    pub fn action(&self) -> std::option::Option<&crate::model::Action> {
        self.action.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetActionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetActionOutput {
    /// Creates a new builder-style object to manufacture [`GetActionOutput`](crate::output::GetActionOutput).
    pub fn builder() -> crate::output::get_action_output::Builder {
        crate::output::get_action_output::Builder::default()
    }
}

/// See [`GetActionOutput`](crate::output::GetActionOutput).
pub mod get_action_output {

    /// A builder for [`GetActionOutput`](crate::output::GetActionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) action: std::option::Option<crate::model::Action>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the action.</p>
        pub fn action(mut self, input: crate::model::Action) -> Self {
            self.action = Some(input);
            self
        }
        /// <p>Information about the action.</p>
        pub fn set_action(mut self, input: std::option::Option<crate::model::Action>) -> Self {
            self.action = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetActionOutput`](crate::output::GetActionOutput).
        pub fn build(self) -> crate::output::GetActionOutput {
            crate::output::GetActionOutput {
                action: self.action,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    #[doc(hidden)]
    pub experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
    _request_id: Option<String>,
}
impl DeleteExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    pub fn experiment_template(&self) -> std::option::Option<&crate::model::ExperimentTemplate> {
        self.experiment_template.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteExperimentTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteExperimentTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteExperimentTemplateOutput`](crate::output::DeleteExperimentTemplateOutput).
    pub fn builder() -> crate::output::delete_experiment_template_output::Builder {
        crate::output::delete_experiment_template_output::Builder::default()
    }
}

/// See [`DeleteExperimentTemplateOutput`](crate::output::DeleteExperimentTemplateOutput).
pub mod delete_experiment_template_output {

    /// A builder for [`DeleteExperimentTemplateOutput`](crate::output::DeleteExperimentTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the experiment template.</p>
        pub fn experiment_template(mut self, input: crate::model::ExperimentTemplate) -> Self {
            self.experiment_template = Some(input);
            self
        }
        /// <p>Information about the experiment template.</p>
        pub fn set_experiment_template(
            mut self,
            input: std::option::Option<crate::model::ExperimentTemplate>,
        ) -> Self {
            self.experiment_template = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteExperimentTemplateOutput`](crate::output::DeleteExperimentTemplateOutput).
        pub fn build(self) -> crate::output::DeleteExperimentTemplateOutput {
            crate::output::DeleteExperimentTemplateOutput {
                experiment_template: self.experiment_template,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    #[doc(hidden)]
    pub experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
    _request_id: Option<String>,
}
impl CreateExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    pub fn experiment_template(&self) -> std::option::Option<&crate::model::ExperimentTemplate> {
        self.experiment_template.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateExperimentTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateExperimentTemplateOutput {
    /// Creates a new builder-style object to manufacture [`CreateExperimentTemplateOutput`](crate::output::CreateExperimentTemplateOutput).
    pub fn builder() -> crate::output::create_experiment_template_output::Builder {
        crate::output::create_experiment_template_output::Builder::default()
    }
}

/// See [`CreateExperimentTemplateOutput`](crate::output::CreateExperimentTemplateOutput).
pub mod create_experiment_template_output {

    /// A builder for [`CreateExperimentTemplateOutput`](crate::output::CreateExperimentTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the experiment template.</p>
        pub fn experiment_template(mut self, input: crate::model::ExperimentTemplate) -> Self {
            self.experiment_template = Some(input);
            self
        }
        /// <p>Information about the experiment template.</p>
        pub fn set_experiment_template(
            mut self,
            input: std::option::Option<crate::model::ExperimentTemplate>,
        ) -> Self {
            self.experiment_template = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateExperimentTemplateOutput`](crate::output::CreateExperimentTemplateOutput).
        pub fn build(self) -> crate::output::CreateExperimentTemplateOutput {
            crate::output::CreateExperimentTemplateOutput {
                experiment_template: self.experiment_template,
                _request_id: self._request_id,
            }
        }
    }
}
