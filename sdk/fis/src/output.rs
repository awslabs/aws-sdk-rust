// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    pub experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
}
impl std::fmt::Debug for UpdateExperimentTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateExperimentTemplateOutput");
        formatter.field("experiment_template", &self.experiment_template);
        formatter.finish()
    }
}
/// See [`UpdateExperimentTemplateOutput`](crate::output::UpdateExperimentTemplateOutput)
pub mod update_experiment_template_output {
    /// A builder for [`UpdateExperimentTemplateOutput`](crate::output::UpdateExperimentTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
    }
    impl Builder {
        /// <p>Information about the experiment template.</p>
        pub fn experiment_template(mut self, input: crate::model::ExperimentTemplate) -> Self {
            self.experiment_template = Some(input);
            self
        }
        pub fn set_experiment_template(
            mut self,
            input: std::option::Option<crate::model::ExperimentTemplate>,
        ) -> Self {
            self.experiment_template = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateExperimentTemplateOutput`](crate::output::UpdateExperimentTemplateOutput)
        pub fn build(self) -> crate::output::UpdateExperimentTemplateOutput {
            crate::output::UpdateExperimentTemplateOutput {
                experiment_template: self.experiment_template,
            }
        }
    }
}
impl UpdateExperimentTemplateOutput {
    /// Creates a new builder-style object to manufacture [`UpdateExperimentTemplateOutput`](crate::output::UpdateExperimentTemplateOutput)
    pub fn builder() -> crate::output::update_experiment_template_output::Builder {
        crate::output::update_experiment_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopExperimentOutput {
    /// <p>Information about the experiment.</p>
    pub experiment: std::option::Option<crate::model::Experiment>,
}
impl std::fmt::Debug for StopExperimentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopExperimentOutput");
        formatter.field("experiment", &self.experiment);
        formatter.finish()
    }
}
/// See [`StopExperimentOutput`](crate::output::StopExperimentOutput)
pub mod stop_experiment_output {
    /// A builder for [`StopExperimentOutput`](crate::output::StopExperimentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment: std::option::Option<crate::model::Experiment>,
    }
    impl Builder {
        /// <p>Information about the experiment.</p>
        pub fn experiment(mut self, input: crate::model::Experiment) -> Self {
            self.experiment = Some(input);
            self
        }
        pub fn set_experiment(
            mut self,
            input: std::option::Option<crate::model::Experiment>,
        ) -> Self {
            self.experiment = input;
            self
        }
        /// Consumes the builder and constructs a [`StopExperimentOutput`](crate::output::StopExperimentOutput)
        pub fn build(self) -> crate::output::StopExperimentOutput {
            crate::output::StopExperimentOutput {
                experiment: self.experiment,
            }
        }
    }
}
impl StopExperimentOutput {
    /// Creates a new builder-style object to manufacture [`StopExperimentOutput`](crate::output::StopExperimentOutput)
    pub fn builder() -> crate::output::stop_experiment_output::Builder {
        crate::output::stop_experiment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartExperimentOutput {
    /// <p>Information about the experiment.</p>
    pub experiment: std::option::Option<crate::model::Experiment>,
}
impl std::fmt::Debug for StartExperimentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartExperimentOutput");
        formatter.field("experiment", &self.experiment);
        formatter.finish()
    }
}
/// See [`StartExperimentOutput`](crate::output::StartExperimentOutput)
pub mod start_experiment_output {
    /// A builder for [`StartExperimentOutput`](crate::output::StartExperimentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment: std::option::Option<crate::model::Experiment>,
    }
    impl Builder {
        /// <p>Information about the experiment.</p>
        pub fn experiment(mut self, input: crate::model::Experiment) -> Self {
            self.experiment = Some(input);
            self
        }
        pub fn set_experiment(
            mut self,
            input: std::option::Option<crate::model::Experiment>,
        ) -> Self {
            self.experiment = input;
            self
        }
        /// Consumes the builder and constructs a [`StartExperimentOutput`](crate::output::StartExperimentOutput)
        pub fn build(self) -> crate::output::StartExperimentOutput {
            crate::output::StartExperimentOutput {
                experiment: self.experiment,
            }
        }
    }
}
impl StartExperimentOutput {
    /// Creates a new builder-style object to manufacture [`StartExperimentOutput`](crate::output::StartExperimentOutput)
    pub fn builder() -> crate::output::start_experiment_output::Builder {
        crate::output::start_experiment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags for the resource.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListExperimentTemplatesOutput {
    /// <p>The experiment templates.</p>
    pub experiment_templates:
        std::option::Option<std::vec::Vec<crate::model::ExperimentTemplateSummary>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListExperimentTemplatesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListExperimentTemplatesOutput");
        formatter.field("experiment_templates", &self.experiment_templates);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListExperimentTemplatesOutput`](crate::output::ListExperimentTemplatesOutput)
pub mod list_experiment_templates_output {
    /// A builder for [`ListExperimentTemplatesOutput`](crate::output::ListExperimentTemplatesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment_templates:
            std::option::Option<std::vec::Vec<crate::model::ExperimentTemplateSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn experiment_templates(
            mut self,
            input: impl Into<crate::model::ExperimentTemplateSummary>,
        ) -> Self {
            let mut v = self.experiment_templates.unwrap_or_default();
            v.push(input.into());
            self.experiment_templates = Some(v);
            self
        }
        pub fn set_experiment_templates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExperimentTemplateSummary>>,
        ) -> Self {
            self.experiment_templates = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListExperimentTemplatesOutput`](crate::output::ListExperimentTemplatesOutput)
        pub fn build(self) -> crate::output::ListExperimentTemplatesOutput {
            crate::output::ListExperimentTemplatesOutput {
                experiment_templates: self.experiment_templates,
                next_token: self.next_token,
            }
        }
    }
}
impl ListExperimentTemplatesOutput {
    /// Creates a new builder-style object to manufacture [`ListExperimentTemplatesOutput`](crate::output::ListExperimentTemplatesOutput)
    pub fn builder() -> crate::output::list_experiment_templates_output::Builder {
        crate::output::list_experiment_templates_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListExperimentsOutput {
    /// <p>The experiments.</p>
    pub experiments: std::option::Option<std::vec::Vec<crate::model::ExperimentSummary>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListExperimentsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListExperimentsOutput");
        formatter.field("experiments", &self.experiments);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListExperimentsOutput`](crate::output::ListExperimentsOutput)
pub mod list_experiments_output {
    /// A builder for [`ListExperimentsOutput`](crate::output::ListExperimentsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiments: std::option::Option<std::vec::Vec<crate::model::ExperimentSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn experiments(mut self, input: impl Into<crate::model::ExperimentSummary>) -> Self {
            let mut v = self.experiments.unwrap_or_default();
            v.push(input.into());
            self.experiments = Some(v);
            self
        }
        pub fn set_experiments(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExperimentSummary>>,
        ) -> Self {
            self.experiments = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListExperimentsOutput`](crate::output::ListExperimentsOutput)
        pub fn build(self) -> crate::output::ListExperimentsOutput {
            crate::output::ListExperimentsOutput {
                experiments: self.experiments,
                next_token: self.next_token,
            }
        }
    }
}
impl ListExperimentsOutput {
    /// Creates a new builder-style object to manufacture [`ListExperimentsOutput`](crate::output::ListExperimentsOutput)
    pub fn builder() -> crate::output::list_experiments_output::Builder {
        crate::output::list_experiments_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListActionsOutput {
    /// <p>The actions.</p>
    pub actions: std::option::Option<std::vec::Vec<crate::model::ActionSummary>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListActionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListActionsOutput");
        formatter.field("actions", &self.actions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListActionsOutput`](crate::output::ListActionsOutput)
pub mod list_actions_output {
    /// A builder for [`ListActionsOutput`](crate::output::ListActionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) actions: std::option::Option<std::vec::Vec<crate::model::ActionSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn actions(mut self, input: impl Into<crate::model::ActionSummary>) -> Self {
            let mut v = self.actions.unwrap_or_default();
            v.push(input.into());
            self.actions = Some(v);
            self
        }
        pub fn set_actions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ActionSummary>>,
        ) -> Self {
            self.actions = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListActionsOutput`](crate::output::ListActionsOutput)
        pub fn build(self) -> crate::output::ListActionsOutput {
            crate::output::ListActionsOutput {
                actions: self.actions,
                next_token: self.next_token,
            }
        }
    }
}
impl ListActionsOutput {
    /// Creates a new builder-style object to manufacture [`ListActionsOutput`](crate::output::ListActionsOutput)
    pub fn builder() -> crate::output::list_actions_output::Builder {
        crate::output::list_actions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    pub experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
}
impl std::fmt::Debug for GetExperimentTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetExperimentTemplateOutput");
        formatter.field("experiment_template", &self.experiment_template);
        formatter.finish()
    }
}
/// See [`GetExperimentTemplateOutput`](crate::output::GetExperimentTemplateOutput)
pub mod get_experiment_template_output {
    /// A builder for [`GetExperimentTemplateOutput`](crate::output::GetExperimentTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
    }
    impl Builder {
        /// <p>Information about the experiment template.</p>
        pub fn experiment_template(mut self, input: crate::model::ExperimentTemplate) -> Self {
            self.experiment_template = Some(input);
            self
        }
        pub fn set_experiment_template(
            mut self,
            input: std::option::Option<crate::model::ExperimentTemplate>,
        ) -> Self {
            self.experiment_template = input;
            self
        }
        /// Consumes the builder and constructs a [`GetExperimentTemplateOutput`](crate::output::GetExperimentTemplateOutput)
        pub fn build(self) -> crate::output::GetExperimentTemplateOutput {
            crate::output::GetExperimentTemplateOutput {
                experiment_template: self.experiment_template,
            }
        }
    }
}
impl GetExperimentTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetExperimentTemplateOutput`](crate::output::GetExperimentTemplateOutput)
    pub fn builder() -> crate::output::get_experiment_template_output::Builder {
        crate::output::get_experiment_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetExperimentOutput {
    /// <p>Information about the experiment.</p>
    pub experiment: std::option::Option<crate::model::Experiment>,
}
impl std::fmt::Debug for GetExperimentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetExperimentOutput");
        formatter.field("experiment", &self.experiment);
        formatter.finish()
    }
}
/// See [`GetExperimentOutput`](crate::output::GetExperimentOutput)
pub mod get_experiment_output {
    /// A builder for [`GetExperimentOutput`](crate::output::GetExperimentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment: std::option::Option<crate::model::Experiment>,
    }
    impl Builder {
        /// <p>Information about the experiment.</p>
        pub fn experiment(mut self, input: crate::model::Experiment) -> Self {
            self.experiment = Some(input);
            self
        }
        pub fn set_experiment(
            mut self,
            input: std::option::Option<crate::model::Experiment>,
        ) -> Self {
            self.experiment = input;
            self
        }
        /// Consumes the builder and constructs a [`GetExperimentOutput`](crate::output::GetExperimentOutput)
        pub fn build(self) -> crate::output::GetExperimentOutput {
            crate::output::GetExperimentOutput {
                experiment: self.experiment,
            }
        }
    }
}
impl GetExperimentOutput {
    /// Creates a new builder-style object to manufacture [`GetExperimentOutput`](crate::output::GetExperimentOutput)
    pub fn builder() -> crate::output::get_experiment_output::Builder {
        crate::output::get_experiment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetActionOutput {
    /// <p>Information about the action.</p>
    pub action: std::option::Option<crate::model::Action>,
}
impl std::fmt::Debug for GetActionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetActionOutput");
        formatter.field("action", &self.action);
        formatter.finish()
    }
}
/// See [`GetActionOutput`](crate::output::GetActionOutput)
pub mod get_action_output {
    /// A builder for [`GetActionOutput`](crate::output::GetActionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) action: std::option::Option<crate::model::Action>,
    }
    impl Builder {
        /// <p>Information about the action.</p>
        pub fn action(mut self, input: crate::model::Action) -> Self {
            self.action = Some(input);
            self
        }
        pub fn set_action(mut self, input: std::option::Option<crate::model::Action>) -> Self {
            self.action = input;
            self
        }
        /// Consumes the builder and constructs a [`GetActionOutput`](crate::output::GetActionOutput)
        pub fn build(self) -> crate::output::GetActionOutput {
            crate::output::GetActionOutput {
                action: self.action,
            }
        }
    }
}
impl GetActionOutput {
    /// Creates a new builder-style object to manufacture [`GetActionOutput`](crate::output::GetActionOutput)
    pub fn builder() -> crate::output::get_action_output::Builder {
        crate::output::get_action_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    pub experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
}
impl std::fmt::Debug for DeleteExperimentTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteExperimentTemplateOutput");
        formatter.field("experiment_template", &self.experiment_template);
        formatter.finish()
    }
}
/// See [`DeleteExperimentTemplateOutput`](crate::output::DeleteExperimentTemplateOutput)
pub mod delete_experiment_template_output {
    /// A builder for [`DeleteExperimentTemplateOutput`](crate::output::DeleteExperimentTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
    }
    impl Builder {
        /// <p>Information about the experiment template.</p>
        pub fn experiment_template(mut self, input: crate::model::ExperimentTemplate) -> Self {
            self.experiment_template = Some(input);
            self
        }
        pub fn set_experiment_template(
            mut self,
            input: std::option::Option<crate::model::ExperimentTemplate>,
        ) -> Self {
            self.experiment_template = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteExperimentTemplateOutput`](crate::output::DeleteExperimentTemplateOutput)
        pub fn build(self) -> crate::output::DeleteExperimentTemplateOutput {
            crate::output::DeleteExperimentTemplateOutput {
                experiment_template: self.experiment_template,
            }
        }
    }
}
impl DeleteExperimentTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteExperimentTemplateOutput`](crate::output::DeleteExperimentTemplateOutput)
    pub fn builder() -> crate::output::delete_experiment_template_output::Builder {
        crate::output::delete_experiment_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateExperimentTemplateOutput {
    /// <p>Information about the experiment template.</p>
    pub experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
}
impl std::fmt::Debug for CreateExperimentTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateExperimentTemplateOutput");
        formatter.field("experiment_template", &self.experiment_template);
        formatter.finish()
    }
}
/// See [`CreateExperimentTemplateOutput`](crate::output::CreateExperimentTemplateOutput)
pub mod create_experiment_template_output {
    /// A builder for [`CreateExperimentTemplateOutput`](crate::output::CreateExperimentTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) experiment_template: std::option::Option<crate::model::ExperimentTemplate>,
    }
    impl Builder {
        /// <p>Information about the experiment template.</p>
        pub fn experiment_template(mut self, input: crate::model::ExperimentTemplate) -> Self {
            self.experiment_template = Some(input);
            self
        }
        pub fn set_experiment_template(
            mut self,
            input: std::option::Option<crate::model::ExperimentTemplate>,
        ) -> Self {
            self.experiment_template = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateExperimentTemplateOutput`](crate::output::CreateExperimentTemplateOutput)
        pub fn build(self) -> crate::output::CreateExperimentTemplateOutput {
            crate::output::CreateExperimentTemplateOutput {
                experiment_template: self.experiment_template,
            }
        }
    }
}
impl CreateExperimentTemplateOutput {
    /// Creates a new builder-style object to manufacture [`CreateExperimentTemplateOutput`](crate::output::CreateExperimentTemplateOutput)
    pub fn builder() -> crate::output::create_experiment_template_output::Builder {
        crate::output::create_experiment_template_output::Builder::default()
    }
}
