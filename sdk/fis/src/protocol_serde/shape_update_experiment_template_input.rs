// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_experiment_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_experiment_template::UpdateExperimentTemplateInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.actions {
        #[allow(unused_mut)]
        let mut object_2 = object.key("actions").start_object();
        for (key_3, value_4) in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_5 = object_2.key(key_3.as_str()).start_object();
                crate::protocol_serde::shape_update_experiment_template_action_input_item::ser_update_experiment_template_action_input_item(&mut object_5, value_4)?;
                object_5.finish();
            }
        }
        object_2.finish();
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("logConfiguration").start_object();
        crate::protocol_serde::shape_update_experiment_template_log_configuration_input::ser_update_experiment_template_log_configuration_input(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.role_arn {
        object.key("roleArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.stop_conditions {
        let mut array_11 = object.key("stopConditions").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_update_experiment_template_stop_condition_input::ser_update_experiment_template_stop_condition_input(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.targets {
        #[allow(unused_mut)]
        let mut object_15 = object.key("targets").start_object();
        for (key_16, value_17) in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_18 = object_15.key(key_16.as_str()).start_object();
                crate::protocol_serde::shape_update_experiment_template_target_input::ser_update_experiment_template_target_input(&mut object_18, value_17)?;
                object_18.finish();
            }
        }
        object_15.finish();
    }
    Ok(())
}
