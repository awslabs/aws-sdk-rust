// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_experiment_template_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_experiment_template::CreateExperimentTemplateInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.actions {
        #[allow(unused_mut)]
        let mut object_2 = object.key("actions").start_object();
        for (key_3, value_4) in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_5 = object_2.key(key_3.as_str()).start_object();
                crate::protocol_serde::shape_create_experiment_template_action_input::ser_create_experiment_template_action_input(
                    &mut object_5,
                    value_4,
                )?;
                object_5.finish();
            }
        }
        object_2.finish();
    }
    if let Some(var_6) = &input.client_token {
        object.key("clientToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.description {
        object.key("description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("logConfiguration").start_object();
        crate::protocol_serde::shape_create_experiment_template_log_configuration_input::ser_create_experiment_template_log_configuration_input(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.role_arn {
        object.key("roleArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.stop_conditions {
        let mut array_12 = object.key("stopConditions").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_create_experiment_template_stop_condition_input::ser_create_experiment_template_stop_condition_input(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.tags {
        #[allow(unused_mut)]
        let mut object_16 = object.key("tags").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    if let Some(var_19) = &input.targets {
        #[allow(unused_mut)]
        let mut object_20 = object.key("targets").start_object();
        for (key_21, value_22) in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_23 = object_20.key(key_21.as_str()).start_object();
                crate::protocol_serde::shape_create_experiment_template_target_input::ser_create_experiment_template_target_input(
                    &mut object_23,
                    value_22,
                )?;
                object_23.finish();
            }
        }
        object_20.finish();
    }
    Ok(())
}
