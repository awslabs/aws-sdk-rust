// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_experiment_template_target_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateExperimentTemplateTargetInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("resourceType").string(input.resource_type.as_str());
    }
    if let Some(var_1) = &input.resource_arns {
        let mut array_2 = object.key("resourceArns").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.resource_tags {
        #[allow(unused_mut)]
        let mut object_5 = object.key("resourceTags").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.filters {
        let mut array_9 = object.key("filters").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_experiment_template_target_input_filter::ser_experiment_template_target_input_filter(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    {
        object.key("selectionMode").string(input.selection_mode.as_str());
    }
    if let Some(var_12) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_13 = object.key("parameters").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}
