// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The specified version does not match the version of the document.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>An unexpected error has occurred.</p>
    InternalFailureException(crate::error::InternalFailureException),
    /// <p>The request is not valid.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The specified combination of HTTP verb and URI is not supported.</p>
    MethodNotAllowedException(crate::error::MethodNotAllowedException),
    /// <p>The payload exceeds the maximum size allowed.</p>
    RequestEntityTooLargeException(crate::error::RequestEntityTooLargeException),
    /// <p>The specified resource does not exist.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The service is temporarily unavailable.</p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p>The rate exceeds the limit.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>You are not authorized to perform this operation.</p>
    UnauthorizedException(crate::error::UnauthorizedException),
    /// <p>The document encoding is not supported.</p>
    UnsupportedDocumentEncodingException(crate::error::UnsupportedDocumentEncodingException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::MethodNotAllowedException(inner) => inner.fmt(f),
            Error::RequestEntityTooLargeException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::UnsupportedDocumentEncodingException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteThingShadowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteThingShadowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteThingShadowError> for Error {
    fn from(err: crate::error::DeleteThingShadowError) -> Self {
        match err {
            crate::error::DeleteThingShadowError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteThingShadowError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteThingShadowError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteThingShadowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteThingShadowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteThingShadowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteThingShadowError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteThingShadowError::UnsupportedDocumentEncodingException(inner) => {
                Error::UnsupportedDocumentEncodingException(inner)
            }
            crate::error::DeleteThingShadowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRetainedMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRetainedMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRetainedMessageError> for Error {
    fn from(err: crate::error::GetRetainedMessageError) -> Self {
        match err {
            crate::error::GetRetainedMessageError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetRetainedMessageError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetRetainedMessageError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetRetainedMessageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetRetainedMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetRetainedMessageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetRetainedMessageError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetRetainedMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetThingShadowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetThingShadowError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetThingShadowError> for Error {
    fn from(err: crate::error::GetThingShadowError) -> Self {
        match err {
            crate::error::GetThingShadowError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetThingShadowError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetThingShadowError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetThingShadowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetThingShadowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetThingShadowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetThingShadowError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetThingShadowError::UnsupportedDocumentEncodingException(inner) => {
                Error::UnsupportedDocumentEncodingException(inner)
            }
            crate::error::GetThingShadowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNamedShadowsForThingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListNamedShadowsForThingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListNamedShadowsForThingError> for Error {
    fn from(err: crate::error::ListNamedShadowsForThingError) -> Self {
        match err {
            crate::error::ListNamedShadowsForThingError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListNamedShadowsForThingError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListNamedShadowsForThingError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::ListNamedShadowsForThingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListNamedShadowsForThingError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListNamedShadowsForThingError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListNamedShadowsForThingError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListNamedShadowsForThingError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRetainedMessagesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRetainedMessagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRetainedMessagesError> for Error {
    fn from(err: crate::error::ListRetainedMessagesError) -> Self {
        match err {
            crate::error::ListRetainedMessagesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListRetainedMessagesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListRetainedMessagesError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::ListRetainedMessagesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListRetainedMessagesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListRetainedMessagesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListRetainedMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PublishError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PublishError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PublishError> for Error {
    fn from(err: crate::error::PublishError) -> Self {
        match err {
            crate::error::PublishError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::PublishError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::PublishError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::PublishError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PublishError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::PublishError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateThingShadowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateThingShadowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateThingShadowError> for Error {
    fn from(err: crate::error::UpdateThingShadowError) -> Self {
        match err {
            crate::error::UpdateThingShadowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateThingShadowError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateThingShadowError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateThingShadowError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateThingShadowError::RequestEntityTooLargeException(inner) => {
                Error::RequestEntityTooLargeException(inner)
            }
            crate::error::UpdateThingShadowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateThingShadowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateThingShadowError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateThingShadowError::UnsupportedDocumentEncodingException(inner) => {
                Error::UnsupportedDocumentEncodingException(inner)
            }
            crate::error::UpdateThingShadowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConflictException(e) => e.request_id(),
            Self::InternalFailureException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::MethodNotAllowedException(e) => e.request_id(),
            Self::RequestEntityTooLargeException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::UnsupportedDocumentEncodingException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
