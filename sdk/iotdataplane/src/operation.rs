// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Deletes the shadow for the specified thing.</p>
/// <p>For more information, see <a href="http://docs.aws.amazon.com/iot/latest/developerguide/API_DeleteThingShadow.html">DeleteThingShadow</a> in the AWS IoT Developer Guide.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteThingShadow {
    _private: (),
}
impl DeleteThingShadow {
    /// Creates a new builder-style object to manufacture [`DeleteThingShadowInput`](crate::input::DeleteThingShadowInput)
    pub fn builder() -> crate::input::delete_thing_shadow_input::Builder {
        crate::input::delete_thing_shadow_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteThingShadow {
    type Output = std::result::Result<
        crate::output::DeleteThingShadowOutput,
        crate::error::DeleteThingShadowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_thing_shadow_error(response)
        } else {
            crate::operation_deser::parse_delete_thing_shadow_response(response)
        }
    }
}

/// <p>Gets the shadow for the specified thing.</p>
/// <p>For more information, see <a href="http://docs.aws.amazon.com/iot/latest/developerguide/API_GetThingShadow.html">GetThingShadow</a> in the
/// AWS IoT Developer Guide.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetThingShadow {
    _private: (),
}
impl GetThingShadow {
    /// Creates a new builder-style object to manufacture [`GetThingShadowInput`](crate::input::GetThingShadowInput)
    pub fn builder() -> crate::input::get_thing_shadow_input::Builder {
        crate::input::get_thing_shadow_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetThingShadow {
    type Output =
        std::result::Result<crate::output::GetThingShadowOutput, crate::error::GetThingShadowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_thing_shadow_error(response)
        } else {
            crate::operation_deser::parse_get_thing_shadow_response(response)
        }
    }
}

/// <p>Lists the shadows for the specified thing.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListNamedShadowsForThing {
    _private: (),
}
impl ListNamedShadowsForThing {
    /// Creates a new builder-style object to manufacture [`ListNamedShadowsForThingInput`](crate::input::ListNamedShadowsForThingInput)
    pub fn builder() -> crate::input::list_named_shadows_for_thing_input::Builder {
        crate::input::list_named_shadows_for_thing_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListNamedShadowsForThing {
    type Output = std::result::Result<
        crate::output::ListNamedShadowsForThingOutput,
        crate::error::ListNamedShadowsForThingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_named_shadows_for_thing_error(response)
        } else {
            crate::operation_deser::parse_list_named_shadows_for_thing_response(response)
        }
    }
}

/// <p>Publishes state information.</p>
/// <p>For more information, see <a href="http://docs.aws.amazon.com/iot/latest/developerguide/protocols.html#http">HTTP Protocol</a> in the
/// AWS IoT Developer Guide.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct Publish {
    _private: (),
}
impl Publish {
    /// Creates a new builder-style object to manufacture [`PublishInput`](crate::input::PublishInput)
    pub fn builder() -> crate::input::publish_input::Builder {
        crate::input::publish_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for Publish {
    type Output = std::result::Result<crate::output::PublishOutput, crate::error::PublishError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_publish_error(response)
        } else {
            crate::operation_deser::parse_publish_response(response)
        }
    }
}

/// <p>Updates the shadow for the specified thing.</p>
/// <p>For more information, see <a href="http://docs.aws.amazon.com/iot/latest/developerguide/API_UpdateThingShadow.html">UpdateThingShadow</a> in the
/// AWS IoT Developer Guide.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateThingShadow {
    _private: (),
}
impl UpdateThingShadow {
    /// Creates a new builder-style object to manufacture [`UpdateThingShadowInput`](crate::input::UpdateThingShadowInput)
    pub fn builder() -> crate::input::update_thing_shadow_input::Builder {
        crate::input::update_thing_shadow_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateThingShadow {
    type Output = std::result::Result<
        crate::output::UpdateThingShadowOutput,
        crate::error::UpdateThingShadowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_thing_shadow_error(response)
        } else {
            crate::operation_deser::parse_update_thing_shadow_response(response)
        }
    }
}
