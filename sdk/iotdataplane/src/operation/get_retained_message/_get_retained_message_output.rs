// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output from the GetRetainedMessage operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRetainedMessageOutput {
    /// <p>The topic name to which the retained message was published.</p>
    #[doc(hidden)]
    pub topic: std::option::Option<std::string::String>,
    /// <p>The Base64-encoded message payload of the retained message body.</p>
    #[doc(hidden)]
    pub payload: std::option::Option<aws_smithy_types::Blob>,
    /// <p>The quality of service (QoS) level used to publish the retained message.</p>
    #[doc(hidden)]
    pub qos: i32,
    /// <p>The Epoch date and time, in milliseconds, when the retained message was stored by IoT.</p>
    #[doc(hidden)]
    pub last_modified_time: i64,
    _request_id: Option<String>,
}
impl GetRetainedMessageOutput {
    /// <p>The topic name to which the retained message was published.</p>
    pub fn topic(&self) -> std::option::Option<&str> {
        self.topic.as_deref()
    }
    /// <p>The Base64-encoded message payload of the retained message body.</p>
    pub fn payload(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.payload.as_ref()
    }
    /// <p>The quality of service (QoS) level used to publish the retained message.</p>
    pub fn qos(&self) -> i32 {
        self.qos
    }
    /// <p>The Epoch date and time, in milliseconds, when the retained message was stored by IoT.</p>
    pub fn last_modified_time(&self) -> i64 {
        self.last_modified_time
    }
}
impl aws_http::request_id::RequestId for GetRetainedMessageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRetainedMessageOutput {
    /// Creates a new builder-style object to manufacture [`GetRetainedMessageOutput`](crate::operation::get_retained_message::GetRetainedMessageOutput).
    pub fn builder(
    ) -> crate::operation::get_retained_message::builders::GetRetainedMessageOutputBuilder {
        crate::operation::get_retained_message::builders::GetRetainedMessageOutputBuilder::default()
    }
}

/// A builder for [`GetRetainedMessageOutput`](crate::operation::get_retained_message::GetRetainedMessageOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRetainedMessageOutputBuilder {
    pub(crate) topic: std::option::Option<std::string::String>,
    pub(crate) payload: std::option::Option<aws_smithy_types::Blob>,
    pub(crate) qos: std::option::Option<i32>,
    pub(crate) last_modified_time: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl GetRetainedMessageOutputBuilder {
    /// <p>The topic name to which the retained message was published.</p>
    pub fn topic(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic = Some(input.into());
        self
    }
    /// <p>The topic name to which the retained message was published.</p>
    pub fn set_topic(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic = input;
        self
    }
    /// <p>The Base64-encoded message payload of the retained message body.</p>
    pub fn payload(mut self, input: aws_smithy_types::Blob) -> Self {
        self.payload = Some(input);
        self
    }
    /// <p>The Base64-encoded message payload of the retained message body.</p>
    pub fn set_payload(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.payload = input;
        self
    }
    /// <p>The quality of service (QoS) level used to publish the retained message.</p>
    pub fn qos(mut self, input: i32) -> Self {
        self.qos = Some(input);
        self
    }
    /// <p>The quality of service (QoS) level used to publish the retained message.</p>
    pub fn set_qos(mut self, input: std::option::Option<i32>) -> Self {
        self.qos = input;
        self
    }
    /// <p>The Epoch date and time, in milliseconds, when the retained message was stored by IoT.</p>
    pub fn last_modified_time(mut self, input: i64) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The Epoch date and time, in milliseconds, when the retained message was stored by IoT.</p>
    pub fn set_last_modified_time(mut self, input: std::option::Option<i64>) -> Self {
        self.last_modified_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRetainedMessageOutput`](crate::operation::get_retained_message::GetRetainedMessageOutput).
    pub fn build(self) -> crate::operation::get_retained_message::GetRetainedMessageOutput {
        crate::operation::get_retained_message::GetRetainedMessageOutput {
            topic: self.topic,
            payload: self.payload,
            qos: self.qos.unwrap_or_default(),
            last_modified_time: self.last_modified_time.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
