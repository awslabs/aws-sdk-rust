// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>The output from the UpdateThingShadow operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateThingShadowOutput {
    /// <p>The state information, in JSON format.</p>
    pub payload: std::option::Option<smithy_types::Blob>,
}
impl std::fmt::Debug for UpdateThingShadowOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateThingShadowOutput");
        formatter.field("payload", &self.payload);
        formatter.finish()
    }
}
/// See [`UpdateThingShadowOutput`](crate::output::UpdateThingShadowOutput)
pub mod update_thing_shadow_output {
    /// A builder for [`UpdateThingShadowOutput`](crate::output::UpdateThingShadowOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) payload: std::option::Option<smithy_types::Blob>,
    }
    impl Builder {
        /// <p>The state information, in JSON format.</p>
        pub fn payload(mut self, input: smithy_types::Blob) -> Self {
            self.payload = Some(input);
            self
        }
        pub fn set_payload(mut self, input: std::option::Option<smithy_types::Blob>) -> Self {
            self.payload = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateThingShadowOutput`](crate::output::UpdateThingShadowOutput)
        pub fn build(self) -> crate::output::UpdateThingShadowOutput {
            crate::output::UpdateThingShadowOutput {
                payload: self.payload,
            }
        }
    }
}
impl UpdateThingShadowOutput {
    /// Creates a new builder-style object to manufacture [`UpdateThingShadowOutput`](crate::output::UpdateThingShadowOutput)
    pub fn builder() -> crate::output::update_thing_shadow_output::Builder {
        crate::output::update_thing_shadow_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PublishOutput {}
impl std::fmt::Debug for PublishOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PublishOutput");
        formatter.finish()
    }
}
/// See [`PublishOutput`](crate::output::PublishOutput)
pub mod publish_output {
    /// A builder for [`PublishOutput`](crate::output::PublishOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PublishOutput`](crate::output::PublishOutput)
        pub fn build(self) -> crate::output::PublishOutput {
            crate::output::PublishOutput {}
        }
    }
}
impl PublishOutput {
    /// Creates a new builder-style object to manufacture [`PublishOutput`](crate::output::PublishOutput)
    pub fn builder() -> crate::output::publish_output::Builder {
        crate::output::publish_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListNamedShadowsForThingOutput {
    /// <p>The list of shadows for the specified thing.</p>
    pub results: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The token for the next set of results, or null if there are no additional results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The Epoch date and time the response was generated by AWS IoT.</p>
    pub timestamp: i64,
}
impl std::fmt::Debug for ListNamedShadowsForThingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListNamedShadowsForThingOutput");
        formatter.field("results", &self.results);
        formatter.field("next_token", &self.next_token);
        formatter.field("timestamp", &self.timestamp);
        formatter.finish()
    }
}
/// See [`ListNamedShadowsForThingOutput`](crate::output::ListNamedShadowsForThingOutput)
pub mod list_named_shadows_for_thing_output {
    /// A builder for [`ListNamedShadowsForThingOutput`](crate::output::ListNamedShadowsForThingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) results: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) timestamp: std::option::Option<i64>,
    }
    impl Builder {
        pub fn results(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.results.unwrap_or_default();
            v.push(input.into());
            self.results = Some(v);
            self
        }
        pub fn set_results(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.results = input;
            self
        }
        /// <p>The token for the next set of results, or null if there are no additional results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>The Epoch date and time the response was generated by AWS IoT.</p>
        pub fn timestamp(mut self, input: i64) -> Self {
            self.timestamp = Some(input);
            self
        }
        pub fn set_timestamp(mut self, input: std::option::Option<i64>) -> Self {
            self.timestamp = input;
            self
        }
        /// Consumes the builder and constructs a [`ListNamedShadowsForThingOutput`](crate::output::ListNamedShadowsForThingOutput)
        pub fn build(self) -> crate::output::ListNamedShadowsForThingOutput {
            crate::output::ListNamedShadowsForThingOutput {
                results: self.results,
                next_token: self.next_token,
                timestamp: self.timestamp.unwrap_or_default(),
            }
        }
    }
}
impl ListNamedShadowsForThingOutput {
    /// Creates a new builder-style object to manufacture [`ListNamedShadowsForThingOutput`](crate::output::ListNamedShadowsForThingOutput)
    pub fn builder() -> crate::output::list_named_shadows_for_thing_output::Builder {
        crate::output::list_named_shadows_for_thing_output::Builder::default()
    }
}

/// <p>The output from the GetThingShadow operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetThingShadowOutput {
    /// <p>The state information, in JSON format.</p>
    pub payload: std::option::Option<smithy_types::Blob>,
}
impl std::fmt::Debug for GetThingShadowOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetThingShadowOutput");
        formatter.field("payload", &self.payload);
        formatter.finish()
    }
}
/// See [`GetThingShadowOutput`](crate::output::GetThingShadowOutput)
pub mod get_thing_shadow_output {
    /// A builder for [`GetThingShadowOutput`](crate::output::GetThingShadowOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) payload: std::option::Option<smithy_types::Blob>,
    }
    impl Builder {
        /// <p>The state information, in JSON format.</p>
        pub fn payload(mut self, input: smithy_types::Blob) -> Self {
            self.payload = Some(input);
            self
        }
        pub fn set_payload(mut self, input: std::option::Option<smithy_types::Blob>) -> Self {
            self.payload = input;
            self
        }
        /// Consumes the builder and constructs a [`GetThingShadowOutput`](crate::output::GetThingShadowOutput)
        pub fn build(self) -> crate::output::GetThingShadowOutput {
            crate::output::GetThingShadowOutput {
                payload: self.payload,
            }
        }
    }
}
impl GetThingShadowOutput {
    /// Creates a new builder-style object to manufacture [`GetThingShadowOutput`](crate::output::GetThingShadowOutput)
    pub fn builder() -> crate::output::get_thing_shadow_output::Builder {
        crate::output::get_thing_shadow_output::Builder::default()
    }
}

/// <p>The output from the DeleteThingShadow operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteThingShadowOutput {
    /// <p>The state information, in JSON format.</p>
    pub payload: std::option::Option<smithy_types::Blob>,
}
impl std::fmt::Debug for DeleteThingShadowOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteThingShadowOutput");
        formatter.field("payload", &self.payload);
        formatter.finish()
    }
}
/// See [`DeleteThingShadowOutput`](crate::output::DeleteThingShadowOutput)
pub mod delete_thing_shadow_output {
    /// A builder for [`DeleteThingShadowOutput`](crate::output::DeleteThingShadowOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) payload: std::option::Option<smithy_types::Blob>,
    }
    impl Builder {
        /// <p>The state information, in JSON format.</p>
        pub fn payload(mut self, input: smithy_types::Blob) -> Self {
            self.payload = Some(input);
            self
        }
        pub fn set_payload(mut self, input: std::option::Option<smithy_types::Blob>) -> Self {
            self.payload = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteThingShadowOutput`](crate::output::DeleteThingShadowOutput)
        pub fn build(self) -> crate::output::DeleteThingShadowOutput {
            crate::output::DeleteThingShadowOutput {
                payload: self.payload,
            }
        }
    }
}
impl DeleteThingShadowOutput {
    /// Creates a new builder-style object to manufacture [`DeleteThingShadowOutput`](crate::output::DeleteThingShadowOutput)
    pub fn builder() -> crate::output::delete_thing_shadow_output::Builder {
        crate::output::delete_thing_shadow_output::Builder::default()
    }
}
