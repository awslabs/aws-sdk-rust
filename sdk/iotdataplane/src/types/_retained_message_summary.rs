// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a single retained message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RetainedMessageSummary {
    /// <p>The topic name to which the retained message was published.</p>
    #[doc(hidden)]
    pub topic: std::option::Option<std::string::String>,
    /// <p>The size of the retained message's payload in bytes.</p>
    #[doc(hidden)]
    pub payload_size: i64,
    /// <p>The quality of service (QoS) level used to publish the retained message.</p>
    #[doc(hidden)]
    pub qos: i32,
    /// <p>The Epoch date and time, in milliseconds, when the retained message was stored by IoT.</p>
    #[doc(hidden)]
    pub last_modified_time: i64,
}
impl RetainedMessageSummary {
    /// <p>The topic name to which the retained message was published.</p>
    pub fn topic(&self) -> std::option::Option<&str> {
        self.topic.as_deref()
    }
    /// <p>The size of the retained message's payload in bytes.</p>
    pub fn payload_size(&self) -> i64 {
        self.payload_size
    }
    /// <p>The quality of service (QoS) level used to publish the retained message.</p>
    pub fn qos(&self) -> i32 {
        self.qos
    }
    /// <p>The Epoch date and time, in milliseconds, when the retained message was stored by IoT.</p>
    pub fn last_modified_time(&self) -> i64 {
        self.last_modified_time
    }
}
impl RetainedMessageSummary {
    /// Creates a new builder-style object to manufacture [`RetainedMessageSummary`](crate::types::RetainedMessageSummary).
    pub fn builder() -> crate::types::builders::RetainedMessageSummaryBuilder {
        crate::types::builders::RetainedMessageSummaryBuilder::default()
    }
}

/// A builder for [`RetainedMessageSummary`](crate::types::RetainedMessageSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RetainedMessageSummaryBuilder {
    pub(crate) topic: std::option::Option<std::string::String>,
    pub(crate) payload_size: std::option::Option<i64>,
    pub(crate) qos: std::option::Option<i32>,
    pub(crate) last_modified_time: std::option::Option<i64>,
}
impl RetainedMessageSummaryBuilder {
    /// <p>The topic name to which the retained message was published.</p>
    pub fn topic(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic = Some(input.into());
        self
    }
    /// <p>The topic name to which the retained message was published.</p>
    pub fn set_topic(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic = input;
        self
    }
    /// <p>The size of the retained message's payload in bytes.</p>
    pub fn payload_size(mut self, input: i64) -> Self {
        self.payload_size = Some(input);
        self
    }
    /// <p>The size of the retained message's payload in bytes.</p>
    pub fn set_payload_size(mut self, input: std::option::Option<i64>) -> Self {
        self.payload_size = input;
        self
    }
    /// <p>The quality of service (QoS) level used to publish the retained message.</p>
    pub fn qos(mut self, input: i32) -> Self {
        self.qos = Some(input);
        self
    }
    /// <p>The quality of service (QoS) level used to publish the retained message.</p>
    pub fn set_qos(mut self, input: std::option::Option<i32>) -> Self {
        self.qos = input;
        self
    }
    /// <p>The Epoch date and time, in milliseconds, when the retained message was stored by IoT.</p>
    pub fn last_modified_time(mut self, input: i64) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The Epoch date and time, in milliseconds, when the retained message was stored by IoT.</p>
    pub fn set_last_modified_time(mut self, input: std::option::Option<i64>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// Consumes the builder and constructs a [`RetainedMessageSummary`](crate::types::RetainedMessageSummary).
    pub fn build(self) -> crate::types::RetainedMessageSummary {
        crate::types::RetainedMessageSummary {
            topic: self.topic,
            payload_size: self.payload_size.unwrap_or_default(),
            qos: self.qos.unwrap_or_default(),
            last_modified_time: self.last_modified_time.unwrap_or_default(),
        }
    }
}
