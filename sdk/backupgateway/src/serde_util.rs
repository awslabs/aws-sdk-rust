// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn bandwidth_rate_limit_interval_correct_errors(
    mut builder: crate::types::builders::BandwidthRateLimitIntervalBuilder,
) -> crate::types::builders::BandwidthRateLimitIntervalBuilder {
    if builder.start_hour_of_day.is_none() {
        builder.start_hour_of_day = Some(Default::default())
    }
    if builder.end_hour_of_day.is_none() {
        builder.end_hour_of_day = Some(Default::default())
    }
    if builder.start_minute_of_hour.is_none() {
        builder.start_minute_of_hour = Some(Default::default())
    }
    if builder.end_minute_of_hour.is_none() {
        builder.end_minute_of_hour = Some(Default::default())
    }
    if builder.days_of_week.is_none() {
        builder.days_of_week = Some(Default::default())
    }
    builder
}

pub(crate) fn maintenance_start_time_correct_errors(
    mut builder: crate::types::builders::MaintenanceStartTimeBuilder,
) -> crate::types::builders::MaintenanceStartTimeBuilder {
    if builder.hour_of_day.is_none() {
        builder.hour_of_day = Some(Default::default())
    }
    if builder.minute_of_hour.is_none() {
        builder.minute_of_hour = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn vmware_to_aws_tag_mapping_correct_errors(
    mut builder: crate::types::builders::VmwareToAwsTagMappingBuilder,
) -> crate::types::builders::VmwareToAwsTagMappingBuilder {
    if builder.vmware_category.is_none() {
        builder.vmware_category = Some(Default::default())
    }
    if builder.vmware_tag_name.is_none() {
        builder.vmware_tag_name = Some(Default::default())
    }
    if builder.aws_tag_key.is_none() {
        builder.aws_tag_key = Some(Default::default())
    }
    if builder.aws_tag_value.is_none() {
        builder.aws_tag_value = Some(Default::default())
    }
    builder
}
