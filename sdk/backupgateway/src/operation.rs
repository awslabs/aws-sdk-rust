// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AssociateGatewayToServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_gateway_to_server`](crate::client::fluent_builders::AssociateGatewayToServer).
///
/// `ParseStrictResponse` impl for `AssociateGatewayToServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AssociateGatewayToServer {
    _private: (),
}
impl AssociateGatewayToServer {
    /// Creates a new builder-style object to manufacture [`AssociateGatewayToServerInput`](crate::input::AssociateGatewayToServerInput).
    pub fn builder() -> crate::input::associate_gateway_to_server_input::Builder {
        crate::input::associate_gateway_to_server_input::Builder::default()
    }
    /// Creates a new `AssociateGatewayToServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateGatewayToServer {
    type Output = std::result::Result<
        crate::output::AssociateGatewayToServerOutput,
        crate::error::AssociateGatewayToServerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_associate_gateway_to_server::de_associate_gateway_to_server_http_error(response)
        } else {
            crate::protocol_serde::shape_associate_gateway_to_server::de_associate_gateway_to_server_http_response(response)
        }
    }
}

/// Operation shape for `CreateGateway`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_gateway`](crate::client::fluent_builders::CreateGateway).
///
/// `ParseStrictResponse` impl for `CreateGateway`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateGateway {
    _private: (),
}
impl CreateGateway {
    /// Creates a new builder-style object to manufacture [`CreateGatewayInput`](crate::input::CreateGatewayInput).
    pub fn builder() -> crate::input::create_gateway_input::Builder {
        crate::input::create_gateway_input::Builder::default()
    }
    /// Creates a new `CreateGateway` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGateway {
    type Output =
        std::result::Result<crate::output::CreateGatewayOutput, crate::error::CreateGatewayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_gateway::de_create_gateway_http_error(response)
        } else {
            crate::protocol_serde::shape_create_gateway::de_create_gateway_http_response(response)
        }
    }
}

/// Operation shape for `DeleteGateway`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_gateway`](crate::client::fluent_builders::DeleteGateway).
///
/// `ParseStrictResponse` impl for `DeleteGateway`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteGateway {
    _private: (),
}
impl DeleteGateway {
    /// Creates a new builder-style object to manufacture [`DeleteGatewayInput`](crate::input::DeleteGatewayInput).
    pub fn builder() -> crate::input::delete_gateway_input::Builder {
        crate::input::delete_gateway_input::Builder::default()
    }
    /// Creates a new `DeleteGateway` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteGateway {
    type Output =
        std::result::Result<crate::output::DeleteGatewayOutput, crate::error::DeleteGatewayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_gateway::de_delete_gateway_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_gateway::de_delete_gateway_http_response(response)
        }
    }
}

/// Operation shape for `DeleteHypervisor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_hypervisor`](crate::client::fluent_builders::DeleteHypervisor).
///
/// `ParseStrictResponse` impl for `DeleteHypervisor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteHypervisor {
    _private: (),
}
impl DeleteHypervisor {
    /// Creates a new builder-style object to manufacture [`DeleteHypervisorInput`](crate::input::DeleteHypervisorInput).
    pub fn builder() -> crate::input::delete_hypervisor_input::Builder {
        crate::input::delete_hypervisor_input::Builder::default()
    }
    /// Creates a new `DeleteHypervisor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteHypervisor {
    type Output = std::result::Result<
        crate::output::DeleteHypervisorOutput,
        crate::error::DeleteHypervisorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_hypervisor::de_delete_hypervisor_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_hypervisor::de_delete_hypervisor_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DisassociateGatewayFromServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_gateway_from_server`](crate::client::fluent_builders::DisassociateGatewayFromServer).
///
/// `ParseStrictResponse` impl for `DisassociateGatewayFromServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateGatewayFromServer {
    _private: (),
}
impl DisassociateGatewayFromServer {
    /// Creates a new builder-style object to manufacture [`DisassociateGatewayFromServerInput`](crate::input::DisassociateGatewayFromServerInput).
    pub fn builder() -> crate::input::disassociate_gateway_from_server_input::Builder {
        crate::input::disassociate_gateway_from_server_input::Builder::default()
    }
    /// Creates a new `DisassociateGatewayFromServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateGatewayFromServer {
    type Output = std::result::Result<
        crate::output::DisassociateGatewayFromServerOutput,
        crate::error::DisassociateGatewayFromServerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disassociate_gateway_from_server::de_disassociate_gateway_from_server_http_error(response)
        } else {
            crate::protocol_serde::shape_disassociate_gateway_from_server::de_disassociate_gateway_from_server_http_response(response)
        }
    }
}

/// Operation shape for `GetBandwidthRateLimitSchedule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_bandwidth_rate_limit_schedule`](crate::client::fluent_builders::GetBandwidthRateLimitSchedule).
///
/// `ParseStrictResponse` impl for `GetBandwidthRateLimitSchedule`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetBandwidthRateLimitSchedule {
    _private: (),
}
impl GetBandwidthRateLimitSchedule {
    /// Creates a new builder-style object to manufacture [`GetBandwidthRateLimitScheduleInput`](crate::input::GetBandwidthRateLimitScheduleInput).
    pub fn builder() -> crate::input::get_bandwidth_rate_limit_schedule_input::Builder {
        crate::input::get_bandwidth_rate_limit_schedule_input::Builder::default()
    }
    /// Creates a new `GetBandwidthRateLimitSchedule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetBandwidthRateLimitSchedule {
    type Output = std::result::Result<
        crate::output::GetBandwidthRateLimitScheduleOutput,
        crate::error::GetBandwidthRateLimitScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_bandwidth_rate_limit_schedule::de_get_bandwidth_rate_limit_schedule_http_error(response)
        } else {
            crate::protocol_serde::shape_get_bandwidth_rate_limit_schedule::de_get_bandwidth_rate_limit_schedule_http_response(response)
        }
    }
}

/// Operation shape for `GetGateway`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_gateway`](crate::client::fluent_builders::GetGateway).
///
/// `ParseStrictResponse` impl for `GetGateway`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetGateway {
    _private: (),
}
impl GetGateway {
    /// Creates a new builder-style object to manufacture [`GetGatewayInput`](crate::input::GetGatewayInput).
    pub fn builder() -> crate::input::get_gateway_input::Builder {
        crate::input::get_gateway_input::Builder::default()
    }
    /// Creates a new `GetGateway` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetGateway {
    type Output =
        std::result::Result<crate::output::GetGatewayOutput, crate::error::GetGatewayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_gateway::de_get_gateway_http_error(response)
        } else {
            crate::protocol_serde::shape_get_gateway::de_get_gateway_http_response(response)
        }
    }
}

/// Operation shape for `GetHypervisor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_hypervisor`](crate::client::fluent_builders::GetHypervisor).
///
/// `ParseStrictResponse` impl for `GetHypervisor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetHypervisor {
    _private: (),
}
impl GetHypervisor {
    /// Creates a new builder-style object to manufacture [`GetHypervisorInput`](crate::input::GetHypervisorInput).
    pub fn builder() -> crate::input::get_hypervisor_input::Builder {
        crate::input::get_hypervisor_input::Builder::default()
    }
    /// Creates a new `GetHypervisor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetHypervisor {
    type Output =
        std::result::Result<crate::output::GetHypervisorOutput, crate::error::GetHypervisorError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_hypervisor::de_get_hypervisor_http_error(response)
        } else {
            crate::protocol_serde::shape_get_hypervisor::de_get_hypervisor_http_response(response)
        }
    }
}

/// Operation shape for `GetHypervisorPropertyMappings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_hypervisor_property_mappings`](crate::client::fluent_builders::GetHypervisorPropertyMappings).
///
/// `ParseStrictResponse` impl for `GetHypervisorPropertyMappings`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetHypervisorPropertyMappings {
    _private: (),
}
impl GetHypervisorPropertyMappings {
    /// Creates a new builder-style object to manufacture [`GetHypervisorPropertyMappingsInput`](crate::input::GetHypervisorPropertyMappingsInput).
    pub fn builder() -> crate::input::get_hypervisor_property_mappings_input::Builder {
        crate::input::get_hypervisor_property_mappings_input::Builder::default()
    }
    /// Creates a new `GetHypervisorPropertyMappings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetHypervisorPropertyMappings {
    type Output = std::result::Result<
        crate::output::GetHypervisorPropertyMappingsOutput,
        crate::error::GetHypervisorPropertyMappingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_hypervisor_property_mappings::de_get_hypervisor_property_mappings_http_error(response)
        } else {
            crate::protocol_serde::shape_get_hypervisor_property_mappings::de_get_hypervisor_property_mappings_http_response(response)
        }
    }
}

/// Operation shape for `GetVirtualMachine`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_virtual_machine`](crate::client::fluent_builders::GetVirtualMachine).
///
/// `ParseStrictResponse` impl for `GetVirtualMachine`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVirtualMachine {
    _private: (),
}
impl GetVirtualMachine {
    /// Creates a new builder-style object to manufacture [`GetVirtualMachineInput`](crate::input::GetVirtualMachineInput).
    pub fn builder() -> crate::input::get_virtual_machine_input::Builder {
        crate::input::get_virtual_machine_input::Builder::default()
    }
    /// Creates a new `GetVirtualMachine` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVirtualMachine {
    type Output = std::result::Result<
        crate::output::GetVirtualMachineOutput,
        crate::error::GetVirtualMachineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_virtual_machine::de_get_virtual_machine_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_virtual_machine::de_get_virtual_machine_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ImportHypervisorConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`import_hypervisor_configuration`](crate::client::fluent_builders::ImportHypervisorConfiguration).
///
/// `ParseStrictResponse` impl for `ImportHypervisorConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ImportHypervisorConfiguration {
    _private: (),
}
impl ImportHypervisorConfiguration {
    /// Creates a new builder-style object to manufacture [`ImportHypervisorConfigurationInput`](crate::input::ImportHypervisorConfigurationInput).
    pub fn builder() -> crate::input::import_hypervisor_configuration_input::Builder {
        crate::input::import_hypervisor_configuration_input::Builder::default()
    }
    /// Creates a new `ImportHypervisorConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ImportHypervisorConfiguration {
    type Output = std::result::Result<
        crate::output::ImportHypervisorConfigurationOutput,
        crate::error::ImportHypervisorConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_import_hypervisor_configuration::de_import_hypervisor_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_import_hypervisor_configuration::de_import_hypervisor_configuration_http_response(response)
        }
    }
}

/// Operation shape for `ListGateways`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_gateways`](crate::client::fluent_builders::ListGateways).
///
/// `ParseStrictResponse` impl for `ListGateways`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListGateways {
    _private: (),
}
impl ListGateways {
    /// Creates a new builder-style object to manufacture [`ListGatewaysInput`](crate::input::ListGatewaysInput).
    pub fn builder() -> crate::input::list_gateways_input::Builder {
        crate::input::list_gateways_input::Builder::default()
    }
    /// Creates a new `ListGateways` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListGateways {
    type Output =
        std::result::Result<crate::output::ListGatewaysOutput, crate::error::ListGatewaysError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_gateways::de_list_gateways_http_error(response)
        } else {
            crate::protocol_serde::shape_list_gateways::de_list_gateways_http_response(response)
        }
    }
}

/// Operation shape for `ListHypervisors`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_hypervisors`](crate::client::fluent_builders::ListHypervisors).
///
/// `ParseStrictResponse` impl for `ListHypervisors`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListHypervisors {
    _private: (),
}
impl ListHypervisors {
    /// Creates a new builder-style object to manufacture [`ListHypervisorsInput`](crate::input::ListHypervisorsInput).
    pub fn builder() -> crate::input::list_hypervisors_input::Builder {
        crate::input::list_hypervisors_input::Builder::default()
    }
    /// Creates a new `ListHypervisors` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListHypervisors {
    type Output = std::result::Result<
        crate::output::ListHypervisorsOutput,
        crate::error::ListHypervisorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_hypervisors::de_list_hypervisors_http_error(response)
        } else {
            crate::protocol_serde::shape_list_hypervisors::de_list_hypervisors_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `ListVirtualMachines`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_virtual_machines`](crate::client::fluent_builders::ListVirtualMachines).
///
/// `ParseStrictResponse` impl for `ListVirtualMachines`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListVirtualMachines {
    _private: (),
}
impl ListVirtualMachines {
    /// Creates a new builder-style object to manufacture [`ListVirtualMachinesInput`](crate::input::ListVirtualMachinesInput).
    pub fn builder() -> crate::input::list_virtual_machines_input::Builder {
        crate::input::list_virtual_machines_input::Builder::default()
    }
    /// Creates a new `ListVirtualMachines` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListVirtualMachines {
    type Output = std::result::Result<
        crate::output::ListVirtualMachinesOutput,
        crate::error::ListVirtualMachinesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_virtual_machines::de_list_virtual_machines_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_virtual_machines::de_list_virtual_machines_http_response(response)
        }
    }
}

/// Operation shape for `PutBandwidthRateLimitSchedule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_bandwidth_rate_limit_schedule`](crate::client::fluent_builders::PutBandwidthRateLimitSchedule).
///
/// `ParseStrictResponse` impl for `PutBandwidthRateLimitSchedule`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutBandwidthRateLimitSchedule {
    _private: (),
}
impl PutBandwidthRateLimitSchedule {
    /// Creates a new builder-style object to manufacture [`PutBandwidthRateLimitScheduleInput`](crate::input::PutBandwidthRateLimitScheduleInput).
    pub fn builder() -> crate::input::put_bandwidth_rate_limit_schedule_input::Builder {
        crate::input::put_bandwidth_rate_limit_schedule_input::Builder::default()
    }
    /// Creates a new `PutBandwidthRateLimitSchedule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutBandwidthRateLimitSchedule {
    type Output = std::result::Result<
        crate::output::PutBandwidthRateLimitScheduleOutput,
        crate::error::PutBandwidthRateLimitScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_bandwidth_rate_limit_schedule::de_put_bandwidth_rate_limit_schedule_http_error(response)
        } else {
            crate::protocol_serde::shape_put_bandwidth_rate_limit_schedule::de_put_bandwidth_rate_limit_schedule_http_response(response)
        }
    }
}

/// Operation shape for `PutHypervisorPropertyMappings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_hypervisor_property_mappings`](crate::client::fluent_builders::PutHypervisorPropertyMappings).
///
/// `ParseStrictResponse` impl for `PutHypervisorPropertyMappings`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutHypervisorPropertyMappings {
    _private: (),
}
impl PutHypervisorPropertyMappings {
    /// Creates a new builder-style object to manufacture [`PutHypervisorPropertyMappingsInput`](crate::input::PutHypervisorPropertyMappingsInput).
    pub fn builder() -> crate::input::put_hypervisor_property_mappings_input::Builder {
        crate::input::put_hypervisor_property_mappings_input::Builder::default()
    }
    /// Creates a new `PutHypervisorPropertyMappings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutHypervisorPropertyMappings {
    type Output = std::result::Result<
        crate::output::PutHypervisorPropertyMappingsOutput,
        crate::error::PutHypervisorPropertyMappingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_hypervisor_property_mappings::de_put_hypervisor_property_mappings_http_error(response)
        } else {
            crate::protocol_serde::shape_put_hypervisor_property_mappings::de_put_hypervisor_property_mappings_http_response(response)
        }
    }
}

/// Operation shape for `PutMaintenanceStartTime`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_maintenance_start_time`](crate::client::fluent_builders::PutMaintenanceStartTime).
///
/// `ParseStrictResponse` impl for `PutMaintenanceStartTime`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutMaintenanceStartTime {
    _private: (),
}
impl PutMaintenanceStartTime {
    /// Creates a new builder-style object to manufacture [`PutMaintenanceStartTimeInput`](crate::input::PutMaintenanceStartTimeInput).
    pub fn builder() -> crate::input::put_maintenance_start_time_input::Builder {
        crate::input::put_maintenance_start_time_input::Builder::default()
    }
    /// Creates a new `PutMaintenanceStartTime` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutMaintenanceStartTime {
    type Output = std::result::Result<
        crate::output::PutMaintenanceStartTimeOutput,
        crate::error::PutMaintenanceStartTimeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_maintenance_start_time::de_put_maintenance_start_time_http_error(response)
        } else {
            crate::protocol_serde::shape_put_maintenance_start_time::de_put_maintenance_start_time_http_response(response)
        }
    }
}

/// Operation shape for `StartVirtualMachinesMetadataSync`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_virtual_machines_metadata_sync`](crate::client::fluent_builders::StartVirtualMachinesMetadataSync).
///
/// `ParseStrictResponse` impl for `StartVirtualMachinesMetadataSync`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartVirtualMachinesMetadataSync {
    _private: (),
}
impl StartVirtualMachinesMetadataSync {
    /// Creates a new builder-style object to manufacture [`StartVirtualMachinesMetadataSyncInput`](crate::input::StartVirtualMachinesMetadataSyncInput).
    pub fn builder() -> crate::input::start_virtual_machines_metadata_sync_input::Builder {
        crate::input::start_virtual_machines_metadata_sync_input::Builder::default()
    }
    /// Creates a new `StartVirtualMachinesMetadataSync` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartVirtualMachinesMetadataSync {
    type Output = std::result::Result<
        crate::output::StartVirtualMachinesMetadataSyncOutput,
        crate::error::StartVirtualMachinesMetadataSyncError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_virtual_machines_metadata_sync::de_start_virtual_machines_metadata_sync_http_error(response)
        } else {
            crate::protocol_serde::shape_start_virtual_machines_metadata_sync::de_start_virtual_machines_metadata_sync_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `TestHypervisorConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`test_hypervisor_configuration`](crate::client::fluent_builders::TestHypervisorConfiguration).
///
/// `ParseStrictResponse` impl for `TestHypervisorConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TestHypervisorConfiguration {
    _private: (),
}
impl TestHypervisorConfiguration {
    /// Creates a new builder-style object to manufacture [`TestHypervisorConfigurationInput`](crate::input::TestHypervisorConfigurationInput).
    pub fn builder() -> crate::input::test_hypervisor_configuration_input::Builder {
        crate::input::test_hypervisor_configuration_input::Builder::default()
    }
    /// Creates a new `TestHypervisorConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TestHypervisorConfiguration {
    type Output = std::result::Result<
        crate::output::TestHypervisorConfigurationOutput,
        crate::error::TestHypervisorConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_test_hypervisor_configuration::de_test_hypervisor_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_test_hypervisor_configuration::de_test_hypervisor_configuration_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateGatewayInformation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_gateway_information`](crate::client::fluent_builders::UpdateGatewayInformation).
///
/// `ParseStrictResponse` impl for `UpdateGatewayInformation`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateGatewayInformation {
    _private: (),
}
impl UpdateGatewayInformation {
    /// Creates a new builder-style object to manufacture [`UpdateGatewayInformationInput`](crate::input::UpdateGatewayInformationInput).
    pub fn builder() -> crate::input::update_gateway_information_input::Builder {
        crate::input::update_gateway_information_input::Builder::default()
    }
    /// Creates a new `UpdateGatewayInformation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateGatewayInformation {
    type Output = std::result::Result<
        crate::output::UpdateGatewayInformationOutput,
        crate::error::UpdateGatewayInformationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_gateway_information::de_update_gateway_information_http_error(response)
        } else {
            crate::protocol_serde::shape_update_gateway_information::de_update_gateway_information_http_response(response)
        }
    }
}

/// Operation shape for `UpdateGatewaySoftwareNow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_gateway_software_now`](crate::client::fluent_builders::UpdateGatewaySoftwareNow).
///
/// `ParseStrictResponse` impl for `UpdateGatewaySoftwareNow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateGatewaySoftwareNow {
    _private: (),
}
impl UpdateGatewaySoftwareNow {
    /// Creates a new builder-style object to manufacture [`UpdateGatewaySoftwareNowInput`](crate::input::UpdateGatewaySoftwareNowInput).
    pub fn builder() -> crate::input::update_gateway_software_now_input::Builder {
        crate::input::update_gateway_software_now_input::Builder::default()
    }
    /// Creates a new `UpdateGatewaySoftwareNow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateGatewaySoftwareNow {
    type Output = std::result::Result<
        crate::output::UpdateGatewaySoftwareNowOutput,
        crate::error::UpdateGatewaySoftwareNowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_gateway_software_now::de_update_gateway_software_now_http_error(response)
        } else {
            crate::protocol_serde::shape_update_gateway_software_now::de_update_gateway_software_now_http_response(response)
        }
    }
}

/// Operation shape for `UpdateHypervisor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_hypervisor`](crate::client::fluent_builders::UpdateHypervisor).
///
/// `ParseStrictResponse` impl for `UpdateHypervisor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateHypervisor {
    _private: (),
}
impl UpdateHypervisor {
    /// Creates a new builder-style object to manufacture [`UpdateHypervisorInput`](crate::input::UpdateHypervisorInput).
    pub fn builder() -> crate::input::update_hypervisor_input::Builder {
        crate::input::update_hypervisor_input::Builder::default()
    }
    /// Creates a new `UpdateHypervisor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateHypervisor {
    type Output = std::result::Result<
        crate::output::UpdateHypervisorOutput,
        crate::error::UpdateHypervisorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_hypervisor::de_update_hypervisor_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_hypervisor::de_update_hypervisor_http_response(
                response,
            )
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
