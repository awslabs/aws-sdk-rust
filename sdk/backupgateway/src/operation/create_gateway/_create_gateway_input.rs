// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateGatewayInput {
    /// <p>The activation key of the created gateway.</p>
    #[doc(hidden)]
    pub activation_key: std::option::Option<std::string::String>,
    /// <p>The display name of the created gateway.</p>
    #[doc(hidden)]
    pub gateway_display_name: std::option::Option<std::string::String>,
    /// <p>The type of created gateway.</p>
    #[doc(hidden)]
    pub gateway_type: std::option::Option<crate::types::GatewayType>,
    /// <p>A list of up to 50 tags to assign to the gateway. Each tag is a key-value pair.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateGatewayInput {
    /// <p>The activation key of the created gateway.</p>
    pub fn activation_key(&self) -> std::option::Option<&str> {
        self.activation_key.as_deref()
    }
    /// <p>The display name of the created gateway.</p>
    pub fn gateway_display_name(&self) -> std::option::Option<&str> {
        self.gateway_display_name.as_deref()
    }
    /// <p>The type of created gateway.</p>
    pub fn gateway_type(&self) -> std::option::Option<&crate::types::GatewayType> {
        self.gateway_type.as_ref()
    }
    /// <p>A list of up to 50 tags to assign to the gateway. Each tag is a key-value pair.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateGatewayInput {
    /// Creates a new builder-style object to manufacture [`CreateGatewayInput`](crate::operation::create_gateway::CreateGatewayInput).
    pub fn builder() -> crate::operation::create_gateway::builders::CreateGatewayInputBuilder {
        crate::operation::create_gateway::builders::CreateGatewayInputBuilder::default()
    }
}

/// A builder for [`CreateGatewayInput`](crate::operation::create_gateway::CreateGatewayInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateGatewayInputBuilder {
    pub(crate) activation_key: std::option::Option<std::string::String>,
    pub(crate) gateway_display_name: std::option::Option<std::string::String>,
    pub(crate) gateway_type: std::option::Option<crate::types::GatewayType>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateGatewayInputBuilder {
    /// <p>The activation key of the created gateway.</p>
    pub fn activation_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.activation_key = Some(input.into());
        self
    }
    /// <p>The activation key of the created gateway.</p>
    pub fn set_activation_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.activation_key = input;
        self
    }
    /// <p>The display name of the created gateway.</p>
    pub fn gateway_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.gateway_display_name = Some(input.into());
        self
    }
    /// <p>The display name of the created gateway.</p>
    pub fn set_gateway_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.gateway_display_name = input;
        self
    }
    /// <p>The type of created gateway.</p>
    pub fn gateway_type(mut self, input: crate::types::GatewayType) -> Self {
        self.gateway_type = Some(input);
        self
    }
    /// <p>The type of created gateway.</p>
    pub fn set_gateway_type(
        mut self,
        input: std::option::Option<crate::types::GatewayType>,
    ) -> Self {
        self.gateway_type = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of up to 50 tags to assign to the gateway. Each tag is a key-value pair.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of up to 50 tags to assign to the gateway. Each tag is a key-value pair.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateGatewayInput`](crate::operation::create_gateway::CreateGatewayInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_gateway::CreateGatewayInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_gateway::CreateGatewayInput {
            activation_key: self.activation_key,
            gateway_display_name: self.gateway_display_name,
            gateway_type: self.gateway_type,
            tags: self.tags,
        })
    }
}
