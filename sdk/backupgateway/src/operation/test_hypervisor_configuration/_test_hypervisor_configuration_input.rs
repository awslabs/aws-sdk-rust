// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TestHypervisorConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the gateway to the hypervisor to test.</p>
    #[doc(hidden)]
    pub gateway_arn: std::option::Option<std::string::String>,
    /// <p>The server host of the hypervisor. This can be either an IP address or a fully-qualified domain name (FQDN).</p>
    #[doc(hidden)]
    pub host: std::option::Option<std::string::String>,
    /// <p>The username for the hypervisor.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p>The password for the hypervisor.</p>
    #[doc(hidden)]
    pub password: std::option::Option<std::string::String>,
}
impl TestHypervisorConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the gateway to the hypervisor to test.</p>
    pub fn gateway_arn(&self) -> std::option::Option<&str> {
        self.gateway_arn.as_deref()
    }
    /// <p>The server host of the hypervisor. This can be either an IP address or a fully-qualified domain name (FQDN).</p>
    pub fn host(&self) -> std::option::Option<&str> {
        self.host.as_deref()
    }
    /// <p>The username for the hypervisor.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The password for the hypervisor.</p>
    pub fn password(&self) -> std::option::Option<&str> {
        self.password.as_deref()
    }
}
impl std::fmt::Debug for TestHypervisorConfigurationInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TestHypervisorConfigurationInput");
        formatter.field("gateway_arn", &self.gateway_arn);
        formatter.field("host", &self.host);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TestHypervisorConfigurationInput {
    /// Creates a new builder-style object to manufacture [`TestHypervisorConfigurationInput`](crate::operation::test_hypervisor_configuration::TestHypervisorConfigurationInput).
    pub fn builder() -> crate::operation::test_hypervisor_configuration::builders::TestHypervisorConfigurationInputBuilder{
        crate::operation::test_hypervisor_configuration::builders::TestHypervisorConfigurationInputBuilder::default()
    }
}

/// A builder for [`TestHypervisorConfigurationInput`](crate::operation::test_hypervisor_configuration::TestHypervisorConfigurationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct TestHypervisorConfigurationInputBuilder {
    pub(crate) gateway_arn: std::option::Option<std::string::String>,
    pub(crate) host: std::option::Option<std::string::String>,
    pub(crate) username: std::option::Option<std::string::String>,
    pub(crate) password: std::option::Option<std::string::String>,
}
impl TestHypervisorConfigurationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the gateway to the hypervisor to test.</p>
    pub fn gateway_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.gateway_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway to the hypervisor to test.</p>
    pub fn set_gateway_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.gateway_arn = input;
        self
    }
    /// <p>The server host of the hypervisor. This can be either an IP address or a fully-qualified domain name (FQDN).</p>
    pub fn host(mut self, input: impl Into<std::string::String>) -> Self {
        self.host = Some(input.into());
        self
    }
    /// <p>The server host of the hypervisor. This can be either an IP address or a fully-qualified domain name (FQDN).</p>
    pub fn set_host(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.host = input;
        self
    }
    /// <p>The username for the hypervisor.</p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// <p>The username for the hypervisor.</p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The password for the hypervisor.</p>
    pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
        self.password = Some(input.into());
        self
    }
    /// <p>The password for the hypervisor.</p>
    pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password = input;
        self
    }
    /// Consumes the builder and constructs a [`TestHypervisorConfigurationInput`](crate::operation::test_hypervisor_configuration::TestHypervisorConfigurationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::test_hypervisor_configuration::TestHypervisorConfigurationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::test_hypervisor_configuration::TestHypervisorConfigurationInput {
                gateway_arn: self.gateway_arn,
                host: self.host,
                username: self.username,
                password: self.password,
            },
        )
    }
}
impl std::fmt::Debug for TestHypervisorConfigurationInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TestHypervisorConfigurationInputBuilder");
        formatter.field("gateway_arn", &self.gateway_arn);
        formatter.field("host", &self.host);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
