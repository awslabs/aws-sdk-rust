// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This displays the mapping of on-premises VMware tags to the corresponding Amazon Web Services tags.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VmwareToAwsTagMapping {
    /// <p>The is the category of VMware.</p>
    #[doc(hidden)]
    pub vmware_category: std::option::Option<std::string::String>,
    /// <p>This is the user-defined name of a VMware tag.</p>
    #[doc(hidden)]
    pub vmware_tag_name: std::option::Option<std::string::String>,
    /// <p>The key part of the Amazon Web Services tag's key-value pair.</p>
    #[doc(hidden)]
    pub aws_tag_key: std::option::Option<std::string::String>,
    /// <p>The value part of the Amazon Web Services tag's key-value pair.</p>
    #[doc(hidden)]
    pub aws_tag_value: std::option::Option<std::string::String>,
}
impl VmwareToAwsTagMapping {
    /// <p>The is the category of VMware.</p>
    pub fn vmware_category(&self) -> std::option::Option<&str> {
        self.vmware_category.as_deref()
    }
    /// <p>This is the user-defined name of a VMware tag.</p>
    pub fn vmware_tag_name(&self) -> std::option::Option<&str> {
        self.vmware_tag_name.as_deref()
    }
    /// <p>The key part of the Amazon Web Services tag's key-value pair.</p>
    pub fn aws_tag_key(&self) -> std::option::Option<&str> {
        self.aws_tag_key.as_deref()
    }
    /// <p>The value part of the Amazon Web Services tag's key-value pair.</p>
    pub fn aws_tag_value(&self) -> std::option::Option<&str> {
        self.aws_tag_value.as_deref()
    }
}
impl VmwareToAwsTagMapping {
    /// Creates a new builder-style object to manufacture [`VmwareToAwsTagMapping`](crate::types::VmwareToAwsTagMapping).
    pub fn builder() -> crate::types::builders::VmwareToAwsTagMappingBuilder {
        crate::types::builders::VmwareToAwsTagMappingBuilder::default()
    }
}

/// A builder for [`VmwareToAwsTagMapping`](crate::types::VmwareToAwsTagMapping).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VmwareToAwsTagMappingBuilder {
    pub(crate) vmware_category: std::option::Option<std::string::String>,
    pub(crate) vmware_tag_name: std::option::Option<std::string::String>,
    pub(crate) aws_tag_key: std::option::Option<std::string::String>,
    pub(crate) aws_tag_value: std::option::Option<std::string::String>,
}
impl VmwareToAwsTagMappingBuilder {
    /// <p>The is the category of VMware.</p>
    pub fn vmware_category(mut self, input: impl Into<std::string::String>) -> Self {
        self.vmware_category = Some(input.into());
        self
    }
    /// <p>The is the category of VMware.</p>
    pub fn set_vmware_category(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vmware_category = input;
        self
    }
    /// <p>This is the user-defined name of a VMware tag.</p>
    pub fn vmware_tag_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vmware_tag_name = Some(input.into());
        self
    }
    /// <p>This is the user-defined name of a VMware tag.</p>
    pub fn set_vmware_tag_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vmware_tag_name = input;
        self
    }
    /// <p>The key part of the Amazon Web Services tag's key-value pair.</p>
    pub fn aws_tag_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_tag_key = Some(input.into());
        self
    }
    /// <p>The key part of the Amazon Web Services tag's key-value pair.</p>
    pub fn set_aws_tag_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_tag_key = input;
        self
    }
    /// <p>The value part of the Amazon Web Services tag's key-value pair.</p>
    pub fn aws_tag_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_tag_value = Some(input.into());
        self
    }
    /// <p>The value part of the Amazon Web Services tag's key-value pair.</p>
    pub fn set_aws_tag_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_tag_value = input;
        self
    }
    /// Consumes the builder and constructs a [`VmwareToAwsTagMapping`](crate::types::VmwareToAwsTagMapping).
    pub fn build(self) -> crate::types::VmwareToAwsTagMapping {
        crate::types::VmwareToAwsTagMapping {
            vmware_category: self.vmware_category,
            vmware_tag_name: self.vmware_tag_name,
            aws_tag_key: self.aws_tag_key,
            aws_tag_value: self.aws_tag_value,
        }
    }
}
