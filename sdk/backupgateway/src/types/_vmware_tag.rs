// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A VMware tag is a tag attached to a specific virtual machine. A <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/API_BGW_Tag.html">tag</a> is a key-value pair you can use to manage, filter, and search for your resources.</p>
/// <p>The content of VMware tags can be matched to Amazon Web Services tags.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VmwareTag {
    /// <p>The is the category of VMware.</p>
    #[doc(hidden)]
    pub vmware_category: std::option::Option<std::string::String>,
    /// <p>This is the user-defined name of a VMware tag.</p>
    #[doc(hidden)]
    pub vmware_tag_name: std::option::Option<std::string::String>,
    /// <p>This is a user-defined description of a VMware tag.</p>
    #[doc(hidden)]
    pub vmware_tag_description: std::option::Option<std::string::String>,
}
impl VmwareTag {
    /// <p>The is the category of VMware.</p>
    pub fn vmware_category(&self) -> std::option::Option<&str> {
        self.vmware_category.as_deref()
    }
    /// <p>This is the user-defined name of a VMware tag.</p>
    pub fn vmware_tag_name(&self) -> std::option::Option<&str> {
        self.vmware_tag_name.as_deref()
    }
    /// <p>This is a user-defined description of a VMware tag.</p>
    pub fn vmware_tag_description(&self) -> std::option::Option<&str> {
        self.vmware_tag_description.as_deref()
    }
}
impl VmwareTag {
    /// Creates a new builder-style object to manufacture [`VmwareTag`](crate::types::VmwareTag).
    pub fn builder() -> crate::types::builders::VmwareTagBuilder {
        crate::types::builders::VmwareTagBuilder::default()
    }
}

/// A builder for [`VmwareTag`](crate::types::VmwareTag).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VmwareTagBuilder {
    pub(crate) vmware_category: std::option::Option<std::string::String>,
    pub(crate) vmware_tag_name: std::option::Option<std::string::String>,
    pub(crate) vmware_tag_description: std::option::Option<std::string::String>,
}
impl VmwareTagBuilder {
    /// <p>The is the category of VMware.</p>
    pub fn vmware_category(mut self, input: impl Into<std::string::String>) -> Self {
        self.vmware_category = Some(input.into());
        self
    }
    /// <p>The is the category of VMware.</p>
    pub fn set_vmware_category(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vmware_category = input;
        self
    }
    /// <p>This is the user-defined name of a VMware tag.</p>
    pub fn vmware_tag_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vmware_tag_name = Some(input.into());
        self
    }
    /// <p>This is the user-defined name of a VMware tag.</p>
    pub fn set_vmware_tag_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vmware_tag_name = input;
        self
    }
    /// <p>This is a user-defined description of a VMware tag.</p>
    pub fn vmware_tag_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.vmware_tag_description = Some(input.into());
        self
    }
    /// <p>This is a user-defined description of a VMware tag.</p>
    pub fn set_vmware_tag_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vmware_tag_description = input;
        self
    }
    /// Consumes the builder and constructs a [`VmwareTag`](crate::types::VmwareTag).
    pub fn build(self) -> crate::types::VmwareTag {
        crate::types::VmwareTag {
            vmware_category: self.vmware_category,
            vmware_tag_name: self.vmware_tag_name,
            vmware_tag_description: self.vmware_tag_description,
        }
    }
}
