// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is your gateway's weekly maintenance start time including the day and time of the week. Note that values are in terms of the gateway's time zone. Can be weekly or monthly.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MaintenanceStartTime {
    /// <p>The day of the month component of the maintenance start time represented as an ordinal number from 1 to 28, where 1 represents the first day of the month and 28 represents the last day of the month.</p>
    #[doc(hidden)]
    pub day_of_month: std::option::Option<i32>,
    /// <p>An ordinal number between 0 and 6 that represents the day of the week, where 0 represents Sunday and 6 represents Saturday. The day of week is in the time zone of the gateway.</p>
    #[doc(hidden)]
    pub day_of_week: std::option::Option<i32>,
    /// <p>The hour component of the maintenance start time represented as <i>hh</i>, where <i>hh</i> is the hour (0 to 23). The hour of the day is in the time zone of the gateway.</p>
    #[doc(hidden)]
    pub hour_of_day: std::option::Option<i32>,
    /// <p>The minute component of the maintenance start time represented as <i>mm</i>, where <i>mm</i> is the minute (0 to 59). The minute of the hour is in the time zone of the gateway.</p>
    #[doc(hidden)]
    pub minute_of_hour: std::option::Option<i32>,
}
impl MaintenanceStartTime {
    /// <p>The day of the month component of the maintenance start time represented as an ordinal number from 1 to 28, where 1 represents the first day of the month and 28 represents the last day of the month.</p>
    pub fn day_of_month(&self) -> std::option::Option<i32> {
        self.day_of_month
    }
    /// <p>An ordinal number between 0 and 6 that represents the day of the week, where 0 represents Sunday and 6 represents Saturday. The day of week is in the time zone of the gateway.</p>
    pub fn day_of_week(&self) -> std::option::Option<i32> {
        self.day_of_week
    }
    /// <p>The hour component of the maintenance start time represented as <i>hh</i>, where <i>hh</i> is the hour (0 to 23). The hour of the day is in the time zone of the gateway.</p>
    pub fn hour_of_day(&self) -> std::option::Option<i32> {
        self.hour_of_day
    }
    /// <p>The minute component of the maintenance start time represented as <i>mm</i>, where <i>mm</i> is the minute (0 to 59). The minute of the hour is in the time zone of the gateway.</p>
    pub fn minute_of_hour(&self) -> std::option::Option<i32> {
        self.minute_of_hour
    }
}
impl MaintenanceStartTime {
    /// Creates a new builder-style object to manufacture [`MaintenanceStartTime`](crate::types::MaintenanceStartTime).
    pub fn builder() -> crate::types::builders::MaintenanceStartTimeBuilder {
        crate::types::builders::MaintenanceStartTimeBuilder::default()
    }
}

/// A builder for [`MaintenanceStartTime`](crate::types::MaintenanceStartTime).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MaintenanceStartTimeBuilder {
    pub(crate) day_of_month: std::option::Option<i32>,
    pub(crate) day_of_week: std::option::Option<i32>,
    pub(crate) hour_of_day: std::option::Option<i32>,
    pub(crate) minute_of_hour: std::option::Option<i32>,
}
impl MaintenanceStartTimeBuilder {
    /// <p>The day of the month component of the maintenance start time represented as an ordinal number from 1 to 28, where 1 represents the first day of the month and 28 represents the last day of the month.</p>
    pub fn day_of_month(mut self, input: i32) -> Self {
        self.day_of_month = Some(input);
        self
    }
    /// <p>The day of the month component of the maintenance start time represented as an ordinal number from 1 to 28, where 1 represents the first day of the month and 28 represents the last day of the month.</p>
    pub fn set_day_of_month(mut self, input: std::option::Option<i32>) -> Self {
        self.day_of_month = input;
        self
    }
    /// <p>An ordinal number between 0 and 6 that represents the day of the week, where 0 represents Sunday and 6 represents Saturday. The day of week is in the time zone of the gateway.</p>
    pub fn day_of_week(mut self, input: i32) -> Self {
        self.day_of_week = Some(input);
        self
    }
    /// <p>An ordinal number between 0 and 6 that represents the day of the week, where 0 represents Sunday and 6 represents Saturday. The day of week is in the time zone of the gateway.</p>
    pub fn set_day_of_week(mut self, input: std::option::Option<i32>) -> Self {
        self.day_of_week = input;
        self
    }
    /// <p>The hour component of the maintenance start time represented as <i>hh</i>, where <i>hh</i> is the hour (0 to 23). The hour of the day is in the time zone of the gateway.</p>
    pub fn hour_of_day(mut self, input: i32) -> Self {
        self.hour_of_day = Some(input);
        self
    }
    /// <p>The hour component of the maintenance start time represented as <i>hh</i>, where <i>hh</i> is the hour (0 to 23). The hour of the day is in the time zone of the gateway.</p>
    pub fn set_hour_of_day(mut self, input: std::option::Option<i32>) -> Self {
        self.hour_of_day = input;
        self
    }
    /// <p>The minute component of the maintenance start time represented as <i>mm</i>, where <i>mm</i> is the minute (0 to 59). The minute of the hour is in the time zone of the gateway.</p>
    pub fn minute_of_hour(mut self, input: i32) -> Self {
        self.minute_of_hour = Some(input);
        self
    }
    /// <p>The minute component of the maintenance start time represented as <i>mm</i>, where <i>mm</i> is the minute (0 to 59). The minute of the hour is in the time zone of the gateway.</p>
    pub fn set_minute_of_hour(mut self, input: std::option::Option<i32>) -> Self {
        self.minute_of_hour = input;
        self
    }
    /// Consumes the builder and constructs a [`MaintenanceStartTime`](crate::types::MaintenanceStartTime).
    pub fn build(self) -> crate::types::MaintenanceStartTime {
        crate::types::MaintenanceStartTime {
            day_of_month: self.day_of_month,
            day_of_week: self.day_of_week,
            hour_of_day: self.hour_of_day,
            minute_of_hour: self.minute_of_hour,
        }
    }
}
