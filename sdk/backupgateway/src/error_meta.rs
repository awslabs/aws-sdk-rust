// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The operation cannot proceed because you have insufficient permissions.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The operation cannot proceed because it is not supported.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The operation did not succeed because an internal error occurred. Try again later.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>A resource that is required for the action wasn't found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>TPS has been limited to protect against intentional or unintentional high request volumes.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The operation did not succeed because a validation error occurred.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateGatewayToServerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateGatewayToServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateGatewayToServerError> for Error {
    fn from(err: crate::error::AssociateGatewayToServerError) -> Self {
        match err {
            crate::error::AssociateGatewayToServerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AssociateGatewayToServerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AssociateGatewayToServerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateGatewayToServerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociateGatewayToServerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateGatewayError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGatewayError> for Error {
    fn from(err: crate::error::CreateGatewayError) -> Self {
        match err {
            crate::error::CreateGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateGatewayError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateGatewayError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteGatewayError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGatewayError> for Error {
    fn from(err: crate::error::DeleteGatewayError) -> Self {
        match err {
            crate::error::DeleteGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteGatewayError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteGatewayError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteHypervisorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteHypervisorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteHypervisorError> for Error {
    fn from(err: crate::error::DeleteHypervisorError) -> Self {
        match err {
            crate::error::DeleteHypervisorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteHypervisorError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteHypervisorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteHypervisorError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteHypervisorError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteHypervisorError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteHypervisorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateGatewayFromServerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateGatewayFromServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateGatewayFromServerError> for Error {
    fn from(err: crate::error::DisassociateGatewayFromServerError) -> Self {
        match err {
            crate::error::DisassociateGatewayFromServerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociateGatewayFromServerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateGatewayFromServerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisassociateGatewayFromServerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateGatewayFromServerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateGatewayFromServerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBandwidthRateLimitScheduleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBandwidthRateLimitScheduleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBandwidthRateLimitScheduleError> for Error {
    fn from(err: crate::error::GetBandwidthRateLimitScheduleError) -> Self {
        match err {
            crate::error::GetBandwidthRateLimitScheduleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetBandwidthRateLimitScheduleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetBandwidthRateLimitScheduleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetBandwidthRateLimitScheduleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetBandwidthRateLimitScheduleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGatewayError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGatewayError> for Error {
    fn from(err: crate::error::GetGatewayError) -> Self {
        match err {
            crate::error::GetGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetGatewayError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetGatewayError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetHypervisorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetHypervisorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetHypervisorError> for Error {
    fn from(err: crate::error::GetHypervisorError) -> Self {
        match err {
            crate::error::GetHypervisorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetHypervisorError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetHypervisorError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetHypervisorError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetHypervisorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetHypervisorPropertyMappingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetHypervisorPropertyMappingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetHypervisorPropertyMappingsError> for Error {
    fn from(err: crate::error::GetHypervisorPropertyMappingsError) -> Self {
        match err {
            crate::error::GetHypervisorPropertyMappingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetHypervisorPropertyMappingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetHypervisorPropertyMappingsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetHypervisorPropertyMappingsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetHypervisorPropertyMappingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVirtualMachineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVirtualMachineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVirtualMachineError> for Error {
    fn from(err: crate::error::GetVirtualMachineError) -> Self {
        match err {
            crate::error::GetVirtualMachineError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetVirtualMachineError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetVirtualMachineError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetVirtualMachineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetVirtualMachineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportHypervisorConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportHypervisorConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportHypervisorConfigurationError> for Error {
    fn from(err: crate::error::ImportHypervisorConfigurationError) -> Self {
        match err {
            crate::error::ImportHypervisorConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ImportHypervisorConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ImportHypervisorConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ImportHypervisorConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ImportHypervisorConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ImportHypervisorConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGatewaysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGatewaysError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGatewaysError> for Error {
    fn from(err: crate::error::ListGatewaysError) -> Self {
        match err {
            crate::error::ListGatewaysError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListGatewaysError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListGatewaysError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListGatewaysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListHypervisorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListHypervisorsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListHypervisorsError> for Error {
    fn from(err: crate::error::ListHypervisorsError) -> Self {
        match err {
            crate::error::ListHypervisorsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListHypervisorsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListHypervisorsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListHypervisorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVirtualMachinesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVirtualMachinesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVirtualMachinesError> for Error {
    fn from(err: crate::error::ListVirtualMachinesError) -> Self {
        match err {
            crate::error::ListVirtualMachinesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListVirtualMachinesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListVirtualMachinesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListVirtualMachinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutBandwidthRateLimitScheduleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutBandwidthRateLimitScheduleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutBandwidthRateLimitScheduleError> for Error {
    fn from(err: crate::error::PutBandwidthRateLimitScheduleError) -> Self {
        match err {
            crate::error::PutBandwidthRateLimitScheduleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutBandwidthRateLimitScheduleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutBandwidthRateLimitScheduleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutBandwidthRateLimitScheduleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutBandwidthRateLimitScheduleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutHypervisorPropertyMappingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutHypervisorPropertyMappingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutHypervisorPropertyMappingsError> for Error {
    fn from(err: crate::error::PutHypervisorPropertyMappingsError) -> Self {
        match err {
            crate::error::PutHypervisorPropertyMappingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutHypervisorPropertyMappingsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutHypervisorPropertyMappingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutHypervisorPropertyMappingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutHypervisorPropertyMappingsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutHypervisorPropertyMappingsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutHypervisorPropertyMappingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutMaintenanceStartTimeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutMaintenanceStartTimeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutMaintenanceStartTimeError> for Error {
    fn from(err: crate::error::PutMaintenanceStartTimeError) -> Self {
        match err {
            crate::error::PutMaintenanceStartTimeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutMaintenanceStartTimeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutMaintenanceStartTimeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutMaintenanceStartTimeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutMaintenanceStartTimeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutMaintenanceStartTimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::StartVirtualMachinesMetadataSyncError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StartVirtualMachinesMetadataSyncError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartVirtualMachinesMetadataSyncError> for Error {
    fn from(err: crate::error::StartVirtualMachinesMetadataSyncError) -> Self {
        match err {
            crate::error::StartVirtualMachinesMetadataSyncError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartVirtualMachinesMetadataSyncError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::StartVirtualMachinesMetadataSyncError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartVirtualMachinesMetadataSyncError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartVirtualMachinesMetadataSyncError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartVirtualMachinesMetadataSyncError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TestHypervisorConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::TestHypervisorConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TestHypervisorConfigurationError> for Error {
    fn from(err: crate::error::TestHypervisorConfigurationError) -> Self {
        match err {
            crate::error::TestHypervisorConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::TestHypervisorConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TestHypervisorConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TestHypervisorConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TestHypervisorConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TestHypervisorConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGatewayInformationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGatewayInformationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGatewayInformationError> for Error {
    fn from(err: crate::error::UpdateGatewayInformationError) -> Self {
        match err {
            crate::error::UpdateGatewayInformationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateGatewayInformationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateGatewayInformationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateGatewayInformationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateGatewayInformationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateGatewayInformationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGatewaySoftwareNowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGatewaySoftwareNowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGatewaySoftwareNowError> for Error {
    fn from(err: crate::error::UpdateGatewaySoftwareNowError) -> Self {
        match err {
            crate::error::UpdateGatewaySoftwareNowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateGatewaySoftwareNowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateGatewaySoftwareNowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateGatewaySoftwareNowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateGatewaySoftwareNowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateHypervisorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateHypervisorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateHypervisorError> for Error {
    fn from(err: crate::error::UpdateHypervisorError) -> Self {
        match err {
            crate::error::UpdateHypervisorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateHypervisorError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateHypervisorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateHypervisorError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateHypervisorError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateHypervisorError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateHypervisorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
