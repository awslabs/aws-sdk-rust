// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `GraphStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let graphstatus = unimplemented!();
/// match graphstatus {
///     GraphStatus::Available => { /* ... */ },
///     GraphStatus::Creating => { /* ... */ },
///     GraphStatus::Deleting => { /* ... */ },
///     GraphStatus::Failed => { /* ... */ },
///     GraphStatus::Importing => { /* ... */ },
///     GraphStatus::Resetting => { /* ... */ },
///     GraphStatus::Snapshotting => { /* ... */ },
///     GraphStatus::Starting => { /* ... */ },
///     GraphStatus::Stopped => { /* ... */ },
///     GraphStatus::Stopping => { /* ... */ },
///     GraphStatus::Updating => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `graphstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `GraphStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `GraphStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `GraphStatus::NewFeature` is defined.
/// Specifically, when `graphstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `GraphStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum GraphStatus {
    #[allow(missing_docs)] // documentation missing in model
    Available,
    #[allow(missing_docs)] // documentation missing in model
    Creating,
    #[allow(missing_docs)] // documentation missing in model
    Deleting,
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    Importing,
    #[allow(missing_docs)] // documentation missing in model
    Resetting,
    #[allow(missing_docs)] // documentation missing in model
    Snapshotting,
    #[allow(missing_docs)] // documentation missing in model
    Starting,
    #[allow(missing_docs)] // documentation missing in model
    Stopped,
    #[allow(missing_docs)] // documentation missing in model
    Stopping,
    #[allow(missing_docs)] // documentation missing in model
    Updating,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for GraphStatus {
    fn from(s: &str) -> Self {
        match s {
            "AVAILABLE" => GraphStatus::Available,
            "CREATING" => GraphStatus::Creating,
            "DELETING" => GraphStatus::Deleting,
            "FAILED" => GraphStatus::Failed,
            "IMPORTING" => GraphStatus::Importing,
            "RESETTING" => GraphStatus::Resetting,
            "SNAPSHOTTING" => GraphStatus::Snapshotting,
            "STARTING" => GraphStatus::Starting,
            "STOPPED" => GraphStatus::Stopped,
            "STOPPING" => GraphStatus::Stopping,
            "UPDATING" => GraphStatus::Updating,
            other => GraphStatus::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for GraphStatus {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(GraphStatus::from(s))
    }
}
impl GraphStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            GraphStatus::Available => "AVAILABLE",
            GraphStatus::Creating => "CREATING",
            GraphStatus::Deleting => "DELETING",
            GraphStatus::Failed => "FAILED",
            GraphStatus::Importing => "IMPORTING",
            GraphStatus::Resetting => "RESETTING",
            GraphStatus::Snapshotting => "SNAPSHOTTING",
            GraphStatus::Starting => "STARTING",
            GraphStatus::Stopped => "STOPPED",
            GraphStatus::Stopping => "STOPPING",
            GraphStatus::Updating => "UPDATING",
            GraphStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AVAILABLE",
            "CREATING",
            "DELETING",
            "FAILED",
            "IMPORTING",
            "RESETTING",
            "SNAPSHOTTING",
            "STARTING",
            "STOPPED",
            "STOPPING",
            "UPDATING",
        ]
    }
}
impl ::std::convert::AsRef<str> for GraphStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl GraphStatus {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for GraphStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            GraphStatus::Available => write!(f, "AVAILABLE"),
            GraphStatus::Creating => write!(f, "CREATING"),
            GraphStatus::Deleting => write!(f, "DELETING"),
            GraphStatus::Failed => write!(f, "FAILED"),
            GraphStatus::Importing => write!(f, "IMPORTING"),
            GraphStatus::Resetting => write!(f, "RESETTING"),
            GraphStatus::Snapshotting => write!(f, "SNAPSHOTTING"),
            GraphStatus::Starting => write!(f, "STARTING"),
            GraphStatus::Stopped => write!(f, "STOPPED"),
            GraphStatus::Stopping => write!(f, "STOPPING"),
            GraphStatus::Updating => write!(f, "UPDATING"),
            GraphStatus::Unknown(value) => write!(f, "{value}"),
        }
    }
}
