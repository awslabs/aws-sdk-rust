// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::execute_query::_execute_query_output::ExecuteQueryOutputBuilder;

pub use crate::operation::execute_query::_execute_query_input::ExecuteQueryInputBuilder;

impl crate::operation::execute_query::builders::ExecuteQueryInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::execute_query::ExecuteQueryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::execute_query::ExecuteQueryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.execute_query();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ExecuteQuery`.
///
/// <p>Execute an openCypher query.</p>
/// <p>When invoking this operation in a Neptune Analytics cluster, the IAM user or role making the request must have a policy attached that allows one of the following IAM actions in that cluster, depending on the query:</p>
/// <ul>
/// <li>
/// <p>neptune-graph:ReadDataViaQuery</p></li>
/// <li>
/// <p>neptune-graph:WriteDataViaQuery</p></li>
/// <li>
/// <p>neptune-graph:DeleteDataViaQuery</p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ExecuteQueryFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::execute_query::builders::ExecuteQueryInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::execute_query::ExecuteQueryOutput,
        crate::operation::execute_query::ExecuteQueryError,
    > for ExecuteQueryFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::execute_query::ExecuteQueryOutput,
            crate::operation::execute_query::ExecuteQueryError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ExecuteQueryFluentBuilder {
    /// Creates a new `ExecuteQuery`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ExecuteQuery as a reference.
    pub fn as_input(&self) -> &crate::operation::execute_query::builders::ExecuteQueryInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::execute_query::ExecuteQueryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::execute_query::ExecuteQueryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::execute_query::ExecuteQuery::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::execute_query::ExecuteQuery::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::execute_query::ExecuteQueryOutput,
        crate::operation::execute_query::ExecuteQueryError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier of the Neptune Analytics graph.</p>
    pub fn graph_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.graph_identifier(input.into());
        self
    }
    /// <p>The unique identifier of the Neptune Analytics graph.</p>
    pub fn set_graph_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_graph_identifier(input);
        self
    }
    /// <p>The unique identifier of the Neptune Analytics graph.</p>
    pub fn get_graph_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_graph_identifier()
    }
    /// <p>The query string to be executed.</p>
    pub fn query_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.query_string(input.into());
        self
    }
    /// <p>The query string to be executed.</p>
    pub fn set_query_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_query_string(input);
        self
    }
    /// <p>The query string to be executed.</p>
    pub fn get_query_string(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_query_string()
    }
    /// <p>The query language the query is written in. Currently only openCypher is supported.</p>
    pub fn language(mut self, input: crate::types::QueryLanguage) -> Self {
        self.inner = self.inner.language(input);
        self
    }
    /// <p>The query language the query is written in. Currently only openCypher is supported.</p>
    pub fn set_language(mut self, input: ::std::option::Option<crate::types::QueryLanguage>) -> Self {
        self.inner = self.inner.set_language(input);
        self
    }
    /// <p>The query language the query is written in. Currently only openCypher is supported.</p>
    pub fn get_language(&self) -> &::std::option::Option<crate::types::QueryLanguage> {
        self.inner.get_language()
    }
    ///
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The data parameters the query can use in JSON format. For example: {"name": "john", "age": 20}. (optional)</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::aws_smithy_types::Document) -> Self {
        self.inner = self.inner.parameters(k.into(), v);
        self
    }
    /// <p>The data parameters the query can use in JSON format. For example: {"name": "john", "age": 20}. (optional)</p>
    pub fn set_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>>,
    ) -> Self {
        self.inner = self.inner.set_parameters(input);
        self
    }
    /// <p>The data parameters the query can use in JSON format. For example: {"name": "john", "age": 20}. (optional)</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>> {
        self.inner.get_parameters()
    }
    /// <p>Query plan cache is a feature that saves the query plan and reuses it on successive executions of the same query. This reduces query latency, and works for both <code>READ</code> and <code>UPDATE</code> queries. The plan cache is an LRU cache with a 5 minute TTL and a capacity of 1000.</p>
    pub fn plan_cache(mut self, input: crate::types::PlanCacheType) -> Self {
        self.inner = self.inner.plan_cache(input);
        self
    }
    /// <p>Query plan cache is a feature that saves the query plan and reuses it on successive executions of the same query. This reduces query latency, and works for both <code>READ</code> and <code>UPDATE</code> queries. The plan cache is an LRU cache with a 5 minute TTL and a capacity of 1000.</p>
    pub fn set_plan_cache(mut self, input: ::std::option::Option<crate::types::PlanCacheType>) -> Self {
        self.inner = self.inner.set_plan_cache(input);
        self
    }
    /// <p>Query plan cache is a feature that saves the query plan and reuses it on successive executions of the same query. This reduces query latency, and works for both <code>READ</code> and <code>UPDATE</code> queries. The plan cache is an LRU cache with a 5 minute TTL and a capacity of 1000.</p>
    pub fn get_plan_cache(&self) -> &::std::option::Option<crate::types::PlanCacheType> {
        self.inner.get_plan_cache()
    }
    /// <p>The explain mode parameter returns a query explain instead of the actual query results. A query explain can be used to gather insights about the query execution such as planning decisions, time spent on each operator, solutions flowing etc.</p>
    pub fn explain_mode(mut self, input: crate::types::ExplainMode) -> Self {
        self.inner = self.inner.explain_mode(input);
        self
    }
    /// <p>The explain mode parameter returns a query explain instead of the actual query results. A query explain can be used to gather insights about the query execution such as planning decisions, time spent on each operator, solutions flowing etc.</p>
    pub fn set_explain_mode(mut self, input: ::std::option::Option<crate::types::ExplainMode>) -> Self {
        self.inner = self.inner.set_explain_mode(input);
        self
    }
    /// <p>The explain mode parameter returns a query explain instead of the actual query results. A query explain can be used to gather insights about the query execution such as planning decisions, time spent on each operator, solutions flowing etc.</p>
    pub fn get_explain_mode(&self) -> &::std::option::Option<crate::types::ExplainMode> {
        self.inner.get_explain_mode()
    }
    /// <p>Specifies the query timeout duration, in milliseconds. (optional)</p>
    pub fn query_timeout_milliseconds(mut self, input: i32) -> Self {
        self.inner = self.inner.query_timeout_milliseconds(input);
        self
    }
    /// <p>Specifies the query timeout duration, in milliseconds. (optional)</p>
    pub fn set_query_timeout_milliseconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_query_timeout_milliseconds(input);
        self
    }
    /// <p>Specifies the query timeout duration, in milliseconds. (optional)</p>
    pub fn get_query_timeout_milliseconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_query_timeout_milliseconds()
    }
}
