// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The request is denied because of missing access permissions.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Error occurred because of a conflict while performing an operation.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An internal server error occurred. Retry your request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>Thrown when attempting to delete or modify a resource that is currently being used by other resources or operations. For example, trying to delete an Automated Reasoning policy that is referenced by an active guardrail.</p>
    ResourceInUseException(crate::types::error::ResourceInUseException),
    /// <p>The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The number of requests exceeds the service quota. Resubmit your request later.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Returned if the service cannot complete the request.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>The number of requests exceeds the limit. Resubmit your request later.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The request contains more tags than can be associated with a resource (50 tags per resource). The maximum number of tags includes both existing tags and those included in your current request.</p>
    TooManyTagsException(crate::types::error::TooManyTagsException),
    /// <p>Input validation failed. Check your request parameters and retry the request.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceInUseException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ServiceUnavailableException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::TooManyTagsException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete_evaluation_job::BatchDeleteEvaluationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete_evaluation_job::BatchDeleteEvaluationJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_delete_evaluation_job::BatchDeleteEvaluationJobError> for Error {
    fn from(err: crate::operation::batch_delete_evaluation_job::BatchDeleteEvaluationJobError) -> Self {
        match err {
            crate::operation::batch_delete_evaluation_job::BatchDeleteEvaluationJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_delete_evaluation_job::BatchDeleteEvaluationJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_delete_evaluation_job::BatchDeleteEvaluationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_delete_evaluation_job::BatchDeleteEvaluationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_delete_evaluation_job::BatchDeleteEvaluationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_delete_evaluation_job::BatchDeleteEvaluationJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_delete_evaluation_job::BatchDeleteEvaluationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::cancel_automated_reasoning_policy_build_workflow::CancelAutomatedReasoningPolicyBuildWorkflowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::cancel_automated_reasoning_policy_build_workflow::CancelAutomatedReasoningPolicyBuildWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::cancel_automated_reasoning_policy_build_workflow::CancelAutomatedReasoningPolicyBuildWorkflowError> for Error {
    fn from(err: crate::operation::cancel_automated_reasoning_policy_build_workflow::CancelAutomatedReasoningPolicyBuildWorkflowError) -> Self {
        match err {
            crate::operation::cancel_automated_reasoning_policy_build_workflow::CancelAutomatedReasoningPolicyBuildWorkflowError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_automated_reasoning_policy_build_workflow::CancelAutomatedReasoningPolicyBuildWorkflowError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_automated_reasoning_policy_build_workflow::CancelAutomatedReasoningPolicyBuildWorkflowError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_automated_reasoning_policy_build_workflow::CancelAutomatedReasoningPolicyBuildWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_automated_reasoning_policy_build_workflow::CancelAutomatedReasoningPolicyBuildWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_automated_reasoning_policy_build_workflow::CancelAutomatedReasoningPolicyBuildWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError> for Error {
    fn from(err: crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError) -> Self {
        match err {
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError> for Error {
    fn from(err: crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError) -> Self {
        match err {
            crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_automated_reasoning_policy_test_case::CreateAutomatedReasoningPolicyTestCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError> for Error {
    fn from(err: crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError) -> Self {
        match err {
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_custom_model::CreateCustomModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_custom_model::CreateCustomModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_custom_model::CreateCustomModelError> for Error {
    fn from(err: crate::operation::create_custom_model::CreateCustomModelError) -> Self {
        match err {
            crate::operation::create_custom_model::CreateCustomModelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_custom_model::CreateCustomModelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_custom_model::CreateCustomModelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_custom_model::CreateCustomModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_custom_model::CreateCustomModelError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_custom_model::CreateCustomModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_custom_model::CreateCustomModelError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::create_custom_model::CreateCustomModelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_custom_model::CreateCustomModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError> for Error {
    fn from(err: crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError) -> Self {
        match err {
            crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_custom_model_deployment::CreateCustomModelDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_evaluation_job::CreateEvaluationJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_evaluation_job::CreateEvaluationJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_evaluation_job::CreateEvaluationJobError> for Error {
    fn from(err: crate::operation::create_evaluation_job::CreateEvaluationJobError) -> Self {
        match err {
            crate::operation::create_evaluation_job::CreateEvaluationJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_evaluation_job::CreateEvaluationJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_evaluation_job::CreateEvaluationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_evaluation_job::CreateEvaluationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_evaluation_job::CreateEvaluationJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_evaluation_job::CreateEvaluationJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_evaluation_job::CreateEvaluationJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_evaluation_job::CreateEvaluationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_foundation_model_agreement::CreateFoundationModelAgreementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_foundation_model_agreement::CreateFoundationModelAgreementError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_foundation_model_agreement::CreateFoundationModelAgreementError> for Error {
    fn from(err: crate::operation::create_foundation_model_agreement::CreateFoundationModelAgreementError) -> Self {
        match err {
            crate::operation::create_foundation_model_agreement::CreateFoundationModelAgreementError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_foundation_model_agreement::CreateFoundationModelAgreementError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_foundation_model_agreement::CreateFoundationModelAgreementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_foundation_model_agreement::CreateFoundationModelAgreementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_foundation_model_agreement::CreateFoundationModelAgreementError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_foundation_model_agreement::CreateFoundationModelAgreementError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_foundation_model_agreement::CreateFoundationModelAgreementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_guardrail::CreateGuardrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_guardrail::CreateGuardrailError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_guardrail::CreateGuardrailError> for Error {
    fn from(err: crate::operation::create_guardrail::CreateGuardrailError) -> Self {
        match err {
            crate::operation::create_guardrail::CreateGuardrailError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_guardrail::CreateGuardrailError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_guardrail::CreateGuardrailError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_guardrail::CreateGuardrailError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_guardrail::CreateGuardrailError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_guardrail::CreateGuardrailError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_guardrail::CreateGuardrailError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::create_guardrail::CreateGuardrailError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_guardrail::CreateGuardrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_guardrail_version::CreateGuardrailVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_guardrail_version::CreateGuardrailVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_guardrail_version::CreateGuardrailVersionError> for Error {
    fn from(err: crate::operation::create_guardrail_version::CreateGuardrailVersionError) -> Self {
        match err {
            crate::operation::create_guardrail_version::CreateGuardrailVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_guardrail_version::CreateGuardrailVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_guardrail_version::CreateGuardrailVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_guardrail_version::CreateGuardrailVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_guardrail_version::CreateGuardrailVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_guardrail_version::CreateGuardrailVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_guardrail_version::CreateGuardrailVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_guardrail_version::CreateGuardrailVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_inference_profile::CreateInferenceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_inference_profile::CreateInferenceProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_inference_profile::CreateInferenceProfileError> for Error {
    fn from(err: crate::operation::create_inference_profile::CreateInferenceProfileError) -> Self {
        match err {
            crate::operation::create_inference_profile::CreateInferenceProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_inference_profile::CreateInferenceProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_inference_profile::CreateInferenceProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_inference_profile::CreateInferenceProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_inference_profile::CreateInferenceProfileError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_inference_profile::CreateInferenceProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_inference_profile::CreateInferenceProfileError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::operation::create_inference_profile::CreateInferenceProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_inference_profile::CreateInferenceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError> for Error {
    fn from(err: crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError) -> Self {
        match err {
            crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_marketplace_model_endpoint::CreateMarketplaceModelEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model_copy_job::CreateModelCopyJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model_copy_job::CreateModelCopyJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_model_copy_job::CreateModelCopyJobError> for Error {
    fn from(err: crate::operation::create_model_copy_job::CreateModelCopyJobError) -> Self {
        match err {
            crate::operation::create_model_copy_job::CreateModelCopyJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_model_copy_job::CreateModelCopyJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_model_copy_job::CreateModelCopyJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_model_copy_job::CreateModelCopyJobError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::create_model_copy_job::CreateModelCopyJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model_customization_job::CreateModelCustomizationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_model_customization_job::CreateModelCustomizationJobError> for Error {
    fn from(err: crate::operation::create_model_customization_job::CreateModelCustomizationJobError) -> Self {
        match err {
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model_import_job::CreateModelImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model_import_job::CreateModelImportJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_model_import_job::CreateModelImportJobError> for Error {
    fn from(err: crate::operation::create_model_import_job::CreateModelImportJobError) -> Self {
        match err {
            crate::operation::create_model_import_job::CreateModelImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_model_import_job::CreateModelImportJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_model_import_job::CreateModelImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_model_import_job::CreateModelImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_model_import_job::CreateModelImportJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_model_import_job::CreateModelImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_model_import_job::CreateModelImportJobError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::create_model_import_job::CreateModelImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_model_import_job::CreateModelImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model_invocation_job::CreateModelInvocationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model_invocation_job::CreateModelInvocationJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_model_invocation_job::CreateModelInvocationJobError> for Error {
    fn from(err: crate::operation::create_model_invocation_job::CreateModelInvocationJobError) -> Self {
        match err {
            crate::operation::create_model_invocation_job::CreateModelInvocationJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_model_invocation_job::CreateModelInvocationJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_model_invocation_job::CreateModelInvocationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_model_invocation_job::CreateModelInvocationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_model_invocation_job::CreateModelInvocationJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_model_invocation_job::CreateModelInvocationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_model_invocation_job::CreateModelInvocationJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_model_invocation_job::CreateModelInvocationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_prompt_router::CreatePromptRouterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_prompt_router::CreatePromptRouterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_prompt_router::CreatePromptRouterError> for Error {
    fn from(err: crate::operation::create_prompt_router::CreatePromptRouterError) -> Self {
        match err {
            crate::operation::create_prompt_router::CreatePromptRouterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_prompt_router::CreatePromptRouterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_prompt_router::CreatePromptRouterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_prompt_router::CreatePromptRouterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_prompt_router::CreatePromptRouterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_prompt_router::CreatePromptRouterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_prompt_router::CreatePromptRouterError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::create_prompt_router::CreatePromptRouterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_prompt_router::CreatePromptRouterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError> for Error {
    fn from(err: crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError) -> Self {
        match err {
            crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_provisioned_model_throughput::CreateProvisionedModelThroughputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError> for Error {
    fn from(err: crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError) -> Self {
        match err {
            crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_automated_reasoning_policy::DeleteAutomatedReasoningPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError> for Error {
    fn from(err: crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError) -> Self {
        match err {
            crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_automated_reasoning_policy_build_workflow::DeleteAutomatedReasoningPolicyBuildWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError> for Error {
    fn from(err: crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError) -> Self {
        match err {
            crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError::ResourceInUseException(
                inner,
            ) => Error::ResourceInUseException(inner),
            crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::delete_automated_reasoning_policy_test_case::DeleteAutomatedReasoningPolicyTestCaseError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_custom_model::DeleteCustomModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_custom_model::DeleteCustomModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_custom_model::DeleteCustomModelError> for Error {
    fn from(err: crate::operation::delete_custom_model::DeleteCustomModelError) -> Self {
        match err {
            crate::operation::delete_custom_model::DeleteCustomModelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_custom_model::DeleteCustomModelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_custom_model::DeleteCustomModelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_custom_model::DeleteCustomModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_custom_model::DeleteCustomModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_custom_model::DeleteCustomModelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_custom_model::DeleteCustomModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_custom_model_deployment::DeleteCustomModelDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_custom_model_deployment::DeleteCustomModelDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_custom_model_deployment::DeleteCustomModelDeploymentError> for Error {
    fn from(err: crate::operation::delete_custom_model_deployment::DeleteCustomModelDeploymentError) -> Self {
        match err {
            crate::operation::delete_custom_model_deployment::DeleteCustomModelDeploymentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_custom_model_deployment::DeleteCustomModelDeploymentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_custom_model_deployment::DeleteCustomModelDeploymentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_custom_model_deployment::DeleteCustomModelDeploymentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_custom_model_deployment::DeleteCustomModelDeploymentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_custom_model_deployment::DeleteCustomModelDeploymentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_custom_model_deployment::DeleteCustomModelDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_foundation_model_agreement::DeleteFoundationModelAgreementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_foundation_model_agreement::DeleteFoundationModelAgreementError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_foundation_model_agreement::DeleteFoundationModelAgreementError> for Error {
    fn from(err: crate::operation::delete_foundation_model_agreement::DeleteFoundationModelAgreementError) -> Self {
        match err {
            crate::operation::delete_foundation_model_agreement::DeleteFoundationModelAgreementError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_foundation_model_agreement::DeleteFoundationModelAgreementError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_foundation_model_agreement::DeleteFoundationModelAgreementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_foundation_model_agreement::DeleteFoundationModelAgreementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_foundation_model_agreement::DeleteFoundationModelAgreementError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_foundation_model_agreement::DeleteFoundationModelAgreementError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_foundation_model_agreement::DeleteFoundationModelAgreementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_guardrail::DeleteGuardrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_guardrail::DeleteGuardrailError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_guardrail::DeleteGuardrailError> for Error {
    fn from(err: crate::operation::delete_guardrail::DeleteGuardrailError) -> Self {
        match err {
            crate::operation::delete_guardrail::DeleteGuardrailError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_guardrail::DeleteGuardrailError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_guardrail::DeleteGuardrailError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_guardrail::DeleteGuardrailError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_guardrail::DeleteGuardrailError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_guardrail::DeleteGuardrailError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_guardrail::DeleteGuardrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_imported_model::DeleteImportedModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_imported_model::DeleteImportedModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_imported_model::DeleteImportedModelError> for Error {
    fn from(err: crate::operation::delete_imported_model::DeleteImportedModelError) -> Self {
        match err {
            crate::operation::delete_imported_model::DeleteImportedModelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_imported_model::DeleteImportedModelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_imported_model::DeleteImportedModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_imported_model::DeleteImportedModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_imported_model::DeleteImportedModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_imported_model::DeleteImportedModelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_imported_model::DeleteImportedModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_inference_profile::DeleteInferenceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_inference_profile::DeleteInferenceProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_inference_profile::DeleteInferenceProfileError> for Error {
    fn from(err: crate::operation::delete_inference_profile::DeleteInferenceProfileError) -> Self {
        match err {
            crate::operation::delete_inference_profile::DeleteInferenceProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_inference_profile::DeleteInferenceProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_inference_profile::DeleteInferenceProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_inference_profile::DeleteInferenceProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_inference_profile::DeleteInferenceProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_inference_profile::DeleteInferenceProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_inference_profile::DeleteInferenceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_marketplace_model_endpoint::DeleteMarketplaceModelEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_marketplace_model_endpoint::DeleteMarketplaceModelEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_marketplace_model_endpoint::DeleteMarketplaceModelEndpointError> for Error {
    fn from(err: crate::operation::delete_marketplace_model_endpoint::DeleteMarketplaceModelEndpointError) -> Self {
        match err {
            crate::operation::delete_marketplace_model_endpoint::DeleteMarketplaceModelEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_marketplace_model_endpoint::DeleteMarketplaceModelEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_marketplace_model_endpoint::DeleteMarketplaceModelEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_marketplace_model_endpoint::DeleteMarketplaceModelEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_marketplace_model_endpoint::DeleteMarketplaceModelEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_marketplace_model_endpoint::DeleteMarketplaceModelEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_model_invocation_logging_configuration::DeleteModelInvocationLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_model_invocation_logging_configuration::DeleteModelInvocationLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_model_invocation_logging_configuration::DeleteModelInvocationLoggingConfigurationError> for Error {
    fn from(err: crate::operation::delete_model_invocation_logging_configuration::DeleteModelInvocationLoggingConfigurationError) -> Self {
        match err {
            crate::operation::delete_model_invocation_logging_configuration::DeleteModelInvocationLoggingConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_model_invocation_logging_configuration::DeleteModelInvocationLoggingConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_model_invocation_logging_configuration::DeleteModelInvocationLoggingConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_model_invocation_logging_configuration::DeleteModelInvocationLoggingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_prompt_router::DeletePromptRouterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_prompt_router::DeletePromptRouterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_prompt_router::DeletePromptRouterError> for Error {
    fn from(err: crate::operation::delete_prompt_router::DeletePromptRouterError) -> Self {
        match err {
            crate::operation::delete_prompt_router::DeletePromptRouterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_prompt_router::DeletePromptRouterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_prompt_router::DeletePromptRouterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_prompt_router::DeletePromptRouterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_prompt_router::DeletePromptRouterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_prompt_router::DeletePromptRouterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_provisioned_model_throughput::DeleteProvisionedModelThroughputError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_provisioned_model_throughput::DeleteProvisionedModelThroughputError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_provisioned_model_throughput::DeleteProvisionedModelThroughputError> for Error {
    fn from(err: crate::operation::delete_provisioned_model_throughput::DeleteProvisionedModelThroughputError) -> Self {
        match err {
            crate::operation::delete_provisioned_model_throughput::DeleteProvisionedModelThroughputError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_provisioned_model_throughput::DeleteProvisionedModelThroughputError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_provisioned_model_throughput::DeleteProvisionedModelThroughputError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_provisioned_model_throughput::DeleteProvisionedModelThroughputError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_provisioned_model_throughput::DeleteProvisionedModelThroughputError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_provisioned_model_throughput::DeleteProvisionedModelThroughputError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_provisioned_model_throughput::DeleteProvisionedModelThroughputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::deregister_marketplace_model_endpoint::DeregisterMarketplaceModelEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::deregister_marketplace_model_endpoint::DeregisterMarketplaceModelEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::deregister_marketplace_model_endpoint::DeregisterMarketplaceModelEndpointError> for Error {
    fn from(err: crate::operation::deregister_marketplace_model_endpoint::DeregisterMarketplaceModelEndpointError) -> Self {
        match err {
            crate::operation::deregister_marketplace_model_endpoint::DeregisterMarketplaceModelEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::deregister_marketplace_model_endpoint::DeregisterMarketplaceModelEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::deregister_marketplace_model_endpoint::DeregisterMarketplaceModelEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::deregister_marketplace_model_endpoint::DeregisterMarketplaceModelEndpointError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::deregister_marketplace_model_endpoint::DeregisterMarketplaceModelEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::deregister_marketplace_model_endpoint::DeregisterMarketplaceModelEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::deregister_marketplace_model_endpoint::DeregisterMarketplaceModelEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::export_automated_reasoning_policy_version::ExportAutomatedReasoningPolicyVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::export_automated_reasoning_policy_version::ExportAutomatedReasoningPolicyVersionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::export_automated_reasoning_policy_version::ExportAutomatedReasoningPolicyVersionError> for Error {
    fn from(err: crate::operation::export_automated_reasoning_policy_version::ExportAutomatedReasoningPolicyVersionError) -> Self {
        match err {
            crate::operation::export_automated_reasoning_policy_version::ExportAutomatedReasoningPolicyVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::export_automated_reasoning_policy_version::ExportAutomatedReasoningPolicyVersionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::export_automated_reasoning_policy_version::ExportAutomatedReasoningPolicyVersionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::export_automated_reasoning_policy_version::ExportAutomatedReasoningPolicyVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::export_automated_reasoning_policy_version::ExportAutomatedReasoningPolicyVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::export_automated_reasoning_policy_version::ExportAutomatedReasoningPolicyVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_automated_reasoning_policy::GetAutomatedReasoningPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy::GetAutomatedReasoningPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_automated_reasoning_policy::GetAutomatedReasoningPolicyError> for Error {
    fn from(err: crate::operation::get_automated_reasoning_policy::GetAutomatedReasoningPolicyError) -> Self {
        match err {
            crate::operation::get_automated_reasoning_policy::GetAutomatedReasoningPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_automated_reasoning_policy::GetAutomatedReasoningPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_automated_reasoning_policy::GetAutomatedReasoningPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_automated_reasoning_policy::GetAutomatedReasoningPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_automated_reasoning_policy::GetAutomatedReasoningPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_automated_reasoning_policy::GetAutomatedReasoningPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsError> for Error {
    fn from(err: crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsError) -> Self {
        match err {
            crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowError> for Error {
    fn from(err: crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowError) -> Self {
        match err {
            crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError>
    for Error
{
    fn from(
        err: crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError,
    ) -> Self {
        match err {
            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_next_scenario::GetAutomatedReasoningPolicyNextScenarioError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_next_scenario::GetAutomatedReasoningPolicyNextScenarioError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_automated_reasoning_policy_next_scenario::GetAutomatedReasoningPolicyNextScenarioError> for Error {
    fn from(err: crate::operation::get_automated_reasoning_policy_next_scenario::GetAutomatedReasoningPolicyNextScenarioError) -> Self {
        match err {
            crate::operation::get_automated_reasoning_policy_next_scenario::GetAutomatedReasoningPolicyNextScenarioError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_automated_reasoning_policy_next_scenario::GetAutomatedReasoningPolicyNextScenarioError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_automated_reasoning_policy_next_scenario::GetAutomatedReasoningPolicyNextScenarioError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_automated_reasoning_policy_next_scenario::GetAutomatedReasoningPolicyNextScenarioError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_automated_reasoning_policy_next_scenario::GetAutomatedReasoningPolicyNextScenarioError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_automated_reasoning_policy_next_scenario::GetAutomatedReasoningPolicyNextScenarioError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_test_case::GetAutomatedReasoningPolicyTestCaseError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_test_case::GetAutomatedReasoningPolicyTestCaseError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_automated_reasoning_policy_test_case::GetAutomatedReasoningPolicyTestCaseError> for Error {
    fn from(err: crate::operation::get_automated_reasoning_policy_test_case::GetAutomatedReasoningPolicyTestCaseError) -> Self {
        match err {
            crate::operation::get_automated_reasoning_policy_test_case::GetAutomatedReasoningPolicyTestCaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_automated_reasoning_policy_test_case::GetAutomatedReasoningPolicyTestCaseError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_automated_reasoning_policy_test_case::GetAutomatedReasoningPolicyTestCaseError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_automated_reasoning_policy_test_case::GetAutomatedReasoningPolicyTestCaseError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_automated_reasoning_policy_test_case::GetAutomatedReasoningPolicyTestCaseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_automated_reasoning_policy_test_case::GetAutomatedReasoningPolicyTestCaseError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_test_result::GetAutomatedReasoningPolicyTestResultError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_test_result::GetAutomatedReasoningPolicyTestResultError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_automated_reasoning_policy_test_result::GetAutomatedReasoningPolicyTestResultError> for Error {
    fn from(err: crate::operation::get_automated_reasoning_policy_test_result::GetAutomatedReasoningPolicyTestResultError) -> Self {
        match err {
            crate::operation::get_automated_reasoning_policy_test_result::GetAutomatedReasoningPolicyTestResultError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::get_automated_reasoning_policy_test_result::GetAutomatedReasoningPolicyTestResultError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_automated_reasoning_policy_test_result::GetAutomatedReasoningPolicyTestResultError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_automated_reasoning_policy_test_result::GetAutomatedReasoningPolicyTestResultError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_automated_reasoning_policy_test_result::GetAutomatedReasoningPolicyTestResultError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_automated_reasoning_policy_test_result::GetAutomatedReasoningPolicyTestResultError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_custom_model::GetCustomModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_custom_model::GetCustomModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_custom_model::GetCustomModelError> for Error {
    fn from(err: crate::operation::get_custom_model::GetCustomModelError) -> Self {
        match err {
            crate::operation::get_custom_model::GetCustomModelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_custom_model::GetCustomModelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_custom_model::GetCustomModelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_custom_model::GetCustomModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_custom_model::GetCustomModelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_custom_model::GetCustomModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_custom_model_deployment::GetCustomModelDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_custom_model_deployment::GetCustomModelDeploymentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_custom_model_deployment::GetCustomModelDeploymentError> for Error {
    fn from(err: crate::operation::get_custom_model_deployment::GetCustomModelDeploymentError) -> Self {
        match err {
            crate::operation::get_custom_model_deployment::GetCustomModelDeploymentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_custom_model_deployment::GetCustomModelDeploymentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_custom_model_deployment::GetCustomModelDeploymentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_custom_model_deployment::GetCustomModelDeploymentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_custom_model_deployment::GetCustomModelDeploymentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_custom_model_deployment::GetCustomModelDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_evaluation_job::GetEvaluationJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_evaluation_job::GetEvaluationJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_evaluation_job::GetEvaluationJobError> for Error {
    fn from(err: crate::operation::get_evaluation_job::GetEvaluationJobError) -> Self {
        match err {
            crate::operation::get_evaluation_job::GetEvaluationJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_evaluation_job::GetEvaluationJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_evaluation_job::GetEvaluationJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_evaluation_job::GetEvaluationJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_evaluation_job::GetEvaluationJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_evaluation_job::GetEvaluationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_foundation_model::GetFoundationModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_foundation_model::GetFoundationModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_foundation_model::GetFoundationModelError> for Error {
    fn from(err: crate::operation::get_foundation_model::GetFoundationModelError) -> Self {
        match err {
            crate::operation::get_foundation_model::GetFoundationModelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_foundation_model::GetFoundationModelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_foundation_model::GetFoundationModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_foundation_model::GetFoundationModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_foundation_model::GetFoundationModelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_foundation_model::GetFoundationModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityError> for Error {
    fn from(err: crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityError) -> Self {
        match err {
            crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_foundation_model_availability::GetFoundationModelAvailabilityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_guardrail::GetGuardrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_guardrail::GetGuardrailError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_guardrail::GetGuardrailError> for Error {
    fn from(err: crate::operation::get_guardrail::GetGuardrailError) -> Self {
        match err {
            crate::operation::get_guardrail::GetGuardrailError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_guardrail::GetGuardrailError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_guardrail::GetGuardrailError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_guardrail::GetGuardrailError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_guardrail::GetGuardrailError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_guardrail::GetGuardrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_imported_model::GetImportedModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_imported_model::GetImportedModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_imported_model::GetImportedModelError> for Error {
    fn from(err: crate::operation::get_imported_model::GetImportedModelError) -> Self {
        match err {
            crate::operation::get_imported_model::GetImportedModelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_imported_model::GetImportedModelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_imported_model::GetImportedModelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_imported_model::GetImportedModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_imported_model::GetImportedModelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_imported_model::GetImportedModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_inference_profile::GetInferenceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_inference_profile::GetInferenceProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_inference_profile::GetInferenceProfileError> for Error {
    fn from(err: crate::operation::get_inference_profile::GetInferenceProfileError) -> Self {
        match err {
            crate::operation::get_inference_profile::GetInferenceProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_inference_profile::GetInferenceProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_inference_profile::GetInferenceProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_inference_profile::GetInferenceProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_inference_profile::GetInferenceProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_inference_profile::GetInferenceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_marketplace_model_endpoint::GetMarketplaceModelEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_marketplace_model_endpoint::GetMarketplaceModelEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_marketplace_model_endpoint::GetMarketplaceModelEndpointError> for Error {
    fn from(err: crate::operation::get_marketplace_model_endpoint::GetMarketplaceModelEndpointError) -> Self {
        match err {
            crate::operation::get_marketplace_model_endpoint::GetMarketplaceModelEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_marketplace_model_endpoint::GetMarketplaceModelEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_marketplace_model_endpoint::GetMarketplaceModelEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_marketplace_model_endpoint::GetMarketplaceModelEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_marketplace_model_endpoint::GetMarketplaceModelEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_marketplace_model_endpoint::GetMarketplaceModelEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_copy_job::GetModelCopyJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_copy_job::GetModelCopyJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_model_copy_job::GetModelCopyJobError> for Error {
    fn from(err: crate::operation::get_model_copy_job::GetModelCopyJobError) -> Self {
        match err {
            crate::operation::get_model_copy_job::GetModelCopyJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_model_copy_job::GetModelCopyJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_model_copy_job::GetModelCopyJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_model_copy_job::GetModelCopyJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_model_copy_job::GetModelCopyJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_model_copy_job::GetModelCopyJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_customization_job::GetModelCustomizationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_customization_job::GetModelCustomizationJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_model_customization_job::GetModelCustomizationJobError> for Error {
    fn from(err: crate::operation::get_model_customization_job::GetModelCustomizationJobError) -> Self {
        match err {
            crate::operation::get_model_customization_job::GetModelCustomizationJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_model_customization_job::GetModelCustomizationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_model_customization_job::GetModelCustomizationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_model_customization_job::GetModelCustomizationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_model_customization_job::GetModelCustomizationJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_model_customization_job::GetModelCustomizationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_import_job::GetModelImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_import_job::GetModelImportJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_model_import_job::GetModelImportJobError> for Error {
    fn from(err: crate::operation::get_model_import_job::GetModelImportJobError) -> Self {
        match err {
            crate::operation::get_model_import_job::GetModelImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_model_import_job::GetModelImportJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_model_import_job::GetModelImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_model_import_job::GetModelImportJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_model_import_job::GetModelImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_model_import_job::GetModelImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_invocation_job::GetModelInvocationJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_invocation_job::GetModelInvocationJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_model_invocation_job::GetModelInvocationJobError> for Error {
    fn from(err: crate::operation::get_model_invocation_job::GetModelInvocationJobError) -> Self {
        match err {
            crate::operation::get_model_invocation_job::GetModelInvocationJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_model_invocation_job::GetModelInvocationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_model_invocation_job::GetModelInvocationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_model_invocation_job::GetModelInvocationJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_model_invocation_job::GetModelInvocationJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_model_invocation_job::GetModelInvocationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_model_invocation_logging_configuration::GetModelInvocationLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_model_invocation_logging_configuration::GetModelInvocationLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_model_invocation_logging_configuration::GetModelInvocationLoggingConfigurationError> for Error {
    fn from(err: crate::operation::get_model_invocation_logging_configuration::GetModelInvocationLoggingConfigurationError) -> Self {
        match err {
            crate::operation::get_model_invocation_logging_configuration::GetModelInvocationLoggingConfigurationError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::get_model_invocation_logging_configuration::GetModelInvocationLoggingConfigurationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_model_invocation_logging_configuration::GetModelInvocationLoggingConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_model_invocation_logging_configuration::GetModelInvocationLoggingConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_prompt_router::GetPromptRouterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_prompt_router::GetPromptRouterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_prompt_router::GetPromptRouterError> for Error {
    fn from(err: crate::operation::get_prompt_router::GetPromptRouterError) -> Self {
        match err {
            crate::operation::get_prompt_router::GetPromptRouterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_prompt_router::GetPromptRouterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_prompt_router::GetPromptRouterError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_prompt_router::GetPromptRouterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_prompt_router::GetPromptRouterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_prompt_router::GetPromptRouterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputError> for Error {
    fn from(err: crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputError) -> Self {
        match err {
            crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_use_case_for_model_access::GetUseCaseForModelAccessError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_use_case_for_model_access::GetUseCaseForModelAccessError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_use_case_for_model_access::GetUseCaseForModelAccessError> for Error {
    fn from(err: crate::operation::get_use_case_for_model_access::GetUseCaseForModelAccessError) -> Self {
        match err {
            crate::operation::get_use_case_for_model_access::GetUseCaseForModelAccessError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_use_case_for_model_access::GetUseCaseForModelAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_use_case_for_model_access::GetUseCaseForModelAccessError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_use_case_for_model_access::GetUseCaseForModelAccessError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_use_case_for_model_access::GetUseCaseForModelAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesError> for Error {
    fn from(err: crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesError) -> Self {
        match err {
            crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_automated_reasoning_policy_build_workflows::ListAutomatedReasoningPolicyBuildWorkflowsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_automated_reasoning_policy_build_workflows::ListAutomatedReasoningPolicyBuildWorkflowsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_automated_reasoning_policy_build_workflows::ListAutomatedReasoningPolicyBuildWorkflowsError> for Error {
    fn from(err: crate::operation::list_automated_reasoning_policy_build_workflows::ListAutomatedReasoningPolicyBuildWorkflowsError) -> Self {
        match err {
            crate::operation::list_automated_reasoning_policy_build_workflows::ListAutomatedReasoningPolicyBuildWorkflowsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_automated_reasoning_policy_build_workflows::ListAutomatedReasoningPolicyBuildWorkflowsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_automated_reasoning_policy_build_workflows::ListAutomatedReasoningPolicyBuildWorkflowsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_automated_reasoning_policy_build_workflows::ListAutomatedReasoningPolicyBuildWorkflowsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_automated_reasoning_policy_build_workflows::ListAutomatedReasoningPolicyBuildWorkflowsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_automated_reasoning_policy_build_workflows::ListAutomatedReasoningPolicyBuildWorkflowsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_automated_reasoning_policy_test_cases::ListAutomatedReasoningPolicyTestCasesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_automated_reasoning_policy_test_cases::ListAutomatedReasoningPolicyTestCasesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_automated_reasoning_policy_test_cases::ListAutomatedReasoningPolicyTestCasesError> for Error {
    fn from(err: crate::operation::list_automated_reasoning_policy_test_cases::ListAutomatedReasoningPolicyTestCasesError) -> Self {
        match err {
            crate::operation::list_automated_reasoning_policy_test_cases::ListAutomatedReasoningPolicyTestCasesError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_automated_reasoning_policy_test_cases::ListAutomatedReasoningPolicyTestCasesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_automated_reasoning_policy_test_cases::ListAutomatedReasoningPolicyTestCasesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_automated_reasoning_policy_test_cases::ListAutomatedReasoningPolicyTestCasesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_automated_reasoning_policy_test_cases::ListAutomatedReasoningPolicyTestCasesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_automated_reasoning_policy_test_cases::ListAutomatedReasoningPolicyTestCasesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_automated_reasoning_policy_test_results::ListAutomatedReasoningPolicyTestResultsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_automated_reasoning_policy_test_results::ListAutomatedReasoningPolicyTestResultsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_automated_reasoning_policy_test_results::ListAutomatedReasoningPolicyTestResultsError> for Error {
    fn from(err: crate::operation::list_automated_reasoning_policy_test_results::ListAutomatedReasoningPolicyTestResultsError) -> Self {
        match err {
            crate::operation::list_automated_reasoning_policy_test_results::ListAutomatedReasoningPolicyTestResultsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_automated_reasoning_policy_test_results::ListAutomatedReasoningPolicyTestResultsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_automated_reasoning_policy_test_results::ListAutomatedReasoningPolicyTestResultsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_automated_reasoning_policy_test_results::ListAutomatedReasoningPolicyTestResultsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_automated_reasoning_policy_test_results::ListAutomatedReasoningPolicyTestResultsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_automated_reasoning_policy_test_results::ListAutomatedReasoningPolicyTestResultsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_automated_reasoning_policy_test_results::ListAutomatedReasoningPolicyTestResultsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError> for Error {
    fn from(err: crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError) -> Self {
        match err {
            crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_custom_models::ListCustomModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_custom_models::ListCustomModelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_custom_models::ListCustomModelsError> for Error {
    fn from(err: crate::operation::list_custom_models::ListCustomModelsError) -> Self {
        match err {
            crate::operation::list_custom_models::ListCustomModelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_custom_models::ListCustomModelsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_custom_models::ListCustomModelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_custom_models::ListCustomModelsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_custom_models::ListCustomModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_evaluation_jobs::ListEvaluationJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_evaluation_jobs::ListEvaluationJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_evaluation_jobs::ListEvaluationJobsError> for Error {
    fn from(err: crate::operation::list_evaluation_jobs::ListEvaluationJobsError) -> Self {
        match err {
            crate::operation::list_evaluation_jobs::ListEvaluationJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_evaluation_jobs::ListEvaluationJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_evaluation_jobs::ListEvaluationJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_evaluation_jobs::ListEvaluationJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_evaluation_jobs::ListEvaluationJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersError> for Error {
    fn from(err: crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersError) -> Self {
        match err {
            crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_foundation_model_agreement_offers::ListFoundationModelAgreementOffersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_foundation_models::ListFoundationModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_foundation_models::ListFoundationModelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_foundation_models::ListFoundationModelsError> for Error {
    fn from(err: crate::operation::list_foundation_models::ListFoundationModelsError) -> Self {
        match err {
            crate::operation::list_foundation_models::ListFoundationModelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_foundation_models::ListFoundationModelsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_foundation_models::ListFoundationModelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_foundation_models::ListFoundationModelsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_foundation_models::ListFoundationModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_guardrails::ListGuardrailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_guardrails::ListGuardrailsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_guardrails::ListGuardrailsError> for Error {
    fn from(err: crate::operation::list_guardrails::ListGuardrailsError) -> Self {
        match err {
            crate::operation::list_guardrails::ListGuardrailsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_guardrails::ListGuardrailsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_guardrails::ListGuardrailsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_guardrails::ListGuardrailsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_guardrails::ListGuardrailsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_guardrails::ListGuardrailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_imported_models::ListImportedModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_imported_models::ListImportedModelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_imported_models::ListImportedModelsError> for Error {
    fn from(err: crate::operation::list_imported_models::ListImportedModelsError) -> Self {
        match err {
            crate::operation::list_imported_models::ListImportedModelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_imported_models::ListImportedModelsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_imported_models::ListImportedModelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_imported_models::ListImportedModelsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_imported_models::ListImportedModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_inference_profiles::ListInferenceProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_inference_profiles::ListInferenceProfilesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_inference_profiles::ListInferenceProfilesError> for Error {
    fn from(err: crate::operation::list_inference_profiles::ListInferenceProfilesError) -> Self {
        match err {
            crate::operation::list_inference_profiles::ListInferenceProfilesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_inference_profiles::ListInferenceProfilesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_inference_profiles::ListInferenceProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_inference_profiles::ListInferenceProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_inference_profiles::ListInferenceProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsError> for Error {
    fn from(err: crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsError) -> Self {
        match err {
            crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_model_copy_jobs::ListModelCopyJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_model_copy_jobs::ListModelCopyJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_model_copy_jobs::ListModelCopyJobsError> for Error {
    fn from(err: crate::operation::list_model_copy_jobs::ListModelCopyJobsError) -> Self {
        match err {
            crate::operation::list_model_copy_jobs::ListModelCopyJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_model_copy_jobs::ListModelCopyJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_model_copy_jobs::ListModelCopyJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_model_copy_jobs::ListModelCopyJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_model_copy_jobs::ListModelCopyJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_model_copy_jobs::ListModelCopyJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_model_customization_jobs::ListModelCustomizationJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_model_customization_jobs::ListModelCustomizationJobsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_model_customization_jobs::ListModelCustomizationJobsError> for Error {
    fn from(err: crate::operation::list_model_customization_jobs::ListModelCustomizationJobsError) -> Self {
        match err {
            crate::operation::list_model_customization_jobs::ListModelCustomizationJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_model_customization_jobs::ListModelCustomizationJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_model_customization_jobs::ListModelCustomizationJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_model_customization_jobs::ListModelCustomizationJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_model_customization_jobs::ListModelCustomizationJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_model_import_jobs::ListModelImportJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_model_import_jobs::ListModelImportJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_model_import_jobs::ListModelImportJobsError> for Error {
    fn from(err: crate::operation::list_model_import_jobs::ListModelImportJobsError) -> Self {
        match err {
            crate::operation::list_model_import_jobs::ListModelImportJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_model_import_jobs::ListModelImportJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_model_import_jobs::ListModelImportJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_model_import_jobs::ListModelImportJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_model_import_jobs::ListModelImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_model_invocation_jobs::ListModelInvocationJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_model_invocation_jobs::ListModelInvocationJobsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_model_invocation_jobs::ListModelInvocationJobsError> for Error {
    fn from(err: crate::operation::list_model_invocation_jobs::ListModelInvocationJobsError) -> Self {
        match err {
            crate::operation::list_model_invocation_jobs::ListModelInvocationJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_model_invocation_jobs::ListModelInvocationJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_model_invocation_jobs::ListModelInvocationJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_model_invocation_jobs::ListModelInvocationJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_model_invocation_jobs::ListModelInvocationJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_prompt_routers::ListPromptRoutersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_prompt_routers::ListPromptRoutersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_prompt_routers::ListPromptRoutersError> for Error {
    fn from(err: crate::operation::list_prompt_routers::ListPromptRoutersError) -> Self {
        match err {
            crate::operation::list_prompt_routers::ListPromptRoutersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_prompt_routers::ListPromptRoutersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_prompt_routers::ListPromptRoutersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_prompt_routers::ListPromptRoutersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_prompt_routers::ListPromptRoutersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsError> for Error {
    fn from(err: crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsError) -> Self {
        match err {
            crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_model_invocation_logging_configuration::PutModelInvocationLoggingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_model_invocation_logging_configuration::PutModelInvocationLoggingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_model_invocation_logging_configuration::PutModelInvocationLoggingConfigurationError> for Error {
    fn from(err: crate::operation::put_model_invocation_logging_configuration::PutModelInvocationLoggingConfigurationError) -> Self {
        match err {
            crate::operation::put_model_invocation_logging_configuration::PutModelInvocationLoggingConfigurationError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::put_model_invocation_logging_configuration::PutModelInvocationLoggingConfigurationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::put_model_invocation_logging_configuration::PutModelInvocationLoggingConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_model_invocation_logging_configuration::PutModelInvocationLoggingConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_model_invocation_logging_configuration::PutModelInvocationLoggingConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_use_case_for_model_access::PutUseCaseForModelAccessError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_use_case_for_model_access::PutUseCaseForModelAccessError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_use_case_for_model_access::PutUseCaseForModelAccessError> for Error {
    fn from(err: crate::operation::put_use_case_for_model_access::PutUseCaseForModelAccessError) -> Self {
        match err {
            crate::operation::put_use_case_for_model_access::PutUseCaseForModelAccessError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_use_case_for_model_access::PutUseCaseForModelAccessError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_use_case_for_model_access::PutUseCaseForModelAccessError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_use_case_for_model_access::PutUseCaseForModelAccessError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_use_case_for_model_access::PutUseCaseForModelAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_marketplace_model_endpoint::RegisterMarketplaceModelEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_marketplace_model_endpoint::RegisterMarketplaceModelEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::register_marketplace_model_endpoint::RegisterMarketplaceModelEndpointError> for Error {
    fn from(err: crate::operation::register_marketplace_model_endpoint::RegisterMarketplaceModelEndpointError) -> Self {
        match err {
            crate::operation::register_marketplace_model_endpoint::RegisterMarketplaceModelEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::register_marketplace_model_endpoint::RegisterMarketplaceModelEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::register_marketplace_model_endpoint::RegisterMarketplaceModelEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::register_marketplace_model_endpoint::RegisterMarketplaceModelEndpointError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::register_marketplace_model_endpoint::RegisterMarketplaceModelEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::register_marketplace_model_endpoint::RegisterMarketplaceModelEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::register_marketplace_model_endpoint::RegisterMarketplaceModelEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError> for Error {
    fn from(err: crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError) -> Self {
        match err {
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowError> for Error {
    fn from(err: crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowError) -> Self {
        match err {
            crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_evaluation_job::StopEvaluationJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_evaluation_job::StopEvaluationJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_evaluation_job::StopEvaluationJobError> for Error {
    fn from(err: crate::operation::stop_evaluation_job::StopEvaluationJobError) -> Self {
        match err {
            crate::operation::stop_evaluation_job::StopEvaluationJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_evaluation_job::StopEvaluationJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_evaluation_job::StopEvaluationJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_evaluation_job::StopEvaluationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_evaluation_job::StopEvaluationJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_evaluation_job::StopEvaluationJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_evaluation_job::StopEvaluationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_model_customization_job::StopModelCustomizationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_model_customization_job::StopModelCustomizationJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_model_customization_job::StopModelCustomizationJobError> for Error {
    fn from(err: crate::operation::stop_model_customization_job::StopModelCustomizationJobError) -> Self {
        match err {
            crate::operation::stop_model_customization_job::StopModelCustomizationJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::stop_model_customization_job::StopModelCustomizationJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::stop_model_customization_job::StopModelCustomizationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::stop_model_customization_job::StopModelCustomizationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_model_customization_job::StopModelCustomizationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::stop_model_customization_job::StopModelCustomizationJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::stop_model_customization_job::StopModelCustomizationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_model_invocation_job::StopModelInvocationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_model_invocation_job::StopModelInvocationJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_model_invocation_job::StopModelInvocationJobError> for Error {
    fn from(err: crate::operation::stop_model_invocation_job::StopModelInvocationJobError) -> Self {
        match err {
            crate::operation::stop_model_invocation_job::StopModelInvocationJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::stop_model_invocation_job::StopModelInvocationJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_model_invocation_job::StopModelInvocationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::stop_model_invocation_job::StopModelInvocationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_model_invocation_job::StopModelInvocationJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_model_invocation_job::StopModelInvocationJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_model_invocation_job::StopModelInvocationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError> for Error {
    fn from(err: crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError) -> Self {
        match err {
            crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsError> for Error {
    fn from(err: crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsError) -> Self {
        match err {
            crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError> for Error {
    fn from(err: crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError) -> Self {
        match err {
            crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError::ResourceInUseException(
                inner,
            ) => Error::ResourceInUseException(inner),
            crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_guardrail::UpdateGuardrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_guardrail::UpdateGuardrailError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_guardrail::UpdateGuardrailError> for Error {
    fn from(err: crate::operation::update_guardrail::UpdateGuardrailError) -> Self {
        match err {
            crate::operation::update_guardrail::UpdateGuardrailError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_guardrail::UpdateGuardrailError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_guardrail::UpdateGuardrailError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_guardrail::UpdateGuardrailError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_guardrail::UpdateGuardrailError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_guardrail::UpdateGuardrailError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_guardrail::UpdateGuardrailError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_guardrail::UpdateGuardrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError> for Error {
    fn from(err: crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError) -> Self {
        match err {
            crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_marketplace_model_endpoint::UpdateMarketplaceModelEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_provisioned_model_throughput::UpdateProvisionedModelThroughputError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_provisioned_model_throughput::UpdateProvisionedModelThroughputError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_provisioned_model_throughput::UpdateProvisionedModelThroughputError> for Error {
    fn from(err: crate::operation::update_provisioned_model_throughput::UpdateProvisionedModelThroughputError) -> Self {
        match err {
            crate::operation::update_provisioned_model_throughput::UpdateProvisionedModelThroughputError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_provisioned_model_throughput::UpdateProvisionedModelThroughputError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_provisioned_model_throughput::UpdateProvisionedModelThroughputError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_provisioned_model_throughput::UpdateProvisionedModelThroughputError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_provisioned_model_throughput::UpdateProvisionedModelThroughputError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_provisioned_model_throughput::UpdateProvisionedModelThroughputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceInUseException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ServiceUnavailableException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::TooManyTagsException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
