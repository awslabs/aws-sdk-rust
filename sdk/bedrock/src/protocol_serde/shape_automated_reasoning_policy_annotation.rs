// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_automated_reasoning_policy_annotation(
    object_4: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AutomatedReasoningPolicyAnnotation,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::AutomatedReasoningPolicyAnnotation::AddType(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_4.key("addType").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_add_type_annotation::ser_automated_reasoning_policy_add_type_annotation(
                &mut object_1,
                inner,
            )?;
            object_1.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::UpdateType(inner) => {
            #[allow(unused_mut)]
            let mut object_2 = object_4.key("updateType").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_update_type_annotation::ser_automated_reasoning_policy_update_type_annotation(
                &mut object_2,
                inner,
            )?;
            object_2.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::DeleteType(inner) => {
            #[allow(unused_mut)]
            let mut object_3 = object_4.key("deleteType").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_delete_type_annotation::ser_automated_reasoning_policy_delete_type_annotation(
                &mut object_3,
                inner,
            )?;
            object_3.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::AddVariable(inner) => {
            #[allow(unused_mut)]
            let mut object_4 = object_4.key("addVariable").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_add_variable_annotation::ser_automated_reasoning_policy_add_variable_annotation(
                &mut object_4,
                inner,
            )?;
            object_4.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::UpdateVariable(inner) => {
            #[allow(unused_mut)]
            let mut object_5 = object_4.key("updateVariable").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_update_variable_annotation::ser_automated_reasoning_policy_update_variable_annotation(&mut object_5, inner)?;
            object_5.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::DeleteVariable(inner) => {
            #[allow(unused_mut)]
            let mut object_6 = object_4.key("deleteVariable").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_delete_variable_annotation::ser_automated_reasoning_policy_delete_variable_annotation(&mut object_6, inner)?;
            object_6.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::AddRule(inner) => {
            #[allow(unused_mut)]
            let mut object_7 = object_4.key("addRule").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_add_rule_annotation::ser_automated_reasoning_policy_add_rule_annotation(
                &mut object_7,
                inner,
            )?;
            object_7.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::UpdateRule(inner) => {
            #[allow(unused_mut)]
            let mut object_8 = object_4.key("updateRule").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_update_rule_annotation::ser_automated_reasoning_policy_update_rule_annotation(
                &mut object_8,
                inner,
            )?;
            object_8.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::DeleteRule(inner) => {
            #[allow(unused_mut)]
            let mut object_9 = object_4.key("deleteRule").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_delete_rule_annotation::ser_automated_reasoning_policy_delete_rule_annotation(
                &mut object_9,
                inner,
            )?;
            object_9.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::AddRuleFromNaturalLanguage(inner) => {
            #[allow(unused_mut)]
            let mut object_10 = object_4.key("addRuleFromNaturalLanguage").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_add_rule_from_natural_language_annotation::ser_automated_reasoning_policy_add_rule_from_natural_language_annotation(&mut object_10, inner)?;
            object_10.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::UpdateFromRulesFeedback(inner) => {
            #[allow(unused_mut)]
            let mut object_11 = object_4.key("updateFromRulesFeedback").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_update_from_rule_feedback_annotation::ser_automated_reasoning_policy_update_from_rule_feedback_annotation(&mut object_11, inner)?;
            object_11.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::UpdateFromScenarioFeedback(inner) => {
            #[allow(unused_mut)]
            let mut object_12 = object_4.key("updateFromScenarioFeedback").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_update_from_scenario_feedback_annotation::ser_automated_reasoning_policy_update_from_scenario_feedback_annotation(&mut object_12, inner)?;
            object_12.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::IngestContent(inner) => {
            #[allow(unused_mut)]
            let mut object_13 = object_4.key("ingestContent").start_object();
            crate::protocol_serde::shape_automated_reasoning_policy_ingest_content_annotation::ser_automated_reasoning_policy_ingest_content_annotation(&mut object_13, inner)?;
            object_13.finish();
        }
        crate::types::AutomatedReasoningPolicyAnnotation::Unknown => {
            return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "AutomatedReasoningPolicyAnnotation",
            ))
        }
    }
    Ok(())
}

pub(crate) fn de_automated_reasoning_policy_annotation<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::AutomatedReasoningPolicyAnnotation>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => loop {
            match tokens.next().transpose()? {
                Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                    if let ::std::option::Option::Some(::std::result::Result::Ok(::aws_smithy_json::deserialize::Token::ValueNull { .. })) =
                        tokens.peek()
                    {
                        let _ = tokens.next().expect("peek returned a token")?;
                        continue;
                    }
                    let key = key.to_unescaped()?;
                    if key == "__type" {
                        ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                        continue;
                    }
                    if variant.is_some() {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                            "encountered mixed variants in union",
                        ));
                    }
                    variant = match key.as_ref() {
                            "addType" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::AddType(
                                    crate::protocol_serde::shape_automated_reasoning_policy_add_type_annotation::de_automated_reasoning_policy_add_type_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'addType' cannot be null"))?
                                ))
                            }
                            "updateType" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::UpdateType(
                                    crate::protocol_serde::shape_automated_reasoning_policy_update_type_annotation::de_automated_reasoning_policy_update_type_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'updateType' cannot be null"))?
                                ))
                            }
                            "deleteType" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::DeleteType(
                                    crate::protocol_serde::shape_automated_reasoning_policy_delete_type_annotation::de_automated_reasoning_policy_delete_type_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'deleteType' cannot be null"))?
                                ))
                            }
                            "addVariable" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::AddVariable(
                                    crate::protocol_serde::shape_automated_reasoning_policy_add_variable_annotation::de_automated_reasoning_policy_add_variable_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'addVariable' cannot be null"))?
                                ))
                            }
                            "updateVariable" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::UpdateVariable(
                                    crate::protocol_serde::shape_automated_reasoning_policy_update_variable_annotation::de_automated_reasoning_policy_update_variable_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'updateVariable' cannot be null"))?
                                ))
                            }
                            "deleteVariable" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::DeleteVariable(
                                    crate::protocol_serde::shape_automated_reasoning_policy_delete_variable_annotation::de_automated_reasoning_policy_delete_variable_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'deleteVariable' cannot be null"))?
                                ))
                            }
                            "addRule" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::AddRule(
                                    crate::protocol_serde::shape_automated_reasoning_policy_add_rule_annotation::de_automated_reasoning_policy_add_rule_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'addRule' cannot be null"))?
                                ))
                            }
                            "updateRule" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::UpdateRule(
                                    crate::protocol_serde::shape_automated_reasoning_policy_update_rule_annotation::de_automated_reasoning_policy_update_rule_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'updateRule' cannot be null"))?
                                ))
                            }
                            "deleteRule" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::DeleteRule(
                                    crate::protocol_serde::shape_automated_reasoning_policy_delete_rule_annotation::de_automated_reasoning_policy_delete_rule_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'deleteRule' cannot be null"))?
                                ))
                            }
                            "addRuleFromNaturalLanguage" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::AddRuleFromNaturalLanguage(
                                    crate::protocol_serde::shape_automated_reasoning_policy_add_rule_from_natural_language_annotation::de_automated_reasoning_policy_add_rule_from_natural_language_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'addRuleFromNaturalLanguage' cannot be null"))?
                                ))
                            }
                            "updateFromRulesFeedback" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::UpdateFromRulesFeedback(
                                    crate::protocol_serde::shape_automated_reasoning_policy_update_from_rule_feedback_annotation::de_automated_reasoning_policy_update_from_rule_feedback_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'updateFromRulesFeedback' cannot be null"))?
                                ))
                            }
                            "updateFromScenarioFeedback" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::UpdateFromScenarioFeedback(
                                    crate::protocol_serde::shape_automated_reasoning_policy_update_from_scenario_feedback_annotation::de_automated_reasoning_policy_update_from_scenario_feedback_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'updateFromScenarioFeedback' cannot be null"))?
                                ))
                            }
                            "ingestContent" => {
                                Some(crate::types::AutomatedReasoningPolicyAnnotation::IngestContent(
                                    crate::protocol_serde::shape_automated_reasoning_policy_ingest_content_annotation::de_automated_reasoning_policy_ingest_content_annotation(tokens)?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'ingestContent' cannot be null"))?
                                ))
                            }
                            _ => {
                                                                              ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                                                                              Some(crate::types::AutomatedReasoningPolicyAnnotation::Unknown)
                                                                            }
                        };
                }
                other => {
                    return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {other:?}"
                    )))
                }
            }
        },
        _ => {
            return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ))
        }
    }
    if variant.is_none() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "Union did not contain a valid variant.",
        ));
    }
    Ok(variant)
}
