// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_model_customization_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_model_customization_job::CreateModelCustomizationJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.base_model_identifier {
        object.key("baseModelIdentifier").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_request_token {
        object.key("clientRequestToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.custom_model_kms_key_id {
        object.key("customModelKmsKeyId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.custom_model_name {
        object.key("customModelName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.custom_model_tags {
        let mut array_6 = object.key("customModelTags").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.hyper_parameters {
        #[allow(unused_mut)]
        let mut object_10 = object.key("hyperParameters").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.job_name {
        object.key("jobName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.job_tags {
        let mut array_15 = object.key("jobTags").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_19 = object.key("outputDataConfig").start_object();
        crate::protocol_serde::shape_output_data_config::ser_output_data_config(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.role_arn {
        object.key("roleArn").string(var_20.as_str());
    }
    if let Some(var_21) = &input.training_data_config {
        #[allow(unused_mut)]
        let mut object_22 = object.key("trainingDataConfig").start_object();
        crate::protocol_serde::shape_training_data_config::ser_training_data_config(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.validation_data_config {
        #[allow(unused_mut)]
        let mut object_24 = object.key("validationDataConfig").start_object();
        crate::protocol_serde::shape_validation_data_config::ser_validation_data_config(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_26 = object.key("vpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_26, var_25)?;
        object_26.finish();
    }
    Ok(())
}
