// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_model_invocation_job_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_model_invocation_job::CreateModelInvocationJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("clientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.input_data_config {
        #[allow(unused_mut)]
        let mut object_3 = object.key("inputDataConfig").start_object();
        crate::protocol_serde::shape_model_invocation_job_input_data_config::ser_model_invocation_job_input_data_config(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.job_name {
        object.key("jobName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.model_id {
        object.key("modelId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("outputDataConfig").start_object();
        crate::protocol_serde::shape_model_invocation_job_output_data_config::ser_model_invocation_job_output_data_config(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.role_arn {
        object.key("roleArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.timeout_duration_in_hours {
        object.key("timeoutDurationInHours").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_15 = object.key("vpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
