// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_model_customization_job_output_correct_errors(
    mut builder: crate::operation::create_model_customization_job::builders::CreateModelCustomizationJobOutputBuilder,
) -> crate::operation::create_model_customization_job::builders::CreateModelCustomizationJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_provisioned_model_throughput_output_correct_errors(
    mut builder: crate::operation::create_provisioned_model_throughput::builders::CreateProvisionedModelThroughputOutputBuilder,
) -> crate::operation::create_provisioned_model_throughput::builders::CreateProvisionedModelThroughputOutputBuilder {
    if builder.provisioned_model_arn.is_none() {
        builder.provisioned_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_custom_model_output_correct_errors(
    mut builder: crate::operation::get_custom_model::builders::GetCustomModelOutputBuilder,
) -> crate::operation::get_custom_model::builders::GetCustomModelOutputBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.base_model_arn.is_none() {
        builder.base_model_arn = Some(Default::default())
    }
    if builder.training_data_config.is_none() {
        builder.training_data_config = {
            let builder = crate::types::builders::TrainingDataConfigBuilder::default();
            crate::serde_util::training_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::OutputDataConfigBuilder::default();
            crate::serde_util::output_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_model_customization_job_output_correct_errors(
    mut builder: crate::operation::get_model_customization_job::builders::GetModelCustomizationJobOutputBuilder,
) -> crate::operation::get_model_customization_job::builders::GetModelCustomizationJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.output_model_name.is_none() {
        builder.output_model_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.base_model_arn.is_none() {
        builder.base_model_arn = Some(Default::default())
    }
    if builder.hyper_parameters.is_none() {
        builder.hyper_parameters = Some(Default::default())
    }
    if builder.training_data_config.is_none() {
        builder.training_data_config = {
            let builder = crate::types::builders::TrainingDataConfigBuilder::default();
            crate::serde_util::training_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.validation_data_config.is_none() {
        builder.validation_data_config = {
            let builder = crate::types::builders::ValidationDataConfigBuilder::default();
            crate::serde_util::validation_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::OutputDataConfigBuilder::default();
            crate::serde_util::output_data_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_provisioned_model_throughput_output_correct_errors(
    mut builder: crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder,
) -> crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder {
    if builder.model_units.is_none() {
        builder.model_units = Some(Default::default())
    }
    if builder.desired_model_units.is_none() {
        builder.desired_model_units = Some(Default::default())
    }
    if builder.provisioned_model_name.is_none() {
        builder.provisioned_model_name = Some(Default::default())
    }
    if builder.provisioned_model_arn.is_none() {
        builder.provisioned_model_arn = Some(Default::default())
    }
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.desired_model_arn.is_none() {
        builder.desired_model_arn = Some(Default::default())
    }
    if builder.foundation_model_arn.is_none() {
        builder.foundation_model_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ProvisionedModelStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn training_data_config_correct_errors(
    mut builder: crate::types::builders::TrainingDataConfigBuilder,
) -> crate::types::builders::TrainingDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn output_data_config_correct_errors(
    mut builder: crate::types::builders::OutputDataConfigBuilder,
) -> crate::types::builders::OutputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_data_config_correct_errors(
    mut builder: crate::types::builders::ValidationDataConfigBuilder,
) -> crate::types::builders::ValidationDataConfigBuilder {
    if builder.validators.is_none() {
        builder.validators = Some(Default::default())
    }
    builder
}

pub(crate) fn foundation_model_details_correct_errors(
    mut builder: crate::types::builders::FoundationModelDetailsBuilder,
) -> crate::types::builders::FoundationModelDetailsBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_config_correct_errors(mut builder: crate::types::builders::VpcConfigBuilder) -> crate::types::builders::VpcConfigBuilder {
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_config_correct_errors(
    mut builder: crate::types::builders::CloudWatchConfigBuilder,
) -> crate::types::builders::CloudWatchConfigBuilder {
    if builder.log_group_name.is_none() {
        builder.log_group_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_model_summary_correct_errors(
    mut builder: crate::types::builders::CustomModelSummaryBuilder,
) -> crate::types::builders::CustomModelSummaryBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.base_model_arn.is_none() {
        builder.base_model_arn = Some(Default::default())
    }
    if builder.base_model_name.is_none() {
        builder.base_model_name = Some(Default::default())
    }
    builder
}

pub(crate) fn foundation_model_summary_correct_errors(
    mut builder: crate::types::builders::FoundationModelSummaryBuilder,
) -> crate::types::builders::FoundationModelSummaryBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn model_customization_job_summary_correct_errors(
    mut builder: crate::types::builders::ModelCustomizationJobSummaryBuilder,
) -> crate::types::builders::ModelCustomizationJobSummaryBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.base_model_arn.is_none() {
        builder.base_model_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ModelCustomizationJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn provisioned_model_summary_correct_errors(
    mut builder: crate::types::builders::ProvisionedModelSummaryBuilder,
) -> crate::types::builders::ProvisionedModelSummaryBuilder {
    if builder.provisioned_model_name.is_none() {
        builder.provisioned_model_name = Some(Default::default())
    }
    if builder.provisioned_model_arn.is_none() {
        builder.provisioned_model_arn = Some(Default::default())
    }
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.desired_model_arn.is_none() {
        builder.desired_model_arn = Some(Default::default())
    }
    if builder.foundation_model_arn.is_none() {
        builder.foundation_model_arn = Some(Default::default())
    }
    if builder.model_units.is_none() {
        builder.model_units = Some(Default::default())
    }
    if builder.desired_model_units.is_none() {
        builder.desired_model_units = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ProvisionedModelStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn s3_config_correct_errors(mut builder: crate::types::builders::S3ConfigBuilder) -> crate::types::builders::S3ConfigBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn validator_correct_errors(mut builder: crate::types::builders::ValidatorBuilder) -> crate::types::builders::ValidatorBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}
