// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_model_customization_job::_create_model_customization_job_output::CreateModelCustomizationJobOutputBuilder;

pub use crate::operation::create_model_customization_job::_create_model_customization_job_input::CreateModelCustomizationJobInputBuilder;

impl crate::operation::create_model_customization_job::builders::CreateModelCustomizationJobInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_model_customization_job::CreateModelCustomizationJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_model_customization_job();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateModelCustomizationJob`.
///
/// <p>Creates a fine-tuning job to customize a base model.</p>
/// <p>You specify the base foundation model and the location of the training data. After the model-customization job completes successfully, your custom model resource will be ready to use. Training data contains input and output text for each record in a JSONL format. Optionally, you can specify validation data in the same format as the training data. Amazon Bedrock returns validation loss metrics and output generations after the job completes.</p>
/// <p>Model-customization jobs are asynchronous and the completion time depends on the base model and the training/validation data size. To monitor a job, use the <code>GetModelCustomizationJob</code> operation to retrieve the job status.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/custom-models.html">Custom models</a> in the Bedrock User Guide.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateModelCustomizationJobFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_model_customization_job::builders::CreateModelCustomizationJobInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_model_customization_job::CreateModelCustomizationJobOutput,
        crate::operation::create_model_customization_job::CreateModelCustomizationJobError,
    > for CreateModelCustomizationJobFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_model_customization_job::CreateModelCustomizationJobOutput,
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateModelCustomizationJobFluentBuilder {
    /// Creates a new `CreateModelCustomizationJob`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateModelCustomizationJob as a reference.
    pub fn as_input(&self) -> &crate::operation::create_model_customization_job::builders::CreateModelCustomizationJobInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_model_customization_job::CreateModelCustomizationJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_model_customization_job::CreateModelCustomizationJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_model_customization_job::CreateModelCustomizationJob::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_model_customization_job::CreateModelCustomizationJob::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_model_customization_job::CreateModelCustomizationJobOutput,
        crate::operation::create_model_customization_job::CreateModelCustomizationJobError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Enter a unique name for the fine-tuning job.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p>Enter a unique name for the fine-tuning job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
    /// <p>Enter a unique name for the fine-tuning job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_name()
    }
    /// <p>Enter a name for the custom model.</p>
    pub fn custom_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.custom_model_name(input.into());
        self
    }
    /// <p>Enter a name for the custom model.</p>
    pub fn set_custom_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_custom_model_name(input);
        self
    }
    /// <p>Enter a name for the custom model.</p>
    pub fn get_custom_model_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_custom_model_name()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon Bedrock can assume to perform tasks on your behalf. For example, during model training, Amazon Bedrock needs your permission to read input data from an S3 bucket, write model artifacts to an S3 bucket. To pass this role to Amazon Bedrock, the caller of this API must have the <code>iam:PassRole</code> permission.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon Bedrock can assume to perform tasks on your behalf. For example, during model training, Amazon Bedrock needs your permission to read input data from an S3 bucket, write model artifacts to an S3 bucket. To pass this role to Amazon Bedrock, the caller of this API must have the <code>iam:PassRole</code> permission.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon Bedrock can assume to perform tasks on your behalf. For example, during model training, Amazon Bedrock needs your permission to read input data from an S3 bucket, write model artifacts to an S3 bucket. To pass this role to Amazon Bedrock, the caller of this API must have the <code>iam:PassRole</code> permission.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_role_arn()
    }
    /// <p>Unique token value that you can provide. The GetModelCustomizationJob response includes the same token value.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>Unique token value that you can provide. The GetModelCustomizationJob response includes the same token value.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>Unique token value that you can provide. The GetModelCustomizationJob response includes the same token value.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
    /// <p>Name of the base model.</p>
    pub fn base_model_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.base_model_identifier(input.into());
        self
    }
    /// <p>Name of the base model.</p>
    pub fn set_base_model_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_base_model_identifier(input);
        self
    }
    /// <p>Name of the base model.</p>
    pub fn get_base_model_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_base_model_identifier()
    }
    /// <p>The customization type.</p>
    pub fn customization_type(mut self, input: crate::types::CustomizationType) -> Self {
        self.inner = self.inner.customization_type(input);
        self
    }
    /// <p>The customization type.</p>
    pub fn set_customization_type(mut self, input: ::std::option::Option<crate::types::CustomizationType>) -> Self {
        self.inner = self.inner.set_customization_type(input);
        self
    }
    /// <p>The customization type.</p>
    pub fn get_customization_type(&self) -> &::std::option::Option<crate::types::CustomizationType> {
        self.inner.get_customization_type()
    }
    /// <p>The custom model is encrypted at rest using this key.</p>
    pub fn custom_model_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.custom_model_kms_key_id(input.into());
        self
    }
    /// <p>The custom model is encrypted at rest using this key.</p>
    pub fn set_custom_model_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_custom_model_kms_key_id(input);
        self
    }
    /// <p>The custom model is encrypted at rest using this key.</p>
    pub fn get_custom_model_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_custom_model_kms_key_id()
    }
    ///
    /// Appends an item to `jobTags`.
    ///
    /// To override the contents of this collection use [`set_job_tags`](Self::set_job_tags).
    ///
    /// <p>Assign tags to the job.</p>
    pub fn job_tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.job_tags(input);
        self
    }
    /// <p>Assign tags to the job.</p>
    pub fn set_job_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_job_tags(input);
        self
    }
    /// <p>Assign tags to the job.</p>
    pub fn get_job_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_job_tags()
    }
    ///
    /// Appends an item to `customModelTags`.
    ///
    /// To override the contents of this collection use [`set_custom_model_tags`](Self::set_custom_model_tags).
    ///
    /// <p>Assign tags to the custom model.</p>
    pub fn custom_model_tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.custom_model_tags(input);
        self
    }
    /// <p>Assign tags to the custom model.</p>
    pub fn set_custom_model_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_custom_model_tags(input);
        self
    }
    /// <p>Assign tags to the custom model.</p>
    pub fn get_custom_model_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_custom_model_tags()
    }
    /// <p>Information about the training dataset.</p>
    pub fn training_data_config(mut self, input: crate::types::TrainingDataConfig) -> Self {
        self.inner = self.inner.training_data_config(input);
        self
    }
    /// <p>Information about the training dataset.</p>
    pub fn set_training_data_config(mut self, input: ::std::option::Option<crate::types::TrainingDataConfig>) -> Self {
        self.inner = self.inner.set_training_data_config(input);
        self
    }
    /// <p>Information about the training dataset.</p>
    pub fn get_training_data_config(&self) -> &::std::option::Option<crate::types::TrainingDataConfig> {
        self.inner.get_training_data_config()
    }
    /// <p>Information about the validation dataset.</p>
    pub fn validation_data_config(mut self, input: crate::types::ValidationDataConfig) -> Self {
        self.inner = self.inner.validation_data_config(input);
        self
    }
    /// <p>Information about the validation dataset.</p>
    pub fn set_validation_data_config(mut self, input: ::std::option::Option<crate::types::ValidationDataConfig>) -> Self {
        self.inner = self.inner.set_validation_data_config(input);
        self
    }
    /// <p>Information about the validation dataset.</p>
    pub fn get_validation_data_config(&self) -> &::std::option::Option<crate::types::ValidationDataConfig> {
        self.inner.get_validation_data_config()
    }
    /// <p>S3 location for the output data.</p>
    pub fn output_data_config(mut self, input: crate::types::OutputDataConfig) -> Self {
        self.inner = self.inner.output_data_config(input);
        self
    }
    /// <p>S3 location for the output data.</p>
    pub fn set_output_data_config(mut self, input: ::std::option::Option<crate::types::OutputDataConfig>) -> Self {
        self.inner = self.inner.set_output_data_config(input);
        self
    }
    /// <p>S3 location for the output data.</p>
    pub fn get_output_data_config(&self) -> &::std::option::Option<crate::types::OutputDataConfig> {
        self.inner.get_output_data_config()
    }
    ///
    /// Adds a key-value pair to `hyperParameters`.
    ///
    /// To override the contents of this collection use [`set_hyper_parameters`](Self::set_hyper_parameters).
    ///
    /// <p>Parameters related to tuning the model.</p>
    pub fn hyper_parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.hyper_parameters(k.into(), v.into());
        self
    }
    /// <p>Parameters related to tuning the model.</p>
    pub fn set_hyper_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_hyper_parameters(input);
        self
    }
    /// <p>Parameters related to tuning the model.</p>
    pub fn get_hyper_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_hyper_parameters()
    }
    /// <p>VPC configuration (optional). Configuration parameters for the private Virtual Private Cloud (VPC) that contains the resources you are using for this job.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.inner = self.inner.vpc_config(input);
        self
    }
    /// <p>VPC configuration (optional). Configuration parameters for the private Virtual Private Cloud (VPC) that contains the resources you are using for this job.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.inner = self.inner.set_vpc_config(input);
        self
    }
    /// <p>VPC configuration (optional). Configuration parameters for the private Virtual Private Cloud (VPC) that contains the resources you are using for this job.</p>
    pub fn get_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfig> {
        self.inner.get_vpc_config()
    }
}
