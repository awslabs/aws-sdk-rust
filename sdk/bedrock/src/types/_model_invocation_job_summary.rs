// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a batch inference job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ModelInvocationJobSummary {
    /// <p>The Amazon Resource Name (ARN) of the batch inference job.</p>
    pub job_arn: ::std::string::String,
    /// <p>The name of the batch inference job.</p>
    pub job_name: ::std::string::String,
    /// <p>The unique identifier of the foundation model used for model inference.</p>
    pub model_id: ::std::string::String,
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the service role with permissions to carry out and manage batch inference. You can use the console to create a default service role or follow the steps at <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/batch-iam-sr.html">Create a service role for batch inference</a>.</p>
    pub role_arn: ::std::string::String,
    /// <p>The status of the batch inference job.</p>
    pub status: ::std::option::Option<crate::types::ModelInvocationJobStatus>,
    /// <p>If the batch inference job failed, this field contains a message describing why the job failed.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the batch inference job was submitted.</p>
    pub submit_time: ::aws_smithy_types::DateTime,
    /// <p>The time at which the batch inference job was last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the batch inference job ended.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Details about the location of the input to the batch inference job.</p>
    pub input_data_config: ::std::option::Option<crate::types::ModelInvocationJobInputDataConfig>,
    /// <p>Details about the location of the output of the batch inference job.</p>
    pub output_data_config: ::std::option::Option<crate::types::ModelInvocationJobOutputDataConfig>,
    /// <p>The configuration of the Virtual Private Cloud (VPC) for the data in the batch inference job. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/batch-inference-vpc">Protect batch inference jobs using a VPC</a>.</p>
    pub vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    /// <p>The number of hours after which the batch inference job was set to time out.</p>
    pub timeout_duration_in_hours: ::std::option::Option<i32>,
    /// <p>The time at which the batch inference job times or timed out.</p>
    pub job_expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ModelInvocationJobSummary {
    /// <p>The Amazon Resource Name (ARN) of the batch inference job.</p>
    pub fn job_arn(&self) -> &str {
        use std::ops::Deref;
        self.job_arn.deref()
    }
    /// <p>The name of the batch inference job.</p>
    pub fn job_name(&self) -> &str {
        use std::ops::Deref;
        self.job_name.deref()
    }
    /// <p>The unique identifier of the foundation model used for model inference.</p>
    pub fn model_id(&self) -> &str {
        use std::ops::Deref;
        self.model_id.deref()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the service role with permissions to carry out and manage batch inference. You can use the console to create a default service role or follow the steps at <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/batch-iam-sr.html">Create a service role for batch inference</a>.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The status of the batch inference job.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ModelInvocationJobStatus> {
        self.status.as_ref()
    }
    /// <p>If the batch inference job failed, this field contains a message describing why the job failed.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The time at which the batch inference job was submitted.</p>
    pub fn submit_time(&self) -> &::aws_smithy_types::DateTime {
        &self.submit_time
    }
    /// <p>The time at which the batch inference job was last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The time at which the batch inference job ended.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>Details about the location of the input to the batch inference job.</p>
    pub fn input_data_config(&self) -> ::std::option::Option<&crate::types::ModelInvocationJobInputDataConfig> {
        self.input_data_config.as_ref()
    }
    /// <p>Details about the location of the output of the batch inference job.</p>
    pub fn output_data_config(&self) -> ::std::option::Option<&crate::types::ModelInvocationJobOutputDataConfig> {
        self.output_data_config.as_ref()
    }
    /// <p>The configuration of the Virtual Private Cloud (VPC) for the data in the batch inference job. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/batch-inference-vpc">Protect batch inference jobs using a VPC</a>.</p>
    pub fn vpc_config(&self) -> ::std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
    /// <p>The number of hours after which the batch inference job was set to time out.</p>
    pub fn timeout_duration_in_hours(&self) -> ::std::option::Option<i32> {
        self.timeout_duration_in_hours
    }
    /// <p>The time at which the batch inference job times or timed out.</p>
    pub fn job_expiration_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.job_expiration_time.as_ref()
    }
}
impl ::std::fmt::Debug for ModelInvocationJobSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ModelInvocationJobSummary");
        formatter.field("job_arn", &self.job_arn);
        formatter.field("job_name", &self.job_name);
        formatter.field("model_id", &self.model_id);
        formatter.field("client_request_token", &self.client_request_token);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("status", &self.status);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("submit_time", &self.submit_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("end_time", &self.end_time);
        formatter.field("input_data_config", &self.input_data_config);
        formatter.field("output_data_config", &self.output_data_config);
        formatter.field("vpc_config", &self.vpc_config);
        formatter.field("timeout_duration_in_hours", &self.timeout_duration_in_hours);
        formatter.field("job_expiration_time", &self.job_expiration_time);
        formatter.finish()
    }
}
impl ModelInvocationJobSummary {
    /// Creates a new builder-style object to manufacture [`ModelInvocationJobSummary`](crate::types::ModelInvocationJobSummary).
    pub fn builder() -> crate::types::builders::ModelInvocationJobSummaryBuilder {
        crate::types::builders::ModelInvocationJobSummaryBuilder::default()
    }
}

/// A builder for [`ModelInvocationJobSummary`](crate::types::ModelInvocationJobSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ModelInvocationJobSummaryBuilder {
    pub(crate) job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ModelInvocationJobStatus>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) submit_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) input_data_config: ::std::option::Option<crate::types::ModelInvocationJobInputDataConfig>,
    pub(crate) output_data_config: ::std::option::Option<crate::types::ModelInvocationJobOutputDataConfig>,
    pub(crate) vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    pub(crate) timeout_duration_in_hours: ::std::option::Option<i32>,
    pub(crate) job_expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ModelInvocationJobSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the batch inference job.</p>
    /// This field is required.
    pub fn job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the batch inference job.</p>
    pub fn set_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the batch inference job.</p>
    pub fn get_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_arn
    }
    /// <p>The name of the batch inference job.</p>
    /// This field is required.
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the batch inference job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of the batch inference job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The unique identifier of the foundation model used for model inference.</p>
    /// This field is required.
    pub fn model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the foundation model used for model inference.</p>
    pub fn set_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_id = input;
        self
    }
    /// <p>The unique identifier of the foundation model used for model inference.</p>
    pub fn get_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_id
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>The Amazon Resource Name (ARN) of the service role with permissions to carry out and manage batch inference. You can use the console to create a default service role or follow the steps at <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/batch-iam-sr.html">Create a service role for batch inference</a>.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service role with permissions to carry out and manage batch inference. You can use the console to create a default service role or follow the steps at <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/batch-iam-sr.html">Create a service role for batch inference</a>.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service role with permissions to carry out and manage batch inference. You can use the console to create a default service role or follow the steps at <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/batch-iam-sr.html">Create a service role for batch inference</a>.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The status of the batch inference job.</p>
    pub fn status(mut self, input: crate::types::ModelInvocationJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the batch inference job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ModelInvocationJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the batch inference job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ModelInvocationJobStatus> {
        &self.status
    }
    /// <p>If the batch inference job failed, this field contains a message describing why the job failed.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the batch inference job failed, this field contains a message describing why the job failed.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>If the batch inference job failed, this field contains a message describing why the job failed.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The time at which the batch inference job was submitted.</p>
    /// This field is required.
    pub fn submit_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.submit_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the batch inference job was submitted.</p>
    pub fn set_submit_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.submit_time = input;
        self
    }
    /// <p>The time at which the batch inference job was submitted.</p>
    pub fn get_submit_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.submit_time
    }
    /// <p>The time at which the batch inference job was last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the batch inference job was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The time at which the batch inference job was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The time at which the batch inference job ended.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the batch inference job ended.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time at which the batch inference job ended.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>Details about the location of the input to the batch inference job.</p>
    /// This field is required.
    pub fn input_data_config(mut self, input: crate::types::ModelInvocationJobInputDataConfig) -> Self {
        self.input_data_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the location of the input to the batch inference job.</p>
    pub fn set_input_data_config(mut self, input: ::std::option::Option<crate::types::ModelInvocationJobInputDataConfig>) -> Self {
        self.input_data_config = input;
        self
    }
    /// <p>Details about the location of the input to the batch inference job.</p>
    pub fn get_input_data_config(&self) -> &::std::option::Option<crate::types::ModelInvocationJobInputDataConfig> {
        &self.input_data_config
    }
    /// <p>Details about the location of the output of the batch inference job.</p>
    /// This field is required.
    pub fn output_data_config(mut self, input: crate::types::ModelInvocationJobOutputDataConfig) -> Self {
        self.output_data_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the location of the output of the batch inference job.</p>
    pub fn set_output_data_config(mut self, input: ::std::option::Option<crate::types::ModelInvocationJobOutputDataConfig>) -> Self {
        self.output_data_config = input;
        self
    }
    /// <p>Details about the location of the output of the batch inference job.</p>
    pub fn get_output_data_config(&self) -> &::std::option::Option<crate::types::ModelInvocationJobOutputDataConfig> {
        &self.output_data_config
    }
    /// <p>The configuration of the Virtual Private Cloud (VPC) for the data in the batch inference job. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/batch-inference-vpc">Protect batch inference jobs using a VPC</a>.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the Virtual Private Cloud (VPC) for the data in the batch inference job. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/batch-inference-vpc">Protect batch inference jobs using a VPC</a>.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>The configuration of the Virtual Private Cloud (VPC) for the data in the batch inference job. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/batch-inference-vpc">Protect batch inference jobs using a VPC</a>.</p>
    pub fn get_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfig> {
        &self.vpc_config
    }
    /// <p>The number of hours after which the batch inference job was set to time out.</p>
    pub fn timeout_duration_in_hours(mut self, input: i32) -> Self {
        self.timeout_duration_in_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of hours after which the batch inference job was set to time out.</p>
    pub fn set_timeout_duration_in_hours(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_duration_in_hours = input;
        self
    }
    /// <p>The number of hours after which the batch inference job was set to time out.</p>
    pub fn get_timeout_duration_in_hours(&self) -> &::std::option::Option<i32> {
        &self.timeout_duration_in_hours
    }
    /// <p>The time at which the batch inference job times or timed out.</p>
    pub fn job_expiration_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.job_expiration_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the batch inference job times or timed out.</p>
    pub fn set_job_expiration_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.job_expiration_time = input;
        self
    }
    /// <p>The time at which the batch inference job times or timed out.</p>
    pub fn get_job_expiration_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.job_expiration_time
    }
    /// Consumes the builder and constructs a [`ModelInvocationJobSummary`](crate::types::ModelInvocationJobSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_arn`](crate::types::builders::ModelInvocationJobSummaryBuilder::job_arn)
    /// - [`job_name`](crate::types::builders::ModelInvocationJobSummaryBuilder::job_name)
    /// - [`model_id`](crate::types::builders::ModelInvocationJobSummaryBuilder::model_id)
    /// - [`role_arn`](crate::types::builders::ModelInvocationJobSummaryBuilder::role_arn)
    /// - [`submit_time`](crate::types::builders::ModelInvocationJobSummaryBuilder::submit_time)
    pub fn build(self) -> ::std::result::Result<crate::types::ModelInvocationJobSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ModelInvocationJobSummary {
            job_arn: self.job_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_arn",
                    "job_arn was not specified but it is required when building ModelInvocationJobSummary",
                )
            })?,
            job_name: self.job_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_name",
                    "job_name was not specified but it is required when building ModelInvocationJobSummary",
                )
            })?,
            model_id: self.model_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_id",
                    "model_id was not specified but it is required when building ModelInvocationJobSummary",
                )
            })?,
            client_request_token: self.client_request_token,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building ModelInvocationJobSummary",
                )
            })?,
            status: self.status,
            message: self.message,
            submit_time: self.submit_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "submit_time",
                    "submit_time was not specified but it is required when building ModelInvocationJobSummary",
                )
            })?,
            last_modified_time: self.last_modified_time,
            end_time: self.end_time,
            input_data_config: self.input_data_config,
            output_data_config: self.output_data_config,
            vpc_config: self.vpc_config,
            timeout_duration_in_hours: self.timeout_duration_in_hours,
            job_expiration_time: self.job_expiration_time,
        })
    }
}
impl ::std::fmt::Debug for ModelInvocationJobSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ModelInvocationJobSummaryBuilder");
        formatter.field("job_arn", &self.job_arn);
        formatter.field("job_name", &self.job_name);
        formatter.field("model_id", &self.model_id);
        formatter.field("client_request_token", &self.client_request_token);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("status", &self.status);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("submit_time", &self.submit_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("end_time", &self.end_time);
        formatter.field("input_data_config", &self.input_data_config);
        formatter.field("output_data_config", &self.output_data_config);
        formatter.field("vpc_config", &self.vpc_config);
        formatter.field("timeout_duration_in_hours", &self.timeout_duration_in_hours);
        formatter.field("job_expiration_time", &self.job_expiration_time);
        formatter.finish()
    }
}
