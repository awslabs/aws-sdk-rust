// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartConfigurationSessionOutput {
    /// <p>Token encapsulating state about the configuration session. Provide this token to the <code>GetLatestConfiguration</code> API to retrieve configuration data.</p> <important>
    /// <p>This token should only be used once in your first call to <code>GetLatestConfiguration</code>. You MUST use the new token in the <code>GetLatestConfiguration</code> response (<code>NextPollConfigurationToken</code>) in each subsequent call to <code>GetLatestConfiguration</code>.</p>
    /// </important>
    #[doc(hidden)]
    pub initial_configuration_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartConfigurationSessionOutput {
    /// <p>Token encapsulating state about the configuration session. Provide this token to the <code>GetLatestConfiguration</code> API to retrieve configuration data.</p> <important>
    /// <p>This token should only be used once in your first call to <code>GetLatestConfiguration</code>. You MUST use the new token in the <code>GetLatestConfiguration</code> response (<code>NextPollConfigurationToken</code>) in each subsequent call to <code>GetLatestConfiguration</code>.</p>
    /// </important>
    pub fn initial_configuration_token(&self) -> std::option::Option<&str> {
        self.initial_configuration_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartConfigurationSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartConfigurationSessionOutput {
    /// Creates a new builder-style object to manufacture [`StartConfigurationSessionOutput`](crate::operation::start_configuration_session::StartConfigurationSessionOutput).
    pub fn builder() -> crate::operation::start_configuration_session::builders::StartConfigurationSessionOutputBuilder{
        crate::operation::start_configuration_session::builders::StartConfigurationSessionOutputBuilder::default()
    }
}

/// A builder for [`StartConfigurationSessionOutput`](crate::operation::start_configuration_session::StartConfigurationSessionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartConfigurationSessionOutputBuilder {
    pub(crate) initial_configuration_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartConfigurationSessionOutputBuilder {
    /// <p>Token encapsulating state about the configuration session. Provide this token to the <code>GetLatestConfiguration</code> API to retrieve configuration data.</p> <important>
    /// <p>This token should only be used once in your first call to <code>GetLatestConfiguration</code>. You MUST use the new token in the <code>GetLatestConfiguration</code> response (<code>NextPollConfigurationToken</code>) in each subsequent call to <code>GetLatestConfiguration</code>.</p>
    /// </important>
    pub fn initial_configuration_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.initial_configuration_token = Some(input.into());
        self
    }
    /// <p>Token encapsulating state about the configuration session. Provide this token to the <code>GetLatestConfiguration</code> API to retrieve configuration data.</p> <important>
    /// <p>This token should only be used once in your first call to <code>GetLatestConfiguration</code>. You MUST use the new token in the <code>GetLatestConfiguration</code> response (<code>NextPollConfigurationToken</code>) in each subsequent call to <code>GetLatestConfiguration</code>.</p>
    /// </important>
    pub fn set_initial_configuration_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.initial_configuration_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartConfigurationSessionOutput`](crate::operation::start_configuration_session::StartConfigurationSessionOutput).
    pub fn build(
        self,
    ) -> crate::operation::start_configuration_session::StartConfigurationSessionOutput {
        crate::operation::start_configuration_session::StartConfigurationSessionOutput {
            initial_configuration_token: self.initial_configuration_token,
            _request_id: self._request_id,
        }
    }
}
