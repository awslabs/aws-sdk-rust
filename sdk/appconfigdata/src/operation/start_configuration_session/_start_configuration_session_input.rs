// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartConfigurationSessionInput {
    /// <p>The application ID or the application name.</p>
    #[doc(hidden)]
    pub application_identifier: std::option::Option<std::string::String>,
    /// <p>The environment ID or the environment name.</p>
    #[doc(hidden)]
    pub environment_identifier: std::option::Option<std::string::String>,
    /// <p>The configuration profile ID or the configuration profile name.</p>
    #[doc(hidden)]
    pub configuration_profile_identifier: std::option::Option<std::string::String>,
    /// <p>Sets a constraint on a session. If you specify a value of, for example, 60 seconds, then the client that established the session can't call <code>GetLatestConfiguration</code> more frequently then every 60 seconds.</p>
    #[doc(hidden)]
    pub required_minimum_poll_interval_in_seconds: std::option::Option<i32>,
}
impl StartConfigurationSessionInput {
    /// <p>The application ID or the application name.</p>
    pub fn application_identifier(&self) -> std::option::Option<&str> {
        self.application_identifier.as_deref()
    }
    /// <p>The environment ID or the environment name.</p>
    pub fn environment_identifier(&self) -> std::option::Option<&str> {
        self.environment_identifier.as_deref()
    }
    /// <p>The configuration profile ID or the configuration profile name.</p>
    pub fn configuration_profile_identifier(&self) -> std::option::Option<&str> {
        self.configuration_profile_identifier.as_deref()
    }
    /// <p>Sets a constraint on a session. If you specify a value of, for example, 60 seconds, then the client that established the session can't call <code>GetLatestConfiguration</code> more frequently then every 60 seconds.</p>
    pub fn required_minimum_poll_interval_in_seconds(&self) -> std::option::Option<i32> {
        self.required_minimum_poll_interval_in_seconds
    }
}
impl StartConfigurationSessionInput {
    /// Creates a new builder-style object to manufacture [`StartConfigurationSessionInput`](crate::operation::start_configuration_session::StartConfigurationSessionInput).
    pub fn builder() -> crate::operation::start_configuration_session::builders::StartConfigurationSessionInputBuilder{
        crate::operation::start_configuration_session::builders::StartConfigurationSessionInputBuilder::default()
    }
}

/// A builder for [`StartConfigurationSessionInput`](crate::operation::start_configuration_session::StartConfigurationSessionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartConfigurationSessionInputBuilder {
    pub(crate) application_identifier: std::option::Option<std::string::String>,
    pub(crate) environment_identifier: std::option::Option<std::string::String>,
    pub(crate) configuration_profile_identifier: std::option::Option<std::string::String>,
    pub(crate) required_minimum_poll_interval_in_seconds: std::option::Option<i32>,
}
impl StartConfigurationSessionInputBuilder {
    /// <p>The application ID or the application name.</p>
    pub fn application_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_identifier = Some(input.into());
        self
    }
    /// <p>The application ID or the application name.</p>
    pub fn set_application_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.application_identifier = input;
        self
    }
    /// <p>The environment ID or the environment name.</p>
    pub fn environment_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_identifier = Some(input.into());
        self
    }
    /// <p>The environment ID or the environment name.</p>
    pub fn set_environment_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.environment_identifier = input;
        self
    }
    /// <p>The configuration profile ID or the configuration profile name.</p>
    pub fn configuration_profile_identifier(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.configuration_profile_identifier = Some(input.into());
        self
    }
    /// <p>The configuration profile ID or the configuration profile name.</p>
    pub fn set_configuration_profile_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_profile_identifier = input;
        self
    }
    /// <p>Sets a constraint on a session. If you specify a value of, for example, 60 seconds, then the client that established the session can't call <code>GetLatestConfiguration</code> more frequently then every 60 seconds.</p>
    pub fn required_minimum_poll_interval_in_seconds(mut self, input: i32) -> Self {
        self.required_minimum_poll_interval_in_seconds = Some(input);
        self
    }
    /// <p>Sets a constraint on a session. If you specify a value of, for example, 60 seconds, then the client that established the session can't call <code>GetLatestConfiguration</code> more frequently then every 60 seconds.</p>
    pub fn set_required_minimum_poll_interval_in_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.required_minimum_poll_interval_in_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`StartConfigurationSessionInput`](crate::operation::start_configuration_session::StartConfigurationSessionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_configuration_session::StartConfigurationSessionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_configuration_session::StartConfigurationSessionInput {
                application_identifier: self.application_identifier,
                environment_identifier: self.environment_identifier,
                configuration_profile_identifier: self.configuration_profile_identifier,
                required_minimum_poll_interval_in_seconds: self
                    .required_minimum_poll_interval_in_seconds,
            },
        )
    }
}
