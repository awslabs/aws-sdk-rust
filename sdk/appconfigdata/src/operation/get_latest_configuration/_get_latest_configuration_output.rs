// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetLatestConfigurationOutput {
    /// <p>The latest token describing the current state of the configuration session. This MUST be provided to the next call to <code>GetLatestConfiguration.</code> </p>
    #[doc(hidden)]
    pub next_poll_configuration_token: std::option::Option<std::string::String>,
    /// <p>The amount of time the client should wait before polling for configuration updates again. Use <code>RequiredMinimumPollIntervalInSeconds</code> to set the desired poll interval.</p>
    #[doc(hidden)]
    pub next_poll_interval_in_seconds: i32,
    /// <p>A standard MIME type describing the format of the configuration content.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
    /// <p>The data of the configuration. This may be empty if the client already has the latest version of configuration.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<aws_smithy_types::Blob>,
    _request_id: Option<String>,
}
impl GetLatestConfigurationOutput {
    /// <p>The latest token describing the current state of the configuration session. This MUST be provided to the next call to <code>GetLatestConfiguration.</code> </p>
    pub fn next_poll_configuration_token(&self) -> std::option::Option<&str> {
        self.next_poll_configuration_token.as_deref()
    }
    /// <p>The amount of time the client should wait before polling for configuration updates again. Use <code>RequiredMinimumPollIntervalInSeconds</code> to set the desired poll interval.</p>
    pub fn next_poll_interval_in_seconds(&self) -> i32 {
        self.next_poll_interval_in_seconds
    }
    /// <p>A standard MIME type describing the format of the configuration content.</p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>The data of the configuration. This may be empty if the client already has the latest version of configuration.</p>
    pub fn configuration(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.configuration.as_ref()
    }
}
impl std::fmt::Debug for GetLatestConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetLatestConfigurationOutput");
        formatter.field(
            "next_poll_configuration_token",
            &self.next_poll_configuration_token,
        );
        formatter.field(
            "next_poll_interval_in_seconds",
            &self.next_poll_interval_in_seconds,
        );
        formatter.field("content_type", &self.content_type);
        formatter.field("configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for GetLatestConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLatestConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetLatestConfigurationOutput`](crate::operation::get_latest_configuration::GetLatestConfigurationOutput).
    pub fn builder(
    ) -> crate::operation::get_latest_configuration::builders::GetLatestConfigurationOutputBuilder
    {
        crate::operation::get_latest_configuration::builders::GetLatestConfigurationOutputBuilder::default()
    }
}

/// A builder for [`GetLatestConfigurationOutput`](crate::operation::get_latest_configuration::GetLatestConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetLatestConfigurationOutputBuilder {
    pub(crate) next_poll_configuration_token: std::option::Option<std::string::String>,
    pub(crate) next_poll_interval_in_seconds: std::option::Option<i32>,
    pub(crate) content_type: std::option::Option<std::string::String>,
    pub(crate) configuration: std::option::Option<aws_smithy_types::Blob>,
    _request_id: Option<String>,
}
impl GetLatestConfigurationOutputBuilder {
    /// <p>The latest token describing the current state of the configuration session. This MUST be provided to the next call to <code>GetLatestConfiguration.</code> </p>
    pub fn next_poll_configuration_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_poll_configuration_token = Some(input.into());
        self
    }
    /// <p>The latest token describing the current state of the configuration session. This MUST be provided to the next call to <code>GetLatestConfiguration.</code> </p>
    pub fn set_next_poll_configuration_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.next_poll_configuration_token = input;
        self
    }
    /// <p>The amount of time the client should wait before polling for configuration updates again. Use <code>RequiredMinimumPollIntervalInSeconds</code> to set the desired poll interval.</p>
    pub fn next_poll_interval_in_seconds(mut self, input: i32) -> Self {
        self.next_poll_interval_in_seconds = Some(input);
        self
    }
    /// <p>The amount of time the client should wait before polling for configuration updates again. Use <code>RequiredMinimumPollIntervalInSeconds</code> to set the desired poll interval.</p>
    pub fn set_next_poll_interval_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.next_poll_interval_in_seconds = input;
        self
    }
    /// <p>A standard MIME type describing the format of the configuration content.</p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p>A standard MIME type describing the format of the configuration content.</p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The data of the configuration. This may be empty if the client already has the latest version of configuration.</p>
    pub fn configuration(mut self, input: aws_smithy_types::Blob) -> Self {
        self.configuration = Some(input);
        self
    }
    /// <p>The data of the configuration. This may be empty if the client already has the latest version of configuration.</p>
    pub fn set_configuration(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.configuration = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetLatestConfigurationOutput`](crate::operation::get_latest_configuration::GetLatestConfigurationOutput).
    pub fn build(self) -> crate::operation::get_latest_configuration::GetLatestConfigurationOutput {
        crate::operation::get_latest_configuration::GetLatestConfigurationOutput {
            next_poll_configuration_token: self.next_poll_configuration_token,
            next_poll_interval_in_seconds: self.next_poll_interval_in_seconds.unwrap_or_default(),
            content_type: self.content_type,
            configuration: self.configuration,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for GetLatestConfigurationOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetLatestConfigurationOutputBuilder");
        formatter.field(
            "next_poll_configuration_token",
            &self.next_poll_configuration_token,
        );
        formatter.field(
            "next_poll_interval_in_seconds",
            &self.next_poll_interval_in_seconds,
        );
        formatter.field("content_type", &self.content_type);
        formatter.field("configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
