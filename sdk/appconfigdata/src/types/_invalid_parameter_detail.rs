// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an invalid parameter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InvalidParameterDetail {
    /// <p>The reason the parameter is invalid.</p>
    #[doc(hidden)]
    pub problem: std::option::Option<crate::types::InvalidParameterProblem>,
}
impl InvalidParameterDetail {
    /// <p>The reason the parameter is invalid.</p>
    pub fn problem(&self) -> std::option::Option<&crate::types::InvalidParameterProblem> {
        self.problem.as_ref()
    }
}
impl InvalidParameterDetail {
    /// Creates a new builder-style object to manufacture [`InvalidParameterDetail`](crate::types::InvalidParameterDetail).
    pub fn builder() -> crate::types::builders::InvalidParameterDetailBuilder {
        crate::types::builders::InvalidParameterDetailBuilder::default()
    }
}

/// A builder for [`InvalidParameterDetail`](crate::types::InvalidParameterDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InvalidParameterDetailBuilder {
    pub(crate) problem: std::option::Option<crate::types::InvalidParameterProblem>,
}
impl InvalidParameterDetailBuilder {
    /// <p>The reason the parameter is invalid.</p>
    pub fn problem(mut self, input: crate::types::InvalidParameterProblem) -> Self {
        self.problem = Some(input);
        self
    }
    /// <p>The reason the parameter is invalid.</p>
    pub fn set_problem(
        mut self,
        input: std::option::Option<crate::types::InvalidParameterProblem>,
    ) -> Self {
        self.problem = input;
        self
    }
    /// Consumes the builder and constructs a [`InvalidParameterDetail`](crate::types::InvalidParameterDetail).
    pub fn build(self) -> crate::types::InvalidParameterDetail {
        crate::types::InvalidParameterDetail {
            problem: self.problem,
        }
    }
}
