// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Cancels in-progress environment configuration update or application version
/// deployment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AbortEnvironmentUpdate {
    _private: (),
}
impl AbortEnvironmentUpdate {
    /// Creates a new builder-style object to manufacture [`AbortEnvironmentUpdateInput`](crate::input::AbortEnvironmentUpdateInput)
    pub fn builder() -> crate::input::abort_environment_update_input::Builder {
        crate::input::abort_environment_update_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AbortEnvironmentUpdate {
    type Output = std::result::Result<
        crate::output::AbortEnvironmentUpdateOutput,
        crate::error::AbortEnvironmentUpdateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_abort_environment_update_error(response)
        } else {
            crate::operation_deser::parse_abort_environment_update_response(response)
        }
    }
}

/// <p>Applies a scheduled managed action immediately. A managed action can be applied only if
/// its status is <code>Scheduled</code>. Get the status and action ID of a managed action with
/// <a>DescribeEnvironmentManagedActions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ApplyEnvironmentManagedAction {
    _private: (),
}
impl ApplyEnvironmentManagedAction {
    /// Creates a new builder-style object to manufacture [`ApplyEnvironmentManagedActionInput`](crate::input::ApplyEnvironmentManagedActionInput)
    pub fn builder() -> crate::input::apply_environment_managed_action_input::Builder {
        crate::input::apply_environment_managed_action_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ApplyEnvironmentManagedAction {
    type Output = std::result::Result<
        crate::output::ApplyEnvironmentManagedActionOutput,
        crate::error::ApplyEnvironmentManagedActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_apply_environment_managed_action_error(response)
        } else {
            crate::operation_deser::parse_apply_environment_managed_action_response(response)
        }
    }
}

/// <p>Add or change the operations role used by an environment. After this call is made, Elastic Beanstalk
/// uses the associated operations role for permissions to downstream services during subsequent
/// calls acting on this environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the
/// <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateEnvironmentOperationsRole {
    _private: (),
}
impl AssociateEnvironmentOperationsRole {
    /// Creates a new builder-style object to manufacture [`AssociateEnvironmentOperationsRoleInput`](crate::input::AssociateEnvironmentOperationsRoleInput)
    pub fn builder() -> crate::input::associate_environment_operations_role_input::Builder {
        crate::input::associate_environment_operations_role_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateEnvironmentOperationsRole {
    type Output = std::result::Result<
        crate::output::AssociateEnvironmentOperationsRoleOutput,
        crate::error::AssociateEnvironmentOperationsRoleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_environment_operations_role_error(response)
        } else {
            crate::operation_deser::parse_associate_environment_operations_role_response(response)
        }
    }
}

/// <p>Checks if the specified CNAME is available.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CheckDNSAvailability {
    _private: (),
}
impl CheckDNSAvailability {
    /// Creates a new builder-style object to manufacture [`CheckDnsAvailabilityInput`](crate::input::CheckDnsAvailabilityInput)
    pub fn builder() -> crate::input::check_dns_availability_input::Builder {
        crate::input::check_dns_availability_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CheckDNSAvailability {
    type Output = std::result::Result<
        crate::output::CheckDnsAvailabilityOutput,
        crate::error::CheckDNSAvailabilityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_check_dns_availability_error(response)
        } else {
            crate::operation_deser::parse_check_dns_availability_response(response)
        }
    }
}

/// <p>Create or update a group of environments that each run a separate component of a single
/// application. Takes a list of version labels that specify application source bundles for each
/// of the environments to create or update. The name of each environment and other required
/// information must be included in the source bundles in an environment manifest named
/// <code>env.yaml</code>. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html">Compose Environments</a>
/// for details.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ComposeEnvironments {
    _private: (),
}
impl ComposeEnvironments {
    /// Creates a new builder-style object to manufacture [`ComposeEnvironmentsInput`](crate::input::ComposeEnvironmentsInput)
    pub fn builder() -> crate::input::compose_environments_input::Builder {
        crate::input::compose_environments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ComposeEnvironments {
    type Output = std::result::Result<
        crate::output::ComposeEnvironmentsOutput,
        crate::error::ComposeEnvironmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_compose_environments_error(response)
        } else {
            crate::operation_deser::parse_compose_environments_response(response)
        }
    }
}

/// <p>Creates an application that has one configuration template named <code>default</code>
/// and no application versions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateApplication {
    _private: (),
}
impl CreateApplication {
    /// Creates a new builder-style object to manufacture [`CreateApplicationInput`](crate::input::CreateApplicationInput)
    pub fn builder() -> crate::input::create_application_input::Builder {
        crate::input::create_application_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateApplication {
    type Output = std::result::Result<
        crate::output::CreateApplicationOutput,
        crate::error::CreateApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_application_error(response)
        } else {
            crate::operation_deser::parse_create_application_response(response)
        }
    }
}

/// <p>Creates an application version for the specified application. You can create an
/// application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the
/// output of an AWS CodeBuild build as follows:</p>
/// <p>Specify a commit in an AWS CodeCommit repository with
/// <code>SourceBuildInformation</code>.</p>
/// <p>Specify a build in an AWS CodeBuild with <code>SourceBuildInformation</code> and
/// <code>BuildConfiguration</code>.</p>
/// <p>Specify a source bundle in S3 with <code>SourceBundle</code>
/// </p>
/// <p>Omit both <code>SourceBuildInformation</code> and <code>SourceBundle</code> to use the
/// default sample application.</p>
/// <note>
/// <p>After you create an application version with a specified Amazon S3 bucket and key
/// location, you can't change that Amazon S3 location. If you change the Amazon S3 location,
/// you receive an exception when you attempt to launch an environment from the application
/// version.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateApplicationVersion {
    _private: (),
}
impl CreateApplicationVersion {
    /// Creates a new builder-style object to manufacture [`CreateApplicationVersionInput`](crate::input::CreateApplicationVersionInput)
    pub fn builder() -> crate::input::create_application_version_input::Builder {
        crate::input::create_application_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateApplicationVersion {
    type Output = std::result::Result<
        crate::output::CreateApplicationVersionOutput,
        crate::error::CreateApplicationVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_application_version_error(response)
        } else {
            crate::operation_deser::parse_create_application_version_response(response)
        }
    }
}

/// <p>Creates an AWS Elastic Beanstalk configuration template, associated with a specific Elastic Beanstalk
/// application. You define application configuration settings in a configuration template. You
/// can then use the configuration template to deploy different versions of the application with
/// the same configuration settings.</p>
/// <p>Templates aren't associated with any environment. The <code>EnvironmentName</code>
/// response element is always <code>null</code>.</p>
/// <p>Related Topics</p>
/// <ul>
/// <li>
/// <p>
/// <a>DescribeConfigurationOptions</a>
/// </p>
/// </li>
/// <li>
/// <p>
/// <a>DescribeConfigurationSettings</a>
/// </p>
/// </li>
/// <li>
/// <p>
/// <a>ListAvailableSolutionStacks</a>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateConfigurationTemplate {
    _private: (),
}
impl CreateConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`CreateConfigurationTemplateInput`](crate::input::CreateConfigurationTemplateInput)
    pub fn builder() -> crate::input::create_configuration_template_input::Builder {
        crate::input::create_configuration_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::CreateConfigurationTemplateOutput,
        crate::error::CreateConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_configuration_template_error(response)
        } else {
            crate::operation_deser::parse_create_configuration_template_response(response)
        }
    }
}

/// <p>Launches an AWS Elastic Beanstalk environment for the specified application using the specified
/// configuration.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEnvironment {
    _private: (),
}
impl CreateEnvironment {
    /// Creates a new builder-style object to manufacture [`CreateEnvironmentInput`](crate::input::CreateEnvironmentInput)
    pub fn builder() -> crate::input::create_environment_input::Builder {
        crate::input::create_environment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEnvironment {
    type Output = std::result::Result<
        crate::output::CreateEnvironmentOutput,
        crate::error::CreateEnvironmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_environment_error(response)
        } else {
            crate::operation_deser::parse_create_environment_response(response)
        }
    }
}

/// <p>Create a new version of your custom platform.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePlatformVersion {
    _private: (),
}
impl CreatePlatformVersion {
    /// Creates a new builder-style object to manufacture [`CreatePlatformVersionInput`](crate::input::CreatePlatformVersionInput)
    pub fn builder() -> crate::input::create_platform_version_input::Builder {
        crate::input::create_platform_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePlatformVersion {
    type Output = std::result::Result<
        crate::output::CreatePlatformVersionOutput,
        crate::error::CreatePlatformVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_platform_version_error(response)
        } else {
            crate::operation_deser::parse_create_platform_version_response(response)
        }
    }
}

/// <p>Creates a bucket in Amazon S3 to store application versions, logs, and other files used
/// by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the
/// first time you create an environment in a region. If the storage location already exists,
/// <code>CreateStorageLocation</code> still returns the bucket name but does not create a new
/// bucket.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateStorageLocation {
    _private: (),
}
impl CreateStorageLocation {
    /// Creates a new builder-style object to manufacture [`CreateStorageLocationInput`](crate::input::CreateStorageLocationInput)
    pub fn builder() -> crate::input::create_storage_location_input::Builder {
        crate::input::create_storage_location_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateStorageLocation {
    type Output = std::result::Result<
        crate::output::CreateStorageLocationOutput,
        crate::error::CreateStorageLocationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_storage_location_error(response)
        } else {
            crate::operation_deser::parse_create_storage_location_response(response)
        }
    }
}

/// <p>Deletes the specified application along with all associated versions and
/// configurations. The application versions will not be deleted from your Amazon S3
/// bucket.</p>
/// <note>
/// <p>You cannot delete an application that has a running environment.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteApplication {
    _private: (),
}
impl DeleteApplication {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationInput`](crate::input::DeleteApplicationInput)
    pub fn builder() -> crate::input::delete_application_input::Builder {
        crate::input::delete_application_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteApplication {
    type Output = std::result::Result<
        crate::output::DeleteApplicationOutput,
        crate::error::DeleteApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_application_error(response)
        } else {
            crate::operation_deser::parse_delete_application_response(response)
        }
    }
}

/// <p>Deletes the specified version from the specified application.</p>
/// <note>
/// <p>You cannot delete an application version that is associated with a running
/// environment.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteApplicationVersion {
    _private: (),
}
impl DeleteApplicationVersion {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationVersionInput`](crate::input::DeleteApplicationVersionInput)
    pub fn builder() -> crate::input::delete_application_version_input::Builder {
        crate::input::delete_application_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteApplicationVersion {
    type Output = std::result::Result<
        crate::output::DeleteApplicationVersionOutput,
        crate::error::DeleteApplicationVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_application_version_error(response)
        } else {
            crate::operation_deser::parse_delete_application_version_response(response)
        }
    }
}

/// <p>Deletes the specified configuration template.</p>
/// <note>
/// <p>When you launch an environment using a configuration template, the environment gets a
/// copy of the template. You can delete or modify the environment's copy of the template
/// without affecting the running environment.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConfigurationTemplate {
    _private: (),
}
impl DeleteConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`DeleteConfigurationTemplateInput`](crate::input::DeleteConfigurationTemplateInput)
    pub fn builder() -> crate::input::delete_configuration_template_input::Builder {
        crate::input::delete_configuration_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::DeleteConfigurationTemplateOutput,
        crate::error::DeleteConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_configuration_template_error(response)
        } else {
            crate::operation_deser::parse_delete_configuration_template_response(response)
        }
    }
}

/// <p>Deletes the draft configuration associated with the running environment.</p>
/// <p>Updating a running environment with any configuration changes creates a draft
/// configuration set. You can get the draft configuration using <a>DescribeConfigurationSettings</a> while the update is in progress or if the update
/// fails. The <code>DeploymentStatus</code> for the draft configuration indicates whether the
/// deployment is in process or has failed. The draft configuration remains in existence until it
/// is deleted with this action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEnvironmentConfiguration {
    _private: (),
}
impl DeleteEnvironmentConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteEnvironmentConfigurationInput`](crate::input::DeleteEnvironmentConfigurationInput)
    pub fn builder() -> crate::input::delete_environment_configuration_input::Builder {
        crate::input::delete_environment_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEnvironmentConfiguration {
    type Output = std::result::Result<
        crate::output::DeleteEnvironmentConfigurationOutput,
        crate::error::DeleteEnvironmentConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_environment_configuration_error(response)
        } else {
            crate::operation_deser::parse_delete_environment_configuration_response(response)
        }
    }
}

/// <p>Deletes the specified version of a custom platform.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePlatformVersion {
    _private: (),
}
impl DeletePlatformVersion {
    /// Creates a new builder-style object to manufacture [`DeletePlatformVersionInput`](crate::input::DeletePlatformVersionInput)
    pub fn builder() -> crate::input::delete_platform_version_input::Builder {
        crate::input::delete_platform_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePlatformVersion {
    type Output = std::result::Result<
        crate::output::DeletePlatformVersionOutput,
        crate::error::DeletePlatformVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_platform_version_error(response)
        } else {
            crate::operation_deser::parse_delete_platform_version_response(response)
        }
    }
}

/// <p>Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS
/// account.</p>
/// <p>The result currently has one set of attributes—resource quotas.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAccountAttributes {
    _private: (),
}
impl DescribeAccountAttributes {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAttributesInput`](crate::input::DescribeAccountAttributesInput)
    pub fn builder() -> crate::input::describe_account_attributes_input::Builder {
        crate::input::describe_account_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAccountAttributes {
    type Output = std::result::Result<
        crate::output::DescribeAccountAttributesOutput,
        crate::error::DescribeAccountAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_account_attributes_error(response)
        } else {
            crate::operation_deser::parse_describe_account_attributes_response(response)
        }
    }
}

/// <p>Returns the descriptions of existing applications.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeApplications {
    _private: (),
}
impl DescribeApplications {
    /// Creates a new builder-style object to manufacture [`DescribeApplicationsInput`](crate::input::DescribeApplicationsInput)
    pub fn builder() -> crate::input::describe_applications_input::Builder {
        crate::input::describe_applications_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeApplications {
    type Output = std::result::Result<
        crate::output::DescribeApplicationsOutput,
        crate::error::DescribeApplicationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_applications_error(response)
        } else {
            crate::operation_deser::parse_describe_applications_response(response)
        }
    }
}

/// <p>Retrieve a list of application versions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeApplicationVersions {
    _private: (),
}
impl DescribeApplicationVersions {
    /// Creates a new builder-style object to manufacture [`DescribeApplicationVersionsInput`](crate::input::DescribeApplicationVersionsInput)
    pub fn builder() -> crate::input::describe_application_versions_input::Builder {
        crate::input::describe_application_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeApplicationVersions {
    type Output = std::result::Result<
        crate::output::DescribeApplicationVersionsOutput,
        crate::error::DescribeApplicationVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_application_versions_error(response)
        } else {
            crate::operation_deser::parse_describe_application_versions_response(response)
        }
    }
}

/// <p>Describes the configuration options that are used in a particular configuration
/// template or environment, or that a specified solution stack defines. The description includes
/// the values the options, their default values, and an indication of the required action on a
/// running environment if an option value is changed.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConfigurationOptions {
    _private: (),
}
impl DescribeConfigurationOptions {
    /// Creates a new builder-style object to manufacture [`DescribeConfigurationOptionsInput`](crate::input::DescribeConfigurationOptionsInput)
    pub fn builder() -> crate::input::describe_configuration_options_input::Builder {
        crate::input::describe_configuration_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeConfigurationOptions {
    type Output = std::result::Result<
        crate::output::DescribeConfigurationOptionsOutput,
        crate::error::DescribeConfigurationOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_configuration_options_error(response)
        } else {
            crate::operation_deser::parse_describe_configuration_options_response(response)
        }
    }
}

/// <p>Returns a description of the settings for the specified configuration set, that is,
/// either a configuration template or the configuration set associated with a running
/// environment.</p>
/// <p>When describing the settings for the configuration set associated with a running
/// environment, it is possible to receive two sets of setting descriptions. One is the deployed
/// configuration set, and the other is a draft configuration of an environment that is either in
/// the process of deployment or that failed to deploy.</p>
/// <p>Related Topics</p>
/// <ul>
/// <li>
/// <p>
/// <a>DeleteEnvironmentConfiguration</a>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConfigurationSettings {
    _private: (),
}
impl DescribeConfigurationSettings {
    /// Creates a new builder-style object to manufacture [`DescribeConfigurationSettingsInput`](crate::input::DescribeConfigurationSettingsInput)
    pub fn builder() -> crate::input::describe_configuration_settings_input::Builder {
        crate::input::describe_configuration_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeConfigurationSettings {
    type Output = std::result::Result<
        crate::output::DescribeConfigurationSettingsOutput,
        crate::error::DescribeConfigurationSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_configuration_settings_error(response)
        } else {
            crate::operation_deser::parse_describe_configuration_settings_response(response)
        }
    }
}

/// <p>Returns information about the overall health of the specified environment. The
/// <b>DescribeEnvironmentHealth</b> operation is only available with
/// AWS Elastic Beanstalk Enhanced Health.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEnvironmentHealth {
    _private: (),
}
impl DescribeEnvironmentHealth {
    /// Creates a new builder-style object to manufacture [`DescribeEnvironmentHealthInput`](crate::input::DescribeEnvironmentHealthInput)
    pub fn builder() -> crate::input::describe_environment_health_input::Builder {
        crate::input::describe_environment_health_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEnvironmentHealth {
    type Output = std::result::Result<
        crate::output::DescribeEnvironmentHealthOutput,
        crate::error::DescribeEnvironmentHealthError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_environment_health_error(response)
        } else {
            crate::operation_deser::parse_describe_environment_health_response(response)
        }
    }
}

/// <p>Lists an environment's completed and failed managed actions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEnvironmentManagedActionHistory {
    _private: (),
}
impl DescribeEnvironmentManagedActionHistory {
    /// Creates a new builder-style object to manufacture [`DescribeEnvironmentManagedActionHistoryInput`](crate::input::DescribeEnvironmentManagedActionHistoryInput)
    pub fn builder() -> crate::input::describe_environment_managed_action_history_input::Builder {
        crate::input::describe_environment_managed_action_history_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEnvironmentManagedActionHistory {
    type Output = std::result::Result<
        crate::output::DescribeEnvironmentManagedActionHistoryOutput,
        crate::error::DescribeEnvironmentManagedActionHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_environment_managed_action_history_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_environment_managed_action_history_response(
                response,
            )
        }
    }
}

/// <p>Lists an environment's upcoming and in-progress managed actions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEnvironmentManagedActions {
    _private: (),
}
impl DescribeEnvironmentManagedActions {
    /// Creates a new builder-style object to manufacture [`DescribeEnvironmentManagedActionsInput`](crate::input::DescribeEnvironmentManagedActionsInput)
    pub fn builder() -> crate::input::describe_environment_managed_actions_input::Builder {
        crate::input::describe_environment_managed_actions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEnvironmentManagedActions {
    type Output = std::result::Result<
        crate::output::DescribeEnvironmentManagedActionsOutput,
        crate::error::DescribeEnvironmentManagedActionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_environment_managed_actions_error(response)
        } else {
            crate::operation_deser::parse_describe_environment_managed_actions_response(response)
        }
    }
}

/// <p>Returns AWS resources for this environment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEnvironmentResources {
    _private: (),
}
impl DescribeEnvironmentResources {
    /// Creates a new builder-style object to manufacture [`DescribeEnvironmentResourcesInput`](crate::input::DescribeEnvironmentResourcesInput)
    pub fn builder() -> crate::input::describe_environment_resources_input::Builder {
        crate::input::describe_environment_resources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEnvironmentResources {
    type Output = std::result::Result<
        crate::output::DescribeEnvironmentResourcesOutput,
        crate::error::DescribeEnvironmentResourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_environment_resources_error(response)
        } else {
            crate::operation_deser::parse_describe_environment_resources_response(response)
        }
    }
}

/// <p>Returns descriptions for existing environments.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEnvironments {
    _private: (),
}
impl DescribeEnvironments {
    /// Creates a new builder-style object to manufacture [`DescribeEnvironmentsInput`](crate::input::DescribeEnvironmentsInput)
    pub fn builder() -> crate::input::describe_environments_input::Builder {
        crate::input::describe_environments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEnvironments {
    type Output = std::result::Result<
        crate::output::DescribeEnvironmentsOutput,
        crate::error::DescribeEnvironmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_environments_error(response)
        } else {
            crate::operation_deser::parse_describe_environments_response(response)
        }
    }
}

/// <p>Returns list of event descriptions matching criteria up to the last 6 weeks.</p>
/// <note>
/// <p>This action returns the most recent 1,000 events from the specified
/// <code>NextToken</code>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEvents {
    _private: (),
}
impl DescribeEvents {
    /// Creates a new builder-style object to manufacture [`DescribeEventsInput`](crate::input::DescribeEventsInput)
    pub fn builder() -> crate::input::describe_events_input::Builder {
        crate::input::describe_events_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEvents {
    type Output =
        std::result::Result<crate::output::DescribeEventsOutput, crate::error::DescribeEventsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_events_error(response)
        } else {
            crate::operation_deser::parse_describe_events_response(response)
        }
    }
}

/// <p>Retrieves detailed information about the health of instances in your AWS Elastic
/// Beanstalk. This operation requires <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html">enhanced health
/// reporting</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstancesHealth {
    _private: (),
}
impl DescribeInstancesHealth {
    /// Creates a new builder-style object to manufacture [`DescribeInstancesHealthInput`](crate::input::DescribeInstancesHealthInput)
    pub fn builder() -> crate::input::describe_instances_health_input::Builder {
        crate::input::describe_instances_health_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstancesHealth {
    type Output = std::result::Result<
        crate::output::DescribeInstancesHealthOutput,
        crate::error::DescribeInstancesHealthError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instances_health_error(response)
        } else {
            crate::operation_deser::parse_describe_instances_health_response(response)
        }
    }
}

/// <p>Describes a platform version. Provides full details. Compare to <a>ListPlatformVersions</a>, which provides summary information about a list of
/// platform versions.</p>
/// <p>For definitions of platform version and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
/// Platforms Glossary</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePlatformVersion {
    _private: (),
}
impl DescribePlatformVersion {
    /// Creates a new builder-style object to manufacture [`DescribePlatformVersionInput`](crate::input::DescribePlatformVersionInput)
    pub fn builder() -> crate::input::describe_platform_version_input::Builder {
        crate::input::describe_platform_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePlatformVersion {
    type Output = std::result::Result<
        crate::output::DescribePlatformVersionOutput,
        crate::error::DescribePlatformVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_platform_version_error(response)
        } else {
            crate::operation_deser::parse_describe_platform_version_response(response)
        }
    }
}

/// <p>Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses
/// the caller's permissions for permissions to downstream services during subsequent calls acting
/// on this environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the
/// <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateEnvironmentOperationsRole {
    _private: (),
}
impl DisassociateEnvironmentOperationsRole {
    /// Creates a new builder-style object to manufacture [`DisassociateEnvironmentOperationsRoleInput`](crate::input::DisassociateEnvironmentOperationsRoleInput)
    pub fn builder() -> crate::input::disassociate_environment_operations_role_input::Builder {
        crate::input::disassociate_environment_operations_role_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateEnvironmentOperationsRole {
    type Output = std::result::Result<
        crate::output::DisassociateEnvironmentOperationsRoleOutput,
        crate::error::DisassociateEnvironmentOperationsRoleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_environment_operations_role_error(response)
        } else {
            crate::operation_deser::parse_disassociate_environment_operations_role_response(
                response,
            )
        }
    }
}

/// <p>Returns a list of the available solution stack names, with the public version first and
/// then in reverse chronological order.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAvailableSolutionStacks {
    _private: (),
}
impl ListAvailableSolutionStacks {
    /// Creates a new builder-style object to manufacture [`ListAvailableSolutionStacksInput`](crate::input::ListAvailableSolutionStacksInput)
    pub fn builder() -> crate::input::list_available_solution_stacks_input::Builder {
        crate::input::list_available_solution_stacks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAvailableSolutionStacks {
    type Output = std::result::Result<
        crate::output::ListAvailableSolutionStacksOutput,
        crate::error::ListAvailableSolutionStacksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_available_solution_stacks_error(response)
        } else {
            crate::operation_deser::parse_list_available_solution_stacks_response(response)
        }
    }
}

/// <p>Lists the platform branches available for your account in an AWS Region. Provides
/// summary information about each platform branch.</p>
/// <p>For definitions of platform branch and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
/// Platforms Glossary</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPlatformBranches {
    _private: (),
}
impl ListPlatformBranches {
    /// Creates a new builder-style object to manufacture [`ListPlatformBranchesInput`](crate::input::ListPlatformBranchesInput)
    pub fn builder() -> crate::input::list_platform_branches_input::Builder {
        crate::input::list_platform_branches_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPlatformBranches {
    type Output = std::result::Result<
        crate::output::ListPlatformBranchesOutput,
        crate::error::ListPlatformBranchesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_platform_branches_error(response)
        } else {
            crate::operation_deser::parse_list_platform_branches_response(response)
        }
    }
}

/// <p>Lists the platform versions available for your account in an AWS Region. Provides
/// summary information about each platform version. Compare to <a>DescribePlatformVersion</a>, which provides full details about a single platform
/// version.</p>
/// <p>For definitions of platform version and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk
/// Platforms Glossary</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPlatformVersions {
    _private: (),
}
impl ListPlatformVersions {
    /// Creates a new builder-style object to manufacture [`ListPlatformVersionsInput`](crate::input::ListPlatformVersionsInput)
    pub fn builder() -> crate::input::list_platform_versions_input::Builder {
        crate::input::list_platform_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPlatformVersions {
    type Output = std::result::Result<
        crate::output::ListPlatformVersionsOutput,
        crate::error::ListPlatformVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_platform_versions_error(response)
        } else {
            crate::operation_deser::parse_list_platform_versions_response(response)
        }
    }
}

/// <p>Return the tags applied to an AWS Elastic Beanstalk resource. The response contains a list of tag key-value pairs.</p>
/// <p>Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see
/// <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html">Tagging Application
/// Resources</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Deletes and recreates all of the AWS resources (for example: the Auto Scaling group,
/// load balancer, etc.) for a specified environment and forces a restart.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RebuildEnvironment {
    _private: (),
}
impl RebuildEnvironment {
    /// Creates a new builder-style object to manufacture [`RebuildEnvironmentInput`](crate::input::RebuildEnvironmentInput)
    pub fn builder() -> crate::input::rebuild_environment_input::Builder {
        crate::input::rebuild_environment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RebuildEnvironment {
    type Output = std::result::Result<
        crate::output::RebuildEnvironmentOutput,
        crate::error::RebuildEnvironmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_rebuild_environment_error(response)
        } else {
            crate::operation_deser::parse_rebuild_environment_response(response)
        }
    }
}

/// <p>Initiates a request to compile the specified type of information of the deployed
/// environment.</p>
/// <p> Setting the <code>InfoType</code> to <code>tail</code> compiles the last lines from
/// the application server log files of every Amazon EC2 instance in your environment. </p>
/// <p> Setting the <code>InfoType</code> to <code>bundle</code> compresses the application
/// server log files for every Amazon EC2 instance into a <code>.zip</code> file. Legacy and .NET
/// containers do not support bundle logs. </p>
/// <p> Use <a>RetrieveEnvironmentInfo</a> to obtain the set of logs. </p>
/// <p>Related Topics</p>
/// <ul>
/// <li>
/// <p>
/// <a>RetrieveEnvironmentInfo</a>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RequestEnvironmentInfo {
    _private: (),
}
impl RequestEnvironmentInfo {
    /// Creates a new builder-style object to manufacture [`RequestEnvironmentInfoInput`](crate::input::RequestEnvironmentInfoInput)
    pub fn builder() -> crate::input::request_environment_info_input::Builder {
        crate::input::request_environment_info_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RequestEnvironmentInfo {
    type Output = std::result::Result<
        crate::output::RequestEnvironmentInfoOutput,
        crate::error::RequestEnvironmentInfoError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_request_environment_info_error(response)
        } else {
            crate::operation_deser::parse_request_environment_info_response(response)
        }
    }
}

/// <p>Causes the environment to restart the application container server running on each
/// Amazon EC2 instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestartAppServer {
    _private: (),
}
impl RestartAppServer {
    /// Creates a new builder-style object to manufacture [`RestartAppServerInput`](crate::input::RestartAppServerInput)
    pub fn builder() -> crate::input::restart_app_server_input::Builder {
        crate::input::restart_app_server_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestartAppServer {
    type Output = std::result::Result<
        crate::output::RestartAppServerOutput,
        crate::error::RestartAppServerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restart_app_server_error(response)
        } else {
            crate::operation_deser::parse_restart_app_server_response(response)
        }
    }
}

/// <p>Retrieves the compiled information from a <a>RequestEnvironmentInfo</a>
/// request.</p>
/// <p>Related Topics</p>
/// <ul>
/// <li>
/// <p>
/// <a>RequestEnvironmentInfo</a>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RetrieveEnvironmentInfo {
    _private: (),
}
impl RetrieveEnvironmentInfo {
    /// Creates a new builder-style object to manufacture [`RetrieveEnvironmentInfoInput`](crate::input::RetrieveEnvironmentInfoInput)
    pub fn builder() -> crate::input::retrieve_environment_info_input::Builder {
        crate::input::retrieve_environment_info_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RetrieveEnvironmentInfo {
    type Output = std::result::Result<
        crate::output::RetrieveEnvironmentInfoOutput,
        crate::error::RetrieveEnvironmentInfoError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_retrieve_environment_info_error(response)
        } else {
            crate::operation_deser::parse_retrieve_environment_info_response(response)
        }
    }
}

/// <p>Swaps the CNAMEs of two environments.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SwapEnvironmentCNAMEs {
    _private: (),
}
impl SwapEnvironmentCNAMEs {
    /// Creates a new builder-style object to manufacture [`SwapEnvironmentCnamEsInput`](crate::input::SwapEnvironmentCnamEsInput)
    pub fn builder() -> crate::input::swap_environment_cnam_es_input::Builder {
        crate::input::swap_environment_cnam_es_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SwapEnvironmentCNAMEs {
    type Output = std::result::Result<
        crate::output::SwapEnvironmentCnamEsOutput,
        crate::error::SwapEnvironmentCNAMEsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_swap_environment_cnam_es_error(response)
        } else {
            crate::operation_deser::parse_swap_environment_cnam_es_response(response)
        }
    }
}

/// <p>Terminates the specified environment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TerminateEnvironment {
    _private: (),
}
impl TerminateEnvironment {
    /// Creates a new builder-style object to manufacture [`TerminateEnvironmentInput`](crate::input::TerminateEnvironmentInput)
    pub fn builder() -> crate::input::terminate_environment_input::Builder {
        crate::input::terminate_environment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TerminateEnvironment {
    type Output = std::result::Result<
        crate::output::TerminateEnvironmentOutput,
        crate::error::TerminateEnvironmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_terminate_environment_error(response)
        } else {
            crate::operation_deser::parse_terminate_environment_response(response)
        }
    }
}

/// <p>Updates the specified application to have the specified properties.</p>
/// <note>
/// <p>If a property (for example, <code>description</code>) is not provided, the value
/// remains unchanged. To clear these properties, specify an empty string.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateApplication {
    _private: (),
}
impl UpdateApplication {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationInput`](crate::input::UpdateApplicationInput)
    pub fn builder() -> crate::input::update_application_input::Builder {
        crate::input::update_application_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateApplication {
    type Output = std::result::Result<
        crate::output::UpdateApplicationOutput,
        crate::error::UpdateApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_application_error(response)
        } else {
            crate::operation_deser::parse_update_application_response(response)
        }
    }
}

/// <p>Modifies lifecycle settings for an application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateApplicationResourceLifecycle {
    _private: (),
}
impl UpdateApplicationResourceLifecycle {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationResourceLifecycleInput`](crate::input::UpdateApplicationResourceLifecycleInput)
    pub fn builder() -> crate::input::update_application_resource_lifecycle_input::Builder {
        crate::input::update_application_resource_lifecycle_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateApplicationResourceLifecycle {
    type Output = std::result::Result<
        crate::output::UpdateApplicationResourceLifecycleOutput,
        crate::error::UpdateApplicationResourceLifecycleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_application_resource_lifecycle_error(response)
        } else {
            crate::operation_deser::parse_update_application_resource_lifecycle_response(response)
        }
    }
}

/// <p>Updates the specified application version to have the specified properties.</p>
/// <note>
/// <p>If a property (for example, <code>description</code>) is not provided, the value
/// remains unchanged. To clear properties, specify an empty string.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateApplicationVersion {
    _private: (),
}
impl UpdateApplicationVersion {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationVersionInput`](crate::input::UpdateApplicationVersionInput)
    pub fn builder() -> crate::input::update_application_version_input::Builder {
        crate::input::update_application_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateApplicationVersion {
    type Output = std::result::Result<
        crate::output::UpdateApplicationVersionOutput,
        crate::error::UpdateApplicationVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_application_version_error(response)
        } else {
            crate::operation_deser::parse_update_application_version_response(response)
        }
    }
}

/// <p>Updates the specified configuration template to have the specified properties or
/// configuration option values.</p>
/// <note>
/// <p>If a property (for example, <code>ApplicationName</code>) is not provided, its value
/// remains unchanged. To clear such properties, specify an empty string.</p>
/// </note>
/// <p>Related Topics</p>
/// <ul>
/// <li>
/// <p>
/// <a>DescribeConfigurationOptions</a>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConfigurationTemplate {
    _private: (),
}
impl UpdateConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`UpdateConfigurationTemplateInput`](crate::input::UpdateConfigurationTemplateInput)
    pub fn builder() -> crate::input::update_configuration_template_input::Builder {
        crate::input::update_configuration_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::UpdateConfigurationTemplateOutput,
        crate::error::UpdateConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_configuration_template_error(response)
        } else {
            crate::operation_deser::parse_update_configuration_template_response(response)
        }
    }
}

/// <p>Updates the environment description, deploys a new application version, updates the
/// configuration settings to an entirely new configuration template, or updates select
/// configuration option values in the running environment.</p>
/// <p> Attempting to update both the release and configuration is not allowed and AWS Elastic
/// Beanstalk returns an <code>InvalidParameterCombination</code> error. </p>
/// <p> When updating the configuration settings to a new template or individual settings, a
/// draft configuration is created and <a>DescribeConfigurationSettings</a> for this
/// environment returns two setting descriptions with different <code>DeploymentStatus</code>
/// values. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEnvironment {
    _private: (),
}
impl UpdateEnvironment {
    /// Creates a new builder-style object to manufacture [`UpdateEnvironmentInput`](crate::input::UpdateEnvironmentInput)
    pub fn builder() -> crate::input::update_environment_input::Builder {
        crate::input::update_environment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateEnvironment {
    type Output = std::result::Result<
        crate::output::UpdateEnvironmentOutput,
        crate::error::UpdateEnvironmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_environment_error(response)
        } else {
            crate::operation_deser::parse_update_environment_response(response)
        }
    }
}

/// <p>Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: <code>TagsToAdd</code>
/// for tags to add or update, and <code>TagsToRemove</code>.</p>
/// <p>Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see
/// <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html">Tagging Application
/// Resources</a>.</p>
/// <p>If you create a custom IAM user policy to control permission to this operation, specify
/// one of the following two virtual actions (or both) instead of the API operation name:</p>
/// <dl>
/// <dt>elasticbeanstalk:AddTags</dt>
/// <dd>
/// <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tags to add in the <code>TagsToAdd</code>
/// parameter.</p>
/// </dd>
/// <dt>elasticbeanstalk:RemoveTags</dt>
/// <dd>
/// <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tag keys to remove in the <code>TagsToRemove</code>
/// parameter.</p>
/// </dd>
/// </dl>
/// <p>For details about creating a custom user policy, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies">Creating a Custom User Policy</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTagsForResource {
    _private: (),
}
impl UpdateTagsForResource {
    /// Creates a new builder-style object to manufacture [`UpdateTagsForResourceInput`](crate::input::UpdateTagsForResourceInput)
    pub fn builder() -> crate::input::update_tags_for_resource_input::Builder {
        crate::input::update_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateTagsForResource {
    type Output = std::result::Result<
        crate::output::UpdateTagsForResourceOutput,
        crate::error::UpdateTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_update_tags_for_resource_response(response)
        }
    }
}

/// <p>Takes a set of configuration settings and either a configuration template or
/// environment, and determines whether those values are valid.</p>
/// <p>This action returns a list of messages indicating any errors or warnings associated
/// with the selection of option values.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ValidateConfigurationSettings {
    _private: (),
}
impl ValidateConfigurationSettings {
    /// Creates a new builder-style object to manufacture [`ValidateConfigurationSettingsInput`](crate::input::ValidateConfigurationSettingsInput)
    pub fn builder() -> crate::input::validate_configuration_settings_input::Builder {
        crate::input::validate_configuration_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ValidateConfigurationSettings {
    type Output = std::result::Result<
        crate::output::ValidateConfigurationSettingsOutput,
        crate::error::ValidateConfigurationSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_validate_configuration_settings_error(response)
        } else {
            crate::operation_deser::parse_validate_configuration_settings_response(response)
        }
    }
}
