// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `InstancesHealthAttribute`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let instanceshealthattribute = unimplemented!();
/// match instanceshealthattribute {
///     InstancesHealthAttribute::All => { /* ... */ },
///     InstancesHealthAttribute::ApplicationMetrics => { /* ... */ },
///     InstancesHealthAttribute::AvailabilityZone => { /* ... */ },
///     InstancesHealthAttribute::Causes => { /* ... */ },
///     InstancesHealthAttribute::Color => { /* ... */ },
///     InstancesHealthAttribute::Deployment => { /* ... */ },
///     InstancesHealthAttribute::HealthStatus => { /* ... */ },
///     InstancesHealthAttribute::InstanceType => { /* ... */ },
///     InstancesHealthAttribute::LaunchedAt => { /* ... */ },
///     InstancesHealthAttribute::RefreshedAt => { /* ... */ },
///     InstancesHealthAttribute::System => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `instanceshealthattribute` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `InstancesHealthAttribute::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `InstancesHealthAttribute::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `InstancesHealthAttribute::NewFeature` is defined.
/// Specifically, when `instanceshealthattribute` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `InstancesHealthAttribute::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum InstancesHealthAttribute {
    #[allow(missing_docs)] // documentation missing in model
    All,
    #[allow(missing_docs)] // documentation missing in model
    ApplicationMetrics,
    #[allow(missing_docs)] // documentation missing in model
    AvailabilityZone,
    #[allow(missing_docs)] // documentation missing in model
    Causes,
    #[allow(missing_docs)] // documentation missing in model
    Color,
    #[allow(missing_docs)] // documentation missing in model
    Deployment,
    #[allow(missing_docs)] // documentation missing in model
    HealthStatus,
    #[allow(missing_docs)] // documentation missing in model
    InstanceType,
    #[allow(missing_docs)] // documentation missing in model
    LaunchedAt,
    #[allow(missing_docs)] // documentation missing in model
    RefreshedAt,
    #[allow(missing_docs)] // documentation missing in model
    System,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for InstancesHealthAttribute {
    fn from(s: &str) -> Self {
        match s {
            "All" => InstancesHealthAttribute::All,
            "ApplicationMetrics" => InstancesHealthAttribute::ApplicationMetrics,
            "AvailabilityZone" => InstancesHealthAttribute::AvailabilityZone,
            "Causes" => InstancesHealthAttribute::Causes,
            "Color" => InstancesHealthAttribute::Color,
            "Deployment" => InstancesHealthAttribute::Deployment,
            "HealthStatus" => InstancesHealthAttribute::HealthStatus,
            "InstanceType" => InstancesHealthAttribute::InstanceType,
            "LaunchedAt" => InstancesHealthAttribute::LaunchedAt,
            "RefreshedAt" => InstancesHealthAttribute::RefreshedAt,
            "System" => InstancesHealthAttribute::System,
            other => InstancesHealthAttribute::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for InstancesHealthAttribute {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(InstancesHealthAttribute::from(s))
    }
}
impl InstancesHealthAttribute {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            InstancesHealthAttribute::All => "All",
            InstancesHealthAttribute::ApplicationMetrics => "ApplicationMetrics",
            InstancesHealthAttribute::AvailabilityZone => "AvailabilityZone",
            InstancesHealthAttribute::Causes => "Causes",
            InstancesHealthAttribute::Color => "Color",
            InstancesHealthAttribute::Deployment => "Deployment",
            InstancesHealthAttribute::HealthStatus => "HealthStatus",
            InstancesHealthAttribute::InstanceType => "InstanceType",
            InstancesHealthAttribute::LaunchedAt => "LaunchedAt",
            InstancesHealthAttribute::RefreshedAt => "RefreshedAt",
            InstancesHealthAttribute::System => "System",
            InstancesHealthAttribute::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "All",
            "ApplicationMetrics",
            "AvailabilityZone",
            "Causes",
            "Color",
            "Deployment",
            "HealthStatus",
            "InstanceType",
            "LaunchedAt",
            "RefreshedAt",
            "System",
        ]
    }
}
impl AsRef<str> for InstancesHealthAttribute {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
