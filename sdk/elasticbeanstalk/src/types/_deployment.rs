// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an application version deployment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Deployment {
    /// <p>The version label of the application version in the deployment.</p>
    #[doc(hidden)]
    pub version_label: std::option::Option<std::string::String>,
    /// <p>The ID of the deployment. This number increases by one each time that you deploy source code or change instance configuration settings.</p>
    #[doc(hidden)]
    pub deployment_id: std::option::Option<i64>,
    /// <p>The status of the deployment:</p>
    /// <ul>
    /// <li> <p> <code>In Progress</code> : The deployment is in progress.</p> </li>
    /// <li> <p> <code>Deployed</code> : The deployment succeeded.</p> </li>
    /// <li> <p> <code>Failed</code> : The deployment failed.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>For in-progress deployments, the time that the deployment started.</p>
    /// <p>For completed deployments, the time that the deployment ended.</p>
    #[doc(hidden)]
    pub deployment_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl Deployment {
    /// <p>The version label of the application version in the deployment.</p>
    pub fn version_label(&self) -> std::option::Option<&str> {
        self.version_label.as_deref()
    }
    /// <p>The ID of the deployment. This number increases by one each time that you deploy source code or change instance configuration settings.</p>
    pub fn deployment_id(&self) -> std::option::Option<i64> {
        self.deployment_id
    }
    /// <p>The status of the deployment:</p>
    /// <ul>
    /// <li> <p> <code>In Progress</code> : The deployment is in progress.</p> </li>
    /// <li> <p> <code>Deployed</code> : The deployment succeeded.</p> </li>
    /// <li> <p> <code>Failed</code> : The deployment failed.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>For in-progress deployments, the time that the deployment started.</p>
    /// <p>For completed deployments, the time that the deployment ended.</p>
    pub fn deployment_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.deployment_time.as_ref()
    }
}
impl Deployment {
    /// Creates a new builder-style object to manufacture [`Deployment`](crate::types::Deployment).
    pub fn builder() -> crate::types::builders::DeploymentBuilder {
        crate::types::builders::DeploymentBuilder::default()
    }
}

/// A builder for [`Deployment`](crate::types::Deployment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeploymentBuilder {
    pub(crate) version_label: std::option::Option<std::string::String>,
    pub(crate) deployment_id: std::option::Option<i64>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) deployment_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl DeploymentBuilder {
    /// <p>The version label of the application version in the deployment.</p>
    pub fn version_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.version_label = Some(input.into());
        self
    }
    /// <p>The version label of the application version in the deployment.</p>
    pub fn set_version_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version_label = input;
        self
    }
    /// <p>The ID of the deployment. This number increases by one each time that you deploy source code or change instance configuration settings.</p>
    pub fn deployment_id(mut self, input: i64) -> Self {
        self.deployment_id = Some(input);
        self
    }
    /// <p>The ID of the deployment. This number increases by one each time that you deploy source code or change instance configuration settings.</p>
    pub fn set_deployment_id(mut self, input: std::option::Option<i64>) -> Self {
        self.deployment_id = input;
        self
    }
    /// <p>The status of the deployment:</p>
    /// <ul>
    /// <li> <p> <code>In Progress</code> : The deployment is in progress.</p> </li>
    /// <li> <p> <code>Deployed</code> : The deployment succeeded.</p> </li>
    /// <li> <p> <code>Failed</code> : The deployment failed.</p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the deployment:</p>
    /// <ul>
    /// <li> <p> <code>In Progress</code> : The deployment is in progress.</p> </li>
    /// <li> <p> <code>Deployed</code> : The deployment succeeded.</p> </li>
    /// <li> <p> <code>Failed</code> : The deployment failed.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>For in-progress deployments, the time that the deployment started.</p>
    /// <p>For completed deployments, the time that the deployment ended.</p>
    pub fn deployment_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.deployment_time = Some(input);
        self
    }
    /// <p>For in-progress deployments, the time that the deployment started.</p>
    /// <p>For completed deployments, the time that the deployment ended.</p>
    pub fn set_deployment_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.deployment_time = input;
        self
    }
    /// Consumes the builder and constructs a [`Deployment`](crate::types::Deployment).
    pub fn build(self) -> crate::types::Deployment {
        crate::types::Deployment {
            version_label: self.version_label,
            deployment_id: self.deployment_id,
            status: self.status,
            deployment_time: self.deployment_time,
        }
    }
}
