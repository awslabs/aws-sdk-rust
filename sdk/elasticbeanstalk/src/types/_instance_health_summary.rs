// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents summary information about the health of an instance. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health Colors and Statuses</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceHealthSummary {
    /// <p> <b>Grey.</b> AWS Elastic Beanstalk and the health agent are reporting no data on an instance.</p>
    #[doc(hidden)]
    pub no_data: std::option::Option<i32>,
    /// <p> <b>Grey.</b> AWS Elastic Beanstalk and the health agent are reporting an insufficient amount of data on an instance.</p>
    #[doc(hidden)]
    pub unknown: std::option::Option<i32>,
    /// <p> <b>Grey.</b> An operation is in progress on an instance within the command timeout.</p>
    #[doc(hidden)]
    pub pending: std::option::Option<i32>,
    /// <p> <b>Green.</b> An instance is passing health checks and the health agent is not reporting any problems.</p>
    #[doc(hidden)]
    pub ok: std::option::Option<i32>,
    /// <p> <b>Green.</b> An operation is in progress on an instance.</p>
    #[doc(hidden)]
    pub info: std::option::Option<i32>,
    /// <p> <b>Yellow.</b> The health agent is reporting a moderate number of request failures or other issues for an instance or environment.</p>
    #[doc(hidden)]
    pub warning: std::option::Option<i32>,
    /// <p> <b>Red.</b> The health agent is reporting a high number of request failures or other issues for an instance or environment.</p>
    #[doc(hidden)]
    pub degraded: std::option::Option<i32>,
    /// <p> <b>Red.</b> The health agent is reporting a very high number of request failures or other issues for an instance or environment.</p>
    #[doc(hidden)]
    pub severe: std::option::Option<i32>,
}
impl InstanceHealthSummary {
    /// <p> <b>Grey.</b> AWS Elastic Beanstalk and the health agent are reporting no data on an instance.</p>
    pub fn no_data(&self) -> std::option::Option<i32> {
        self.no_data
    }
    /// <p> <b>Grey.</b> AWS Elastic Beanstalk and the health agent are reporting an insufficient amount of data on an instance.</p>
    pub fn unknown(&self) -> std::option::Option<i32> {
        self.unknown
    }
    /// <p> <b>Grey.</b> An operation is in progress on an instance within the command timeout.</p>
    pub fn pending(&self) -> std::option::Option<i32> {
        self.pending
    }
    /// <p> <b>Green.</b> An instance is passing health checks and the health agent is not reporting any problems.</p>
    pub fn ok(&self) -> std::option::Option<i32> {
        self.ok
    }
    /// <p> <b>Green.</b> An operation is in progress on an instance.</p>
    pub fn info(&self) -> std::option::Option<i32> {
        self.info
    }
    /// <p> <b>Yellow.</b> The health agent is reporting a moderate number of request failures or other issues for an instance or environment.</p>
    pub fn warning(&self) -> std::option::Option<i32> {
        self.warning
    }
    /// <p> <b>Red.</b> The health agent is reporting a high number of request failures or other issues for an instance or environment.</p>
    pub fn degraded(&self) -> std::option::Option<i32> {
        self.degraded
    }
    /// <p> <b>Red.</b> The health agent is reporting a very high number of request failures or other issues for an instance or environment.</p>
    pub fn severe(&self) -> std::option::Option<i32> {
        self.severe
    }
}
impl InstanceHealthSummary {
    /// Creates a new builder-style object to manufacture [`InstanceHealthSummary`](crate::types::InstanceHealthSummary).
    pub fn builder() -> crate::types::builders::InstanceHealthSummaryBuilder {
        crate::types::builders::InstanceHealthSummaryBuilder::default()
    }
}

/// A builder for [`InstanceHealthSummary`](crate::types::InstanceHealthSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceHealthSummaryBuilder {
    pub(crate) no_data: std::option::Option<i32>,
    pub(crate) unknown: std::option::Option<i32>,
    pub(crate) pending: std::option::Option<i32>,
    pub(crate) ok: std::option::Option<i32>,
    pub(crate) info: std::option::Option<i32>,
    pub(crate) warning: std::option::Option<i32>,
    pub(crate) degraded: std::option::Option<i32>,
    pub(crate) severe: std::option::Option<i32>,
}
impl InstanceHealthSummaryBuilder {
    /// <p> <b>Grey.</b> AWS Elastic Beanstalk and the health agent are reporting no data on an instance.</p>
    pub fn no_data(mut self, input: i32) -> Self {
        self.no_data = Some(input);
        self
    }
    /// <p> <b>Grey.</b> AWS Elastic Beanstalk and the health agent are reporting no data on an instance.</p>
    pub fn set_no_data(mut self, input: std::option::Option<i32>) -> Self {
        self.no_data = input;
        self
    }
    /// <p> <b>Grey.</b> AWS Elastic Beanstalk and the health agent are reporting an insufficient amount of data on an instance.</p>
    pub fn unknown(mut self, input: i32) -> Self {
        self.unknown = Some(input);
        self
    }
    /// <p> <b>Grey.</b> AWS Elastic Beanstalk and the health agent are reporting an insufficient amount of data on an instance.</p>
    pub fn set_unknown(mut self, input: std::option::Option<i32>) -> Self {
        self.unknown = input;
        self
    }
    /// <p> <b>Grey.</b> An operation is in progress on an instance within the command timeout.</p>
    pub fn pending(mut self, input: i32) -> Self {
        self.pending = Some(input);
        self
    }
    /// <p> <b>Grey.</b> An operation is in progress on an instance within the command timeout.</p>
    pub fn set_pending(mut self, input: std::option::Option<i32>) -> Self {
        self.pending = input;
        self
    }
    /// <p> <b>Green.</b> An instance is passing health checks and the health agent is not reporting any problems.</p>
    pub fn ok(mut self, input: i32) -> Self {
        self.ok = Some(input);
        self
    }
    /// <p> <b>Green.</b> An instance is passing health checks and the health agent is not reporting any problems.</p>
    pub fn set_ok(mut self, input: std::option::Option<i32>) -> Self {
        self.ok = input;
        self
    }
    /// <p> <b>Green.</b> An operation is in progress on an instance.</p>
    pub fn info(mut self, input: i32) -> Self {
        self.info = Some(input);
        self
    }
    /// <p> <b>Green.</b> An operation is in progress on an instance.</p>
    pub fn set_info(mut self, input: std::option::Option<i32>) -> Self {
        self.info = input;
        self
    }
    /// <p> <b>Yellow.</b> The health agent is reporting a moderate number of request failures or other issues for an instance or environment.</p>
    pub fn warning(mut self, input: i32) -> Self {
        self.warning = Some(input);
        self
    }
    /// <p> <b>Yellow.</b> The health agent is reporting a moderate number of request failures or other issues for an instance or environment.</p>
    pub fn set_warning(mut self, input: std::option::Option<i32>) -> Self {
        self.warning = input;
        self
    }
    /// <p> <b>Red.</b> The health agent is reporting a high number of request failures or other issues for an instance or environment.</p>
    pub fn degraded(mut self, input: i32) -> Self {
        self.degraded = Some(input);
        self
    }
    /// <p> <b>Red.</b> The health agent is reporting a high number of request failures or other issues for an instance or environment.</p>
    pub fn set_degraded(mut self, input: std::option::Option<i32>) -> Self {
        self.degraded = input;
        self
    }
    /// <p> <b>Red.</b> The health agent is reporting a very high number of request failures or other issues for an instance or environment.</p>
    pub fn severe(mut self, input: i32) -> Self {
        self.severe = Some(input);
        self
    }
    /// <p> <b>Red.</b> The health agent is reporting a very high number of request failures or other issues for an instance or environment.</p>
    pub fn set_severe(mut self, input: std::option::Option<i32>) -> Self {
        self.severe = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceHealthSummary`](crate::types::InstanceHealthSummary).
    pub fn build(self) -> crate::types::InstanceHealthSummary {
        crate::types::InstanceHealthSummary {
            no_data: self.no_data,
            unknown: self.unknown,
            pending: self.pending,
            ok: self.ok,
            info: self.info,
            warning: self.warning,
            degraded: self.degraded,
            severe: self.severe,
        }
    }
}
