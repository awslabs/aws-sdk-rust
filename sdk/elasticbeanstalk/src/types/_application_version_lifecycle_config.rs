// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The application version lifecycle settings for an application. Defines the rules that Elastic Beanstalk applies to an application's versions in order to avoid hitting the per-region limit for application versions.</p>
/// <p>When Elastic Beanstalk deletes an application version from its database, you can no longer deploy that version to an environment. The source bundle remains in S3 unless you configure the rule to delete it.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationVersionLifecycleConfig {
    /// <p>Specify a max count rule to restrict the number of application versions that are retained for an application.</p>
    #[doc(hidden)]
    pub max_count_rule: std::option::Option<crate::types::MaxCountRule>,
    /// <p>Specify a max age rule to restrict the length of time that application versions are retained for an application.</p>
    #[doc(hidden)]
    pub max_age_rule: std::option::Option<crate::types::MaxAgeRule>,
}
impl ApplicationVersionLifecycleConfig {
    /// <p>Specify a max count rule to restrict the number of application versions that are retained for an application.</p>
    pub fn max_count_rule(&self) -> std::option::Option<&crate::types::MaxCountRule> {
        self.max_count_rule.as_ref()
    }
    /// <p>Specify a max age rule to restrict the length of time that application versions are retained for an application.</p>
    pub fn max_age_rule(&self) -> std::option::Option<&crate::types::MaxAgeRule> {
        self.max_age_rule.as_ref()
    }
}
impl ApplicationVersionLifecycleConfig {
    /// Creates a new builder-style object to manufacture [`ApplicationVersionLifecycleConfig`](crate::types::ApplicationVersionLifecycleConfig).
    pub fn builder() -> crate::types::builders::ApplicationVersionLifecycleConfigBuilder {
        crate::types::builders::ApplicationVersionLifecycleConfigBuilder::default()
    }
}

/// A builder for [`ApplicationVersionLifecycleConfig`](crate::types::ApplicationVersionLifecycleConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApplicationVersionLifecycleConfigBuilder {
    pub(crate) max_count_rule: std::option::Option<crate::types::MaxCountRule>,
    pub(crate) max_age_rule: std::option::Option<crate::types::MaxAgeRule>,
}
impl ApplicationVersionLifecycleConfigBuilder {
    /// <p>Specify a max count rule to restrict the number of application versions that are retained for an application.</p>
    pub fn max_count_rule(mut self, input: crate::types::MaxCountRule) -> Self {
        self.max_count_rule = Some(input);
        self
    }
    /// <p>Specify a max count rule to restrict the number of application versions that are retained for an application.</p>
    pub fn set_max_count_rule(
        mut self,
        input: std::option::Option<crate::types::MaxCountRule>,
    ) -> Self {
        self.max_count_rule = input;
        self
    }
    /// <p>Specify a max age rule to restrict the length of time that application versions are retained for an application.</p>
    pub fn max_age_rule(mut self, input: crate::types::MaxAgeRule) -> Self {
        self.max_age_rule = Some(input);
        self
    }
    /// <p>Specify a max age rule to restrict the length of time that application versions are retained for an application.</p>
    pub fn set_max_age_rule(
        mut self,
        input: std::option::Option<crate::types::MaxAgeRule>,
    ) -> Self {
        self.max_age_rule = input;
        self
    }
    /// Consumes the builder and constructs a [`ApplicationVersionLifecycleConfig`](crate::types::ApplicationVersionLifecycleConfig).
    pub fn build(self) -> crate::types::ApplicationVersionLifecycleConfig {
        crate::types::ApplicationVersionLifecycleConfig {
            max_count_rule: self.max_count_rule,
            max_age_rule: self.max_age_rule,
        }
    }
}
