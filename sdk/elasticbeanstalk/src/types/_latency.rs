// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the average latency for the slowest X percent of requests over the last 10 seconds.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Latency {
    /// <p>The average latency for the slowest 0.1 percent of requests over the last 10 seconds.</p>
    #[doc(hidden)]
    pub p999: std::option::Option<f64>,
    /// <p>The average latency for the slowest 1 percent of requests over the last 10 seconds.</p>
    #[doc(hidden)]
    pub p99: std::option::Option<f64>,
    /// <p>The average latency for the slowest 5 percent of requests over the last 10 seconds.</p>
    #[doc(hidden)]
    pub p95: std::option::Option<f64>,
    /// <p>The average latency for the slowest 10 percent of requests over the last 10 seconds.</p>
    #[doc(hidden)]
    pub p90: std::option::Option<f64>,
    /// <p>The average latency for the slowest 15 percent of requests over the last 10 seconds.</p>
    #[doc(hidden)]
    pub p85: std::option::Option<f64>,
    /// <p>The average latency for the slowest 25 percent of requests over the last 10 seconds.</p>
    #[doc(hidden)]
    pub p75: std::option::Option<f64>,
    /// <p>The average latency for the slowest 50 percent of requests over the last 10 seconds.</p>
    #[doc(hidden)]
    pub p50: std::option::Option<f64>,
    /// <p>The average latency for the slowest 90 percent of requests over the last 10 seconds.</p>
    #[doc(hidden)]
    pub p10: std::option::Option<f64>,
}
impl Latency {
    /// <p>The average latency for the slowest 0.1 percent of requests over the last 10 seconds.</p>
    pub fn p999(&self) -> std::option::Option<f64> {
        self.p999
    }
    /// <p>The average latency for the slowest 1 percent of requests over the last 10 seconds.</p>
    pub fn p99(&self) -> std::option::Option<f64> {
        self.p99
    }
    /// <p>The average latency for the slowest 5 percent of requests over the last 10 seconds.</p>
    pub fn p95(&self) -> std::option::Option<f64> {
        self.p95
    }
    /// <p>The average latency for the slowest 10 percent of requests over the last 10 seconds.</p>
    pub fn p90(&self) -> std::option::Option<f64> {
        self.p90
    }
    /// <p>The average latency for the slowest 15 percent of requests over the last 10 seconds.</p>
    pub fn p85(&self) -> std::option::Option<f64> {
        self.p85
    }
    /// <p>The average latency for the slowest 25 percent of requests over the last 10 seconds.</p>
    pub fn p75(&self) -> std::option::Option<f64> {
        self.p75
    }
    /// <p>The average latency for the slowest 50 percent of requests over the last 10 seconds.</p>
    pub fn p50(&self) -> std::option::Option<f64> {
        self.p50
    }
    /// <p>The average latency for the slowest 90 percent of requests over the last 10 seconds.</p>
    pub fn p10(&self) -> std::option::Option<f64> {
        self.p10
    }
}
impl Latency {
    /// Creates a new builder-style object to manufacture [`Latency`](crate::types::Latency).
    pub fn builder() -> crate::types::builders::LatencyBuilder {
        crate::types::builders::LatencyBuilder::default()
    }
}

/// A builder for [`Latency`](crate::types::Latency).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LatencyBuilder {
    pub(crate) p999: std::option::Option<f64>,
    pub(crate) p99: std::option::Option<f64>,
    pub(crate) p95: std::option::Option<f64>,
    pub(crate) p90: std::option::Option<f64>,
    pub(crate) p85: std::option::Option<f64>,
    pub(crate) p75: std::option::Option<f64>,
    pub(crate) p50: std::option::Option<f64>,
    pub(crate) p10: std::option::Option<f64>,
}
impl LatencyBuilder {
    /// <p>The average latency for the slowest 0.1 percent of requests over the last 10 seconds.</p>
    pub fn p999(mut self, input: f64) -> Self {
        self.p999 = Some(input);
        self
    }
    /// <p>The average latency for the slowest 0.1 percent of requests over the last 10 seconds.</p>
    pub fn set_p999(mut self, input: std::option::Option<f64>) -> Self {
        self.p999 = input;
        self
    }
    /// <p>The average latency for the slowest 1 percent of requests over the last 10 seconds.</p>
    pub fn p99(mut self, input: f64) -> Self {
        self.p99 = Some(input);
        self
    }
    /// <p>The average latency for the slowest 1 percent of requests over the last 10 seconds.</p>
    pub fn set_p99(mut self, input: std::option::Option<f64>) -> Self {
        self.p99 = input;
        self
    }
    /// <p>The average latency for the slowest 5 percent of requests over the last 10 seconds.</p>
    pub fn p95(mut self, input: f64) -> Self {
        self.p95 = Some(input);
        self
    }
    /// <p>The average latency for the slowest 5 percent of requests over the last 10 seconds.</p>
    pub fn set_p95(mut self, input: std::option::Option<f64>) -> Self {
        self.p95 = input;
        self
    }
    /// <p>The average latency for the slowest 10 percent of requests over the last 10 seconds.</p>
    pub fn p90(mut self, input: f64) -> Self {
        self.p90 = Some(input);
        self
    }
    /// <p>The average latency for the slowest 10 percent of requests over the last 10 seconds.</p>
    pub fn set_p90(mut self, input: std::option::Option<f64>) -> Self {
        self.p90 = input;
        self
    }
    /// <p>The average latency for the slowest 15 percent of requests over the last 10 seconds.</p>
    pub fn p85(mut self, input: f64) -> Self {
        self.p85 = Some(input);
        self
    }
    /// <p>The average latency for the slowest 15 percent of requests over the last 10 seconds.</p>
    pub fn set_p85(mut self, input: std::option::Option<f64>) -> Self {
        self.p85 = input;
        self
    }
    /// <p>The average latency for the slowest 25 percent of requests over the last 10 seconds.</p>
    pub fn p75(mut self, input: f64) -> Self {
        self.p75 = Some(input);
        self
    }
    /// <p>The average latency for the slowest 25 percent of requests over the last 10 seconds.</p>
    pub fn set_p75(mut self, input: std::option::Option<f64>) -> Self {
        self.p75 = input;
        self
    }
    /// <p>The average latency for the slowest 50 percent of requests over the last 10 seconds.</p>
    pub fn p50(mut self, input: f64) -> Self {
        self.p50 = Some(input);
        self
    }
    /// <p>The average latency for the slowest 50 percent of requests over the last 10 seconds.</p>
    pub fn set_p50(mut self, input: std::option::Option<f64>) -> Self {
        self.p50 = input;
        self
    }
    /// <p>The average latency for the slowest 90 percent of requests over the last 10 seconds.</p>
    pub fn p10(mut self, input: f64) -> Self {
        self.p10 = Some(input);
        self
    }
    /// <p>The average latency for the slowest 90 percent of requests over the last 10 seconds.</p>
    pub fn set_p10(mut self, input: std::option::Option<f64>) -> Self {
        self.p10 = input;
        self
    }
    /// Consumes the builder and constructs a [`Latency`](crate::types::Latency).
    pub fn build(self) -> crate::types::Latency {
        crate::types::Latency {
            p999: self.p999,
            p99: self.p99,
            p95: self.p95,
            p90: self.p90,
            p85: self.p85,
            p75: self.p75,
            p50: self.p50,
            p10: self.p10,
        }
    }
}
