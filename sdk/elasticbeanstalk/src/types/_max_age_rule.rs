// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A lifecycle rule that deletes application versions after the specified number of days.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MaxAgeRule {
    /// <p>Specify <code>true</code> to apply the rule, or <code>false</code> to disable it.</p>
    pub enabled: bool,
    /// <p>Specify the number of days to retain an application versions.</p>
    pub max_age_in_days: ::std::option::Option<i32>,
    /// <p>Set to <code>true</code> to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.</p>
    pub delete_source_from_s3: ::std::option::Option<bool>,
}
impl MaxAgeRule {
    /// <p>Specify <code>true</code> to apply the rule, or <code>false</code> to disable it.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>Specify the number of days to retain an application versions.</p>
    pub fn max_age_in_days(&self) -> ::std::option::Option<i32> {
        self.max_age_in_days
    }
    /// <p>Set to <code>true</code> to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.</p>
    pub fn delete_source_from_s3(&self) -> ::std::option::Option<bool> {
        self.delete_source_from_s3
    }
}
impl MaxAgeRule {
    /// Creates a new builder-style object to manufacture [`MaxAgeRule`](crate::types::MaxAgeRule).
    pub fn builder() -> crate::types::builders::MaxAgeRuleBuilder {
        crate::types::builders::MaxAgeRuleBuilder::default()
    }
}

/// A builder for [`MaxAgeRule`](crate::types::MaxAgeRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MaxAgeRuleBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) max_age_in_days: ::std::option::Option<i32>,
    pub(crate) delete_source_from_s3: ::std::option::Option<bool>,
}
impl MaxAgeRuleBuilder {
    /// <p>Specify <code>true</code> to apply the rule, or <code>false</code> to disable it.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify <code>true</code> to apply the rule, or <code>false</code> to disable it.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specify <code>true</code> to apply the rule, or <code>false</code> to disable it.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>Specify the number of days to retain an application versions.</p>
    pub fn max_age_in_days(mut self, input: i32) -> Self {
        self.max_age_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the number of days to retain an application versions.</p>
    pub fn set_max_age_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_age_in_days = input;
        self
    }
    /// <p>Specify the number of days to retain an application versions.</p>
    pub fn get_max_age_in_days(&self) -> &::std::option::Option<i32> {
        &self.max_age_in_days
    }
    /// <p>Set to <code>true</code> to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.</p>
    pub fn delete_source_from_s3(mut self, input: bool) -> Self {
        self.delete_source_from_s3 = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to <code>true</code> to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.</p>
    pub fn set_delete_source_from_s3(mut self, input: ::std::option::Option<bool>) -> Self {
        self.delete_source_from_s3 = input;
        self
    }
    /// <p>Set to <code>true</code> to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.</p>
    pub fn get_delete_source_from_s3(&self) -> &::std::option::Option<bool> {
        &self.delete_source_from_s3
    }
    /// Consumes the builder and constructs a [`MaxAgeRule`](crate::types::MaxAgeRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`enabled`](crate::types::builders::MaxAgeRuleBuilder::enabled)
    pub fn build(self) -> ::std::result::Result<crate::types::MaxAgeRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MaxAgeRule {
            enabled: self.enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enabled",
                    "enabled was not specified but it is required when building MaxAgeRule",
                )
            })?,
            max_age_in_days: self.max_age_in_days,
            delete_source_from_s3: self.delete_source_from_s3,
        })
    }
}
