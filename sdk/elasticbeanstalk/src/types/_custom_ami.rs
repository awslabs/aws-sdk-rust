// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A custom AMI available to platforms.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomAmi {
    /// <p>The type of virtualization used to create the custom AMI.</p>
    #[doc(hidden)]
    pub virtualization_type: std::option::Option<std::string::String>,
    /// <p>THe ID of the image used to create the custom AMI.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
}
impl CustomAmi {
    /// <p>The type of virtualization used to create the custom AMI.</p>
    pub fn virtualization_type(&self) -> std::option::Option<&str> {
        self.virtualization_type.as_deref()
    }
    /// <p>THe ID of the image used to create the custom AMI.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
}
impl CustomAmi {
    /// Creates a new builder-style object to manufacture [`CustomAmi`](crate::types::CustomAmi).
    pub fn builder() -> crate::types::builders::CustomAmiBuilder {
        crate::types::builders::CustomAmiBuilder::default()
    }
}

/// A builder for [`CustomAmi`](crate::types::CustomAmi).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomAmiBuilder {
    pub(crate) virtualization_type: std::option::Option<std::string::String>,
    pub(crate) image_id: std::option::Option<std::string::String>,
}
impl CustomAmiBuilder {
    /// <p>The type of virtualization used to create the custom AMI.</p>
    pub fn virtualization_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtualization_type = Some(input.into());
        self
    }
    /// <p>The type of virtualization used to create the custom AMI.</p>
    pub fn set_virtualization_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.virtualization_type = input;
        self
    }
    /// <p>THe ID of the image used to create the custom AMI.</p>
    pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_id = Some(input.into());
        self
    }
    /// <p>THe ID of the image used to create the custom AMI.</p>
    pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomAmi`](crate::types::CustomAmi).
    pub fn build(self) -> crate::types::CustomAmi {
        crate::types::CustomAmi {
            virtualization_type: self.virtualization_type,
            image_id: self.image_id,
        }
    }
}
