// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of an environment tier</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnvironmentTier {
    /// <p>The name of this environment tier.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>For <i>Web server tier</i> – <code>WebServer</code> </p> </li>
    /// <li> <p>For <i>Worker tier</i> – <code>Worker</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of this environment tier.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>For <i>Web server tier</i> – <code>Standard</code> </p> </li>
    /// <li> <p>For <i>Worker tier</i> – <code>SQS/HTTP</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the latest compatible worker tier version.</p> <note>
    /// <p>This member is deprecated. Any specific version that you set may become out of date. We recommend leaving it unspecified.</p>
    /// </note>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl EnvironmentTier {
    /// <p>The name of this environment tier.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>For <i>Web server tier</i> – <code>WebServer</code> </p> </li>
    /// <li> <p>For <i>Worker tier</i> – <code>Worker</code> </p> </li>
    /// </ul>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of this environment tier.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>For <i>Web server tier</i> – <code>Standard</code> </p> </li>
    /// <li> <p>For <i>Worker tier</i> – <code>SQS/HTTP</code> </p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the latest compatible worker tier version.</p> <note>
    /// <p>This member is deprecated. Any specific version that you set may become out of date. We recommend leaving it unspecified.</p>
    /// </note>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl EnvironmentTier {
    /// Creates a new builder-style object to manufacture [`EnvironmentTier`](crate::types::EnvironmentTier).
    pub fn builder() -> crate::types::builders::EnvironmentTierBuilder {
        crate::types::builders::EnvironmentTierBuilder::default()
    }
}

/// A builder for [`EnvironmentTier`](crate::types::EnvironmentTier).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnvironmentTierBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl EnvironmentTierBuilder {
    /// <p>The name of this environment tier.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>For <i>Web server tier</i> – <code>WebServer</code> </p> </li>
    /// <li> <p>For <i>Worker tier</i> – <code>Worker</code> </p> </li>
    /// </ul>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of this environment tier.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>For <i>Web server tier</i> – <code>WebServer</code> </p> </li>
    /// <li> <p>For <i>Worker tier</i> – <code>Worker</code> </p> </li>
    /// </ul>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of this environment tier.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>For <i>Web server tier</i> – <code>Standard</code> </p> </li>
    /// <li> <p>For <i>Worker tier</i> – <code>SQS/HTTP</code> </p> </li>
    /// </ul>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of this environment tier.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p>For <i>Web server tier</i> – <code>Standard</code> </p> </li>
    /// <li> <p>For <i>Worker tier</i> – <code>SQS/HTTP</code> </p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the latest compatible worker tier version.</p> <note>
    /// <p>This member is deprecated. Any specific version that you set may become out of date. We recommend leaving it unspecified.</p>
    /// </note>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the latest compatible worker tier version.</p> <note>
    /// <p>This member is deprecated. Any specific version that you set may become out of date. We recommend leaving it unspecified.</p>
    /// </note>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`EnvironmentTier`](crate::types::EnvironmentTier).
    pub fn build(self) -> crate::types::EnvironmentTier {
        crate::types::EnvironmentTier {
            name: self.name,
            r#type: self.r#type,
            version: self.version,
        }
    }
}
