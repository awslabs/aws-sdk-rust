// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationDescription {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub application_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the application.</p>
    pub application_name: ::std::option::Option<::std::string::String>,
    /// <p>User-defined description of the application.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date when the application was created.</p>
    pub date_created: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date when the application was last modified.</p>
    pub date_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The names of the versions for this application.</p>
    pub versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The names of the configuration templates associated with this application.</p>
    pub configuration_templates: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The lifecycle settings for the application.</p>
    pub resource_lifecycle_config: ::std::option::Option<crate::types::ApplicationResourceLifecycleConfig>,
}
impl ApplicationDescription {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn application_arn(&self) -> ::std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The name of the application.</p>
    pub fn application_name(&self) -> ::std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>User-defined description of the application.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date when the application was created.</p>
    pub fn date_created(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_created.as_ref()
    }
    /// <p>The date when the application was last modified.</p>
    pub fn date_updated(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_updated.as_ref()
    }
    /// <p>The names of the versions for this application.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.versions.is_none()`.
    pub fn versions(&self) -> &[::std::string::String] {
        self.versions.as_deref().unwrap_or_default()
    }
    /// <p>The names of the configuration templates associated with this application.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.configuration_templates.is_none()`.
    pub fn configuration_templates(&self) -> &[::std::string::String] {
        self.configuration_templates.as_deref().unwrap_or_default()
    }
    /// <p>The lifecycle settings for the application.</p>
    pub fn resource_lifecycle_config(&self) -> ::std::option::Option<&crate::types::ApplicationResourceLifecycleConfig> {
        self.resource_lifecycle_config.as_ref()
    }
}
impl ApplicationDescription {
    /// Creates a new builder-style object to manufacture [`ApplicationDescription`](crate::types::ApplicationDescription).
    pub fn builder() -> crate::types::builders::ApplicationDescriptionBuilder {
        crate::types::builders::ApplicationDescriptionBuilder::default()
    }
}

/// A builder for [`ApplicationDescription`](crate::types::ApplicationDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationDescriptionBuilder {
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) application_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) date_created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) date_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) configuration_templates: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) resource_lifecycle_config: ::std::option::Option<crate::types::ApplicationResourceLifecycleConfig>,
}
impl ApplicationDescriptionBuilder {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>The name of the application.</p>
    pub fn application_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_application_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The name of the application.</p>
    pub fn get_application_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_name
    }
    /// <p>User-defined description of the application.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>User-defined description of the application.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>User-defined description of the application.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date when the application was created.</p>
    pub fn date_created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the application was created.</p>
    pub fn set_date_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_created = input;
        self
    }
    /// <p>The date when the application was created.</p>
    pub fn get_date_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_created
    }
    /// <p>The date when the application was last modified.</p>
    pub fn date_updated(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_updated = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the application was last modified.</p>
    pub fn set_date_updated(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_updated = input;
        self
    }
    /// <p>The date when the application was last modified.</p>
    pub fn get_date_updated(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_updated
    }
    /// Appends an item to `versions`.
    ///
    /// To override the contents of this collection use [`set_versions`](Self::set_versions).
    ///
    /// <p>The names of the versions for this application.</p>
    pub fn versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.versions.unwrap_or_default();
        v.push(input.into());
        self.versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of the versions for this application.</p>
    pub fn set_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.versions = input;
        self
    }
    /// <p>The names of the versions for this application.</p>
    pub fn get_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.versions
    }
    /// Appends an item to `configuration_templates`.
    ///
    /// To override the contents of this collection use [`set_configuration_templates`](Self::set_configuration_templates).
    ///
    /// <p>The names of the configuration templates associated with this application.</p>
    pub fn configuration_templates(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.configuration_templates.unwrap_or_default();
        v.push(input.into());
        self.configuration_templates = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of the configuration templates associated with this application.</p>
    pub fn set_configuration_templates(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.configuration_templates = input;
        self
    }
    /// <p>The names of the configuration templates associated with this application.</p>
    pub fn get_configuration_templates(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.configuration_templates
    }
    /// <p>The lifecycle settings for the application.</p>
    pub fn resource_lifecycle_config(mut self, input: crate::types::ApplicationResourceLifecycleConfig) -> Self {
        self.resource_lifecycle_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lifecycle settings for the application.</p>
    pub fn set_resource_lifecycle_config(mut self, input: ::std::option::Option<crate::types::ApplicationResourceLifecycleConfig>) -> Self {
        self.resource_lifecycle_config = input;
        self
    }
    /// <p>The lifecycle settings for the application.</p>
    pub fn get_resource_lifecycle_config(&self) -> &::std::option::Option<crate::types::ApplicationResourceLifecycleConfig> {
        &self.resource_lifecycle_config
    }
    /// Consumes the builder and constructs a [`ApplicationDescription`](crate::types::ApplicationDescription).
    pub fn build(self) -> crate::types::ApplicationDescription {
        crate::types::ApplicationDescription {
            application_arn: self.application_arn,
            application_name: self.application_name,
            description: self.description,
            date_created: self.date_created,
            date_updated: self.date_updated,
            versions: self.versions,
            configuration_templates: self.configuration_templates,
            resource_lifecycle_config: self.resource_lifecycle_config,
        }
    }
}
