// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A link to another environment, defined in the environment's manifest. Links provide connection information in system properties that can be used to connect to another environment in the same group. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest (env.yaml)</a> for details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnvironmentLink {
    /// <p>The name of the link.</p>
    #[doc(hidden)]
    pub link_name: std::option::Option<std::string::String>,
    /// <p>The name of the linked environment (the dependency).</p>
    #[doc(hidden)]
    pub environment_name: std::option::Option<std::string::String>,
}
impl EnvironmentLink {
    /// <p>The name of the link.</p>
    pub fn link_name(&self) -> std::option::Option<&str> {
        self.link_name.as_deref()
    }
    /// <p>The name of the linked environment (the dependency).</p>
    pub fn environment_name(&self) -> std::option::Option<&str> {
        self.environment_name.as_deref()
    }
}
impl EnvironmentLink {
    /// Creates a new builder-style object to manufacture [`EnvironmentLink`](crate::types::EnvironmentLink).
    pub fn builder() -> crate::types::builders::EnvironmentLinkBuilder {
        crate::types::builders::EnvironmentLinkBuilder::default()
    }
}

/// A builder for [`EnvironmentLink`](crate::types::EnvironmentLink).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnvironmentLinkBuilder {
    pub(crate) link_name: std::option::Option<std::string::String>,
    pub(crate) environment_name: std::option::Option<std::string::String>,
}
impl EnvironmentLinkBuilder {
    /// <p>The name of the link.</p>
    pub fn link_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.link_name = Some(input.into());
        self
    }
    /// <p>The name of the link.</p>
    pub fn set_link_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.link_name = input;
        self
    }
    /// <p>The name of the linked environment (the dependency).</p>
    pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_name = Some(input.into());
        self
    }
    /// <p>The name of the linked environment (the dependency).</p>
    pub fn set_environment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// Consumes the builder and constructs a [`EnvironmentLink`](crate::types::EnvironmentLink).
    pub fn build(self) -> crate::types::EnvironmentLink {
        crate::types::EnvironmentLink {
            link_name: self.link_name,
            environment_name: self.environment_name,
        }
    }
}
