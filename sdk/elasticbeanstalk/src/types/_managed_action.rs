// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The record of an upcoming or in-progress managed action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ManagedAction {
    /// <p>A unique identifier for the managed action.</p>
    #[doc(hidden)]
    pub action_id: std::option::Option<std::string::String>,
    /// <p>A description of the managed action.</p>
    #[doc(hidden)]
    pub action_description: std::option::Option<std::string::String>,
    /// <p>The type of managed action.</p>
    #[doc(hidden)]
    pub action_type: std::option::Option<crate::types::ActionType>,
    /// <p>The status of the managed action. If the action is <code>Scheduled</code>, you can apply it immediately with <code>ApplyEnvironmentManagedAction</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ActionStatus>,
    /// <p>The start time of the maintenance window in which the managed action will execute.</p>
    #[doc(hidden)]
    pub window_start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ManagedAction {
    /// <p>A unique identifier for the managed action.</p>
    pub fn action_id(&self) -> std::option::Option<&str> {
        self.action_id.as_deref()
    }
    /// <p>A description of the managed action.</p>
    pub fn action_description(&self) -> std::option::Option<&str> {
        self.action_description.as_deref()
    }
    /// <p>The type of managed action.</p>
    pub fn action_type(&self) -> std::option::Option<&crate::types::ActionType> {
        self.action_type.as_ref()
    }
    /// <p>The status of the managed action. If the action is <code>Scheduled</code>, you can apply it immediately with <code>ApplyEnvironmentManagedAction</code>.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ActionStatus> {
        self.status.as_ref()
    }
    /// <p>The start time of the maintenance window in which the managed action will execute.</p>
    pub fn window_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.window_start_time.as_ref()
    }
}
impl ManagedAction {
    /// Creates a new builder-style object to manufacture [`ManagedAction`](crate::types::ManagedAction).
    pub fn builder() -> crate::types::builders::ManagedActionBuilder {
        crate::types::builders::ManagedActionBuilder::default()
    }
}

/// A builder for [`ManagedAction`](crate::types::ManagedAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ManagedActionBuilder {
    pub(crate) action_id: std::option::Option<std::string::String>,
    pub(crate) action_description: std::option::Option<std::string::String>,
    pub(crate) action_type: std::option::Option<crate::types::ActionType>,
    pub(crate) status: std::option::Option<crate::types::ActionStatus>,
    pub(crate) window_start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ManagedActionBuilder {
    /// <p>A unique identifier for the managed action.</p>
    pub fn action_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the managed action.</p>
    pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.action_id = input;
        self
    }
    /// <p>A description of the managed action.</p>
    pub fn action_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_description = Some(input.into());
        self
    }
    /// <p>A description of the managed action.</p>
    pub fn set_action_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.action_description = input;
        self
    }
    /// <p>The type of managed action.</p>
    pub fn action_type(mut self, input: crate::types::ActionType) -> Self {
        self.action_type = Some(input);
        self
    }
    /// <p>The type of managed action.</p>
    pub fn set_action_type(mut self, input: std::option::Option<crate::types::ActionType>) -> Self {
        self.action_type = input;
        self
    }
    /// <p>The status of the managed action. If the action is <code>Scheduled</code>, you can apply it immediately with <code>ApplyEnvironmentManagedAction</code>.</p>
    pub fn status(mut self, input: crate::types::ActionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the managed action. If the action is <code>Scheduled</code>, you can apply it immediately with <code>ApplyEnvironmentManagedAction</code>.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ActionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The start time of the maintenance window in which the managed action will execute.</p>
    pub fn window_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.window_start_time = Some(input);
        self
    }
    /// <p>The start time of the maintenance window in which the managed action will execute.</p>
    pub fn set_window_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.window_start_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ManagedAction`](crate::types::ManagedAction).
    pub fn build(self) -> crate::types::ManagedAction {
        crate::types::ManagedAction {
            action_id: self.action_id,
            action_description: self.action_description,
            action_type: self.action_type,
            status: self.status,
            window_start_time: self.window_start_time,
        }
    }
}
