// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes criteria to restrict the results when listing platform versions.</p>
/// <p>The filter is evaluated as follows: <code>Type Operator Values[1]</code> </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PlatformFilter {
    /// <p>The platform version attribute to which the filter values are applied.</p>
    /// <p>Valid values: <code>PlatformName</code> | <code>PlatformVersion</code> | <code>PlatformStatus</code> | <code>PlatformBranchName</code> | <code>PlatformLifecycleState</code> | <code>PlatformOwner</code> | <code>SupportedTier</code> | <code>SupportedAddon</code> | <code>ProgrammingLanguageName</code> | <code>OperatingSystemName</code> </p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The operator to apply to the <code>Type</code> with each of the <code>Values</code>.</p>
    /// <p>Valid values: <code>=</code> | <code>!=</code> | <code>&lt;</code> | <code>&lt;=</code> | <code>&gt;</code> | <code>&gt;=</code> | <code>contains</code> | <code>begins_with</code> | <code>ends_with</code> </p>
    pub operator: ::std::option::Option<::std::string::String>,
    /// <p>The list of values applied to the filtering platform version attribute. Only one value is supported for all current operators.</p>
    /// <p>The following list shows valid filter values for some filter attributes.</p>
    /// <ul>
    /// <li> <p> <code>PlatformStatus</code>: <code>Creating</code> | <code>Failed</code> | <code>Ready</code> | <code>Deleting</code> | <code>Deleted</code> </p> </li>
    /// <li> <p> <code>PlatformLifecycleState</code>: <code>recommended</code> </p> </li>
    /// <li> <p> <code>SupportedTier</code>: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code> </p> </li>
    /// <li> <p> <code>SupportedAddon</code>: <code>Log/S3</code> | <code>Monitoring/Healthd</code> | <code>WorkerDaemon/SQSD</code> </p> </li>
    /// </ul>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PlatformFilter {
    /// <p>The platform version attribute to which the filter values are applied.</p>
    /// <p>Valid values: <code>PlatformName</code> | <code>PlatformVersion</code> | <code>PlatformStatus</code> | <code>PlatformBranchName</code> | <code>PlatformLifecycleState</code> | <code>PlatformOwner</code> | <code>SupportedTier</code> | <code>SupportedAddon</code> | <code>ProgrammingLanguageName</code> | <code>OperatingSystemName</code> </p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The operator to apply to the <code>Type</code> with each of the <code>Values</code>.</p>
    /// <p>Valid values: <code>=</code> | <code>!=</code> | <code>&lt;</code> | <code>&lt;=</code> | <code>&gt;</code> | <code>&gt;=</code> | <code>contains</code> | <code>begins_with</code> | <code>ends_with</code> </p>
    pub fn operator(&self) -> ::std::option::Option<&str> {
        self.operator.as_deref()
    }
    /// <p>The list of values applied to the filtering platform version attribute. Only one value is supported for all current operators.</p>
    /// <p>The following list shows valid filter values for some filter attributes.</p>
    /// <ul>
    /// <li> <p> <code>PlatformStatus</code>: <code>Creating</code> | <code>Failed</code> | <code>Ready</code> | <code>Deleting</code> | <code>Deleted</code> </p> </li>
    /// <li> <p> <code>PlatformLifecycleState</code>: <code>recommended</code> </p> </li>
    /// <li> <p> <code>SupportedTier</code>: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code> </p> </li>
    /// <li> <p> <code>SupportedAddon</code>: <code>Log/S3</code> | <code>Monitoring/Healthd</code> | <code>WorkerDaemon/SQSD</code> </p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl PlatformFilter {
    /// Creates a new builder-style object to manufacture [`PlatformFilter`](crate::types::PlatformFilter).
    pub fn builder() -> crate::types::builders::PlatformFilterBuilder {
        crate::types::builders::PlatformFilterBuilder::default()
    }
}

/// A builder for [`PlatformFilter`](crate::types::PlatformFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PlatformFilterBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) operator: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PlatformFilterBuilder {
    /// <p>The platform version attribute to which the filter values are applied.</p>
    /// <p>Valid values: <code>PlatformName</code> | <code>PlatformVersion</code> | <code>PlatformStatus</code> | <code>PlatformBranchName</code> | <code>PlatformLifecycleState</code> | <code>PlatformOwner</code> | <code>SupportedTier</code> | <code>SupportedAddon</code> | <code>ProgrammingLanguageName</code> | <code>OperatingSystemName</code> </p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The platform version attribute to which the filter values are applied.</p>
    /// <p>Valid values: <code>PlatformName</code> | <code>PlatformVersion</code> | <code>PlatformStatus</code> | <code>PlatformBranchName</code> | <code>PlatformLifecycleState</code> | <code>PlatformOwner</code> | <code>SupportedTier</code> | <code>SupportedAddon</code> | <code>ProgrammingLanguageName</code> | <code>OperatingSystemName</code> </p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The platform version attribute to which the filter values are applied.</p>
    /// <p>Valid values: <code>PlatformName</code> | <code>PlatformVersion</code> | <code>PlatformStatus</code> | <code>PlatformBranchName</code> | <code>PlatformLifecycleState</code> | <code>PlatformOwner</code> | <code>SupportedTier</code> | <code>SupportedAddon</code> | <code>ProgrammingLanguageName</code> | <code>OperatingSystemName</code> </p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The operator to apply to the <code>Type</code> with each of the <code>Values</code>.</p>
    /// <p>Valid values: <code>=</code> | <code>!=</code> | <code>&lt;</code> | <code>&lt;=</code> | <code>&gt;</code> | <code>&gt;=</code> | <code>contains</code> | <code>begins_with</code> | <code>ends_with</code> </p>
    pub fn operator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The operator to apply to the <code>Type</code> with each of the <code>Values</code>.</p>
    /// <p>Valid values: <code>=</code> | <code>!=</code> | <code>&lt;</code> | <code>&lt;=</code> | <code>&gt;</code> | <code>&gt;=</code> | <code>contains</code> | <code>begins_with</code> | <code>ends_with</code> </p>
    pub fn set_operator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The operator to apply to the <code>Type</code> with each of the <code>Values</code>.</p>
    /// <p>Valid values: <code>=</code> | <code>!=</code> | <code>&lt;</code> | <code>&lt;=</code> | <code>&gt;</code> | <code>&gt;=</code> | <code>contains</code> | <code>begins_with</code> | <code>ends_with</code> </p>
    pub fn get_operator(&self) -> &::std::option::Option<::std::string::String> {
        &self.operator
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The list of values applied to the filtering platform version attribute. Only one value is supported for all current operators.</p>
    /// <p>The following list shows valid filter values for some filter attributes.</p>
    /// <ul>
    /// <li> <p> <code>PlatformStatus</code>: <code>Creating</code> | <code>Failed</code> | <code>Ready</code> | <code>Deleting</code> | <code>Deleted</code> </p> </li>
    /// <li> <p> <code>PlatformLifecycleState</code>: <code>recommended</code> </p> </li>
    /// <li> <p> <code>SupportedTier</code>: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code> </p> </li>
    /// <li> <p> <code>SupportedAddon</code>: <code>Log/S3</code> | <code>Monitoring/Healthd</code> | <code>WorkerDaemon/SQSD</code> </p> </li>
    /// </ul>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of values applied to the filtering platform version attribute. Only one value is supported for all current operators.</p>
    /// <p>The following list shows valid filter values for some filter attributes.</p>
    /// <ul>
    /// <li> <p> <code>PlatformStatus</code>: <code>Creating</code> | <code>Failed</code> | <code>Ready</code> | <code>Deleting</code> | <code>Deleted</code> </p> </li>
    /// <li> <p> <code>PlatformLifecycleState</code>: <code>recommended</code> </p> </li>
    /// <li> <p> <code>SupportedTier</code>: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code> </p> </li>
    /// <li> <p> <code>SupportedAddon</code>: <code>Log/S3</code> | <code>Monitoring/Healthd</code> | <code>WorkerDaemon/SQSD</code> </p> </li>
    /// </ul>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The list of values applied to the filtering platform version attribute. Only one value is supported for all current operators.</p>
    /// <p>The following list shows valid filter values for some filter attributes.</p>
    /// <ul>
    /// <li> <p> <code>PlatformStatus</code>: <code>Creating</code> | <code>Failed</code> | <code>Ready</code> | <code>Deleting</code> | <code>Deleted</code> </p> </li>
    /// <li> <p> <code>PlatformLifecycleState</code>: <code>recommended</code> </p> </li>
    /// <li> <p> <code>SupportedTier</code>: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code> </p> </li>
    /// <li> <p> <code>SupportedAddon</code>: <code>Log/S3</code> | <code>Monitoring/Healthd</code> | <code>WorkerDaemon/SQSD</code> </p> </li>
    /// </ul>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`PlatformFilter`](crate::types::PlatformFilter).
    pub fn build(self) -> crate::types::PlatformFilter {
        crate::types::PlatformFilter {
            r#type: self.r#type,
            operator: self.operator,
            values: self.values,
        }
    }
}
