// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of a Listener for the LoadBalancer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Listener {
    /// <p>The protocol that is used by the Listener.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<std::string::String>,
    /// <p>The port that is used by the Listener.</p>
    #[doc(hidden)]
    pub port: i32,
}
impl Listener {
    /// <p>The protocol that is used by the Listener.</p>
    pub fn protocol(&self) -> std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>The port that is used by the Listener.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
}
impl Listener {
    /// Creates a new builder-style object to manufacture [`Listener`](crate::types::Listener).
    pub fn builder() -> crate::types::builders::ListenerBuilder {
        crate::types::builders::ListenerBuilder::default()
    }
}

/// A builder for [`Listener`](crate::types::Listener).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListenerBuilder {
    pub(crate) protocol: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<i32>,
}
impl ListenerBuilder {
    /// <p>The protocol that is used by the Listener.</p>
    pub fn protocol(mut self, input: impl Into<std::string::String>) -> Self {
        self.protocol = Some(input.into());
        self
    }
    /// <p>The protocol that is used by the Listener.</p>
    pub fn set_protocol(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The port that is used by the Listener.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The port that is used by the Listener.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// Consumes the builder and constructs a [`Listener`](crate::types::Listener).
    pub fn build(self) -> crate::types::Listener {
        crate::types::Listener {
            protocol: self.protocol,
            port: self.port.unwrap_or_default(),
        }
    }
}
