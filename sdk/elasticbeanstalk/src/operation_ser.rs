// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_abort_environment_update(
    input: &crate::input::AbortEnvironmentUpdateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AbortEnvironmentUpdate", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("EnvironmentId");
    if let Some(var_2) = &input.environment_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("EnvironmentName");
    if let Some(var_4) = &input.environment_name {
        scope_3.string(var_4);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_environment_managed_action(
    input: &crate::input::ApplyEnvironmentManagedActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ApplyEnvironmentManagedAction", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("EnvironmentName");
    if let Some(var_6) = &input.environment_name {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("EnvironmentId");
    if let Some(var_8) = &input.environment_id {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("ActionId");
    if let Some(var_10) = &input.action_id {
        scope_9.string(var_10);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_environment_operations_role(
    input: &crate::input::AssociateEnvironmentOperationsRoleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnvironmentOperationsRole",
        "2010-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("EnvironmentName");
    if let Some(var_12) = &input.environment_name {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("OperationsRole");
    if let Some(var_14) = &input.operations_role {
        scope_13.string(var_14);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_check_dns_availability(
    input: &crate::input::CheckDnsAvailabilityInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CheckDNSAvailability", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("CNAMEPrefix");
    if let Some(var_16) = &input.cname_prefix {
        scope_15.string(var_16);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_compose_environments(
    input: &crate::input::ComposeEnvironmentsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ComposeEnvironments", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("ApplicationName");
    if let Some(var_18) = &input.application_name {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("GroupName");
    if let Some(var_20) = &input.group_name {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("VersionLabels");
    if let Some(var_22) = &input.version_labels {
        let mut list_24 = scope_21.start_list(false, None);
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            entry_25.string(item_23);
        }
        list_24.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_application(
    input: &crate::input::CreateApplicationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateApplication", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("ApplicationName");
    if let Some(var_27) = &input.application_name {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("Description");
    if let Some(var_29) = &input.description {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("ResourceLifecycleConfig");
    if let Some(var_31) = &input.resource_lifecycle_config {
        crate::query_ser::serialize_structure_crate_model_application_resource_lifecycle_config(
            scope_30, var_31,
        );
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("Tags");
    if let Some(var_33) = &input.tags {
        let mut list_35 = scope_32.start_list(false, None);
        for item_34 in var_33 {
            #[allow(unused_mut)]
            let mut entry_36 = list_35.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_36, item_34);
        }
        list_35.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_application_version(
    input: &crate::input::CreateApplicationVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateApplicationVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("ApplicationName");
    if let Some(var_38) = &input.application_name {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("VersionLabel");
    if let Some(var_40) = &input.version_label {
        scope_39.string(var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("Description");
    if let Some(var_42) = &input.description {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("SourceBuildInformation");
    if let Some(var_44) = &input.source_build_information {
        crate::query_ser::serialize_structure_crate_model_source_build_information(
            scope_43, var_44,
        );
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("SourceBundle");
    if let Some(var_46) = &input.source_bundle {
        crate::query_ser::serialize_structure_crate_model_s3_location(scope_45, var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("BuildConfiguration");
    if let Some(var_48) = &input.build_configuration {
        crate::query_ser::serialize_structure_crate_model_build_configuration(scope_47, var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("AutoCreateApplication");
    if let Some(var_50) = &input.auto_create_application {
        scope_49.boolean(*var_50);
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Process");
    if let Some(var_52) = &input.process {
        scope_51.boolean(*var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("Tags");
    if let Some(var_54) = &input.tags {
        let mut list_56 = scope_53.start_list(false, None);
        for item_55 in var_54 {
            #[allow(unused_mut)]
            let mut entry_57 = list_56.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_57, item_55);
        }
        list_56.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_configuration_template(
    input: &crate::input::CreateConfigurationTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateConfigurationTemplate", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("ApplicationName");
    if let Some(var_59) = &input.application_name {
        scope_58.string(var_59);
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("TemplateName");
    if let Some(var_61) = &input.template_name {
        scope_60.string(var_61);
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("SolutionStackName");
    if let Some(var_63) = &input.solution_stack_name {
        scope_62.string(var_63);
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("PlatformArn");
    if let Some(var_65) = &input.platform_arn {
        scope_64.string(var_65);
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("SourceConfiguration");
    if let Some(var_67) = &input.source_configuration {
        crate::query_ser::serialize_structure_crate_model_source_configuration(scope_66, var_67);
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("EnvironmentId");
    if let Some(var_69) = &input.environment_id {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("Description");
    if let Some(var_71) = &input.description {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("OptionSettings");
    if let Some(var_73) = &input.option_settings {
        let mut list_75 = scope_72.start_list(false, None);
        for item_74 in var_73 {
            #[allow(unused_mut)]
            let mut entry_76 = list_75.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_76, item_74,
            );
        }
        list_75.finish();
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("Tags");
    if let Some(var_78) = &input.tags {
        let mut list_80 = scope_77.start_list(false, None);
        for item_79 in var_78 {
            #[allow(unused_mut)]
            let mut entry_81 = list_80.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_81, item_79);
        }
        list_80.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_environment(
    input: &crate::input::CreateEnvironmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateEnvironment", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("ApplicationName");
    if let Some(var_83) = &input.application_name {
        scope_82.string(var_83);
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("EnvironmentName");
    if let Some(var_85) = &input.environment_name {
        scope_84.string(var_85);
    }
    #[allow(unused_mut)]
    let mut scope_86 = writer.prefix("GroupName");
    if let Some(var_87) = &input.group_name {
        scope_86.string(var_87);
    }
    #[allow(unused_mut)]
    let mut scope_88 = writer.prefix("Description");
    if let Some(var_89) = &input.description {
        scope_88.string(var_89);
    }
    #[allow(unused_mut)]
    let mut scope_90 = writer.prefix("CNAMEPrefix");
    if let Some(var_91) = &input.cname_prefix {
        scope_90.string(var_91);
    }
    #[allow(unused_mut)]
    let mut scope_92 = writer.prefix("Tier");
    if let Some(var_93) = &input.tier {
        crate::query_ser::serialize_structure_crate_model_environment_tier(scope_92, var_93);
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("Tags");
    if let Some(var_95) = &input.tags {
        let mut list_97 = scope_94.start_list(false, None);
        for item_96 in var_95 {
            #[allow(unused_mut)]
            let mut entry_98 = list_97.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_98, item_96);
        }
        list_97.finish();
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("VersionLabel");
    if let Some(var_100) = &input.version_label {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("TemplateName");
    if let Some(var_102) = &input.template_name {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("SolutionStackName");
    if let Some(var_104) = &input.solution_stack_name {
        scope_103.string(var_104);
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("PlatformArn");
    if let Some(var_106) = &input.platform_arn {
        scope_105.string(var_106);
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("OptionSettings");
    if let Some(var_108) = &input.option_settings {
        let mut list_110 = scope_107.start_list(false, None);
        for item_109 in var_108 {
            #[allow(unused_mut)]
            let mut entry_111 = list_110.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_111, item_109,
            );
        }
        list_110.finish();
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("OptionsToRemove");
    if let Some(var_113) = &input.options_to_remove {
        let mut list_115 = scope_112.start_list(false, None);
        for item_114 in var_113 {
            #[allow(unused_mut)]
            let mut entry_116 = list_115.entry();
            crate::query_ser::serialize_structure_crate_model_option_specification(
                entry_116, item_114,
            );
        }
        list_115.finish();
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("OperationsRole");
    if let Some(var_118) = &input.operations_role {
        scope_117.string(var_118);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_platform_version(
    input: &crate::input::CreatePlatformVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreatePlatformVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("PlatformName");
    if let Some(var_120) = &input.platform_name {
        scope_119.string(var_120);
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("PlatformVersion");
    if let Some(var_122) = &input.platform_version {
        scope_121.string(var_122);
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("PlatformDefinitionBundle");
    if let Some(var_124) = &input.platform_definition_bundle {
        crate::query_ser::serialize_structure_crate_model_s3_location(scope_123, var_124);
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("EnvironmentName");
    if let Some(var_126) = &input.environment_name {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("OptionSettings");
    if let Some(var_128) = &input.option_settings {
        let mut list_130 = scope_127.start_list(false, None);
        for item_129 in var_128 {
            #[allow(unused_mut)]
            let mut entry_131 = list_130.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_131, item_129,
            );
        }
        list_130.finish();
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("Tags");
    if let Some(var_133) = &input.tags {
        let mut list_135 = scope_132.start_list(false, None);
        for item_134 in var_133 {
            #[allow(unused_mut)]
            let mut entry_136 = list_135.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_136, item_134);
        }
        list_135.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_storage_location(
    input: &crate::input::CreateStorageLocationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateStorageLocation", "2010-12-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_application(
    input: &crate::input::DeleteApplicationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteApplication", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("ApplicationName");
    if let Some(var_138) = &input.application_name {
        scope_137.string(var_138);
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("TerminateEnvByForce");
    if let Some(var_140) = &input.terminate_env_by_force {
        scope_139.boolean(*var_140);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_application_version(
    input: &crate::input::DeleteApplicationVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteApplicationVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("ApplicationName");
    if let Some(var_142) = &input.application_name {
        scope_141.string(var_142);
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("VersionLabel");
    if let Some(var_144) = &input.version_label {
        scope_143.string(var_144);
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("DeleteSourceBundle");
    if let Some(var_146) = &input.delete_source_bundle {
        scope_145.boolean(*var_146);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_configuration_template(
    input: &crate::input::DeleteConfigurationTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteConfigurationTemplate", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("ApplicationName");
    if let Some(var_148) = &input.application_name {
        scope_147.string(var_148);
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("TemplateName");
    if let Some(var_150) = &input.template_name {
        scope_149.string(var_150);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_environment_configuration(
    input: &crate::input::DeleteEnvironmentConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteEnvironmentConfiguration", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("ApplicationName");
    if let Some(var_152) = &input.application_name {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("EnvironmentName");
    if let Some(var_154) = &input.environment_name {
        scope_153.string(var_154);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_platform_version(
    input: &crate::input::DeletePlatformVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeletePlatformVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("PlatformArn");
    if let Some(var_156) = &input.platform_arn {
        scope_155.string(var_156);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2010-12-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_applications(
    input: &crate::input::DescribeApplicationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeApplications", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("ApplicationNames");
    if let Some(var_158) = &input.application_names {
        let mut list_160 = scope_157.start_list(false, None);
        for item_159 in var_158 {
            #[allow(unused_mut)]
            let mut entry_161 = list_160.entry();
            entry_161.string(item_159);
        }
        list_160.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_application_versions(
    input: &crate::input::DescribeApplicationVersionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeApplicationVersions", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("ApplicationName");
    if let Some(var_163) = &input.application_name {
        scope_162.string(var_163);
    }
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("VersionLabels");
    if let Some(var_165) = &input.version_labels {
        let mut list_167 = scope_164.start_list(false, None);
        for item_166 in var_165 {
            #[allow(unused_mut)]
            let mut entry_168 = list_167.entry();
            entry_168.string(item_166);
        }
        list_167.finish();
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("MaxRecords");
    if let Some(var_170) = &input.max_records {
        scope_169.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_170).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("NextToken");
    if let Some(var_172) = &input.next_token {
        scope_171.string(var_172);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_configuration_options(
    input: &crate::input::DescribeConfigurationOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeConfigurationOptions", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("ApplicationName");
    if let Some(var_174) = &input.application_name {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("TemplateName");
    if let Some(var_176) = &input.template_name {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("EnvironmentName");
    if let Some(var_178) = &input.environment_name {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("SolutionStackName");
    if let Some(var_180) = &input.solution_stack_name {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("PlatformArn");
    if let Some(var_182) = &input.platform_arn {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("Options");
    if let Some(var_184) = &input.options {
        let mut list_186 = scope_183.start_list(false, None);
        for item_185 in var_184 {
            #[allow(unused_mut)]
            let mut entry_187 = list_186.entry();
            crate::query_ser::serialize_structure_crate_model_option_specification(
                entry_187, item_185,
            );
        }
        list_186.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_configuration_settings(
    input: &crate::input::DescribeConfigurationSettingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeConfigurationSettings", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("ApplicationName");
    if let Some(var_189) = &input.application_name {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("TemplateName");
    if let Some(var_191) = &input.template_name {
        scope_190.string(var_191);
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("EnvironmentName");
    if let Some(var_193) = &input.environment_name {
        scope_192.string(var_193);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_environment_health(
    input: &crate::input::DescribeEnvironmentHealthInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeEnvironmentHealth", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("EnvironmentName");
    if let Some(var_195) = &input.environment_name {
        scope_194.string(var_195);
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("EnvironmentId");
    if let Some(var_197) = &input.environment_id {
        scope_196.string(var_197);
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("AttributeNames");
    if let Some(var_199) = &input.attribute_names {
        let mut list_201 = scope_198.start_list(false, None);
        for item_200 in var_199 {
            #[allow(unused_mut)]
            let mut entry_202 = list_201.entry();
            entry_202.string(item_200.as_str());
        }
        list_201.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_environment_managed_action_history(
    input: &crate::input::DescribeEnvironmentManagedActionHistoryInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEnvironmentManagedActionHistory",
        "2010-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("EnvironmentId");
    if let Some(var_204) = &input.environment_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("EnvironmentName");
    if let Some(var_206) = &input.environment_name {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("NextToken");
    if let Some(var_208) = &input.next_token {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("MaxItems");
    if let Some(var_210) = &input.max_items {
        scope_209.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_environment_managed_actions(
    input: &crate::input::DescribeEnvironmentManagedActionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeEnvironmentManagedActions", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("EnvironmentName");
    if let Some(var_212) = &input.environment_name {
        scope_211.string(var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("EnvironmentId");
    if let Some(var_214) = &input.environment_id {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("Status");
    if let Some(var_216) = &input.status {
        scope_215.string(var_216.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_environment_resources(
    input: &crate::input::DescribeEnvironmentResourcesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeEnvironmentResources", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("EnvironmentId");
    if let Some(var_218) = &input.environment_id {
        scope_217.string(var_218);
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("EnvironmentName");
    if let Some(var_220) = &input.environment_name {
        scope_219.string(var_220);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_environments(
    input: &crate::input::DescribeEnvironmentsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeEnvironments", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("ApplicationName");
    if let Some(var_222) = &input.application_name {
        scope_221.string(var_222);
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("VersionLabel");
    if let Some(var_224) = &input.version_label {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("EnvironmentIds");
    if let Some(var_226) = &input.environment_ids {
        let mut list_228 = scope_225.start_list(false, None);
        for item_227 in var_226 {
            #[allow(unused_mut)]
            let mut entry_229 = list_228.entry();
            entry_229.string(item_227);
        }
        list_228.finish();
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("EnvironmentNames");
    if let Some(var_231) = &input.environment_names {
        let mut list_233 = scope_230.start_list(false, None);
        for item_232 in var_231 {
            #[allow(unused_mut)]
            let mut entry_234 = list_233.entry();
            entry_234.string(item_232);
        }
        list_233.finish();
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("IncludeDeleted");
    if let Some(var_236) = &input.include_deleted {
        scope_235.boolean(*var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("IncludedDeletedBackTo");
    if let Some(var_238) = &input.included_deleted_back_to {
        scope_237.instant(var_238, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("MaxRecords");
    if let Some(var_240) = &input.max_records {
        scope_239.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_240).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("NextToken");
    if let Some(var_242) = &input.next_token {
        scope_241.string(var_242);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("ApplicationName");
    if let Some(var_244) = &input.application_name {
        scope_243.string(var_244);
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("VersionLabel");
    if let Some(var_246) = &input.version_label {
        scope_245.string(var_246);
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("TemplateName");
    if let Some(var_248) = &input.template_name {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("EnvironmentId");
    if let Some(var_250) = &input.environment_id {
        scope_249.string(var_250);
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("EnvironmentName");
    if let Some(var_252) = &input.environment_name {
        scope_251.string(var_252);
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("PlatformArn");
    if let Some(var_254) = &input.platform_arn {
        scope_253.string(var_254);
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("RequestId");
    if let Some(var_256) = &input.request_id {
        scope_255.string(var_256);
    }
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("Severity");
    if let Some(var_258) = &input.severity {
        scope_257.string(var_258.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("StartTime");
    if let Some(var_260) = &input.start_time {
        scope_259.instant(var_260, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("EndTime");
    if let Some(var_262) = &input.end_time {
        scope_261.instant(var_262, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("MaxRecords");
    if let Some(var_264) = &input.max_records {
        scope_263.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_264).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("NextToken");
    if let Some(var_266) = &input.next_token {
        scope_265.string(var_266);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances_health(
    input: &crate::input::DescribeInstancesHealthInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstancesHealth", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("EnvironmentName");
    if let Some(var_268) = &input.environment_name {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("EnvironmentId");
    if let Some(var_270) = &input.environment_id {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("AttributeNames");
    if let Some(var_272) = &input.attribute_names {
        let mut list_274 = scope_271.start_list(false, None);
        for item_273 in var_272 {
            #[allow(unused_mut)]
            let mut entry_275 = list_274.entry();
            entry_275.string(item_273.as_str());
        }
        list_274.finish();
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("NextToken");
    if let Some(var_277) = &input.next_token {
        scope_276.string(var_277);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_platform_version(
    input: &crate::input::DescribePlatformVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribePlatformVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("PlatformArn");
    if let Some(var_279) = &input.platform_arn {
        scope_278.string(var_279);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_environment_operations_role(
    input: &crate::input::DisassociateEnvironmentOperationsRoleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnvironmentOperationsRole",
        "2010-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("EnvironmentName");
    if let Some(var_281) = &input.environment_name {
        scope_280.string(var_281);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_available_solution_stacks(
    input: &crate::input::ListAvailableSolutionStacksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ListAvailableSolutionStacks", "2010-12-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_platform_branches(
    input: &crate::input::ListPlatformBranchesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListPlatformBranches", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("Filters");
    if let Some(var_283) = &input.filters {
        let mut list_285 = scope_282.start_list(false, None);
        for item_284 in var_283 {
            #[allow(unused_mut)]
            let mut entry_286 = list_285.entry();
            crate::query_ser::serialize_structure_crate_model_search_filter(entry_286, item_284);
        }
        list_285.finish();
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("MaxRecords");
    if let Some(var_288) = &input.max_records {
        scope_287.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_288).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("NextToken");
    if let Some(var_290) = &input.next_token {
        scope_289.string(var_290);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_platform_versions(
    input: &crate::input::ListPlatformVersionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListPlatformVersions", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("Filters");
    if let Some(var_292) = &input.filters {
        let mut list_294 = scope_291.start_list(false, None);
        for item_293 in var_292 {
            #[allow(unused_mut)]
            let mut entry_295 = list_294.entry();
            crate::query_ser::serialize_structure_crate_model_platform_filter(entry_295, item_293);
        }
        list_294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("MaxRecords");
    if let Some(var_297) = &input.max_records {
        scope_296.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_297).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("NextToken");
    if let Some(var_299) = &input.next_token {
        scope_298.string(var_299);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("ResourceArn");
    if let Some(var_301) = &input.resource_arn {
        scope_300.string(var_301);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_rebuild_environment(
    input: &crate::input::RebuildEnvironmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RebuildEnvironment", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("EnvironmentId");
    if let Some(var_303) = &input.environment_id {
        scope_302.string(var_303);
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("EnvironmentName");
    if let Some(var_305) = &input.environment_name {
        scope_304.string(var_305);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_environment_info(
    input: &crate::input::RequestEnvironmentInfoInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RequestEnvironmentInfo", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("EnvironmentId");
    if let Some(var_307) = &input.environment_id {
        scope_306.string(var_307);
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("EnvironmentName");
    if let Some(var_309) = &input.environment_name {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("InfoType");
    if let Some(var_311) = &input.info_type {
        scope_310.string(var_311.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restart_app_server(
    input: &crate::input::RestartAppServerInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RestartAppServer", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("EnvironmentId");
    if let Some(var_313) = &input.environment_id {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("EnvironmentName");
    if let Some(var_315) = &input.environment_name {
        scope_314.string(var_315);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_retrieve_environment_info(
    input: &crate::input::RetrieveEnvironmentInfoInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RetrieveEnvironmentInfo", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("EnvironmentId");
    if let Some(var_317) = &input.environment_id {
        scope_316.string(var_317);
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("EnvironmentName");
    if let Some(var_319) = &input.environment_name {
        scope_318.string(var_319);
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("InfoType");
    if let Some(var_321) = &input.info_type {
        scope_320.string(var_321.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_swap_environment_cnam_es(
    input: &crate::input::SwapEnvironmentCnamEsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SwapEnvironmentCNAMEs", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("SourceEnvironmentId");
    if let Some(var_323) = &input.source_environment_id {
        scope_322.string(var_323);
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("SourceEnvironmentName");
    if let Some(var_325) = &input.source_environment_name {
        scope_324.string(var_325);
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("DestinationEnvironmentId");
    if let Some(var_327) = &input.destination_environment_id {
        scope_326.string(var_327);
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("DestinationEnvironmentName");
    if let Some(var_329) = &input.destination_environment_name {
        scope_328.string(var_329);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_environment(
    input: &crate::input::TerminateEnvironmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "TerminateEnvironment", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("EnvironmentId");
    if let Some(var_331) = &input.environment_id {
        scope_330.string(var_331);
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("EnvironmentName");
    if let Some(var_333) = &input.environment_name {
        scope_332.string(var_333);
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("TerminateResources");
    if let Some(var_335) = &input.terminate_resources {
        scope_334.boolean(*var_335);
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("ForceTerminate");
    if let Some(var_337) = &input.force_terminate {
        scope_336.boolean(*var_337);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_application(
    input: &crate::input::UpdateApplicationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UpdateApplication", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("ApplicationName");
    if let Some(var_339) = &input.application_name {
        scope_338.string(var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("Description");
    if let Some(var_341) = &input.description {
        scope_340.string(var_341);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_application_resource_lifecycle(
    input: &crate::input::UpdateApplicationResourceLifecycleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "UpdateApplicationResourceLifecycle",
        "2010-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("ApplicationName");
    if let Some(var_343) = &input.application_name {
        scope_342.string(var_343);
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("ResourceLifecycleConfig");
    if let Some(var_345) = &input.resource_lifecycle_config {
        crate::query_ser::serialize_structure_crate_model_application_resource_lifecycle_config(
            scope_344, var_345,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_application_version(
    input: &crate::input::UpdateApplicationVersionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UpdateApplicationVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("ApplicationName");
    if let Some(var_347) = &input.application_name {
        scope_346.string(var_347);
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("VersionLabel");
    if let Some(var_349) = &input.version_label {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("Description");
    if let Some(var_351) = &input.description {
        scope_350.string(var_351);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_configuration_template(
    input: &crate::input::UpdateConfigurationTemplateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UpdateConfigurationTemplate", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("ApplicationName");
    if let Some(var_353) = &input.application_name {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("TemplateName");
    if let Some(var_355) = &input.template_name {
        scope_354.string(var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("Description");
    if let Some(var_357) = &input.description {
        scope_356.string(var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("OptionSettings");
    if let Some(var_359) = &input.option_settings {
        let mut list_361 = scope_358.start_list(false, None);
        for item_360 in var_359 {
            #[allow(unused_mut)]
            let mut entry_362 = list_361.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_362, item_360,
            );
        }
        list_361.finish();
    }
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("OptionsToRemove");
    if let Some(var_364) = &input.options_to_remove {
        let mut list_366 = scope_363.start_list(false, None);
        for item_365 in var_364 {
            #[allow(unused_mut)]
            let mut entry_367 = list_366.entry();
            crate::query_ser::serialize_structure_crate_model_option_specification(
                entry_367, item_365,
            );
        }
        list_366.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_environment(
    input: &crate::input::UpdateEnvironmentInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UpdateEnvironment", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("ApplicationName");
    if let Some(var_369) = &input.application_name {
        scope_368.string(var_369);
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("EnvironmentId");
    if let Some(var_371) = &input.environment_id {
        scope_370.string(var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("EnvironmentName");
    if let Some(var_373) = &input.environment_name {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("GroupName");
    if let Some(var_375) = &input.group_name {
        scope_374.string(var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("Description");
    if let Some(var_377) = &input.description {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("Tier");
    if let Some(var_379) = &input.tier {
        crate::query_ser::serialize_structure_crate_model_environment_tier(scope_378, var_379);
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("VersionLabel");
    if let Some(var_381) = &input.version_label {
        scope_380.string(var_381);
    }
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("TemplateName");
    if let Some(var_383) = &input.template_name {
        scope_382.string(var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("SolutionStackName");
    if let Some(var_385) = &input.solution_stack_name {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("PlatformArn");
    if let Some(var_387) = &input.platform_arn {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("OptionSettings");
    if let Some(var_389) = &input.option_settings {
        let mut list_391 = scope_388.start_list(false, None);
        for item_390 in var_389 {
            #[allow(unused_mut)]
            let mut entry_392 = list_391.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_392, item_390,
            );
        }
        list_391.finish();
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("OptionsToRemove");
    if let Some(var_394) = &input.options_to_remove {
        let mut list_396 = scope_393.start_list(false, None);
        for item_395 in var_394 {
            #[allow(unused_mut)]
            let mut entry_397 = list_396.entry();
            crate::query_ser::serialize_structure_crate_model_option_specification(
                entry_397, item_395,
            );
        }
        list_396.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_tags_for_resource(
    input: &crate::input::UpdateTagsForResourceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UpdateTagsForResource", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ResourceArn");
    if let Some(var_399) = &input.resource_arn {
        scope_398.string(var_399);
    }
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("TagsToAdd");
    if let Some(var_401) = &input.tags_to_add {
        let mut list_403 = scope_400.start_list(false, None);
        for item_402 in var_401 {
            #[allow(unused_mut)]
            let mut entry_404 = list_403.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_404, item_402);
        }
        list_403.finish();
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("TagsToRemove");
    if let Some(var_406) = &input.tags_to_remove {
        let mut list_408 = scope_405.start_list(false, None);
        for item_407 in var_406 {
            #[allow(unused_mut)]
            let mut entry_409 = list_408.entry();
            entry_409.string(item_407);
        }
        list_408.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_validate_configuration_settings(
    input: &crate::input::ValidateConfigurationSettingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ValidateConfigurationSettings", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("ApplicationName");
    if let Some(var_411) = &input.application_name {
        scope_410.string(var_411);
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("TemplateName");
    if let Some(var_413) = &input.template_name {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("EnvironmentName");
    if let Some(var_415) = &input.environment_name {
        scope_414.string(var_415);
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("OptionSettings");
    if let Some(var_417) = &input.option_settings {
        let mut list_419 = scope_416.start_list(false, None);
        for item_418 in var_417 {
            #[allow(unused_mut)]
            let mut entry_420 = list_419.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_420, item_418,
            );
        }
        list_419.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_abort_environment_update_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AbortEnvironmentUpdateOutput,
    crate::error::AbortEnvironmentUpdateError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::AbortEnvironmentUpdateError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::AbortEnvironmentUpdateError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::AbortEnvironmentUpdateError {
            meta: generic,
            kind: crate::error::AbortEnvironmentUpdateErrorKind::InsufficientPrivilegesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::AbortEnvironmentUpdateError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::AbortEnvironmentUpdateError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_abort_environment_update_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AbortEnvironmentUpdateOutput,
    crate::error::AbortEnvironmentUpdateError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::abort_environment_update_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_apply_environment_managed_action_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ApplyEnvironmentManagedActionOutput,
    crate::error::ApplyEnvironmentManagedActionError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::ApplyEnvironmentManagedActionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ApplyEnvironmentManagedActionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ElasticBeanstalkServiceException" => crate::error::ApplyEnvironmentManagedActionError { meta: generic, kind: crate::error::ApplyEnvironmentManagedActionErrorKind::ElasticBeanstalkServiceException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::elastic_beanstalk_service_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_elastic_beanstalk_service_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::ApplyEnvironmentManagedActionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "ManagedActionInvalidStateException" => crate::error::ApplyEnvironmentManagedActionError { meta: generic, kind: crate::error::ApplyEnvironmentManagedActionErrorKind::ManagedActionInvalidStateException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::managed_action_invalid_state_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_managed_action_invalid_state_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::ApplyEnvironmentManagedActionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::ApplyEnvironmentManagedActionError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_apply_environment_managed_action_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ApplyEnvironmentManagedActionOutput,
    crate::error::ApplyEnvironmentManagedActionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::apply_environment_managed_action_output::Builder::default();
        let _ = response;
        output =
            crate::xml_deser::deser_operation_crate_operation_apply_environment_managed_action(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::ApplyEnvironmentManagedActionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_associate_environment_operations_role_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AssociateEnvironmentOperationsRoleOutput,
    crate::error::AssociateEnvironmentOperationsRoleError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::AssociateEnvironmentOperationsRoleError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::AssociateEnvironmentOperationsRoleError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::AssociateEnvironmentOperationsRoleError { meta: generic, kind: crate::error::AssociateEnvironmentOperationsRoleErrorKind::InsufficientPrivilegesException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::AssociateEnvironmentOperationsRoleError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::AssociateEnvironmentOperationsRoleError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_associate_environment_operations_role_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AssociateEnvironmentOperationsRoleOutput,
    crate::error::AssociateEnvironmentOperationsRoleError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::associate_environment_operations_role_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_dns_availability_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CheckDnsAvailabilityOutput,
    crate::error::CheckDNSAvailabilityError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::CheckDNSAvailabilityError::unhandled)?;
    Err(crate::error::CheckDNSAvailabilityError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_dns_availability_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CheckDnsAvailabilityOutput,
    crate::error::CheckDNSAvailabilityError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::check_dns_availability_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_check_dns_availability(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CheckDNSAvailabilityError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_compose_environments_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ComposeEnvironmentsOutput,
    crate::error::ComposeEnvironmentsError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::ComposeEnvironmentsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ComposeEnvironmentsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::ComposeEnvironmentsError {
            meta: generic,
            kind: crate::error::ComposeEnvironmentsErrorKind::InsufficientPrivilegesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::ComposeEnvironmentsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TooManyEnvironmentsException" => crate::error::ComposeEnvironmentsError {
            meta: generic,
            kind: crate::error::ComposeEnvironmentsErrorKind::TooManyEnvironmentsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::too_many_environments_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_environments_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::ComposeEnvironmentsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ComposeEnvironmentsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_compose_environments_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ComposeEnvironmentsOutput,
    crate::error::ComposeEnvironmentsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::compose_environments_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_compose_environments(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ComposeEnvironmentsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_application_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateApplicationOutput, crate::error::CreateApplicationError>
{
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::CreateApplicationError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateApplicationError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "TooManyApplicationsException" => crate::error::CreateApplicationError {
            meta: generic,
            kind: crate::error::CreateApplicationErrorKind::TooManyApplicationsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::too_many_applications_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_applications_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateApplicationError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CreateApplicationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_application_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateApplicationOutput, crate::error::CreateApplicationError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_application_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_create_application(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateApplicationError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_application_version_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateApplicationVersionOutput,
    crate::error::CreateApplicationVersionError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::CreateApplicationVersionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CreateApplicationVersionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CodeBuildNotInServiceRegionException" => crate::error::CreateApplicationVersionError { meta: generic, kind: crate::error::CreateApplicationVersionErrorKind::CodeBuildNotInServiceRegionException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::code_build_not_in_service_region_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_code_build_not_in_service_region_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateApplicationVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "InsufficientPrivilegesException" => crate::error::CreateApplicationVersionError { meta: generic, kind: crate::error::CreateApplicationVersionErrorKind::InsufficientPrivilegesException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateApplicationVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "S3LocationNotInServiceRegionException" => crate::error::CreateApplicationVersionError { meta: generic, kind: crate::error::CreateApplicationVersionErrorKind::S3LocationNotInServiceRegionException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::s3_location_not_in_service_region_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_s3_location_not_in_service_region_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateApplicationVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "TooManyApplicationsException" => crate::error::CreateApplicationVersionError { meta: generic, kind: crate::error::CreateApplicationVersionErrorKind::TooManyApplicationsException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::too_many_applications_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_applications_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateApplicationVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "TooManyApplicationVersionsException" => crate::error::CreateApplicationVersionError { meta: generic, kind: crate::error::CreateApplicationVersionErrorKind::TooManyApplicationVersionsException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::too_many_application_versions_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_application_versions_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateApplicationVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::CreateApplicationVersionError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_application_version_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateApplicationVersionOutput,
    crate::error::CreateApplicationVersionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_application_version_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_create_application_version(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateApplicationVersionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_configuration_template_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateConfigurationTemplateOutput,
    crate::error::CreateConfigurationTemplateError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::CreateConfigurationTemplateError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CreateConfigurationTemplateError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::CreateConfigurationTemplateError { meta: generic, kind: crate::error::CreateConfigurationTemplateErrorKind::InsufficientPrivilegesException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateConfigurationTemplateError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "TooManyBucketsException" => crate::error::CreateConfigurationTemplateError { meta: generic, kind: crate::error::CreateConfigurationTemplateErrorKind::TooManyBucketsException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::too_many_buckets_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_buckets_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateConfigurationTemplateError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "TooManyConfigurationTemplatesException" => crate::error::CreateConfigurationTemplateError { meta: generic, kind: crate::error::CreateConfigurationTemplateErrorKind::TooManyConfigurationTemplatesException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::too_many_configuration_templates_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_configuration_templates_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateConfigurationTemplateError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::CreateConfigurationTemplateError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_configuration_template_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateConfigurationTemplateOutput,
    crate::error::CreateConfigurationTemplateError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_configuration_template_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_create_configuration_template(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateConfigurationTemplateError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_environment_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateEnvironmentOutput, crate::error::CreateEnvironmentError>
{
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::CreateEnvironmentError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateEnvironmentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::CreateEnvironmentError {
            meta: generic,
            kind: crate::error::CreateEnvironmentErrorKind::InsufficientPrivilegesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateEnvironmentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TooManyEnvironmentsException" => crate::error::CreateEnvironmentError {
            meta: generic,
            kind: crate::error::CreateEnvironmentErrorKind::TooManyEnvironmentsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::too_many_environments_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_environments_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateEnvironmentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CreateEnvironmentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_environment_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateEnvironmentOutput, crate::error::CreateEnvironmentError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_environment_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_create_environment(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateEnvironmentError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_platform_version_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreatePlatformVersionOutput,
    crate::error::CreatePlatformVersionError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::CreatePlatformVersionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreatePlatformVersionError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ElasticBeanstalkServiceException" => crate::error::CreatePlatformVersionError {
            meta: generic,
            kind: crate::error::CreatePlatformVersionErrorKind::ElasticBeanstalkServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::elastic_beanstalk_service_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_elastic_beanstalk_service_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreatePlatformVersionError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InsufficientPrivilegesException" => crate::error::CreatePlatformVersionError {
            meta: generic,
            kind: crate::error::CreatePlatformVersionErrorKind::InsufficientPrivilegesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreatePlatformVersionError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TooManyPlatformsException" => crate::error::CreatePlatformVersionError {
            meta: generic,
            kind: crate::error::CreatePlatformVersionErrorKind::TooManyPlatformsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::too_many_platforms_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_platforms_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreatePlatformVersionError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CreatePlatformVersionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_platform_version_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreatePlatformVersionOutput,
    crate::error::CreatePlatformVersionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_platform_version_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_create_platform_version(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreatePlatformVersionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_storage_location_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateStorageLocationOutput,
    crate::error::CreateStorageLocationError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::CreateStorageLocationError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateStorageLocationError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::CreateStorageLocationError {
            meta: generic,
            kind: crate::error::CreateStorageLocationErrorKind::InsufficientPrivilegesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateStorageLocationError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "S3SubscriptionRequiredException" => crate::error::CreateStorageLocationError {
            meta: generic,
            kind: crate::error::CreateStorageLocationErrorKind::S3SubscriptionRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::s3_subscription_required_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_s3_subscription_required_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateStorageLocationError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TooManyBucketsException" => crate::error::CreateStorageLocationError {
            meta: generic,
            kind: crate::error::CreateStorageLocationErrorKind::TooManyBucketsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::too_many_buckets_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_buckets_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateStorageLocationError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CreateStorageLocationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_storage_location_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateStorageLocationOutput,
    crate::error::CreateStorageLocationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_storage_location_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_create_storage_location(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateStorageLocationError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_application_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteApplicationOutput, crate::error::DeleteApplicationError>
{
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DeleteApplicationError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteApplicationError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationInProgressFailure" => crate::error::DeleteApplicationError {
            meta: generic,
            kind: crate::error::DeleteApplicationErrorKind::OperationInProgressException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_in_progress_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_operation_in_progress_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DeleteApplicationError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DeleteApplicationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_application_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteApplicationOutput, crate::error::DeleteApplicationError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_application_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_application_version_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteApplicationVersionOutput,
    crate::error::DeleteApplicationVersionError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DeleteApplicationVersionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DeleteApplicationVersionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::DeleteApplicationVersionError { meta: generic, kind: crate::error::DeleteApplicationVersionErrorKind::InsufficientPrivilegesException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DeleteApplicationVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "OperationInProgressFailure" => crate::error::DeleteApplicationVersionError { meta: generic, kind: crate::error::DeleteApplicationVersionErrorKind::OperationInProgressException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::operation_in_progress_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_operation_in_progress_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DeleteApplicationVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "S3LocationNotInServiceRegionException" => crate::error::DeleteApplicationVersionError { meta: generic, kind: crate::error::DeleteApplicationVersionErrorKind::S3LocationNotInServiceRegionException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::s3_location_not_in_service_region_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_s3_location_not_in_service_region_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DeleteApplicationVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "SourceBundleDeletionFailure" => crate::error::DeleteApplicationVersionError { meta: generic, kind: crate::error::DeleteApplicationVersionErrorKind::SourceBundleDeletionException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::source_bundle_deletion_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_source_bundle_deletion_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DeleteApplicationVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::DeleteApplicationVersionError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_application_version_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteApplicationVersionOutput,
    crate::error::DeleteApplicationVersionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_application_version_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_configuration_template_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteConfigurationTemplateOutput,
    crate::error::DeleteConfigurationTemplateError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DeleteConfigurationTemplateError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DeleteConfigurationTemplateError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationInProgressFailure" => crate::error::DeleteConfigurationTemplateError {
            meta: generic,
            kind: crate::error::DeleteConfigurationTemplateErrorKind::OperationInProgressException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_in_progress_exception::Builder::default();
                        let _ = response;
                        output = crate::xml_deser::deser_structure_crate_error_operation_in_progress_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DeleteConfigurationTemplateError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        _ => crate::error::DeleteConfigurationTemplateError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_configuration_template_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteConfigurationTemplateOutput,
    crate::error::DeleteConfigurationTemplateError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_configuration_template_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_environment_configuration_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteEnvironmentConfigurationOutput,
    crate::error::DeleteEnvironmentConfigurationError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DeleteEnvironmentConfigurationError::unhandled)?;
    Err(crate::error::DeleteEnvironmentConfigurationError::generic(
        generic,
    ))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_environment_configuration_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteEnvironmentConfigurationOutput,
    crate::error::DeleteEnvironmentConfigurationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_environment_configuration_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_platform_version_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeletePlatformVersionOutput,
    crate::error::DeletePlatformVersionError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DeletePlatformVersionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeletePlatformVersionError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ElasticBeanstalkServiceException" => crate::error::DeletePlatformVersionError { meta: generic, kind: crate::error::DeletePlatformVersionErrorKind::ElasticBeanstalkServiceException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::elastic_beanstalk_service_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_elastic_beanstalk_service_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DeletePlatformVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "InsufficientPrivilegesException" => crate::error::DeletePlatformVersionError { meta: generic, kind: crate::error::DeletePlatformVersionErrorKind::InsufficientPrivilegesException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DeletePlatformVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "OperationInProgressFailure" => crate::error::DeletePlatformVersionError { meta: generic, kind: crate::error::DeletePlatformVersionErrorKind::OperationInProgressException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::operation_in_progress_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_operation_in_progress_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DeletePlatformVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "PlatformVersionStillReferencedException" => crate::error::DeletePlatformVersionError { meta: generic, kind: crate::error::DeletePlatformVersionErrorKind::PlatformVersionStillReferencedException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::platform_version_still_referenced_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_platform_version_still_referenced_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DeletePlatformVersionError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::DeletePlatformVersionError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_platform_version_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeletePlatformVersionOutput,
    crate::error::DeletePlatformVersionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_platform_version_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_delete_platform_version(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DeletePlatformVersionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_account_attributes_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeAccountAttributesOutput,
    crate::error::DescribeAccountAttributesError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeAccountAttributesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeAccountAttributesError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::DescribeAccountAttributesError {
            meta: generic,
            kind: crate::error::DescribeAccountAttributesErrorKind::InsufficientPrivilegesException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::insufficient_privileges_exception::Builder::default();
                        let _ = response;
                        output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribeAccountAttributesError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        _ => crate::error::DescribeAccountAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_account_attributes_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeAccountAttributesOutput,
    crate::error::DescribeAccountAttributesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_account_attributes_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_account_attributes(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeAccountAttributesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_applications_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeApplicationsOutput,
    crate::error::DescribeApplicationsError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeApplicationsError::unhandled)?;
    Err(crate::error::DescribeApplicationsError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_applications_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeApplicationsOutput,
    crate::error::DescribeApplicationsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_applications_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_applications(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeApplicationsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_application_versions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeApplicationVersionsOutput,
    crate::error::DescribeApplicationVersionsError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeApplicationVersionsError::unhandled)?;
    Err(crate::error::DescribeApplicationVersionsError::generic(
        generic,
    ))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_application_versions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeApplicationVersionsOutput,
    crate::error::DescribeApplicationVersionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_application_versions_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_application_versions(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeApplicationVersionsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_configuration_options_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeConfigurationOptionsOutput,
    crate::error::DescribeConfigurationOptionsError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeConfigurationOptionsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeConfigurationOptionsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "TooManyBucketsException" => crate::error::DescribeConfigurationOptionsError {
            meta: generic,
            kind: crate::error::DescribeConfigurationOptionsErrorKind::TooManyBucketsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::too_many_buckets_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_buckets_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribeConfigurationOptionsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeConfigurationOptionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_configuration_options_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeConfigurationOptionsOutput,
    crate::error::DescribeConfigurationOptionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_configuration_options_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_configuration_options(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeConfigurationOptionsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_configuration_settings_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeConfigurationSettingsOutput,
    crate::error::DescribeConfigurationSettingsError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeConfigurationSettingsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeConfigurationSettingsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "TooManyBucketsException" => crate::error::DescribeConfigurationSettingsError {
            meta: generic,
            kind: crate::error::DescribeConfigurationSettingsErrorKind::TooManyBucketsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::too_many_buckets_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_buckets_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribeConfigurationSettingsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeConfigurationSettingsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_configuration_settings_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeConfigurationSettingsOutput,
    crate::error::DescribeConfigurationSettingsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_configuration_settings_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_configuration_settings(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeConfigurationSettingsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_environment_health_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeEnvironmentHealthOutput,
    crate::error::DescribeEnvironmentHealthError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeEnvironmentHealthError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeEnvironmentHealthError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ElasticBeanstalkServiceException" => crate::error::DescribeEnvironmentHealthError {
            meta: generic,
            kind:
                crate::error::DescribeEnvironmentHealthErrorKind::ElasticBeanstalkServiceException(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::elastic_beanstalk_service_exception::Builder::default(
                                );
                            let _ = response;
                            output = crate::xml_deser::deser_structure_crate_error_elastic_beanstalk_service_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribeEnvironmentHealthError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
        },
        "InvalidRequestException" => crate::error::DescribeEnvironmentHealthError {
            meta: generic,
            kind: crate::error::DescribeEnvironmentHealthErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_invalid_request_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribeEnvironmentHealthError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeEnvironmentHealthError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_environment_health_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeEnvironmentHealthOutput,
    crate::error::DescribeEnvironmentHealthError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_environment_health_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_environment_health(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeEnvironmentHealthError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_environment_managed_action_history_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeEnvironmentManagedActionHistoryOutput,
    crate::error::DescribeEnvironmentManagedActionHistoryError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeEnvironmentManagedActionHistoryError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::error::DescribeEnvironmentManagedActionHistoryError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ElasticBeanstalkServiceException" => crate::error::DescribeEnvironmentManagedActionHistoryError { meta: generic, kind: crate::error::DescribeEnvironmentManagedActionHistoryErrorKind::ElasticBeanstalkServiceException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::elastic_beanstalk_service_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_elastic_beanstalk_service_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribeEnvironmentManagedActionHistoryError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::DescribeEnvironmentManagedActionHistoryError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_environment_managed_action_history_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeEnvironmentManagedActionHistoryOutput,
    crate::error::DescribeEnvironmentManagedActionHistoryError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::describe_environment_managed_action_history_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_environment_managed_action_history(response.body().as_ref(), output).map_err(crate::error::DescribeEnvironmentManagedActionHistoryError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_environment_managed_actions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeEnvironmentManagedActionsOutput,
    crate::error::DescribeEnvironmentManagedActionsError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeEnvironmentManagedActionsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeEnvironmentManagedActionsError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ElasticBeanstalkServiceException" => crate::error::DescribeEnvironmentManagedActionsError { meta: generic, kind: crate::error::DescribeEnvironmentManagedActionsErrorKind::ElasticBeanstalkServiceException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::elastic_beanstalk_service_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_elastic_beanstalk_service_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribeEnvironmentManagedActionsError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::DescribeEnvironmentManagedActionsError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_environment_managed_actions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeEnvironmentManagedActionsOutput,
    crate::error::DescribeEnvironmentManagedActionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::describe_environment_managed_actions_output::Builder::default();
        let _ = response;
        output =
            crate::xml_deser::deser_operation_crate_operation_describe_environment_managed_actions(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::DescribeEnvironmentManagedActionsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_environment_resources_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeEnvironmentResourcesOutput,
    crate::error::DescribeEnvironmentResourcesError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeEnvironmentResourcesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeEnvironmentResourcesError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::DescribeEnvironmentResourcesError {
            meta: generic,
            kind:
                crate::error::DescribeEnvironmentResourcesErrorKind::InsufficientPrivilegesException(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::insufficient_privileges_exception::Builder::default();
                            let _ = response;
                            output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribeEnvironmentResourcesError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
        },
        _ => crate::error::DescribeEnvironmentResourcesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_environment_resources_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeEnvironmentResourcesOutput,
    crate::error::DescribeEnvironmentResourcesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_environment_resources_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_environment_resources(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeEnvironmentResourcesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_environments_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeEnvironmentsOutput,
    crate::error::DescribeEnvironmentsError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeEnvironmentsError::unhandled)?;
    Err(crate::error::DescribeEnvironmentsError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_environments_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeEnvironmentsOutput,
    crate::error::DescribeEnvironmentsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_environments_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_environments(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeEnvironmentsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_events_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeEventsOutput, crate::error::DescribeEventsError> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeEventsError::unhandled)?;
    Err(crate::error::DescribeEventsError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_events_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeEventsOutput, crate::error::DescribeEventsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_events_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_events(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeEventsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_instances_health_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeInstancesHealthOutput,
    crate::error::DescribeInstancesHealthError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeInstancesHealthError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeInstancesHealthError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ElasticBeanstalkServiceException" => crate::error::DescribeInstancesHealthError {
            meta: generic,
            kind: crate::error::DescribeInstancesHealthErrorKind::ElasticBeanstalkServiceException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::elastic_beanstalk_service_exception::Builder::default();
                        let _ = response;
                        output = crate::xml_deser::deser_structure_crate_error_elastic_beanstalk_service_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribeInstancesHealthError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        "InvalidRequestException" => crate::error::DescribeInstancesHealthError {
            meta: generic,
            kind: crate::error::DescribeInstancesHealthErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_invalid_request_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribeInstancesHealthError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeInstancesHealthError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_instances_health_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeInstancesHealthOutput,
    crate::error::DescribeInstancesHealthError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_instances_health_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_instances_health(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeInstancesHealthError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_platform_version_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribePlatformVersionOutput,
    crate::error::DescribePlatformVersionError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribePlatformVersionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribePlatformVersionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ElasticBeanstalkServiceException" => crate::error::DescribePlatformVersionError {
            meta: generic,
            kind: crate::error::DescribePlatformVersionErrorKind::ElasticBeanstalkServiceException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::elastic_beanstalk_service_exception::Builder::default();
                        let _ = response;
                        output = crate::xml_deser::deser_structure_crate_error_elastic_beanstalk_service_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribePlatformVersionError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        "InsufficientPrivilegesException" => crate::error::DescribePlatformVersionError {
            meta: generic,
            kind: crate::error::DescribePlatformVersionErrorKind::InsufficientPrivilegesException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::insufficient_privileges_exception::Builder::default();
                        let _ = response;
                        output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribePlatformVersionError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        _ => crate::error::DescribePlatformVersionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_platform_version_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribePlatformVersionOutput,
    crate::error::DescribePlatformVersionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_platform_version_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_describe_platform_version(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribePlatformVersionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disassociate_environment_operations_role_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisassociateEnvironmentOperationsRoleOutput,
    crate::error::DisassociateEnvironmentOperationsRoleError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::DisassociateEnvironmentOperationsRoleError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::error::DisassociateEnvironmentOperationsRoleError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::DisassociateEnvironmentOperationsRoleError { meta: generic, kind: crate::error::DisassociateEnvironmentOperationsRoleErrorKind::InsufficientPrivilegesException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DisassociateEnvironmentOperationsRoleError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::DisassociateEnvironmentOperationsRoleError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_disassociate_environment_operations_role_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DisassociateEnvironmentOperationsRoleOutput,
    crate::error::DisassociateEnvironmentOperationsRoleError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::disassociate_environment_operations_role_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_available_solution_stacks_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListAvailableSolutionStacksOutput,
    crate::error::ListAvailableSolutionStacksError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListAvailableSolutionStacksError::unhandled)?;
    Err(crate::error::ListAvailableSolutionStacksError::generic(
        generic,
    ))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_available_solution_stacks_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListAvailableSolutionStacksOutput,
    crate::error::ListAvailableSolutionStacksError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_available_solution_stacks_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_list_available_solution_stacks(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListAvailableSolutionStacksError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_platform_branches_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListPlatformBranchesOutput,
    crate::error::ListPlatformBranchesError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListPlatformBranchesError::unhandled)?;
    Err(crate::error::ListPlatformBranchesError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_platform_branches_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListPlatformBranchesOutput,
    crate::error::ListPlatformBranchesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_platform_branches_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_list_platform_branches(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListPlatformBranchesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_platform_versions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListPlatformVersionsOutput,
    crate::error::ListPlatformVersionsError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListPlatformVersionsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListPlatformVersionsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ElasticBeanstalkServiceException" => crate::error::ListPlatformVersionsError {
            meta: generic,
            kind: crate::error::ListPlatformVersionsErrorKind::ElasticBeanstalkServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::elastic_beanstalk_service_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_elastic_beanstalk_service_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::ListPlatformVersionsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InsufficientPrivilegesException" => crate::error::ListPlatformVersionsError {
            meta: generic,
            kind: crate::error::ListPlatformVersionsErrorKind::InsufficientPrivilegesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::ListPlatformVersionsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListPlatformVersionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_platform_versions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListPlatformVersionsOutput,
    crate::error::ListPlatformVersionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_platform_versions_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_list_platform_versions(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListPlatformVersionsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::InsufficientPrivilegesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_resource_not_found_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceTypeNotSupportedException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::ResourceTypeNotSupportedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::resource_type_not_supported_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_resource_type_not_supported_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListTagsForResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_resource_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_list_tags_for_resource(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_rebuild_environment_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RebuildEnvironmentOutput,
    crate::error::RebuildEnvironmentError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::RebuildEnvironmentError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RebuildEnvironmentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::RebuildEnvironmentError {
            meta: generic,
            kind: crate::error::RebuildEnvironmentErrorKind::InsufficientPrivilegesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::RebuildEnvironmentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RebuildEnvironmentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_rebuild_environment_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RebuildEnvironmentOutput,
    crate::error::RebuildEnvironmentError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::rebuild_environment_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_request_environment_info_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RequestEnvironmentInfoOutput,
    crate::error::RequestEnvironmentInfoError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::RequestEnvironmentInfoError::unhandled)?;
    Err(crate::error::RequestEnvironmentInfoError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_request_environment_info_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RequestEnvironmentInfoOutput,
    crate::error::RequestEnvironmentInfoError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::request_environment_info_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_restart_app_server_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RestartAppServerOutput, crate::error::RestartAppServerError>
{
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::RestartAppServerError::unhandled)?;
    Err(crate::error::RestartAppServerError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_restart_app_server_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RestartAppServerOutput, crate::error::RestartAppServerError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::restart_app_server_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_retrieve_environment_info_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RetrieveEnvironmentInfoOutput,
    crate::error::RetrieveEnvironmentInfoError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::RetrieveEnvironmentInfoError::unhandled)?;
    Err(crate::error::RetrieveEnvironmentInfoError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_retrieve_environment_info_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RetrieveEnvironmentInfoOutput,
    crate::error::RetrieveEnvironmentInfoError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::retrieve_environment_info_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_retrieve_environment_info(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RetrieveEnvironmentInfoError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_swap_environment_cnam_es_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SwapEnvironmentCnamEsOutput,
    crate::error::SwapEnvironmentCNAMEsError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::SwapEnvironmentCNAMEsError::unhandled)?;
    Err(crate::error::SwapEnvironmentCNAMEsError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_swap_environment_cnam_es_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SwapEnvironmentCnamEsOutput,
    crate::error::SwapEnvironmentCNAMEsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::swap_environment_cnam_es_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_terminate_environment_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TerminateEnvironmentOutput,
    crate::error::TerminateEnvironmentError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::TerminateEnvironmentError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::TerminateEnvironmentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::TerminateEnvironmentError {
            meta: generic,
            kind: crate::error::TerminateEnvironmentErrorKind::InsufficientPrivilegesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::TerminateEnvironmentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::TerminateEnvironmentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_terminate_environment_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TerminateEnvironmentOutput,
    crate::error::TerminateEnvironmentError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::terminate_environment_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_terminate_environment(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::TerminateEnvironmentError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_application_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateApplicationOutput, crate::error::UpdateApplicationError>
{
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::UpdateApplicationError::unhandled)?;
    Err(crate::error::UpdateApplicationError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_application_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateApplicationOutput, crate::error::UpdateApplicationError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_application_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_update_application(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateApplicationError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_application_resource_lifecycle_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateApplicationResourceLifecycleOutput,
    crate::error::UpdateApplicationResourceLifecycleError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::UpdateApplicationResourceLifecycleError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateApplicationResourceLifecycleError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::UpdateApplicationResourceLifecycleError { meta: generic, kind: crate::error::UpdateApplicationResourceLifecycleErrorKind::InsufficientPrivilegesException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::UpdateApplicationResourceLifecycleError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::UpdateApplicationResourceLifecycleError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_application_resource_lifecycle_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateApplicationResourceLifecycleOutput,
    crate::error::UpdateApplicationResourceLifecycleError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::update_application_resource_lifecycle_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_update_application_resource_lifecycle(response.body().as_ref(), output).map_err(crate::error::UpdateApplicationResourceLifecycleError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_application_version_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateApplicationVersionOutput,
    crate::error::UpdateApplicationVersionError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::UpdateApplicationVersionError::unhandled)?;
    Err(crate::error::UpdateApplicationVersionError::generic(
        generic,
    ))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_application_version_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateApplicationVersionOutput,
    crate::error::UpdateApplicationVersionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_application_version_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_update_application_version(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateApplicationVersionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_configuration_template_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateConfigurationTemplateOutput,
    crate::error::UpdateConfigurationTemplateError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::UpdateConfigurationTemplateError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateConfigurationTemplateError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::UpdateConfigurationTemplateError {
            meta: generic,
            kind:
                crate::error::UpdateConfigurationTemplateErrorKind::InsufficientPrivilegesException(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::insufficient_privileges_exception::Builder::default();
                            let _ = response;
                            output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::UpdateConfigurationTemplateError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
        },
        "TooManyBucketsException" => crate::error::UpdateConfigurationTemplateError {
            meta: generic,
            kind: crate::error::UpdateConfigurationTemplateErrorKind::TooManyBucketsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::too_many_buckets_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_buckets_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::UpdateConfigurationTemplateError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UpdateConfigurationTemplateError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_configuration_template_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateConfigurationTemplateOutput,
    crate::error::UpdateConfigurationTemplateError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_configuration_template_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_update_configuration_template(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateConfigurationTemplateError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_environment_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateEnvironmentOutput, crate::error::UpdateEnvironmentError>
{
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::UpdateEnvironmentError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateEnvironmentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::UpdateEnvironmentError {
            meta: generic,
            kind: crate::error::UpdateEnvironmentErrorKind::InsufficientPrivilegesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::UpdateEnvironmentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "TooManyBucketsException" => crate::error::UpdateEnvironmentError {
            meta: generic,
            kind: crate::error::UpdateEnvironmentErrorKind::TooManyBucketsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::too_many_buckets_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_buckets_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::UpdateEnvironmentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UpdateEnvironmentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_environment_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateEnvironmentOutput, crate::error::UpdateEnvironmentError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_environment_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_update_environment(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateEnvironmentError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateTagsForResourceOutput,
    crate::error::UpdateTagsForResourceError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::UpdateTagsForResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateTagsForResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::UpdateTagsForResourceError {
            meta: generic,
            kind: crate::error::UpdateTagsForResourceErrorKind::InsufficientPrivilegesException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::UpdateTagsForResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationInProgressFailure" => crate::error::UpdateTagsForResourceError {
            meta: generic,
            kind: crate::error::UpdateTagsForResourceErrorKind::OperationInProgressException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_in_progress_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_operation_in_progress_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::UpdateTagsForResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => crate::error::UpdateTagsForResourceError {
            meta: generic,
            kind: crate::error::UpdateTagsForResourceErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_resource_not_found_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::UpdateTagsForResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceTypeNotSupportedException" => crate::error::UpdateTagsForResourceError {
            meta: generic,
            kind: crate::error::UpdateTagsForResourceErrorKind::ResourceTypeNotSupportedException(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::resource_type_not_supported_exception::Builder::default();
                        let _ = response;
                        output = crate::xml_deser::deser_structure_crate_error_resource_type_not_supported_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::UpdateTagsForResourceError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        "TooManyTagsException" => crate::error::UpdateTagsForResourceError {
            meta: generic,
            kind: crate::error::UpdateTagsForResourceErrorKind::TooManyTagsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::too_many_tags_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_tags_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::UpdateTagsForResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UpdateTagsForResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateTagsForResourceOutput,
    crate::error::UpdateTagsForResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_tags_for_resource_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_validate_configuration_settings_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ValidateConfigurationSettingsOutput,
    crate::error::ValidateConfigurationSettingsError,
> {
    let generic = crate::xml_deser::parse_http_generic_error(response)
        .map_err(crate::error::ValidateConfigurationSettingsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ValidateConfigurationSettingsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::error::ValidateConfigurationSettingsError { meta: generic, kind: crate::error::ValidateConfigurationSettingsErrorKind::InsufficientPrivilegesException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::insufficient_privileges_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::ValidateConfigurationSettingsError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "TooManyBucketsException" => crate::error::ValidateConfigurationSettingsError { meta: generic, kind: crate::error::ValidateConfigurationSettingsErrorKind::TooManyBucketsException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::too_many_buckets_exception::Builder::default();
                    let _ = response;
                    output = crate::xml_deser::deser_structure_crate_error_too_many_buckets_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::ValidateConfigurationSettingsError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::ValidateConfigurationSettingsError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_validate_configuration_settings_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ValidateConfigurationSettingsOutput,
    crate::error::ValidateConfigurationSettingsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::validate_configuration_settings_output::Builder::default();
        let _ = response;
        output = crate::xml_deser::deser_operation_crate_operation_validate_configuration_settings(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ValidateConfigurationSettingsError::unhandled)?;
        output.build()
    })
}
