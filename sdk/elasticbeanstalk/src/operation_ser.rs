// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_abort_environment_update(
    input: &crate::input::AbortEnvironmentUpdateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AbortEnvironmentUpdate", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("EnvironmentId");
    if let Some(var_2) = &input.environment_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("EnvironmentName");
    if let Some(var_4) = &input.environment_name {
        scope_3.string(var_4);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_environment_managed_action(
    input: &crate::input::ApplyEnvironmentManagedActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ApplyEnvironmentManagedAction", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("EnvironmentName");
    if let Some(var_6) = &input.environment_name {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("EnvironmentId");
    if let Some(var_8) = &input.environment_id {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("ActionId");
    if let Some(var_10) = &input.action_id {
        scope_9.string(var_10);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_environment_operations_role(
    input: &crate::input::AssociateEnvironmentOperationsRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnvironmentOperationsRole",
        "2010-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("EnvironmentName");
    if let Some(var_12) = &input.environment_name {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("OperationsRole");
    if let Some(var_14) = &input.operations_role {
        scope_13.string(var_14);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_check_dns_availability(
    input: &crate::input::CheckDnsAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CheckDNSAvailability", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("CNAMEPrefix");
    if let Some(var_16) = &input.cname_prefix {
        scope_15.string(var_16);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_compose_environments(
    input: &crate::input::ComposeEnvironmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ComposeEnvironments", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("ApplicationName");
    if let Some(var_18) = &input.application_name {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("GroupName");
    if let Some(var_20) = &input.group_name {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("VersionLabels");
    if let Some(var_22) = &input.version_labels {
        let mut list_24 = scope_21.start_list(false, None);
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            entry_25.string(item_23);
        }
        list_24.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_application(
    input: &crate::input::CreateApplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateApplication", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("ApplicationName");
    if let Some(var_27) = &input.application_name {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("Description");
    if let Some(var_29) = &input.description {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("ResourceLifecycleConfig");
    if let Some(var_31) = &input.resource_lifecycle_config {
        crate::query_ser::serialize_structure_crate_model_application_resource_lifecycle_config(
            scope_30, var_31,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("Tags");
    if let Some(var_33) = &input.tags {
        let mut list_35 = scope_32.start_list(false, None);
        for item_34 in var_33 {
            #[allow(unused_mut)]
            let mut entry_36 = list_35.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_36, item_34)?;
        }
        list_35.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_application_version(
    input: &crate::input::CreateApplicationVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateApplicationVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("ApplicationName");
    if let Some(var_38) = &input.application_name {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("VersionLabel");
    if let Some(var_40) = &input.version_label {
        scope_39.string(var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("Description");
    if let Some(var_42) = &input.description {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("SourceBuildInformation");
    if let Some(var_44) = &input.source_build_information {
        crate::query_ser::serialize_structure_crate_model_source_build_information(
            scope_43, var_44,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("SourceBundle");
    if let Some(var_46) = &input.source_bundle {
        crate::query_ser::serialize_structure_crate_model_s3_location(scope_45, var_46)?;
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("BuildConfiguration");
    if let Some(var_48) = &input.build_configuration {
        crate::query_ser::serialize_structure_crate_model_build_configuration(scope_47, var_48)?;
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("AutoCreateApplication");
    if let Some(var_50) = &input.auto_create_application {
        scope_49.boolean(*var_50);
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Process");
    if let Some(var_52) = &input.process {
        scope_51.boolean(*var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("Tags");
    if let Some(var_54) = &input.tags {
        let mut list_56 = scope_53.start_list(false, None);
        for item_55 in var_54 {
            #[allow(unused_mut)]
            let mut entry_57 = list_56.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_57, item_55)?;
        }
        list_56.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_configuration_template(
    input: &crate::input::CreateConfigurationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateConfigurationTemplate", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("ApplicationName");
    if let Some(var_59) = &input.application_name {
        scope_58.string(var_59);
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("TemplateName");
    if let Some(var_61) = &input.template_name {
        scope_60.string(var_61);
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("SolutionStackName");
    if let Some(var_63) = &input.solution_stack_name {
        scope_62.string(var_63);
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("PlatformArn");
    if let Some(var_65) = &input.platform_arn {
        scope_64.string(var_65);
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("SourceConfiguration");
    if let Some(var_67) = &input.source_configuration {
        crate::query_ser::serialize_structure_crate_model_source_configuration(scope_66, var_67)?;
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("EnvironmentId");
    if let Some(var_69) = &input.environment_id {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("Description");
    if let Some(var_71) = &input.description {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("OptionSettings");
    if let Some(var_73) = &input.option_settings {
        let mut list_75 = scope_72.start_list(false, None);
        for item_74 in var_73 {
            #[allow(unused_mut)]
            let mut entry_76 = list_75.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_76, item_74,
            )?;
        }
        list_75.finish();
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("Tags");
    if let Some(var_78) = &input.tags {
        let mut list_80 = scope_77.start_list(false, None);
        for item_79 in var_78 {
            #[allow(unused_mut)]
            let mut entry_81 = list_80.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_81, item_79)?;
        }
        list_80.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_environment(
    input: &crate::input::CreateEnvironmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEnvironment", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("ApplicationName");
    if let Some(var_83) = &input.application_name {
        scope_82.string(var_83);
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("EnvironmentName");
    if let Some(var_85) = &input.environment_name {
        scope_84.string(var_85);
    }
    #[allow(unused_mut)]
    let mut scope_86 = writer.prefix("GroupName");
    if let Some(var_87) = &input.group_name {
        scope_86.string(var_87);
    }
    #[allow(unused_mut)]
    let mut scope_88 = writer.prefix("Description");
    if let Some(var_89) = &input.description {
        scope_88.string(var_89);
    }
    #[allow(unused_mut)]
    let mut scope_90 = writer.prefix("CNAMEPrefix");
    if let Some(var_91) = &input.cname_prefix {
        scope_90.string(var_91);
    }
    #[allow(unused_mut)]
    let mut scope_92 = writer.prefix("Tier");
    if let Some(var_93) = &input.tier {
        crate::query_ser::serialize_structure_crate_model_environment_tier(scope_92, var_93)?;
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("Tags");
    if let Some(var_95) = &input.tags {
        let mut list_97 = scope_94.start_list(false, None);
        for item_96 in var_95 {
            #[allow(unused_mut)]
            let mut entry_98 = list_97.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_98, item_96)?;
        }
        list_97.finish();
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("VersionLabel");
    if let Some(var_100) = &input.version_label {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("TemplateName");
    if let Some(var_102) = &input.template_name {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("SolutionStackName");
    if let Some(var_104) = &input.solution_stack_name {
        scope_103.string(var_104);
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("PlatformArn");
    if let Some(var_106) = &input.platform_arn {
        scope_105.string(var_106);
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("OptionSettings");
    if let Some(var_108) = &input.option_settings {
        let mut list_110 = scope_107.start_list(false, None);
        for item_109 in var_108 {
            #[allow(unused_mut)]
            let mut entry_111 = list_110.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_111, item_109,
            )?;
        }
        list_110.finish();
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("OptionsToRemove");
    if let Some(var_113) = &input.options_to_remove {
        let mut list_115 = scope_112.start_list(false, None);
        for item_114 in var_113 {
            #[allow(unused_mut)]
            let mut entry_116 = list_115.entry();
            crate::query_ser::serialize_structure_crate_model_option_specification(
                entry_116, item_114,
            )?;
        }
        list_115.finish();
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("OperationsRole");
    if let Some(var_118) = &input.operations_role {
        scope_117.string(var_118);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_platform_version(
    input: &crate::input::CreatePlatformVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlatformVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("PlatformName");
    if let Some(var_120) = &input.platform_name {
        scope_119.string(var_120);
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("PlatformVersion");
    if let Some(var_122) = &input.platform_version {
        scope_121.string(var_122);
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("PlatformDefinitionBundle");
    if let Some(var_124) = &input.platform_definition_bundle {
        crate::query_ser::serialize_structure_crate_model_s3_location(scope_123, var_124)?;
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("EnvironmentName");
    if let Some(var_126) = &input.environment_name {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("OptionSettings");
    if let Some(var_128) = &input.option_settings {
        let mut list_130 = scope_127.start_list(false, None);
        for item_129 in var_128 {
            #[allow(unused_mut)]
            let mut entry_131 = list_130.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_131, item_129,
            )?;
        }
        list_130.finish();
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("Tags");
    if let Some(var_133) = &input.tags {
        let mut list_135 = scope_132.start_list(false, None);
        for item_134 in var_133 {
            #[allow(unused_mut)]
            let mut entry_136 = list_135.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_136, item_134)?;
        }
        list_135.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_storage_location(
    input: &crate::input::CreateStorageLocationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStorageLocation", "2010-12-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_application(
    input: &crate::input::DeleteApplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteApplication", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("ApplicationName");
    if let Some(var_138) = &input.application_name {
        scope_137.string(var_138);
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("TerminateEnvByForce");
    if let Some(var_140) = &input.terminate_env_by_force {
        scope_139.boolean(*var_140);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_application_version(
    input: &crate::input::DeleteApplicationVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteApplicationVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("ApplicationName");
    if let Some(var_142) = &input.application_name {
        scope_141.string(var_142);
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("VersionLabel");
    if let Some(var_144) = &input.version_label {
        scope_143.string(var_144);
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("DeleteSourceBundle");
    if let Some(var_146) = &input.delete_source_bundle {
        scope_145.boolean(*var_146);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_configuration_template(
    input: &crate::input::DeleteConfigurationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteConfigurationTemplate", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("ApplicationName");
    if let Some(var_148) = &input.application_name {
        scope_147.string(var_148);
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("TemplateName");
    if let Some(var_150) = &input.template_name {
        scope_149.string(var_150);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_environment_configuration(
    input: &crate::input::DeleteEnvironmentConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEnvironmentConfiguration",
        "2010-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("ApplicationName");
    if let Some(var_152) = &input.application_name {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("EnvironmentName");
    if let Some(var_154) = &input.environment_name {
        scope_153.string(var_154);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_platform_version(
    input: &crate::input::DeletePlatformVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlatformVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("PlatformArn");
    if let Some(var_156) = &input.platform_arn {
        scope_155.string(var_156);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2010-12-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_applications(
    input: &crate::input::DescribeApplicationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeApplications", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("ApplicationNames");
    if let Some(var_158) = &input.application_names {
        let mut list_160 = scope_157.start_list(false, None);
        for item_159 in var_158 {
            #[allow(unused_mut)]
            let mut entry_161 = list_160.entry();
            entry_161.string(item_159);
        }
        list_160.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_application_versions(
    input: &crate::input::DescribeApplicationVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeApplicationVersions", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("ApplicationName");
    if let Some(var_163) = &input.application_name {
        scope_162.string(var_163);
    }
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("VersionLabels");
    if let Some(var_165) = &input.version_labels {
        let mut list_167 = scope_164.start_list(false, None);
        for item_166 in var_165 {
            #[allow(unused_mut)]
            let mut entry_168 = list_167.entry();
            entry_168.string(item_166);
        }
        list_167.finish();
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("MaxRecords");
    if let Some(var_170) = &input.max_records {
        scope_169.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_170).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("NextToken");
    if let Some(var_172) = &input.next_token {
        scope_171.string(var_172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_configuration_options(
    input: &crate::input::DescribeConfigurationOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConfigurationOptions", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("ApplicationName");
    if let Some(var_174) = &input.application_name {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("TemplateName");
    if let Some(var_176) = &input.template_name {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("EnvironmentName");
    if let Some(var_178) = &input.environment_name {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("SolutionStackName");
    if let Some(var_180) = &input.solution_stack_name {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("PlatformArn");
    if let Some(var_182) = &input.platform_arn {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("Options");
    if let Some(var_184) = &input.options {
        let mut list_186 = scope_183.start_list(false, None);
        for item_185 in var_184 {
            #[allow(unused_mut)]
            let mut entry_187 = list_186.entry();
            crate::query_ser::serialize_structure_crate_model_option_specification(
                entry_187, item_185,
            )?;
        }
        list_186.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_configuration_settings(
    input: &crate::input::DescribeConfigurationSettingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConfigurationSettings", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("ApplicationName");
    if let Some(var_189) = &input.application_name {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("TemplateName");
    if let Some(var_191) = &input.template_name {
        scope_190.string(var_191);
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("EnvironmentName");
    if let Some(var_193) = &input.environment_name {
        scope_192.string(var_193);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_environment_health(
    input: &crate::input::DescribeEnvironmentHealthInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEnvironmentHealth", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("EnvironmentName");
    if let Some(var_195) = &input.environment_name {
        scope_194.string(var_195);
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("EnvironmentId");
    if let Some(var_197) = &input.environment_id {
        scope_196.string(var_197);
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("AttributeNames");
    if let Some(var_199) = &input.attribute_names {
        let mut list_201 = scope_198.start_list(false, None);
        for item_200 in var_199 {
            #[allow(unused_mut)]
            let mut entry_202 = list_201.entry();
            entry_202.string(item_200.as_str());
        }
        list_201.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_environment_managed_action_history(
    input: &crate::input::DescribeEnvironmentManagedActionHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEnvironmentManagedActionHistory",
        "2010-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("EnvironmentId");
    if let Some(var_204) = &input.environment_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("EnvironmentName");
    if let Some(var_206) = &input.environment_name {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("NextToken");
    if let Some(var_208) = &input.next_token {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("MaxItems");
    if let Some(var_210) = &input.max_items {
        scope_209.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_environment_managed_actions(
    input: &crate::input::DescribeEnvironmentManagedActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEnvironmentManagedActions",
        "2010-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("EnvironmentName");
    if let Some(var_212) = &input.environment_name {
        scope_211.string(var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("EnvironmentId");
    if let Some(var_214) = &input.environment_id {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("Status");
    if let Some(var_216) = &input.status {
        scope_215.string(var_216.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_environment_resources(
    input: &crate::input::DescribeEnvironmentResourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEnvironmentResources", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("EnvironmentId");
    if let Some(var_218) = &input.environment_id {
        scope_217.string(var_218);
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("EnvironmentName");
    if let Some(var_220) = &input.environment_name {
        scope_219.string(var_220);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_environments(
    input: &crate::input::DescribeEnvironmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEnvironments", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("ApplicationName");
    if let Some(var_222) = &input.application_name {
        scope_221.string(var_222);
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("VersionLabel");
    if let Some(var_224) = &input.version_label {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("EnvironmentIds");
    if let Some(var_226) = &input.environment_ids {
        let mut list_228 = scope_225.start_list(false, None);
        for item_227 in var_226 {
            #[allow(unused_mut)]
            let mut entry_229 = list_228.entry();
            entry_229.string(item_227);
        }
        list_228.finish();
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("EnvironmentNames");
    if let Some(var_231) = &input.environment_names {
        let mut list_233 = scope_230.start_list(false, None);
        for item_232 in var_231 {
            #[allow(unused_mut)]
            let mut entry_234 = list_233.entry();
            entry_234.string(item_232);
        }
        list_233.finish();
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("IncludeDeleted");
    if let Some(var_236) = &input.include_deleted {
        scope_235.boolean(*var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("IncludedDeletedBackTo");
    if let Some(var_238) = &input.included_deleted_back_to {
        scope_237.date_time(var_238, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("MaxRecords");
    if let Some(var_240) = &input.max_records {
        scope_239.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_240).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("NextToken");
    if let Some(var_242) = &input.next_token {
        scope_241.string(var_242);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("ApplicationName");
    if let Some(var_244) = &input.application_name {
        scope_243.string(var_244);
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("VersionLabel");
    if let Some(var_246) = &input.version_label {
        scope_245.string(var_246);
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("TemplateName");
    if let Some(var_248) = &input.template_name {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("EnvironmentId");
    if let Some(var_250) = &input.environment_id {
        scope_249.string(var_250);
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("EnvironmentName");
    if let Some(var_252) = &input.environment_name {
        scope_251.string(var_252);
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("PlatformArn");
    if let Some(var_254) = &input.platform_arn {
        scope_253.string(var_254);
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("RequestId");
    if let Some(var_256) = &input.request_id {
        scope_255.string(var_256);
    }
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("Severity");
    if let Some(var_258) = &input.severity {
        scope_257.string(var_258.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("StartTime");
    if let Some(var_260) = &input.start_time {
        scope_259.date_time(var_260, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("EndTime");
    if let Some(var_262) = &input.end_time {
        scope_261.date_time(var_262, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("MaxRecords");
    if let Some(var_264) = &input.max_records {
        scope_263.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_264).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("NextToken");
    if let Some(var_266) = &input.next_token {
        scope_265.string(var_266);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances_health(
    input: &crate::input::DescribeInstancesHealthInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstancesHealth", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("EnvironmentName");
    if let Some(var_268) = &input.environment_name {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("EnvironmentId");
    if let Some(var_270) = &input.environment_id {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("AttributeNames");
    if let Some(var_272) = &input.attribute_names {
        let mut list_274 = scope_271.start_list(false, None);
        for item_273 in var_272 {
            #[allow(unused_mut)]
            let mut entry_275 = list_274.entry();
            entry_275.string(item_273.as_str());
        }
        list_274.finish();
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("NextToken");
    if let Some(var_277) = &input.next_token {
        scope_276.string(var_277);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_platform_version(
    input: &crate::input::DescribePlatformVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlatformVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("PlatformArn");
    if let Some(var_279) = &input.platform_arn {
        scope_278.string(var_279);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_environment_operations_role(
    input: &crate::input::DisassociateEnvironmentOperationsRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnvironmentOperationsRole",
        "2010-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("EnvironmentName");
    if let Some(var_281) = &input.environment_name {
        scope_280.string(var_281);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_available_solution_stacks(
    input: &crate::input::ListAvailableSolutionStacksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListAvailableSolutionStacks", "2010-12-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_platform_branches(
    input: &crate::input::ListPlatformBranchesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListPlatformBranches", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("Filters");
    if let Some(var_283) = &input.filters {
        let mut list_285 = scope_282.start_list(false, None);
        for item_284 in var_283 {
            #[allow(unused_mut)]
            let mut entry_286 = list_285.entry();
            crate::query_ser::serialize_structure_crate_model_search_filter(entry_286, item_284)?;
        }
        list_285.finish();
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("MaxRecords");
    if let Some(var_288) = &input.max_records {
        scope_287.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_288).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("NextToken");
    if let Some(var_290) = &input.next_token {
        scope_289.string(var_290);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_platform_versions(
    input: &crate::input::ListPlatformVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListPlatformVersions", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("Filters");
    if let Some(var_292) = &input.filters {
        let mut list_294 = scope_291.start_list(false, None);
        for item_293 in var_292 {
            #[allow(unused_mut)]
            let mut entry_295 = list_294.entry();
            crate::query_ser::serialize_structure_crate_model_platform_filter(entry_295, item_293)?;
        }
        list_294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("MaxRecords");
    if let Some(var_297) = &input.max_records {
        scope_296.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_297).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("NextToken");
    if let Some(var_299) = &input.next_token {
        scope_298.string(var_299);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("ResourceArn");
    if let Some(var_301) = &input.resource_arn {
        scope_300.string(var_301);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_rebuild_environment(
    input: &crate::input::RebuildEnvironmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RebuildEnvironment", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("EnvironmentId");
    if let Some(var_303) = &input.environment_id {
        scope_302.string(var_303);
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("EnvironmentName");
    if let Some(var_305) = &input.environment_name {
        scope_304.string(var_305);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_environment_info(
    input: &crate::input::RequestEnvironmentInfoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestEnvironmentInfo", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("EnvironmentId");
    if let Some(var_307) = &input.environment_id {
        scope_306.string(var_307);
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("EnvironmentName");
    if let Some(var_309) = &input.environment_name {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("InfoType");
    if let Some(var_311) = &input.info_type {
        scope_310.string(var_311.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restart_app_server(
    input: &crate::input::RestartAppServerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestartAppServer", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("EnvironmentId");
    if let Some(var_313) = &input.environment_id {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("EnvironmentName");
    if let Some(var_315) = &input.environment_name {
        scope_314.string(var_315);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_retrieve_environment_info(
    input: &crate::input::RetrieveEnvironmentInfoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RetrieveEnvironmentInfo", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("EnvironmentId");
    if let Some(var_317) = &input.environment_id {
        scope_316.string(var_317);
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("EnvironmentName");
    if let Some(var_319) = &input.environment_name {
        scope_318.string(var_319);
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("InfoType");
    if let Some(var_321) = &input.info_type {
        scope_320.string(var_321.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_swap_environment_cnam_es(
    input: &crate::input::SwapEnvironmentCnamEsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SwapEnvironmentCNAMEs", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("SourceEnvironmentId");
    if let Some(var_323) = &input.source_environment_id {
        scope_322.string(var_323);
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("SourceEnvironmentName");
    if let Some(var_325) = &input.source_environment_name {
        scope_324.string(var_325);
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("DestinationEnvironmentId");
    if let Some(var_327) = &input.destination_environment_id {
        scope_326.string(var_327);
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("DestinationEnvironmentName");
    if let Some(var_329) = &input.destination_environment_name {
        scope_328.string(var_329);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_environment(
    input: &crate::input::TerminateEnvironmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateEnvironment", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("EnvironmentId");
    if let Some(var_331) = &input.environment_id {
        scope_330.string(var_331);
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("EnvironmentName");
    if let Some(var_333) = &input.environment_name {
        scope_332.string(var_333);
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("TerminateResources");
    if let Some(var_335) = &input.terminate_resources {
        scope_334.boolean(*var_335);
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("ForceTerminate");
    if let Some(var_337) = &input.force_terminate {
        scope_336.boolean(*var_337);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_application(
    input: &crate::input::UpdateApplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateApplication", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("ApplicationName");
    if let Some(var_339) = &input.application_name {
        scope_338.string(var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("Description");
    if let Some(var_341) = &input.description {
        scope_340.string(var_341);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_application_resource_lifecycle(
    input: &crate::input::UpdateApplicationResourceLifecycleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateApplicationResourceLifecycle",
        "2010-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("ApplicationName");
    if let Some(var_343) = &input.application_name {
        scope_342.string(var_343);
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("ResourceLifecycleConfig");
    if let Some(var_345) = &input.resource_lifecycle_config {
        crate::query_ser::serialize_structure_crate_model_application_resource_lifecycle_config(
            scope_344, var_345,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_application_version(
    input: &crate::input::UpdateApplicationVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateApplicationVersion", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("ApplicationName");
    if let Some(var_347) = &input.application_name {
        scope_346.string(var_347);
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("VersionLabel");
    if let Some(var_349) = &input.version_label {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("Description");
    if let Some(var_351) = &input.description {
        scope_350.string(var_351);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_configuration_template(
    input: &crate::input::UpdateConfigurationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateConfigurationTemplate", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("ApplicationName");
    if let Some(var_353) = &input.application_name {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("TemplateName");
    if let Some(var_355) = &input.template_name {
        scope_354.string(var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("Description");
    if let Some(var_357) = &input.description {
        scope_356.string(var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("OptionSettings");
    if let Some(var_359) = &input.option_settings {
        let mut list_361 = scope_358.start_list(false, None);
        for item_360 in var_359 {
            #[allow(unused_mut)]
            let mut entry_362 = list_361.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_362, item_360,
            )?;
        }
        list_361.finish();
    }
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("OptionsToRemove");
    if let Some(var_364) = &input.options_to_remove {
        let mut list_366 = scope_363.start_list(false, None);
        for item_365 in var_364 {
            #[allow(unused_mut)]
            let mut entry_367 = list_366.entry();
            crate::query_ser::serialize_structure_crate_model_option_specification(
                entry_367, item_365,
            )?;
        }
        list_366.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_environment(
    input: &crate::input::UpdateEnvironmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateEnvironment", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("ApplicationName");
    if let Some(var_369) = &input.application_name {
        scope_368.string(var_369);
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("EnvironmentId");
    if let Some(var_371) = &input.environment_id {
        scope_370.string(var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("EnvironmentName");
    if let Some(var_373) = &input.environment_name {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("GroupName");
    if let Some(var_375) = &input.group_name {
        scope_374.string(var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("Description");
    if let Some(var_377) = &input.description {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("Tier");
    if let Some(var_379) = &input.tier {
        crate::query_ser::serialize_structure_crate_model_environment_tier(scope_378, var_379)?;
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("VersionLabel");
    if let Some(var_381) = &input.version_label {
        scope_380.string(var_381);
    }
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("TemplateName");
    if let Some(var_383) = &input.template_name {
        scope_382.string(var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("SolutionStackName");
    if let Some(var_385) = &input.solution_stack_name {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("PlatformArn");
    if let Some(var_387) = &input.platform_arn {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("OptionSettings");
    if let Some(var_389) = &input.option_settings {
        let mut list_391 = scope_388.start_list(false, None);
        for item_390 in var_389 {
            #[allow(unused_mut)]
            let mut entry_392 = list_391.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_392, item_390,
            )?;
        }
        list_391.finish();
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("OptionsToRemove");
    if let Some(var_394) = &input.options_to_remove {
        let mut list_396 = scope_393.start_list(false, None);
        for item_395 in var_394 {
            #[allow(unused_mut)]
            let mut entry_397 = list_396.entry();
            crate::query_ser::serialize_structure_crate_model_option_specification(
                entry_397, item_395,
            )?;
        }
        list_396.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_tags_for_resource(
    input: &crate::input::UpdateTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateTagsForResource", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ResourceArn");
    if let Some(var_399) = &input.resource_arn {
        scope_398.string(var_399);
    }
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("TagsToAdd");
    if let Some(var_401) = &input.tags_to_add {
        let mut list_403 = scope_400.start_list(false, None);
        for item_402 in var_401 {
            #[allow(unused_mut)]
            let mut entry_404 = list_403.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_404, item_402)?;
        }
        list_403.finish();
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("TagsToRemove");
    if let Some(var_406) = &input.tags_to_remove {
        let mut list_408 = scope_405.start_list(false, None);
        for item_407 in var_406 {
            #[allow(unused_mut)]
            let mut entry_409 = list_408.entry();
            entry_409.string(item_407);
        }
        list_408.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_validate_configuration_settings(
    input: &crate::input::ValidateConfigurationSettingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ValidateConfigurationSettings", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("ApplicationName");
    if let Some(var_411) = &input.application_name {
        scope_410.string(var_411);
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("TemplateName");
    if let Some(var_413) = &input.template_name {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("EnvironmentName");
    if let Some(var_415) = &input.environment_name {
        scope_414.string(var_415);
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("OptionSettings");
    if let Some(var_417) = &input.option_settings {
        let mut list_419 = scope_416.start_list(false, None);
        for item_418 in var_417 {
            #[allow(unused_mut)]
            let mut entry_420 = list_419.entry();
            crate::query_ser::serialize_structure_crate_model_configuration_option_setting(
                entry_420, item_418,
            )?;
        }
        list_419.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
