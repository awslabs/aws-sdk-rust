// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_configuration_template_input_input(
    input: &crate::operation::create_configuration_template::CreateConfigurationTemplateInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateConfigurationTemplate", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ApplicationName");
    if let Some(var_2) = &input.application_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TemplateName");
    if let Some(var_4) = &input.template_name {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("SolutionStackName");
    if let Some(var_6) = &input.solution_stack_name {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("PlatformArn");
    if let Some(var_8) = &input.platform_arn {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("SourceConfiguration");
    if let Some(var_10) = &input.source_configuration {
        crate::protocol_serde::shape_source_configuration::ser_source_configuration(scope_9, var_10)?;
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("EnvironmentId");
    if let Some(var_12) = &input.environment_id {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("Description");
    if let Some(var_14) = &input.description {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("OptionSettings");
    if let Some(var_16) = &input.option_settings {
        let mut list_18 = scope_15.start_list(false, None);
        for item_17 in var_16 {
            #[allow(unused_mut)]
            let mut entry_19 = list_18.entry();
            crate::protocol_serde::shape_configuration_option_setting::ser_configuration_option_setting(entry_19, item_17)?;
        }
        list_18.finish();
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("Tags");
    if let Some(var_21) = &input.tags {
        let mut list_23 = scope_20.start_list(false, None);
        for item_22 in var_21 {
            #[allow(unused_mut)]
            let mut entry_24 = list_23.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_24, item_22)?;
        }
        list_23.finish();
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
