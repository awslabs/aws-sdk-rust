// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_list_platform_versions_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::list_platform_versions::ListPlatformVersionsOutput,
    crate::operation::list_platform_versions::ListPlatformVersionsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::list_platform_versions::ListPlatformVersionsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::list_platform_versions::ListPlatformVersionsError::unhandled(
                    generic,
                ),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ElasticBeanstalkServiceException" => crate::operation::list_platform_versions::ListPlatformVersionsError::ElasticBeanstalkServiceException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ElasticBeanstalkServiceExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_elastic_beanstalk_service_exception::de_elastic_beanstalk_service_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::list_platform_versions::ListPlatformVersionsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InsufficientPrivilegesException" => crate::operation::list_platform_versions::ListPlatformVersionsError::InsufficientPrivilegesException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InsufficientPrivilegesExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_insufficient_privileges_exception::de_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::list_platform_versions::ListPlatformVersionsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::list_platform_versions::ListPlatformVersionsError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_list_platform_versions_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::list_platform_versions::ListPlatformVersionsOutput,
    crate::operation::list_platform_versions::ListPlatformVersionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::list_platform_versions::builders::ListPlatformVersionsOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_list_platform_versions::de_list_platform_versions(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::list_platform_versions::ListPlatformVersionsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_list_platform_versions(
    inp: &[u8],
    mut builder: crate::operation::list_platform_versions::builders::ListPlatformVersionsOutputBuilder,
) -> Result<
    crate::operation::list_platform_versions::builders::ListPlatformVersionsOutputBuilder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("ListPlatformVersionsResponse")) {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected ListPlatformVersionsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListPlatformVersionsResult")) {
            return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected ListPlatformVersionsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("PlatformSummaryList") /* PlatformSummaryList com.amazonaws.elasticbeanstalk.synthetic#ListPlatformVersionsOutput$PlatformSummaryList */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_platform_summary_list::de_platform_summary_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_platform_summary_list(var_1);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.elasticbeanstalk.synthetic#ListPlatformVersionsOutput$NextToken */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_2);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected ListPlatformVersionsResult tag",
        ));
    };
    Ok(builder)
}
