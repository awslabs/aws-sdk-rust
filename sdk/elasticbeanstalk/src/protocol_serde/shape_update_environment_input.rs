// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_environment_input_input(
    input: &crate::operation::update_environment::UpdateEnvironmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateEnvironment", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ApplicationName");
    if let Some(var_2) = &input.application_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("EnvironmentId");
    if let Some(var_4) = &input.environment_id {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("EnvironmentName");
    if let Some(var_6) = &input.environment_name {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("GroupName");
    if let Some(var_8) = &input.group_name {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("Description");
    if let Some(var_10) = &input.description {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("Tier");
    if let Some(var_12) = &input.tier {
        crate::protocol_serde::shape_environment_tier::ser_environment_tier(scope_11, var_12)?;
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("VersionLabel");
    if let Some(var_14) = &input.version_label {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TemplateName");
    if let Some(var_16) = &input.template_name {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SolutionStackName");
    if let Some(var_18) = &input.solution_stack_name {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("PlatformArn");
    if let Some(var_20) = &input.platform_arn {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("OptionSettings");
    if let Some(var_22) = &input.option_settings {
        let mut list_24 = scope_21.start_list(false, None);
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::protocol_serde::shape_configuration_option_setting::ser_configuration_option_setting(entry_25, item_23)?;
        }
        list_24.finish();
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("OptionsToRemove");
    if let Some(var_27) = &input.options_to_remove {
        let mut list_29 = scope_26.start_list(false, None);
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            crate::protocol_serde::shape_option_specification::ser_option_specification(
                entry_30, item_28,
            )?;
        }
        list_29.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
