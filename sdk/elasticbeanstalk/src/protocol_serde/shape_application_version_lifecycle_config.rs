// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_application_version_lifecycle_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::ApplicationVersionLifecycleConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("MaxCountRule");
    if let Some(var_2) = &input.max_count_rule {
        crate::protocol_serde::shape_max_count_rule::ser_max_count_rule(scope_1, var_2)?;
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("MaxAgeRule");
    if let Some(var_4) = &input.max_age_rule {
        crate::protocol_serde::shape_max_age_rule::ser_max_age_rule(scope_3, var_4)?;
    }
    Ok(())
}

pub fn de_application_version_lifecycle_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ApplicationVersionLifecycleConfig, aws_smithy_xml::decode::XmlDecodeError>
{
    #[allow(unused_mut)]
    let mut builder = crate::types::ApplicationVersionLifecycleConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("MaxCountRule") /* MaxCountRule com.amazonaws.elasticbeanstalk#ApplicationVersionLifecycleConfig$MaxCountRule */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_max_count_rule::de_max_count_rule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_max_count_rule(var_5);
            }
            ,
            s if s.matches("MaxAgeRule") /* MaxAgeRule com.amazonaws.elasticbeanstalk#ApplicationVersionLifecycleConfig$MaxAgeRule */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_max_age_rule::de_max_age_rule(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_max_age_rule(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
