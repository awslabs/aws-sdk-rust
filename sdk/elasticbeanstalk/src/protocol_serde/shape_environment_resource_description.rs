// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_environment_resource_description(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::EnvironmentResourceDescription, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::EnvironmentResourceDescription::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("EnvironmentName") /* EnvironmentName com.amazonaws.elasticbeanstalk#EnvironmentResourceDescription$EnvironmentName */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_environment_name(var_1);
            }
            ,
            s if s.matches("AutoScalingGroups") /* AutoScalingGroups com.amazonaws.elasticbeanstalk#EnvironmentResourceDescription$AutoScalingGroups */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_auto_scaling_group_list::de_auto_scaling_group_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_auto_scaling_groups(var_2);
            }
            ,
            s if s.matches("Instances") /* Instances com.amazonaws.elasticbeanstalk#EnvironmentResourceDescription$Instances */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_instance_list::de_instance_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_instances(var_3);
            }
            ,
            s if s.matches("LaunchConfigurations") /* LaunchConfigurations com.amazonaws.elasticbeanstalk#EnvironmentResourceDescription$LaunchConfigurations */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_launch_configuration_list::de_launch_configuration_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_configurations(var_4);
            }
            ,
            s if s.matches("LaunchTemplates") /* LaunchTemplates com.amazonaws.elasticbeanstalk#EnvironmentResourceDescription$LaunchTemplates */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_launch_template_list::de_launch_template_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_launch_templates(var_5);
            }
            ,
            s if s.matches("LoadBalancers") /* LoadBalancers com.amazonaws.elasticbeanstalk#EnvironmentResourceDescription$LoadBalancers */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_load_balancer_list::de_load_balancer_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_load_balancers(var_6);
            }
            ,
            s if s.matches("Triggers") /* Triggers com.amazonaws.elasticbeanstalk#EnvironmentResourceDescription$Triggers */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_trigger_list::de_trigger_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_triggers(var_7);
            }
            ,
            s if s.matches("Queues") /* Queues com.amazonaws.elasticbeanstalk#EnvironmentResourceDescription$Queues */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_queue_list::de_queue_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_queues(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
