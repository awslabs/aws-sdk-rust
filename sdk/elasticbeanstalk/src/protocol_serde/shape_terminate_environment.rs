// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_terminate_environment_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::terminate_environment::TerminateEnvironmentOutput,
    crate::operation::terminate_environment::TerminateEnvironmentError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::terminate_environment::TerminateEnvironmentError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::terminate_environment::TerminateEnvironmentError::unhandled(
                    generic,
                ),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InsufficientPrivilegesException" => crate::operation::terminate_environment::TerminateEnvironmentError::InsufficientPrivilegesException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InsufficientPrivilegesExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_insufficient_privileges_exception::de_insufficient_privileges_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::terminate_environment::TerminateEnvironmentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::terminate_environment::TerminateEnvironmentError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_terminate_environment_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::terminate_environment::TerminateEnvironmentOutput,
    crate::operation::terminate_environment::TerminateEnvironmentError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::terminate_environment::builders::TerminateEnvironmentOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_terminate_environment::de_terminate_environment(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::terminate_environment::TerminateEnvironmentError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_terminate_environment(
    inp: &[u8],
    mut builder: crate::operation::terminate_environment::builders::TerminateEnvironmentOutputBuilder,
) -> Result<
    crate::operation::terminate_environment::builders::TerminateEnvironmentOutputBuilder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("TerminateEnvironmentResponse")) {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected TerminateEnvironmentResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("TerminateEnvironmentResult")) {
            return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected TerminateEnvironmentResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("EnvironmentName") /* EnvironmentName com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$EnvironmentName */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_environment_name(var_1);
            }
            ,
            s if s.matches("EnvironmentId") /* EnvironmentId com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$EnvironmentId */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_environment_id(var_2);
            }
            ,
            s if s.matches("ApplicationName") /* ApplicationName com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$ApplicationName */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_application_name(var_3);
            }
            ,
            s if s.matches("VersionLabel") /* VersionLabel com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$VersionLabel */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_version_label(var_4);
            }
            ,
            s if s.matches("SolutionStackName") /* SolutionStackName com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$SolutionStackName */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_solution_stack_name(var_5);
            }
            ,
            s if s.matches("PlatformArn") /* PlatformArn com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$PlatformArn */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_platform_arn(var_6);
            }
            ,
            s if s.matches("TemplateName") /* TemplateName com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$TemplateName */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_template_name(var_7);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$Description */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_8);
            }
            ,
            s if s.matches("EndpointURL") /* EndpointURL com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$EndpointURL */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_endpoint_url(var_9);
            }
            ,
            s if s.matches("CNAME") /* CNAME com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$CNAME */ =>  {
                let var_10 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cname(var_10);
            }
            ,
            s if s.matches("DateCreated") /* DateCreated com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$DateCreated */ =>  {
                let var_11 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.elasticbeanstalk#CreationDate`)"))
                        ?
                    )
                ;
                builder = builder.set_date_created(var_11);
            }
            ,
            s if s.matches("DateUpdated") /* DateUpdated com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$DateUpdated */ =>  {
                let var_12 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.elasticbeanstalk#UpdateDate`)"))
                        ?
                    )
                ;
                builder = builder.set_date_updated(var_12);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$Status */ =>  {
                let var_13 =
                    Some(
                        Result::<crate::types::EnvironmentStatus, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::EnvironmentStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_13);
            }
            ,
            s if s.matches("AbortableOperationInProgress") /* AbortableOperationInProgress com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$AbortableOperationInProgress */ =>  {
                let var_14 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticbeanstalk#AbortableOperationInProgress`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_abortable_operation_in_progress(var_14);
            }
            ,
            s if s.matches("Health") /* Health com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$Health */ =>  {
                let var_15 =
                    Some(
                        Result::<crate::types::EnvironmentHealth, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::EnvironmentHealth::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_health(var_15);
            }
            ,
            s if s.matches("HealthStatus") /* HealthStatus com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$HealthStatus */ =>  {
                let var_16 =
                    Some(
                        Result::<crate::types::EnvironmentHealthStatus, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::EnvironmentHealthStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_health_status(var_16);
            }
            ,
            s if s.matches("Resources") /* Resources com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$Resources */ =>  {
                let var_17 =
                    Some(
                        crate::protocol_serde::shape_environment_resources_description::de_environment_resources_description(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resources(var_17);
            }
            ,
            s if s.matches("Tier") /* Tier com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$Tier */ =>  {
                let var_18 =
                    Some(
                        crate::protocol_serde::shape_environment_tier::de_environment_tier(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tier(var_18);
            }
            ,
            s if s.matches("EnvironmentLinks") /* EnvironmentLinks com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$EnvironmentLinks */ =>  {
                let var_19 =
                    Some(
                        crate::protocol_serde::shape_environment_links::de_environment_links(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_environment_links(var_19);
            }
            ,
            s if s.matches("EnvironmentArn") /* EnvironmentArn com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$EnvironmentArn */ =>  {
                let var_20 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_environment_arn(var_20);
            }
            ,
            s if s.matches("OperationsRole") /* OperationsRole com.amazonaws.elasticbeanstalk.synthetic#TerminateEnvironmentOutput$OperationsRole */ =>  {
                let var_21 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_operations_role(var_21);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected TerminateEnvironmentResult tag",
        ));
    };
    Ok(builder)
}
