// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_environments_input_input(
    input: &crate::operation::describe_environments::DescribeEnvironmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEnvironments", "2010-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ApplicationName");
    if let Some(var_2) = &input.application_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("VersionLabel");
    if let Some(var_4) = &input.version_label {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("EnvironmentIds");
    if let Some(var_6) = &input.environment_ids {
        let mut list_8 = scope_5.start_list(false, None);
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            entry_9.string(item_7);
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("EnvironmentNames");
    if let Some(var_11) = &input.environment_names {
        let mut list_13 = scope_10.start_list(false, None);
        for item_12 in var_11 {
            #[allow(unused_mut)]
            let mut entry_14 = list_13.entry();
            entry_14.string(item_12);
        }
        list_13.finish();
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("IncludeDeleted");
    if let Some(var_16) = &input.include_deleted {
        scope_15.boolean(*var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("IncludedDeletedBackTo");
    if let Some(var_18) = &input.included_deleted_back_to {
        scope_17.date_time(var_18, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("MaxRecords");
    if let Some(var_20) = &input.max_records {
        scope_19.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("NextToken");
    if let Some(var_22) = &input.next_token {
        scope_21.string(var_22);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
