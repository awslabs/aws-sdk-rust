// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_platform_branch_summary(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::PlatformBranchSummary, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::PlatformBranchSummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("PlatformName") /* PlatformName com.amazonaws.elasticbeanstalk#PlatformBranchSummary$PlatformName */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_platform_name(var_1);
            }
            ,
            s if s.matches("BranchName") /* BranchName com.amazonaws.elasticbeanstalk#PlatformBranchSummary$BranchName */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_branch_name(var_2);
            }
            ,
            s if s.matches("LifecycleState") /* LifecycleState com.amazonaws.elasticbeanstalk#PlatformBranchSummary$LifecycleState */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_lifecycle_state(var_3);
            }
            ,
            s if s.matches("BranchOrder") /* BranchOrder com.amazonaws.elasticbeanstalk#PlatformBranchSummary$BranchOrder */ =>  {
                let var_4 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticbeanstalk#BranchOrder`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_branch_order(var_4);
            }
            ,
            s if s.matches("SupportedTierList") /* SupportedTierList com.amazonaws.elasticbeanstalk#PlatformBranchSummary$SupportedTierList */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_supported_tier_list::de_supported_tier_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_supported_tier_list(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
