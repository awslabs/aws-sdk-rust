// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_application_description(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ApplicationDescription, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ApplicationDescription::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ApplicationArn") /* ApplicationArn com.amazonaws.elasticbeanstalk#ApplicationDescription$ApplicationArn */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_application_arn(var_1);
            }
            ,
            s if s.matches("ApplicationName") /* ApplicationName com.amazonaws.elasticbeanstalk#ApplicationDescription$ApplicationName */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_application_name(var_2);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.elasticbeanstalk#ApplicationDescription$Description */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3);
            }
            ,
            s if s.matches("DateCreated") /* DateCreated com.amazonaws.elasticbeanstalk#ApplicationDescription$DateCreated */ =>  {
                let var_4 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.elasticbeanstalk#CreationDate`)"))
                        ?
                    )
                ;
                builder = builder.set_date_created(var_4);
            }
            ,
            s if s.matches("DateUpdated") /* DateUpdated com.amazonaws.elasticbeanstalk#ApplicationDescription$DateUpdated */ =>  {
                let var_5 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.elasticbeanstalk#UpdateDate`)"))
                        ?
                    )
                ;
                builder = builder.set_date_updated(var_5);
            }
            ,
            s if s.matches("Versions") /* Versions com.amazonaws.elasticbeanstalk#ApplicationDescription$Versions */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_version_labels_list::de_version_labels_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_versions(var_6);
            }
            ,
            s if s.matches("ConfigurationTemplates") /* ConfigurationTemplates com.amazonaws.elasticbeanstalk#ApplicationDescription$ConfigurationTemplates */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_configuration_template_names_list::de_configuration_template_names_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_configuration_templates(var_7);
            }
            ,
            s if s.matches("ResourceLifecycleConfig") /* ResourceLifecycleConfig com.amazonaws.elasticbeanstalk#ApplicationDescription$ResourceLifecycleConfig */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_application_resource_lifecycle_config::de_application_resource_lifecycle_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_lifecycle_config(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
