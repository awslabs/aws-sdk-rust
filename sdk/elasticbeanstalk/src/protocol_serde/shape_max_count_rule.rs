// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_max_count_rule(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::MaxCountRule,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Enabled");
    {
        scope_1.boolean(input.enabled);
    }
    #[allow(unused_mut)]
    let mut scope_2 = writer.prefix("MaxCount");
    if let Some(var_3) = &input.max_count {
        scope_2.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4 = writer.prefix("DeleteSourceFromS3");
    if let Some(var_5) = &input.delete_source_from_s3 {
        scope_4.boolean(*var_5);
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_max_count_rule(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::MaxCountRule, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::MaxCountRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Enabled") /* Enabled com.amazonaws.elasticbeanstalk#MaxCountRule$Enabled */ =>  {
                let var_6 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticbeanstalk#BoxedBoolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_6);
            }
            ,
            s if s.matches("MaxCount") /* MaxCount com.amazonaws.elasticbeanstalk#MaxCountRule$MaxCount */ =>  {
                let var_7 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticbeanstalk#BoxedInt`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_count(var_7);
            }
            ,
            s if s.matches("DeleteSourceFromS3") /* DeleteSourceFromS3 com.amazonaws.elasticbeanstalk#MaxCountRule$DeleteSourceFromS3 */ =>  {
                let var_8 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticbeanstalk#BoxedBoolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_source_from_s3(var_8);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::max_count_rule_correct_errors(builder)
        .build()
        .map_err(|_| ::aws_smithy_xml::decode::XmlDecodeError::custom("missing field"))?)
}
