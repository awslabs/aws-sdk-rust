// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_max_count_rule(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::MaxCountRule,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Enabled");
    if let Some(var_2) = &input.enabled {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("MaxCount");
    if let Some(var_4) = &input.max_count {
        scope_3.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("DeleteSourceFromS3");
    if let Some(var_6) = &input.delete_source_from_s3 {
        scope_5.boolean(*var_6);
    }
    Ok(())
}

pub fn de_max_count_rule(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::MaxCountRule, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::MaxCountRule::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Enabled") /* Enabled com.amazonaws.elasticbeanstalk#MaxCountRule$Enabled */ =>  {
                let var_7 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticbeanstalk#BoxedBoolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_7);
            }
            ,
            s if s.matches("MaxCount") /* MaxCount com.amazonaws.elasticbeanstalk#MaxCountRule$MaxCount */ =>  {
                let var_8 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.elasticbeanstalk#BoxedInt`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_count(var_8);
            }
            ,
            s if s.matches("DeleteSourceFromS3") /* DeleteSourceFromS3 com.amazonaws.elasticbeanstalk#MaxCountRule$DeleteSourceFromS3 */ =>  {
                let var_9 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.elasticbeanstalk#BoxedBoolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_delete_source_from_s3(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
