// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Result message containing a single description of an application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateApplicationOutput {
    /// <p> The <code>ApplicationDescription</code> of the application. </p>
    #[doc(hidden)]
    pub application: std::option::Option<crate::types::ApplicationDescription>,
    _request_id: Option<String>,
}
impl CreateApplicationOutput {
    /// <p> The <code>ApplicationDescription</code> of the application. </p>
    pub fn application(&self) -> std::option::Option<&crate::types::ApplicationDescription> {
        self.application.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateApplicationOutput {
    /// Creates a new builder-style object to manufacture [`CreateApplicationOutput`](crate::operation::create_application::CreateApplicationOutput).
    pub fn builder(
    ) -> crate::operation::create_application::builders::CreateApplicationOutputBuilder {
        crate::operation::create_application::builders::CreateApplicationOutputBuilder::default()
    }
}

/// A builder for [`CreateApplicationOutput`](crate::operation::create_application::CreateApplicationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateApplicationOutputBuilder {
    pub(crate) application: std::option::Option<crate::types::ApplicationDescription>,
    _request_id: Option<String>,
}
impl CreateApplicationOutputBuilder {
    /// <p> The <code>ApplicationDescription</code> of the application. </p>
    pub fn application(mut self, input: crate::types::ApplicationDescription) -> Self {
        self.application = Some(input);
        self
    }
    /// <p> The <code>ApplicationDescription</code> of the application. </p>
    pub fn set_application(
        mut self,
        input: std::option::Option<crate::types::ApplicationDescription>,
    ) -> Self {
        self.application = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateApplicationOutput`](crate::operation::create_application::CreateApplicationOutput).
    pub fn build(self) -> crate::operation::create_application::CreateApplicationOutput {
        crate::operation::create_application::CreateApplicationOutput {
            application: self.application,
            _request_id: self._request_id,
        }
    }
}
