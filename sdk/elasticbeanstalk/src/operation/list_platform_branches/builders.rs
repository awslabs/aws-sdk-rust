// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_platform_branches::_list_platform_branches_output::ListPlatformBranchesOutputBuilder;

pub use crate::operation::list_platform_branches::_list_platform_branches_input::ListPlatformBranchesInputBuilder;

impl crate::operation::list_platform_branches::builders::ListPlatformBranchesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_platform_branches::ListPlatformBranchesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_platform_branches::ListPlatformBranchesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_platform_branches();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListPlatformBranches`.
///
/// <p>Lists the platform branches available for your account in an AWS Region. Provides summary information about each platform branch.</p>
/// <p>For definitions of platform branch and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk Platforms Glossary</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListPlatformBranchesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_platform_branches::builders::ListPlatformBranchesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_platform_branches::ListPlatformBranchesOutput,
        crate::operation::list_platform_branches::ListPlatformBranchesError,
    > for ListPlatformBranchesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_platform_branches::ListPlatformBranchesOutput,
            crate::operation::list_platform_branches::ListPlatformBranchesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListPlatformBranchesFluentBuilder {
    /// Creates a new `ListPlatformBranches`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListPlatformBranches as a reference.
    pub fn as_input(&self) -> &crate::operation::list_platform_branches::builders::ListPlatformBranchesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_platform_branches::ListPlatformBranchesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_platform_branches::ListPlatformBranchesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_platform_branches::ListPlatformBranches::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_platform_branches::ListPlatformBranches::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_platform_branches::ListPlatformBranchesOutput,
        crate::operation::list_platform_branches::ListPlatformBranchesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_platform_branches::paginator::ListPlatformBranchesPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_platform_branches::paginator::ListPlatformBranchesPaginator {
        crate::operation::list_platform_branches::paginator::ListPlatformBranchesPaginator::new(self.handle, self.inner)
    }
    ///
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Criteria for restricting the resulting list of platform branches. The filter is evaluated as a logical conjunction (AND) of the separate <code>SearchFilter</code> terms.</p>
    /// <p>The following list shows valid attribute values for each of the <code>SearchFilter</code> terms. Most operators take a single value. The <code>in</code> and <code>not_in</code> operators can take multiple values.</p>
    /// <ul>
    /// <li>
    /// <p><code>Attribute = BranchName</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code> | <code>ends_with</code> | <code>contains</code> | <code>in</code> | <code>not_in</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>Attribute = LifecycleState</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code> | <code>in</code> | <code>not_in</code></p></li>
    /// <li>
    /// <p><code>Values</code>: <code>beta</code> | <code>supported</code> | <code>deprecated</code> | <code>retired</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>Attribute = PlatformName</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code> | <code>ends_with</code> | <code>contains</code> | <code>in</code> | <code>not_in</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>Attribute = TierType</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code></p></li>
    /// <li>
    /// <p><code>Values</code>: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code></p></li>
    /// </ul></li>
    /// </ul>
    /// <p>Array size: limited to 10 <code>SearchFilter</code> objects.</p>
    /// <p>Within each <code>SearchFilter</code> item, the <code>Values</code> array is limited to 10 items.</p>
    pub fn filters(mut self, input: crate::types::SearchFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>Criteria for restricting the resulting list of platform branches. The filter is evaluated as a logical conjunction (AND) of the separate <code>SearchFilter</code> terms.</p>
    /// <p>The following list shows valid attribute values for each of the <code>SearchFilter</code> terms. Most operators take a single value. The <code>in</code> and <code>not_in</code> operators can take multiple values.</p>
    /// <ul>
    /// <li>
    /// <p><code>Attribute = BranchName</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code> | <code>ends_with</code> | <code>contains</code> | <code>in</code> | <code>not_in</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>Attribute = LifecycleState</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code> | <code>in</code> | <code>not_in</code></p></li>
    /// <li>
    /// <p><code>Values</code>: <code>beta</code> | <code>supported</code> | <code>deprecated</code> | <code>retired</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>Attribute = PlatformName</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code> | <code>ends_with</code> | <code>contains</code> | <code>in</code> | <code>not_in</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>Attribute = TierType</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code></p></li>
    /// <li>
    /// <p><code>Values</code>: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code></p></li>
    /// </ul></li>
    /// </ul>
    /// <p>Array size: limited to 10 <code>SearchFilter</code> objects.</p>
    /// <p>Within each <code>SearchFilter</code> item, the <code>Values</code> array is limited to 10 items.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SearchFilter>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>Criteria for restricting the resulting list of platform branches. The filter is evaluated as a logical conjunction (AND) of the separate <code>SearchFilter</code> terms.</p>
    /// <p>The following list shows valid attribute values for each of the <code>SearchFilter</code> terms. Most operators take a single value. The <code>in</code> and <code>not_in</code> operators can take multiple values.</p>
    /// <ul>
    /// <li>
    /// <p><code>Attribute = BranchName</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code> | <code>ends_with</code> | <code>contains</code> | <code>in</code> | <code>not_in</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>Attribute = LifecycleState</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code> | <code>in</code> | <code>not_in</code></p></li>
    /// <li>
    /// <p><code>Values</code>: <code>beta</code> | <code>supported</code> | <code>deprecated</code> | <code>retired</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>Attribute = PlatformName</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code> | <code>ends_with</code> | <code>contains</code> | <code>in</code> | <code>not_in</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>Attribute = TierType</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>Operator</code>: <code>=</code> | <code>!=</code></p></li>
    /// <li>
    /// <p><code>Values</code>: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code></p></li>
    /// </ul></li>
    /// </ul>
    /// <p>Array size: limited to 10 <code>SearchFilter</code> objects.</p>
    /// <p>Within each <code>SearchFilter</code> item, the <code>Values</code> array is limited to 10 items.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SearchFilter>> {
        self.inner.get_filters()
    }
    /// <p>The maximum number of platform branch values returned in one call.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.inner = self.inner.max_records(input);
        self
    }
    /// <p>The maximum number of platform branch values returned in one call.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_records(input);
        self
    }
    /// <p>The maximum number of platform branch values returned in one call.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_records()
    }
    /// <p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p>
    /// <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p>
    /// <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p>
    /// <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
