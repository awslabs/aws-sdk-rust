// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Health details for an AWS Elastic Beanstalk environment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeEnvironmentHealthOutput {
    /// <p>The environment's name.</p>
    pub environment_name: ::std::option::Option<::std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health status</a> of the environment. For example, <code>Ok</code>.</p>
    pub health_status: ::std::option::Option<::std::string::String>,
    /// <p>The environment's operational status. <code>Ready</code>, <code>Launching</code>, <code>Updating</code>, <code>Terminating</code>, or <code>Terminated</code>.</p>
    pub status: ::std::option::Option<crate::types::EnvironmentHealth>,
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health color</a> of the environment.</p>
    pub color: ::std::option::Option<::std::string::String>,
    /// <p>Descriptions of the data that contributed to the environment's current health status.</p>
    pub causes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Application request metrics for the environment.</p>
    pub application_metrics: ::std::option::Option<crate::types::ApplicationMetrics>,
    /// <p>Summary health information for the instances in the environment.</p>
    pub instances_health: ::std::option::Option<crate::types::InstanceHealthSummary>,
    /// <p>The date and time that the health information was retrieved.</p>
    pub refreshed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeEnvironmentHealthOutput {
    /// <p>The environment's name.</p>
    pub fn environment_name(&self) -> ::std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health status</a> of the environment. For example, <code>Ok</code>.</p>
    pub fn health_status(&self) -> ::std::option::Option<&str> {
        self.health_status.as_deref()
    }
    /// <p>The environment's operational status. <code>Ready</code>, <code>Launching</code>, <code>Updating</code>, <code>Terminating</code>, or <code>Terminated</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::EnvironmentHealth> {
        self.status.as_ref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health color</a> of the environment.</p>
    pub fn color(&self) -> ::std::option::Option<&str> {
        self.color.as_deref()
    }
    /// <p>Descriptions of the data that contributed to the environment's current health status.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.causes.is_none()`.
    pub fn causes(&self) -> &[::std::string::String] {
        self.causes.as_deref().unwrap_or_default()
    }
    /// <p>Application request metrics for the environment.</p>
    pub fn application_metrics(&self) -> ::std::option::Option<&crate::types::ApplicationMetrics> {
        self.application_metrics.as_ref()
    }
    /// <p>Summary health information for the instances in the environment.</p>
    pub fn instances_health(&self) -> ::std::option::Option<&crate::types::InstanceHealthSummary> {
        self.instances_health.as_ref()
    }
    /// <p>The date and time that the health information was retrieved.</p>
    pub fn refreshed_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.refreshed_at.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeEnvironmentHealthOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEnvironmentHealthOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEnvironmentHealthOutput`](crate::operation::describe_environment_health::DescribeEnvironmentHealthOutput).
    pub fn builder() -> crate::operation::describe_environment_health::builders::DescribeEnvironmentHealthOutputBuilder {
        crate::operation::describe_environment_health::builders::DescribeEnvironmentHealthOutputBuilder::default()
    }
}

/// A builder for [`DescribeEnvironmentHealthOutput`](crate::operation::describe_environment_health::DescribeEnvironmentHealthOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeEnvironmentHealthOutputBuilder {
    pub(crate) environment_name: ::std::option::Option<::std::string::String>,
    pub(crate) health_status: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::EnvironmentHealth>,
    pub(crate) color: ::std::option::Option<::std::string::String>,
    pub(crate) causes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) application_metrics: ::std::option::Option<crate::types::ApplicationMetrics>,
    pub(crate) instances_health: ::std::option::Option<crate::types::InstanceHealthSummary>,
    pub(crate) refreshed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeEnvironmentHealthOutputBuilder {
    /// <p>The environment's name.</p>
    pub fn environment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The environment's name.</p>
    pub fn set_environment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p>The environment's name.</p>
    pub fn get_environment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_name
    }
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health status</a> of the environment. For example, <code>Ok</code>.</p>
    pub fn health_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.health_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health status</a> of the environment. For example, <code>Ok</code>.</p>
    pub fn set_health_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.health_status = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health status</a> of the environment. For example, <code>Ok</code>.</p>
    pub fn get_health_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.health_status
    }
    /// <p>The environment's operational status. <code>Ready</code>, <code>Launching</code>, <code>Updating</code>, <code>Terminating</code>, or <code>Terminated</code>.</p>
    pub fn status(mut self, input: crate::types::EnvironmentHealth) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The environment's operational status. <code>Ready</code>, <code>Launching</code>, <code>Updating</code>, <code>Terminating</code>, or <code>Terminated</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EnvironmentHealth>) -> Self {
        self.status = input;
        self
    }
    /// <p>The environment's operational status. <code>Ready</code>, <code>Launching</code>, <code>Updating</code>, <code>Terminating</code>, or <code>Terminated</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EnvironmentHealth> {
        &self.status
    }
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health color</a> of the environment.</p>
    pub fn color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health color</a> of the environment.</p>
    pub fn set_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">health color</a> of the environment.</p>
    pub fn get_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.color
    }
    /// Appends an item to `causes`.
    ///
    /// To override the contents of this collection use [`set_causes`](Self::set_causes).
    ///
    /// <p>Descriptions of the data that contributed to the environment's current health status.</p>
    pub fn causes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.causes.unwrap_or_default();
        v.push(input.into());
        self.causes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Descriptions of the data that contributed to the environment's current health status.</p>
    pub fn set_causes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.causes = input;
        self
    }
    /// <p>Descriptions of the data that contributed to the environment's current health status.</p>
    pub fn get_causes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.causes
    }
    /// <p>Application request metrics for the environment.</p>
    pub fn application_metrics(mut self, input: crate::types::ApplicationMetrics) -> Self {
        self.application_metrics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Application request metrics for the environment.</p>
    pub fn set_application_metrics(mut self, input: ::std::option::Option<crate::types::ApplicationMetrics>) -> Self {
        self.application_metrics = input;
        self
    }
    /// <p>Application request metrics for the environment.</p>
    pub fn get_application_metrics(&self) -> &::std::option::Option<crate::types::ApplicationMetrics> {
        &self.application_metrics
    }
    /// <p>Summary health information for the instances in the environment.</p>
    pub fn instances_health(mut self, input: crate::types::InstanceHealthSummary) -> Self {
        self.instances_health = ::std::option::Option::Some(input);
        self
    }
    /// <p>Summary health information for the instances in the environment.</p>
    pub fn set_instances_health(mut self, input: ::std::option::Option<crate::types::InstanceHealthSummary>) -> Self {
        self.instances_health = input;
        self
    }
    /// <p>Summary health information for the instances in the environment.</p>
    pub fn get_instances_health(&self) -> &::std::option::Option<crate::types::InstanceHealthSummary> {
        &self.instances_health
    }
    /// <p>The date and time that the health information was retrieved.</p>
    pub fn refreshed_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.refreshed_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the health information was retrieved.</p>
    pub fn set_refreshed_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.refreshed_at = input;
        self
    }
    /// <p>The date and time that the health information was retrieved.</p>
    pub fn get_refreshed_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.refreshed_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEnvironmentHealthOutput`](crate::operation::describe_environment_health::DescribeEnvironmentHealthOutput).
    pub fn build(self) -> crate::operation::describe_environment_health::DescribeEnvironmentHealthOutput {
        crate::operation::describe_environment_health::DescribeEnvironmentHealthOutput {
            environment_name: self.environment_name,
            health_status: self.health_status,
            status: self.status,
            color: self.color,
            causes: self.causes,
            application_metrics: self.application_metrics,
            instances_health: self.instances_health,
            refreshed_at: self.refreshed_at,
            _request_id: self._request_id,
        }
    }
}
