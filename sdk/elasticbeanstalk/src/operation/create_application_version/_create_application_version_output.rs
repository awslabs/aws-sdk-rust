// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Result message wrapping a single description of an application version.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateApplicationVersionOutput {
    /// <p> The <code>ApplicationVersionDescription</code> of the application version. </p>
    #[doc(hidden)]
    pub application_version: std::option::Option<crate::types::ApplicationVersionDescription>,
    _request_id: Option<String>,
}
impl CreateApplicationVersionOutput {
    /// <p> The <code>ApplicationVersionDescription</code> of the application version. </p>
    pub fn application_version(
        &self,
    ) -> std::option::Option<&crate::types::ApplicationVersionDescription> {
        self.application_version.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateApplicationVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateApplicationVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateApplicationVersionOutput`](crate::operation::create_application_version::CreateApplicationVersionOutput).
    pub fn builder(
    ) -> crate::operation::create_application_version::builders::CreateApplicationVersionOutputBuilder
    {
        crate::operation::create_application_version::builders::CreateApplicationVersionOutputBuilder::default()
    }
}

/// A builder for [`CreateApplicationVersionOutput`](crate::operation::create_application_version::CreateApplicationVersionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateApplicationVersionOutputBuilder {
    pub(crate) application_version:
        std::option::Option<crate::types::ApplicationVersionDescription>,
    _request_id: Option<String>,
}
impl CreateApplicationVersionOutputBuilder {
    /// <p> The <code>ApplicationVersionDescription</code> of the application version. </p>
    pub fn application_version(
        mut self,
        input: crate::types::ApplicationVersionDescription,
    ) -> Self {
        self.application_version = Some(input);
        self
    }
    /// <p> The <code>ApplicationVersionDescription</code> of the application version. </p>
    pub fn set_application_version(
        mut self,
        input: std::option::Option<crate::types::ApplicationVersionDescription>,
    ) -> Self {
        self.application_version = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateApplicationVersionOutput`](crate::operation::create_application_version::CreateApplicationVersionOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_application_version::CreateApplicationVersionOutput {
        crate::operation::create_application_version::CreateApplicationVersionOutput {
            application_version: self.application_version,
            _request_id: self._request_id,
        }
    }
}
