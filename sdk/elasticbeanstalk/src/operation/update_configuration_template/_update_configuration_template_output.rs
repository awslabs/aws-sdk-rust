// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the settings for a configuration set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateConfigurationTemplateOutput {
    /// <p>The name of the solution stack this configuration set uses.</p>
    pub solution_stack_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the platform version.</p>
    pub platform_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the application associated with this configuration set.</p>
    pub application_name: ::std::option::Option<::std::string::String>,
    /// <p> If not <code>null</code>, the name of the configuration template for this configuration set. </p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>Describes this configuration set.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> If not <code>null</code>, the name of the environment for this configuration set. </p>
    pub environment_name: ::std::option::Option<::std::string::String>,
    /// <p> If this configuration set is associated with an environment, the <code>DeploymentStatus</code> parameter indicates the deployment status of this configuration set: </p>
    /// <ul>
    /// <li> <p> <code>null</code>: This configuration is not associated with a running environment.</p> </li>
    /// <li> <p> <code>pending</code>: This is a draft configuration that is not deployed to the associated environment but is in the process of deploying.</p> </li>
    /// <li> <p> <code>deployed</code>: This is the configuration that is currently deployed to the associated running environment.</p> </li>
    /// <li> <p> <code>failed</code>: This is a draft configuration that failed to successfully deploy.</p> </li>
    /// </ul>
    pub deployment_status: ::std::option::Option<crate::types::ConfigurationDeploymentStatus>,
    /// <p>The date (in UTC time) when this configuration set was created.</p>
    pub date_created: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date (in UTC time) when this configuration set was last modified.</p>
    pub date_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of the configuration options and their values in this configuration set.</p>
    pub option_settings: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationOptionSetting>>,
    _request_id: Option<String>,
}
impl UpdateConfigurationTemplateOutput {
    /// <p>The name of the solution stack this configuration set uses.</p>
    pub fn solution_stack_name(&self) -> ::std::option::Option<&str> {
        self.solution_stack_name.as_deref()
    }
    /// <p>The ARN of the platform version.</p>
    pub fn platform_arn(&self) -> ::std::option::Option<&str> {
        self.platform_arn.as_deref()
    }
    /// <p>The name of the application associated with this configuration set.</p>
    pub fn application_name(&self) -> ::std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p> If not <code>null</code>, the name of the configuration template for this configuration set. </p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>Describes this configuration set.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> If not <code>null</code>, the name of the environment for this configuration set. </p>
    pub fn environment_name(&self) -> ::std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p> If this configuration set is associated with an environment, the <code>DeploymentStatus</code> parameter indicates the deployment status of this configuration set: </p>
    /// <ul>
    /// <li> <p> <code>null</code>: This configuration is not associated with a running environment.</p> </li>
    /// <li> <p> <code>pending</code>: This is a draft configuration that is not deployed to the associated environment but is in the process of deploying.</p> </li>
    /// <li> <p> <code>deployed</code>: This is the configuration that is currently deployed to the associated running environment.</p> </li>
    /// <li> <p> <code>failed</code>: This is a draft configuration that failed to successfully deploy.</p> </li>
    /// </ul>
    pub fn deployment_status(&self) -> ::std::option::Option<&crate::types::ConfigurationDeploymentStatus> {
        self.deployment_status.as_ref()
    }
    /// <p>The date (in UTC time) when this configuration set was created.</p>
    pub fn date_created(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_created.as_ref()
    }
    /// <p>The date (in UTC time) when this configuration set was last modified.</p>
    pub fn date_updated(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_updated.as_ref()
    }
    /// <p>A list of the configuration options and their values in this configuration set.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.option_settings.is_none()`.
    pub fn option_settings(&self) -> &[crate::types::ConfigurationOptionSetting] {
        self.option_settings.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for UpdateConfigurationTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateConfigurationTemplateOutput {
    /// Creates a new builder-style object to manufacture [`UpdateConfigurationTemplateOutput`](crate::operation::update_configuration_template::UpdateConfigurationTemplateOutput).
    pub fn builder() -> crate::operation::update_configuration_template::builders::UpdateConfigurationTemplateOutputBuilder {
        crate::operation::update_configuration_template::builders::UpdateConfigurationTemplateOutputBuilder::default()
    }
}

/// A builder for [`UpdateConfigurationTemplateOutput`](crate::operation::update_configuration_template::UpdateConfigurationTemplateOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateConfigurationTemplateOutputBuilder {
    pub(crate) solution_stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) platform_arn: ::std::option::Option<::std::string::String>,
    pub(crate) application_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) environment_name: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_status: ::std::option::Option<crate::types::ConfigurationDeploymentStatus>,
    pub(crate) date_created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) date_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) option_settings: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationOptionSetting>>,
    _request_id: Option<String>,
}
impl UpdateConfigurationTemplateOutputBuilder {
    /// <p>The name of the solution stack this configuration set uses.</p>
    pub fn solution_stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.solution_stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the solution stack this configuration set uses.</p>
    pub fn set_solution_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.solution_stack_name = input;
        self
    }
    /// <p>The name of the solution stack this configuration set uses.</p>
    pub fn get_solution_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.solution_stack_name
    }
    /// <p>The ARN of the platform version.</p>
    pub fn platform_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the platform version.</p>
    pub fn set_platform_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform_arn = input;
        self
    }
    /// <p>The ARN of the platform version.</p>
    pub fn get_platform_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform_arn
    }
    /// <p>The name of the application associated with this configuration set.</p>
    pub fn application_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application associated with this configuration set.</p>
    pub fn set_application_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The name of the application associated with this configuration set.</p>
    pub fn get_application_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_name
    }
    /// <p> If not <code>null</code>, the name of the configuration template for this configuration set. </p>
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> If not <code>null</code>, the name of the configuration template for this configuration set. </p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p> If not <code>null</code>, the name of the configuration template for this configuration set. </p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>Describes this configuration set.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes this configuration set.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Describes this configuration set.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p> If not <code>null</code>, the name of the environment for this configuration set. </p>
    pub fn environment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> If not <code>null</code>, the name of the environment for this configuration set. </p>
    pub fn set_environment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p> If not <code>null</code>, the name of the environment for this configuration set. </p>
    pub fn get_environment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_name
    }
    /// <p> If this configuration set is associated with an environment, the <code>DeploymentStatus</code> parameter indicates the deployment status of this configuration set: </p>
    /// <ul>
    /// <li> <p> <code>null</code>: This configuration is not associated with a running environment.</p> </li>
    /// <li> <p> <code>pending</code>: This is a draft configuration that is not deployed to the associated environment but is in the process of deploying.</p> </li>
    /// <li> <p> <code>deployed</code>: This is the configuration that is currently deployed to the associated running environment.</p> </li>
    /// <li> <p> <code>failed</code>: This is a draft configuration that failed to successfully deploy.</p> </li>
    /// </ul>
    pub fn deployment_status(mut self, input: crate::types::ConfigurationDeploymentStatus) -> Self {
        self.deployment_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> If this configuration set is associated with an environment, the <code>DeploymentStatus</code> parameter indicates the deployment status of this configuration set: </p>
    /// <ul>
    /// <li> <p> <code>null</code>: This configuration is not associated with a running environment.</p> </li>
    /// <li> <p> <code>pending</code>: This is a draft configuration that is not deployed to the associated environment but is in the process of deploying.</p> </li>
    /// <li> <p> <code>deployed</code>: This is the configuration that is currently deployed to the associated running environment.</p> </li>
    /// <li> <p> <code>failed</code>: This is a draft configuration that failed to successfully deploy.</p> </li>
    /// </ul>
    pub fn set_deployment_status(mut self, input: ::std::option::Option<crate::types::ConfigurationDeploymentStatus>) -> Self {
        self.deployment_status = input;
        self
    }
    /// <p> If this configuration set is associated with an environment, the <code>DeploymentStatus</code> parameter indicates the deployment status of this configuration set: </p>
    /// <ul>
    /// <li> <p> <code>null</code>: This configuration is not associated with a running environment.</p> </li>
    /// <li> <p> <code>pending</code>: This is a draft configuration that is not deployed to the associated environment but is in the process of deploying.</p> </li>
    /// <li> <p> <code>deployed</code>: This is the configuration that is currently deployed to the associated running environment.</p> </li>
    /// <li> <p> <code>failed</code>: This is a draft configuration that failed to successfully deploy.</p> </li>
    /// </ul>
    pub fn get_deployment_status(&self) -> &::std::option::Option<crate::types::ConfigurationDeploymentStatus> {
        &self.deployment_status
    }
    /// <p>The date (in UTC time) when this configuration set was created.</p>
    pub fn date_created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date (in UTC time) when this configuration set was created.</p>
    pub fn set_date_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_created = input;
        self
    }
    /// <p>The date (in UTC time) when this configuration set was created.</p>
    pub fn get_date_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_created
    }
    /// <p>The date (in UTC time) when this configuration set was last modified.</p>
    pub fn date_updated(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_updated = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date (in UTC time) when this configuration set was last modified.</p>
    pub fn set_date_updated(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_updated = input;
        self
    }
    /// <p>The date (in UTC time) when this configuration set was last modified.</p>
    pub fn get_date_updated(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_updated
    }
    /// Appends an item to `option_settings`.
    ///
    /// To override the contents of this collection use [`set_option_settings`](Self::set_option_settings).
    ///
    /// <p>A list of the configuration options and their values in this configuration set.</p>
    pub fn option_settings(mut self, input: crate::types::ConfigurationOptionSetting) -> Self {
        let mut v = self.option_settings.unwrap_or_default();
        v.push(input);
        self.option_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the configuration options and their values in this configuration set.</p>
    pub fn set_option_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationOptionSetting>>) -> Self {
        self.option_settings = input;
        self
    }
    /// <p>A list of the configuration options and their values in this configuration set.</p>
    pub fn get_option_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConfigurationOptionSetting>> {
        &self.option_settings
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateConfigurationTemplateOutput`](crate::operation::update_configuration_template::UpdateConfigurationTemplateOutput).
    pub fn build(self) -> crate::operation::update_configuration_template::UpdateConfigurationTemplateOutput {
        crate::operation::update_configuration_template::UpdateConfigurationTemplateOutput {
            solution_stack_name: self.solution_stack_name,
            platform_arn: self.platform_arn,
            application_name: self.application_name,
            template_name: self.template_name,
            description: self.description,
            environment_name: self.environment_name,
            deployment_status: self.deployment_status,
            date_created: self.date_created,
            date_updated: self.date_updated,
            option_settings: self.option_settings,
            _request_id: self._request_id,
        }
    }
}
