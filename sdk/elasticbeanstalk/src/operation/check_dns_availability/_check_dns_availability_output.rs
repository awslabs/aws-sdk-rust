// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates if the specified CNAME is available.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CheckDnsAvailabilityOutput {
    /// <p>Indicates if the specified CNAME is available:</p>
    /// <ul>
    /// <li> <p> <code>true</code> : The CNAME is available.</p> </li>
    /// <li> <p> <code>false</code> : The CNAME is not available.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub available: std::option::Option<bool>,
    /// <p>The fully qualified CNAME to reserve when <code>CreateEnvironment</code> is called with the provided prefix.</p>
    #[doc(hidden)]
    pub fully_qualified_cname: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CheckDnsAvailabilityOutput {
    /// <p>Indicates if the specified CNAME is available:</p>
    /// <ul>
    /// <li> <p> <code>true</code> : The CNAME is available.</p> </li>
    /// <li> <p> <code>false</code> : The CNAME is not available.</p> </li>
    /// </ul>
    pub fn available(&self) -> std::option::Option<bool> {
        self.available
    }
    /// <p>The fully qualified CNAME to reserve when <code>CreateEnvironment</code> is called with the provided prefix.</p>
    pub fn fully_qualified_cname(&self) -> std::option::Option<&str> {
        self.fully_qualified_cname.as_deref()
    }
}
impl aws_http::request_id::RequestId for CheckDnsAvailabilityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CheckDnsAvailabilityOutput {
    /// Creates a new builder-style object to manufacture [`CheckDnsAvailabilityOutput`](crate::operation::check_dns_availability::CheckDnsAvailabilityOutput).
    pub fn builder(
    ) -> crate::operation::check_dns_availability::builders::CheckDnsAvailabilityOutputBuilder {
        crate::operation::check_dns_availability::builders::CheckDnsAvailabilityOutputBuilder::default()
    }
}

/// A builder for [`CheckDnsAvailabilityOutput`](crate::operation::check_dns_availability::CheckDnsAvailabilityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CheckDnsAvailabilityOutputBuilder {
    pub(crate) available: std::option::Option<bool>,
    pub(crate) fully_qualified_cname: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CheckDnsAvailabilityOutputBuilder {
    /// <p>Indicates if the specified CNAME is available:</p>
    /// <ul>
    /// <li> <p> <code>true</code> : The CNAME is available.</p> </li>
    /// <li> <p> <code>false</code> : The CNAME is not available.</p> </li>
    /// </ul>
    pub fn available(mut self, input: bool) -> Self {
        self.available = Some(input);
        self
    }
    /// <p>Indicates if the specified CNAME is available:</p>
    /// <ul>
    /// <li> <p> <code>true</code> : The CNAME is available.</p> </li>
    /// <li> <p> <code>false</code> : The CNAME is not available.</p> </li>
    /// </ul>
    pub fn set_available(mut self, input: std::option::Option<bool>) -> Self {
        self.available = input;
        self
    }
    /// <p>The fully qualified CNAME to reserve when <code>CreateEnvironment</code> is called with the provided prefix.</p>
    pub fn fully_qualified_cname(mut self, input: impl Into<std::string::String>) -> Self {
        self.fully_qualified_cname = Some(input.into());
        self
    }
    /// <p>The fully qualified CNAME to reserve when <code>CreateEnvironment</code> is called with the provided prefix.</p>
    pub fn set_fully_qualified_cname(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.fully_qualified_cname = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CheckDnsAvailabilityOutput`](crate::operation::check_dns_availability::CheckDnsAvailabilityOutput).
    pub fn build(self) -> crate::operation::check_dns_availability::CheckDnsAvailabilityOutput {
        crate::operation::check_dns_availability::CheckDnsAvailabilityOutput {
            available: self.available,
            fully_qualified_cname: self.fully_qualified_cname,
            _request_id: self._request_id,
        }
    }
}
