// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters for a call to <code>DescribeInstancesHealth</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeInstancesHealthInput {
    /// <p>Specify the AWS Elastic Beanstalk environment by name.</p>
    pub environment_name: ::std::option::Option<::std::string::String>,
    /// <p>Specify the AWS Elastic Beanstalk environment by ID.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the response elements you wish to receive. To retrieve all attributes, set to <code>All</code>. If no attribute names are specified, returns a list of instances.</p>
    pub attribute_names: ::std::option::Option<::std::vec::Vec<crate::types::InstancesHealthAttribute>>,
    /// <p>Specify the pagination token returned by a previous call.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeInstancesHealthInput {
    /// <p>Specify the AWS Elastic Beanstalk environment by name.</p>
    pub fn environment_name(&self) -> ::std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p>Specify the AWS Elastic Beanstalk environment by ID.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>Specifies the response elements you wish to receive. To retrieve all attributes, set to <code>All</code>. If no attribute names are specified, returns a list of instances.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attribute_names.is_none()`.
    pub fn attribute_names(&self) -> &[crate::types::InstancesHealthAttribute] {
        self.attribute_names.as_deref().unwrap_or_default()
    }
    /// <p>Specify the pagination token returned by a previous call.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeInstancesHealthInput {
    /// Creates a new builder-style object to manufacture [`DescribeInstancesHealthInput`](crate::operation::describe_instances_health::DescribeInstancesHealthInput).
    pub fn builder() -> crate::operation::describe_instances_health::builders::DescribeInstancesHealthInputBuilder {
        crate::operation::describe_instances_health::builders::DescribeInstancesHealthInputBuilder::default()
    }
}

/// A builder for [`DescribeInstancesHealthInput`](crate::operation::describe_instances_health::DescribeInstancesHealthInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeInstancesHealthInputBuilder {
    pub(crate) environment_name: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_names: ::std::option::Option<::std::vec::Vec<crate::types::InstancesHealthAttribute>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeInstancesHealthInputBuilder {
    /// <p>Specify the AWS Elastic Beanstalk environment by name.</p>
    pub fn environment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the AWS Elastic Beanstalk environment by name.</p>
    pub fn set_environment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p>Specify the AWS Elastic Beanstalk environment by name.</p>
    pub fn get_environment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_name
    }
    /// <p>Specify the AWS Elastic Beanstalk environment by ID.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the AWS Elastic Beanstalk environment by ID.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>Specify the AWS Elastic Beanstalk environment by ID.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// Appends an item to `attribute_names`.
    ///
    /// To override the contents of this collection use [`set_attribute_names`](Self::set_attribute_names).
    ///
    /// <p>Specifies the response elements you wish to receive. To retrieve all attributes, set to <code>All</code>. If no attribute names are specified, returns a list of instances.</p>
    pub fn attribute_names(mut self, input: crate::types::InstancesHealthAttribute) -> Self {
        let mut v = self.attribute_names.unwrap_or_default();
        v.push(input);
        self.attribute_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the response elements you wish to receive. To retrieve all attributes, set to <code>All</code>. If no attribute names are specified, returns a list of instances.</p>
    pub fn set_attribute_names(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InstancesHealthAttribute>>) -> Self {
        self.attribute_names = input;
        self
    }
    /// <p>Specifies the response elements you wish to receive. To retrieve all attributes, set to <code>All</code>. If no attribute names are specified, returns a list of instances.</p>
    pub fn get_attribute_names(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstancesHealthAttribute>> {
        &self.attribute_names
    }
    /// <p>Specify the pagination token returned by a previous call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the pagination token returned by a previous call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specify the pagination token returned by a previous call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`DescribeInstancesHealthInput`](crate::operation::describe_instances_health::DescribeInstancesHealthInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_instances_health::DescribeInstancesHealthInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_instances_health::DescribeInstancesHealthInput {
            environment_name: self.environment_name,
            environment_id: self.environment_id,
            attribute_names: self.attribute_names,
            next_token: self.next_token,
        })
    }
}
