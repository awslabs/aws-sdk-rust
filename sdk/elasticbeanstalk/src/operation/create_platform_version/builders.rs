// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_platform_version::_create_platform_version_output::CreatePlatformVersionOutputBuilder;

pub use crate::operation::create_platform_version::_create_platform_version_input::CreatePlatformVersionInputBuilder;

/// Fluent builder constructing a request to `CreatePlatformVersion`.
///
/// <p>Create a new version of your custom platform.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePlatformVersionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_platform_version::builders::CreatePlatformVersionInputBuilder,
}
impl CreatePlatformVersionFluentBuilder {
    /// Creates a new `CreatePlatformVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_platform_version::CreatePlatformVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_platform_version::CreatePlatformVersionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_platform_version::CreatePlatformVersionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_platform_version::CreatePlatformVersionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of your custom platform.</p>
    pub fn platform_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.platform_name(input.into());
        self
    }
    /// <p>The name of your custom platform.</p>
    pub fn set_platform_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_platform_name(input);
        self
    }
    /// <p>The number, such as 1.0.2, for the new platform version.</p>
    pub fn platform_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.platform_version(input.into());
        self
    }
    /// <p>The number, such as 1.0.2, for the new platform version.</p>
    pub fn set_platform_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_platform_version(input);
        self
    }
    /// <p>The location of the platform definition archive in Amazon S3.</p>
    pub fn platform_definition_bundle(mut self, input: crate::types::S3Location) -> Self {
        self.inner = self.inner.platform_definition_bundle(input);
        self
    }
    /// <p>The location of the platform definition archive in Amazon S3.</p>
    pub fn set_platform_definition_bundle(
        mut self,
        input: std::option::Option<crate::types::S3Location>,
    ) -> Self {
        self.inner = self.inner.set_platform_definition_bundle(input);
        self
    }
    /// <p>The name of the builder environment.</p>
    pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.environment_name(input.into());
        self
    }
    /// <p>The name of the builder environment.</p>
    pub fn set_environment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_environment_name(input);
        self
    }
    /// Appends an item to `OptionSettings`.
    ///
    /// To override the contents of this collection use [`set_option_settings`](Self::set_option_settings).
    ///
    /// <p>The configuration option settings to apply to the builder environment.</p>
    pub fn option_settings(mut self, input: crate::types::ConfigurationOptionSetting) -> Self {
        self.inner = self.inner.option_settings(input);
        self
    }
    /// <p>The configuration option settings to apply to the builder environment.</p>
    pub fn set_option_settings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConfigurationOptionSetting>>,
    ) -> Self {
        self.inner = self.inner.set_option_settings(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies the tags applied to the new platform version.</p>
    /// <p>Elastic Beanstalk applies these tags only to the platform version. Environments that you create using the platform version don't inherit the tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Specifies the tags applied to the new platform version.</p>
    /// <p>Elastic Beanstalk applies these tags only to the platform version. Environments that you create using the platform version don't inherit the tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
