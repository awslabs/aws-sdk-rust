// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_environment::_update_environment_output::UpdateEnvironmentOutputBuilder;

pub use crate::operation::update_environment::_update_environment_input::UpdateEnvironmentInputBuilder;

/// Fluent builder constructing a request to `UpdateEnvironment`.
///
/// <p>Updates the environment description, deploys a new application version, updates the configuration settings to an entirely new configuration template, or updates select configuration option values in the running environment.</p>
/// <p> Attempting to update both the release and configuration is not allowed and AWS Elastic Beanstalk returns an <code>InvalidParameterCombination</code> error. </p>
/// <p> When updating the configuration settings to a new template or individual settings, a draft configuration is created and <code>DescribeConfigurationSettings</code> for this environment returns two setting descriptions with different <code>DeploymentStatus</code> values. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEnvironmentFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_environment::builders::UpdateEnvironmentInputBuilder,
}
impl UpdateEnvironmentFluentBuilder {
    /// Creates a new `UpdateEnvironment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_environment::UpdateEnvironment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_environment::UpdateEnvironmentError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_environment::UpdateEnvironmentOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_environment::UpdateEnvironmentError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the application with which the environment is associated.</p>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.application_name(input.into());
        self
    }
    /// <p>The name of the application with which the environment is associated.</p>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_application_name(input);
        self
    }
    /// <p>The ID of the environment to update.</p>
    /// <p>If no environment with this ID exists, AWS Elastic Beanstalk returns an <code>InvalidParameterValue</code> error.</p>
    /// <p>Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p>
    pub fn environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.environment_id(input.into());
        self
    }
    /// <p>The ID of the environment to update.</p>
    /// <p>If no environment with this ID exists, AWS Elastic Beanstalk returns an <code>InvalidParameterValue</code> error.</p>
    /// <p>Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p>
    pub fn set_environment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_environment_id(input);
        self
    }
    /// <p>The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an <code>InvalidParameterValue</code> error. </p>
    /// <p>Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p>
    pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.environment_name(input.into());
        self
    }
    /// <p>The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an <code>InvalidParameterValue</code> error. </p>
    /// <p>Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p>
    pub fn set_environment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_environment_name(input);
        self
    }
    /// <p>The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name or environment ID parameters. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest (env.yaml)</a> for details.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.group_name(input.into());
        self
    }
    /// <p>The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name or environment ID parameters. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest (env.yaml)</a> for details.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_group_name(input);
        self
    }
    /// <p>If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>This specifies the tier to use to update the environment.</p>
    /// <p>Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns <code>InvalidParameterValue</code> error. </p>
    pub fn tier(mut self, input: crate::types::EnvironmentTier) -> Self {
        self.inner = self.inner.tier(input);
        self
    }
    /// <p>This specifies the tier to use to update the environment.</p>
    /// <p>Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns <code>InvalidParameterValue</code> error. </p>
    pub fn set_tier(mut self, input: std::option::Option<crate::types::EnvironmentTier>) -> Self {
        self.inner = self.inner.set_tier(input);
        self
    }
    /// <p>If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an <code>InvalidParameterValue</code> error. </p>
    pub fn version_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.version_label(input.into());
        self
    }
    /// <p>If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an <code>InvalidParameterValue</code> error. </p>
    pub fn set_version_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_version_label(input);
        self
    }
    /// <p>If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an <code>InvalidParameterValue</code> error. </p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.template_name(input.into());
        self
    }
    /// <p>If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an <code>InvalidParameterValue</code> error. </p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_template_name(input);
        self
    }
    /// <p>This specifies the platform version that the environment will run after the environment is updated.</p>
    pub fn solution_stack_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.solution_stack_name(input.into());
        self
    }
    /// <p>This specifies the platform version that the environment will run after the environment is updated.</p>
    pub fn set_solution_stack_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_solution_stack_name(input);
        self
    }
    /// <p>The ARN of the platform, if used.</p>
    pub fn platform_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.platform_arn(input.into());
        self
    }
    /// <p>The ARN of the platform, if used.</p>
    pub fn set_platform_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_platform_arn(input);
        self
    }
    /// Appends an item to `OptionSettings`.
    ///
    /// To override the contents of this collection use [`set_option_settings`](Self::set_option_settings).
    ///
    /// <p>If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value.</p>
    pub fn option_settings(mut self, input: crate::types::ConfigurationOptionSetting) -> Self {
        self.inner = self.inner.option_settings(input);
        self
    }
    /// <p>If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value.</p>
    pub fn set_option_settings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConfigurationOptionSetting>>,
    ) -> Self {
        self.inner = self.inner.set_option_settings(input);
        self
    }
    /// Appends an item to `OptionsToRemove`.
    ///
    /// To override the contents of this collection use [`set_options_to_remove`](Self::set_options_to_remove).
    ///
    /// <p>A list of custom user-defined configuration options to remove from the configuration set for this environment.</p>
    pub fn options_to_remove(mut self, input: crate::types::OptionSpecification) -> Self {
        self.inner = self.inner.options_to_remove(input);
        self
    }
    /// <p>A list of custom user-defined configuration options to remove from the configuration set for this environment.</p>
    pub fn set_options_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::OptionSpecification>>,
    ) -> Self {
        self.inner = self.inner.set_options_to_remove(input);
        self
    }
}
