// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Swaps the CNAMEs of two environments.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SwapEnvironmentCnamEsInput {
    /// <p>The ID of the source environment.</p>
    /// <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentId</code>, you must specify the <code>DestinationEnvironmentId</code>. </p>
    #[doc(hidden)]
    pub source_environment_id: std::option::Option<std::string::String>,
    /// <p>The name of the source environment.</p>
    /// <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentName</code>, you must specify the <code>DestinationEnvironmentName</code>. </p>
    #[doc(hidden)]
    pub source_environment_name: std::option::Option<std::string::String>,
    /// <p>The ID of the destination environment.</p>
    /// <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentId</code> with the <code>DestinationEnvironmentId</code>. </p>
    #[doc(hidden)]
    pub destination_environment_id: std::option::Option<std::string::String>,
    /// <p>The name of the destination environment.</p>
    /// <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentName</code> with the <code>DestinationEnvironmentName</code>. </p>
    #[doc(hidden)]
    pub destination_environment_name: std::option::Option<std::string::String>,
}
impl SwapEnvironmentCnamEsInput {
    /// <p>The ID of the source environment.</p>
    /// <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentId</code>, you must specify the <code>DestinationEnvironmentId</code>. </p>
    pub fn source_environment_id(&self) -> std::option::Option<&str> {
        self.source_environment_id.as_deref()
    }
    /// <p>The name of the source environment.</p>
    /// <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentName</code>, you must specify the <code>DestinationEnvironmentName</code>. </p>
    pub fn source_environment_name(&self) -> std::option::Option<&str> {
        self.source_environment_name.as_deref()
    }
    /// <p>The ID of the destination environment.</p>
    /// <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentId</code> with the <code>DestinationEnvironmentId</code>. </p>
    pub fn destination_environment_id(&self) -> std::option::Option<&str> {
        self.destination_environment_id.as_deref()
    }
    /// <p>The name of the destination environment.</p>
    /// <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentName</code> with the <code>DestinationEnvironmentName</code>. </p>
    pub fn destination_environment_name(&self) -> std::option::Option<&str> {
        self.destination_environment_name.as_deref()
    }
}
impl SwapEnvironmentCnamEsInput {
    /// Creates a new builder-style object to manufacture [`SwapEnvironmentCnamEsInput`](crate::operation::swap_environment_cnam_es::SwapEnvironmentCnamEsInput).
    pub fn builder(
    ) -> crate::operation::swap_environment_cnam_es::builders::SwapEnvironmentCnamEsInputBuilder
    {
        crate::operation::swap_environment_cnam_es::builders::SwapEnvironmentCnamEsInputBuilder::default()
    }
}

/// A builder for [`SwapEnvironmentCnamEsInput`](crate::operation::swap_environment_cnam_es::SwapEnvironmentCnamEsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SwapEnvironmentCnamEsInputBuilder {
    pub(crate) source_environment_id: std::option::Option<std::string::String>,
    pub(crate) source_environment_name: std::option::Option<std::string::String>,
    pub(crate) destination_environment_id: std::option::Option<std::string::String>,
    pub(crate) destination_environment_name: std::option::Option<std::string::String>,
}
impl SwapEnvironmentCnamEsInputBuilder {
    /// <p>The ID of the source environment.</p>
    /// <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentId</code>, you must specify the <code>DestinationEnvironmentId</code>. </p>
    pub fn source_environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_environment_id = Some(input.into());
        self
    }
    /// <p>The ID of the source environment.</p>
    /// <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentId</code>, you must specify the <code>DestinationEnvironmentId</code>. </p>
    pub fn set_source_environment_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_environment_id = input;
        self
    }
    /// <p>The name of the source environment.</p>
    /// <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentName</code>, you must specify the <code>DestinationEnvironmentName</code>. </p>
    pub fn source_environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_environment_name = Some(input.into());
        self
    }
    /// <p>The name of the source environment.</p>
    /// <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentName</code>, you must specify the <code>DestinationEnvironmentName</code>. </p>
    pub fn set_source_environment_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_environment_name = input;
        self
    }
    /// <p>The ID of the destination environment.</p>
    /// <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentId</code> with the <code>DestinationEnvironmentId</code>. </p>
    pub fn destination_environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_environment_id = Some(input.into());
        self
    }
    /// <p>The ID of the destination environment.</p>
    /// <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentId</code> with the <code>DestinationEnvironmentId</code>. </p>
    pub fn set_destination_environment_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_environment_id = input;
        self
    }
    /// <p>The name of the destination environment.</p>
    /// <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentName</code> with the <code>DestinationEnvironmentName</code>. </p>
    pub fn destination_environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_environment_name = Some(input.into());
        self
    }
    /// <p>The name of the destination environment.</p>
    /// <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentName</code> with the <code>DestinationEnvironmentName</code>. </p>
    pub fn set_destination_environment_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_environment_name = input;
        self
    }
    /// Consumes the builder and constructs a [`SwapEnvironmentCnamEsInput`](crate::operation::swap_environment_cnam_es::SwapEnvironmentCnamEsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::swap_environment_cnam_es::SwapEnvironmentCnamEsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::swap_environment_cnam_es::SwapEnvironmentCnamEsInput {
                source_environment_id: self.source_environment_id,
                source_environment_name: self.source_environment_name,
                destination_environment_id: self.destination_environment_id,
                destination_environment_name: self.destination_environment_name,
            },
        )
    }
}
