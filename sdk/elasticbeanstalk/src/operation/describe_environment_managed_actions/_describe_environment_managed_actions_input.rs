// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request to list an environment's upcoming and in-progress managed actions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeEnvironmentManagedActionsInput {
    /// <p>The name of the target environment.</p>
    pub environment_name: ::std::option::Option<::std::string::String>,
    /// <p>The environment ID of the target environment.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>To show only actions with a particular status, specify a status.</p>
    pub status: ::std::option::Option<crate::types::ActionStatus>,
}
impl DescribeEnvironmentManagedActionsInput {
    /// <p>The name of the target environment.</p>
    pub fn environment_name(&self) -> ::std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p>The environment ID of the target environment.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>To show only actions with a particular status, specify a status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ActionStatus> {
        self.status.as_ref()
    }
}
impl DescribeEnvironmentManagedActionsInput {
    /// Creates a new builder-style object to manufacture [`DescribeEnvironmentManagedActionsInput`](crate::operation::describe_environment_managed_actions::DescribeEnvironmentManagedActionsInput).
    pub fn builder() -> crate::operation::describe_environment_managed_actions::builders::DescribeEnvironmentManagedActionsInputBuilder {
        crate::operation::describe_environment_managed_actions::builders::DescribeEnvironmentManagedActionsInputBuilder::default()
    }
}

/// A builder for [`DescribeEnvironmentManagedActionsInput`](crate::operation::describe_environment_managed_actions::DescribeEnvironmentManagedActionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeEnvironmentManagedActionsInputBuilder {
    pub(crate) environment_name: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ActionStatus>,
}
impl DescribeEnvironmentManagedActionsInputBuilder {
    /// <p>The name of the target environment.</p>
    pub fn environment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the target environment.</p>
    pub fn set_environment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p>The name of the target environment.</p>
    pub fn get_environment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_name
    }
    /// <p>The environment ID of the target environment.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The environment ID of the target environment.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The environment ID of the target environment.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>To show only actions with a particular status, specify a status.</p>
    pub fn status(mut self, input: crate::types::ActionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>To show only actions with a particular status, specify a status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ActionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>To show only actions with a particular status, specify a status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ActionStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`DescribeEnvironmentManagedActionsInput`](crate::operation::describe_environment_managed_actions::DescribeEnvironmentManagedActionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_environment_managed_actions::DescribeEnvironmentManagedActionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_environment_managed_actions::DescribeEnvironmentManagedActionsInput {
                environment_name: self.environment_name,
                environment_id: self.environment_id,
                status: self.status,
            },
        )
    }
}
