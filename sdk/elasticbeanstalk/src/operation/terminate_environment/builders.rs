// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::terminate_environment::_terminate_environment_output::TerminateEnvironmentOutputBuilder;

pub use crate::operation::terminate_environment::_terminate_environment_input::TerminateEnvironmentInputBuilder;

/// Fluent builder constructing a request to `TerminateEnvironment`.
///
/// <p>Terminates the specified environment.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TerminateEnvironmentFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::terminate_environment::builders::TerminateEnvironmentInputBuilder,
}
impl TerminateEnvironmentFluentBuilder {
    /// Creates a new `TerminateEnvironment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::terminate_environment::TerminateEnvironment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::terminate_environment::TerminateEnvironmentError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::terminate_environment::TerminateEnvironmentOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::terminate_environment::TerminateEnvironmentError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the environment to terminate.</p>
    /// <p> Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p>
    pub fn environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.environment_id(input.into());
        self
    }
    /// <p>The ID of the environment to terminate.</p>
    /// <p> Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p>
    pub fn set_environment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_environment_id(input);
        self
    }
    /// <p>The name of the environment to terminate.</p>
    /// <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p>
    pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.environment_name(input.into());
        self
    }
    /// <p>The name of the environment to terminate.</p>
    /// <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p>
    pub fn set_environment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_environment_name(input);
        self
    }
    /// <p>Indicates whether the associated AWS resources should shut down when the environment is terminated:</p>
    /// <ul>
    /// <li> <p> <code>true</code>: The specified environment as well as the associated AWS resources, such as Auto Scaling group and LoadBalancer, are terminated.</p> </li>
    /// <li> <p> <code>false</code>: AWS Elastic Beanstalk resource management is removed from the environment, but the AWS resources continue to operate.</p> </li>
    /// </ul>
    /// <p> For more information, see the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/ug/"> AWS Elastic Beanstalk User Guide. </a> </p>
    /// <p> Default: <code>true</code> </p>
    /// <p> Valid Values: <code>true</code> | <code>false</code> </p>
    pub fn terminate_resources(mut self, input: bool) -> Self {
        self.inner = self.inner.terminate_resources(input);
        self
    }
    /// <p>Indicates whether the associated AWS resources should shut down when the environment is terminated:</p>
    /// <ul>
    /// <li> <p> <code>true</code>: The specified environment as well as the associated AWS resources, such as Auto Scaling group and LoadBalancer, are terminated.</p> </li>
    /// <li> <p> <code>false</code>: AWS Elastic Beanstalk resource management is removed from the environment, but the AWS resources continue to operate.</p> </li>
    /// </ul>
    /// <p> For more information, see the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/ug/"> AWS Elastic Beanstalk User Guide. </a> </p>
    /// <p> Default: <code>true</code> </p>
    /// <p> Valid Values: <code>true</code> | <code>false</code> </p>
    pub fn set_terminate_resources(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_terminate_resources(input);
        self
    }
    /// <p>Terminates the target environment even if another environment in the same group is dependent on it.</p>
    pub fn force_terminate(mut self, input: bool) -> Self {
        self.inner = self.inner.force_terminate(input);
        self
    }
    /// <p>Terminates the target environment even if another environment in the same group is dependent on it.</p>
    pub fn set_force_terminate(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_terminate(input);
        self
    }
}
