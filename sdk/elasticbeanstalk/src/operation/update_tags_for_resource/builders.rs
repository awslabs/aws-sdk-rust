// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_tags_for_resource::_update_tags_for_resource_output::UpdateTagsForResourceOutputBuilder;

pub use crate::operation::update_tags_for_resource::_update_tags_for_resource_input::UpdateTagsForResourceInputBuilder;

/// Fluent builder constructing a request to `UpdateTagsForResource`.
///
/// <p>Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: <code>TagsToAdd</code> for tags to add or update, and <code>TagsToRemove</code>.</p>
/// <p>Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html">Tagging Application Resources</a>.</p>
/// <p>If you create a custom IAM user policy to control permission to this operation, specify one of the following two virtual actions (or both) instead of the API operation name:</p>
/// <dl>
/// <dt>
/// elasticbeanstalk:AddTags
/// </dt>
/// <dd>
/// <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tags to add in the <code>TagsToAdd</code> parameter.</p>
/// </dd>
/// <dt>
/// elasticbeanstalk:RemoveTags
/// </dt>
/// <dd>
/// <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tag keys to remove in the <code>TagsToRemove</code> parameter.</p>
/// </dd>
/// </dl>
/// <p>For details about creating a custom user policy, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies">Creating a Custom User Policy</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTagsForResourceFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_tags_for_resource::builders::UpdateTagsForResourceInputBuilder,
}
impl UpdateTagsForResourceFluentBuilder {
    /// Creates a new `UpdateTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_tags_for_resource::UpdateTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_tags_for_resource::UpdateTagsForResourceError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_tags_for_resource::UpdateTagsForResourceOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_tags_for_resource::UpdateTagsForResourceError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the resouce to be updated.</p>
    /// <p>Must be the ARN of an Elastic Beanstalk resource.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resouce to be updated.</p>
    /// <p>Must be the ARN of an Elastic Beanstalk resource.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `TagsToAdd`.
    ///
    /// To override the contents of this collection use [`set_tags_to_add`](Self::set_tags_to_add).
    ///
    /// <p>A list of tags to add or update. If a key of an existing tag is added, the tag's value is updated.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub fn tags_to_add(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags_to_add(input);
        self
    }
    /// <p>A list of tags to add or update. If a key of an existing tag is added, the tag's value is updated.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub fn set_tags_to_add(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags_to_add(input);
        self
    }
    /// Appends an item to `TagsToRemove`.
    ///
    /// To override the contents of this collection use [`set_tags_to_remove`](Self::set_tags_to_remove).
    ///
    /// <p>A list of tag keys to remove. If a tag key doesn't exist, it is silently ignored.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub fn tags_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tags_to_remove(input.into());
        self
    }
    /// <p>A list of tag keys to remove. If a tag key doesn't exist, it is silently ignored.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub fn set_tags_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tags_to_remove(input);
        self
    }
}
