// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTagsForResourceInput {
    /// <p>The Amazon Resource Name (ARN) of the resouce to be updated.</p>
    /// <p>Must be the ARN of an Elastic Beanstalk resource.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of tags to add or update. If a key of an existing tag is added, the tag's value is updated.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub tags_to_add: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>A list of tag keys to remove. If a tag key doesn't exist, it is silently ignored.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub tags_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateTagsForResourceInput {
    /// <p>The Amazon Resource Name (ARN) of the resouce to be updated.</p>
    /// <p>Must be the ARN of an Elastic Beanstalk resource.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>A list of tags to add or update. If a key of an existing tag is added, the tag's value is updated.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags_to_add.is_none()`.
    pub fn tags_to_add(&self) -> &[crate::types::Tag] {
        self.tags_to_add.as_deref().unwrap_or_default()
    }
    /// <p>A list of tag keys to remove. If a tag key doesn't exist, it is silently ignored.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags_to_remove.is_none()`.
    pub fn tags_to_remove(&self) -> &[::std::string::String] {
        self.tags_to_remove.as_deref().unwrap_or_default()
    }
}
impl UpdateTagsForResourceInput {
    /// Creates a new builder-style object to manufacture [`UpdateTagsForResourceInput`](crate::operation::update_tags_for_resource::UpdateTagsForResourceInput).
    pub fn builder() -> crate::operation::update_tags_for_resource::builders::UpdateTagsForResourceInputBuilder {
        crate::operation::update_tags_for_resource::builders::UpdateTagsForResourceInputBuilder::default()
    }
}

/// A builder for [`UpdateTagsForResourceInput`](crate::operation::update_tags_for_resource::UpdateTagsForResourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateTagsForResourceInputBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags_to_add: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) tags_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateTagsForResourceInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the resouce to be updated.</p>
    /// <p>Must be the ARN of an Elastic Beanstalk resource.</p>
    /// This field is required.
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resouce to be updated.</p>
    /// <p>Must be the ARN of an Elastic Beanstalk resource.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resouce to be updated.</p>
    /// <p>Must be the ARN of an Elastic Beanstalk resource.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// Appends an item to `tags_to_add`.
    ///
    /// To override the contents of this collection use [`set_tags_to_add`](Self::set_tags_to_add).
    ///
    /// <p>A list of tags to add or update. If a key of an existing tag is added, the tag's value is updated.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub fn tags_to_add(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags_to_add.unwrap_or_default();
        v.push(input);
        self.tags_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags to add or update. If a key of an existing tag is added, the tag's value is updated.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub fn set_tags_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags_to_add = input;
        self
    }
    /// <p>A list of tags to add or update. If a key of an existing tag is added, the tag's value is updated.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub fn get_tags_to_add(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags_to_add
    }
    /// Appends an item to `tags_to_remove`.
    ///
    /// To override the contents of this collection use [`set_tags_to_remove`](Self::set_tags_to_remove).
    ///
    /// <p>A list of tag keys to remove. If a tag key doesn't exist, it is silently ignored.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub fn tags_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tags_to_remove.unwrap_or_default();
        v.push(input.into());
        self.tags_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tag keys to remove. If a tag key doesn't exist, it is silently ignored.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub fn set_tags_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tags_to_remove = input;
        self
    }
    /// <p>A list of tag keys to remove. If a tag key doesn't exist, it is silently ignored.</p>
    /// <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p>
    pub fn get_tags_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tags_to_remove
    }
    /// Consumes the builder and constructs a [`UpdateTagsForResourceInput`](crate::operation::update_tags_for_resource::UpdateTagsForResourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_tags_for_resource::UpdateTagsForResourceInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_tags_for_resource::UpdateTagsForResourceInput {
            resource_arn: self.resource_arn,
            tags_to_add: self.tags_to_add,
            tags_to_remove: self.tags_to_remove,
        })
    }
}
