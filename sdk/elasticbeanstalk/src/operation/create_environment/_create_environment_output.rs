// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of an environment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEnvironmentOutput {
    /// <p>The name of this environment.</p>
    pub environment_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of this environment.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the application associated with this environment.</p>
    pub application_name: ::std::option::Option<::std::string::String>,
    /// <p>The application version deployed in this environment.</p>
    pub version_label: ::std::option::Option<::std::string::String>,
    /// <p> The name of the <code>SolutionStack</code> deployed with this environment. </p>
    pub solution_stack_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the platform version.</p>
    pub platform_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the configuration template used to originally launch this environment.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>Describes this environment.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.</p>
    pub endpoint_url: ::std::option::Option<::std::string::String>,
    /// <p>The URL to the CNAME for this environment.</p>
    pub cname: ::std::option::Option<::std::string::String>,
    /// <p>The creation date for this environment.</p>
    pub date_created: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last modified date for this environment.</p>
    pub date_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current operational status of the environment:</p>
    /// <ul>
    /// <li> <p> <code>Launching</code>: Environment is in the process of initial deployment.</p> </li>
    /// <li> <p> <code>Updating</code>: Environment is in the process of updating its configuration settings or application version.</p> </li>
    /// <li> <p> <code>Ready</code>: Environment is available to have an action performed on it, such as update or terminate.</p> </li>
    /// <li> <p> <code>Terminating</code>: Environment is in the shut-down process.</p> </li>
    /// <li> <p> <code>Terminated</code>: Environment is not running.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::EnvironmentStatus>,
    /// <p>Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel.</p>
    /// <p> <code>true:</code> There is an update in progress. </p>
    /// <p> <code>false:</code> There are no updates currently in progress. </p>
    pub abortable_operation_in_progress: ::std::option::Option<bool>,
    /// <p>Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:</p>
    /// <ul>
    /// <li> <p> <code>Red</code>: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.</p> </li>
    /// <li> <p> <code>Yellow</code>: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.</p> </li>
    /// <li> <p> <code>Green</code>: Indicates the environment is healthy and fully functional.</p> </li>
    /// <li> <p> <code>Grey</code>: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an <code>UpdateEnvironment</code> or <code>RestartEnvironment</code> request.</p> </li>
    /// </ul>
    /// <p> Default: <code>Grey</code> </p>
    pub health: ::std::option::Option<crate::types::EnvironmentHealth>,
    /// <p>Returns the health status of the application running in your environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health Colors and Statuses</a>.</p>
    pub health_status: ::std::option::Option<crate::types::EnvironmentHealthStatus>,
    /// <p>The description of the AWS resources used by this environment.</p>
    pub resources: ::std::option::Option<crate::types::EnvironmentResourcesDescription>,
    /// <p>Describes the current tier of this environment.</p>
    pub tier: ::std::option::Option<crate::types::EnvironmentTier>,
    /// <p>A list of links to other environments in the same group.</p>
    pub environment_links: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentLink>>,
    /// <p>The environment's Amazon Resource Name (ARN), which can be used in other API requests that require an ARN.</p>
    pub environment_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the environment's operations role. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
    pub operations_role: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateEnvironmentOutput {
    /// <p>The name of this environment.</p>
    pub fn environment_name(&self) -> ::std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p>The ID of this environment.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The name of the application associated with this environment.</p>
    pub fn application_name(&self) -> ::std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>The application version deployed in this environment.</p>
    pub fn version_label(&self) -> ::std::option::Option<&str> {
        self.version_label.as_deref()
    }
    /// <p> The name of the <code>SolutionStack</code> deployed with this environment. </p>
    pub fn solution_stack_name(&self) -> ::std::option::Option<&str> {
        self.solution_stack_name.as_deref()
    }
    /// <p>The ARN of the platform version.</p>
    pub fn platform_arn(&self) -> ::std::option::Option<&str> {
        self.platform_arn.as_deref()
    }
    /// <p>The name of the configuration template used to originally launch this environment.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>Describes this environment.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.</p>
    pub fn endpoint_url(&self) -> ::std::option::Option<&str> {
        self.endpoint_url.as_deref()
    }
    /// <p>The URL to the CNAME for this environment.</p>
    pub fn cname(&self) -> ::std::option::Option<&str> {
        self.cname.as_deref()
    }
    /// <p>The creation date for this environment.</p>
    pub fn date_created(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_created.as_ref()
    }
    /// <p>The last modified date for this environment.</p>
    pub fn date_updated(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_updated.as_ref()
    }
    /// <p>The current operational status of the environment:</p>
    /// <ul>
    /// <li> <p> <code>Launching</code>: Environment is in the process of initial deployment.</p> </li>
    /// <li> <p> <code>Updating</code>: Environment is in the process of updating its configuration settings or application version.</p> </li>
    /// <li> <p> <code>Ready</code>: Environment is available to have an action performed on it, such as update or terminate.</p> </li>
    /// <li> <p> <code>Terminating</code>: Environment is in the shut-down process.</p> </li>
    /// <li> <p> <code>Terminated</code>: Environment is not running.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::EnvironmentStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel.</p>
    /// <p> <code>true:</code> There is an update in progress. </p>
    /// <p> <code>false:</code> There are no updates currently in progress. </p>
    pub fn abortable_operation_in_progress(&self) -> ::std::option::Option<bool> {
        self.abortable_operation_in_progress
    }
    /// <p>Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:</p>
    /// <ul>
    /// <li> <p> <code>Red</code>: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.</p> </li>
    /// <li> <p> <code>Yellow</code>: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.</p> </li>
    /// <li> <p> <code>Green</code>: Indicates the environment is healthy and fully functional.</p> </li>
    /// <li> <p> <code>Grey</code>: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an <code>UpdateEnvironment</code> or <code>RestartEnvironment</code> request.</p> </li>
    /// </ul>
    /// <p> Default: <code>Grey</code> </p>
    pub fn health(&self) -> ::std::option::Option<&crate::types::EnvironmentHealth> {
        self.health.as_ref()
    }
    /// <p>Returns the health status of the application running in your environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health Colors and Statuses</a>.</p>
    pub fn health_status(&self) -> ::std::option::Option<&crate::types::EnvironmentHealthStatus> {
        self.health_status.as_ref()
    }
    /// <p>The description of the AWS resources used by this environment.</p>
    pub fn resources(&self) -> ::std::option::Option<&crate::types::EnvironmentResourcesDescription> {
        self.resources.as_ref()
    }
    /// <p>Describes the current tier of this environment.</p>
    pub fn tier(&self) -> ::std::option::Option<&crate::types::EnvironmentTier> {
        self.tier.as_ref()
    }
    /// <p>A list of links to other environments in the same group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.environment_links.is_none()`.
    pub fn environment_links(&self) -> &[crate::types::EnvironmentLink] {
        self.environment_links.as_deref().unwrap_or_default()
    }
    /// <p>The environment's Amazon Resource Name (ARN), which can be used in other API requests that require an ARN.</p>
    pub fn environment_arn(&self) -> ::std::option::Option<&str> {
        self.environment_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the environment's operations role. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
    pub fn operations_role(&self) -> ::std::option::Option<&str> {
        self.operations_role.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for CreateEnvironmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateEnvironmentOutput {
    /// Creates a new builder-style object to manufacture [`CreateEnvironmentOutput`](crate::operation::create_environment::CreateEnvironmentOutput).
    pub fn builder() -> crate::operation::create_environment::builders::CreateEnvironmentOutputBuilder {
        crate::operation::create_environment::builders::CreateEnvironmentOutputBuilder::default()
    }
}

/// A builder for [`CreateEnvironmentOutput`](crate::operation::create_environment::CreateEnvironmentOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateEnvironmentOutputBuilder {
    pub(crate) environment_name: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) application_name: ::std::option::Option<::std::string::String>,
    pub(crate) version_label: ::std::option::Option<::std::string::String>,
    pub(crate) solution_stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) platform_arn: ::std::option::Option<::std::string::String>,
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_url: ::std::option::Option<::std::string::String>,
    pub(crate) cname: ::std::option::Option<::std::string::String>,
    pub(crate) date_created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) date_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::EnvironmentStatus>,
    pub(crate) abortable_operation_in_progress: ::std::option::Option<bool>,
    pub(crate) health: ::std::option::Option<crate::types::EnvironmentHealth>,
    pub(crate) health_status: ::std::option::Option<crate::types::EnvironmentHealthStatus>,
    pub(crate) resources: ::std::option::Option<crate::types::EnvironmentResourcesDescription>,
    pub(crate) tier: ::std::option::Option<crate::types::EnvironmentTier>,
    pub(crate) environment_links: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentLink>>,
    pub(crate) environment_arn: ::std::option::Option<::std::string::String>,
    pub(crate) operations_role: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateEnvironmentOutputBuilder {
    /// <p>The name of this environment.</p>
    pub fn environment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this environment.</p>
    pub fn set_environment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p>The name of this environment.</p>
    pub fn get_environment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_name
    }
    /// <p>The ID of this environment.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of this environment.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The ID of this environment.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The name of the application associated with this environment.</p>
    pub fn application_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application associated with this environment.</p>
    pub fn set_application_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The name of the application associated with this environment.</p>
    pub fn get_application_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_name
    }
    /// <p>The application version deployed in this environment.</p>
    pub fn version_label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The application version deployed in this environment.</p>
    pub fn set_version_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_label = input;
        self
    }
    /// <p>The application version deployed in this environment.</p>
    pub fn get_version_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_label
    }
    /// <p> The name of the <code>SolutionStack</code> deployed with this environment. </p>
    pub fn solution_stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.solution_stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the <code>SolutionStack</code> deployed with this environment. </p>
    pub fn set_solution_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.solution_stack_name = input;
        self
    }
    /// <p> The name of the <code>SolutionStack</code> deployed with this environment. </p>
    pub fn get_solution_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.solution_stack_name
    }
    /// <p>The ARN of the platform version.</p>
    pub fn platform_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the platform version.</p>
    pub fn set_platform_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform_arn = input;
        self
    }
    /// <p>The ARN of the platform version.</p>
    pub fn get_platform_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform_arn
    }
    /// <p>The name of the configuration template used to originally launch this environment.</p>
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configuration template used to originally launch this environment.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the configuration template used to originally launch this environment.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>Describes this environment.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes this environment.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Describes this environment.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.</p>
    pub fn endpoint_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.</p>
    pub fn set_endpoint_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_url = input;
        self
    }
    /// <p>For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.</p>
    pub fn get_endpoint_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_url
    }
    /// <p>The URL to the CNAME for this environment.</p>
    pub fn cname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to the CNAME for this environment.</p>
    pub fn set_cname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cname = input;
        self
    }
    /// <p>The URL to the CNAME for this environment.</p>
    pub fn get_cname(&self) -> &::std::option::Option<::std::string::String> {
        &self.cname
    }
    /// <p>The creation date for this environment.</p>
    pub fn date_created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation date for this environment.</p>
    pub fn set_date_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_created = input;
        self
    }
    /// <p>The creation date for this environment.</p>
    pub fn get_date_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_created
    }
    /// <p>The last modified date for this environment.</p>
    pub fn date_updated(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_updated = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last modified date for this environment.</p>
    pub fn set_date_updated(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_updated = input;
        self
    }
    /// <p>The last modified date for this environment.</p>
    pub fn get_date_updated(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_updated
    }
    /// <p>The current operational status of the environment:</p>
    /// <ul>
    /// <li> <p> <code>Launching</code>: Environment is in the process of initial deployment.</p> </li>
    /// <li> <p> <code>Updating</code>: Environment is in the process of updating its configuration settings or application version.</p> </li>
    /// <li> <p> <code>Ready</code>: Environment is available to have an action performed on it, such as update or terminate.</p> </li>
    /// <li> <p> <code>Terminating</code>: Environment is in the shut-down process.</p> </li>
    /// <li> <p> <code>Terminated</code>: Environment is not running.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::EnvironmentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current operational status of the environment:</p>
    /// <ul>
    /// <li> <p> <code>Launching</code>: Environment is in the process of initial deployment.</p> </li>
    /// <li> <p> <code>Updating</code>: Environment is in the process of updating its configuration settings or application version.</p> </li>
    /// <li> <p> <code>Ready</code>: Environment is available to have an action performed on it, such as update or terminate.</p> </li>
    /// <li> <p> <code>Terminating</code>: Environment is in the shut-down process.</p> </li>
    /// <li> <p> <code>Terminated</code>: Environment is not running.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EnvironmentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current operational status of the environment:</p>
    /// <ul>
    /// <li> <p> <code>Launching</code>: Environment is in the process of initial deployment.</p> </li>
    /// <li> <p> <code>Updating</code>: Environment is in the process of updating its configuration settings or application version.</p> </li>
    /// <li> <p> <code>Ready</code>: Environment is available to have an action performed on it, such as update or terminate.</p> </li>
    /// <li> <p> <code>Terminating</code>: Environment is in the shut-down process.</p> </li>
    /// <li> <p> <code>Terminated</code>: Environment is not running.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EnvironmentStatus> {
        &self.status
    }
    /// <p>Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel.</p>
    /// <p> <code>true:</code> There is an update in progress. </p>
    /// <p> <code>false:</code> There are no updates currently in progress. </p>
    pub fn abortable_operation_in_progress(mut self, input: bool) -> Self {
        self.abortable_operation_in_progress = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel.</p>
    /// <p> <code>true:</code> There is an update in progress. </p>
    /// <p> <code>false:</code> There are no updates currently in progress. </p>
    pub fn set_abortable_operation_in_progress(mut self, input: ::std::option::Option<bool>) -> Self {
        self.abortable_operation_in_progress = input;
        self
    }
    /// <p>Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel.</p>
    /// <p> <code>true:</code> There is an update in progress. </p>
    /// <p> <code>false:</code> There are no updates currently in progress. </p>
    pub fn get_abortable_operation_in_progress(&self) -> &::std::option::Option<bool> {
        &self.abortable_operation_in_progress
    }
    /// <p>Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:</p>
    /// <ul>
    /// <li> <p> <code>Red</code>: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.</p> </li>
    /// <li> <p> <code>Yellow</code>: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.</p> </li>
    /// <li> <p> <code>Green</code>: Indicates the environment is healthy and fully functional.</p> </li>
    /// <li> <p> <code>Grey</code>: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an <code>UpdateEnvironment</code> or <code>RestartEnvironment</code> request.</p> </li>
    /// </ul>
    /// <p> Default: <code>Grey</code> </p>
    pub fn health(mut self, input: crate::types::EnvironmentHealth) -> Self {
        self.health = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:</p>
    /// <ul>
    /// <li> <p> <code>Red</code>: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.</p> </li>
    /// <li> <p> <code>Yellow</code>: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.</p> </li>
    /// <li> <p> <code>Green</code>: Indicates the environment is healthy and fully functional.</p> </li>
    /// <li> <p> <code>Grey</code>: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an <code>UpdateEnvironment</code> or <code>RestartEnvironment</code> request.</p> </li>
    /// </ul>
    /// <p> Default: <code>Grey</code> </p>
    pub fn set_health(mut self, input: ::std::option::Option<crate::types::EnvironmentHealth>) -> Self {
        self.health = input;
        self
    }
    /// <p>Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:</p>
    /// <ul>
    /// <li> <p> <code>Red</code>: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.</p> </li>
    /// <li> <p> <code>Yellow</code>: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.</p> </li>
    /// <li> <p> <code>Green</code>: Indicates the environment is healthy and fully functional.</p> </li>
    /// <li> <p> <code>Grey</code>: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an <code>UpdateEnvironment</code> or <code>RestartEnvironment</code> request.</p> </li>
    /// </ul>
    /// <p> Default: <code>Grey</code> </p>
    pub fn get_health(&self) -> &::std::option::Option<crate::types::EnvironmentHealth> {
        &self.health
    }
    /// <p>Returns the health status of the application running in your environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health Colors and Statuses</a>.</p>
    pub fn health_status(mut self, input: crate::types::EnvironmentHealthStatus) -> Self {
        self.health_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns the health status of the application running in your environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health Colors and Statuses</a>.</p>
    pub fn set_health_status(mut self, input: ::std::option::Option<crate::types::EnvironmentHealthStatus>) -> Self {
        self.health_status = input;
        self
    }
    /// <p>Returns the health status of the application running in your environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health Colors and Statuses</a>.</p>
    pub fn get_health_status(&self) -> &::std::option::Option<crate::types::EnvironmentHealthStatus> {
        &self.health_status
    }
    /// <p>The description of the AWS resources used by this environment.</p>
    pub fn resources(mut self, input: crate::types::EnvironmentResourcesDescription) -> Self {
        self.resources = ::std::option::Option::Some(input);
        self
    }
    /// <p>The description of the AWS resources used by this environment.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<crate::types::EnvironmentResourcesDescription>) -> Self {
        self.resources = input;
        self
    }
    /// <p>The description of the AWS resources used by this environment.</p>
    pub fn get_resources(&self) -> &::std::option::Option<crate::types::EnvironmentResourcesDescription> {
        &self.resources
    }
    /// <p>Describes the current tier of this environment.</p>
    pub fn tier(mut self, input: crate::types::EnvironmentTier) -> Self {
        self.tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the current tier of this environment.</p>
    pub fn set_tier(mut self, input: ::std::option::Option<crate::types::EnvironmentTier>) -> Self {
        self.tier = input;
        self
    }
    /// <p>Describes the current tier of this environment.</p>
    pub fn get_tier(&self) -> &::std::option::Option<crate::types::EnvironmentTier> {
        &self.tier
    }
    /// Appends an item to `environment_links`.
    ///
    /// To override the contents of this collection use [`set_environment_links`](Self::set_environment_links).
    ///
    /// <p>A list of links to other environments in the same group.</p>
    pub fn environment_links(mut self, input: crate::types::EnvironmentLink) -> Self {
        let mut v = self.environment_links.unwrap_or_default();
        v.push(input);
        self.environment_links = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of links to other environments in the same group.</p>
    pub fn set_environment_links(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentLink>>) -> Self {
        self.environment_links = input;
        self
    }
    /// <p>A list of links to other environments in the same group.</p>
    pub fn get_environment_links(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EnvironmentLink>> {
        &self.environment_links
    }
    /// <p>The environment's Amazon Resource Name (ARN), which can be used in other API requests that require an ARN.</p>
    pub fn environment_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The environment's Amazon Resource Name (ARN), which can be used in other API requests that require an ARN.</p>
    pub fn set_environment_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_arn = input;
        self
    }
    /// <p>The environment's Amazon Resource Name (ARN), which can be used in other API requests that require an ARN.</p>
    pub fn get_environment_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the environment's operations role. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
    pub fn operations_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operations_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment's operations role. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
    pub fn set_operations_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operations_role = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment's operations role. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p>
    pub fn get_operations_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.operations_role
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateEnvironmentOutput`](crate::operation::create_environment::CreateEnvironmentOutput).
    pub fn build(self) -> crate::operation::create_environment::CreateEnvironmentOutput {
        crate::operation::create_environment::CreateEnvironmentOutput {
            environment_name: self.environment_name,
            environment_id: self.environment_id,
            application_name: self.application_name,
            version_label: self.version_label,
            solution_stack_name: self.solution_stack_name,
            platform_arn: self.platform_arn,
            template_name: self.template_name,
            description: self.description,
            endpoint_url: self.endpoint_url,
            cname: self.cname,
            date_created: self.date_created,
            date_updated: self.date_updated,
            status: self.status,
            abortable_operation_in_progress: self.abortable_operation_in_progress,
            health: self.health,
            health_status: self.health_status,
            resources: self.resources,
            tier: self.tier,
            environment_links: self.environment_links,
            environment_arn: self.environment_arn,
            operations_role: self.operations_role,
            _request_id: self._request_id,
        }
    }
}
