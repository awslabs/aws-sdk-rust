// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A result message containing a list of completed and failed managed actions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEnvironmentManagedActionHistoryOutput {
    /// <p>A list of completed and failed managed actions.</p>
    #[doc(hidden)]
    pub managed_action_history_items:
        std::option::Option<std::vec::Vec<crate::types::ManagedActionHistoryItem>>,
    /// <p>A pagination token that you pass to <code>DescribeEnvironmentManagedActionHistory</code> to get the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeEnvironmentManagedActionHistoryOutput {
    /// <p>A list of completed and failed managed actions.</p>
    pub fn managed_action_history_items(
        &self,
    ) -> std::option::Option<&[crate::types::ManagedActionHistoryItem]> {
        self.managed_action_history_items.as_deref()
    }
    /// <p>A pagination token that you pass to <code>DescribeEnvironmentManagedActionHistory</code> to get the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeEnvironmentManagedActionHistoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEnvironmentManagedActionHistoryOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEnvironmentManagedActionHistoryOutput`](crate::operation::describe_environment_managed_action_history::DescribeEnvironmentManagedActionHistoryOutput).
    pub fn builder() -> crate::operation::describe_environment_managed_action_history::builders::DescribeEnvironmentManagedActionHistoryOutputBuilder{
        crate::operation::describe_environment_managed_action_history::builders::DescribeEnvironmentManagedActionHistoryOutputBuilder::default()
    }
}

/// A builder for [`DescribeEnvironmentManagedActionHistoryOutput`](crate::operation::describe_environment_managed_action_history::DescribeEnvironmentManagedActionHistoryOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEnvironmentManagedActionHistoryOutputBuilder {
    pub(crate) managed_action_history_items:
        std::option::Option<std::vec::Vec<crate::types::ManagedActionHistoryItem>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeEnvironmentManagedActionHistoryOutputBuilder {
    /// Appends an item to `managed_action_history_items`.
    ///
    /// To override the contents of this collection use [`set_managed_action_history_items`](Self::set_managed_action_history_items).
    ///
    /// <p>A list of completed and failed managed actions.</p>
    pub fn managed_action_history_items(
        mut self,
        input: crate::types::ManagedActionHistoryItem,
    ) -> Self {
        let mut v = self.managed_action_history_items.unwrap_or_default();
        v.push(input);
        self.managed_action_history_items = Some(v);
        self
    }
    /// <p>A list of completed and failed managed actions.</p>
    pub fn set_managed_action_history_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ManagedActionHistoryItem>>,
    ) -> Self {
        self.managed_action_history_items = input;
        self
    }
    /// <p>A pagination token that you pass to <code>DescribeEnvironmentManagedActionHistory</code> to get the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A pagination token that you pass to <code>DescribeEnvironmentManagedActionHistory</code> to get the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEnvironmentManagedActionHistoryOutput`](crate::operation::describe_environment_managed_action_history::DescribeEnvironmentManagedActionHistoryOutput).
    pub fn build(self) -> crate::operation::describe_environment_managed_action_history::DescribeEnvironmentManagedActionHistoryOutput{
        crate::operation::describe_environment_managed_action_history::DescribeEnvironmentManagedActionHistoryOutput {
            managed_action_history_items: self.managed_action_history_items
            ,
            next_token: self.next_token
            ,
            _request_id: self._request_id,
        }
    }
}
