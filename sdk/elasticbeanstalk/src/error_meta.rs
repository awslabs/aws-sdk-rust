// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    CodeBuildNotInServiceRegionException(crate::error::CodeBuildNotInServiceRegionException),
    ElasticBeanstalkServiceException(crate::error::ElasticBeanstalkServiceException),
    InsufficientPrivilegesException(crate::error::InsufficientPrivilegesException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ManagedActionInvalidStateException(crate::error::ManagedActionInvalidStateException),
    OperationInProgressException(crate::error::OperationInProgressException),
    PlatformVersionStillReferencedException(crate::error::PlatformVersionStillReferencedException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    ResourceTypeNotSupportedException(crate::error::ResourceTypeNotSupportedException),
    S3LocationNotInServiceRegionException(crate::error::S3LocationNotInServiceRegionException),
    S3SubscriptionRequiredException(crate::error::S3SubscriptionRequiredException),
    SourceBundleDeletionException(crate::error::SourceBundleDeletionException),
    TooManyApplicationVersionsException(crate::error::TooManyApplicationVersionsException),
    TooManyApplicationsException(crate::error::TooManyApplicationsException),
    TooManyBucketsException(crate::error::TooManyBucketsException),
    TooManyConfigurationTemplatesException(crate::error::TooManyConfigurationTemplatesException),
    TooManyEnvironmentsException(crate::error::TooManyEnvironmentsException),
    TooManyPlatformsException(crate::error::TooManyPlatformsException),
    TooManyTagsException(crate::error::TooManyTagsException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::CodeBuildNotInServiceRegionException(inner) => inner.fmt(f),
            Error::ElasticBeanstalkServiceException(inner) => inner.fmt(f),
            Error::InsufficientPrivilegesException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::ManagedActionInvalidStateException(inner) => inner.fmt(f),
            Error::OperationInProgressException(inner) => inner.fmt(f),
            Error::PlatformVersionStillReferencedException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceTypeNotSupportedException(inner) => inner.fmt(f),
            Error::S3LocationNotInServiceRegionException(inner) => inner.fmt(f),
            Error::S3SubscriptionRequiredException(inner) => inner.fmt(f),
            Error::SourceBundleDeletionException(inner) => inner.fmt(f),
            Error::TooManyApplicationVersionsException(inner) => inner.fmt(f),
            Error::TooManyApplicationsException(inner) => inner.fmt(f),
            Error::TooManyBucketsException(inner) => inner.fmt(f),
            Error::TooManyConfigurationTemplatesException(inner) => inner.fmt(f),
            Error::TooManyEnvironmentsException(inner) => inner.fmt(f),
            Error::TooManyPlatformsException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AbortEnvironmentUpdateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AbortEnvironmentUpdateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AbortEnvironmentUpdateErrorKind::InsufficientPrivilegesException(
                    inner,
                ) => Error::InsufficientPrivilegesException(inner),
                crate::error::AbortEnvironmentUpdateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ApplyEnvironmentManagedActionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ApplyEnvironmentManagedActionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ApplyEnvironmentManagedActionErrorKind::ElasticBeanstalkServiceException(inner) => Error::ElasticBeanstalkServiceException(inner),
                crate::error::ApplyEnvironmentManagedActionErrorKind::ManagedActionInvalidStateException(inner) => Error::ManagedActionInvalidStateException(inner),
                crate::error::ApplyEnvironmentManagedActionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateEnvironmentOperationsRoleError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssociateEnvironmentOperationsRoleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AssociateEnvironmentOperationsRoleErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::AssociateEnvironmentOperationsRoleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CheckDNSAvailabilityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CheckDNSAvailabilityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CheckDNSAvailabilityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ComposeEnvironmentsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ComposeEnvironmentsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ComposeEnvironmentsErrorKind::InsufficientPrivilegesException(
                    inner,
                ) => Error::InsufficientPrivilegesException(inner),
                crate::error::ComposeEnvironmentsErrorKind::TooManyEnvironmentsException(inner) => {
                    Error::TooManyEnvironmentsException(inner)
                }
                crate::error::ComposeEnvironmentsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateApplicationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateApplicationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateApplicationErrorKind::TooManyApplicationsException(inner) => {
                    Error::TooManyApplicationsException(inner)
                }
                crate::error::CreateApplicationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateApplicationVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateApplicationVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateApplicationVersionErrorKind::CodeBuildNotInServiceRegionException(inner) => Error::CodeBuildNotInServiceRegionException(inner),
                crate::error::CreateApplicationVersionErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::CreateApplicationVersionErrorKind::S3LocationNotInServiceRegionException(inner) => Error::S3LocationNotInServiceRegionException(inner),
                crate::error::CreateApplicationVersionErrorKind::TooManyApplicationsException(inner) => Error::TooManyApplicationsException(inner),
                crate::error::CreateApplicationVersionErrorKind::TooManyApplicationVersionsException(inner) => Error::TooManyApplicationVersionsException(inner),
                crate::error::CreateApplicationVersionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateConfigurationTemplateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateConfigurationTemplateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateConfigurationTemplateErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::CreateConfigurationTemplateErrorKind::TooManyBucketsException(inner) => Error::TooManyBucketsException(inner),
                crate::error::CreateConfigurationTemplateErrorKind::TooManyConfigurationTemplatesException(inner) => Error::TooManyConfigurationTemplatesException(inner),
                crate::error::CreateConfigurationTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEnvironmentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateEnvironmentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEnvironmentErrorKind::InsufficientPrivilegesException(
                    inner,
                ) => Error::InsufficientPrivilegesException(inner),
                crate::error::CreateEnvironmentErrorKind::TooManyEnvironmentsException(inner) => {
                    Error::TooManyEnvironmentsException(inner)
                }
                crate::error::CreateEnvironmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreatePlatformVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreatePlatformVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreatePlatformVersionErrorKind::ElasticBeanstalkServiceException(
                    inner,
                ) => Error::ElasticBeanstalkServiceException(inner),
                crate::error::CreatePlatformVersionErrorKind::InsufficientPrivilegesException(
                    inner,
                ) => Error::InsufficientPrivilegesException(inner),
                crate::error::CreatePlatformVersionErrorKind::TooManyPlatformsException(inner) => {
                    Error::TooManyPlatformsException(inner)
                }
                crate::error::CreatePlatformVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateStorageLocationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateStorageLocationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateStorageLocationErrorKind::InsufficientPrivilegesException(
                    inner,
                ) => Error::InsufficientPrivilegesException(inner),
                crate::error::CreateStorageLocationErrorKind::S3SubscriptionRequiredException(
                    inner,
                ) => Error::S3SubscriptionRequiredException(inner),
                crate::error::CreateStorageLocationErrorKind::TooManyBucketsException(inner) => {
                    Error::TooManyBucketsException(inner)
                }
                crate::error::CreateStorageLocationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteApplicationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteApplicationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteApplicationErrorKind::OperationInProgressException(inner) => {
                    Error::OperationInProgressException(inner)
                }
                crate::error::DeleteApplicationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteApplicationVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteApplicationVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteApplicationVersionErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::DeleteApplicationVersionErrorKind::OperationInProgressException(inner) => Error::OperationInProgressException(inner),
                crate::error::DeleteApplicationVersionErrorKind::S3LocationNotInServiceRegionException(inner) => Error::S3LocationNotInServiceRegionException(inner),
                crate::error::DeleteApplicationVersionErrorKind::SourceBundleDeletionException(inner) => Error::SourceBundleDeletionException(inner),
                crate::error::DeleteApplicationVersionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteConfigurationTemplateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteConfigurationTemplateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteConfigurationTemplateErrorKind::OperationInProgressException(inner) => Error::OperationInProgressException(inner),
                crate::error::DeleteConfigurationTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEnvironmentConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteEnvironmentConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteEnvironmentConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePlatformVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeletePlatformVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeletePlatformVersionErrorKind::ElasticBeanstalkServiceException(inner) => Error::ElasticBeanstalkServiceException(inner),
                crate::error::DeletePlatformVersionErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::DeletePlatformVersionErrorKind::OperationInProgressException(inner) => Error::OperationInProgressException(inner),
                crate::error::DeletePlatformVersionErrorKind::PlatformVersionStillReferencedException(inner) => Error::PlatformVersionStillReferencedException(inner),
                crate::error::DeletePlatformVersionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeAccountAttributesErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::DescribeAccountAttributesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeApplicationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeApplicationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeApplicationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeApplicationVersionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeApplicationVersionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeApplicationVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeConfigurationOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeConfigurationOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeConfigurationOptionsErrorKind::TooManyBucketsException(
                    inner,
                ) => Error::TooManyBucketsException(inner),
                crate::error::DescribeConfigurationOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeConfigurationSettingsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeConfigurationSettingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeConfigurationSettingsErrorKind::TooManyBucketsException(
                    inner,
                ) => Error::TooManyBucketsException(inner),
                crate::error::DescribeConfigurationSettingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEnvironmentHealthError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEnvironmentHealthError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeEnvironmentHealthErrorKind::ElasticBeanstalkServiceException(inner) => Error::ElasticBeanstalkServiceException(inner),
                crate::error::DescribeEnvironmentHealthErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
                crate::error::DescribeEnvironmentHealthErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEnvironmentManagedActionHistoryError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeEnvironmentManagedActionHistoryError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeEnvironmentManagedActionHistoryErrorKind::ElasticBeanstalkServiceException(inner) => Error::ElasticBeanstalkServiceException(inner),
                crate::error::DescribeEnvironmentManagedActionHistoryErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEnvironmentManagedActionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEnvironmentManagedActionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeEnvironmentManagedActionsErrorKind::ElasticBeanstalkServiceException(inner) => Error::ElasticBeanstalkServiceException(inner),
                crate::error::DescribeEnvironmentManagedActionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEnvironmentResourcesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEnvironmentResourcesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeEnvironmentResourcesErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::DescribeEnvironmentResourcesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEnvironmentsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEnvironmentsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEnvironmentsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEventsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstancesHealthError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInstancesHealthError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeInstancesHealthErrorKind::ElasticBeanstalkServiceException(inner) => Error::ElasticBeanstalkServiceException(inner),
                crate::error::DescribeInstancesHealthErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
                crate::error::DescribeInstancesHealthErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePlatformVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribePlatformVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribePlatformVersionErrorKind::ElasticBeanstalkServiceException(inner) => Error::ElasticBeanstalkServiceException(inner),
                crate::error::DescribePlatformVersionErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::DescribePlatformVersionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateEnvironmentOperationsRoleError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DisassociateEnvironmentOperationsRoleError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DisassociateEnvironmentOperationsRoleErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::DisassociateEnvironmentOperationsRoleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAvailableSolutionStacksError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListAvailableSolutionStacksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAvailableSolutionStacksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPlatformBranchesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPlatformBranchesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPlatformBranchesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPlatformVersionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPlatformVersionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPlatformVersionsErrorKind::ElasticBeanstalkServiceException(
                    inner,
                ) => Error::ElasticBeanstalkServiceException(inner),
                crate::error::ListPlatformVersionsErrorKind::InsufficientPrivilegesException(
                    inner,
                ) => Error::InsufficientPrivilegesException(inner),
                crate::error::ListPlatformVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::InsufficientPrivilegesException(
                    inner,
                ) => Error::InsufficientPrivilegesException(inner),
                crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::ResourceTypeNotSupportedException(
                    inner,
                ) => Error::ResourceTypeNotSupportedException(inner),
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RebuildEnvironmentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RebuildEnvironmentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RebuildEnvironmentErrorKind::InsufficientPrivilegesException(
                    inner,
                ) => Error::InsufficientPrivilegesException(inner),
                crate::error::RebuildEnvironmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RequestEnvironmentInfoError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RequestEnvironmentInfoError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RequestEnvironmentInfoErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestartAppServerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RestartAppServerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RestartAppServerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RetrieveEnvironmentInfoError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RetrieveEnvironmentInfoError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RetrieveEnvironmentInfoErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SwapEnvironmentCNAMEsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SwapEnvironmentCNAMEsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SwapEnvironmentCNAMEsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TerminateEnvironmentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TerminateEnvironmentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TerminateEnvironmentErrorKind::InsufficientPrivilegesException(
                    inner,
                ) => Error::InsufficientPrivilegesException(inner),
                crate::error::TerminateEnvironmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateApplicationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateApplicationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateApplicationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateApplicationResourceLifecycleError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateApplicationResourceLifecycleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateApplicationResourceLifecycleErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::UpdateApplicationResourceLifecycleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateApplicationVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateApplicationVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateApplicationVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateConfigurationTemplateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateConfigurationTemplateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateConfigurationTemplateErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::UpdateConfigurationTemplateErrorKind::TooManyBucketsException(inner) => Error::TooManyBucketsException(inner),
                crate::error::UpdateConfigurationTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateEnvironmentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateEnvironmentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateEnvironmentErrorKind::InsufficientPrivilegesException(
                    inner,
                ) => Error::InsufficientPrivilegesException(inner),
                crate::error::UpdateEnvironmentErrorKind::TooManyBucketsException(inner) => {
                    Error::TooManyBucketsException(inner)
                }
                crate::error::UpdateEnvironmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTagsForResourceErrorKind::InsufficientPrivilegesException(
                    inner,
                ) => Error::InsufficientPrivilegesException(inner),
                crate::error::UpdateTagsForResourceErrorKind::OperationInProgressException(
                    inner,
                ) => Error::OperationInProgressException(inner),
                crate::error::UpdateTagsForResourceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::UpdateTagsForResourceErrorKind::ResourceTypeNotSupportedException(
                    inner,
                ) => Error::ResourceTypeNotSupportedException(inner),
                crate::error::UpdateTagsForResourceErrorKind::TooManyTagsException(inner) => {
                    Error::TooManyTagsException(inner)
                }
                crate::error::UpdateTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ValidateConfigurationSettingsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ValidateConfigurationSettingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ValidateConfigurationSettingsErrorKind::InsufficientPrivilegesException(inner) => Error::InsufficientPrivilegesException(inner),
                crate::error::ValidateConfigurationSettingsErrorKind::TooManyBucketsException(inner) => Error::TooManyBucketsException(inner),
                crate::error::ValidateConfigurationSettingsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
