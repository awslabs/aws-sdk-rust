// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_activate_event_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ActivateEventSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_replay_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelReplayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.replay_name {
        object.key("ReplayName").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_api_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApiDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.name {
        object.key("Name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.description {
        object.key("Description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.connection_arn {
        object.key("ConnectionArn").string(var_5.as_str());
    }
    if let Some(var_6) = &input.invocation_endpoint {
        object.key("InvocationEndpoint").string(var_6.as_str());
    }
    if let Some(var_7) = &input.http_method {
        object.key("HttpMethod").string(var_7.as_str());
    }
    if let Some(var_8) = &input.invocation_rate_limit_per_second {
        object.key("InvocationRateLimitPerSecond").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_archive_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateArchiveInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.archive_name {
        object.key("ArchiveName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.event_source_arn {
        object.key("EventSourceArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.description {
        object.key("Description").string(var_11.as_str());
    }
    if let Some(var_12) = &input.event_pattern {
        object.key("EventPattern").string(var_12.as_str());
    }
    if let Some(var_13) = &input.retention_days {
        object.key("RetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.name {
        object.key("Name").string(var_14.as_str());
    }
    if let Some(var_15) = &input.description {
        object.key("Description").string(var_15.as_str());
    }
    if let Some(var_16) = &input.authorization_type {
        object.key("AuthorizationType").string(var_16.as_str());
    }
    if let Some(var_17) = &input.auth_parameters {
        let mut object_18 = object.key("AuthParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_create_connection_auth_request_parameters(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19.as_str());
    }
    if let Some(var_20) = &input.description {
        object.key("Description").string(var_20.as_str());
    }
    if let Some(var_21) = &input.routing_config {
        let mut object_22 = object.key("RoutingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_routing_config(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.replication_config {
        let mut object_24 = object.key("ReplicationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_replication_config(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    if let Some(var_25) = &input.event_buses {
        let mut array_26 = object.key("EventBuses").start_array();
        for item_27 in var_25 {
            {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_endpoint_event_bus(
                    &mut object_28,
                    item_27,
                )?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.role_arn {
        object.key("RoleArn").string(var_29.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_event_bus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEventBusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.name {
        object.key("Name").string(var_30.as_str());
    }
    if let Some(var_31) = &input.event_source_name {
        object.key("EventSourceName").string(var_31.as_str());
    }
    if let Some(var_32) = &input.tags {
        let mut array_33 = object.key("Tags").start_array();
        for item_34 in var_32 {
            {
                let mut object_35 = array_33.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_35, item_34)?;
                object_35.finish();
            }
        }
        array_33.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partner_event_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartnerEventSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.name {
        object.key("Name").string(var_36.as_str());
    }
    if let Some(var_37) = &input.account {
        object.key("Account").string(var_37.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deactivate_event_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeactivateEventSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.name {
        object.key("Name").string(var_38.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deauthorize_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeauthorizeConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.name {
        object.key("Name").string(var_39.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_api_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteApiDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.name {
        object.key("Name").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_archive_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteArchiveInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.archive_name {
        object.key("ArchiveName").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.name {
        object.key("Name").string(var_42.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.name {
        object.key("Name").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_event_bus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEventBusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.name {
        object.key("Name").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partner_event_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartnerEventSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.name {
        object.key("Name").string(var_45.as_str());
    }
    if let Some(var_46) = &input.account {
        object.key("Account").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.name {
        object.key("Name").string(var_47.as_str());
    }
    if let Some(var_48) = &input.event_bus_name {
        object.key("EventBusName").string(var_48.as_str());
    }
    if input.force {
        object.key("Force").boolean(input.force);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_api_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApiDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.name {
        object.key("Name").string(var_49.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_archive_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeArchiveInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.archive_name {
        object.key("ArchiveName").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.name {
        object.key("Name").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.name {
        object.key("Name").string(var_52.as_str());
    }
    if let Some(var_53) = &input.home_region {
        object.key("HomeRegion").string(var_53.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_event_bus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventBusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.name {
        object.key("Name").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_event_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.name {
        object.key("Name").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_partner_event_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePartnerEventSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.name {
        object.key("Name").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replay_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.replay_name {
        object.key("ReplayName").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.name {
        object.key("Name").string(var_58.as_str());
    }
    if let Some(var_59) = &input.event_bus_name {
        object.key("EventBusName").string(var_59.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.name {
        object.key("Name").string(var_60.as_str());
    }
    if let Some(var_61) = &input.event_bus_name {
        object.key("EventBusName").string(var_61.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.name {
        object.key("Name").string(var_62.as_str());
    }
    if let Some(var_63) = &input.event_bus_name {
        object.key("EventBusName").string(var_63.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_api_destinations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListApiDestinationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.name_prefix {
        object.key("NamePrefix").string(var_64.as_str());
    }
    if let Some(var_65) = &input.connection_arn {
        object.key("ConnectionArn").string(var_65.as_str());
    }
    if let Some(var_66) = &input.next_token {
        object.key("NextToken").string(var_66.as_str());
    }
    if let Some(var_67) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_67).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_archives_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListArchivesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.name_prefix {
        object.key("NamePrefix").string(var_68.as_str());
    }
    if let Some(var_69) = &input.event_source_arn {
        object.key("EventSourceArn").string(var_69.as_str());
    }
    if let Some(var_70) = &input.state {
        object.key("State").string(var_70.as_str());
    }
    if let Some(var_71) = &input.next_token {
        object.key("NextToken").string(var_71.as_str());
    }
    if let Some(var_72) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.name_prefix {
        object.key("NamePrefix").string(var_73.as_str());
    }
    if let Some(var_74) = &input.connection_state {
        object.key("ConnectionState").string(var_74.as_str());
    }
    if let Some(var_75) = &input.next_token {
        object.key("NextToken").string(var_75.as_str());
    }
    if let Some(var_76) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_76).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.name_prefix {
        object.key("NamePrefix").string(var_77.as_str());
    }
    if let Some(var_78) = &input.home_region {
        object.key("HomeRegion").string(var_78.as_str());
    }
    if let Some(var_79) = &input.next_token {
        object.key("NextToken").string(var_79.as_str());
    }
    if let Some(var_80) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_80).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_event_buses_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEventBusesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.name_prefix {
        object.key("NamePrefix").string(var_81.as_str());
    }
    if let Some(var_82) = &input.next_token {
        object.key("NextToken").string(var_82.as_str());
    }
    if let Some(var_83) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_83).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_event_sources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEventSourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.name_prefix {
        object.key("NamePrefix").string(var_84.as_str());
    }
    if let Some(var_85) = &input.next_token {
        object.key("NextToken").string(var_85.as_str());
    }
    if let Some(var_86) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_86).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_partner_event_source_accounts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPartnerEventSourceAccountsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.event_source_name {
        object.key("EventSourceName").string(var_87.as_str());
    }
    if let Some(var_88) = &input.next_token {
        object.key("NextToken").string(var_88.as_str());
    }
    if let Some(var_89) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_89).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_partner_event_sources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPartnerEventSourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.name_prefix {
        object.key("NamePrefix").string(var_90.as_str());
    }
    if let Some(var_91) = &input.next_token {
        object.key("NextToken").string(var_91.as_str());
    }
    if let Some(var_92) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_92).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_replays_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListReplaysInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.name_prefix {
        object.key("NamePrefix").string(var_93.as_str());
    }
    if let Some(var_94) = &input.state {
        object.key("State").string(var_94.as_str());
    }
    if let Some(var_95) = &input.event_source_arn {
        object.key("EventSourceArn").string(var_95.as_str());
    }
    if let Some(var_96) = &input.next_token {
        object.key("NextToken").string(var_96.as_str());
    }
    if let Some(var_97) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_rule_names_by_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRuleNamesByTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.target_arn {
        object.key("TargetArn").string(var_98.as_str());
    }
    if let Some(var_99) = &input.event_bus_name {
        object.key("EventBusName").string(var_99.as_str());
    }
    if let Some(var_100) = &input.next_token {
        object.key("NextToken").string(var_100.as_str());
    }
    if let Some(var_101) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_101).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_rules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.name_prefix {
        object.key("NamePrefix").string(var_102.as_str());
    }
    if let Some(var_103) = &input.event_bus_name {
        object.key("EventBusName").string(var_103.as_str());
    }
    if let Some(var_104) = &input.next_token {
        object.key("NextToken").string(var_104.as_str());
    }
    if let Some(var_105) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_105).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.resource_arn {
        object.key("ResourceARN").string(var_106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_targets_by_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTargetsByRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.rule {
        object.key("Rule").string(var_107.as_str());
    }
    if let Some(var_108) = &input.event_bus_name {
        object.key("EventBusName").string(var_108.as_str());
    }
    if let Some(var_109) = &input.next_token {
        object.key("NextToken").string(var_109.as_str());
    }
    if let Some(var_110) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEventsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.entries {
        let mut array_112 = object.key("Entries").start_array();
        for item_113 in var_111 {
            {
                let mut object_114 = array_112.value().start_object();
                crate::json_ser::serialize_structure_crate_model_put_events_request_entry(
                    &mut object_114,
                    item_113,
                )?;
                object_114.finish();
            }
        }
        array_112.finish();
    }
    if let Some(var_115) = &input.endpoint_id {
        object.key("EndpointId").string(var_115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_partner_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPartnerEventsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.entries {
        let mut array_117 = object.key("Entries").start_array();
        for item_118 in var_116 {
            {
                let mut object_119 = array_117.value().start_object();
                crate::json_ser::serialize_structure_crate_model_put_partner_events_request_entry(
                    &mut object_119,
                    item_118,
                )?;
                object_119.finish();
            }
        }
        array_117.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_permission_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPermissionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.event_bus_name {
        object.key("EventBusName").string(var_120.as_str());
    }
    if let Some(var_121) = &input.action {
        object.key("Action").string(var_121.as_str());
    }
    if let Some(var_122) = &input.principal {
        object.key("Principal").string(var_122.as_str());
    }
    if let Some(var_123) = &input.statement_id {
        object.key("StatementId").string(var_123.as_str());
    }
    if let Some(var_124) = &input.condition {
        let mut object_125 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_condition(&mut object_125, var_124)?;
        object_125.finish();
    }
    if let Some(var_126) = &input.policy {
        object.key("Policy").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.name {
        object.key("Name").string(var_127.as_str());
    }
    if let Some(var_128) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_128.as_str());
    }
    if let Some(var_129) = &input.event_pattern {
        object.key("EventPattern").string(var_129.as_str());
    }
    if let Some(var_130) = &input.state {
        object.key("State").string(var_130.as_str());
    }
    if let Some(var_131) = &input.description {
        object.key("Description").string(var_131.as_str());
    }
    if let Some(var_132) = &input.role_arn {
        object.key("RoleArn").string(var_132.as_str());
    }
    if let Some(var_133) = &input.tags {
        let mut array_134 = object.key("Tags").start_array();
        for item_135 in var_133 {
            {
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_136, item_135)?;
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.event_bus_name {
        object.key("EventBusName").string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.rule {
        object.key("Rule").string(var_138.as_str());
    }
    if let Some(var_139) = &input.event_bus_name {
        object.key("EventBusName").string(var_139.as_str());
    }
    if let Some(var_140) = &input.targets {
        let mut array_141 = object.key("Targets").start_array();
        for item_142 in var_140 {
            {
                let mut object_143 = array_141.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_143, item_142)?;
                object_143.finish();
            }
        }
        array_141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_permission_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemovePermissionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.statement_id {
        object.key("StatementId").string(var_144.as_str());
    }
    if input.remove_all_permissions {
        object
            .key("RemoveAllPermissions")
            .boolean(input.remove_all_permissions);
    }
    if let Some(var_145) = &input.event_bus_name {
        object.key("EventBusName").string(var_145.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.rule {
        object.key("Rule").string(var_146.as_str());
    }
    if let Some(var_147) = &input.event_bus_name {
        object.key("EventBusName").string(var_147.as_str());
    }
    if let Some(var_148) = &input.ids {
        let mut array_149 = object.key("Ids").start_array();
        for item_150 in var_148 {
            {
                array_149.value().string(item_150.as_str());
            }
        }
        array_149.finish();
    }
    if input.force {
        object.key("Force").boolean(input.force);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_replay_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartReplayInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.replay_name {
        object.key("ReplayName").string(var_151.as_str());
    }
    if let Some(var_152) = &input.description {
        object.key("Description").string(var_152.as_str());
    }
    if let Some(var_153) = &input.event_source_arn {
        object.key("EventSourceArn").string(var_153.as_str());
    }
    if let Some(var_154) = &input.event_start_time {
        object
            .key("EventStartTime")
            .date_time(var_154, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_155) = &input.event_end_time {
        object
            .key("EventEndTime")
            .date_time(var_155, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_156) = &input.destination {
        let mut object_157 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_replay_destination(
            &mut object_157,
            var_156,
        )?;
        object_157.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.resource_arn {
        object.key("ResourceARN").string(var_158.as_str());
    }
    if let Some(var_159) = &input.tags {
        let mut array_160 = object.key("Tags").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_162, item_161)?;
                object_162.finish();
            }
        }
        array_160.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_event_pattern_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestEventPatternInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.event_pattern {
        object.key("EventPattern").string(var_163.as_str());
    }
    if let Some(var_164) = &input.event {
        object.key("Event").string(var_164.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.resource_arn {
        object.key("ResourceARN").string(var_165.as_str());
    }
    if let Some(var_166) = &input.tag_keys {
        let mut array_167 = object.key("TagKeys").start_array();
        for item_168 in var_166 {
            {
                array_167.value().string(item_168.as_str());
            }
        }
        array_167.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_api_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateApiDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.name {
        object.key("Name").string(var_169.as_str());
    }
    if let Some(var_170) = &input.description {
        object.key("Description").string(var_170.as_str());
    }
    if let Some(var_171) = &input.connection_arn {
        object.key("ConnectionArn").string(var_171.as_str());
    }
    if let Some(var_172) = &input.invocation_endpoint {
        object.key("InvocationEndpoint").string(var_172.as_str());
    }
    if let Some(var_173) = &input.http_method {
        object.key("HttpMethod").string(var_173.as_str());
    }
    if let Some(var_174) = &input.invocation_rate_limit_per_second {
        object.key("InvocationRateLimitPerSecond").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_174).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_archive_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateArchiveInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.archive_name {
        object.key("ArchiveName").string(var_175.as_str());
    }
    if let Some(var_176) = &input.description {
        object.key("Description").string(var_176.as_str());
    }
    if let Some(var_177) = &input.event_pattern {
        object.key("EventPattern").string(var_177.as_str());
    }
    if let Some(var_178) = &input.retention_days {
        object.key("RetentionDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_178).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.name {
        object.key("Name").string(var_179.as_str());
    }
    if let Some(var_180) = &input.description {
        object.key("Description").string(var_180.as_str());
    }
    if let Some(var_181) = &input.authorization_type {
        object.key("AuthorizationType").string(var_181.as_str());
    }
    if let Some(var_182) = &input.auth_parameters {
        let mut object_183 = object.key("AuthParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_update_connection_auth_request_parameters(
            &mut object_183,
            var_182,
        )?;
        object_183.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.name {
        object.key("Name").string(var_184.as_str());
    }
    if let Some(var_185) = &input.description {
        object.key("Description").string(var_185.as_str());
    }
    if let Some(var_186) = &input.routing_config {
        let mut object_187 = object.key("RoutingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_routing_config(&mut object_187, var_186)?;
        object_187.finish();
    }
    if let Some(var_188) = &input.replication_config {
        let mut object_189 = object.key("ReplicationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_replication_config(
            &mut object_189,
            var_188,
        )?;
        object_189.finish();
    }
    if let Some(var_190) = &input.event_buses {
        let mut array_191 = object.key("EventBuses").start_array();
        for item_192 in var_190 {
            {
                let mut object_193 = array_191.value().start_object();
                crate::json_ser::serialize_structure_crate_model_endpoint_event_bus(
                    &mut object_193,
                    item_192,
                )?;
                object_193.finish();
            }
        }
        array_191.finish();
    }
    if let Some(var_194) = &input.role_arn {
        object.key("RoleArn").string(var_194.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_connection_auth_request_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateConnectionAuthRequestParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.basic_auth_parameters {
        let mut object_196 = object.key("BasicAuthParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_create_connection_basic_auth_request_parameters(&mut object_196, var_195)?;
        object_196.finish();
    }
    if let Some(var_197) = &input.o_auth_parameters {
        let mut object_198 = object.key("OAuthParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_create_connection_o_auth_request_parameters(&mut object_198, var_197)?;
        object_198.finish();
    }
    if let Some(var_199) = &input.api_key_auth_parameters {
        let mut object_200 = object.key("ApiKeyAuthParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_create_connection_api_key_auth_request_parameters(&mut object_200, var_199)?;
        object_200.finish();
    }
    if let Some(var_201) = &input.invocation_http_parameters {
        let mut object_202 = object.key("InvocationHttpParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_http_parameters(
            &mut object_202,
            var_201,
        )?;
        object_202.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoutingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_203) = &input.failover_config {
        let mut object_204 = object.key("FailoverConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_failover_config(&mut object_204, var_203)?;
        object_204.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replication_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.state {
        object.key("State").string(var_205.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_event_bus(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointEventBus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.event_bus_arn {
        object.key("EventBusArn").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.key {
        object.key("Key").string(var_207.as_str());
    }
    if let Some(var_208) = &input.value {
        object.key("Value").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_put_events_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PutEventsRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.time {
        object
            .key("Time")
            .date_time(var_209, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_210) = &input.source {
        object.key("Source").string(var_210.as_str());
    }
    if let Some(var_211) = &input.resources {
        let mut array_212 = object.key("Resources").start_array();
        for item_213 in var_211 {
            {
                array_212.value().string(item_213.as_str());
            }
        }
        array_212.finish();
    }
    if let Some(var_214) = &input.detail_type {
        object.key("DetailType").string(var_214.as_str());
    }
    if let Some(var_215) = &input.detail {
        object.key("Detail").string(var_215.as_str());
    }
    if let Some(var_216) = &input.event_bus_name {
        object.key("EventBusName").string(var_216.as_str());
    }
    if let Some(var_217) = &input.trace_header {
        object.key("TraceHeader").string(var_217.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_put_partner_events_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PutPartnerEventsRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_218) = &input.time {
        object
            .key("Time")
            .date_time(var_218, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_219) = &input.source {
        object.key("Source").string(var_219.as_str());
    }
    if let Some(var_220) = &input.resources {
        let mut array_221 = object.key("Resources").start_array();
        for item_222 in var_220 {
            {
                array_221.value().string(item_222.as_str());
            }
        }
        array_221.finish();
    }
    if let Some(var_223) = &input.detail_type {
        object.key("DetailType").string(var_223.as_str());
    }
    if let Some(var_224) = &input.detail {
        object.key("Detail").string(var_224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.r#type {
        object.key("Type").string(var_225.as_str());
    }
    if let Some(var_226) = &input.key {
        object.key("Key").string(var_226.as_str());
    }
    if let Some(var_227) = &input.value {
        object.key("Value").string(var_227.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.id {
        object.key("Id").string(var_228.as_str());
    }
    if let Some(var_229) = &input.arn {
        object.key("Arn").string(var_229.as_str());
    }
    if let Some(var_230) = &input.role_arn {
        object.key("RoleArn").string(var_230.as_str());
    }
    if let Some(var_231) = &input.input {
        object.key("Input").string(var_231.as_str());
    }
    if let Some(var_232) = &input.input_path {
        object.key("InputPath").string(var_232.as_str());
    }
    if let Some(var_233) = &input.input_transformer {
        let mut object_234 = object.key("InputTransformer").start_object();
        crate::json_ser::serialize_structure_crate_model_input_transformer(
            &mut object_234,
            var_233,
        )?;
        object_234.finish();
    }
    if let Some(var_235) = &input.kinesis_parameters {
        let mut object_236 = object.key("KinesisParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_parameters(
            &mut object_236,
            var_235,
        )?;
        object_236.finish();
    }
    if let Some(var_237) = &input.run_command_parameters {
        let mut object_238 = object.key("RunCommandParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_run_command_parameters(
            &mut object_238,
            var_237,
        )?;
        object_238.finish();
    }
    if let Some(var_239) = &input.ecs_parameters {
        let mut object_240 = object.key("EcsParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_ecs_parameters(&mut object_240, var_239)?;
        object_240.finish();
    }
    if let Some(var_241) = &input.batch_parameters {
        let mut object_242 = object.key("BatchParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_parameters(
            &mut object_242,
            var_241,
        )?;
        object_242.finish();
    }
    if let Some(var_243) = &input.sqs_parameters {
        let mut object_244 = object.key("SqsParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_sqs_parameters(&mut object_244, var_243)?;
        object_244.finish();
    }
    if let Some(var_245) = &input.http_parameters {
        let mut object_246 = object.key("HttpParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_http_parameters(&mut object_246, var_245)?;
        object_246.finish();
    }
    if let Some(var_247) = &input.redshift_data_parameters {
        let mut object_248 = object.key("RedshiftDataParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_data_parameters(
            &mut object_248,
            var_247,
        )?;
        object_248.finish();
    }
    if let Some(var_249) = &input.sage_maker_pipeline_parameters {
        let mut object_250 = object.key("SageMakerPipelineParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_sage_maker_pipeline_parameters(
            &mut object_250,
            var_249,
        )?;
        object_250.finish();
    }
    if let Some(var_251) = &input.dead_letter_config {
        let mut object_252 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_dead_letter_config(
            &mut object_252,
            var_251,
        )?;
        object_252.finish();
    }
    if let Some(var_253) = &input.retry_policy {
        let mut object_254 = object.key("RetryPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_policy(&mut object_254, var_253)?;
        object_254.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replay_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplayDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.arn {
        object.key("Arn").string(var_255.as_str());
    }
    if let Some(var_256) = &input.filter_arns {
        let mut array_257 = object.key("FilterArns").start_array();
        for item_258 in var_256 {
            {
                array_257.value().string(item_258.as_str());
            }
        }
        array_257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_connection_auth_request_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateConnectionAuthRequestParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.basic_auth_parameters {
        let mut object_260 = object.key("BasicAuthParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_update_connection_basic_auth_request_parameters(&mut object_260, var_259)?;
        object_260.finish();
    }
    if let Some(var_261) = &input.o_auth_parameters {
        let mut object_262 = object.key("OAuthParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_update_connection_o_auth_request_parameters(&mut object_262, var_261)?;
        object_262.finish();
    }
    if let Some(var_263) = &input.api_key_auth_parameters {
        let mut object_264 = object.key("ApiKeyAuthParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_update_connection_api_key_auth_request_parameters(&mut object_264, var_263)?;
        object_264.finish();
    }
    if let Some(var_265) = &input.invocation_http_parameters {
        let mut object_266 = object.key("InvocationHttpParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_http_parameters(
            &mut object_266,
            var_265,
        )?;
        object_266.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_connection_basic_auth_request_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateConnectionBasicAuthRequestParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_267) = &input.username {
        object.key("Username").string(var_267.as_str());
    }
    if let Some(var_268) = &input.password {
        object.key("Password").string(var_268.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_connection_o_auth_request_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateConnectionOAuthRequestParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.client_parameters {
        let mut object_270 = object.key("ClientParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_create_connection_o_auth_client_request_parameters(&mut object_270, var_269)?;
        object_270.finish();
    }
    if let Some(var_271) = &input.authorization_endpoint {
        object.key("AuthorizationEndpoint").string(var_271.as_str());
    }
    if let Some(var_272) = &input.http_method {
        object.key("HttpMethod").string(var_272.as_str());
    }
    if let Some(var_273) = &input.o_auth_http_parameters {
        let mut object_274 = object.key("OAuthHttpParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_http_parameters(
            &mut object_274,
            var_273,
        )?;
        object_274.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_connection_api_key_auth_request_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateConnectionApiKeyAuthRequestParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.api_key_name {
        object.key("ApiKeyName").string(var_275.as_str());
    }
    if let Some(var_276) = &input.api_key_value {
        object.key("ApiKeyValue").string(var_276.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_http_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionHttpParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.header_parameters {
        let mut array_278 = object.key("HeaderParameters").start_array();
        for item_279 in var_277 {
            {
                let mut object_280 = array_278.value().start_object();
                crate::json_ser::serialize_structure_crate_model_connection_header_parameter(
                    &mut object_280,
                    item_279,
                )?;
                object_280.finish();
            }
        }
        array_278.finish();
    }
    if let Some(var_281) = &input.query_string_parameters {
        let mut array_282 = object.key("QueryStringParameters").start_array();
        for item_283 in var_281 {
            {
                let mut object_284 = array_282.value().start_object();
                crate::json_ser::serialize_structure_crate_model_connection_query_string_parameter(
                    &mut object_284,
                    item_283,
                )?;
                object_284.finish();
            }
        }
        array_282.finish();
    }
    if let Some(var_285) = &input.body_parameters {
        let mut array_286 = object.key("BodyParameters").start_array();
        for item_287 in var_285 {
            {
                let mut object_288 = array_286.value().start_object();
                crate::json_ser::serialize_structure_crate_model_connection_body_parameter(
                    &mut object_288,
                    item_287,
                )?;
                object_288.finish();
            }
        }
        array_286.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_failover_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FailoverConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.primary {
        let mut object_290 = object.key("Primary").start_object();
        crate::json_ser::serialize_structure_crate_model_primary(&mut object_290, var_289)?;
        object_290.finish();
    }
    if let Some(var_291) = &input.secondary {
        let mut object_292 = object.key("Secondary").start_object();
        crate::json_ser::serialize_structure_crate_model_secondary(&mut object_292, var_291)?;
        object_292.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_transformer(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputTransformer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.input_paths_map {
        let mut object_294 = object.key("InputPathsMap").start_object();
        for (key_295, value_296) in var_293 {
            {
                object_294.key(key_295).string(value_296.as_str());
            }
        }
        object_294.finish();
    }
    if let Some(var_297) = &input.input_template {
        object.key("InputTemplate").string(var_297.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.partition_key_path {
        object.key("PartitionKeyPath").string(var_298.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_run_command_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RunCommandParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.run_command_targets {
        let mut array_300 = object.key("RunCommandTargets").start_array();
        for item_301 in var_299 {
            {
                let mut object_302 = array_300.value().start_object();
                crate::json_ser::serialize_structure_crate_model_run_command_target(
                    &mut object_302,
                    item_301,
                )?;
                object_302.finish();
            }
        }
        array_300.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ecs_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EcsParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.task_definition_arn {
        object.key("TaskDefinitionArn").string(var_303.as_str());
    }
    if let Some(var_304) = &input.task_count {
        object.key("TaskCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_304).into()),
        );
    }
    if let Some(var_305) = &input.launch_type {
        object.key("LaunchType").string(var_305.as_str());
    }
    if let Some(var_306) = &input.network_configuration {
        let mut object_307 = object.key("NetworkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_network_configuration(
            &mut object_307,
            var_306,
        )?;
        object_307.finish();
    }
    if let Some(var_308) = &input.platform_version {
        object.key("PlatformVersion").string(var_308.as_str());
    }
    if let Some(var_309) = &input.group {
        object.key("Group").string(var_309.as_str());
    }
    if let Some(var_310) = &input.capacity_provider_strategy {
        let mut array_311 = object.key("CapacityProviderStrategy").start_array();
        for item_312 in var_310 {
            {
                let mut object_313 = array_311.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capacity_provider_strategy_item(
                    &mut object_313,
                    item_312,
                )?;
                object_313.finish();
            }
        }
        array_311.finish();
    }
    if input.enable_ecs_managed_tags {
        object
            .key("EnableECSManagedTags")
            .boolean(input.enable_ecs_managed_tags);
    }
    if input.enable_execute_command {
        object
            .key("EnableExecuteCommand")
            .boolean(input.enable_execute_command);
    }
    if let Some(var_314) = &input.placement_constraints {
        let mut array_315 = object.key("PlacementConstraints").start_array();
        for item_316 in var_314 {
            {
                let mut object_317 = array_315.value().start_object();
                crate::json_ser::serialize_structure_crate_model_placement_constraint(
                    &mut object_317,
                    item_316,
                )?;
                object_317.finish();
            }
        }
        array_315.finish();
    }
    if let Some(var_318) = &input.placement_strategy {
        let mut array_319 = object.key("PlacementStrategy").start_array();
        for item_320 in var_318 {
            {
                let mut object_321 = array_319.value().start_object();
                crate::json_ser::serialize_structure_crate_model_placement_strategy(
                    &mut object_321,
                    item_320,
                )?;
                object_321.finish();
            }
        }
        array_319.finish();
    }
    if let Some(var_322) = &input.propagate_tags {
        object.key("PropagateTags").string(var_322.as_str());
    }
    if let Some(var_323) = &input.reference_id {
        object.key("ReferenceId").string(var_323.as_str());
    }
    if let Some(var_324) = &input.tags {
        let mut array_325 = object.key("Tags").start_array();
        for item_326 in var_324 {
            {
                let mut object_327 = array_325.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_327, item_326)?;
                object_327.finish();
            }
        }
        array_325.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_328) = &input.job_definition {
        object.key("JobDefinition").string(var_328.as_str());
    }
    if let Some(var_329) = &input.job_name {
        object.key("JobName").string(var_329.as_str());
    }
    if let Some(var_330) = &input.array_properties {
        let mut object_331 = object.key("ArrayProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_array_properties(
            &mut object_331,
            var_330,
        )?;
        object_331.finish();
    }
    if let Some(var_332) = &input.retry_strategy {
        let mut object_333 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_retry_strategy(
            &mut object_333,
            var_332,
        )?;
        object_333.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sqs_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqsParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.message_group_id {
        object.key("MessageGroupId").string(var_334.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.path_parameter_values {
        let mut array_336 = object.key("PathParameterValues").start_array();
        for item_337 in var_335 {
            {
                array_336.value().string(item_337.as_str());
            }
        }
        array_336.finish();
    }
    if let Some(var_338) = &input.header_parameters {
        let mut object_339 = object.key("HeaderParameters").start_object();
        for (key_340, value_341) in var_338 {
            {
                object_339.key(key_340).string(value_341.as_str());
            }
        }
        object_339.finish();
    }
    if let Some(var_342) = &input.query_string_parameters {
        let mut object_343 = object.key("QueryStringParameters").start_object();
        for (key_344, value_345) in var_342 {
            {
                object_343.key(key_344).string(value_345.as_str());
            }
        }
        object_343.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_data_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDataParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_346.as_str());
    }
    if let Some(var_347) = &input.database {
        object.key("Database").string(var_347.as_str());
    }
    if let Some(var_348) = &input.db_user {
        object.key("DbUser").string(var_348.as_str());
    }
    if let Some(var_349) = &input.sql {
        object.key("Sql").string(var_349.as_str());
    }
    if let Some(var_350) = &input.statement_name {
        object.key("StatementName").string(var_350.as_str());
    }
    if input.with_event {
        object.key("WithEvent").boolean(input.with_event);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sage_maker_pipeline_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SageMakerPipelineParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_351) = &input.pipeline_parameter_list {
        let mut array_352 = object.key("PipelineParameterList").start_array();
        for item_353 in var_351 {
            {
                let mut object_354 = array_352.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sage_maker_pipeline_parameter(
                    &mut object_354,
                    item_353,
                )?;
                object_354.finish();
            }
        }
        array_352.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dead_letter_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeadLetterConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_355) = &input.arn {
        object.key("Arn").string(var_355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retry_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_356).into()),
        );
    }
    if let Some(var_357) = &input.maximum_event_age_in_seconds {
        object.key("MaximumEventAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_357).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_connection_basic_auth_request_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateConnectionBasicAuthRequestParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_358) = &input.username {
        object.key("Username").string(var_358.as_str());
    }
    if let Some(var_359) = &input.password {
        object.key("Password").string(var_359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_connection_o_auth_request_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateConnectionOAuthRequestParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.client_parameters {
        let mut object_361 = object.key("ClientParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_update_connection_o_auth_client_request_parameters(&mut object_361, var_360)?;
        object_361.finish();
    }
    if let Some(var_362) = &input.authorization_endpoint {
        object.key("AuthorizationEndpoint").string(var_362.as_str());
    }
    if let Some(var_363) = &input.http_method {
        object.key("HttpMethod").string(var_363.as_str());
    }
    if let Some(var_364) = &input.o_auth_http_parameters {
        let mut object_365 = object.key("OAuthHttpParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_http_parameters(
            &mut object_365,
            var_364,
        )?;
        object_365.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_connection_api_key_auth_request_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateConnectionApiKeyAuthRequestParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.api_key_name {
        object.key("ApiKeyName").string(var_366.as_str());
    }
    if let Some(var_367) = &input.api_key_value {
        object.key("ApiKeyValue").string(var_367.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_connection_o_auth_client_request_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateConnectionOAuthClientRequestParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.client_id {
        object.key("ClientID").string(var_368.as_str());
    }
    if let Some(var_369) = &input.client_secret {
        object.key("ClientSecret").string(var_369.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_header_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionHeaderParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.key {
        object.key("Key").string(var_370.as_str());
    }
    if let Some(var_371) = &input.value {
        object.key("Value").string(var_371.as_str());
    }
    if input.is_value_secret {
        object.key("IsValueSecret").boolean(input.is_value_secret);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_query_string_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionQueryStringParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.key {
        object.key("Key").string(var_372.as_str());
    }
    if let Some(var_373) = &input.value {
        object.key("Value").string(var_373.as_str());
    }
    if input.is_value_secret {
        object.key("IsValueSecret").boolean(input.is_value_secret);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_body_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionBodyParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.key {
        object.key("Key").string(var_374.as_str());
    }
    if let Some(var_375) = &input.value {
        object.key("Value").string(var_375.as_str());
    }
    if input.is_value_secret {
        object.key("IsValueSecret").boolean(input.is_value_secret);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_primary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Primary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_376) = &input.health_check {
        object.key("HealthCheck").string(var_376.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_secondary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Secondary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.route {
        object.key("Route").string(var_377.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_run_command_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RunCommandTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_378) = &input.key {
        object.key("Key").string(var_378.as_str());
    }
    if let Some(var_379) = &input.values {
        let mut array_380 = object.key("Values").start_array();
        for item_381 in var_379 {
            {
                array_380.value().string(item_381.as_str());
            }
        }
        array_380.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.awsvpc_configuration {
        let mut object_383 = object.key("awsvpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_vpc_configuration(
            &mut object_383,
            var_382,
        )?;
        object_383.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_provider_strategy_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityProviderStrategyItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.capacity_provider {
        object.key("capacityProvider").string(var_384.as_str());
    }
    if input.weight != 0 {
        object.key("weight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.weight).into()),
        );
    }
    if input.base != 0 {
        object.key("base").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.base).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_placement_constraint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementConstraint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_385) = &input.r#type {
        object.key("type").string(var_385.as_str());
    }
    if let Some(var_386) = &input.expression {
        object.key("expression").string(var_386.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_placement_strategy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementStrategy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.r#type {
        object.key("type").string(var_387.as_str());
    }
    if let Some(var_388) = &input.field {
        object.key("field").string(var_388.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_array_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchArrayProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.size != 0 {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_retry_strategy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchRetryStrategy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.attempts != 0 {
        object.key("Attempts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.attempts).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sage_maker_pipeline_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SageMakerPipelineParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.name {
        object.key("Name").string(var_389.as_str());
    }
    if let Some(var_390) = &input.value {
        object.key("Value").string(var_390.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_connection_o_auth_client_request_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateConnectionOAuthClientRequestParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.client_id {
        object.key("ClientID").string(var_391.as_str());
    }
    if let Some(var_392) = &input.client_secret {
        object.key("ClientSecret").string(var_392.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_vpc_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsVpcConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_393) = &input.subnets {
        let mut array_394 = object.key("Subnets").start_array();
        for item_395 in var_393 {
            {
                array_394.value().string(item_395.as_str());
            }
        }
        array_394.finish();
    }
    if let Some(var_396) = &input.security_groups {
        let mut array_397 = object.key("SecurityGroups").start_array();
        for item_398 in var_396 {
            {
                array_397.value().string(item_398.as_str());
            }
        }
        array_397.finish();
    }
    if let Some(var_399) = &input.assign_public_ip {
        object.key("AssignPublicIp").string(var_399.as_str());
    }
    Ok(())
}
