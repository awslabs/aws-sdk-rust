// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the authorization parameters for the connection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConnectionAuthRequestParameters {
    /// <p>A <code>CreateConnectionBasicAuthRequestParameters</code> object that contains the Basic authorization parameters to use for the connection.</p>
    #[doc(hidden)]
    pub basic_auth_parameters:
        std::option::Option<crate::types::CreateConnectionBasicAuthRequestParameters>,
    /// <p>A <code>CreateConnectionOAuthRequestParameters</code> object that contains the OAuth authorization parameters to use for the connection.</p>
    #[doc(hidden)]
    pub o_auth_parameters:
        std::option::Option<crate::types::CreateConnectionOAuthRequestParameters>,
    /// <p>A <code>CreateConnectionApiKeyAuthRequestParameters</code> object that contains the API key authorization parameters to use for the connection.</p>
    #[doc(hidden)]
    pub api_key_auth_parameters:
        std::option::Option<crate::types::CreateConnectionApiKeyAuthRequestParameters>,
    /// <p>A <code>ConnectionHttpParameters</code> object that contains the API key authorization parameters to use for the connection. Note that if you include additional parameters for the target of a rule via <code>HttpParameters</code>, including query strings, the parameters added for the connection take precedence.</p>
    #[doc(hidden)]
    pub invocation_http_parameters: std::option::Option<crate::types::ConnectionHttpParameters>,
}
impl CreateConnectionAuthRequestParameters {
    /// <p>A <code>CreateConnectionBasicAuthRequestParameters</code> object that contains the Basic authorization parameters to use for the connection.</p>
    pub fn basic_auth_parameters(
        &self,
    ) -> std::option::Option<&crate::types::CreateConnectionBasicAuthRequestParameters> {
        self.basic_auth_parameters.as_ref()
    }
    /// <p>A <code>CreateConnectionOAuthRequestParameters</code> object that contains the OAuth authorization parameters to use for the connection.</p>
    pub fn o_auth_parameters(
        &self,
    ) -> std::option::Option<&crate::types::CreateConnectionOAuthRequestParameters> {
        self.o_auth_parameters.as_ref()
    }
    /// <p>A <code>CreateConnectionApiKeyAuthRequestParameters</code> object that contains the API key authorization parameters to use for the connection.</p>
    pub fn api_key_auth_parameters(
        &self,
    ) -> std::option::Option<&crate::types::CreateConnectionApiKeyAuthRequestParameters> {
        self.api_key_auth_parameters.as_ref()
    }
    /// <p>A <code>ConnectionHttpParameters</code> object that contains the API key authorization parameters to use for the connection. Note that if you include additional parameters for the target of a rule via <code>HttpParameters</code>, including query strings, the parameters added for the connection take precedence.</p>
    pub fn invocation_http_parameters(
        &self,
    ) -> std::option::Option<&crate::types::ConnectionHttpParameters> {
        self.invocation_http_parameters.as_ref()
    }
}
impl CreateConnectionAuthRequestParameters {
    /// Creates a new builder-style object to manufacture [`CreateConnectionAuthRequestParameters`](crate::types::CreateConnectionAuthRequestParameters).
    pub fn builder() -> crate::types::builders::CreateConnectionAuthRequestParametersBuilder {
        crate::types::builders::CreateConnectionAuthRequestParametersBuilder::default()
    }
}

/// A builder for [`CreateConnectionAuthRequestParameters`](crate::types::CreateConnectionAuthRequestParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateConnectionAuthRequestParametersBuilder {
    pub(crate) basic_auth_parameters:
        std::option::Option<crate::types::CreateConnectionBasicAuthRequestParameters>,
    pub(crate) o_auth_parameters:
        std::option::Option<crate::types::CreateConnectionOAuthRequestParameters>,
    pub(crate) api_key_auth_parameters:
        std::option::Option<crate::types::CreateConnectionApiKeyAuthRequestParameters>,
    pub(crate) invocation_http_parameters:
        std::option::Option<crate::types::ConnectionHttpParameters>,
}
impl CreateConnectionAuthRequestParametersBuilder {
    /// <p>A <code>CreateConnectionBasicAuthRequestParameters</code> object that contains the Basic authorization parameters to use for the connection.</p>
    pub fn basic_auth_parameters(
        mut self,
        input: crate::types::CreateConnectionBasicAuthRequestParameters,
    ) -> Self {
        self.basic_auth_parameters = Some(input);
        self
    }
    /// <p>A <code>CreateConnectionBasicAuthRequestParameters</code> object that contains the Basic authorization parameters to use for the connection.</p>
    pub fn set_basic_auth_parameters(
        mut self,
        input: std::option::Option<crate::types::CreateConnectionBasicAuthRequestParameters>,
    ) -> Self {
        self.basic_auth_parameters = input;
        self
    }
    /// <p>A <code>CreateConnectionOAuthRequestParameters</code> object that contains the OAuth authorization parameters to use for the connection.</p>
    pub fn o_auth_parameters(
        mut self,
        input: crate::types::CreateConnectionOAuthRequestParameters,
    ) -> Self {
        self.o_auth_parameters = Some(input);
        self
    }
    /// <p>A <code>CreateConnectionOAuthRequestParameters</code> object that contains the OAuth authorization parameters to use for the connection.</p>
    pub fn set_o_auth_parameters(
        mut self,
        input: std::option::Option<crate::types::CreateConnectionOAuthRequestParameters>,
    ) -> Self {
        self.o_auth_parameters = input;
        self
    }
    /// <p>A <code>CreateConnectionApiKeyAuthRequestParameters</code> object that contains the API key authorization parameters to use for the connection.</p>
    pub fn api_key_auth_parameters(
        mut self,
        input: crate::types::CreateConnectionApiKeyAuthRequestParameters,
    ) -> Self {
        self.api_key_auth_parameters = Some(input);
        self
    }
    /// <p>A <code>CreateConnectionApiKeyAuthRequestParameters</code> object that contains the API key authorization parameters to use for the connection.</p>
    pub fn set_api_key_auth_parameters(
        mut self,
        input: std::option::Option<crate::types::CreateConnectionApiKeyAuthRequestParameters>,
    ) -> Self {
        self.api_key_auth_parameters = input;
        self
    }
    /// <p>A <code>ConnectionHttpParameters</code> object that contains the API key authorization parameters to use for the connection. Note that if you include additional parameters for the target of a rule via <code>HttpParameters</code>, including query strings, the parameters added for the connection take precedence.</p>
    pub fn invocation_http_parameters(
        mut self,
        input: crate::types::ConnectionHttpParameters,
    ) -> Self {
        self.invocation_http_parameters = Some(input);
        self
    }
    /// <p>A <code>ConnectionHttpParameters</code> object that contains the API key authorization parameters to use for the connection. Note that if you include additional parameters for the target of a rule via <code>HttpParameters</code>, including query strings, the parameters added for the connection take precedence.</p>
    pub fn set_invocation_http_parameters(
        mut self,
        input: std::option::Option<crate::types::ConnectionHttpParameters>,
    ) -> Self {
        self.invocation_http_parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateConnectionAuthRequestParameters`](crate::types::CreateConnectionAuthRequestParameters).
    pub fn build(self) -> crate::types::CreateConnectionAuthRequestParameters {
        crate::types::CreateConnectionAuthRequestParameters {
            basic_auth_parameters: self.basic_auth_parameters,
            o_auth_parameters: self.o_auth_parameters,
            api_key_auth_parameters: self.api_key_auth_parameters,
            invocation_http_parameters: self.invocation_http_parameters,
        }
    }
}
