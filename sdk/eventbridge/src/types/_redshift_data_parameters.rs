// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>These are custom parameters to be used when the target is a Amazon Redshift cluster or Redshift Serverless workgroup to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RedshiftDataParameters {
    /// <p>The name or ARN of the secret that enables access to the database. Required when authenticating using Amazon Web Services Secrets Manager.</p>
    pub secret_manager_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database. Required when authenticating using temporary credentials.</p>
    pub database: ::std::string::String,
    /// <p>The database user name. Required when authenticating using temporary credentials.</p>
    /// <p>Do not provide this parameter when connecting to a Redshift Serverless workgroup.</p>
    pub db_user: ::std::option::Option<::std::string::String>,
    /// <p>The SQL statement text to run.</p>
    pub sql: ::std::option::Option<::std::string::String>,
    /// <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query.</p>
    pub statement_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether to send an event back to EventBridge after the SQL statement runs.</p>
    pub with_event: bool,
    /// A list of SQLs.
    pub sqls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RedshiftDataParameters {
    /// <p>The name or ARN of the secret that enables access to the database. Required when authenticating using Amazon Web Services Secrets Manager.</p>
    pub fn secret_manager_arn(&self) -> ::std::option::Option<&str> {
        self.secret_manager_arn.as_deref()
    }
    /// <p>The name of the database. Required when authenticating using temporary credentials.</p>
    pub fn database(&self) -> &str {
        use std::ops::Deref;
        self.database.deref()
    }
    /// <p>The database user name. Required when authenticating using temporary credentials.</p>
    /// <p>Do not provide this parameter when connecting to a Redshift Serverless workgroup.</p>
    pub fn db_user(&self) -> ::std::option::Option<&str> {
        self.db_user.as_deref()
    }
    /// <p>The SQL statement text to run.</p>
    pub fn sql(&self) -> ::std::option::Option<&str> {
        self.sql.as_deref()
    }
    /// <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query.</p>
    pub fn statement_name(&self) -> ::std::option::Option<&str> {
        self.statement_name.as_deref()
    }
    /// <p>Indicates whether to send an event back to EventBridge after the SQL statement runs.</p>
    pub fn with_event(&self) -> bool {
        self.with_event
    }
    /// A list of SQLs.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sqls.is_none()`.
    pub fn sqls(&self) -> &[::std::string::String] {
        self.sqls.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for RedshiftDataParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RedshiftDataParameters");
        formatter.field("secret_manager_arn", &self.secret_manager_arn);
        formatter.field("database", &self.database);
        formatter.field("db_user", &self.db_user);
        formatter.field("sql", &"*** Sensitive Data Redacted ***");
        formatter.field("statement_name", &self.statement_name);
        formatter.field("with_event", &self.with_event);
        formatter.field("sqls", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RedshiftDataParameters {
    /// Creates a new builder-style object to manufacture [`RedshiftDataParameters`](crate::types::RedshiftDataParameters).
    pub fn builder() -> crate::types::builders::RedshiftDataParametersBuilder {
        crate::types::builders::RedshiftDataParametersBuilder::default()
    }
}

/// A builder for [`RedshiftDataParameters`](crate::types::RedshiftDataParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RedshiftDataParametersBuilder {
    pub(crate) secret_manager_arn: ::std::option::Option<::std::string::String>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
    pub(crate) db_user: ::std::option::Option<::std::string::String>,
    pub(crate) sql: ::std::option::Option<::std::string::String>,
    pub(crate) statement_name: ::std::option::Option<::std::string::String>,
    pub(crate) with_event: ::std::option::Option<bool>,
    pub(crate) sqls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RedshiftDataParametersBuilder {
    /// <p>The name or ARN of the secret that enables access to the database. Required when authenticating using Amazon Web Services Secrets Manager.</p>
    pub fn secret_manager_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_manager_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or ARN of the secret that enables access to the database. Required when authenticating using Amazon Web Services Secrets Manager.</p>
    pub fn set_secret_manager_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_manager_arn = input;
        self
    }
    /// <p>The name or ARN of the secret that enables access to the database. Required when authenticating using Amazon Web Services Secrets Manager.</p>
    pub fn get_secret_manager_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_manager_arn
    }
    /// <p>The name of the database. Required when authenticating using temporary credentials.</p>
    /// This field is required.
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database. Required when authenticating using temporary credentials.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The name of the database. Required when authenticating using temporary credentials.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// <p>The database user name. Required when authenticating using temporary credentials.</p>
    /// <p>Do not provide this parameter when connecting to a Redshift Serverless workgroup.</p>
    pub fn db_user(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_user = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database user name. Required when authenticating using temporary credentials.</p>
    /// <p>Do not provide this parameter when connecting to a Redshift Serverless workgroup.</p>
    pub fn set_db_user(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_user = input;
        self
    }
    /// <p>The database user name. Required when authenticating using temporary credentials.</p>
    /// <p>Do not provide this parameter when connecting to a Redshift Serverless workgroup.</p>
    pub fn get_db_user(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_user
    }
    /// <p>The SQL statement text to run.</p>
    pub fn sql(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sql = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SQL statement text to run.</p>
    pub fn set_sql(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sql = input;
        self
    }
    /// <p>The SQL statement text to run.</p>
    pub fn get_sql(&self) -> &::std::option::Option<::std::string::String> {
        &self.sql
    }
    /// <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query.</p>
    pub fn statement_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query.</p>
    pub fn set_statement_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement_name = input;
        self
    }
    /// <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query.</p>
    pub fn get_statement_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement_name
    }
    /// <p>Indicates whether to send an event back to EventBridge after the SQL statement runs.</p>
    pub fn with_event(mut self, input: bool) -> Self {
        self.with_event = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to send an event back to EventBridge after the SQL statement runs.</p>
    pub fn set_with_event(mut self, input: ::std::option::Option<bool>) -> Self {
        self.with_event = input;
        self
    }
    /// <p>Indicates whether to send an event back to EventBridge after the SQL statement runs.</p>
    pub fn get_with_event(&self) -> &::std::option::Option<bool> {
        &self.with_event
    }
    /// Appends an item to `sqls`.
    ///
    /// To override the contents of this collection use [`set_sqls`](Self::set_sqls).
    ///
    /// A list of SQLs.
    pub fn sqls(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.sqls.unwrap_or_default();
        v.push(input.into());
        self.sqls = ::std::option::Option::Some(v);
        self
    }
    /// A list of SQLs.
    pub fn set_sqls(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.sqls = input;
        self
    }
    /// A list of SQLs.
    pub fn get_sqls(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.sqls
    }
    /// Consumes the builder and constructs a [`RedshiftDataParameters`](crate::types::RedshiftDataParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`database`](crate::types::builders::RedshiftDataParametersBuilder::database)
    pub fn build(self) -> ::std::result::Result<crate::types::RedshiftDataParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RedshiftDataParameters {
            secret_manager_arn: self.secret_manager_arn,
            database: self.database.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database",
                    "database was not specified but it is required when building RedshiftDataParameters",
                )
            })?,
            db_user: self.db_user,
            sql: self.sql,
            statement_name: self.statement_name,
            with_event: self.with_event.unwrap_or_default(),
            sqls: self.sqls,
        })
    }
}
impl ::std::fmt::Debug for RedshiftDataParametersBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RedshiftDataParametersBuilder");
        formatter.field("secret_manager_arn", &self.secret_manager_arn);
        formatter.field("database", &self.database);
        formatter.field("db_user", &self.db_user);
        formatter.field("sql", &"*** Sensitive Data Redacted ***");
        formatter.field("statement_name", &self.statement_name);
        formatter.field("with_event", &self.with_event);
        formatter.field("sqls", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
