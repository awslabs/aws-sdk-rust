// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A global endpoint used to improve your application's availability by making it regional-fault tolerant. For more information about global endpoints, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-global-endpoints.html">Making applications Regional-fault tolerant with global endpoints and event replication</a> in the Amazon EventBridge User Guide.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Endpoint {
    /// <p>The name of the endpoint.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description for the endpoint.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the endpoint.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The routing configuration of the endpoint.</p>
    pub routing_config: ::std::option::Option<crate::types::RoutingConfig>,
    /// <p>Whether event replication was enabled or disabled for this endpoint. The default state is <code>ENABLED</code> which means you must supply a <code>RoleArn</code>. If you don't have a <code>RoleArn</code> or you don't want event replication enabled, set the state to <code>DISABLED</code>.</p>
    pub replication_config: ::std::option::Option<crate::types::ReplicationConfig>,
    /// <p>The event buses being used by the endpoint.</p>
    pub event_buses: ::std::option::Option<::std::vec::Vec<crate::types::EndpointEventBus>>,
    /// <p>The ARN of the role used by event replication for the endpoint.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is <code>abcde.veo</code>.</p>
    pub endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the endpoint.</p>
    pub endpoint_url: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the endpoint.</p>
    pub state: ::std::option::Option<crate::types::EndpointState>,
    /// <p>The reason the endpoint is in its current state.</p>
    pub state_reason: ::std::option::Option<::std::string::String>,
    /// <p>The time the endpoint was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time the endpoint was modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Endpoint {
    /// <p>The name of the endpoint.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description for the endpoint.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ARN of the endpoint.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The routing configuration of the endpoint.</p>
    pub fn routing_config(&self) -> ::std::option::Option<&crate::types::RoutingConfig> {
        self.routing_config.as_ref()
    }
    /// <p>Whether event replication was enabled or disabled for this endpoint. The default state is <code>ENABLED</code> which means you must supply a <code>RoleArn</code>. If you don't have a <code>RoleArn</code> or you don't want event replication enabled, set the state to <code>DISABLED</code>.</p>
    pub fn replication_config(&self) -> ::std::option::Option<&crate::types::ReplicationConfig> {
        self.replication_config.as_ref()
    }
    /// <p>The event buses being used by the endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_buses.is_none()`.
    pub fn event_buses(&self) -> &[crate::types::EndpointEventBus] {
        self.event_buses.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the role used by event replication for the endpoint.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is <code>abcde.veo</code>.</p>
    pub fn endpoint_id(&self) -> ::std::option::Option<&str> {
        self.endpoint_id.as_deref()
    }
    /// <p>The URL of the endpoint.</p>
    pub fn endpoint_url(&self) -> ::std::option::Option<&str> {
        self.endpoint_url.as_deref()
    }
    /// <p>The current state of the endpoint.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::EndpointState> {
        self.state.as_ref()
    }
    /// <p>The reason the endpoint is in its current state.</p>
    pub fn state_reason(&self) -> ::std::option::Option<&str> {
        self.state_reason.as_deref()
    }
    /// <p>The time the endpoint was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the endpoint was modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl Endpoint {
    /// Creates a new builder-style object to manufacture [`Endpoint`](crate::types::Endpoint).
    pub fn builder() -> crate::types::builders::EndpointBuilder {
        crate::types::builders::EndpointBuilder::default()
    }
}

/// A builder for [`Endpoint`](crate::types::Endpoint).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EndpointBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) routing_config: ::std::option::Option<crate::types::RoutingConfig>,
    pub(crate) replication_config: ::std::option::Option<crate::types::ReplicationConfig>,
    pub(crate) event_buses: ::std::option::Option<::std::vec::Vec<crate::types::EndpointEventBus>>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_url: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::EndpointState>,
    pub(crate) state_reason: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl EndpointBuilder {
    /// <p>The name of the endpoint.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the endpoint.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the endpoint.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description for the endpoint.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the endpoint.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the endpoint.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ARN of the endpoint.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the endpoint.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the endpoint.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The routing configuration of the endpoint.</p>
    pub fn routing_config(mut self, input: crate::types::RoutingConfig) -> Self {
        self.routing_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The routing configuration of the endpoint.</p>
    pub fn set_routing_config(mut self, input: ::std::option::Option<crate::types::RoutingConfig>) -> Self {
        self.routing_config = input;
        self
    }
    /// <p>The routing configuration of the endpoint.</p>
    pub fn get_routing_config(&self) -> &::std::option::Option<crate::types::RoutingConfig> {
        &self.routing_config
    }
    /// <p>Whether event replication was enabled or disabled for this endpoint. The default state is <code>ENABLED</code> which means you must supply a <code>RoleArn</code>. If you don't have a <code>RoleArn</code> or you don't want event replication enabled, set the state to <code>DISABLED</code>.</p>
    pub fn replication_config(mut self, input: crate::types::ReplicationConfig) -> Self {
        self.replication_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether event replication was enabled or disabled for this endpoint. The default state is <code>ENABLED</code> which means you must supply a <code>RoleArn</code>. If you don't have a <code>RoleArn</code> or you don't want event replication enabled, set the state to <code>DISABLED</code>.</p>
    pub fn set_replication_config(mut self, input: ::std::option::Option<crate::types::ReplicationConfig>) -> Self {
        self.replication_config = input;
        self
    }
    /// <p>Whether event replication was enabled or disabled for this endpoint. The default state is <code>ENABLED</code> which means you must supply a <code>RoleArn</code>. If you don't have a <code>RoleArn</code> or you don't want event replication enabled, set the state to <code>DISABLED</code>.</p>
    pub fn get_replication_config(&self) -> &::std::option::Option<crate::types::ReplicationConfig> {
        &self.replication_config
    }
    /// Appends an item to `event_buses`.
    ///
    /// To override the contents of this collection use [`set_event_buses`](Self::set_event_buses).
    ///
    /// <p>The event buses being used by the endpoint.</p>
    pub fn event_buses(mut self, input: crate::types::EndpointEventBus) -> Self {
        let mut v = self.event_buses.unwrap_or_default();
        v.push(input);
        self.event_buses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The event buses being used by the endpoint.</p>
    pub fn set_event_buses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EndpointEventBus>>) -> Self {
        self.event_buses = input;
        self
    }
    /// <p>The event buses being used by the endpoint.</p>
    pub fn get_event_buses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EndpointEventBus>> {
        &self.event_buses
    }
    /// <p>The ARN of the role used by event replication for the endpoint.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the role used by event replication for the endpoint.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the role used by event replication for the endpoint.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is <code>abcde.veo</code>.</p>
    pub fn endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is <code>abcde.veo</code>.</p>
    pub fn set_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_id = input;
        self
    }
    /// <p>The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is <code>abcde.veo</code>.</p>
    pub fn get_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_id
    }
    /// <p>The URL of the endpoint.</p>
    pub fn endpoint_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the endpoint.</p>
    pub fn set_endpoint_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_url = input;
        self
    }
    /// <p>The URL of the endpoint.</p>
    pub fn get_endpoint_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_url
    }
    /// <p>The current state of the endpoint.</p>
    pub fn state(mut self, input: crate::types::EndpointState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the endpoint.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::EndpointState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the endpoint.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::EndpointState> {
        &self.state
    }
    /// <p>The reason the endpoint is in its current state.</p>
    pub fn state_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason the endpoint is in its current state.</p>
    pub fn set_state_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>The reason the endpoint is in its current state.</p>
    pub fn get_state_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_reason
    }
    /// <p>The time the endpoint was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the endpoint was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the endpoint was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last time the endpoint was modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time the endpoint was modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The last time the endpoint was modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// Consumes the builder and constructs a [`Endpoint`](crate::types::Endpoint).
    pub fn build(self) -> crate::types::Endpoint {
        crate::types::Endpoint {
            name: self.name,
            description: self.description,
            arn: self.arn,
            routing_config: self.routing_config,
            replication_config: self.replication_config,
            event_buses: self.event_buses,
            role_arn: self.role_arn,
            endpoint_id: self.endpoint_id,
            endpoint_url: self.endpoint_url,
            state: self.state,
            state_reason: self.state_reason,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
        }
    }
}
