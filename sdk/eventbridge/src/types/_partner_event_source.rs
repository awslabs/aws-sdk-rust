// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A partner event source is created by an SaaS partner. If a customer creates a partner event bus that matches this event source, that Amazon Web Services account can receive events from the partner's applications or services.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PartnerEventSource {
    /// <p>The ARN of the partner event source.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the partner event source.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl PartnerEventSource {
    /// <p>The ARN of the partner event source.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the partner event source.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl PartnerEventSource {
    /// Creates a new builder-style object to manufacture [`PartnerEventSource`](crate::types::PartnerEventSource).
    pub fn builder() -> crate::types::builders::PartnerEventSourceBuilder {
        crate::types::builders::PartnerEventSourceBuilder::default()
    }
}

/// A builder for [`PartnerEventSource`](crate::types::PartnerEventSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PartnerEventSourceBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl PartnerEventSourceBuilder {
    /// <p>The ARN of the partner event source.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the partner event source.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the partner event source.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the partner event source.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`PartnerEventSource`](crate::types::PartnerEventSource).
    pub fn build(self) -> crate::types::PartnerEventSource {
        crate::types::PartnerEventSource {
            arn: self.arn,
            name: self.name,
        }
    }
}
