// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    IllegalStatusException(crate::error::IllegalStatusException),
    InternalException(crate::error::InternalException),
    InvalidEventPatternException(crate::error::InvalidEventPatternException),
    InvalidStateException(crate::error::InvalidStateException),
    LimitExceededException(crate::error::LimitExceededException),
    ManagedRuleException(crate::error::ManagedRuleException),
    OperationDisabledException(crate::error::OperationDisabledException),
    PolicyLengthExceededException(crate::error::PolicyLengthExceededException),
    ResourceAlreadyExistsException(crate::error::ResourceAlreadyExistsException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::IllegalStatusException(inner) => inner.fmt(f),
            Error::InternalException(inner) => inner.fmt(f),
            Error::InvalidEventPatternException(inner) => inner.fmt(f),
            Error::InvalidStateException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ManagedRuleException(inner) => inner.fmt(f),
            Error::OperationDisabledException(inner) => inner.fmt(f),
            Error::PolicyLengthExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ActivateEventSourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ActivateEventSourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ActivateEventSourceErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::ActivateEventSourceErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ActivateEventSourceErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::ActivateEventSourceErrorKind::OperationDisabledException(inner) => {
                    Error::OperationDisabledException(inner)
                }
                crate::error::ActivateEventSourceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ActivateEventSourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelReplayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelReplayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelReplayErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::CancelReplayErrorKind::IllegalStatusException(inner) => {
                    Error::IllegalStatusException(inner)
                }
                crate::error::CancelReplayErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::CancelReplayErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::CancelReplayErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateApiDestinationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateApiDestinationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateApiDestinationErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::CreateApiDestinationErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateApiDestinationErrorKind::ResourceAlreadyExistsException(
                    inner,
                ) => Error::ResourceAlreadyExistsException(inner),
                crate::error::CreateApiDestinationErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::CreateApiDestinationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateArchiveError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateArchiveError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateArchiveErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::CreateArchiveErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::CreateArchiveErrorKind::InvalidEventPatternException(inner) => {
                    Error::InvalidEventPatternException(inner)
                }
                crate::error::CreateArchiveErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateArchiveErrorKind::ResourceAlreadyExistsException(inner) => {
                    Error::ResourceAlreadyExistsException(inner)
                }
                crate::error::CreateArchiveErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::CreateArchiveErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateConnectionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateConnectionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateConnectionErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::CreateConnectionErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateConnectionErrorKind::ResourceAlreadyExistsException(inner) => {
                    Error::ResourceAlreadyExistsException(inner)
                }
                crate::error::CreateConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEventBusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateEventBusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEventBusErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::CreateEventBusErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::CreateEventBusErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::CreateEventBusErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateEventBusErrorKind::OperationDisabledException(inner) => {
                    Error::OperationDisabledException(inner)
                }
                crate::error::CreateEventBusErrorKind::ResourceAlreadyExistsException(inner) => {
                    Error::ResourceAlreadyExistsException(inner)
                }
                crate::error::CreateEventBusErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::CreateEventBusErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreatePartnerEventSourceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreatePartnerEventSourceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreatePartnerEventSourceErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::CreatePartnerEventSourceErrorKind::InternalException(inner) => Error::InternalException(inner),
                crate::error::CreatePartnerEventSourceErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
                crate::error::CreatePartnerEventSourceErrorKind::OperationDisabledException(inner) => Error::OperationDisabledException(inner),
                crate::error::CreatePartnerEventSourceErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
                crate::error::CreatePartnerEventSourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeactivateEventSourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeactivateEventSourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeactivateEventSourceErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::DeactivateEventSourceErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DeactivateEventSourceErrorKind::InvalidStateException(inner) => {
                    Error::InvalidStateException(inner)
                }
                crate::error::DeactivateEventSourceErrorKind::OperationDisabledException(inner) => {
                    Error::OperationDisabledException(inner)
                }
                crate::error::DeactivateEventSourceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeactivateEventSourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeauthorizeConnectionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeauthorizeConnectionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeauthorizeConnectionErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::DeauthorizeConnectionErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DeauthorizeConnectionErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeauthorizeConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteApiDestinationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteApiDestinationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteApiDestinationErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::DeleteApiDestinationErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DeleteApiDestinationErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeleteApiDestinationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteArchiveError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteArchiveError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteArchiveErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::DeleteArchiveErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DeleteArchiveErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeleteArchiveErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteConnectionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteConnectionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteConnectionErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::DeleteConnectionErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DeleteConnectionErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeleteConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEventBusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteEventBusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteEventBusErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::DeleteEventBusErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DeleteEventBusErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePartnerEventSourceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeletePartnerEventSourceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeletePartnerEventSourceErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::DeletePartnerEventSourceErrorKind::InternalException(inner) => Error::InternalException(inner),
                crate::error::DeletePartnerEventSourceErrorKind::OperationDisabledException(inner) => Error::OperationDisabledException(inner),
                crate::error::DeletePartnerEventSourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRuleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteRuleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRuleErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::DeleteRuleErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DeleteRuleErrorKind::ManagedRuleException(inner) => {
                    Error::ManagedRuleException(inner)
                }
                crate::error::DeleteRuleErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeleteRuleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeApiDestinationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeApiDestinationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeApiDestinationErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DescribeApiDestinationErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeApiDestinationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeArchiveError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeArchiveError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeArchiveErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DescribeArchiveErrorKind::ResourceAlreadyExistsException(inner) => {
                    Error::ResourceAlreadyExistsException(inner)
                }
                crate::error::DescribeArchiveErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeArchiveErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeConnectionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeConnectionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeConnectionErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DescribeConnectionErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEventBusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEventBusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEventBusErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DescribeEventBusErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeEventBusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEventSourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEventSourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEventSourceErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DescribeEventSourceErrorKind::OperationDisabledException(inner) => {
                    Error::OperationDisabledException(inner)
                }
                crate::error::DescribeEventSourceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeEventSourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePartnerEventSourceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribePartnerEventSourceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePartnerEventSourceErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DescribePartnerEventSourceErrorKind::OperationDisabledException(
                    inner,
                ) => Error::OperationDisabledException(inner),
                crate::error::DescribePartnerEventSourceErrorKind::ResourceNotFoundException(
                    inner,
                ) => Error::ResourceNotFoundException(inner),
                crate::error::DescribePartnerEventSourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReplayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeReplayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReplayErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DescribeReplayErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeReplayErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeRuleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeRuleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeRuleErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DescribeRuleErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeRuleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableRuleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DisableRuleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableRuleErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::DisableRuleErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::DisableRuleErrorKind::ManagedRuleException(inner) => {
                    Error::ManagedRuleException(inner)
                }
                crate::error::DisableRuleErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DisableRuleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableRuleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnableRuleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableRuleErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::EnableRuleErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::EnableRuleErrorKind::ManagedRuleException(inner) => {
                    Error::ManagedRuleException(inner)
                }
                crate::error::EnableRuleErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::EnableRuleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListApiDestinationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListApiDestinationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListApiDestinationsErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ListApiDestinationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListArchivesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListArchivesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListArchivesErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ListArchivesErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListArchivesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListConnectionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListConnectionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListConnectionsErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ListConnectionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListEventBusesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListEventBusesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListEventBusesErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ListEventBusesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListEventSourcesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListEventSourcesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListEventSourcesErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ListEventSourcesErrorKind::OperationDisabledException(inner) => {
                    Error::OperationDisabledException(inner)
                }
                crate::error::ListEventSourcesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPartnerEventSourceAccountsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListPartnerEventSourceAccountsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListPartnerEventSourceAccountsErrorKind::InternalException(inner) => Error::InternalException(inner),
                crate::error::ListPartnerEventSourceAccountsErrorKind::OperationDisabledException(inner) => Error::OperationDisabledException(inner),
                crate::error::ListPartnerEventSourceAccountsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::ListPartnerEventSourceAccountsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPartnerEventSourcesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListPartnerEventSourcesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPartnerEventSourcesErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ListPartnerEventSourcesErrorKind::OperationDisabledException(
                    inner,
                ) => Error::OperationDisabledException(inner),
                crate::error::ListPartnerEventSourcesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListReplaysError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListReplaysError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListReplaysErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ListReplaysErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListRuleNamesByTargetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListRuleNamesByTargetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListRuleNamesByTargetErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ListRuleNamesByTargetErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListRuleNamesByTargetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListRulesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListRulesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListRulesErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ListRulesErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListRulesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTargetsByRuleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTargetsByRuleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTargetsByRuleErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::ListTargetsByRuleErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListTargetsByRuleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutEventsErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::PutEventsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutPartnerEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutPartnerEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutPartnerEventsErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::PutPartnerEventsErrorKind::OperationDisabledException(inner) => {
                    Error::OperationDisabledException(inner)
                }
                crate::error::PutPartnerEventsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutPermissionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutPermissionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutPermissionErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::PutPermissionErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::PutPermissionErrorKind::OperationDisabledException(inner) => {
                    Error::OperationDisabledException(inner)
                }
                crate::error::PutPermissionErrorKind::PolicyLengthExceededException(inner) => {
                    Error::PolicyLengthExceededException(inner)
                }
                crate::error::PutPermissionErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::PutPermissionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutRuleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutRuleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutRuleErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::PutRuleErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::PutRuleErrorKind::InvalidEventPatternException(inner) => {
                    Error::InvalidEventPatternException(inner)
                }
                crate::error::PutRuleErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::PutRuleErrorKind::ManagedRuleException(inner) => {
                    Error::ManagedRuleException(inner)
                }
                crate::error::PutRuleErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::PutRuleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutTargetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutTargetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutTargetsErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::PutTargetsErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::PutTargetsErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::PutTargetsErrorKind::ManagedRuleException(inner) => {
                    Error::ManagedRuleException(inner)
                }
                crate::error::PutTargetsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::PutTargetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemovePermissionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RemovePermissionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemovePermissionErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::RemovePermissionErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::RemovePermissionErrorKind::OperationDisabledException(inner) => {
                    Error::OperationDisabledException(inner)
                }
                crate::error::RemovePermissionErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::RemovePermissionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveTargetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RemoveTargetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveTargetsErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::RemoveTargetsErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::RemoveTargetsErrorKind::ManagedRuleException(inner) => {
                    Error::ManagedRuleException(inner)
                }
                crate::error::RemoveTargetsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::RemoveTargetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartReplayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartReplayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartReplayErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::StartReplayErrorKind::InvalidEventPatternException(inner) => {
                    Error::InvalidEventPatternException(inner)
                }
                crate::error::StartReplayErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::StartReplayErrorKind::ResourceAlreadyExistsException(inner) => {
                    Error::ResourceAlreadyExistsException(inner)
                }
                crate::error::StartReplayErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::StartReplayErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::TagResourceErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::TagResourceErrorKind::ManagedRuleException(inner) => {
                    Error::ManagedRuleException(inner)
                }
                crate::error::TagResourceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TestEventPatternError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TestEventPatternError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TestEventPatternErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::TestEventPatternErrorKind::InvalidEventPatternException(inner) => {
                    Error::InvalidEventPatternException(inner)
                }
                crate::error::TestEventPatternErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::UntagResourceErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::UntagResourceErrorKind::ManagedRuleException(inner) => {
                    Error::ManagedRuleException(inner)
                }
                crate::error::UntagResourceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateApiDestinationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateApiDestinationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateApiDestinationErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::UpdateApiDestinationErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::UpdateApiDestinationErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::UpdateApiDestinationErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::UpdateApiDestinationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateArchiveError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateArchiveError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateArchiveErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::UpdateArchiveErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::UpdateArchiveErrorKind::InvalidEventPatternException(inner) => {
                    Error::InvalidEventPatternException(inner)
                }
                crate::error::UpdateArchiveErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::UpdateArchiveErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::UpdateArchiveErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateConnectionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateConnectionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateConnectionErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::UpdateConnectionErrorKind::InternalException(inner) => {
                    Error::InternalException(inner)
                }
                crate::error::UpdateConnectionErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::UpdateConnectionErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::UpdateConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
