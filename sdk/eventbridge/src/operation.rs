// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `ActivateEventSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`activate_event_source`](crate::client::fluent_builders::ActivateEventSource).
///
/// `ParseStrictResponse` impl for `ActivateEventSource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ActivateEventSource {
    _private: (),
}
impl ActivateEventSource {
    /// Creates a new builder-style object to manufacture [`ActivateEventSourceInput`](crate::input::ActivateEventSourceInput).
    pub fn builder() -> crate::input::activate_event_source_input::Builder {
        crate::input::activate_event_source_input::Builder::default()
    }
    /// Creates a new `ActivateEventSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ActivateEventSource {
    type Output = std::result::Result<
        crate::output::ActivateEventSourceOutput,
        crate::error::ActivateEventSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_activate_event_source::de_activate_event_source_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_activate_event_source::de_activate_event_source_http_response(response)
        }
    }
}

/// Operation shape for `CancelReplay`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`cancel_replay`](crate::client::fluent_builders::CancelReplay).
///
/// `ParseStrictResponse` impl for `CancelReplay`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CancelReplay {
    _private: (),
}
impl CancelReplay {
    /// Creates a new builder-style object to manufacture [`CancelReplayInput`](crate::input::CancelReplayInput).
    pub fn builder() -> crate::input::cancel_replay_input::Builder {
        crate::input::cancel_replay_input::Builder::default()
    }
    /// Creates a new `CancelReplay` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CancelReplay {
    type Output =
        std::result::Result<crate::output::CancelReplayOutput, crate::error::CancelReplayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_cancel_replay::de_cancel_replay_http_error(response)
        } else {
            crate::protocol_serde::shape_cancel_replay::de_cancel_replay_http_response(response)
        }
    }
}

/// Operation shape for `CreateApiDestination`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_api_destination`](crate::client::fluent_builders::CreateApiDestination).
///
/// `ParseStrictResponse` impl for `CreateApiDestination`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateApiDestination {
    _private: (),
}
impl CreateApiDestination {
    /// Creates a new builder-style object to manufacture [`CreateApiDestinationInput`](crate::input::CreateApiDestinationInput).
    pub fn builder() -> crate::input::create_api_destination_input::Builder {
        crate::input::create_api_destination_input::Builder::default()
    }
    /// Creates a new `CreateApiDestination` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateApiDestination {
    type Output = std::result::Result<
        crate::output::CreateApiDestinationOutput,
        crate::error::CreateApiDestinationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_api_destination::de_create_api_destination_http_error(response)
        } else {
            crate::protocol_serde::shape_create_api_destination::de_create_api_destination_http_response(response)
        }
    }
}

/// Operation shape for `CreateArchive`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_archive`](crate::client::fluent_builders::CreateArchive).
///
/// `ParseStrictResponse` impl for `CreateArchive`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateArchive {
    _private: (),
}
impl CreateArchive {
    /// Creates a new builder-style object to manufacture [`CreateArchiveInput`](crate::input::CreateArchiveInput).
    pub fn builder() -> crate::input::create_archive_input::Builder {
        crate::input::create_archive_input::Builder::default()
    }
    /// Creates a new `CreateArchive` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateArchive {
    type Output =
        std::result::Result<crate::output::CreateArchiveOutput, crate::error::CreateArchiveError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_archive::de_create_archive_http_error(response)
        } else {
            crate::protocol_serde::shape_create_archive::de_create_archive_http_response(response)
        }
    }
}

/// Operation shape for `CreateConnection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_connection`](crate::client::fluent_builders::CreateConnection).
///
/// `ParseStrictResponse` impl for `CreateConnection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateConnection {
    _private: (),
}
impl CreateConnection {
    /// Creates a new builder-style object to manufacture [`CreateConnectionInput`](crate::input::CreateConnectionInput).
    pub fn builder() -> crate::input::create_connection_input::Builder {
        crate::input::create_connection_input::Builder::default()
    }
    /// Creates a new `CreateConnection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateConnection {
    type Output = std::result::Result<
        crate::output::CreateConnectionOutput,
        crate::error::CreateConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_connection::de_create_connection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_connection::de_create_connection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateEndpoint`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_endpoint`](crate::client::fluent_builders::CreateEndpoint).
///
/// `ParseStrictResponse` impl for `CreateEndpoint`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateEndpoint {
    _private: (),
}
impl CreateEndpoint {
    /// Creates a new builder-style object to manufacture [`CreateEndpointInput`](crate::input::CreateEndpointInput).
    pub fn builder() -> crate::input::create_endpoint_input::Builder {
        crate::input::create_endpoint_input::Builder::default()
    }
    /// Creates a new `CreateEndpoint` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateEndpoint {
    type Output =
        std::result::Result<crate::output::CreateEndpointOutput, crate::error::CreateEndpointError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_endpoint::de_create_endpoint_http_error(response)
        } else {
            crate::protocol_serde::shape_create_endpoint::de_create_endpoint_http_response(response)
        }
    }
}

/// Operation shape for `CreateEventBus`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_event_bus`](crate::client::fluent_builders::CreateEventBus).
///
/// `ParseStrictResponse` impl for `CreateEventBus`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateEventBus {
    _private: (),
}
impl CreateEventBus {
    /// Creates a new builder-style object to manufacture [`CreateEventBusInput`](crate::input::CreateEventBusInput).
    pub fn builder() -> crate::input::create_event_bus_input::Builder {
        crate::input::create_event_bus_input::Builder::default()
    }
    /// Creates a new `CreateEventBus` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateEventBus {
    type Output =
        std::result::Result<crate::output::CreateEventBusOutput, crate::error::CreateEventBusError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_event_bus::de_create_event_bus_http_error(response)
        } else {
            crate::protocol_serde::shape_create_event_bus::de_create_event_bus_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreatePartnerEventSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_partner_event_source`](crate::client::fluent_builders::CreatePartnerEventSource).
///
/// `ParseStrictResponse` impl for `CreatePartnerEventSource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreatePartnerEventSource {
    _private: (),
}
impl CreatePartnerEventSource {
    /// Creates a new builder-style object to manufacture [`CreatePartnerEventSourceInput`](crate::input::CreatePartnerEventSourceInput).
    pub fn builder() -> crate::input::create_partner_event_source_input::Builder {
        crate::input::create_partner_event_source_input::Builder::default()
    }
    /// Creates a new `CreatePartnerEventSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreatePartnerEventSource {
    type Output = std::result::Result<
        crate::output::CreatePartnerEventSourceOutput,
        crate::error::CreatePartnerEventSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_partner_event_source::de_create_partner_event_source_http_error(response)
        } else {
            crate::protocol_serde::shape_create_partner_event_source::de_create_partner_event_source_http_response(response)
        }
    }
}

/// Operation shape for `DeactivateEventSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`deactivate_event_source`](crate::client::fluent_builders::DeactivateEventSource).
///
/// `ParseStrictResponse` impl for `DeactivateEventSource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeactivateEventSource {
    _private: (),
}
impl DeactivateEventSource {
    /// Creates a new builder-style object to manufacture [`DeactivateEventSourceInput`](crate::input::DeactivateEventSourceInput).
    pub fn builder() -> crate::input::deactivate_event_source_input::Builder {
        crate::input::deactivate_event_source_input::Builder::default()
    }
    /// Creates a new `DeactivateEventSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeactivateEventSource {
    type Output = std::result::Result<
        crate::output::DeactivateEventSourceOutput,
        crate::error::DeactivateEventSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_deactivate_event_source::de_deactivate_event_source_http_error(response)
        } else {
            crate::protocol_serde::shape_deactivate_event_source::de_deactivate_event_source_http_response(response)
        }
    }
}

/// Operation shape for `DeauthorizeConnection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`deauthorize_connection`](crate::client::fluent_builders::DeauthorizeConnection).
///
/// `ParseStrictResponse` impl for `DeauthorizeConnection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeauthorizeConnection {
    _private: (),
}
impl DeauthorizeConnection {
    /// Creates a new builder-style object to manufacture [`DeauthorizeConnectionInput`](crate::input::DeauthorizeConnectionInput).
    pub fn builder() -> crate::input::deauthorize_connection_input::Builder {
        crate::input::deauthorize_connection_input::Builder::default()
    }
    /// Creates a new `DeauthorizeConnection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeauthorizeConnection {
    type Output = std::result::Result<
        crate::output::DeauthorizeConnectionOutput,
        crate::error::DeauthorizeConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_deauthorize_connection::de_deauthorize_connection_http_error(response)
        } else {
            crate::protocol_serde::shape_deauthorize_connection::de_deauthorize_connection_http_response(response)
        }
    }
}

/// Operation shape for `DeleteApiDestination`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_api_destination`](crate::client::fluent_builders::DeleteApiDestination).
///
/// `ParseStrictResponse` impl for `DeleteApiDestination`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteApiDestination {
    _private: (),
}
impl DeleteApiDestination {
    /// Creates a new builder-style object to manufacture [`DeleteApiDestinationInput`](crate::input::DeleteApiDestinationInput).
    pub fn builder() -> crate::input::delete_api_destination_input::Builder {
        crate::input::delete_api_destination_input::Builder::default()
    }
    /// Creates a new `DeleteApiDestination` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteApiDestination {
    type Output = std::result::Result<
        crate::output::DeleteApiDestinationOutput,
        crate::error::DeleteApiDestinationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_api_destination::de_delete_api_destination_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_api_destination::de_delete_api_destination_http_response(response)
        }
    }
}

/// Operation shape for `DeleteArchive`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_archive`](crate::client::fluent_builders::DeleteArchive).
///
/// `ParseStrictResponse` impl for `DeleteArchive`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteArchive {
    _private: (),
}
impl DeleteArchive {
    /// Creates a new builder-style object to manufacture [`DeleteArchiveInput`](crate::input::DeleteArchiveInput).
    pub fn builder() -> crate::input::delete_archive_input::Builder {
        crate::input::delete_archive_input::Builder::default()
    }
    /// Creates a new `DeleteArchive` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteArchive {
    type Output =
        std::result::Result<crate::output::DeleteArchiveOutput, crate::error::DeleteArchiveError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_archive::de_delete_archive_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_archive::de_delete_archive_http_response(response)
        }
    }
}

/// Operation shape for `DeleteConnection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_connection`](crate::client::fluent_builders::DeleteConnection).
///
/// `ParseStrictResponse` impl for `DeleteConnection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteConnection {
    _private: (),
}
impl DeleteConnection {
    /// Creates a new builder-style object to manufacture [`DeleteConnectionInput`](crate::input::DeleteConnectionInput).
    pub fn builder() -> crate::input::delete_connection_input::Builder {
        crate::input::delete_connection_input::Builder::default()
    }
    /// Creates a new `DeleteConnection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteConnection {
    type Output = std::result::Result<
        crate::output::DeleteConnectionOutput,
        crate::error::DeleteConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_connection::de_delete_connection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_connection::de_delete_connection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteEndpoint`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_endpoint`](crate::client::fluent_builders::DeleteEndpoint).
///
/// `ParseStrictResponse` impl for `DeleteEndpoint`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteEndpoint {
    _private: (),
}
impl DeleteEndpoint {
    /// Creates a new builder-style object to manufacture [`DeleteEndpointInput`](crate::input::DeleteEndpointInput).
    pub fn builder() -> crate::input::delete_endpoint_input::Builder {
        crate::input::delete_endpoint_input::Builder::default()
    }
    /// Creates a new `DeleteEndpoint` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteEndpoint {
    type Output =
        std::result::Result<crate::output::DeleteEndpointOutput, crate::error::DeleteEndpointError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_endpoint::de_delete_endpoint_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_endpoint::de_delete_endpoint_http_response(response)
        }
    }
}

/// Operation shape for `DeleteEventBus`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_event_bus`](crate::client::fluent_builders::DeleteEventBus).
///
/// `ParseStrictResponse` impl for `DeleteEventBus`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteEventBus {
    _private: (),
}
impl DeleteEventBus {
    /// Creates a new builder-style object to manufacture [`DeleteEventBusInput`](crate::input::DeleteEventBusInput).
    pub fn builder() -> crate::input::delete_event_bus_input::Builder {
        crate::input::delete_event_bus_input::Builder::default()
    }
    /// Creates a new `DeleteEventBus` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteEventBus {
    type Output =
        std::result::Result<crate::output::DeleteEventBusOutput, crate::error::DeleteEventBusError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_event_bus::de_delete_event_bus_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_event_bus::de_delete_event_bus_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeletePartnerEventSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_partner_event_source`](crate::client::fluent_builders::DeletePartnerEventSource).
///
/// `ParseStrictResponse` impl for `DeletePartnerEventSource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeletePartnerEventSource {
    _private: (),
}
impl DeletePartnerEventSource {
    /// Creates a new builder-style object to manufacture [`DeletePartnerEventSourceInput`](crate::input::DeletePartnerEventSourceInput).
    pub fn builder() -> crate::input::delete_partner_event_source_input::Builder {
        crate::input::delete_partner_event_source_input::Builder::default()
    }
    /// Creates a new `DeletePartnerEventSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeletePartnerEventSource {
    type Output = std::result::Result<
        crate::output::DeletePartnerEventSourceOutput,
        crate::error::DeletePartnerEventSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_partner_event_source::de_delete_partner_event_source_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_partner_event_source::de_delete_partner_event_source_http_response(response)
        }
    }
}

/// Operation shape for `DeleteRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_rule`](crate::client::fluent_builders::DeleteRule).
///
/// `ParseStrictResponse` impl for `DeleteRule`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteRule {
    _private: (),
}
impl DeleteRule {
    /// Creates a new builder-style object to manufacture [`DeleteRuleInput`](crate::input::DeleteRuleInput).
    pub fn builder() -> crate::input::delete_rule_input::Builder {
        crate::input::delete_rule_input::Builder::default()
    }
    /// Creates a new `DeleteRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteRule {
    type Output =
        std::result::Result<crate::output::DeleteRuleOutput, crate::error::DeleteRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_rule::de_delete_rule_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_rule::de_delete_rule_http_response(response)
        }
    }
}

/// Operation shape for `DescribeApiDestination`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_api_destination`](crate::client::fluent_builders::DescribeApiDestination).
///
/// `ParseStrictResponse` impl for `DescribeApiDestination`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeApiDestination {
    _private: (),
}
impl DescribeApiDestination {
    /// Creates a new builder-style object to manufacture [`DescribeApiDestinationInput`](crate::input::DescribeApiDestinationInput).
    pub fn builder() -> crate::input::describe_api_destination_input::Builder {
        crate::input::describe_api_destination_input::Builder::default()
    }
    /// Creates a new `DescribeApiDestination` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeApiDestination {
    type Output = std::result::Result<
        crate::output::DescribeApiDestinationOutput,
        crate::error::DescribeApiDestinationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_api_destination::de_describe_api_destination_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_api_destination::de_describe_api_destination_http_response(response)
        }
    }
}

/// Operation shape for `DescribeArchive`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_archive`](crate::client::fluent_builders::DescribeArchive).
///
/// `ParseStrictResponse` impl for `DescribeArchive`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeArchive {
    _private: (),
}
impl DescribeArchive {
    /// Creates a new builder-style object to manufacture [`DescribeArchiveInput`](crate::input::DescribeArchiveInput).
    pub fn builder() -> crate::input::describe_archive_input::Builder {
        crate::input::describe_archive_input::Builder::default()
    }
    /// Creates a new `DescribeArchive` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeArchive {
    type Output = std::result::Result<
        crate::output::DescribeArchiveOutput,
        crate::error::DescribeArchiveError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_archive::de_describe_archive_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_archive::de_describe_archive_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeConnection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_connection`](crate::client::fluent_builders::DescribeConnection).
///
/// `ParseStrictResponse` impl for `DescribeConnection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeConnection {
    _private: (),
}
impl DescribeConnection {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionInput`](crate::input::DescribeConnectionInput).
    pub fn builder() -> crate::input::describe_connection_input::Builder {
        crate::input::describe_connection_input::Builder::default()
    }
    /// Creates a new `DescribeConnection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeConnection {
    type Output = std::result::Result<
        crate::output::DescribeConnectionOutput,
        crate::error::DescribeConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_connection::de_describe_connection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_connection::de_describe_connection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeEndpoint`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_endpoint`](crate::client::fluent_builders::DescribeEndpoint).
///
/// `ParseStrictResponse` impl for `DescribeEndpoint`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeEndpoint {
    _private: (),
}
impl DescribeEndpoint {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointInput`](crate::input::DescribeEndpointInput).
    pub fn builder() -> crate::input::describe_endpoint_input::Builder {
        crate::input::describe_endpoint_input::Builder::default()
    }
    /// Creates a new `DescribeEndpoint` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeEndpoint {
    type Output = std::result::Result<
        crate::output::DescribeEndpointOutput,
        crate::error::DescribeEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_endpoint::de_describe_endpoint_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_endpoint::de_describe_endpoint_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeEventBus`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_event_bus`](crate::client::fluent_builders::DescribeEventBus).
///
/// `ParseStrictResponse` impl for `DescribeEventBus`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeEventBus {
    _private: (),
}
impl DescribeEventBus {
    /// Creates a new builder-style object to manufacture [`DescribeEventBusInput`](crate::input::DescribeEventBusInput).
    pub fn builder() -> crate::input::describe_event_bus_input::Builder {
        crate::input::describe_event_bus_input::Builder::default()
    }
    /// Creates a new `DescribeEventBus` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeEventBus {
    type Output = std::result::Result<
        crate::output::DescribeEventBusOutput,
        crate::error::DescribeEventBusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_event_bus::de_describe_event_bus_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_event_bus::de_describe_event_bus_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeEventSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_event_source`](crate::client::fluent_builders::DescribeEventSource).
///
/// `ParseStrictResponse` impl for `DescribeEventSource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeEventSource {
    _private: (),
}
impl DescribeEventSource {
    /// Creates a new builder-style object to manufacture [`DescribeEventSourceInput`](crate::input::DescribeEventSourceInput).
    pub fn builder() -> crate::input::describe_event_source_input::Builder {
        crate::input::describe_event_source_input::Builder::default()
    }
    /// Creates a new `DescribeEventSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeEventSource {
    type Output = std::result::Result<
        crate::output::DescribeEventSourceOutput,
        crate::error::DescribeEventSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_event_source::de_describe_event_source_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_event_source::de_describe_event_source_http_response(response)
        }
    }
}

/// Operation shape for `DescribePartnerEventSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_partner_event_source`](crate::client::fluent_builders::DescribePartnerEventSource).
///
/// `ParseStrictResponse` impl for `DescribePartnerEventSource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribePartnerEventSource {
    _private: (),
}
impl DescribePartnerEventSource {
    /// Creates a new builder-style object to manufacture [`DescribePartnerEventSourceInput`](crate::input::DescribePartnerEventSourceInput).
    pub fn builder() -> crate::input::describe_partner_event_source_input::Builder {
        crate::input::describe_partner_event_source_input::Builder::default()
    }
    /// Creates a new `DescribePartnerEventSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribePartnerEventSource {
    type Output = std::result::Result<
        crate::output::DescribePartnerEventSourceOutput,
        crate::error::DescribePartnerEventSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_partner_event_source::de_describe_partner_event_source_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_partner_event_source::de_describe_partner_event_source_http_response(response)
        }
    }
}

/// Operation shape for `DescribeReplay`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_replay`](crate::client::fluent_builders::DescribeReplay).
///
/// `ParseStrictResponse` impl for `DescribeReplay`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeReplay {
    _private: (),
}
impl DescribeReplay {
    /// Creates a new builder-style object to manufacture [`DescribeReplayInput`](crate::input::DescribeReplayInput).
    pub fn builder() -> crate::input::describe_replay_input::Builder {
        crate::input::describe_replay_input::Builder::default()
    }
    /// Creates a new `DescribeReplay` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeReplay {
    type Output =
        std::result::Result<crate::output::DescribeReplayOutput, crate::error::DescribeReplayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_replay::de_describe_replay_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_replay::de_describe_replay_http_response(response)
        }
    }
}

/// Operation shape for `DescribeRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_rule`](crate::client::fluent_builders::DescribeRule).
///
/// `ParseStrictResponse` impl for `DescribeRule`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeRule {
    _private: (),
}
impl DescribeRule {
    /// Creates a new builder-style object to manufacture [`DescribeRuleInput`](crate::input::DescribeRuleInput).
    pub fn builder() -> crate::input::describe_rule_input::Builder {
        crate::input::describe_rule_input::Builder::default()
    }
    /// Creates a new `DescribeRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeRule {
    type Output =
        std::result::Result<crate::output::DescribeRuleOutput, crate::error::DescribeRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_rule::de_describe_rule_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_rule::de_describe_rule_http_response(response)
        }
    }
}

/// Operation shape for `DisableRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disable_rule`](crate::client::fluent_builders::DisableRule).
///
/// `ParseStrictResponse` impl for `DisableRule`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisableRule {
    _private: (),
}
impl DisableRule {
    /// Creates a new builder-style object to manufacture [`DisableRuleInput`](crate::input::DisableRuleInput).
    pub fn builder() -> crate::input::disable_rule_input::Builder {
        crate::input::disable_rule_input::Builder::default()
    }
    /// Creates a new `DisableRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisableRule {
    type Output =
        std::result::Result<crate::output::DisableRuleOutput, crate::error::DisableRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disable_rule::de_disable_rule_http_error(response)
        } else {
            crate::protocol_serde::shape_disable_rule::de_disable_rule_http_response(response)
        }
    }
}

/// Operation shape for `EnableRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`enable_rule`](crate::client::fluent_builders::EnableRule).
///
/// `ParseStrictResponse` impl for `EnableRule`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct EnableRule {
    _private: (),
}
impl EnableRule {
    /// Creates a new builder-style object to manufacture [`EnableRuleInput`](crate::input::EnableRuleInput).
    pub fn builder() -> crate::input::enable_rule_input::Builder {
        crate::input::enable_rule_input::Builder::default()
    }
    /// Creates a new `EnableRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for EnableRule {
    type Output =
        std::result::Result<crate::output::EnableRuleOutput, crate::error::EnableRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_enable_rule::de_enable_rule_http_error(response)
        } else {
            crate::protocol_serde::shape_enable_rule::de_enable_rule_http_response(response)
        }
    }
}

/// Operation shape for `ListApiDestinations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_api_destinations`](crate::client::fluent_builders::ListApiDestinations).
///
/// `ParseStrictResponse` impl for `ListApiDestinations`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListApiDestinations {
    _private: (),
}
impl ListApiDestinations {
    /// Creates a new builder-style object to manufacture [`ListApiDestinationsInput`](crate::input::ListApiDestinationsInput).
    pub fn builder() -> crate::input::list_api_destinations_input::Builder {
        crate::input::list_api_destinations_input::Builder::default()
    }
    /// Creates a new `ListApiDestinations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListApiDestinations {
    type Output = std::result::Result<
        crate::output::ListApiDestinationsOutput,
        crate::error::ListApiDestinationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_api_destinations::de_list_api_destinations_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_api_destinations::de_list_api_destinations_http_response(response)
        }
    }
}

/// Operation shape for `ListArchives`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_archives`](crate::client::fluent_builders::ListArchives).
///
/// `ParseStrictResponse` impl for `ListArchives`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListArchives {
    _private: (),
}
impl ListArchives {
    /// Creates a new builder-style object to manufacture [`ListArchivesInput`](crate::input::ListArchivesInput).
    pub fn builder() -> crate::input::list_archives_input::Builder {
        crate::input::list_archives_input::Builder::default()
    }
    /// Creates a new `ListArchives` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListArchives {
    type Output =
        std::result::Result<crate::output::ListArchivesOutput, crate::error::ListArchivesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_archives::de_list_archives_http_error(response)
        } else {
            crate::protocol_serde::shape_list_archives::de_list_archives_http_response(response)
        }
    }
}

/// Operation shape for `ListConnections`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_connections`](crate::client::fluent_builders::ListConnections).
///
/// `ParseStrictResponse` impl for `ListConnections`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListConnections {
    _private: (),
}
impl ListConnections {
    /// Creates a new builder-style object to manufacture [`ListConnectionsInput`](crate::input::ListConnectionsInput).
    pub fn builder() -> crate::input::list_connections_input::Builder {
        crate::input::list_connections_input::Builder::default()
    }
    /// Creates a new `ListConnections` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListConnections {
    type Output = std::result::Result<
        crate::output::ListConnectionsOutput,
        crate::error::ListConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_connections::de_list_connections_http_error(response)
        } else {
            crate::protocol_serde::shape_list_connections::de_list_connections_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListEndpoints`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_endpoints`](crate::client::fluent_builders::ListEndpoints).
///
/// `ParseStrictResponse` impl for `ListEndpoints`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListEndpoints {
    _private: (),
}
impl ListEndpoints {
    /// Creates a new builder-style object to manufacture [`ListEndpointsInput`](crate::input::ListEndpointsInput).
    pub fn builder() -> crate::input::list_endpoints_input::Builder {
        crate::input::list_endpoints_input::Builder::default()
    }
    /// Creates a new `ListEndpoints` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListEndpoints {
    type Output =
        std::result::Result<crate::output::ListEndpointsOutput, crate::error::ListEndpointsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_endpoints::de_list_endpoints_http_error(response)
        } else {
            crate::protocol_serde::shape_list_endpoints::de_list_endpoints_http_response(response)
        }
    }
}

/// Operation shape for `ListEventBuses`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_event_buses`](crate::client::fluent_builders::ListEventBuses).
///
/// `ParseStrictResponse` impl for `ListEventBuses`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListEventBuses {
    _private: (),
}
impl ListEventBuses {
    /// Creates a new builder-style object to manufacture [`ListEventBusesInput`](crate::input::ListEventBusesInput).
    pub fn builder() -> crate::input::list_event_buses_input::Builder {
        crate::input::list_event_buses_input::Builder::default()
    }
    /// Creates a new `ListEventBuses` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListEventBuses {
    type Output =
        std::result::Result<crate::output::ListEventBusesOutput, crate::error::ListEventBusesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_event_buses::de_list_event_buses_http_error(response)
        } else {
            crate::protocol_serde::shape_list_event_buses::de_list_event_buses_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListEventSources`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_event_sources`](crate::client::fluent_builders::ListEventSources).
///
/// `ParseStrictResponse` impl for `ListEventSources`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListEventSources {
    _private: (),
}
impl ListEventSources {
    /// Creates a new builder-style object to manufacture [`ListEventSourcesInput`](crate::input::ListEventSourcesInput).
    pub fn builder() -> crate::input::list_event_sources_input::Builder {
        crate::input::list_event_sources_input::Builder::default()
    }
    /// Creates a new `ListEventSources` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListEventSources {
    type Output = std::result::Result<
        crate::output::ListEventSourcesOutput,
        crate::error::ListEventSourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_event_sources::de_list_event_sources_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_event_sources::de_list_event_sources_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListPartnerEventSourceAccounts`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_partner_event_source_accounts`](crate::client::fluent_builders::ListPartnerEventSourceAccounts).
///
/// `ParseStrictResponse` impl for `ListPartnerEventSourceAccounts`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListPartnerEventSourceAccounts {
    _private: (),
}
impl ListPartnerEventSourceAccounts {
    /// Creates a new builder-style object to manufacture [`ListPartnerEventSourceAccountsInput`](crate::input::ListPartnerEventSourceAccountsInput).
    pub fn builder() -> crate::input::list_partner_event_source_accounts_input::Builder {
        crate::input::list_partner_event_source_accounts_input::Builder::default()
    }
    /// Creates a new `ListPartnerEventSourceAccounts` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListPartnerEventSourceAccounts {
    type Output = std::result::Result<
        crate::output::ListPartnerEventSourceAccountsOutput,
        crate::error::ListPartnerEventSourceAccountsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_partner_event_source_accounts::de_list_partner_event_source_accounts_http_error(response)
        } else {
            crate::protocol_serde::shape_list_partner_event_source_accounts::de_list_partner_event_source_accounts_http_response(response)
        }
    }
}

/// Operation shape for `ListPartnerEventSources`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_partner_event_sources`](crate::client::fluent_builders::ListPartnerEventSources).
///
/// `ParseStrictResponse` impl for `ListPartnerEventSources`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListPartnerEventSources {
    _private: (),
}
impl ListPartnerEventSources {
    /// Creates a new builder-style object to manufacture [`ListPartnerEventSourcesInput`](crate::input::ListPartnerEventSourcesInput).
    pub fn builder() -> crate::input::list_partner_event_sources_input::Builder {
        crate::input::list_partner_event_sources_input::Builder::default()
    }
    /// Creates a new `ListPartnerEventSources` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListPartnerEventSources {
    type Output = std::result::Result<
        crate::output::ListPartnerEventSourcesOutput,
        crate::error::ListPartnerEventSourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_partner_event_sources::de_list_partner_event_sources_http_error(response)
        } else {
            crate::protocol_serde::shape_list_partner_event_sources::de_list_partner_event_sources_http_response(response)
        }
    }
}

/// Operation shape for `ListReplays`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_replays`](crate::client::fluent_builders::ListReplays).
///
/// `ParseStrictResponse` impl for `ListReplays`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListReplays {
    _private: (),
}
impl ListReplays {
    /// Creates a new builder-style object to manufacture [`ListReplaysInput`](crate::input::ListReplaysInput).
    pub fn builder() -> crate::input::list_replays_input::Builder {
        crate::input::list_replays_input::Builder::default()
    }
    /// Creates a new `ListReplays` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListReplays {
    type Output =
        std::result::Result<crate::output::ListReplaysOutput, crate::error::ListReplaysError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_replays::de_list_replays_http_error(response)
        } else {
            crate::protocol_serde::shape_list_replays::de_list_replays_http_response(response)
        }
    }
}

/// Operation shape for `ListRuleNamesByTarget`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_rule_names_by_target`](crate::client::fluent_builders::ListRuleNamesByTarget).
///
/// `ParseStrictResponse` impl for `ListRuleNamesByTarget`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListRuleNamesByTarget {
    _private: (),
}
impl ListRuleNamesByTarget {
    /// Creates a new builder-style object to manufacture [`ListRuleNamesByTargetInput`](crate::input::ListRuleNamesByTargetInput).
    pub fn builder() -> crate::input::list_rule_names_by_target_input::Builder {
        crate::input::list_rule_names_by_target_input::Builder::default()
    }
    /// Creates a new `ListRuleNamesByTarget` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListRuleNamesByTarget {
    type Output = std::result::Result<
        crate::output::ListRuleNamesByTargetOutput,
        crate::error::ListRuleNamesByTargetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_rule_names_by_target::de_list_rule_names_by_target_http_error(response)
        } else {
            crate::protocol_serde::shape_list_rule_names_by_target::de_list_rule_names_by_target_http_response(response)
        }
    }
}

/// Operation shape for `ListRules`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_rules`](crate::client::fluent_builders::ListRules).
///
/// `ParseStrictResponse` impl for `ListRules`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListRules {
    _private: (),
}
impl ListRules {
    /// Creates a new builder-style object to manufacture [`ListRulesInput`](crate::input::ListRulesInput).
    pub fn builder() -> crate::input::list_rules_input::Builder {
        crate::input::list_rules_input::Builder::default()
    }
    /// Creates a new `ListRules` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListRules {
    type Output = std::result::Result<crate::output::ListRulesOutput, crate::error::ListRulesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_rules::de_list_rules_http_error(response)
        } else {
            crate::protocol_serde::shape_list_rules::de_list_rules_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `ListTargetsByRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_targets_by_rule`](crate::client::fluent_builders::ListTargetsByRule).
///
/// `ParseStrictResponse` impl for `ListTargetsByRule`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTargetsByRule {
    _private: (),
}
impl ListTargetsByRule {
    /// Creates a new builder-style object to manufacture [`ListTargetsByRuleInput`](crate::input::ListTargetsByRuleInput).
    pub fn builder() -> crate::input::list_targets_by_rule_input::Builder {
        crate::input::list_targets_by_rule_input::Builder::default()
    }
    /// Creates a new `ListTargetsByRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTargetsByRule {
    type Output = std::result::Result<
        crate::output::ListTargetsByRuleOutput,
        crate::error::ListTargetsByRuleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_targets_by_rule::de_list_targets_by_rule_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_targets_by_rule::de_list_targets_by_rule_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutEvents`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_events`](crate::client::fluent_builders::PutEvents).
///
/// `ParseStrictResponse` impl for `PutEvents`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutEvents {
    _private: (),
}
impl PutEvents {
    /// Creates a new builder-style object to manufacture [`PutEventsInput`](crate::input::PutEventsInput).
    pub fn builder() -> crate::input::put_events_input::Builder {
        crate::input::put_events_input::Builder::default()
    }
    /// Creates a new `PutEvents` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutEvents {
    type Output = std::result::Result<crate::output::PutEventsOutput, crate::error::PutEventsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_events::de_put_events_http_error(response)
        } else {
            crate::protocol_serde::shape_put_events::de_put_events_http_response(response)
        }
    }
}

/// Operation shape for `PutPartnerEvents`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_partner_events`](crate::client::fluent_builders::PutPartnerEvents).
///
/// `ParseStrictResponse` impl for `PutPartnerEvents`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutPartnerEvents {
    _private: (),
}
impl PutPartnerEvents {
    /// Creates a new builder-style object to manufacture [`PutPartnerEventsInput`](crate::input::PutPartnerEventsInput).
    pub fn builder() -> crate::input::put_partner_events_input::Builder {
        crate::input::put_partner_events_input::Builder::default()
    }
    /// Creates a new `PutPartnerEvents` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutPartnerEvents {
    type Output = std::result::Result<
        crate::output::PutPartnerEventsOutput,
        crate::error::PutPartnerEventsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_partner_events::de_put_partner_events_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_put_partner_events::de_put_partner_events_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutPermission`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_permission`](crate::client::fluent_builders::PutPermission).
///
/// `ParseStrictResponse` impl for `PutPermission`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutPermission {
    _private: (),
}
impl PutPermission {
    /// Creates a new builder-style object to manufacture [`PutPermissionInput`](crate::input::PutPermissionInput).
    pub fn builder() -> crate::input::put_permission_input::Builder {
        crate::input::put_permission_input::Builder::default()
    }
    /// Creates a new `PutPermission` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutPermission {
    type Output =
        std::result::Result<crate::output::PutPermissionOutput, crate::error::PutPermissionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_permission::de_put_permission_http_error(response)
        } else {
            crate::protocol_serde::shape_put_permission::de_put_permission_http_response(response)
        }
    }
}

/// Operation shape for `PutRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_rule`](crate::client::fluent_builders::PutRule).
///
/// `ParseStrictResponse` impl for `PutRule`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutRule {
    _private: (),
}
impl PutRule {
    /// Creates a new builder-style object to manufacture [`PutRuleInput`](crate::input::PutRuleInput).
    pub fn builder() -> crate::input::put_rule_input::Builder {
        crate::input::put_rule_input::Builder::default()
    }
    /// Creates a new `PutRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutRule {
    type Output = std::result::Result<crate::output::PutRuleOutput, crate::error::PutRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_rule::de_put_rule_http_error(response)
        } else {
            crate::protocol_serde::shape_put_rule::de_put_rule_http_response(response)
        }
    }
}

/// Operation shape for `PutTargets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_targets`](crate::client::fluent_builders::PutTargets).
///
/// `ParseStrictResponse` impl for `PutTargets`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutTargets {
    _private: (),
}
impl PutTargets {
    /// Creates a new builder-style object to manufacture [`PutTargetsInput`](crate::input::PutTargetsInput).
    pub fn builder() -> crate::input::put_targets_input::Builder {
        crate::input::put_targets_input::Builder::default()
    }
    /// Creates a new `PutTargets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutTargets {
    type Output =
        std::result::Result<crate::output::PutTargetsOutput, crate::error::PutTargetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_targets::de_put_targets_http_error(response)
        } else {
            crate::protocol_serde::shape_put_targets::de_put_targets_http_response(response)
        }
    }
}

/// Operation shape for `RemovePermission`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_permission`](crate::client::fluent_builders::RemovePermission).
///
/// `ParseStrictResponse` impl for `RemovePermission`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemovePermission {
    _private: (),
}
impl RemovePermission {
    /// Creates a new builder-style object to manufacture [`RemovePermissionInput`](crate::input::RemovePermissionInput).
    pub fn builder() -> crate::input::remove_permission_input::Builder {
        crate::input::remove_permission_input::Builder::default()
    }
    /// Creates a new `RemovePermission` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemovePermission {
    type Output = std::result::Result<
        crate::output::RemovePermissionOutput,
        crate::error::RemovePermissionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_remove_permission::de_remove_permission_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_remove_permission::de_remove_permission_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `RemoveTargets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_targets`](crate::client::fluent_builders::RemoveTargets).
///
/// `ParseStrictResponse` impl for `RemoveTargets`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemoveTargets {
    _private: (),
}
impl RemoveTargets {
    /// Creates a new builder-style object to manufacture [`RemoveTargetsInput`](crate::input::RemoveTargetsInput).
    pub fn builder() -> crate::input::remove_targets_input::Builder {
        crate::input::remove_targets_input::Builder::default()
    }
    /// Creates a new `RemoveTargets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveTargets {
    type Output =
        std::result::Result<crate::output::RemoveTargetsOutput, crate::error::RemoveTargetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_remove_targets::de_remove_targets_http_error(response)
        } else {
            crate::protocol_serde::shape_remove_targets::de_remove_targets_http_response(response)
        }
    }
}

/// Operation shape for `StartReplay`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_replay`](crate::client::fluent_builders::StartReplay).
///
/// `ParseStrictResponse` impl for `StartReplay`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartReplay {
    _private: (),
}
impl StartReplay {
    /// Creates a new builder-style object to manufacture [`StartReplayInput`](crate::input::StartReplayInput).
    pub fn builder() -> crate::input::start_replay_input::Builder {
        crate::input::start_replay_input::Builder::default()
    }
    /// Creates a new `StartReplay` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartReplay {
    type Output =
        std::result::Result<crate::output::StartReplayOutput, crate::error::StartReplayError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_replay::de_start_replay_http_error(response)
        } else {
            crate::protocol_serde::shape_start_replay::de_start_replay_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `TestEventPattern`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`test_event_pattern`](crate::client::fluent_builders::TestEventPattern).
///
/// `ParseStrictResponse` impl for `TestEventPattern`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TestEventPattern {
    _private: (),
}
impl TestEventPattern {
    /// Creates a new builder-style object to manufacture [`TestEventPatternInput`](crate::input::TestEventPatternInput).
    pub fn builder() -> crate::input::test_event_pattern_input::Builder {
        crate::input::test_event_pattern_input::Builder::default()
    }
    /// Creates a new `TestEventPattern` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TestEventPattern {
    type Output = std::result::Result<
        crate::output::TestEventPatternOutput,
        crate::error::TestEventPatternError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_test_event_pattern::de_test_event_pattern_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_test_event_pattern::de_test_event_pattern_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateApiDestination`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_api_destination`](crate::client::fluent_builders::UpdateApiDestination).
///
/// `ParseStrictResponse` impl for `UpdateApiDestination`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateApiDestination {
    _private: (),
}
impl UpdateApiDestination {
    /// Creates a new builder-style object to manufacture [`UpdateApiDestinationInput`](crate::input::UpdateApiDestinationInput).
    pub fn builder() -> crate::input::update_api_destination_input::Builder {
        crate::input::update_api_destination_input::Builder::default()
    }
    /// Creates a new `UpdateApiDestination` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateApiDestination {
    type Output = std::result::Result<
        crate::output::UpdateApiDestinationOutput,
        crate::error::UpdateApiDestinationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_api_destination::de_update_api_destination_http_error(response)
        } else {
            crate::protocol_serde::shape_update_api_destination::de_update_api_destination_http_response(response)
        }
    }
}

/// Operation shape for `UpdateArchive`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_archive`](crate::client::fluent_builders::UpdateArchive).
///
/// `ParseStrictResponse` impl for `UpdateArchive`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateArchive {
    _private: (),
}
impl UpdateArchive {
    /// Creates a new builder-style object to manufacture [`UpdateArchiveInput`](crate::input::UpdateArchiveInput).
    pub fn builder() -> crate::input::update_archive_input::Builder {
        crate::input::update_archive_input::Builder::default()
    }
    /// Creates a new `UpdateArchive` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateArchive {
    type Output =
        std::result::Result<crate::output::UpdateArchiveOutput, crate::error::UpdateArchiveError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_archive::de_update_archive_http_error(response)
        } else {
            crate::protocol_serde::shape_update_archive::de_update_archive_http_response(response)
        }
    }
}

/// Operation shape for `UpdateConnection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_connection`](crate::client::fluent_builders::UpdateConnection).
///
/// `ParseStrictResponse` impl for `UpdateConnection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateConnection {
    _private: (),
}
impl UpdateConnection {
    /// Creates a new builder-style object to manufacture [`UpdateConnectionInput`](crate::input::UpdateConnectionInput).
    pub fn builder() -> crate::input::update_connection_input::Builder {
        crate::input::update_connection_input::Builder::default()
    }
    /// Creates a new `UpdateConnection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateConnection {
    type Output = std::result::Result<
        crate::output::UpdateConnectionOutput,
        crate::error::UpdateConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_connection::de_update_connection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_connection::de_update_connection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateEndpoint`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_endpoint`](crate::client::fluent_builders::UpdateEndpoint).
///
/// `ParseStrictResponse` impl for `UpdateEndpoint`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateEndpoint {
    _private: (),
}
impl UpdateEndpoint {
    /// Creates a new builder-style object to manufacture [`UpdateEndpointInput`](crate::input::UpdateEndpointInput).
    pub fn builder() -> crate::input::update_endpoint_input::Builder {
        crate::input::update_endpoint_input::Builder::default()
    }
    /// Creates a new `UpdateEndpoint` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateEndpoint {
    type Output =
        std::result::Result<crate::output::UpdateEndpointOutput, crate::error::UpdateEndpointError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_endpoint::de_update_endpoint_http_error(response)
        } else {
            crate::protocol_serde::shape_update_endpoint::de_update_endpoint_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
