// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEndpointOutput {
    /// <p>The name of the endpoint you asked for information about.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the endpoint you asked for information about.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ARN of the endpoint you asked for information about.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The routing configuration of the endpoint you asked for information about.</p>
    #[doc(hidden)]
    pub routing_config: std::option::Option<crate::types::RoutingConfig>,
    /// <p>Whether replication is enabled or disabled for the endpoint you asked for information about.</p>
    #[doc(hidden)]
    pub replication_config: std::option::Option<crate::types::ReplicationConfig>,
    /// <p>The event buses being used by the endpoint you asked for information about.</p>
    #[doc(hidden)]
    pub event_buses: std::option::Option<std::vec::Vec<crate::types::EndpointEventBus>>,
    /// <p>The ARN of the role used by the endpoint you asked for information about.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the endpoint you asked for information about.</p>
    #[doc(hidden)]
    pub endpoint_id: std::option::Option<std::string::String>,
    /// <p>The URL of the endpoint you asked for information about.</p>
    #[doc(hidden)]
    pub endpoint_url: std::option::Option<std::string::String>,
    /// <p>The current state of the endpoint you asked for information about.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::EndpointState>,
    /// <p>The reason the endpoint you asked for information about is in its current state.</p>
    #[doc(hidden)]
    pub state_reason: std::option::Option<std::string::String>,
    /// <p>The time the endpoint you asked for information about was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time the endpoint you asked for information about was modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeEndpointOutput {
    /// <p>The name of the endpoint you asked for information about.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the endpoint you asked for information about.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ARN of the endpoint you asked for information about.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The routing configuration of the endpoint you asked for information about.</p>
    pub fn routing_config(&self) -> std::option::Option<&crate::types::RoutingConfig> {
        self.routing_config.as_ref()
    }
    /// <p>Whether replication is enabled or disabled for the endpoint you asked for information about.</p>
    pub fn replication_config(&self) -> std::option::Option<&crate::types::ReplicationConfig> {
        self.replication_config.as_ref()
    }
    /// <p>The event buses being used by the endpoint you asked for information about.</p>
    pub fn event_buses(&self) -> std::option::Option<&[crate::types::EndpointEventBus]> {
        self.event_buses.as_deref()
    }
    /// <p>The ARN of the role used by the endpoint you asked for information about.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The ID of the endpoint you asked for information about.</p>
    pub fn endpoint_id(&self) -> std::option::Option<&str> {
        self.endpoint_id.as_deref()
    }
    /// <p>The URL of the endpoint you asked for information about.</p>
    pub fn endpoint_url(&self) -> std::option::Option<&str> {
        self.endpoint_url.as_deref()
    }
    /// <p>The current state of the endpoint you asked for information about.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::EndpointState> {
        self.state.as_ref()
    }
    /// <p>The reason the endpoint you asked for information about is in its current state.</p>
    pub fn state_reason(&self) -> std::option::Option<&str> {
        self.state_reason.as_deref()
    }
    /// <p>The time the endpoint you asked for information about was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the endpoint you asked for information about was modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointOutput`](crate::operation::describe_endpoint::DescribeEndpointOutput).
    pub fn builder() -> crate::operation::describe_endpoint::builders::DescribeEndpointOutputBuilder
    {
        crate::operation::describe_endpoint::builders::DescribeEndpointOutputBuilder::default()
    }
}

/// A builder for [`DescribeEndpointOutput`](crate::operation::describe_endpoint::DescribeEndpointOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEndpointOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) routing_config: std::option::Option<crate::types::RoutingConfig>,
    pub(crate) replication_config: std::option::Option<crate::types::ReplicationConfig>,
    pub(crate) event_buses: std::option::Option<std::vec::Vec<crate::types::EndpointEventBus>>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) endpoint_id: std::option::Option<std::string::String>,
    pub(crate) endpoint_url: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::EndpointState>,
    pub(crate) state_reason: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeEndpointOutputBuilder {
    /// <p>The name of the endpoint you asked for information about.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the endpoint you asked for information about.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the endpoint you asked for information about.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the endpoint you asked for information about.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The ARN of the endpoint you asked for information about.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the endpoint you asked for information about.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The routing configuration of the endpoint you asked for information about.</p>
    pub fn routing_config(mut self, input: crate::types::RoutingConfig) -> Self {
        self.routing_config = Some(input);
        self
    }
    /// <p>The routing configuration of the endpoint you asked for information about.</p>
    pub fn set_routing_config(
        mut self,
        input: std::option::Option<crate::types::RoutingConfig>,
    ) -> Self {
        self.routing_config = input;
        self
    }
    /// <p>Whether replication is enabled or disabled for the endpoint you asked for information about.</p>
    pub fn replication_config(mut self, input: crate::types::ReplicationConfig) -> Self {
        self.replication_config = Some(input);
        self
    }
    /// <p>Whether replication is enabled or disabled for the endpoint you asked for information about.</p>
    pub fn set_replication_config(
        mut self,
        input: std::option::Option<crate::types::ReplicationConfig>,
    ) -> Self {
        self.replication_config = input;
        self
    }
    /// Appends an item to `event_buses`.
    ///
    /// To override the contents of this collection use [`set_event_buses`](Self::set_event_buses).
    ///
    /// <p>The event buses being used by the endpoint you asked for information about.</p>
    pub fn event_buses(mut self, input: crate::types::EndpointEventBus) -> Self {
        let mut v = self.event_buses.unwrap_or_default();
        v.push(input);
        self.event_buses = Some(v);
        self
    }
    /// <p>The event buses being used by the endpoint you asked for information about.</p>
    pub fn set_event_buses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EndpointEventBus>>,
    ) -> Self {
        self.event_buses = input;
        self
    }
    /// <p>The ARN of the role used by the endpoint you asked for information about.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the role used by the endpoint you asked for information about.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ID of the endpoint you asked for information about.</p>
    pub fn endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_id = Some(input.into());
        self
    }
    /// <p>The ID of the endpoint you asked for information about.</p>
    pub fn set_endpoint_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint_id = input;
        self
    }
    /// <p>The URL of the endpoint you asked for information about.</p>
    pub fn endpoint_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_url = Some(input.into());
        self
    }
    /// <p>The URL of the endpoint you asked for information about.</p>
    pub fn set_endpoint_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint_url = input;
        self
    }
    /// <p>The current state of the endpoint you asked for information about.</p>
    pub fn state(mut self, input: crate::types::EndpointState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The current state of the endpoint you asked for information about.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::EndpointState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The reason the endpoint you asked for information about is in its current state.</p>
    pub fn state_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.state_reason = Some(input.into());
        self
    }
    /// <p>The reason the endpoint you asked for information about is in its current state.</p>
    pub fn set_state_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>The time the endpoint you asked for information about was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time the endpoint you asked for information about was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The last time the endpoint you asked for information about was modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The last time the endpoint you asked for information about was modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEndpointOutput`](crate::operation::describe_endpoint::DescribeEndpointOutput).
    pub fn build(self) -> crate::operation::describe_endpoint::DescribeEndpointOutput {
        crate::operation::describe_endpoint::DescribeEndpointOutput {
            name: self.name,
            description: self.description,
            arn: self.arn,
            routing_config: self.routing_config,
            replication_config: self.replication_config,
            event_buses: self.event_buses,
            role_arn: self.role_arn,
            endpoint_id: self.endpoint_id,
            endpoint_url: self.endpoint_url,
            state: self.state,
            state_reason: self.state_reason,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            _request_id: self._request_id,
        }
    }
}
