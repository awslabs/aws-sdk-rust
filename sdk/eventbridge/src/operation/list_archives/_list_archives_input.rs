// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListArchivesInput {
    /// <p>A name prefix to filter the archives returned. Only archives with name that match the prefix are returned.</p>
    pub name_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the event source associated with the archive.</p>
    pub event_source_arn: ::std::option::Option<::std::string::String>,
    /// <p>The state of the archive.</p>
    pub state: ::std::option::Option<crate::types::ArchiveState>,
    /// <p>The token returned by a previous call to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return.</p>
    pub limit: ::std::option::Option<i32>,
}
impl ListArchivesInput {
    /// <p>A name prefix to filter the archives returned. Only archives with name that match the prefix are returned.</p>
    pub fn name_prefix(&self) -> ::std::option::Option<&str> {
        self.name_prefix.as_deref()
    }
    /// <p>The ARN of the event source associated with the archive.</p>
    pub fn event_source_arn(&self) -> ::std::option::Option<&str> {
        self.event_source_arn.as_deref()
    }
    /// <p>The state of the archive.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ArchiveState> {
        self.state.as_ref()
    }
    /// <p>The token returned by a previous call to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
}
impl ListArchivesInput {
    /// Creates a new builder-style object to manufacture [`ListArchivesInput`](crate::operation::list_archives::ListArchivesInput).
    pub fn builder() -> crate::operation::list_archives::builders::ListArchivesInputBuilder {
        crate::operation::list_archives::builders::ListArchivesInputBuilder::default()
    }
}

/// A builder for [`ListArchivesInput`](crate::operation::list_archives::ListArchivesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListArchivesInputBuilder {
    pub(crate) name_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) event_source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::ArchiveState>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i32>,
}
impl ListArchivesInputBuilder {
    /// <p>A name prefix to filter the archives returned. Only archives with name that match the prefix are returned.</p>
    pub fn name_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name prefix to filter the archives returned. Only archives with name that match the prefix are returned.</p>
    pub fn set_name_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name_prefix = input;
        self
    }
    /// <p>A name prefix to filter the archives returned. Only archives with name that match the prefix are returned.</p>
    pub fn get_name_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.name_prefix
    }
    /// <p>The ARN of the event source associated with the archive.</p>
    pub fn event_source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the event source associated with the archive.</p>
    pub fn set_event_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_source_arn = input;
        self
    }
    /// <p>The ARN of the event source associated with the archive.</p>
    pub fn get_event_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_source_arn
    }
    /// <p>The state of the archive.</p>
    pub fn state(mut self, input: crate::types::ArchiveState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the archive.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ArchiveState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the archive.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ArchiveState> {
        &self.state
    }
    /// <p>The token returned by a previous call to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token returned by a previous call to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token returned by a previous call to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// Consumes the builder and constructs a [`ListArchivesInput`](crate::operation::list_archives::ListArchivesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_archives::ListArchivesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_archives::ListArchivesInput {
            name_prefix: self.name_prefix,
            event_source_arn: self.event_source_arn,
            state: self.state,
            next_token: self.next_token,
            limit: self.limit,
        })
    }
}
