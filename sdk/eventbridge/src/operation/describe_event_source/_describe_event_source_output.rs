// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEventSourceOutput {
    /// <p>The ARN of the partner event source.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the SaaS partner that created the event source.</p>
    #[doc(hidden)]
    pub created_by: std::option::Option<std::string::String>,
    /// <p>The date and time that the event source was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the event source will expire if you do not create a matching event bus.</p>
    #[doc(hidden)]
    pub expiration_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name of the partner event source.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The state of the event source. If it is ACTIVE, you have already created a matching event bus for this event source, and that event bus is active. If it is PENDING, either you haven't yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have created a matching event bus, but the event source has since been deleted.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::EventSourceState>,
    _request_id: Option<String>,
}
impl DescribeEventSourceOutput {
    /// <p>The ARN of the partner event source.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the SaaS partner that created the event source.</p>
    pub fn created_by(&self) -> std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The date and time that the event source was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time that the event source will expire if you do not create a matching event bus.</p>
    pub fn expiration_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expiration_time.as_ref()
    }
    /// <p>The name of the partner event source.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The state of the event source. If it is ACTIVE, you have already created a matching event bus for this event source, and that event bus is active. If it is PENDING, either you haven't yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have created a matching event bus, but the event source has since been deleted.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::EventSourceState> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeEventSourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEventSourceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEventSourceOutput`](crate::operation::describe_event_source::DescribeEventSourceOutput).
    pub fn builder(
    ) -> crate::operation::describe_event_source::builders::DescribeEventSourceOutputBuilder {
        crate::operation::describe_event_source::builders::DescribeEventSourceOutputBuilder::default(
        )
    }
}

/// A builder for [`DescribeEventSourceOutput`](crate::operation::describe_event_source::DescribeEventSourceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEventSourceOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) created_by: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) expiration_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::EventSourceState>,
    _request_id: Option<String>,
}
impl DescribeEventSourceOutputBuilder {
    /// <p>The ARN of the partner event source.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the partner event source.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the SaaS partner that created the event source.</p>
    pub fn created_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_by = Some(input.into());
        self
    }
    /// <p>The name of the SaaS partner that created the event source.</p>
    pub fn set_created_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The date and time that the event source was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The date and time that the event source was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time that the event source will expire if you do not create a matching event bus.</p>
    pub fn expiration_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expiration_time = Some(input);
        self
    }
    /// <p>The date and time that the event source will expire if you do not create a matching event bus.</p>
    pub fn set_expiration_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.expiration_time = input;
        self
    }
    /// <p>The name of the partner event source.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the partner event source.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The state of the event source. If it is ACTIVE, you have already created a matching event bus for this event source, and that event bus is active. If it is PENDING, either you haven't yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have created a matching event bus, but the event source has since been deleted.</p>
    pub fn state(mut self, input: crate::types::EventSourceState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the event source. If it is ACTIVE, you have already created a matching event bus for this event source, and that event bus is active. If it is PENDING, either you haven't yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have created a matching event bus, but the event source has since been deleted.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::EventSourceState>) -> Self {
        self.state = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEventSourceOutput`](crate::operation::describe_event_source::DescribeEventSourceOutput).
    pub fn build(self) -> crate::operation::describe_event_source::DescribeEventSourceOutput {
        crate::operation::describe_event_source::DescribeEventSourceOutput {
            arn: self.arn,
            created_by: self.created_by,
            creation_time: self.creation_time,
            expiration_time: self.expiration_time,
            name: self.name,
            state: self.state,
            _request_id: self._request_id,
        }
    }
}
