// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConnectionInput {
    /// <p>The name for the connection to create.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description for the connection to create.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The type of authorization to use for the connection.</p>
    #[doc(hidden)]
    pub authorization_type: std::option::Option<crate::types::ConnectionAuthorizationType>,
    /// <p>A <code>CreateConnectionAuthRequestParameters</code> object that contains the authorization parameters to use to authorize with the endpoint. </p>
    #[doc(hidden)]
    pub auth_parameters: std::option::Option<crate::types::CreateConnectionAuthRequestParameters>,
}
impl CreateConnectionInput {
    /// <p>The name for the connection to create.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description for the connection to create.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of authorization to use for the connection.</p>
    pub fn authorization_type(
        &self,
    ) -> std::option::Option<&crate::types::ConnectionAuthorizationType> {
        self.authorization_type.as_ref()
    }
    /// <p>A <code>CreateConnectionAuthRequestParameters</code> object that contains the authorization parameters to use to authorize with the endpoint. </p>
    pub fn auth_parameters(
        &self,
    ) -> std::option::Option<&crate::types::CreateConnectionAuthRequestParameters> {
        self.auth_parameters.as_ref()
    }
}
impl CreateConnectionInput {
    /// Creates a new builder-style object to manufacture [`CreateConnectionInput`](crate::operation::create_connection::CreateConnectionInput).
    pub fn builder() -> crate::operation::create_connection::builders::CreateConnectionInputBuilder
    {
        crate::operation::create_connection::builders::CreateConnectionInputBuilder::default()
    }
}

/// A builder for [`CreateConnectionInput`](crate::operation::create_connection::CreateConnectionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateConnectionInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) authorization_type: std::option::Option<crate::types::ConnectionAuthorizationType>,
    pub(crate) auth_parameters:
        std::option::Option<crate::types::CreateConnectionAuthRequestParameters>,
}
impl CreateConnectionInputBuilder {
    /// <p>The name for the connection to create.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name for the connection to create.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description for the connection to create.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the connection to create.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The type of authorization to use for the connection.</p>
    pub fn authorization_type(mut self, input: crate::types::ConnectionAuthorizationType) -> Self {
        self.authorization_type = Some(input);
        self
    }
    /// <p>The type of authorization to use for the connection.</p>
    pub fn set_authorization_type(
        mut self,
        input: std::option::Option<crate::types::ConnectionAuthorizationType>,
    ) -> Self {
        self.authorization_type = input;
        self
    }
    /// <p>A <code>CreateConnectionAuthRequestParameters</code> object that contains the authorization parameters to use to authorize with the endpoint. </p>
    pub fn auth_parameters(
        mut self,
        input: crate::types::CreateConnectionAuthRequestParameters,
    ) -> Self {
        self.auth_parameters = Some(input);
        self
    }
    /// <p>A <code>CreateConnectionAuthRequestParameters</code> object that contains the authorization parameters to use to authorize with the endpoint. </p>
    pub fn set_auth_parameters(
        mut self,
        input: std::option::Option<crate::types::CreateConnectionAuthRequestParameters>,
    ) -> Self {
        self.auth_parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateConnectionInput`](crate::operation::create_connection::CreateConnectionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_connection::CreateConnectionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_connection::CreateConnectionInput {
            name: self.name,
            description: self.description,
            authorization_type: self.authorization_type,
            auth_parameters: self.auth_parameters,
        })
    }
}
