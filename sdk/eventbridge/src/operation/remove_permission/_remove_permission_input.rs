// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RemovePermissionInput {
    /// <p>The statement ID corresponding to the account that is no longer allowed to put events to the default event bus.</p>
    pub statement_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to remove all permissions.</p>
    pub remove_all_permissions: ::std::option::Option<bool>,
    /// <p>The name of the event bus to revoke permissions for. If you omit this, the default event bus is used.</p>
    pub event_bus_name: ::std::option::Option<::std::string::String>,
}
impl RemovePermissionInput {
    /// <p>The statement ID corresponding to the account that is no longer allowed to put events to the default event bus.</p>
    pub fn statement_id(&self) -> ::std::option::Option<&str> {
        self.statement_id.as_deref()
    }
    /// <p>Specifies whether to remove all permissions.</p>
    pub fn remove_all_permissions(&self) -> ::std::option::Option<bool> {
        self.remove_all_permissions
    }
    /// <p>The name of the event bus to revoke permissions for. If you omit this, the default event bus is used.</p>
    pub fn event_bus_name(&self) -> ::std::option::Option<&str> {
        self.event_bus_name.as_deref()
    }
}
impl RemovePermissionInput {
    /// Creates a new builder-style object to manufacture [`RemovePermissionInput`](crate::operation::remove_permission::RemovePermissionInput).
    pub fn builder() -> crate::operation::remove_permission::builders::RemovePermissionInputBuilder {
        crate::operation::remove_permission::builders::RemovePermissionInputBuilder::default()
    }
}

/// A builder for [`RemovePermissionInput`](crate::operation::remove_permission::RemovePermissionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RemovePermissionInputBuilder {
    pub(crate) statement_id: ::std::option::Option<::std::string::String>,
    pub(crate) remove_all_permissions: ::std::option::Option<bool>,
    pub(crate) event_bus_name: ::std::option::Option<::std::string::String>,
}
impl RemovePermissionInputBuilder {
    /// <p>The statement ID corresponding to the account that is no longer allowed to put events to the default event bus.</p>
    pub fn statement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The statement ID corresponding to the account that is no longer allowed to put events to the default event bus.</p>
    pub fn set_statement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement_id = input;
        self
    }
    /// <p>The statement ID corresponding to the account that is no longer allowed to put events to the default event bus.</p>
    pub fn get_statement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement_id
    }
    /// <p>Specifies whether to remove all permissions.</p>
    pub fn remove_all_permissions(mut self, input: bool) -> Self {
        self.remove_all_permissions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to remove all permissions.</p>
    pub fn set_remove_all_permissions(mut self, input: ::std::option::Option<bool>) -> Self {
        self.remove_all_permissions = input;
        self
    }
    /// <p>Specifies whether to remove all permissions.</p>
    pub fn get_remove_all_permissions(&self) -> &::std::option::Option<bool> {
        &self.remove_all_permissions
    }
    /// <p>The name of the event bus to revoke permissions for. If you omit this, the default event bus is used.</p>
    pub fn event_bus_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_bus_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the event bus to revoke permissions for. If you omit this, the default event bus is used.</p>
    pub fn set_event_bus_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_bus_name = input;
        self
    }
    /// <p>The name of the event bus to revoke permissions for. If you omit this, the default event bus is used.</p>
    pub fn get_event_bus_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_bus_name
    }
    /// Consumes the builder and constructs a [`RemovePermissionInput`](crate::operation::remove_permission::RemovePermissionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::remove_permission::RemovePermissionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::remove_permission::RemovePermissionInput {
            statement_id: self.statement_id,
            remove_all_permissions: self.remove_all_permissions,
            event_bus_name: self.event_bus_name,
        })
    }
}
