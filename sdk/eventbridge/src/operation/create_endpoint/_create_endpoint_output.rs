// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEndpointOutput {
    /// <p>The name of the endpoint that was created by this request.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the endpoint that was created by this request.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The routing configuration defined by this request.</p>
    pub routing_config: ::std::option::Option<crate::types::RoutingConfig>,
    /// <p>Whether event replication was enabled or disabled by this request.</p>
    pub replication_config: ::std::option::Option<crate::types::ReplicationConfig>,
    /// <p>The event buses used by this request.</p>
    pub event_buses: ::std::option::Option<::std::vec::Vec<crate::types::EndpointEventBus>>,
    /// <p>The ARN of the role used by event replication for this request.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The state of the endpoint that was created by this request.</p>
    pub state: ::std::option::Option<crate::types::EndpointState>,
    _request_id: Option<String>,
}
impl CreateEndpointOutput {
    /// <p>The name of the endpoint that was created by this request.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of the endpoint that was created by this request.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The routing configuration defined by this request.</p>
    pub fn routing_config(&self) -> ::std::option::Option<&crate::types::RoutingConfig> {
        self.routing_config.as_ref()
    }
    /// <p>Whether event replication was enabled or disabled by this request.</p>
    pub fn replication_config(&self) -> ::std::option::Option<&crate::types::ReplicationConfig> {
        self.replication_config.as_ref()
    }
    /// <p>The event buses used by this request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_buses.is_none()`.
    pub fn event_buses(&self) -> &[crate::types::EndpointEventBus] {
        self.event_buses.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the role used by event replication for this request.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The state of the endpoint that was created by this request.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::EndpointState> {
        self.state.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for CreateEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateEndpointOutput`](crate::operation::create_endpoint::CreateEndpointOutput).
    pub fn builder() -> crate::operation::create_endpoint::builders::CreateEndpointOutputBuilder {
        crate::operation::create_endpoint::builders::CreateEndpointOutputBuilder::default()
    }
}

/// A builder for [`CreateEndpointOutput`](crate::operation::create_endpoint::CreateEndpointOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateEndpointOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) routing_config: ::std::option::Option<crate::types::RoutingConfig>,
    pub(crate) replication_config: ::std::option::Option<crate::types::ReplicationConfig>,
    pub(crate) event_buses: ::std::option::Option<::std::vec::Vec<crate::types::EndpointEventBus>>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::EndpointState>,
    _request_id: Option<String>,
}
impl CreateEndpointOutputBuilder {
    /// <p>The name of the endpoint that was created by this request.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the endpoint that was created by this request.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the endpoint that was created by this request.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ARN of the endpoint that was created by this request.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the endpoint that was created by this request.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the endpoint that was created by this request.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The routing configuration defined by this request.</p>
    pub fn routing_config(mut self, input: crate::types::RoutingConfig) -> Self {
        self.routing_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The routing configuration defined by this request.</p>
    pub fn set_routing_config(mut self, input: ::std::option::Option<crate::types::RoutingConfig>) -> Self {
        self.routing_config = input;
        self
    }
    /// <p>The routing configuration defined by this request.</p>
    pub fn get_routing_config(&self) -> &::std::option::Option<crate::types::RoutingConfig> {
        &self.routing_config
    }
    /// <p>Whether event replication was enabled or disabled by this request.</p>
    pub fn replication_config(mut self, input: crate::types::ReplicationConfig) -> Self {
        self.replication_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether event replication was enabled or disabled by this request.</p>
    pub fn set_replication_config(mut self, input: ::std::option::Option<crate::types::ReplicationConfig>) -> Self {
        self.replication_config = input;
        self
    }
    /// <p>Whether event replication was enabled or disabled by this request.</p>
    pub fn get_replication_config(&self) -> &::std::option::Option<crate::types::ReplicationConfig> {
        &self.replication_config
    }
    /// Appends an item to `event_buses`.
    ///
    /// To override the contents of this collection use [`set_event_buses`](Self::set_event_buses).
    ///
    /// <p>The event buses used by this request.</p>
    pub fn event_buses(mut self, input: crate::types::EndpointEventBus) -> Self {
        let mut v = self.event_buses.unwrap_or_default();
        v.push(input);
        self.event_buses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The event buses used by this request.</p>
    pub fn set_event_buses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EndpointEventBus>>) -> Self {
        self.event_buses = input;
        self
    }
    /// <p>The event buses used by this request.</p>
    pub fn get_event_buses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EndpointEventBus>> {
        &self.event_buses
    }
    /// <p>The ARN of the role used by event replication for this request.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the role used by event replication for this request.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the role used by event replication for this request.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The state of the endpoint that was created by this request.</p>
    pub fn state(mut self, input: crate::types::EndpointState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the endpoint that was created by this request.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::EndpointState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the endpoint that was created by this request.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::EndpointState> {
        &self.state
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateEndpointOutput`](crate::operation::create_endpoint::CreateEndpointOutput).
    pub fn build(self) -> crate::operation::create_endpoint::CreateEndpointOutput {
        crate::operation::create_endpoint::CreateEndpointOutput {
            name: self.name,
            arn: self.arn,
            routing_config: self.routing_config,
            replication_config: self.replication_config,
            event_buses: self.event_buses,
            role_arn: self.role_arn,
            state: self.state,
            _request_id: self._request_id,
        }
    }
}
