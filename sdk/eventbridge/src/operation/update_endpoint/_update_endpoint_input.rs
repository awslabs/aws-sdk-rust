// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateEndpointInput {
    /// <p>The name of the endpoint you want to update.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description for the endpoint.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Configure the routing policy, including the health check and secondary Region..</p>
    #[doc(hidden)]
    pub routing_config: std::option::Option<crate::types::RoutingConfig>,
    /// <p>Whether event replication was enabled or disabled by this request.</p>
    #[doc(hidden)]
    pub replication_config: std::option::Option<crate::types::ReplicationConfig>,
    /// <p>Define event buses used for replication.</p>
    #[doc(hidden)]
    pub event_buses: std::option::Option<std::vec::Vec<crate::types::EndpointEventBus>>,
    /// <p>The ARN of the role used by event replication for this request.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
}
impl UpdateEndpointInput {
    /// <p>The name of the endpoint you want to update.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description for the endpoint.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Configure the routing policy, including the health check and secondary Region..</p>
    pub fn routing_config(&self) -> std::option::Option<&crate::types::RoutingConfig> {
        self.routing_config.as_ref()
    }
    /// <p>Whether event replication was enabled or disabled by this request.</p>
    pub fn replication_config(&self) -> std::option::Option<&crate::types::ReplicationConfig> {
        self.replication_config.as_ref()
    }
    /// <p>Define event buses used for replication.</p>
    pub fn event_buses(&self) -> std::option::Option<&[crate::types::EndpointEventBus]> {
        self.event_buses.as_deref()
    }
    /// <p>The ARN of the role used by event replication for this request.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl UpdateEndpointInput {
    /// Creates a new builder-style object to manufacture [`UpdateEndpointInput`](crate::operation::update_endpoint::UpdateEndpointInput).
    pub fn builder() -> crate::operation::update_endpoint::builders::UpdateEndpointInputBuilder {
        crate::operation::update_endpoint::builders::UpdateEndpointInputBuilder::default()
    }
}

/// A builder for [`UpdateEndpointInput`](crate::operation::update_endpoint::UpdateEndpointInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateEndpointInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) routing_config: std::option::Option<crate::types::RoutingConfig>,
    pub(crate) replication_config: std::option::Option<crate::types::ReplicationConfig>,
    pub(crate) event_buses: std::option::Option<std::vec::Vec<crate::types::EndpointEventBus>>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
}
impl UpdateEndpointInputBuilder {
    /// <p>The name of the endpoint you want to update.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the endpoint you want to update.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description for the endpoint.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the endpoint.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Configure the routing policy, including the health check and secondary Region..</p>
    pub fn routing_config(mut self, input: crate::types::RoutingConfig) -> Self {
        self.routing_config = Some(input);
        self
    }
    /// <p>Configure the routing policy, including the health check and secondary Region..</p>
    pub fn set_routing_config(
        mut self,
        input: std::option::Option<crate::types::RoutingConfig>,
    ) -> Self {
        self.routing_config = input;
        self
    }
    /// <p>Whether event replication was enabled or disabled by this request.</p>
    pub fn replication_config(mut self, input: crate::types::ReplicationConfig) -> Self {
        self.replication_config = Some(input);
        self
    }
    /// <p>Whether event replication was enabled or disabled by this request.</p>
    pub fn set_replication_config(
        mut self,
        input: std::option::Option<crate::types::ReplicationConfig>,
    ) -> Self {
        self.replication_config = input;
        self
    }
    /// Appends an item to `event_buses`.
    ///
    /// To override the contents of this collection use [`set_event_buses`](Self::set_event_buses).
    ///
    /// <p>Define event buses used for replication.</p>
    pub fn event_buses(mut self, input: crate::types::EndpointEventBus) -> Self {
        let mut v = self.event_buses.unwrap_or_default();
        v.push(input);
        self.event_buses = Some(v);
        self
    }
    /// <p>Define event buses used for replication.</p>
    pub fn set_event_buses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EndpointEventBus>>,
    ) -> Self {
        self.event_buses = input;
        self
    }
    /// <p>The ARN of the role used by event replication for this request.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the role used by event replication for this request.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateEndpointInput`](crate::operation::update_endpoint::UpdateEndpointInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_endpoint::UpdateEndpointInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_endpoint::UpdateEndpointInput {
            name: self.name,
            description: self.description,
            routing_config: self.routing_config,
            replication_config: self.replication_config,
            event_buses: self.event_buses,
            role_arn: self.role_arn,
        })
    }
}
