// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ExecutionBlockType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let executionblocktype = unimplemented!();
/// match executionblocktype {
///     ExecutionBlockType::RegionSwitch => { /* ... */ },
///     ExecutionBlockType::RoutingControl => { /* ... */ },
///     ExecutionBlockType::Aurora => { /* ... */ },
///     ExecutionBlockType::CustomActionLambda => { /* ... */ },
///     ExecutionBlockType::Ec2Asg => { /* ... */ },
///     ExecutionBlockType::Ecs => { /* ... */ },
///     ExecutionBlockType::EksResourceScaling => { /* ... */ },
///     ExecutionBlockType::ExecutionApproval => { /* ... */ },
///     ExecutionBlockType::Parallel => { /* ... */ },
///     ExecutionBlockType::Route53HealthCheck => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `executionblocktype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ExecutionBlockType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ExecutionBlockType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ExecutionBlockType::NewFeature` is defined.
/// Specifically, when `executionblocktype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ExecutionBlockType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ExecutionBlockType {
    #[allow(missing_docs)] // documentation missing in model
    RegionSwitch,
    #[allow(missing_docs)] // documentation missing in model
    RoutingControl,
    #[allow(missing_docs)] // documentation missing in model
    Aurora,
    #[allow(missing_docs)] // documentation missing in model
    CustomActionLambda,
    #[allow(missing_docs)] // documentation missing in model
    Ec2Asg,
    #[allow(missing_docs)] // documentation missing in model
    Ecs,
    #[allow(missing_docs)] // documentation missing in model
    EksResourceScaling,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionApproval,
    #[allow(missing_docs)] // documentation missing in model
    Parallel,
    #[allow(missing_docs)] // documentation missing in model
    Route53HealthCheck,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ExecutionBlockType {
    fn from(s: &str) -> Self {
        match s {
            "ARCRegionSwitchPlan" => ExecutionBlockType::RegionSwitch,
            "ARCRoutingControl" => ExecutionBlockType::RoutingControl,
            "AuroraGlobalDatabase" => ExecutionBlockType::Aurora,
            "CustomActionLambda" => ExecutionBlockType::CustomActionLambda,
            "EC2AutoScaling" => ExecutionBlockType::Ec2Asg,
            "ECSServiceScaling" => ExecutionBlockType::Ecs,
            "EKSResourceScaling" => ExecutionBlockType::EksResourceScaling,
            "ManualApproval" => ExecutionBlockType::ExecutionApproval,
            "Parallel" => ExecutionBlockType::Parallel,
            "Route53HealthCheck" => ExecutionBlockType::Route53HealthCheck,
            other => ExecutionBlockType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ExecutionBlockType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ExecutionBlockType::from(s))
    }
}
impl ExecutionBlockType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ExecutionBlockType::RegionSwitch => "ARCRegionSwitchPlan",
            ExecutionBlockType::RoutingControl => "ARCRoutingControl",
            ExecutionBlockType::Aurora => "AuroraGlobalDatabase",
            ExecutionBlockType::CustomActionLambda => "CustomActionLambda",
            ExecutionBlockType::Ec2Asg => "EC2AutoScaling",
            ExecutionBlockType::Ecs => "ECSServiceScaling",
            ExecutionBlockType::EksResourceScaling => "EKSResourceScaling",
            ExecutionBlockType::ExecutionApproval => "ManualApproval",
            ExecutionBlockType::Parallel => "Parallel",
            ExecutionBlockType::Route53HealthCheck => "Route53HealthCheck",
            ExecutionBlockType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ARCRegionSwitchPlan",
            "ARCRoutingControl",
            "AuroraGlobalDatabase",
            "CustomActionLambda",
            "EC2AutoScaling",
            "ECSServiceScaling",
            "EKSResourceScaling",
            "ManualApproval",
            "Parallel",
            "Route53HealthCheck",
        ]
    }
}
impl ::std::convert::AsRef<str> for ExecutionBlockType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ExecutionBlockType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ExecutionBlockType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ExecutionBlockType::RegionSwitch => write!(f, "ARCRegionSwitchPlan"),
            ExecutionBlockType::RoutingControl => write!(f, "ARCRoutingControl"),
            ExecutionBlockType::Aurora => write!(f, "AuroraGlobalDatabase"),
            ExecutionBlockType::CustomActionLambda => write!(f, "CustomActionLambda"),
            ExecutionBlockType::Ec2Asg => write!(f, "EC2AutoScaling"),
            ExecutionBlockType::Ecs => write!(f, "ECSServiceScaling"),
            ExecutionBlockType::EksResourceScaling => write!(f, "EKSResourceScaling"),
            ExecutionBlockType::ExecutionApproval => write!(f, "ManualApproval"),
            ExecutionBlockType::Parallel => write!(f, "Parallel"),
            ExecutionBlockType::Route53HealthCheck => write!(f, "Route53HealthCheck"),
            ExecutionBlockType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
