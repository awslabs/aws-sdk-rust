// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ExecutionEventType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let executioneventtype = unimplemented!();
/// match executioneventtype {
///     ExecutionEventType::ExecutionBehaviorChangedToGraceful => { /* ... */ },
///     ExecutionEventType::ExecutionBehaviorChangedToUngraceful => { /* ... */ },
///     ExecutionEventType::ExecutionCanceled => { /* ... */ },
///     ExecutionEventType::ExecutionCanceling => { /* ... */ },
///     ExecutionEventType::ExecutionFailed => { /* ... */ },
///     ExecutionEventType::ExecutionPaused => { /* ... */ },
///     ExecutionEventType::ExecutionPausing => { /* ... */ },
///     ExecutionEventType::ExecutionPending => { /* ... */ },
///     ExecutionEventType::ExecutionPendingApproval => { /* ... */ },
///     ExecutionEventType::ExecutionPendingChildPlanManualApproval => { /* ... */ },
///     ExecutionEventType::ExecutionStarted => { /* ... */ },
///     ExecutionEventType::ExecutionSucceeded => { /* ... */ },
///     ExecutionEventType::ExecutionSuccessMonitoringApplicationHealth => { /* ... */ },
///     ExecutionEventType::StepCanceled => { /* ... */ },
///     ExecutionEventType::StepExecutionBehaviorChangedToUngraceful => { /* ... */ },
///     ExecutionEventType::StepFailed => { /* ... */ },
///     ExecutionEventType::StepPausedByError => { /* ... */ },
///     ExecutionEventType::StepPausedByOperator => { /* ... */ },
///     ExecutionEventType::StepPendingApplicationHealthMonitor => { /* ... */ },
///     ExecutionEventType::StepPendingApproval => { /* ... */ },
///     ExecutionEventType::StepSkipped => { /* ... */ },
///     ExecutionEventType::StepStarted => { /* ... */ },
///     ExecutionEventType::StepSucceeded => { /* ... */ },
///     ExecutionEventType::StepUpdate => { /* ... */ },
///     ExecutionEventType::UnknownValue => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `executioneventtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ExecutionEventType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ExecutionEventType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ExecutionEventType::NewFeature` is defined.
/// Specifically, when `executioneventtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ExecutionEventType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
///
/// _Note: `ExecutionEventType::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ExecutionEventType {
    #[allow(missing_docs)] // documentation missing in model
    ExecutionBehaviorChangedToGraceful,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionBehaviorChangedToUngraceful,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionCanceled,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionCanceling,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionFailed,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionPaused,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionPausing,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionPending,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionPendingApproval,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionPendingChildPlanManualApproval,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionStarted,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionSucceeded,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionSuccessMonitoringApplicationHealth,
    #[allow(missing_docs)] // documentation missing in model
    StepCanceled,
    #[allow(missing_docs)] // documentation missing in model
    StepExecutionBehaviorChangedToUngraceful,
    #[allow(missing_docs)] // documentation missing in model
    StepFailed,
    #[allow(missing_docs)] // documentation missing in model
    StepPausedByError,
    #[allow(missing_docs)] // documentation missing in model
    StepPausedByOperator,
    #[allow(missing_docs)] // documentation missing in model
    StepPendingApplicationHealthMonitor,
    #[allow(missing_docs)] // documentation missing in model
    StepPendingApproval,
    #[allow(missing_docs)] // documentation missing in model
    StepSkipped,
    #[allow(missing_docs)] // documentation missing in model
    StepStarted,
    #[allow(missing_docs)] // documentation missing in model
    StepSucceeded,
    #[allow(missing_docs)] // documentation missing in model
    StepUpdate,
    ///
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ExecutionEventType {
    fn from(s: &str) -> Self {
        match s {
            "executionBehaviorChangedToGraceful" => ExecutionEventType::ExecutionBehaviorChangedToGraceful,
            "executionBehaviorChangedToUngraceful" => ExecutionEventType::ExecutionBehaviorChangedToUngraceful,
            "executionCanceled" => ExecutionEventType::ExecutionCanceled,
            "executionCanceling" => ExecutionEventType::ExecutionCanceling,
            "executionFailed" => ExecutionEventType::ExecutionFailed,
            "executionPaused" => ExecutionEventType::ExecutionPaused,
            "executionPausing" => ExecutionEventType::ExecutionPausing,
            "executionPending" => ExecutionEventType::ExecutionPending,
            "executionPendingApproval" => ExecutionEventType::ExecutionPendingApproval,
            "executionPendingChildPlanManualApproval" => ExecutionEventType::ExecutionPendingChildPlanManualApproval,
            "executionStarted" => ExecutionEventType::ExecutionStarted,
            "executionSucceeded" => ExecutionEventType::ExecutionSucceeded,
            "executionSuccessMonitoringApplicationHealth" => ExecutionEventType::ExecutionSuccessMonitoringApplicationHealth,
            "stepCanceled" => ExecutionEventType::StepCanceled,
            "stepExecutionBehaviorChangedToUngraceful" => ExecutionEventType::StepExecutionBehaviorChangedToUngraceful,
            "stepFailed" => ExecutionEventType::StepFailed,
            "stepPausedByError" => ExecutionEventType::StepPausedByError,
            "stepPausedByOperator" => ExecutionEventType::StepPausedByOperator,
            "stepPendingApplicationHealthMonitor" => ExecutionEventType::StepPendingApplicationHealthMonitor,
            "stepPendingApproval" => ExecutionEventType::StepPendingApproval,
            "stepSkipped" => ExecutionEventType::StepSkipped,
            "stepStarted" => ExecutionEventType::StepStarted,
            "stepSucceeded" => ExecutionEventType::StepSucceeded,
            "stepUpdate" => ExecutionEventType::StepUpdate,
            "unknown" => ExecutionEventType::UnknownValue,
            other => ExecutionEventType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ExecutionEventType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ExecutionEventType::from(s))
    }
}
impl ExecutionEventType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ExecutionEventType::ExecutionBehaviorChangedToGraceful => "executionBehaviorChangedToGraceful",
            ExecutionEventType::ExecutionBehaviorChangedToUngraceful => "executionBehaviorChangedToUngraceful",
            ExecutionEventType::ExecutionCanceled => "executionCanceled",
            ExecutionEventType::ExecutionCanceling => "executionCanceling",
            ExecutionEventType::ExecutionFailed => "executionFailed",
            ExecutionEventType::ExecutionPaused => "executionPaused",
            ExecutionEventType::ExecutionPausing => "executionPausing",
            ExecutionEventType::ExecutionPending => "executionPending",
            ExecutionEventType::ExecutionPendingApproval => "executionPendingApproval",
            ExecutionEventType::ExecutionPendingChildPlanManualApproval => "executionPendingChildPlanManualApproval",
            ExecutionEventType::ExecutionStarted => "executionStarted",
            ExecutionEventType::ExecutionSucceeded => "executionSucceeded",
            ExecutionEventType::ExecutionSuccessMonitoringApplicationHealth => "executionSuccessMonitoringApplicationHealth",
            ExecutionEventType::StepCanceled => "stepCanceled",
            ExecutionEventType::StepExecutionBehaviorChangedToUngraceful => "stepExecutionBehaviorChangedToUngraceful",
            ExecutionEventType::StepFailed => "stepFailed",
            ExecutionEventType::StepPausedByError => "stepPausedByError",
            ExecutionEventType::StepPausedByOperator => "stepPausedByOperator",
            ExecutionEventType::StepPendingApplicationHealthMonitor => "stepPendingApplicationHealthMonitor",
            ExecutionEventType::StepPendingApproval => "stepPendingApproval",
            ExecutionEventType::StepSkipped => "stepSkipped",
            ExecutionEventType::StepStarted => "stepStarted",
            ExecutionEventType::StepSucceeded => "stepSucceeded",
            ExecutionEventType::StepUpdate => "stepUpdate",
            ExecutionEventType::UnknownValue => "unknown",
            ExecutionEventType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "executionBehaviorChangedToGraceful",
            "executionBehaviorChangedToUngraceful",
            "executionCanceled",
            "executionCanceling",
            "executionFailed",
            "executionPaused",
            "executionPausing",
            "executionPending",
            "executionPendingApproval",
            "executionPendingChildPlanManualApproval",
            "executionStarted",
            "executionSucceeded",
            "executionSuccessMonitoringApplicationHealth",
            "stepCanceled",
            "stepExecutionBehaviorChangedToUngraceful",
            "stepFailed",
            "stepPausedByError",
            "stepPausedByOperator",
            "stepPendingApplicationHealthMonitor",
            "stepPendingApproval",
            "stepSkipped",
            "stepStarted",
            "stepSucceeded",
            "stepUpdate",
            "unknown",
        ]
    }
}
impl ::std::convert::AsRef<str> for ExecutionEventType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ExecutionEventType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ExecutionEventType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ExecutionEventType::ExecutionBehaviorChangedToGraceful => write!(f, "executionBehaviorChangedToGraceful"),
            ExecutionEventType::ExecutionBehaviorChangedToUngraceful => write!(f, "executionBehaviorChangedToUngraceful"),
            ExecutionEventType::ExecutionCanceled => write!(f, "executionCanceled"),
            ExecutionEventType::ExecutionCanceling => write!(f, "executionCanceling"),
            ExecutionEventType::ExecutionFailed => write!(f, "executionFailed"),
            ExecutionEventType::ExecutionPaused => write!(f, "executionPaused"),
            ExecutionEventType::ExecutionPausing => write!(f, "executionPausing"),
            ExecutionEventType::ExecutionPending => write!(f, "executionPending"),
            ExecutionEventType::ExecutionPendingApproval => write!(f, "executionPendingApproval"),
            ExecutionEventType::ExecutionPendingChildPlanManualApproval => write!(f, "executionPendingChildPlanManualApproval"),
            ExecutionEventType::ExecutionStarted => write!(f, "executionStarted"),
            ExecutionEventType::ExecutionSucceeded => write!(f, "executionSucceeded"),
            ExecutionEventType::ExecutionSuccessMonitoringApplicationHealth => write!(f, "executionSuccessMonitoringApplicationHealth"),
            ExecutionEventType::StepCanceled => write!(f, "stepCanceled"),
            ExecutionEventType::StepExecutionBehaviorChangedToUngraceful => write!(f, "stepExecutionBehaviorChangedToUngraceful"),
            ExecutionEventType::StepFailed => write!(f, "stepFailed"),
            ExecutionEventType::StepPausedByError => write!(f, "stepPausedByError"),
            ExecutionEventType::StepPausedByOperator => write!(f, "stepPausedByOperator"),
            ExecutionEventType::StepPendingApplicationHealthMonitor => write!(f, "stepPendingApplicationHealthMonitor"),
            ExecutionEventType::StepPendingApproval => write!(f, "stepPendingApproval"),
            ExecutionEventType::StepSkipped => write!(f, "stepSkipped"),
            ExecutionEventType::StepStarted => write!(f, "stepStarted"),
            ExecutionEventType::StepSucceeded => write!(f, "stepSucceeded"),
            ExecutionEventType::StepUpdate => write!(f, "stepUpdate"),
            ExecutionEventType::UnknownValue => write!(f, "unknown"),
            ExecutionEventType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
