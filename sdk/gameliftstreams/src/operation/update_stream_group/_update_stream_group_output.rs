// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateStreamGroupOutput {
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that is assigned to the stream group resource and that uniquely identifies the group across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:streamgroup/\[resource ID\]</code>.</p>
    pub arn: ::std::string::String,
    /// <p>A descriptive label for the stream group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The default Amazon GameLift Streams application that is associated with this stream group.</p>
    pub default_application: ::std::option::Option<crate::types::DefaultApplication>,
    /// <p>This value is set of locations, including their name, current status, and capacities.</p>
    /// <p>A location can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: Amazon GameLift Streams is preparing the location. You cannot stream from, scale the capacity of, or remove this location yet.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The location is provisioned with initial capacity. You can now stream from, scale the capacity of, or remove this location.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Amazon GameLift Streams failed to set up this location. The <code>StatusReason</code> field describes the error. You can remove this location and try to add it again.</p></li>
    /// <li>
    /// <p><code>REMOVING</code>: Amazon GameLift Streams is working to remove this location. This will release all provisioned capacity for this location in this stream group.</p></li>
    /// </ul>
    pub location_states: ::std::option::Option<::std::vec::Vec<crate::types::LocationState>>,
    /// <p>The target stream quality for the stream group.</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub stream_class: ::std::option::Option<crate::types::StreamClass>,
    /// <p>A unique ID value that is assigned to the resource when it's created. Format example: <code>sg-1AB2C3De4</code>.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the stream group resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream group is deploying and isn't ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream group is ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE_WITH_ERRORS</code>: One or more locations in the stream group are in an error state. Verify the details of individual locations and remove any locations which are in error.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when the stream group deployed. See <code>StatusReason</code> (returned by <code>CreateStreamGroup</code>, <code>GetStreamGroup</code>, and <code>UpdateStreamGroup</code>) for more information.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the stream group.</p></li>
    /// <li>
    /// <p><code>UPDATING_LOCATIONS</code>: One or more locations in the stream group are in the process of updating (either activating or deleting).</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::StreamGroupStatus>,
    /// <p>A short description of the reason that the stream group is in <code>ERROR</code> status. The possible reasons can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>internalError</code>: The request can't process right now because of an issue with the server. Try again later.</p></li>
    /// <li>
    /// <p><code>noAvailableInstances</code>: Amazon GameLift Streams does not currently have enough available on-demand capacity to fulfill your request. Wait a few minutes and retry the request as capacity can shift frequently. You can also try to make the request using a different stream class or in another region.</p></li>
    /// </ul>
    pub status_reason: ::std::option::Option<crate::types::StreamGroupStatusReason>,
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A set of applications that this stream group is associated with. You can stream any of these applications with the stream group.</p>
    /// <p>This value is a set of <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Names (ARNs)</a> that uniquely identify application resources. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>.</p>
    pub associated_applications: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateStreamGroupOutput {
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that is assigned to the stream group resource and that uniquely identifies the group across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:streamgroup/\[resource ID\]</code>.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>A descriptive label for the stream group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The default Amazon GameLift Streams application that is associated with this stream group.</p>
    pub fn default_application(&self) -> ::std::option::Option<&crate::types::DefaultApplication> {
        self.default_application.as_ref()
    }
    /// <p>This value is set of locations, including their name, current status, and capacities.</p>
    /// <p>A location can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: Amazon GameLift Streams is preparing the location. You cannot stream from, scale the capacity of, or remove this location yet.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The location is provisioned with initial capacity. You can now stream from, scale the capacity of, or remove this location.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Amazon GameLift Streams failed to set up this location. The <code>StatusReason</code> field describes the error. You can remove this location and try to add it again.</p></li>
    /// <li>
    /// <p><code>REMOVING</code>: Amazon GameLift Streams is working to remove this location. This will release all provisioned capacity for this location in this stream group.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.location_states.is_none()`.
    pub fn location_states(&self) -> &[crate::types::LocationState] {
        self.location_states.as_deref().unwrap_or_default()
    }
    /// <p>The target stream quality for the stream group.</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub fn stream_class(&self) -> ::std::option::Option<&crate::types::StreamClass> {
        self.stream_class.as_ref()
    }
    /// <p>A unique ID value that is assigned to the resource when it's created. Format example: <code>sg-1AB2C3De4</code>.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The current status of the stream group resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream group is deploying and isn't ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream group is ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE_WITH_ERRORS</code>: One or more locations in the stream group are in an error state. Verify the details of individual locations and remove any locations which are in error.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when the stream group deployed. See <code>StatusReason</code> (returned by <code>CreateStreamGroup</code>, <code>GetStreamGroup</code>, and <code>UpdateStreamGroup</code>) for more information.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the stream group.</p></li>
    /// <li>
    /// <p><code>UPDATING_LOCATIONS</code>: One or more locations in the stream group are in the process of updating (either activating or deleting).</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::StreamGroupStatus> {
        self.status.as_ref()
    }
    /// <p>A short description of the reason that the stream group is in <code>ERROR</code> status. The possible reasons can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>internalError</code>: The request can't process right now because of an issue with the server. Try again later.</p></li>
    /// <li>
    /// <p><code>noAvailableInstances</code>: Amazon GameLift Streams does not currently have enough available on-demand capacity to fulfill your request. Wait a few minutes and retry the request as capacity can shift frequently. You can also try to make the request using a different stream class or in another region.</p></li>
    /// </ul>
    pub fn status_reason(&self) -> ::std::option::Option<&crate::types::StreamGroupStatusReason> {
        self.status_reason.as_ref()
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>A set of applications that this stream group is associated with. You can stream any of these applications with the stream group.</p>
    /// <p>This value is a set of <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Names (ARNs)</a> that uniquely identify application resources. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.associated_applications.is_none()`.
    pub fn associated_applications(&self) -> &[::std::string::String] {
        self.associated_applications.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for UpdateStreamGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateStreamGroupOutput {
    /// Creates a new builder-style object to manufacture [`UpdateStreamGroupOutput`](crate::operation::update_stream_group::UpdateStreamGroupOutput).
    pub fn builder() -> crate::operation::update_stream_group::builders::UpdateStreamGroupOutputBuilder {
        crate::operation::update_stream_group::builders::UpdateStreamGroupOutputBuilder::default()
    }
}

/// A builder for [`UpdateStreamGroupOutput`](crate::operation::update_stream_group::UpdateStreamGroupOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateStreamGroupOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) default_application: ::std::option::Option<crate::types::DefaultApplication>,
    pub(crate) location_states: ::std::option::Option<::std::vec::Vec<crate::types::LocationState>>,
    pub(crate) stream_class: ::std::option::Option<crate::types::StreamClass>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::StreamGroupStatus>,
    pub(crate) status_reason: ::std::option::Option<crate::types::StreamGroupStatusReason>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) associated_applications: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateStreamGroupOutputBuilder {
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that is assigned to the stream group resource and that uniquely identifies the group across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:streamgroup/\[resource ID\]</code>.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that is assigned to the stream group resource and that uniquely identifies the group across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:streamgroup/\[resource ID\]</code>.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that is assigned to the stream group resource and that uniquely identifies the group across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:streamgroup/\[resource ID\]</code>.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A descriptive label for the stream group.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive label for the stream group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A descriptive label for the stream group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The default Amazon GameLift Streams application that is associated with this stream group.</p>
    pub fn default_application(mut self, input: crate::types::DefaultApplication) -> Self {
        self.default_application = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default Amazon GameLift Streams application that is associated with this stream group.</p>
    pub fn set_default_application(mut self, input: ::std::option::Option<crate::types::DefaultApplication>) -> Self {
        self.default_application = input;
        self
    }
    /// <p>The default Amazon GameLift Streams application that is associated with this stream group.</p>
    pub fn get_default_application(&self) -> &::std::option::Option<crate::types::DefaultApplication> {
        &self.default_application
    }
    /// Appends an item to `location_states`.
    ///
    /// To override the contents of this collection use [`set_location_states`](Self::set_location_states).
    ///
    /// <p>This value is set of locations, including their name, current status, and capacities.</p>
    /// <p>A location can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: Amazon GameLift Streams is preparing the location. You cannot stream from, scale the capacity of, or remove this location yet.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The location is provisioned with initial capacity. You can now stream from, scale the capacity of, or remove this location.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Amazon GameLift Streams failed to set up this location. The <code>StatusReason</code> field describes the error. You can remove this location and try to add it again.</p></li>
    /// <li>
    /// <p><code>REMOVING</code>: Amazon GameLift Streams is working to remove this location. This will release all provisioned capacity for this location in this stream group.</p></li>
    /// </ul>
    pub fn location_states(mut self, input: crate::types::LocationState) -> Self {
        let mut v = self.location_states.unwrap_or_default();
        v.push(input);
        self.location_states = ::std::option::Option::Some(v);
        self
    }
    /// <p>This value is set of locations, including their name, current status, and capacities.</p>
    /// <p>A location can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: Amazon GameLift Streams is preparing the location. You cannot stream from, scale the capacity of, or remove this location yet.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The location is provisioned with initial capacity. You can now stream from, scale the capacity of, or remove this location.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Amazon GameLift Streams failed to set up this location. The <code>StatusReason</code> field describes the error. You can remove this location and try to add it again.</p></li>
    /// <li>
    /// <p><code>REMOVING</code>: Amazon GameLift Streams is working to remove this location. This will release all provisioned capacity for this location in this stream group.</p></li>
    /// </ul>
    pub fn set_location_states(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LocationState>>) -> Self {
        self.location_states = input;
        self
    }
    /// <p>This value is set of locations, including their name, current status, and capacities.</p>
    /// <p>A location can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: Amazon GameLift Streams is preparing the location. You cannot stream from, scale the capacity of, or remove this location yet.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The location is provisioned with initial capacity. You can now stream from, scale the capacity of, or remove this location.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Amazon GameLift Streams failed to set up this location. The <code>StatusReason</code> field describes the error. You can remove this location and try to add it again.</p></li>
    /// <li>
    /// <p><code>REMOVING</code>: Amazon GameLift Streams is working to remove this location. This will release all provisioned capacity for this location in this stream group.</p></li>
    /// </ul>
    pub fn get_location_states(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LocationState>> {
        &self.location_states
    }
    /// <p>The target stream quality for the stream group.</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub fn stream_class(mut self, input: crate::types::StreamClass) -> Self {
        self.stream_class = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target stream quality for the stream group.</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_stream_class(mut self, input: ::std::option::Option<crate::types::StreamClass>) -> Self {
        self.stream_class = input;
        self
    }
    /// <p>The target stream quality for the stream group.</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_stream_class(&self) -> &::std::option::Option<crate::types::StreamClass> {
        &self.stream_class
    }
    /// <p>A unique ID value that is assigned to the resource when it's created. Format example: <code>sg-1AB2C3De4</code>.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique ID value that is assigned to the resource when it's created. Format example: <code>sg-1AB2C3De4</code>.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A unique ID value that is assigned to the resource when it's created. Format example: <code>sg-1AB2C3De4</code>.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The current status of the stream group resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream group is deploying and isn't ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream group is ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE_WITH_ERRORS</code>: One or more locations in the stream group are in an error state. Verify the details of individual locations and remove any locations which are in error.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when the stream group deployed. See <code>StatusReason</code> (returned by <code>CreateStreamGroup</code>, <code>GetStreamGroup</code>, and <code>UpdateStreamGroup</code>) for more information.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the stream group.</p></li>
    /// <li>
    /// <p><code>UPDATING_LOCATIONS</code>: One or more locations in the stream group are in the process of updating (either activating or deleting).</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::StreamGroupStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the stream group resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream group is deploying and isn't ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream group is ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE_WITH_ERRORS</code>: One or more locations in the stream group are in an error state. Verify the details of individual locations and remove any locations which are in error.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when the stream group deployed. See <code>StatusReason</code> (returned by <code>CreateStreamGroup</code>, <code>GetStreamGroup</code>, and <code>UpdateStreamGroup</code>) for more information.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the stream group.</p></li>
    /// <li>
    /// <p><code>UPDATING_LOCATIONS</code>: One or more locations in the stream group are in the process of updating (either activating or deleting).</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StreamGroupStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the stream group resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream group is deploying and isn't ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream group is ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE_WITH_ERRORS</code>: One or more locations in the stream group are in an error state. Verify the details of individual locations and remove any locations which are in error.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when the stream group deployed. See <code>StatusReason</code> (returned by <code>CreateStreamGroup</code>, <code>GetStreamGroup</code>, and <code>UpdateStreamGroup</code>) for more information.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the stream group.</p></li>
    /// <li>
    /// <p><code>UPDATING_LOCATIONS</code>: One or more locations in the stream group are in the process of updating (either activating or deleting).</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StreamGroupStatus> {
        &self.status
    }
    /// <p>A short description of the reason that the stream group is in <code>ERROR</code> status. The possible reasons can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>internalError</code>: The request can't process right now because of an issue with the server. Try again later.</p></li>
    /// <li>
    /// <p><code>noAvailableInstances</code>: Amazon GameLift Streams does not currently have enough available on-demand capacity to fulfill your request. Wait a few minutes and retry the request as capacity can shift frequently. You can also try to make the request using a different stream class or in another region.</p></li>
    /// </ul>
    pub fn status_reason(mut self, input: crate::types::StreamGroupStatusReason) -> Self {
        self.status_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>A short description of the reason that the stream group is in <code>ERROR</code> status. The possible reasons can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>internalError</code>: The request can't process right now because of an issue with the server. Try again later.</p></li>
    /// <li>
    /// <p><code>noAvailableInstances</code>: Amazon GameLift Streams does not currently have enough available on-demand capacity to fulfill your request. Wait a few minutes and retry the request as capacity can shift frequently. You can also try to make the request using a different stream class or in another region.</p></li>
    /// </ul>
    pub fn set_status_reason(mut self, input: ::std::option::Option<crate::types::StreamGroupStatusReason>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A short description of the reason that the stream group is in <code>ERROR</code> status. The possible reasons can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>internalError</code>: The request can't process right now because of an issue with the server. Try again later.</p></li>
    /// <li>
    /// <p><code>noAvailableInstances</code>: Amazon GameLift Streams does not currently have enough available on-demand capacity to fulfill your request. Wait a few minutes and retry the request as capacity can shift frequently. You can also try to make the request using a different stream class or in another region.</p></li>
    /// </ul>
    pub fn get_status_reason(&self) -> &::std::option::Option<crate::types::StreamGroupStatusReason> {
        &self.status_reason
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Appends an item to `associated_applications`.
    ///
    /// To override the contents of this collection use [`set_associated_applications`](Self::set_associated_applications).
    ///
    /// <p>A set of applications that this stream group is associated with. You can stream any of these applications with the stream group.</p>
    /// <p>This value is a set of <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Names (ARNs)</a> that uniquely identify application resources. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>.</p>
    pub fn associated_applications(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.associated_applications.unwrap_or_default();
        v.push(input.into());
        self.associated_applications = ::std::option::Option::Some(v);
        self
    }
    /// <p>A set of applications that this stream group is associated with. You can stream any of these applications with the stream group.</p>
    /// <p>This value is a set of <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Names (ARNs)</a> that uniquely identify application resources. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>.</p>
    pub fn set_associated_applications(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.associated_applications = input;
        self
    }
    /// <p>A set of applications that this stream group is associated with. You can stream any of these applications with the stream group.</p>
    /// <p>This value is a set of <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Names (ARNs)</a> that uniquely identify application resources. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>.</p>
    pub fn get_associated_applications(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.associated_applications
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateStreamGroupOutput`](crate::operation::update_stream_group::UpdateStreamGroupOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::operation::update_stream_group::builders::UpdateStreamGroupOutputBuilder::arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_stream_group::UpdateStreamGroupOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_stream_group::UpdateStreamGroupOutput {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building UpdateStreamGroupOutput",
                )
            })?,
            description: self.description,
            default_application: self.default_application,
            location_states: self.location_states,
            stream_class: self.stream_class,
            id: self.id,
            status: self.status,
            status_reason: self.status_reason,
            last_updated_at: self.last_updated_at,
            created_at: self.created_at,
            associated_applications: self.associated_applications,
            _request_id: self._request_id,
        })
    }
}
