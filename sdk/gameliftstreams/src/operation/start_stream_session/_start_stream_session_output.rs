// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StartStreamSessionOutput {
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that's assigned to a stream session resource. When combined with the stream group resource ID, this value uniquely identifies the stream session across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:streamsession/\[stream group resource ID\]/\[stream session resource ID\]</code>.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A human-readable label for the stream session. You can update this value at any time.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the Amazon GameLift Streams stream group that is hosting the stream session. Format example: <code>sg-1AB2C3De4</code>.</p>
    pub stream_group_id: ::std::option::Option<::std::string::String>,
    /// <p>An opaque, unique identifier for an end-user, defined by the developer.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the stream session. A stream session is ready for a client to connect when in <code>ACTIVE</code> status.</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream session is starting and preparing to stream.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream session is ready and waiting for a client connection. A client has <code>ConnectionTimeoutSeconds</code> (specified in <code>StartStreamSession</code>) from when the session reaches <code>ACTIVE</code> state to establish a connection. If no client connects within this timeframe, the session automatically terminates.</p></li>
    /// <li>
    /// <p><code>CONNECTED</code>: The stream session has a connected client. A session will automatically terminate if there is no user input for 60 minutes, or if the maximum length of a session specified by <code>SessionLengthSeconds</code> in <code>StartStreamSession</code> is exceeded.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: The stream session failed to activate. See <code>StatusReason</code> (returned by <code>GetStreamSession</code> and <code>StartStreamSession</code>) for more information.</p></li>
    /// <li>
    /// <p><code>PENDING_CLIENT_RECONNECTION</code>: A client has recently disconnected and the stream session is waiting for the client to reconnect. A client has <code>ConnectionTimeoutSeconds</code> (specified in <code>StartStreamSession</code>) from when the session reaches <code>PENDING_CLIENT_RECONNECTION</code> state to re-establish a connection. If no client connects within this timeframe, the session automatically terminates.</p></li>
    /// <li>
    /// <p><code>RECONNECTING</code>: A client has initiated a reconnect to a session that was in <code>PENDING_CLIENT_RECONNECTION</code> state.</p></li>
    /// <li>
    /// <p><code>TERMINATING</code>: The stream session is ending.</p></li>
    /// <li>
    /// <p><code>TERMINATED</code>: The stream session has ended.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::StreamSessionStatus>,
    /// <p>A short description of the reason the stream session is in <code>ERROR</code> status.</p>
    /// <ul>
    /// <li>
    /// <p><code>internalError</code>: An internal service error occurred. Start a new stream session to continue streaming.</p></li>
    /// <li>
    /// <p><code>invalidSignalRequest</code>: The WebRTC signal request that was sent is not valid. When starting or reconnecting to a stream session, use <code>generateSignalRequest</code> in the Amazon GameLift Streams Web SDK to generate a new signal request.</p></li>
    /// <li>
    /// <p><code>placementTimeout</code>: Amazon GameLift Streams could not find available stream capacity to start a stream session. Increase the stream capacity in the stream group or wait until capacity becomes available.</p></li>
    /// <li>
    /// <p><code>applicationLogS3DestinationError</code>: Could not write the application log to the Amazon S3 bucket that is configured for the streaming application. Make sure the bucket still exists.</p></li>
    /// </ul>
    pub status_reason: ::std::option::Option<crate::types::StreamSessionStatusReason>,
    /// <p>The data transfer protocol in use with the stream session.</p>
    pub protocol: ::std::option::Option<crate::types::Protocol>,
    /// <p>The location where Amazon GameLift Streams hosts and streams your application. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>The WebRTC ICE offer string that a client generates to initiate a connection to the stream session.</p>
    pub signal_request: ::std::option::Option<::std::string::String>,
    /// <p>The WebRTC answer string that the stream server generates in response to the <code>SignalRequest</code>.</p>
    pub signal_response: ::std::option::Option<::std::string::String>,
    /// <p>The length of time that Amazon GameLift Streams should wait for a client to connect or reconnect to the stream session. This time span starts when the stream session reaches <code>ACTIVE</code> or <code>PENDING_CLIENT_RECONNECTION</code> state. If no client connects (or reconnects) before the timeout, Amazon GameLift Streams terminates the stream session.</p>
    pub connection_timeout_seconds: ::std::option::Option<i32>,
    /// <p>The maximum duration of a session. Amazon GameLift Streams will automatically terminate a session after this amount of time has elapsed, regardless of any existing client connections.</p>
    pub session_length_seconds: ::std::option::Option<i32>,
    /// <p>A list of CLI arguments that are sent to the streaming server when a stream session launches. You can use this to configure the application or stream session details. You can also provide custom arguments that Amazon GameLift Streams passes to your game client.</p>
    /// <p><code>AdditionalEnvironmentVariables</code> and <code>AdditionalLaunchArgs</code> have similar purposes. <code>AdditionalEnvironmentVariables</code> passes data using environment variables; while <code>AdditionalLaunchArgs</code> passes data using command-line arguments.</p>
    pub additional_launch_args: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A set of options that you can use to control the stream session runtime environment, expressed as a set of key-value pairs. You can use this to configure the application or stream session details. You can also provide custom environment variables that Amazon GameLift Streams passes to your game client.</p><note>
    /// <p>If you want to debug your application with environment variables, we recommend that you do so in a local environment outside of Amazon GameLift Streams. For more information, refer to the Compatibility Guidance in the troubleshooting section of the Developer Guide.</p>
    /// </note>
    /// <p><code>AdditionalEnvironmentVariables</code> and <code>AdditionalLaunchArgs</code> have similar purposes. <code>AdditionalEnvironmentVariables</code> passes data using environment variables; while <code>AdditionalLaunchArgs</code> passes data using command-line arguments.</p>
    pub additional_environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Access location for log files that your content generates during a stream session. These log files are uploaded to cloud storage location at the end of a stream session. The Amazon GameLift Streams application resource defines which log files to upload.</p>
    pub log_file_location_uri: ::std::option::Option<::std::string::String>,
    /// <p>The URL of an S3 bucket that stores Amazon GameLift Streams WebSDK files. The URL is used to establish connection with the client.</p>
    pub web_sdk_protocol_url: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The application streaming in this session.</p>
    /// <p>This value is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that uniquely identifies the application resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>.</p>
    pub application_arn: ::std::option::Option<::std::string::String>,
    /// <p>Provides details about the stream session's exported files.</p>
    pub export_files_metadata: ::std::option::Option<crate::types::ExportFilesMetadata>,
    _request_id: Option<String>,
}
impl StartStreamSessionOutput {
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that's assigned to a stream session resource. When combined with the stream group resource ID, this value uniquely identifies the stream session across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:streamsession/\[stream group resource ID\]/\[stream session resource ID\]</code>.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A human-readable label for the stream session. You can update this value at any time.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The unique identifier for the Amazon GameLift Streams stream group that is hosting the stream session. Format example: <code>sg-1AB2C3De4</code>.</p>
    pub fn stream_group_id(&self) -> ::std::option::Option<&str> {
        self.stream_group_id.as_deref()
    }
    /// <p>An opaque, unique identifier for an end-user, defined by the developer.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The current status of the stream session. A stream session is ready for a client to connect when in <code>ACTIVE</code> status.</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream session is starting and preparing to stream.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream session is ready and waiting for a client connection. A client has <code>ConnectionTimeoutSeconds</code> (specified in <code>StartStreamSession</code>) from when the session reaches <code>ACTIVE</code> state to establish a connection. If no client connects within this timeframe, the session automatically terminates.</p></li>
    /// <li>
    /// <p><code>CONNECTED</code>: The stream session has a connected client. A session will automatically terminate if there is no user input for 60 minutes, or if the maximum length of a session specified by <code>SessionLengthSeconds</code> in <code>StartStreamSession</code> is exceeded.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: The stream session failed to activate. See <code>StatusReason</code> (returned by <code>GetStreamSession</code> and <code>StartStreamSession</code>) for more information.</p></li>
    /// <li>
    /// <p><code>PENDING_CLIENT_RECONNECTION</code>: A client has recently disconnected and the stream session is waiting for the client to reconnect. A client has <code>ConnectionTimeoutSeconds</code> (specified in <code>StartStreamSession</code>) from when the session reaches <code>PENDING_CLIENT_RECONNECTION</code> state to re-establish a connection. If no client connects within this timeframe, the session automatically terminates.</p></li>
    /// <li>
    /// <p><code>RECONNECTING</code>: A client has initiated a reconnect to a session that was in <code>PENDING_CLIENT_RECONNECTION</code> state.</p></li>
    /// <li>
    /// <p><code>TERMINATING</code>: The stream session is ending.</p></li>
    /// <li>
    /// <p><code>TERMINATED</code>: The stream session has ended.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::StreamSessionStatus> {
        self.status.as_ref()
    }
    /// <p>A short description of the reason the stream session is in <code>ERROR</code> status.</p>
    /// <ul>
    /// <li>
    /// <p><code>internalError</code>: An internal service error occurred. Start a new stream session to continue streaming.</p></li>
    /// <li>
    /// <p><code>invalidSignalRequest</code>: The WebRTC signal request that was sent is not valid. When starting or reconnecting to a stream session, use <code>generateSignalRequest</code> in the Amazon GameLift Streams Web SDK to generate a new signal request.</p></li>
    /// <li>
    /// <p><code>placementTimeout</code>: Amazon GameLift Streams could not find available stream capacity to start a stream session. Increase the stream capacity in the stream group or wait until capacity becomes available.</p></li>
    /// <li>
    /// <p><code>applicationLogS3DestinationError</code>: Could not write the application log to the Amazon S3 bucket that is configured for the streaming application. Make sure the bucket still exists.</p></li>
    /// </ul>
    pub fn status_reason(&self) -> ::std::option::Option<&crate::types::StreamSessionStatusReason> {
        self.status_reason.as_ref()
    }
    /// <p>The data transfer protocol in use with the stream session.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::Protocol> {
        self.protocol.as_ref()
    }
    /// <p>The location where Amazon GameLift Streams hosts and streams your application. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The WebRTC ICE offer string that a client generates to initiate a connection to the stream session.</p>
    pub fn signal_request(&self) -> ::std::option::Option<&str> {
        self.signal_request.as_deref()
    }
    /// <p>The WebRTC answer string that the stream server generates in response to the <code>SignalRequest</code>.</p>
    pub fn signal_response(&self) -> ::std::option::Option<&str> {
        self.signal_response.as_deref()
    }
    /// <p>The length of time that Amazon GameLift Streams should wait for a client to connect or reconnect to the stream session. This time span starts when the stream session reaches <code>ACTIVE</code> or <code>PENDING_CLIENT_RECONNECTION</code> state. If no client connects (or reconnects) before the timeout, Amazon GameLift Streams terminates the stream session.</p>
    pub fn connection_timeout_seconds(&self) -> ::std::option::Option<i32> {
        self.connection_timeout_seconds
    }
    /// <p>The maximum duration of a session. Amazon GameLift Streams will automatically terminate a session after this amount of time has elapsed, regardless of any existing client connections.</p>
    pub fn session_length_seconds(&self) -> ::std::option::Option<i32> {
        self.session_length_seconds
    }
    /// <p>A list of CLI arguments that are sent to the streaming server when a stream session launches. You can use this to configure the application or stream session details. You can also provide custom arguments that Amazon GameLift Streams passes to your game client.</p>
    /// <p><code>AdditionalEnvironmentVariables</code> and <code>AdditionalLaunchArgs</code> have similar purposes. <code>AdditionalEnvironmentVariables</code> passes data using environment variables; while <code>AdditionalLaunchArgs</code> passes data using command-line arguments.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_launch_args.is_none()`.
    pub fn additional_launch_args(&self) -> &[::std::string::String] {
        self.additional_launch_args.as_deref().unwrap_or_default()
    }
    /// <p>A set of options that you can use to control the stream session runtime environment, expressed as a set of key-value pairs. You can use this to configure the application or stream session details. You can also provide custom environment variables that Amazon GameLift Streams passes to your game client.</p><note>
    /// <p>If you want to debug your application with environment variables, we recommend that you do so in a local environment outside of Amazon GameLift Streams. For more information, refer to the Compatibility Guidance in the troubleshooting section of the Developer Guide.</p>
    /// </note>
    /// <p><code>AdditionalEnvironmentVariables</code> and <code>AdditionalLaunchArgs</code> have similar purposes. <code>AdditionalEnvironmentVariables</code> passes data using environment variables; while <code>AdditionalLaunchArgs</code> passes data using command-line arguments.</p>
    pub fn additional_environment_variables(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.additional_environment_variables.as_ref()
    }
    /// <p>Access location for log files that your content generates during a stream session. These log files are uploaded to cloud storage location at the end of a stream session. The Amazon GameLift Streams application resource defines which log files to upload.</p>
    pub fn log_file_location_uri(&self) -> ::std::option::Option<&str> {
        self.log_file_location_uri.as_deref()
    }
    /// <p>The URL of an S3 bucket that stores Amazon GameLift Streams WebSDK files. The URL is used to establish connection with the client.</p>
    pub fn web_sdk_protocol_url(&self) -> ::std::option::Option<&str> {
        self.web_sdk_protocol_url.as_deref()
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The application streaming in this session.</p>
    /// <p>This value is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that uniquely identifies the application resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>.</p>
    pub fn application_arn(&self) -> ::std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>Provides details about the stream session's exported files.</p>
    pub fn export_files_metadata(&self) -> ::std::option::Option<&crate::types::ExportFilesMetadata> {
        self.export_files_metadata.as_ref()
    }
}
impl ::std::fmt::Debug for StartStreamSessionOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartStreamSessionOutput");
        formatter.field("arn", &self.arn);
        formatter.field("description", &self.description);
        formatter.field("stream_group_id", &self.stream_group_id);
        formatter.field("user_id", &self.user_id);
        formatter.field("status", &self.status);
        formatter.field("status_reason", &self.status_reason);
        formatter.field("protocol", &self.protocol);
        formatter.field("location", &self.location);
        formatter.field("signal_request", &"*** Sensitive Data Redacted ***");
        formatter.field("signal_response", &"*** Sensitive Data Redacted ***");
        formatter.field("connection_timeout_seconds", &self.connection_timeout_seconds);
        formatter.field("session_length_seconds", &self.session_length_seconds);
        formatter.field("additional_launch_args", &self.additional_launch_args);
        formatter.field("additional_environment_variables", &self.additional_environment_variables);
        formatter.field("log_file_location_uri", &self.log_file_location_uri);
        formatter.field("web_sdk_protocol_url", &self.web_sdk_protocol_url);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("created_at", &self.created_at);
        formatter.field("application_arn", &self.application_arn);
        formatter.field("export_files_metadata", &self.export_files_metadata);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for StartStreamSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartStreamSessionOutput {
    /// Creates a new builder-style object to manufacture [`StartStreamSessionOutput`](crate::operation::start_stream_session::StartStreamSessionOutput).
    pub fn builder() -> crate::operation::start_stream_session::builders::StartStreamSessionOutputBuilder {
        crate::operation::start_stream_session::builders::StartStreamSessionOutputBuilder::default()
    }
}

/// A builder for [`StartStreamSessionOutput`](crate::operation::start_stream_session::StartStreamSessionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct StartStreamSessionOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) stream_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::StreamSessionStatus>,
    pub(crate) status_reason: ::std::option::Option<crate::types::StreamSessionStatusReason>,
    pub(crate) protocol: ::std::option::Option<crate::types::Protocol>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) signal_request: ::std::option::Option<::std::string::String>,
    pub(crate) signal_response: ::std::option::Option<::std::string::String>,
    pub(crate) connection_timeout_seconds: ::std::option::Option<i32>,
    pub(crate) session_length_seconds: ::std::option::Option<i32>,
    pub(crate) additional_launch_args: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) additional_environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) log_file_location_uri: ::std::option::Option<::std::string::String>,
    pub(crate) web_sdk_protocol_url: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) export_files_metadata: ::std::option::Option<crate::types::ExportFilesMetadata>,
    _request_id: Option<String>,
}
impl StartStreamSessionOutputBuilder {
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that's assigned to a stream session resource. When combined with the stream group resource ID, this value uniquely identifies the stream session across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:streamsession/\[stream group resource ID\]/\[stream session resource ID\]</code>.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that's assigned to a stream session resource. When combined with the stream group resource ID, this value uniquely identifies the stream session across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:streamsession/\[stream group resource ID\]/\[stream session resource ID\]</code>.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that's assigned to a stream session resource. When combined with the stream group resource ID, this value uniquely identifies the stream session across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:streamsession/\[stream group resource ID\]/\[stream session resource ID\]</code>.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A human-readable label for the stream session. You can update this value at any time.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable label for the stream session. You can update this value at any time.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A human-readable label for the stream session. You can update this value at any time.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The unique identifier for the Amazon GameLift Streams stream group that is hosting the stream session. Format example: <code>sg-1AB2C3De4</code>.</p>
    pub fn stream_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the Amazon GameLift Streams stream group that is hosting the stream session. Format example: <code>sg-1AB2C3De4</code>.</p>
    pub fn set_stream_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_group_id = input;
        self
    }
    /// <p>The unique identifier for the Amazon GameLift Streams stream group that is hosting the stream session. Format example: <code>sg-1AB2C3De4</code>.</p>
    pub fn get_stream_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_group_id
    }
    /// <p>An opaque, unique identifier for an end-user, defined by the developer.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An opaque, unique identifier for an end-user, defined by the developer.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>An opaque, unique identifier for an end-user, defined by the developer.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p>The current status of the stream session. A stream session is ready for a client to connect when in <code>ACTIVE</code> status.</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream session is starting and preparing to stream.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream session is ready and waiting for a client connection. A client has <code>ConnectionTimeoutSeconds</code> (specified in <code>StartStreamSession</code>) from when the session reaches <code>ACTIVE</code> state to establish a connection. If no client connects within this timeframe, the session automatically terminates.</p></li>
    /// <li>
    /// <p><code>CONNECTED</code>: The stream session has a connected client. A session will automatically terminate if there is no user input for 60 minutes, or if the maximum length of a session specified by <code>SessionLengthSeconds</code> in <code>StartStreamSession</code> is exceeded.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: The stream session failed to activate. See <code>StatusReason</code> (returned by <code>GetStreamSession</code> and <code>StartStreamSession</code>) for more information.</p></li>
    /// <li>
    /// <p><code>PENDING_CLIENT_RECONNECTION</code>: A client has recently disconnected and the stream session is waiting for the client to reconnect. A client has <code>ConnectionTimeoutSeconds</code> (specified in <code>StartStreamSession</code>) from when the session reaches <code>PENDING_CLIENT_RECONNECTION</code> state to re-establish a connection. If no client connects within this timeframe, the session automatically terminates.</p></li>
    /// <li>
    /// <p><code>RECONNECTING</code>: A client has initiated a reconnect to a session that was in <code>PENDING_CLIENT_RECONNECTION</code> state.</p></li>
    /// <li>
    /// <p><code>TERMINATING</code>: The stream session is ending.</p></li>
    /// <li>
    /// <p><code>TERMINATED</code>: The stream session has ended.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::StreamSessionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the stream session. A stream session is ready for a client to connect when in <code>ACTIVE</code> status.</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream session is starting and preparing to stream.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream session is ready and waiting for a client connection. A client has <code>ConnectionTimeoutSeconds</code> (specified in <code>StartStreamSession</code>) from when the session reaches <code>ACTIVE</code> state to establish a connection. If no client connects within this timeframe, the session automatically terminates.</p></li>
    /// <li>
    /// <p><code>CONNECTED</code>: The stream session has a connected client. A session will automatically terminate if there is no user input for 60 minutes, or if the maximum length of a session specified by <code>SessionLengthSeconds</code> in <code>StartStreamSession</code> is exceeded.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: The stream session failed to activate. See <code>StatusReason</code> (returned by <code>GetStreamSession</code> and <code>StartStreamSession</code>) for more information.</p></li>
    /// <li>
    /// <p><code>PENDING_CLIENT_RECONNECTION</code>: A client has recently disconnected and the stream session is waiting for the client to reconnect. A client has <code>ConnectionTimeoutSeconds</code> (specified in <code>StartStreamSession</code>) from when the session reaches <code>PENDING_CLIENT_RECONNECTION</code> state to re-establish a connection. If no client connects within this timeframe, the session automatically terminates.</p></li>
    /// <li>
    /// <p><code>RECONNECTING</code>: A client has initiated a reconnect to a session that was in <code>PENDING_CLIENT_RECONNECTION</code> state.</p></li>
    /// <li>
    /// <p><code>TERMINATING</code>: The stream session is ending.</p></li>
    /// <li>
    /// <p><code>TERMINATED</code>: The stream session has ended.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StreamSessionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the stream session. A stream session is ready for a client to connect when in <code>ACTIVE</code> status.</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream session is starting and preparing to stream.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream session is ready and waiting for a client connection. A client has <code>ConnectionTimeoutSeconds</code> (specified in <code>StartStreamSession</code>) from when the session reaches <code>ACTIVE</code> state to establish a connection. If no client connects within this timeframe, the session automatically terminates.</p></li>
    /// <li>
    /// <p><code>CONNECTED</code>: The stream session has a connected client. A session will automatically terminate if there is no user input for 60 minutes, or if the maximum length of a session specified by <code>SessionLengthSeconds</code> in <code>StartStreamSession</code> is exceeded.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: The stream session failed to activate. See <code>StatusReason</code> (returned by <code>GetStreamSession</code> and <code>StartStreamSession</code>) for more information.</p></li>
    /// <li>
    /// <p><code>PENDING_CLIENT_RECONNECTION</code>: A client has recently disconnected and the stream session is waiting for the client to reconnect. A client has <code>ConnectionTimeoutSeconds</code> (specified in <code>StartStreamSession</code>) from when the session reaches <code>PENDING_CLIENT_RECONNECTION</code> state to re-establish a connection. If no client connects within this timeframe, the session automatically terminates.</p></li>
    /// <li>
    /// <p><code>RECONNECTING</code>: A client has initiated a reconnect to a session that was in <code>PENDING_CLIENT_RECONNECTION</code> state.</p></li>
    /// <li>
    /// <p><code>TERMINATING</code>: The stream session is ending.</p></li>
    /// <li>
    /// <p><code>TERMINATED</code>: The stream session has ended.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StreamSessionStatus> {
        &self.status
    }
    /// <p>A short description of the reason the stream session is in <code>ERROR</code> status.</p>
    /// <ul>
    /// <li>
    /// <p><code>internalError</code>: An internal service error occurred. Start a new stream session to continue streaming.</p></li>
    /// <li>
    /// <p><code>invalidSignalRequest</code>: The WebRTC signal request that was sent is not valid. When starting or reconnecting to a stream session, use <code>generateSignalRequest</code> in the Amazon GameLift Streams Web SDK to generate a new signal request.</p></li>
    /// <li>
    /// <p><code>placementTimeout</code>: Amazon GameLift Streams could not find available stream capacity to start a stream session. Increase the stream capacity in the stream group or wait until capacity becomes available.</p></li>
    /// <li>
    /// <p><code>applicationLogS3DestinationError</code>: Could not write the application log to the Amazon S3 bucket that is configured for the streaming application. Make sure the bucket still exists.</p></li>
    /// </ul>
    pub fn status_reason(mut self, input: crate::types::StreamSessionStatusReason) -> Self {
        self.status_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>A short description of the reason the stream session is in <code>ERROR</code> status.</p>
    /// <ul>
    /// <li>
    /// <p><code>internalError</code>: An internal service error occurred. Start a new stream session to continue streaming.</p></li>
    /// <li>
    /// <p><code>invalidSignalRequest</code>: The WebRTC signal request that was sent is not valid. When starting or reconnecting to a stream session, use <code>generateSignalRequest</code> in the Amazon GameLift Streams Web SDK to generate a new signal request.</p></li>
    /// <li>
    /// <p><code>placementTimeout</code>: Amazon GameLift Streams could not find available stream capacity to start a stream session. Increase the stream capacity in the stream group or wait until capacity becomes available.</p></li>
    /// <li>
    /// <p><code>applicationLogS3DestinationError</code>: Could not write the application log to the Amazon S3 bucket that is configured for the streaming application. Make sure the bucket still exists.</p></li>
    /// </ul>
    pub fn set_status_reason(mut self, input: ::std::option::Option<crate::types::StreamSessionStatusReason>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A short description of the reason the stream session is in <code>ERROR</code> status.</p>
    /// <ul>
    /// <li>
    /// <p><code>internalError</code>: An internal service error occurred. Start a new stream session to continue streaming.</p></li>
    /// <li>
    /// <p><code>invalidSignalRequest</code>: The WebRTC signal request that was sent is not valid. When starting or reconnecting to a stream session, use <code>generateSignalRequest</code> in the Amazon GameLift Streams Web SDK to generate a new signal request.</p></li>
    /// <li>
    /// <p><code>placementTimeout</code>: Amazon GameLift Streams could not find available stream capacity to start a stream session. Increase the stream capacity in the stream group or wait until capacity becomes available.</p></li>
    /// <li>
    /// <p><code>applicationLogS3DestinationError</code>: Could not write the application log to the Amazon S3 bucket that is configured for the streaming application. Make sure the bucket still exists.</p></li>
    /// </ul>
    pub fn get_status_reason(&self) -> &::std::option::Option<crate::types::StreamSessionStatusReason> {
        &self.status_reason
    }
    /// <p>The data transfer protocol in use with the stream session.</p>
    pub fn protocol(mut self, input: crate::types::Protocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data transfer protocol in use with the stream session.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::Protocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The data transfer protocol in use with the stream session.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::Protocol> {
        &self.protocol
    }
    /// <p>The location where Amazon GameLift Streams hosts and streams your application. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location where Amazon GameLift Streams hosts and streams your application. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The location where Amazon GameLift Streams hosts and streams your application. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The WebRTC ICE offer string that a client generates to initiate a connection to the stream session.</p>
    pub fn signal_request(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.signal_request = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The WebRTC ICE offer string that a client generates to initiate a connection to the stream session.</p>
    pub fn set_signal_request(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.signal_request = input;
        self
    }
    /// <p>The WebRTC ICE offer string that a client generates to initiate a connection to the stream session.</p>
    pub fn get_signal_request(&self) -> &::std::option::Option<::std::string::String> {
        &self.signal_request
    }
    /// <p>The WebRTC answer string that the stream server generates in response to the <code>SignalRequest</code>.</p>
    pub fn signal_response(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.signal_response = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The WebRTC answer string that the stream server generates in response to the <code>SignalRequest</code>.</p>
    pub fn set_signal_response(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.signal_response = input;
        self
    }
    /// <p>The WebRTC answer string that the stream server generates in response to the <code>SignalRequest</code>.</p>
    pub fn get_signal_response(&self) -> &::std::option::Option<::std::string::String> {
        &self.signal_response
    }
    /// <p>The length of time that Amazon GameLift Streams should wait for a client to connect or reconnect to the stream session. This time span starts when the stream session reaches <code>ACTIVE</code> or <code>PENDING_CLIENT_RECONNECTION</code> state. If no client connects (or reconnects) before the timeout, Amazon GameLift Streams terminates the stream session.</p>
    pub fn connection_timeout_seconds(mut self, input: i32) -> Self {
        self.connection_timeout_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The length of time that Amazon GameLift Streams should wait for a client to connect or reconnect to the stream session. This time span starts when the stream session reaches <code>ACTIVE</code> or <code>PENDING_CLIENT_RECONNECTION</code> state. If no client connects (or reconnects) before the timeout, Amazon GameLift Streams terminates the stream session.</p>
    pub fn set_connection_timeout_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.connection_timeout_seconds = input;
        self
    }
    /// <p>The length of time that Amazon GameLift Streams should wait for a client to connect or reconnect to the stream session. This time span starts when the stream session reaches <code>ACTIVE</code> or <code>PENDING_CLIENT_RECONNECTION</code> state. If no client connects (or reconnects) before the timeout, Amazon GameLift Streams terminates the stream session.</p>
    pub fn get_connection_timeout_seconds(&self) -> &::std::option::Option<i32> {
        &self.connection_timeout_seconds
    }
    /// <p>The maximum duration of a session. Amazon GameLift Streams will automatically terminate a session after this amount of time has elapsed, regardless of any existing client connections.</p>
    pub fn session_length_seconds(mut self, input: i32) -> Self {
        self.session_length_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum duration of a session. Amazon GameLift Streams will automatically terminate a session after this amount of time has elapsed, regardless of any existing client connections.</p>
    pub fn set_session_length_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.session_length_seconds = input;
        self
    }
    /// <p>The maximum duration of a session. Amazon GameLift Streams will automatically terminate a session after this amount of time has elapsed, regardless of any existing client connections.</p>
    pub fn get_session_length_seconds(&self) -> &::std::option::Option<i32> {
        &self.session_length_seconds
    }
    /// Appends an item to `additional_launch_args`.
    ///
    /// To override the contents of this collection use [`set_additional_launch_args`](Self::set_additional_launch_args).
    ///
    /// <p>A list of CLI arguments that are sent to the streaming server when a stream session launches. You can use this to configure the application or stream session details. You can also provide custom arguments that Amazon GameLift Streams passes to your game client.</p>
    /// <p><code>AdditionalEnvironmentVariables</code> and <code>AdditionalLaunchArgs</code> have similar purposes. <code>AdditionalEnvironmentVariables</code> passes data using environment variables; while <code>AdditionalLaunchArgs</code> passes data using command-line arguments.</p>
    pub fn additional_launch_args(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.additional_launch_args.unwrap_or_default();
        v.push(input.into());
        self.additional_launch_args = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of CLI arguments that are sent to the streaming server when a stream session launches. You can use this to configure the application or stream session details. You can also provide custom arguments that Amazon GameLift Streams passes to your game client.</p>
    /// <p><code>AdditionalEnvironmentVariables</code> and <code>AdditionalLaunchArgs</code> have similar purposes. <code>AdditionalEnvironmentVariables</code> passes data using environment variables; while <code>AdditionalLaunchArgs</code> passes data using command-line arguments.</p>
    pub fn set_additional_launch_args(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.additional_launch_args = input;
        self
    }
    /// <p>A list of CLI arguments that are sent to the streaming server when a stream session launches. You can use this to configure the application or stream session details. You can also provide custom arguments that Amazon GameLift Streams passes to your game client.</p>
    /// <p><code>AdditionalEnvironmentVariables</code> and <code>AdditionalLaunchArgs</code> have similar purposes. <code>AdditionalEnvironmentVariables</code> passes data using environment variables; while <code>AdditionalLaunchArgs</code> passes data using command-line arguments.</p>
    pub fn get_additional_launch_args(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.additional_launch_args
    }
    /// Adds a key-value pair to `additional_environment_variables`.
    ///
    /// To override the contents of this collection use [`set_additional_environment_variables`](Self::set_additional_environment_variables).
    ///
    /// <p>A set of options that you can use to control the stream session runtime environment, expressed as a set of key-value pairs. You can use this to configure the application or stream session details. You can also provide custom environment variables that Amazon GameLift Streams passes to your game client.</p><note>
    /// <p>If you want to debug your application with environment variables, we recommend that you do so in a local environment outside of Amazon GameLift Streams. For more information, refer to the Compatibility Guidance in the troubleshooting section of the Developer Guide.</p>
    /// </note>
    /// <p><code>AdditionalEnvironmentVariables</code> and <code>AdditionalLaunchArgs</code> have similar purposes. <code>AdditionalEnvironmentVariables</code> passes data using environment variables; while <code>AdditionalLaunchArgs</code> passes data using command-line arguments.</p>
    pub fn additional_environment_variables(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.additional_environment_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.additional_environment_variables = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A set of options that you can use to control the stream session runtime environment, expressed as a set of key-value pairs. You can use this to configure the application or stream session details. You can also provide custom environment variables that Amazon GameLift Streams passes to your game client.</p><note>
    /// <p>If you want to debug your application with environment variables, we recommend that you do so in a local environment outside of Amazon GameLift Streams. For more information, refer to the Compatibility Guidance in the troubleshooting section of the Developer Guide.</p>
    /// </note>
    /// <p><code>AdditionalEnvironmentVariables</code> and <code>AdditionalLaunchArgs</code> have similar purposes. <code>AdditionalEnvironmentVariables</code> passes data using environment variables; while <code>AdditionalLaunchArgs</code> passes data using command-line arguments.</p>
    pub fn set_additional_environment_variables(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.additional_environment_variables = input;
        self
    }
    /// <p>A set of options that you can use to control the stream session runtime environment, expressed as a set of key-value pairs. You can use this to configure the application or stream session details. You can also provide custom environment variables that Amazon GameLift Streams passes to your game client.</p><note>
    /// <p>If you want to debug your application with environment variables, we recommend that you do so in a local environment outside of Amazon GameLift Streams. For more information, refer to the Compatibility Guidance in the troubleshooting section of the Developer Guide.</p>
    /// </note>
    /// <p><code>AdditionalEnvironmentVariables</code> and <code>AdditionalLaunchArgs</code> have similar purposes. <code>AdditionalEnvironmentVariables</code> passes data using environment variables; while <code>AdditionalLaunchArgs</code> passes data using command-line arguments.</p>
    pub fn get_additional_environment_variables(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.additional_environment_variables
    }
    /// <p>Access location for log files that your content generates during a stream session. These log files are uploaded to cloud storage location at the end of a stream session. The Amazon GameLift Streams application resource defines which log files to upload.</p>
    pub fn log_file_location_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_file_location_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Access location for log files that your content generates during a stream session. These log files are uploaded to cloud storage location at the end of a stream session. The Amazon GameLift Streams application resource defines which log files to upload.</p>
    pub fn set_log_file_location_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_file_location_uri = input;
        self
    }
    /// <p>Access location for log files that your content generates during a stream session. These log files are uploaded to cloud storage location at the end of a stream session. The Amazon GameLift Streams application resource defines which log files to upload.</p>
    pub fn get_log_file_location_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_file_location_uri
    }
    /// <p>The URL of an S3 bucket that stores Amazon GameLift Streams WebSDK files. The URL is used to establish connection with the client.</p>
    pub fn web_sdk_protocol_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_sdk_protocol_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of an S3 bucket that stores Amazon GameLift Streams WebSDK files. The URL is used to establish connection with the client.</p>
    pub fn set_web_sdk_protocol_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_sdk_protocol_url = input;
        self
    }
    /// <p>The URL of an S3 bucket that stores Amazon GameLift Streams WebSDK files. The URL is used to establish connection with the client.</p>
    pub fn get_web_sdk_protocol_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_sdk_protocol_url
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The application streaming in this session.</p>
    /// <p>This value is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that uniquely identifies the application resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>.</p>
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The application streaming in this session.</p>
    /// <p>This value is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that uniquely identifies the application resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The application streaming in this session.</p>
    /// <p>This value is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that uniquely identifies the application resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>Provides details about the stream session's exported files.</p>
    pub fn export_files_metadata(mut self, input: crate::types::ExportFilesMetadata) -> Self {
        self.export_files_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides details about the stream session's exported files.</p>
    pub fn set_export_files_metadata(mut self, input: ::std::option::Option<crate::types::ExportFilesMetadata>) -> Self {
        self.export_files_metadata = input;
        self
    }
    /// <p>Provides details about the stream session's exported files.</p>
    pub fn get_export_files_metadata(&self) -> &::std::option::Option<crate::types::ExportFilesMetadata> {
        &self.export_files_metadata
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartStreamSessionOutput`](crate::operation::start_stream_session::StartStreamSessionOutput).
    pub fn build(self) -> crate::operation::start_stream_session::StartStreamSessionOutput {
        crate::operation::start_stream_session::StartStreamSessionOutput {
            arn: self.arn,
            description: self.description,
            stream_group_id: self.stream_group_id,
            user_id: self.user_id,
            status: self.status,
            status_reason: self.status_reason,
            protocol: self.protocol,
            location: self.location,
            signal_request: self.signal_request,
            signal_response: self.signal_response,
            connection_timeout_seconds: self.connection_timeout_seconds,
            session_length_seconds: self.session_length_seconds,
            additional_launch_args: self.additional_launch_args,
            additional_environment_variables: self.additional_environment_variables,
            log_file_location_uri: self.log_file_location_uri,
            web_sdk_protocol_url: self.web_sdk_protocol_url,
            last_updated_at: self.last_updated_at,
            created_at: self.created_at,
            application_arn: self.application_arn,
            export_files_metadata: self.export_files_metadata,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for StartStreamSessionOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartStreamSessionOutputBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("description", &self.description);
        formatter.field("stream_group_id", &self.stream_group_id);
        formatter.field("user_id", &self.user_id);
        formatter.field("status", &self.status);
        formatter.field("status_reason", &self.status_reason);
        formatter.field("protocol", &self.protocol);
        formatter.field("location", &self.location);
        formatter.field("signal_request", &"*** Sensitive Data Redacted ***");
        formatter.field("signal_response", &"*** Sensitive Data Redacted ***");
        formatter.field("connection_timeout_seconds", &self.connection_timeout_seconds);
        formatter.field("session_length_seconds", &self.session_length_seconds);
        formatter.field("additional_launch_args", &self.additional_launch_args);
        formatter.field("additional_environment_variables", &self.additional_environment_variables);
        formatter.field("log_file_location_uri", &self.log_file_location_uri);
        formatter.field("web_sdk_protocol_url", &self.web_sdk_protocol_url);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("created_at", &self.created_at);
        formatter.field("application_arn", &self.application_arn);
        formatter.field("export_files_metadata", &self.export_files_metadata);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
