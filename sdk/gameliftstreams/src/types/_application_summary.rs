// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an application resource that represents a collection of content for streaming with Amazon GameLift Streams. To retrieve additional application details, call <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_GetApplication.html">GetApplication</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationSummary {
    /// <p>An Amazon Resource Name (ARN) that's assigned to an application resource and uniquely identifies the application across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:application/\[resource ID\]</code>.</p>
    pub arn: ::std::string::String,
    /// <p>An ID that uniquely identifies the application resource. Example ID: <code>a-9ZY8X7Wv6</code>.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>A human-readable label for the application. You can edit this value.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the application resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INITIALIZED</code>: Amazon GameLift Streams has received the request and is initiating the work flow to create an application.</p></li>
    /// <li>
    /// <p><code>PROCESSING</code>: The create application work flow is in process. Amazon GameLift Streams is copying the content and caching for future deployment in a stream group.</p></li>
    /// <li>
    /// <p><code>READY</code>: The application is ready to deploy in a stream group.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when setting up the application. See <code>StatusReason</code> for more information.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the application.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::ApplicationStatus>,
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Configuration settings that identify the operating system for an application resource. This can also include a compatibility layer and other drivers.</p>
    /// <p>A runtime environment can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p>For Linux applications</p>
    /// <ul>
    /// <li>
    /// <p>Ubuntu 22.04 LTS (<code>Type=UBUNTU, Version=22_04_LTS</code>)</p></li>
    /// </ul></li>
    /// <li>
    /// <p>For Windows applications</p>
    /// <ul>
    /// <li>
    /// <p>Microsoft Windows Server 2022 Base (<code>Type=WINDOWS, Version=2022</code>)</p></li>
    /// <li>
    /// <p>Proton 9.0-2 (<code>Type=PROTON, Version=20250516</code>)</p></li>
    /// <li>
    /// <p>Proton 8.0-5 (<code>Type=PROTON, Version=20241007</code>)</p></li>
    /// <li>
    /// <p>Proton 8.0-2c (<code>Type=PROTON, Version=20230704</code>)</p></li>
    /// </ul></li>
    /// </ul>
    pub runtime_environment: ::std::option::Option<crate::types::RuntimeEnvironment>,
}
impl ApplicationSummary {
    /// <p>An Amazon Resource Name (ARN) that's assigned to an application resource and uniquely identifies the application across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:application/\[resource ID\]</code>.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>An ID that uniquely identifies the application resource. Example ID: <code>a-9ZY8X7Wv6</code>.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A human-readable label for the application. You can edit this value.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The current status of the application resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INITIALIZED</code>: Amazon GameLift Streams has received the request and is initiating the work flow to create an application.</p></li>
    /// <li>
    /// <p><code>PROCESSING</code>: The create application work flow is in process. Amazon GameLift Streams is copying the content and caching for future deployment in a stream group.</p></li>
    /// <li>
    /// <p><code>READY</code>: The application is ready to deploy in a stream group.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when setting up the application. See <code>StatusReason</code> for more information.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the application.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ApplicationStatus> {
        self.status.as_ref()
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>Configuration settings that identify the operating system for an application resource. This can also include a compatibility layer and other drivers.</p>
    /// <p>A runtime environment can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p>For Linux applications</p>
    /// <ul>
    /// <li>
    /// <p>Ubuntu 22.04 LTS (<code>Type=UBUNTU, Version=22_04_LTS</code>)</p></li>
    /// </ul></li>
    /// <li>
    /// <p>For Windows applications</p>
    /// <ul>
    /// <li>
    /// <p>Microsoft Windows Server 2022 Base (<code>Type=WINDOWS, Version=2022</code>)</p></li>
    /// <li>
    /// <p>Proton 9.0-2 (<code>Type=PROTON, Version=20250516</code>)</p></li>
    /// <li>
    /// <p>Proton 8.0-5 (<code>Type=PROTON, Version=20241007</code>)</p></li>
    /// <li>
    /// <p>Proton 8.0-2c (<code>Type=PROTON, Version=20230704</code>)</p></li>
    /// </ul></li>
    /// </ul>
    pub fn runtime_environment(&self) -> ::std::option::Option<&crate::types::RuntimeEnvironment> {
        self.runtime_environment.as_ref()
    }
}
impl ApplicationSummary {
    /// Creates a new builder-style object to manufacture [`ApplicationSummary`](crate::types::ApplicationSummary).
    pub fn builder() -> crate::types::builders::ApplicationSummaryBuilder {
        crate::types::builders::ApplicationSummaryBuilder::default()
    }
}

/// A builder for [`ApplicationSummary`](crate::types::ApplicationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ApplicationSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ApplicationStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) runtime_environment: ::std::option::Option<crate::types::RuntimeEnvironment>,
}
impl ApplicationSummaryBuilder {
    /// <p>An Amazon Resource Name (ARN) that's assigned to an application resource and uniquely identifies the application across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:application/\[resource ID\]</code>.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) that's assigned to an application resource and uniquely identifies the application across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:application/\[resource ID\]</code>.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>An Amazon Resource Name (ARN) that's assigned to an application resource and uniquely identifies the application across all Amazon Web Services Regions. Format is <code>arn:aws:gameliftstreams:\[AWS Region\]:\[AWS account\]:application/\[resource ID\]</code>.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>An ID that uniquely identifies the application resource. Example ID: <code>a-9ZY8X7Wv6</code>.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ID that uniquely identifies the application resource. Example ID: <code>a-9ZY8X7Wv6</code>.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>An ID that uniquely identifies the application resource. Example ID: <code>a-9ZY8X7Wv6</code>.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A human-readable label for the application. You can edit this value.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable label for the application. You can edit this value.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A human-readable label for the application. You can edit this value.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The current status of the application resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INITIALIZED</code>: Amazon GameLift Streams has received the request and is initiating the work flow to create an application.</p></li>
    /// <li>
    /// <p><code>PROCESSING</code>: The create application work flow is in process. Amazon GameLift Streams is copying the content and caching for future deployment in a stream group.</p></li>
    /// <li>
    /// <p><code>READY</code>: The application is ready to deploy in a stream group.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when setting up the application. See <code>StatusReason</code> for more information.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the application.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ApplicationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the application resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INITIALIZED</code>: Amazon GameLift Streams has received the request and is initiating the work flow to create an application.</p></li>
    /// <li>
    /// <p><code>PROCESSING</code>: The create application work flow is in process. Amazon GameLift Streams is copying the content and caching for future deployment in a stream group.</p></li>
    /// <li>
    /// <p><code>READY</code>: The application is ready to deploy in a stream group.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when setting up the application. See <code>StatusReason</code> for more information.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the application.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ApplicationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the application resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INITIALIZED</code>: Amazon GameLift Streams has received the request and is initiating the work flow to create an application.</p></li>
    /// <li>
    /// <p><code>PROCESSING</code>: The create application work flow is in process. Amazon GameLift Streams is copying the content and caching for future deployment in a stream group.</p></li>
    /// <li>
    /// <p><code>READY</code>: The application is ready to deploy in a stream group.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when setting up the application. See <code>StatusReason</code> for more information.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the application.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ApplicationStatus> {
        &self.status
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>Configuration settings that identify the operating system for an application resource. This can also include a compatibility layer and other drivers.</p>
    /// <p>A runtime environment can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p>For Linux applications</p>
    /// <ul>
    /// <li>
    /// <p>Ubuntu 22.04 LTS (<code>Type=UBUNTU, Version=22_04_LTS</code>)</p></li>
    /// </ul></li>
    /// <li>
    /// <p>For Windows applications</p>
    /// <ul>
    /// <li>
    /// <p>Microsoft Windows Server 2022 Base (<code>Type=WINDOWS, Version=2022</code>)</p></li>
    /// <li>
    /// <p>Proton 9.0-2 (<code>Type=PROTON, Version=20250516</code>)</p></li>
    /// <li>
    /// <p>Proton 8.0-5 (<code>Type=PROTON, Version=20241007</code>)</p></li>
    /// <li>
    /// <p>Proton 8.0-2c (<code>Type=PROTON, Version=20230704</code>)</p></li>
    /// </ul></li>
    /// </ul>
    pub fn runtime_environment(mut self, input: crate::types::RuntimeEnvironment) -> Self {
        self.runtime_environment = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration settings that identify the operating system for an application resource. This can also include a compatibility layer and other drivers.</p>
    /// <p>A runtime environment can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p>For Linux applications</p>
    /// <ul>
    /// <li>
    /// <p>Ubuntu 22.04 LTS (<code>Type=UBUNTU, Version=22_04_LTS</code>)</p></li>
    /// </ul></li>
    /// <li>
    /// <p>For Windows applications</p>
    /// <ul>
    /// <li>
    /// <p>Microsoft Windows Server 2022 Base (<code>Type=WINDOWS, Version=2022</code>)</p></li>
    /// <li>
    /// <p>Proton 9.0-2 (<code>Type=PROTON, Version=20250516</code>)</p></li>
    /// <li>
    /// <p>Proton 8.0-5 (<code>Type=PROTON, Version=20241007</code>)</p></li>
    /// <li>
    /// <p>Proton 8.0-2c (<code>Type=PROTON, Version=20230704</code>)</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_runtime_environment(mut self, input: ::std::option::Option<crate::types::RuntimeEnvironment>) -> Self {
        self.runtime_environment = input;
        self
    }
    /// <p>Configuration settings that identify the operating system for an application resource. This can also include a compatibility layer and other drivers.</p>
    /// <p>A runtime environment can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p>For Linux applications</p>
    /// <ul>
    /// <li>
    /// <p>Ubuntu 22.04 LTS (<code>Type=UBUNTU, Version=22_04_LTS</code>)</p></li>
    /// </ul></li>
    /// <li>
    /// <p>For Windows applications</p>
    /// <ul>
    /// <li>
    /// <p>Microsoft Windows Server 2022 Base (<code>Type=WINDOWS, Version=2022</code>)</p></li>
    /// <li>
    /// <p>Proton 9.0-2 (<code>Type=PROTON, Version=20250516</code>)</p></li>
    /// <li>
    /// <p>Proton 8.0-5 (<code>Type=PROTON, Version=20241007</code>)</p></li>
    /// <li>
    /// <p>Proton 8.0-2c (<code>Type=PROTON, Version=20230704</code>)</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_runtime_environment(&self) -> &::std::option::Option<crate::types::RuntimeEnvironment> {
        &self.runtime_environment
    }
    /// Consumes the builder and constructs a [`ApplicationSummary`](crate::types::ApplicationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ApplicationSummaryBuilder::arn)
    pub fn build(self) -> ::std::result::Result<crate::types::ApplicationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApplicationSummary {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ApplicationSummary",
                )
            })?,
            id: self.id,
            description: self.description,
            status: self.status,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            runtime_environment: self.runtime_environment,
        })
    }
}
