// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a Amazon GameLift Streams stream group resource for hosting content streams. To retrieve additional stream group details, call <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_GetStreamGroup.html">GetStreamGroup</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StreamGroupSummary {
    /// <p>An <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that uniquely identifies the stream group resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:streamgroup/sg-1AB2C3De4</code>.</p>
    pub arn: ::std::string::String,
    /// <p>An ID that uniquely identifies the stream group resource. Example ID: <code>sg-1AB2C3De4</code>.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>A descriptive label for the stream group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Object that identifies the Amazon GameLift Streams application to stream with this stream group.</p>
    pub default_application: ::std::option::Option<crate::types::DefaultApplication>,
    /// <p>The target stream quality for the stream group.</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub stream_class: ::std::option::Option<crate::types::StreamClass>,
    /// <p>The current status of the stream group resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream group is deploying and isn't ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream group is ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE_WITH_ERRORS</code>: One or more locations in the stream group are in an error state. Verify the details of individual locations and remove any locations which are in error.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the stream group.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when the stream group deployed. See <code>StatusReason</code> (returned by <code>CreateStreamGroup</code>, <code>GetStreamGroup</code>, and <code>UpdateStreamGroup</code>) for more information.</p></li>
    /// <li>
    /// <p><code>EXPIRED</code>: The stream group is expired and can no longer host streams. This typically occurs when a stream group is 365 days old, as indicated by the value of <code>ExpiresAt</code>. Create a new stream group to resume streaming capabilities.</p></li>
    /// <li>
    /// <p><code>UPDATING_LOCATIONS</code>: One or more locations in the stream group are in the process of updating (either activating or deleting).</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::StreamGroupStatus>,
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which this stream group expires. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC). After this time, you will no longer be able to update this stream group or use it to start stream sessions. Only Get and Delete operations will work on an expired stream group.</p>
    pub expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StreamGroupSummary {
    /// <p>An <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that uniquely identifies the stream group resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:streamgroup/sg-1AB2C3De4</code>.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>An ID that uniquely identifies the stream group resource. Example ID: <code>sg-1AB2C3De4</code>.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A descriptive label for the stream group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Object that identifies the Amazon GameLift Streams application to stream with this stream group.</p>
    pub fn default_application(&self) -> ::std::option::Option<&crate::types::DefaultApplication> {
        self.default_application.as_ref()
    }
    /// <p>The target stream quality for the stream group.</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub fn stream_class(&self) -> ::std::option::Option<&crate::types::StreamClass> {
        self.stream_class.as_ref()
    }
    /// <p>The current status of the stream group resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream group is deploying and isn't ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream group is ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE_WITH_ERRORS</code>: One or more locations in the stream group are in an error state. Verify the details of individual locations and remove any locations which are in error.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the stream group.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when the stream group deployed. See <code>StatusReason</code> (returned by <code>CreateStreamGroup</code>, <code>GetStreamGroup</code>, and <code>UpdateStreamGroup</code>) for more information.</p></li>
    /// <li>
    /// <p><code>EXPIRED</code>: The stream group is expired and can no longer host streams. This typically occurs when a stream group is 365 days old, as indicated by the value of <code>ExpiresAt</code>. Create a new stream group to resume streaming capabilities.</p></li>
    /// <li>
    /// <p><code>UPDATING_LOCATIONS</code>: One or more locations in the stream group are in the process of updating (either activating or deleting).</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::StreamGroupStatus> {
        self.status.as_ref()
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The time at which this stream group expires. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC). After this time, you will no longer be able to update this stream group or use it to start stream sessions. Only Get and Delete operations will work on an expired stream group.</p>
    pub fn expires_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expires_at.as_ref()
    }
}
impl StreamGroupSummary {
    /// Creates a new builder-style object to manufacture [`StreamGroupSummary`](crate::types::StreamGroupSummary).
    pub fn builder() -> crate::types::builders::StreamGroupSummaryBuilder {
        crate::types::builders::StreamGroupSummaryBuilder::default()
    }
}

/// A builder for [`StreamGroupSummary`](crate::types::StreamGroupSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StreamGroupSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) default_application: ::std::option::Option<crate::types::DefaultApplication>,
    pub(crate) stream_class: ::std::option::Option<crate::types::StreamClass>,
    pub(crate) status: ::std::option::Option<crate::types::StreamGroupStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StreamGroupSummaryBuilder {
    /// <p>An <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that uniquely identifies the stream group resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:streamgroup/sg-1AB2C3De4</code>.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that uniquely identifies the stream group resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:streamgroup/sg-1AB2C3De4</code>.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>An <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> that uniquely identifies the stream group resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:streamgroup/sg-1AB2C3De4</code>.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>An ID that uniquely identifies the stream group resource. Example ID: <code>sg-1AB2C3De4</code>.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ID that uniquely identifies the stream group resource. Example ID: <code>sg-1AB2C3De4</code>.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>An ID that uniquely identifies the stream group resource. Example ID: <code>sg-1AB2C3De4</code>.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A descriptive label for the stream group.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive label for the stream group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A descriptive label for the stream group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Object that identifies the Amazon GameLift Streams application to stream with this stream group.</p>
    pub fn default_application(mut self, input: crate::types::DefaultApplication) -> Self {
        self.default_application = ::std::option::Option::Some(input);
        self
    }
    /// <p>Object that identifies the Amazon GameLift Streams application to stream with this stream group.</p>
    pub fn set_default_application(mut self, input: ::std::option::Option<crate::types::DefaultApplication>) -> Self {
        self.default_application = input;
        self
    }
    /// <p>Object that identifies the Amazon GameLift Streams application to stream with this stream group.</p>
    pub fn get_default_application(&self) -> &::std::option::Option<crate::types::DefaultApplication> {
        &self.default_application
    }
    /// <p>The target stream quality for the stream group.</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub fn stream_class(mut self, input: crate::types::StreamClass) -> Self {
        self.stream_class = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target stream quality for the stream group.</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_stream_class(mut self, input: ::std::option::Option<crate::types::StreamClass>) -> Self {
        self.stream_class = input;
        self
    }
    /// <p>The target stream quality for the stream group.</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_stream_class(&self) -> &::std::option::Option<crate::types::StreamClass> {
        &self.stream_class
    }
    /// <p>The current status of the stream group resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream group is deploying and isn't ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream group is ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE_WITH_ERRORS</code>: One or more locations in the stream group are in an error state. Verify the details of individual locations and remove any locations which are in error.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the stream group.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when the stream group deployed. See <code>StatusReason</code> (returned by <code>CreateStreamGroup</code>, <code>GetStreamGroup</code>, and <code>UpdateStreamGroup</code>) for more information.</p></li>
    /// <li>
    /// <p><code>EXPIRED</code>: The stream group is expired and can no longer host streams. This typically occurs when a stream group is 365 days old, as indicated by the value of <code>ExpiresAt</code>. Create a new stream group to resume streaming capabilities.</p></li>
    /// <li>
    /// <p><code>UPDATING_LOCATIONS</code>: One or more locations in the stream group are in the process of updating (either activating or deleting).</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::StreamGroupStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the stream group resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream group is deploying and isn't ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream group is ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE_WITH_ERRORS</code>: One or more locations in the stream group are in an error state. Verify the details of individual locations and remove any locations which are in error.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the stream group.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when the stream group deployed. See <code>StatusReason</code> (returned by <code>CreateStreamGroup</code>, <code>GetStreamGroup</code>, and <code>UpdateStreamGroup</code>) for more information.</p></li>
    /// <li>
    /// <p><code>EXPIRED</code>: The stream group is expired and can no longer host streams. This typically occurs when a stream group is 365 days old, as indicated by the value of <code>ExpiresAt</code>. Create a new stream group to resume streaming capabilities.</p></li>
    /// <li>
    /// <p><code>UPDATING_LOCATIONS</code>: One or more locations in the stream group are in the process of updating (either activating or deleting).</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StreamGroupStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the stream group resource. Possible statuses include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: The stream group is deploying and isn't ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The stream group is ready to host streams.</p></li>
    /// <li>
    /// <p><code>ACTIVE_WITH_ERRORS</code>: One or more locations in the stream group are in an error state. Verify the details of individual locations and remove any locations which are in error.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: Amazon GameLift Streams is in the process of deleting the stream group.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: An error occurred when the stream group deployed. See <code>StatusReason</code> (returned by <code>CreateStreamGroup</code>, <code>GetStreamGroup</code>, and <code>UpdateStreamGroup</code>) for more information.</p></li>
    /// <li>
    /// <p><code>EXPIRED</code>: The stream group is expired and can no longer host streams. This typically occurs when a stream group is 365 days old, as indicated by the value of <code>ExpiresAt</code>. Create a new stream group to resume streaming capabilities.</p></li>
    /// <li>
    /// <p><code>UPDATING_LOCATIONS</code>: One or more locations in the stream group are in the process of updating (either activating or deleting).</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StreamGroupStatus> {
        &self.status
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>A timestamp that indicates when this resource was created. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>A timestamp that indicates when this resource was last updated. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC).</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The time at which this stream group expires. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC). After this time, you will no longer be able to update this stream group or use it to start stream sessions. Only Get and Delete operations will work on an expired stream group.</p>
    pub fn expires_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expires_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which this stream group expires. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC). After this time, you will no longer be able to update this stream group or use it to start stream sessions. Only Get and Delete operations will work on an expired stream group.</p>
    pub fn set_expires_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expires_at = input;
        self
    }
    /// <p>The time at which this stream group expires. Timestamps are expressed using in ISO8601 format, such as: <code>2022-12-27T22:29:40+00:00</code> (UTC). After this time, you will no longer be able to update this stream group or use it to start stream sessions. Only Get and Delete operations will work on an expired stream group.</p>
    pub fn get_expires_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expires_at
    }
    /// Consumes the builder and constructs a [`StreamGroupSummary`](crate::types::StreamGroupSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::StreamGroupSummaryBuilder::arn)
    pub fn build(self) -> ::std::result::Result<crate::types::StreamGroupSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StreamGroupSummary {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building StreamGroupSummary",
                )
            })?,
            id: self.id,
            description: self.description,
            default_application: self.default_application,
            stream_class: self.stream_class,
            status: self.status,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            expires_at: self.expires_at,
        })
    }
}
