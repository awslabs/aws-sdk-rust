// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings that identify the operating system for an application resource. This can also include a compatibility layer and other drivers.</p>
/// <p>A runtime environment can be one of the following:</p>
/// <ul>
/// <li>
/// <p>For Linux applications</p>
/// <ul>
/// <li>
/// <p>Ubuntu 22.04 LTS (<code>Type=UBUNTU, Version=22_04_LTS</code>)</p></li>
/// </ul></li>
/// <li>
/// <p>For Windows applications</p>
/// <ul>
/// <li>
/// <p>Microsoft Windows Server 2022 Base (<code>Type=WINDOWS, Version=2022</code>)</p></li>
/// <li>
/// <p>Proton 9.0-2 (<code>Type=PROTON, Version=20250516</code>)</p></li>
/// <li>
/// <p>Proton 8.0-5 (<code>Type=PROTON, Version=20241007</code>)</p></li>
/// <li>
/// <p>Proton 8.0-2c (<code>Type=PROTON, Version=20230704</code>)</p></li>
/// </ul></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuntimeEnvironment {
    /// <p>The operating system and other drivers. For Proton, this also includes the Proton compatibility layer.</p>
    pub r#type: crate::types::RuntimeEnvironmentType,
    /// <p>Versioned container environment for the application operating system.</p>
    pub version: ::std::string::String,
}
impl RuntimeEnvironment {
    /// <p>The operating system and other drivers. For Proton, this also includes the Proton compatibility layer.</p>
    pub fn r#type(&self) -> &crate::types::RuntimeEnvironmentType {
        &self.r#type
    }
    /// <p>Versioned container environment for the application operating system.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
}
impl RuntimeEnvironment {
    /// Creates a new builder-style object to manufacture [`RuntimeEnvironment`](crate::types::RuntimeEnvironment).
    pub fn builder() -> crate::types::builders::RuntimeEnvironmentBuilder {
        crate::types::builders::RuntimeEnvironmentBuilder::default()
    }
}

/// A builder for [`RuntimeEnvironment`](crate::types::RuntimeEnvironment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuntimeEnvironmentBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::RuntimeEnvironmentType>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
}
impl RuntimeEnvironmentBuilder {
    /// <p>The operating system and other drivers. For Proton, this also includes the Proton compatibility layer.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RuntimeEnvironmentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operating system and other drivers. For Proton, this also includes the Proton compatibility layer.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RuntimeEnvironmentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The operating system and other drivers. For Proton, this also includes the Proton compatibility layer.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RuntimeEnvironmentType> {
        &self.r#type
    }
    /// <p>Versioned container environment for the application operating system.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Versioned container environment for the application operating system.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>Versioned container environment for the application operating system.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Consumes the builder and constructs a [`RuntimeEnvironment`](crate::types::RuntimeEnvironment).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::RuntimeEnvironmentBuilder::type)
    /// - [`version`](crate::types::builders::RuntimeEnvironmentBuilder::version)
    pub fn build(self) -> ::std::result::Result<crate::types::RuntimeEnvironment, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuntimeEnvironment {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building RuntimeEnvironment",
                )
            })?,
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building RuntimeEnvironment",
                )
            })?,
        })
    }
}
