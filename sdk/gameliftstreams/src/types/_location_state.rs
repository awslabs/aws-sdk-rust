// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a location and its corresponding stream capacity and status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LocationState {
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub location_name: ::std::option::Option<::std::string::String>,
    /// <p>This value is set of locations, including their name, current status, and capacities.</p>
    /// <p>A location can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: Amazon GameLift Streams is preparing the location. You cannot stream from, scale the capacity of, or remove this location yet.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The location is provisioned with initial capacity. You can now stream from, scale the capacity of, or remove this location.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Amazon GameLift Streams failed to set up this location. The <code>StatusReason</code> field describes the error. You can remove this location and try to add it again.</p></li>
    /// <li>
    /// <p><code>REMOVING</code>: Amazon GameLift Streams is working to remove this location. This will release all provisioned capacity for this location in this stream group.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::StreamGroupLocationStatus>,
    /// <p>The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session. Default is 1 (2 for high stream classes) when creating a stream group or adding a location.</p>
    pub always_on_capacity: ::std::option::Option<i32>,
    /// <p>The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes). Default is 0 when creating a stream group or adding a location.</p>
    pub on_demand_capacity: ::std::option::Option<i32>,
    /// <p>This value is the always-on capacity that you most recently requested for a stream group. You request capacity separately for each location in a stream group. In response to an increase in requested capacity, Amazon GameLift Streams attempts to provision compute resources to make the stream group's allocated capacity meet requested capacity. When always-on capacity is decreased, it can take a few minutes to deprovision allocated capacity to match the requested capacity.</p>
    pub requested_capacity: ::std::option::Option<i32>,
    /// <p>This value is the stream capacity that Amazon GameLift Streams has provisioned in a stream group that can respond immediately to stream requests. It includes resources that are currently streaming and resources that are idle and ready to respond to stream requests. You pay for this capacity whether it's in use or not. After making changes to capacity, it can take a few minutes for the allocated capacity count to reflect the change while compute resources are allocated or deallocated. Similarly, when allocated on-demand capacity is no longer needed, it can take a few minutes for Amazon GameLift Streams to spin down the allocated capacity.</p>
    pub allocated_capacity: ::std::option::Option<i32>,
    /// <p>This value is the amount of allocated capacity that is not currently streaming. It represents the stream group's ability to respond immediately to new stream requests with near-instant startup time.</p>
    pub idle_capacity: ::std::option::Option<i32>,
}
impl LocationState {
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn location_name(&self) -> ::std::option::Option<&str> {
        self.location_name.as_deref()
    }
    /// <p>This value is set of locations, including their name, current status, and capacities.</p>
    /// <p>A location can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: Amazon GameLift Streams is preparing the location. You cannot stream from, scale the capacity of, or remove this location yet.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The location is provisioned with initial capacity. You can now stream from, scale the capacity of, or remove this location.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Amazon GameLift Streams failed to set up this location. The <code>StatusReason</code> field describes the error. You can remove this location and try to add it again.</p></li>
    /// <li>
    /// <p><code>REMOVING</code>: Amazon GameLift Streams is working to remove this location. This will release all provisioned capacity for this location in this stream group.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::StreamGroupLocationStatus> {
        self.status.as_ref()
    }
    /// <p>The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session. Default is 1 (2 for high stream classes) when creating a stream group or adding a location.</p>
    pub fn always_on_capacity(&self) -> ::std::option::Option<i32> {
        self.always_on_capacity
    }
    /// <p>The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes). Default is 0 when creating a stream group or adding a location.</p>
    pub fn on_demand_capacity(&self) -> ::std::option::Option<i32> {
        self.on_demand_capacity
    }
    /// <p>This value is the always-on capacity that you most recently requested for a stream group. You request capacity separately for each location in a stream group. In response to an increase in requested capacity, Amazon GameLift Streams attempts to provision compute resources to make the stream group's allocated capacity meet requested capacity. When always-on capacity is decreased, it can take a few minutes to deprovision allocated capacity to match the requested capacity.</p>
    pub fn requested_capacity(&self) -> ::std::option::Option<i32> {
        self.requested_capacity
    }
    /// <p>This value is the stream capacity that Amazon GameLift Streams has provisioned in a stream group that can respond immediately to stream requests. It includes resources that are currently streaming and resources that are idle and ready to respond to stream requests. You pay for this capacity whether it's in use or not. After making changes to capacity, it can take a few minutes for the allocated capacity count to reflect the change while compute resources are allocated or deallocated. Similarly, when allocated on-demand capacity is no longer needed, it can take a few minutes for Amazon GameLift Streams to spin down the allocated capacity.</p>
    pub fn allocated_capacity(&self) -> ::std::option::Option<i32> {
        self.allocated_capacity
    }
    /// <p>This value is the amount of allocated capacity that is not currently streaming. It represents the stream group's ability to respond immediately to new stream requests with near-instant startup time.</p>
    pub fn idle_capacity(&self) -> ::std::option::Option<i32> {
        self.idle_capacity
    }
}
impl LocationState {
    /// Creates a new builder-style object to manufacture [`LocationState`](crate::types::LocationState).
    pub fn builder() -> crate::types::builders::LocationStateBuilder {
        crate::types::builders::LocationStateBuilder::default()
    }
}

/// A builder for [`LocationState`](crate::types::LocationState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LocationStateBuilder {
    pub(crate) location_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::StreamGroupLocationStatus>,
    pub(crate) always_on_capacity: ::std::option::Option<i32>,
    pub(crate) on_demand_capacity: ::std::option::Option<i32>,
    pub(crate) requested_capacity: ::std::option::Option<i32>,
    pub(crate) allocated_capacity: ::std::option::Option<i32>,
    pub(crate) idle_capacity: ::std::option::Option<i32>,
}
impl LocationStateBuilder {
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn location_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn set_location_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_name = input;
        self
    }
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn get_location_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_name
    }
    /// <p>This value is set of locations, including their name, current status, and capacities.</p>
    /// <p>A location can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: Amazon GameLift Streams is preparing the location. You cannot stream from, scale the capacity of, or remove this location yet.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The location is provisioned with initial capacity. You can now stream from, scale the capacity of, or remove this location.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Amazon GameLift Streams failed to set up this location. The <code>StatusReason</code> field describes the error. You can remove this location and try to add it again.</p></li>
    /// <li>
    /// <p><code>REMOVING</code>: Amazon GameLift Streams is working to remove this location. This will release all provisioned capacity for this location in this stream group.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::StreamGroupLocationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>This value is set of locations, including their name, current status, and capacities.</p>
    /// <p>A location can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: Amazon GameLift Streams is preparing the location. You cannot stream from, scale the capacity of, or remove this location yet.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The location is provisioned with initial capacity. You can now stream from, scale the capacity of, or remove this location.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Amazon GameLift Streams failed to set up this location. The <code>StatusReason</code> field describes the error. You can remove this location and try to add it again.</p></li>
    /// <li>
    /// <p><code>REMOVING</code>: Amazon GameLift Streams is working to remove this location. This will release all provisioned capacity for this location in this stream group.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StreamGroupLocationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>This value is set of locations, including their name, current status, and capacities.</p>
    /// <p>A location can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVATING</code>: Amazon GameLift Streams is preparing the location. You cannot stream from, scale the capacity of, or remove this location yet.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The location is provisioned with initial capacity. You can now stream from, scale the capacity of, or remove this location.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Amazon GameLift Streams failed to set up this location. The <code>StatusReason</code> field describes the error. You can remove this location and try to add it again.</p></li>
    /// <li>
    /// <p><code>REMOVING</code>: Amazon GameLift Streams is working to remove this location. This will release all provisioned capacity for this location in this stream group.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StreamGroupLocationStatus> {
        &self.status
    }
    /// <p>The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session. Default is 1 (2 for high stream classes) when creating a stream group or adding a location.</p>
    pub fn always_on_capacity(mut self, input: i32) -> Self {
        self.always_on_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session. Default is 1 (2 for high stream classes) when creating a stream group or adding a location.</p>
    pub fn set_always_on_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.always_on_capacity = input;
        self
    }
    /// <p>The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session. Default is 1 (2 for high stream classes) when creating a stream group or adding a location.</p>
    pub fn get_always_on_capacity(&self) -> &::std::option::Option<i32> {
        &self.always_on_capacity
    }
    /// <p>The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes). Default is 0 when creating a stream group or adding a location.</p>
    pub fn on_demand_capacity(mut self, input: i32) -> Self {
        self.on_demand_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes). Default is 0 when creating a stream group or adding a location.</p>
    pub fn set_on_demand_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.on_demand_capacity = input;
        self
    }
    /// <p>The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes). Default is 0 when creating a stream group or adding a location.</p>
    pub fn get_on_demand_capacity(&self) -> &::std::option::Option<i32> {
        &self.on_demand_capacity
    }
    /// <p>This value is the always-on capacity that you most recently requested for a stream group. You request capacity separately for each location in a stream group. In response to an increase in requested capacity, Amazon GameLift Streams attempts to provision compute resources to make the stream group's allocated capacity meet requested capacity. When always-on capacity is decreased, it can take a few minutes to deprovision allocated capacity to match the requested capacity.</p>
    pub fn requested_capacity(mut self, input: i32) -> Self {
        self.requested_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>This value is the always-on capacity that you most recently requested for a stream group. You request capacity separately for each location in a stream group. In response to an increase in requested capacity, Amazon GameLift Streams attempts to provision compute resources to make the stream group's allocated capacity meet requested capacity. When always-on capacity is decreased, it can take a few minutes to deprovision allocated capacity to match the requested capacity.</p>
    pub fn set_requested_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.requested_capacity = input;
        self
    }
    /// <p>This value is the always-on capacity that you most recently requested for a stream group. You request capacity separately for each location in a stream group. In response to an increase in requested capacity, Amazon GameLift Streams attempts to provision compute resources to make the stream group's allocated capacity meet requested capacity. When always-on capacity is decreased, it can take a few minutes to deprovision allocated capacity to match the requested capacity.</p>
    pub fn get_requested_capacity(&self) -> &::std::option::Option<i32> {
        &self.requested_capacity
    }
    /// <p>This value is the stream capacity that Amazon GameLift Streams has provisioned in a stream group that can respond immediately to stream requests. It includes resources that are currently streaming and resources that are idle and ready to respond to stream requests. You pay for this capacity whether it's in use or not. After making changes to capacity, it can take a few minutes for the allocated capacity count to reflect the change while compute resources are allocated or deallocated. Similarly, when allocated on-demand capacity is no longer needed, it can take a few minutes for Amazon GameLift Streams to spin down the allocated capacity.</p>
    pub fn allocated_capacity(mut self, input: i32) -> Self {
        self.allocated_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>This value is the stream capacity that Amazon GameLift Streams has provisioned in a stream group that can respond immediately to stream requests. It includes resources that are currently streaming and resources that are idle and ready to respond to stream requests. You pay for this capacity whether it's in use or not. After making changes to capacity, it can take a few minutes for the allocated capacity count to reflect the change while compute resources are allocated or deallocated. Similarly, when allocated on-demand capacity is no longer needed, it can take a few minutes for Amazon GameLift Streams to spin down the allocated capacity.</p>
    pub fn set_allocated_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.allocated_capacity = input;
        self
    }
    /// <p>This value is the stream capacity that Amazon GameLift Streams has provisioned in a stream group that can respond immediately to stream requests. It includes resources that are currently streaming and resources that are idle and ready to respond to stream requests. You pay for this capacity whether it's in use or not. After making changes to capacity, it can take a few minutes for the allocated capacity count to reflect the change while compute resources are allocated or deallocated. Similarly, when allocated on-demand capacity is no longer needed, it can take a few minutes for Amazon GameLift Streams to spin down the allocated capacity.</p>
    pub fn get_allocated_capacity(&self) -> &::std::option::Option<i32> {
        &self.allocated_capacity
    }
    /// <p>This value is the amount of allocated capacity that is not currently streaming. It represents the stream group's ability to respond immediately to new stream requests with near-instant startup time.</p>
    pub fn idle_capacity(mut self, input: i32) -> Self {
        self.idle_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>This value is the amount of allocated capacity that is not currently streaming. It represents the stream group's ability to respond immediately to new stream requests with near-instant startup time.</p>
    pub fn set_idle_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_capacity = input;
        self
    }
    /// <p>This value is the amount of allocated capacity that is not currently streaming. It represents the stream group's ability to respond immediately to new stream requests with near-instant startup time.</p>
    pub fn get_idle_capacity(&self) -> &::std::option::Option<i32> {
        &self.idle_capacity
    }
    /// Consumes the builder and constructs a [`LocationState`](crate::types::LocationState).
    pub fn build(self) -> crate::types::LocationState {
        crate::types::LocationState {
            location_name: self.location_name,
            status: self.status,
            always_on_capacity: self.always_on_capacity,
            on_demand_capacity: self.on_demand_capacity,
            requested_capacity: self.requested_capacity,
            allocated_capacity: self.allocated_capacity,
            idle_capacity: self.idle_capacity,
        }
    }
}
