// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings that define a stream group's stream capacity for a location. When configuring a location for the first time, you must specify a numeric value for at least one of the two capacity types. To update the capacity for an existing stream group, call <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_UpdateStreamGroup.html">UpdateStreamGroup</a>. To add a new location and specify its capacity, call <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_AddStreamGroupLocations.html">AddStreamGroupLocations</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LocationConfiguration {
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub location_name: ::std::string::String,
    /// <p>The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session. Default is 1 (2 for high stream classes) when creating a stream group or adding a location.</p>
    pub always_on_capacity: ::std::option::Option<i32>,
    /// <p>The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes). Default is 0 when creating a stream group or adding a location.</p>
    pub on_demand_capacity: ::std::option::Option<i32>,
}
impl LocationConfiguration {
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn location_name(&self) -> &str {
        use std::ops::Deref;
        self.location_name.deref()
    }
    /// <p>The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session. Default is 1 (2 for high stream classes) when creating a stream group or adding a location.</p>
    pub fn always_on_capacity(&self) -> ::std::option::Option<i32> {
        self.always_on_capacity
    }
    /// <p>The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes). Default is 0 when creating a stream group or adding a location.</p>
    pub fn on_demand_capacity(&self) -> ::std::option::Option<i32> {
        self.on_demand_capacity
    }
}
impl LocationConfiguration {
    /// Creates a new builder-style object to manufacture [`LocationConfiguration`](crate::types::LocationConfiguration).
    pub fn builder() -> crate::types::builders::LocationConfigurationBuilder {
        crate::types::builders::LocationConfigurationBuilder::default()
    }
}

/// A builder for [`LocationConfiguration`](crate::types::LocationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LocationConfigurationBuilder {
    pub(crate) location_name: ::std::option::Option<::std::string::String>,
    pub(crate) always_on_capacity: ::std::option::Option<i32>,
    pub(crate) on_demand_capacity: ::std::option::Option<i32>,
}
impl LocationConfigurationBuilder {
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    /// This field is required.
    pub fn location_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn set_location_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_name = input;
        self
    }
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn get_location_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_name
    }
    /// <p>The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session. Default is 1 (2 for high stream classes) when creating a stream group or adding a location.</p>
    pub fn always_on_capacity(mut self, input: i32) -> Self {
        self.always_on_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session. Default is 1 (2 for high stream classes) when creating a stream group or adding a location.</p>
    pub fn set_always_on_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.always_on_capacity = input;
        self
    }
    /// <p>The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session. Default is 1 (2 for high stream classes) when creating a stream group or adding a location.</p>
    pub fn get_always_on_capacity(&self) -> &::std::option::Option<i32> {
        &self.always_on_capacity
    }
    /// <p>The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes). Default is 0 when creating a stream group or adding a location.</p>
    pub fn on_demand_capacity(mut self, input: i32) -> Self {
        self.on_demand_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes). Default is 0 when creating a stream group or adding a location.</p>
    pub fn set_on_demand_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.on_demand_capacity = input;
        self
    }
    /// <p>The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes). Default is 0 when creating a stream group or adding a location.</p>
    pub fn get_on_demand_capacity(&self) -> &::std::option::Option<i32> {
        &self.on_demand_capacity
    }
    /// Consumes the builder and constructs a [`LocationConfiguration`](crate::types::LocationConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`location_name`](crate::types::builders::LocationConfigurationBuilder::location_name)
    pub fn build(self) -> ::std::result::Result<crate::types::LocationConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LocationConfiguration {
            location_name: self.location_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "location_name",
                    "location_name was not specified but it is required when building LocationConfiguration",
                )
            })?,
            always_on_capacity: self.always_on_capacity,
            on_demand_capacity: self.on_demand_capacity,
        })
    }
}
