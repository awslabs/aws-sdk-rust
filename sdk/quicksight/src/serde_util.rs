// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn generate_embed_url_for_anonymous_user_output_correct_errors(
    mut builder: crate::operation::generate_embed_url_for_anonymous_user::builders::GenerateEmbedUrlForAnonymousUserOutputBuilder,
) -> crate::operation::generate_embed_url_for_anonymous_user::builders::GenerateEmbedUrlForAnonymousUserOutputBuilder {
    if builder.embed_url.is_none() {
        builder.embed_url = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.anonymous_user_arn.is_none() {
        builder.anonymous_user_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn generate_embed_url_for_registered_user_output_correct_errors(
    mut builder: crate::operation::generate_embed_url_for_registered_user::builders::GenerateEmbedUrlForRegisteredUserOutputBuilder,
) -> crate::operation::generate_embed_url_for_registered_user::builders::GenerateEmbedUrlForRegisteredUserOutputBuilder {
    if builder.embed_url.is_none() {
        builder.embed_url = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    builder
}

pub(crate) fn analysis_definition_correct_errors(
    mut builder: crate::types::builders::AnalysisDefinitionBuilder,
) -> crate::types::builders::AnalysisDefinitionBuilder {
    if builder.data_set_identifier_declarations.is_none() {
        builder.data_set_identifier_declarations = Some(Default::default())
    }
    builder
}

pub(crate) fn dashboard_version_definition_correct_errors(
    mut builder: crate::types::builders::DashboardVersionDefinitionBuilder,
) -> crate::types::builders::DashboardVersionDefinitionBuilder {
    if builder.data_set_identifier_declarations.is_none() {
        builder.data_set_identifier_declarations = Some(Default::default())
    }
    builder
}

pub(crate) fn data_set_refresh_properties_correct_errors(
    mut builder: crate::types::builders::DataSetRefreshPropertiesBuilder,
) -> crate::types::builders::DataSetRefreshPropertiesBuilder {
    if builder.refresh_configuration.is_none() {
        builder.refresh_configuration = {
            let builder = crate::types::builders::RefreshConfigurationBuilder::default();
            Some(crate::serde_util::refresh_configuration_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn ingestion_correct_errors(mut builder: crate::types::builders::IngestionBuilder) -> crate::types::builders::IngestionBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.ingestion_status.is_none() {
        builder.ingestion_status = "no value was set".parse::<crate::types::IngestionStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn refresh_schedule_correct_errors(
    mut builder: crate::types::builders::RefreshScheduleBuilder,
) -> crate::types::builders::RefreshScheduleBuilder {
    if builder.schedule_id.is_none() {
        builder.schedule_id = Some(Default::default())
    }
    if builder.schedule_frequency.is_none() {
        builder.schedule_frequency = {
            let builder = crate::types::builders::RefreshFrequencyBuilder::default();
            crate::serde_util::refresh_frequency_correct_errors(builder).build().ok()
        }
    }
    if builder.refresh_type.is_none() {
        builder.refresh_type = "no value was set".parse::<crate::types::IngestionType>().ok()
    }
    builder
}

pub(crate) fn snapshot_configuration_correct_errors(
    mut builder: crate::types::builders::SnapshotConfigurationBuilder,
) -> crate::types::builders::SnapshotConfigurationBuilder {
    if builder.file_groups.is_none() {
        builder.file_groups = Some(Default::default())
    }
    builder
}

pub(crate) fn template_version_definition_correct_errors(
    mut builder: crate::types::builders::TemplateVersionDefinitionBuilder,
) -> crate::types::builders::TemplateVersionDefinitionBuilder {
    if builder.data_set_configurations.is_none() {
        builder.data_set_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn topic_refresh_schedule_correct_errors(
    mut builder: crate::types::builders::TopicRefreshScheduleBuilder,
) -> crate::types::builders::TopicRefreshScheduleBuilder {
    if builder.is_enabled.is_none() {
        builder.is_enabled = Some(Default::default())
    }
    if builder.based_on_spice_schedule.is_none() {
        builder.based_on_spice_schedule = Some(Default::default())
    }
    builder
}

pub(crate) fn analysis_defaults_correct_errors(
    mut builder: crate::types::builders::AnalysisDefaultsBuilder,
) -> crate::types::builders::AnalysisDefaultsBuilder {
    if builder.default_new_sheet_configuration.is_none() {
        builder.default_new_sheet_configuration = {
            let builder = crate::types::builders::DefaultNewSheetConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn queue_info_correct_errors(mut builder: crate::types::builders::QueueInfoBuilder) -> crate::types::builders::QueueInfoBuilder {
    if builder.waiting_on_ingestion.is_none() {
        builder.waiting_on_ingestion = Some(Default::default())
    }
    if builder.queued_ingestion.is_none() {
        builder.queued_ingestion = Some(Default::default())
    }
    builder
}

pub(crate) fn refresh_configuration_correct_errors(
    mut builder: crate::types::builders::RefreshConfigurationBuilder,
) -> crate::types::builders::RefreshConfigurationBuilder {
    if builder.incremental_refresh.is_none() {
        builder.incremental_refresh = {
            let builder = crate::types::builders::IncrementalRefreshBuilder::default();
            Some(crate::serde_util::incremental_refresh_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn refresh_frequency_correct_errors(
    mut builder: crate::types::builders::RefreshFrequencyBuilder,
) -> crate::types::builders::RefreshFrequencyBuilder {
    if builder.interval.is_none() {
        builder.interval = "no value was set".parse::<crate::types::RefreshInterval>().ok()
    }
    builder
}

pub(crate) fn resource_permission_correct_errors(
    mut builder: crate::types::builders::ResourcePermissionBuilder,
) -> crate::types::builders::ResourcePermissionBuilder {
    if builder.principal.is_none() {
        builder.principal = Some(Default::default())
    }
    if builder.actions.is_none() {
        builder.actions = Some(Default::default())
    }
    builder
}

pub(crate) fn row_level_permission_data_set_correct_errors(
    mut builder: crate::types::builders::RowLevelPermissionDataSetBuilder,
) -> crate::types::builders::RowLevelPermissionDataSetBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.permission_policy.is_none() {
        builder.permission_policy = "no value was set".parse::<crate::types::RowLevelPermissionPolicy>().ok()
    }
    builder
}

pub(crate) fn row_level_permission_tag_configuration_correct_errors(
    mut builder: crate::types::builders::RowLevelPermissionTagConfigurationBuilder,
) -> crate::types::builders::RowLevelPermissionTagConfigurationBuilder {
    if builder.tag_rules.is_none() {
        builder.tag_rules = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_connection_properties_correct_errors(
    mut builder: crate::types::builders::VpcConnectionPropertiesBuilder,
) -> crate::types::builders::VpcConnectionPropertiesBuilder {
    if builder.vpc_connection_arn.is_none() {
        builder.vpc_connection_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn amazon_elasticsearch_parameters_correct_errors(
    mut builder: crate::types::builders::AmazonElasticsearchParametersBuilder,
) -> crate::types::builders::AmazonElasticsearchParametersBuilder {
    if builder.domain.is_none() {
        builder.domain = Some(Default::default())
    }
    builder
}

pub(crate) fn amazon_open_search_parameters_correct_errors(
    mut builder: crate::types::builders::AmazonOpenSearchParametersBuilder,
) -> crate::types::builders::AmazonOpenSearchParametersBuilder {
    if builder.domain.is_none() {
        builder.domain = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_export_job_analysis_override_properties_correct_errors(
    mut builder: crate::types::builders::AssetBundleExportJobAnalysisOverridePropertiesBuilder,
) -> crate::types::builders::AssetBundleExportJobAnalysisOverridePropertiesBuilder {
    if builder.properties.is_none() {
        builder.properties = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_export_job_dashboard_override_properties_correct_errors(
    mut builder: crate::types::builders::AssetBundleExportJobDashboardOverridePropertiesBuilder,
) -> crate::types::builders::AssetBundleExportJobDashboardOverridePropertiesBuilder {
    if builder.properties.is_none() {
        builder.properties = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_export_job_data_set_override_properties_correct_errors(
    mut builder: crate::types::builders::AssetBundleExportJobDataSetOverridePropertiesBuilder,
) -> crate::types::builders::AssetBundleExportJobDataSetOverridePropertiesBuilder {
    if builder.properties.is_none() {
        builder.properties = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_export_job_data_source_override_properties_correct_errors(
    mut builder: crate::types::builders::AssetBundleExportJobDataSourceOverridePropertiesBuilder,
) -> crate::types::builders::AssetBundleExportJobDataSourceOverridePropertiesBuilder {
    if builder.properties.is_none() {
        builder.properties = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_export_job_refresh_schedule_override_properties_correct_errors(
    mut builder: crate::types::builders::AssetBundleExportJobRefreshScheduleOverridePropertiesBuilder,
) -> crate::types::builders::AssetBundleExportJobRefreshScheduleOverridePropertiesBuilder {
    if builder.properties.is_none() {
        builder.properties = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_export_job_theme_override_properties_correct_errors(
    mut builder: crate::types::builders::AssetBundleExportJobThemeOverridePropertiesBuilder,
) -> crate::types::builders::AssetBundleExportJobThemeOverridePropertiesBuilder {
    if builder.properties.is_none() {
        builder.properties = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_export_job_vpc_connection_override_properties_correct_errors(
    mut builder: crate::types::builders::AssetBundleExportJobVpcConnectionOverridePropertiesBuilder,
) -> crate::types::builders::AssetBundleExportJobVpcConnectionOverridePropertiesBuilder {
    if builder.properties.is_none() {
        builder.properties = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_import_job_analysis_override_parameters_correct_errors(
    mut builder: crate::types::builders::AssetBundleImportJobAnalysisOverrideParametersBuilder,
) -> crate::types::builders::AssetBundleImportJobAnalysisOverrideParametersBuilder {
    if builder.analysis_id.is_none() {
        builder.analysis_id = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_import_job_dashboard_override_parameters_correct_errors(
    mut builder: crate::types::builders::AssetBundleImportJobDashboardOverrideParametersBuilder,
) -> crate::types::builders::AssetBundleImportJobDashboardOverrideParametersBuilder {
    if builder.dashboard_id.is_none() {
        builder.dashboard_id = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_import_job_data_set_override_parameters_correct_errors(
    mut builder: crate::types::builders::AssetBundleImportJobDataSetOverrideParametersBuilder,
) -> crate::types::builders::AssetBundleImportJobDataSetOverrideParametersBuilder {
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_import_job_data_source_override_parameters_correct_errors(
    mut builder: crate::types::builders::AssetBundleImportJobDataSourceOverrideParametersBuilder,
) -> crate::types::builders::AssetBundleImportJobDataSourceOverrideParametersBuilder {
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_import_job_refresh_schedule_override_parameters_correct_errors(
    mut builder: crate::types::builders::AssetBundleImportJobRefreshScheduleOverrideParametersBuilder,
) -> crate::types::builders::AssetBundleImportJobRefreshScheduleOverrideParametersBuilder {
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.schedule_id.is_none() {
        builder.schedule_id = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_import_job_theme_override_parameters_correct_errors(
    mut builder: crate::types::builders::AssetBundleImportJobThemeOverrideParametersBuilder,
) -> crate::types::builders::AssetBundleImportJobThemeOverrideParametersBuilder {
    if builder.theme_id.is_none() {
        builder.theme_id = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_import_job_vpc_connection_override_parameters_correct_errors(
    mut builder: crate::types::builders::AssetBundleImportJobVpcConnectionOverrideParametersBuilder,
) -> crate::types::builders::AssetBundleImportJobVpcConnectionOverrideParametersBuilder {
    if builder.vpc_connection_id.is_none() {
        builder.vpc_connection_id = Some(Default::default())
    }
    builder
}

pub(crate) fn aurora_parameters_correct_errors(
    mut builder: crate::types::builders::AuroraParametersBuilder,
) -> crate::types::builders::AuroraParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn aurora_postgre_sql_parameters_correct_errors(
    mut builder: crate::types::builders::AuroraPostgreSqlParametersBuilder,
) -> crate::types::builders::AuroraPostgreSqlParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_iot_analytics_parameters_correct_errors(
    mut builder: crate::types::builders::AwsIotAnalyticsParametersBuilder,
) -> crate::types::builders::AwsIotAnalyticsParametersBuilder {
    if builder.data_set_name.is_none() {
        builder.data_set_name = Some(Default::default())
    }
    builder
}

pub(crate) fn calculated_field_correct_errors(
    mut builder: crate::types::builders::CalculatedFieldBuilder,
) -> crate::types::builders::CalculatedFieldBuilder {
    if builder.data_set_identifier.is_none() {
        builder.data_set_identifier = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn column_configuration_correct_errors(
    mut builder: crate::types::builders::ColumnConfigurationBuilder,
) -> crate::types::builders::ColumnConfigurationBuilder {
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn data_set_identifier_declaration_correct_errors(
    mut builder: crate::types::builders::DataSetIdentifierDeclarationBuilder,
) -> crate::types::builders::DataSetIdentifierDeclarationBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.data_set_arn.is_none() {
        builder.data_set_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn databricks_parameters_correct_errors(
    mut builder: crate::types::builders::DatabricksParametersBuilder,
) -> crate::types::builders::DatabricksParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.sql_endpoint_path.is_none() {
        builder.sql_endpoint_path = Some(Default::default())
    }
    builder
}

pub(crate) fn dataset_metadata_correct_errors(
    mut builder: crate::types::builders::DatasetMetadataBuilder,
) -> crate::types::builders::DatasetMetadataBuilder {
    if builder.dataset_arn.is_none() {
        builder.dataset_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn exasol_parameters_correct_errors(
    mut builder: crate::types::builders::ExasolParametersBuilder,
) -> crate::types::builders::ExasolParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_group_correct_errors(mut builder: crate::types::builders::FilterGroupBuilder) -> crate::types::builders::FilterGroupBuilder {
    if builder.filter_group_id.is_none() {
        builder.filter_group_id = Some(Default::default())
    }
    if builder.filters.is_none() {
        builder.filters = Some(Default::default())
    }
    if builder.scope_configuration.is_none() {
        builder.scope_configuration = {
            let builder = crate::types::builders::FilterScopeConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    if builder.cross_dataset.is_none() {
        builder.cross_dataset = "no value was set".parse::<crate::types::CrossDatasetTypes>().ok()
    }
    builder
}

pub(crate) fn incremental_refresh_correct_errors(
    mut builder: crate::types::builders::IncrementalRefreshBuilder,
) -> crate::types::builders::IncrementalRefreshBuilder {
    if builder.lookback_window.is_none() {
        builder.lookback_window = {
            let builder = crate::types::builders::LookbackWindowBuilder::default();
            crate::serde_util::lookback_window_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn jira_parameters_correct_errors(
    mut builder: crate::types::builders::JiraParametersBuilder,
) -> crate::types::builders::JiraParametersBuilder {
    if builder.site_base_url.is_none() {
        builder.site_base_url = Some(Default::default())
    }
    builder
}

pub(crate) fn logical_table_correct_errors(mut builder: crate::types::builders::LogicalTableBuilder) -> crate::types::builders::LogicalTableBuilder {
    if builder.alias.is_none() {
        builder.alias = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = {
            let builder = crate::types::builders::LogicalTableSourceBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn maria_db_parameters_correct_errors(
    mut builder: crate::types::builders::MariaDbParametersBuilder,
) -> crate::types::builders::MariaDbParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn my_sql_parameters_correct_errors(
    mut builder: crate::types::builders::MySqlParametersBuilder,
) -> crate::types::builders::MySqlParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn oracle_parameters_correct_errors(
    mut builder: crate::types::builders::OracleParametersBuilder,
) -> crate::types::builders::OracleParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn postgre_sql_parameters_correct_errors(
    mut builder: crate::types::builders::PostgreSqlParametersBuilder,
) -> crate::types::builders::PostgreSqlParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn presto_parameters_correct_errors(
    mut builder: crate::types::builders::PrestoParametersBuilder,
) -> crate::types::builders::PrestoParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn rds_parameters_correct_errors(
    mut builder: crate::types::builders::RdsParametersBuilder,
) -> crate::types::builders::RdsParametersBuilder {
    if builder.instance_id.is_none() {
        builder.instance_id = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_parameters_correct_errors(
    mut builder: crate::types::builders::RedshiftParametersBuilder,
) -> crate::types::builders::RedshiftParametersBuilder {
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_parameters_correct_errors(mut builder: crate::types::builders::S3ParametersBuilder) -> crate::types::builders::S3ParametersBuilder {
    if builder.manifest_file_location.is_none() {
        builder.manifest_file_location = {
            let builder = crate::types::builders::ManifestFileLocationBuilder::default();
            crate::serde_util::manifest_file_location_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn service_now_parameters_correct_errors(
    mut builder: crate::types::builders::ServiceNowParametersBuilder,
) -> crate::types::builders::ServiceNowParametersBuilder {
    if builder.site_base_url.is_none() {
        builder.site_base_url = Some(Default::default())
    }
    builder
}

pub(crate) fn sheet_definition_correct_errors(
    mut builder: crate::types::builders::SheetDefinitionBuilder,
) -> crate::types::builders::SheetDefinitionBuilder {
    if builder.sheet_id.is_none() {
        builder.sheet_id = Some(Default::default())
    }
    builder
}

pub(crate) fn snowflake_parameters_correct_errors(
    mut builder: crate::types::builders::SnowflakeParametersBuilder,
) -> crate::types::builders::SnowflakeParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.warehouse.is_none() {
        builder.warehouse = Some(Default::default())
    }
    builder
}

pub(crate) fn spark_parameters_correct_errors(
    mut builder: crate::types::builders::SparkParametersBuilder,
) -> crate::types::builders::SparkParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    builder
}

pub(crate) fn sql_server_parameters_correct_errors(
    mut builder: crate::types::builders::SqlServerParametersBuilder,
) -> crate::types::builders::SqlServerParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn starburst_parameters_correct_errors(
    mut builder: crate::types::builders::StarburstParametersBuilder,
) -> crate::types::builders::StarburstParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn teradata_parameters_correct_errors(
    mut builder: crate::types::builders::TeradataParametersBuilder,
) -> crate::types::builders::TeradataParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn trino_parameters_correct_errors(
    mut builder: crate::types::builders::TrinoParametersBuilder,
) -> crate::types::builders::TrinoParametersBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn twitter_parameters_correct_errors(
    mut builder: crate::types::builders::TwitterParametersBuilder,
) -> crate::types::builders::TwitterParametersBuilder {
    if builder.query.is_none() {
        builder.query = Some(Default::default())
    }
    if builder.max_rows.is_none() {
        builder.max_rows = Some(Default::default())
    }
    builder
}

pub(crate) fn column_identifier_correct_errors(
    mut builder: crate::types::builders::ColumnIdentifierBuilder,
) -> crate::types::builders::ColumnIdentifierBuilder {
    if builder.data_set_identifier.is_none() {
        builder.data_set_identifier = Some(Default::default())
    }
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_sql_correct_errors(mut builder: crate::types::builders::CustomSqlBuilder) -> crate::types::builders::CustomSqlBuilder {
    if builder.data_source_arn.is_none() {
        builder.data_source_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.sql_query.is_none() {
        builder.sql_query = Some(Default::default())
    }
    builder
}

pub(crate) fn date_time_dataset_parameter_correct_errors(
    mut builder: crate::types::builders::DateTimeDatasetParameterBuilder,
) -> crate::types::builders::DateTimeDatasetParameterBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value_type.is_none() {
        builder.value_type = "no value was set".parse::<crate::types::DatasetParameterValueType>().ok()
    }
    builder
}

pub(crate) fn date_time_parameter_correct_errors(
    mut builder: crate::types::builders::DateTimeParameterBuilder,
) -> crate::types::builders::DateTimeParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn date_time_parameter_declaration_correct_errors(
    mut builder: crate::types::builders::DateTimeParameterDeclarationBuilder,
) -> crate::types::builders::DateTimeParameterDeclarationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn decimal_dataset_parameter_correct_errors(
    mut builder: crate::types::builders::DecimalDatasetParameterBuilder,
) -> crate::types::builders::DecimalDatasetParameterBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value_type.is_none() {
        builder.value_type = "no value was set".parse::<crate::types::DatasetParameterValueType>().ok()
    }
    builder
}

pub(crate) fn decimal_parameter_correct_errors(
    mut builder: crate::types::builders::DecimalParameterBuilder,
) -> crate::types::builders::DecimalParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn decimal_parameter_declaration_correct_errors(
    mut builder: crate::types::builders::DecimalParameterDeclarationBuilder,
) -> crate::types::builders::DecimalParameterDeclarationBuilder {
    if builder.parameter_value_type.is_none() {
        builder.parameter_value_type = "no value was set".parse::<crate::types::ParameterValueType>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn geo_spatial_column_group_correct_errors(
    mut builder: crate::types::builders::GeoSpatialColumnGroupBuilder,
) -> crate::types::builders::GeoSpatialColumnGroupBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.columns.is_none() {
        builder.columns = Some(Default::default())
    }
    builder
}

pub(crate) fn integer_dataset_parameter_correct_errors(
    mut builder: crate::types::builders::IntegerDatasetParameterBuilder,
) -> crate::types::builders::IntegerDatasetParameterBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value_type.is_none() {
        builder.value_type = "no value was set".parse::<crate::types::DatasetParameterValueType>().ok()
    }
    builder
}

pub(crate) fn integer_parameter_correct_errors(
    mut builder: crate::types::builders::IntegerParameterBuilder,
) -> crate::types::builders::IntegerParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn integer_parameter_declaration_correct_errors(
    mut builder: crate::types::builders::IntegerParameterDeclarationBuilder,
) -> crate::types::builders::IntegerParameterDeclarationBuilder {
    if builder.parameter_value_type.is_none() {
        builder.parameter_value_type = "no value was set".parse::<crate::types::ParameterValueType>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn lookback_window_correct_errors(
    mut builder: crate::types::builders::LookbackWindowBuilder,
) -> crate::types::builders::LookbackWindowBuilder {
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    if builder.size.is_none() {
        builder.size = Some(Default::default())
    }
    if builder.size_unit.is_none() {
        builder.size_unit = "no value was set".parse::<crate::types::LookbackWindowSizeUnit>().ok()
    }
    builder
}

pub(crate) fn manifest_file_location_correct_errors(
    mut builder: crate::types::builders::ManifestFileLocationBuilder,
) -> crate::types::builders::ManifestFileLocationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_iam_parameters_correct_errors(
    mut builder: crate::types::builders::RedshiftIamParametersBuilder,
) -> crate::types::builders::RedshiftIamParametersBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.database_user.is_none() {
        builder.database_user = Some(Default::default())
    }
    builder
}

pub(crate) fn relational_table_correct_errors(
    mut builder: crate::types::builders::RelationalTableBuilder,
) -> crate::types::builders::RelationalTableBuilder {
    if builder.data_source_arn.is_none() {
        builder.data_source_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.input_columns.is_none() {
        builder.input_columns = Some(Default::default())
    }
    builder
}

pub(crate) fn row_level_permission_tag_rule_correct_errors(
    mut builder: crate::types::builders::RowLevelPermissionTagRuleBuilder,
) -> crate::types::builders::RowLevelPermissionTagRuleBuilder {
    if builder.tag_key.is_none() {
        builder.tag_key = Some(Default::default())
    }
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_source_correct_errors(mut builder: crate::types::builders::S3SourceBuilder) -> crate::types::builders::S3SourceBuilder {
    if builder.data_source_arn.is_none() {
        builder.data_source_arn = Some(Default::default())
    }
    if builder.input_columns.is_none() {
        builder.input_columns = Some(Default::default())
    }
    builder
}

pub(crate) fn string_dataset_parameter_correct_errors(
    mut builder: crate::types::builders::StringDatasetParameterBuilder,
) -> crate::types::builders::StringDatasetParameterBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value_type.is_none() {
        builder.value_type = "no value was set".parse::<crate::types::DatasetParameterValueType>().ok()
    }
    builder
}

pub(crate) fn string_parameter_correct_errors(
    mut builder: crate::types::builders::StringParameterBuilder,
) -> crate::types::builders::StringParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn string_parameter_declaration_correct_errors(
    mut builder: crate::types::builders::StringParameterDeclarationBuilder,
) -> crate::types::builders::StringParameterDeclarationBuilder {
    if builder.parameter_value_type.is_none() {
        builder.parameter_value_type = "no value was set".parse::<crate::types::ParameterValueType>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_bundle_import_job_data_source_credential_pair_correct_errors(
    mut builder: crate::types::builders::AssetBundleImportJobDataSourceCredentialPairBuilder,
) -> crate::types::builders::AssetBundleImportJobDataSourceCredentialPairBuilder {
    if builder.username.is_none() {
        builder.username = Some(Default::default())
    }
    if builder.password.is_none() {
        builder.password = Some(Default::default())
    }
    builder
}

pub(crate) fn default_free_form_layout_configuration_correct_errors(
    mut builder: crate::types::builders::DefaultFreeFormLayoutConfigurationBuilder,
) -> crate::types::builders::DefaultFreeFormLayoutConfigurationBuilder {
    if builder.canvas_size_options.is_none() {
        builder.canvas_size_options = {
            let builder = crate::types::builders::FreeFormLayoutCanvasSizeOptionsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn default_grid_layout_configuration_correct_errors(
    mut builder: crate::types::builders::DefaultGridLayoutConfigurationBuilder,
) -> crate::types::builders::DefaultGridLayoutConfigurationBuilder {
    if builder.canvas_size_options.is_none() {
        builder.canvas_size_options = {
            let builder = crate::types::builders::GridLayoutCanvasSizeOptionsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn default_section_based_layout_configuration_correct_errors(
    mut builder: crate::types::builders::DefaultSectionBasedLayoutConfigurationBuilder,
) -> crate::types::builders::DefaultSectionBasedLayoutConfigurationBuilder {
    if builder.canvas_size_options.is_none() {
        builder.canvas_size_options = {
            let builder = crate::types::builders::SectionBasedLayoutCanvasSizeOptionsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn join_instruction_correct_errors(
    mut builder: crate::types::builders::JoinInstructionBuilder,
) -> crate::types::builders::JoinInstructionBuilder {
    if builder.left_operand.is_none() {
        builder.left_operand = Some(Default::default())
    }
    if builder.right_operand.is_none() {
        builder.right_operand = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::JoinType>().ok()
    }
    if builder.on_clause.is_none() {
        builder.on_clause = Some(Default::default())
    }
    builder
}

pub(crate) fn layout_correct_errors(mut builder: crate::types::builders::LayoutBuilder) -> crate::types::builders::LayoutBuilder {
    if builder.configuration.is_none() {
        builder.configuration = {
            let builder = crate::types::builders::LayoutConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn s3_bucket_configuration_correct_errors(
    mut builder: crate::types::builders::S3BucketConfigurationBuilder,
) -> crate::types::builders::S3BucketConfigurationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.bucket_prefix.is_none() {
        builder.bucket_prefix = Some(Default::default())
    }
    if builder.bucket_region.is_none() {
        builder.bucket_region = Some(Default::default())
    }
    builder
}

pub(crate) fn sheet_control_layout_correct_errors(
    mut builder: crate::types::builders::SheetControlLayoutBuilder,
) -> crate::types::builders::SheetControlLayoutBuilder {
    if builder.configuration.is_none() {
        builder.configuration = {
            let builder = crate::types::builders::SheetControlLayoutConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn sheet_text_box_correct_errors(mut builder: crate::types::builders::SheetTextBoxBuilder) -> crate::types::builders::SheetTextBoxBuilder {
    if builder.sheet_text_box_id.is_none() {
        builder.sheet_text_box_id = Some(Default::default())
    }
    builder
}

pub(crate) fn snapshot_file_correct_errors(mut builder: crate::types::builders::SnapshotFileBuilder) -> crate::types::builders::SnapshotFileBuilder {
    if builder.sheet_selections.is_none() {
        builder.sheet_selections = Some(Default::default())
    }
    if builder.format_type.is_none() {
        builder.format_type = "no value was set".parse::<crate::types::SnapshotFileFormatType>().ok()
    }
    builder
}

pub(crate) fn topic_calculated_field_correct_errors(
    mut builder: crate::types::builders::TopicCalculatedFieldBuilder,
) -> crate::types::builders::TopicCalculatedFieldBuilder {
    if builder.calculated_field_name.is_none() {
        builder.calculated_field_name = Some(Default::default())
    }
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn topic_column_correct_errors(mut builder: crate::types::builders::TopicColumnBuilder) -> crate::types::builders::TopicColumnBuilder {
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    builder
}

pub(crate) fn topic_filter_correct_errors(mut builder: crate::types::builders::TopicFilterBuilder) -> crate::types::builders::TopicFilterBuilder {
    if builder.filter_name.is_none() {
        builder.filter_name = Some(Default::default())
    }
    if builder.operand_field_name.is_none() {
        builder.operand_field_name = Some(Default::default())
    }
    builder
}

pub(crate) fn topic_named_entity_correct_errors(
    mut builder: crate::types::builders::TopicNamedEntityBuilder,
) -> crate::types::builders::TopicNamedEntityBuilder {
    if builder.entity_name.is_none() {
        builder.entity_name = Some(Default::default())
    }
    builder
}

pub(crate) fn bar_chart_visual_correct_errors(
    mut builder: crate::types::builders::BarChartVisualBuilder,
) -> crate::types::builders::BarChartVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn box_plot_visual_correct_errors(
    mut builder: crate::types::builders::BoxPlotVisualBuilder,
) -> crate::types::builders::BoxPlotVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cast_column_type_operation_correct_errors(
    mut builder: crate::types::builders::CastColumnTypeOperationBuilder,
) -> crate::types::builders::CastColumnTypeOperationBuilder {
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    if builder.new_column_type.is_none() {
        builder.new_column_type = "no value was set".parse::<crate::types::ColumnDataType>().ok()
    }
    builder
}

pub(crate) fn category_filter_correct_errors(
    mut builder: crate::types::builders::CategoryFilterBuilder,
) -> crate::types::builders::CategoryFilterBuilder {
    if builder.filter_id.is_none() {
        builder.filter_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.configuration.is_none() {
        builder.configuration = {
            let builder = crate::types::builders::CategoryFilterConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn combo_chart_visual_correct_errors(
    mut builder: crate::types::builders::ComboChartVisualBuilder,
) -> crate::types::builders::ComboChartVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_columns_operation_correct_errors(
    mut builder: crate::types::builders::CreateColumnsOperationBuilder,
) -> crate::types::builders::CreateColumnsOperationBuilder {
    if builder.columns.is_none() {
        builder.columns = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_color_correct_errors(mut builder: crate::types::builders::CustomColorBuilder) -> crate::types::builders::CustomColorBuilder {
    if builder.color.is_none() {
        builder.color = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_content_visual_correct_errors(
    mut builder: crate::types::builders::CustomContentVisualBuilder,
) -> crate::types::builders::CustomContentVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    if builder.data_set_identifier.is_none() {
        builder.data_set_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn dynamic_default_value_correct_errors(
    mut builder: crate::types::builders::DynamicDefaultValueBuilder,
) -> crate::types::builders::DynamicDefaultValueBuilder {
    if builder.default_value_column.is_none() {
        builder.default_value_column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn empty_visual_correct_errors(mut builder: crate::types::builders::EmptyVisualBuilder) -> crate::types::builders::EmptyVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    if builder.data_set_identifier.is_none() {
        builder.data_set_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn filled_map_visual_correct_errors(
    mut builder: crate::types::builders::FilledMapVisualBuilder,
) -> crate::types::builders::FilledMapVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_date_time_picker_control_correct_errors(
    mut builder: crate::types::builders::FilterDateTimePickerControlBuilder,
) -> crate::types::builders::FilterDateTimePickerControlBuilder {
    if builder.filter_control_id.is_none() {
        builder.filter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_filter_id.is_none() {
        builder.source_filter_id = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_drop_down_control_correct_errors(
    mut builder: crate::types::builders::FilterDropDownControlBuilder,
) -> crate::types::builders::FilterDropDownControlBuilder {
    if builder.filter_control_id.is_none() {
        builder.filter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_filter_id.is_none() {
        builder.source_filter_id = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_list_control_correct_errors(
    mut builder: crate::types::builders::FilterListControlBuilder,
) -> crate::types::builders::FilterListControlBuilder {
    if builder.filter_control_id.is_none() {
        builder.filter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_filter_id.is_none() {
        builder.source_filter_id = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_operation_correct_errors(
    mut builder: crate::types::builders::FilterOperationBuilder,
) -> crate::types::builders::FilterOperationBuilder {
    if builder.condition_expression.is_none() {
        builder.condition_expression = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_relative_date_time_control_correct_errors(
    mut builder: crate::types::builders::FilterRelativeDateTimeControlBuilder,
) -> crate::types::builders::FilterRelativeDateTimeControlBuilder {
    if builder.filter_control_id.is_none() {
        builder.filter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_filter_id.is_none() {
        builder.source_filter_id = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_slider_control_correct_errors(
    mut builder: crate::types::builders::FilterSliderControlBuilder,
) -> crate::types::builders::FilterSliderControlBuilder {
    if builder.filter_control_id.is_none() {
        builder.filter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_filter_id.is_none() {
        builder.source_filter_id = Some(Default::default())
    }
    if builder.maximum_value.is_none() {
        builder.maximum_value = Some(Default::default())
    }
    if builder.minimum_value.is_none() {
        builder.minimum_value = Some(Default::default())
    }
    if builder.step_size.is_none() {
        builder.step_size = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_text_area_control_correct_errors(
    mut builder: crate::types::builders::FilterTextAreaControlBuilder,
) -> crate::types::builders::FilterTextAreaControlBuilder {
    if builder.filter_control_id.is_none() {
        builder.filter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_filter_id.is_none() {
        builder.source_filter_id = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_text_field_control_correct_errors(
    mut builder: crate::types::builders::FilterTextFieldControlBuilder,
) -> crate::types::builders::FilterTextFieldControlBuilder {
    if builder.filter_control_id.is_none() {
        builder.filter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_filter_id.is_none() {
        builder.source_filter_id = Some(Default::default())
    }
    builder
}

pub(crate) fn funnel_chart_visual_correct_errors(
    mut builder: crate::types::builders::FunnelChartVisualBuilder,
) -> crate::types::builders::FunnelChartVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn gauge_chart_visual_correct_errors(
    mut builder: crate::types::builders::GaugeChartVisualBuilder,
) -> crate::types::builders::GaugeChartVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn geospatial_map_visual_correct_errors(
    mut builder: crate::types::builders::GeospatialMapVisualBuilder,
) -> crate::types::builders::GeospatialMapVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn heat_map_visual_correct_errors(
    mut builder: crate::types::builders::HeatMapVisualBuilder,
) -> crate::types::builders::HeatMapVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn histogram_visual_correct_errors(
    mut builder: crate::types::builders::HistogramVisualBuilder,
) -> crate::types::builders::HistogramVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn input_column_correct_errors(mut builder: crate::types::builders::InputColumnBuilder) -> crate::types::builders::InputColumnBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::InputColumnDataType>().ok()
    }
    builder
}

pub(crate) fn insight_visual_correct_errors(
    mut builder: crate::types::builders::InsightVisualBuilder,
) -> crate::types::builders::InsightVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    if builder.data_set_identifier.is_none() {
        builder.data_set_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn kpi_visual_correct_errors(mut builder: crate::types::builders::KpiVisualBuilder) -> crate::types::builders::KpiVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn line_chart_visual_correct_errors(
    mut builder: crate::types::builders::LineChartVisualBuilder,
) -> crate::types::builders::LineChartVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn mapped_data_set_parameter_correct_errors(
    mut builder: crate::types::builders::MappedDataSetParameterBuilder,
) -> crate::types::builders::MappedDataSetParameterBuilder {
    if builder.data_set_identifier.is_none() {
        builder.data_set_identifier = Some(Default::default())
    }
    if builder.data_set_parameter_name.is_none() {
        builder.data_set_parameter_name = Some(Default::default())
    }
    builder
}

pub(crate) fn null_value_format_configuration_correct_errors(
    mut builder: crate::types::builders::NullValueFormatConfigurationBuilder,
) -> crate::types::builders::NullValueFormatConfigurationBuilder {
    if builder.null_string.is_none() {
        builder.null_string = Some(Default::default())
    }
    builder
}

pub(crate) fn numeric_equality_filter_correct_errors(
    mut builder: crate::types::builders::NumericEqualityFilterBuilder,
) -> crate::types::builders::NumericEqualityFilterBuilder {
    if builder.filter_id.is_none() {
        builder.filter_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.match_operator.is_none() {
        builder.match_operator = "no value was set".parse::<crate::types::NumericEqualityMatchOperator>().ok()
    }
    if builder.null_option.is_none() {
        builder.null_option = "no value was set".parse::<crate::types::FilterNullOption>().ok()
    }
    builder
}

pub(crate) fn numeric_range_filter_correct_errors(
    mut builder: crate::types::builders::NumericRangeFilterBuilder,
) -> crate::types::builders::NumericRangeFilterBuilder {
    if builder.filter_id.is_none() {
        builder.filter_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.null_option.is_none() {
        builder.null_option = "no value was set".parse::<crate::types::FilterNullOption>().ok()
    }
    builder
}

pub(crate) fn override_dataset_parameter_operation_correct_errors(
    mut builder: crate::types::builders::OverrideDatasetParameterOperationBuilder,
) -> crate::types::builders::OverrideDatasetParameterOperationBuilder {
    if builder.parameter_name.is_none() {
        builder.parameter_name = Some(Default::default())
    }
    builder
}

pub(crate) fn parameter_date_time_picker_control_correct_errors(
    mut builder: crate::types::builders::ParameterDateTimePickerControlBuilder,
) -> crate::types::builders::ParameterDateTimePickerControlBuilder {
    if builder.parameter_control_id.is_none() {
        builder.parameter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_parameter_name.is_none() {
        builder.source_parameter_name = Some(Default::default())
    }
    builder
}

pub(crate) fn parameter_drop_down_control_correct_errors(
    mut builder: crate::types::builders::ParameterDropDownControlBuilder,
) -> crate::types::builders::ParameterDropDownControlBuilder {
    if builder.parameter_control_id.is_none() {
        builder.parameter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_parameter_name.is_none() {
        builder.source_parameter_name = Some(Default::default())
    }
    builder
}

pub(crate) fn parameter_list_control_correct_errors(
    mut builder: crate::types::builders::ParameterListControlBuilder,
) -> crate::types::builders::ParameterListControlBuilder {
    if builder.parameter_control_id.is_none() {
        builder.parameter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_parameter_name.is_none() {
        builder.source_parameter_name = Some(Default::default())
    }
    builder
}

pub(crate) fn parameter_slider_control_correct_errors(
    mut builder: crate::types::builders::ParameterSliderControlBuilder,
) -> crate::types::builders::ParameterSliderControlBuilder {
    if builder.parameter_control_id.is_none() {
        builder.parameter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_parameter_name.is_none() {
        builder.source_parameter_name = Some(Default::default())
    }
    if builder.maximum_value.is_none() {
        builder.maximum_value = Some(Default::default())
    }
    if builder.minimum_value.is_none() {
        builder.minimum_value = Some(Default::default())
    }
    if builder.step_size.is_none() {
        builder.step_size = Some(Default::default())
    }
    builder
}

pub(crate) fn parameter_text_area_control_correct_errors(
    mut builder: crate::types::builders::ParameterTextAreaControlBuilder,
) -> crate::types::builders::ParameterTextAreaControlBuilder {
    if builder.parameter_control_id.is_none() {
        builder.parameter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_parameter_name.is_none() {
        builder.source_parameter_name = Some(Default::default())
    }
    builder
}

pub(crate) fn parameter_text_field_control_correct_errors(
    mut builder: crate::types::builders::ParameterTextFieldControlBuilder,
) -> crate::types::builders::ParameterTextFieldControlBuilder {
    if builder.parameter_control_id.is_none() {
        builder.parameter_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.source_parameter_name.is_none() {
        builder.source_parameter_name = Some(Default::default())
    }
    builder
}

pub(crate) fn pie_chart_visual_correct_errors(
    mut builder: crate::types::builders::PieChartVisualBuilder,
) -> crate::types::builders::PieChartVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn pivot_table_visual_correct_errors(
    mut builder: crate::types::builders::PivotTableVisualBuilder,
) -> crate::types::builders::PivotTableVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn project_operation_correct_errors(
    mut builder: crate::types::builders::ProjectOperationBuilder,
) -> crate::types::builders::ProjectOperationBuilder {
    if builder.projected_columns.is_none() {
        builder.projected_columns = Some(Default::default())
    }
    builder
}

pub(crate) fn radar_chart_visual_correct_errors(
    mut builder: crate::types::builders::RadarChartVisualBuilder,
) -> crate::types::builders::RadarChartVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn relative_dates_filter_correct_errors(
    mut builder: crate::types::builders::RelativeDatesFilterBuilder,
) -> crate::types::builders::RelativeDatesFilterBuilder {
    if builder.filter_id.is_none() {
        builder.filter_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.anchor_date_configuration.is_none() {
        builder.anchor_date_configuration = {
            let builder = crate::types::builders::AnchorDateConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    if builder.time_granularity.is_none() {
        builder.time_granularity = "no value was set".parse::<crate::types::TimeGranularity>().ok()
    }
    if builder.relative_date_type.is_none() {
        builder.relative_date_type = "no value was set".parse::<crate::types::RelativeDateType>().ok()
    }
    if builder.null_option.is_none() {
        builder.null_option = "no value was set".parse::<crate::types::FilterNullOption>().ok()
    }
    builder
}

pub(crate) fn rename_column_operation_correct_errors(
    mut builder: crate::types::builders::RenameColumnOperationBuilder,
) -> crate::types::builders::RenameColumnOperationBuilder {
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    if builder.new_column_name.is_none() {
        builder.new_column_name = Some(Default::default())
    }
    builder
}

pub(crate) fn rolling_date_configuration_correct_errors(
    mut builder: crate::types::builders::RollingDateConfigurationBuilder,
) -> crate::types::builders::RollingDateConfigurationBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn sankey_diagram_visual_correct_errors(
    mut builder: crate::types::builders::SankeyDiagramVisualBuilder,
) -> crate::types::builders::SankeyDiagramVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn scatter_plot_visual_correct_errors(
    mut builder: crate::types::builders::ScatterPlotVisualBuilder,
) -> crate::types::builders::ScatterPlotVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn table_visual_correct_errors(mut builder: crate::types::builders::TableVisualBuilder) -> crate::types::builders::TableVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_column_operation_correct_errors(
    mut builder: crate::types::builders::TagColumnOperationBuilder,
) -> crate::types::builders::TagColumnOperationBuilder {
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn time_equality_filter_correct_errors(
    mut builder: crate::types::builders::TimeEqualityFilterBuilder,
) -> crate::types::builders::TimeEqualityFilterBuilder {
    if builder.filter_id.is_none() {
        builder.filter_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn time_range_filter_correct_errors(
    mut builder: crate::types::builders::TimeRangeFilterBuilder,
) -> crate::types::builders::TimeRangeFilterBuilder {
    if builder.filter_id.is_none() {
        builder.filter_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.null_option.is_none() {
        builder.null_option = "no value was set".parse::<crate::types::FilterNullOption>().ok()
    }
    builder
}

pub(crate) fn top_bottom_filter_correct_errors(
    mut builder: crate::types::builders::TopBottomFilterBuilder,
) -> crate::types::builders::TopBottomFilterBuilder {
    if builder.filter_id.is_none() {
        builder.filter_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.aggregation_sort_configurations.is_none() {
        builder.aggregation_sort_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn tree_map_visual_correct_errors(
    mut builder: crate::types::builders::TreeMapVisualBuilder,
) -> crate::types::builders::TreeMapVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn untag_column_operation_correct_errors(
    mut builder: crate::types::builders::UntagColumnOperationBuilder,
) -> crate::types::builders::UntagColumnOperationBuilder {
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    if builder.tag_names.is_none() {
        builder.tag_names = Some(Default::default())
    }
    builder
}

pub(crate) fn waterfall_visual_correct_errors(
    mut builder: crate::types::builders::WaterfallVisualBuilder,
) -> crate::types::builders::WaterfallVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn word_cloud_visual_correct_errors(
    mut builder: crate::types::builders::WordCloudVisualBuilder,
) -> crate::types::builders::WordCloudVisualBuilder {
    if builder.visual_id.is_none() {
        builder.visual_id = Some(Default::default())
    }
    builder
}

pub(crate) fn exclude_period_configuration_correct_errors(
    mut builder: crate::types::builders::ExcludePeriodConfigurationBuilder,
) -> crate::types::builders::ExcludePeriodConfigurationBuilder {
    if builder.amount.is_none() {
        builder.amount = Some(Default::default())
    }
    if builder.granularity.is_none() {
        builder.granularity = "no value was set".parse::<crate::types::TimeGranularity>().ok()
    }
    builder
}

pub(crate) fn filled_map_conditional_formatting_correct_errors(
    mut builder: crate::types::builders::FilledMapConditionalFormattingBuilder,
) -> crate::types::builders::FilledMapConditionalFormattingBuilder {
    if builder.conditional_formatting_options.is_none() {
        builder.conditional_formatting_options = Some(Default::default())
    }
    builder
}

pub(crate) fn free_form_layout_configuration_correct_errors(
    mut builder: crate::types::builders::FreeFormLayoutConfigurationBuilder,
) -> crate::types::builders::FreeFormLayoutConfigurationBuilder {
    if builder.elements.is_none() {
        builder.elements = Some(Default::default())
    }
    builder
}

pub(crate) fn free_form_layout_screen_canvas_size_options_correct_errors(
    mut builder: crate::types::builders::FreeFormLayoutScreenCanvasSizeOptionsBuilder,
) -> crate::types::builders::FreeFormLayoutScreenCanvasSizeOptionsBuilder {
    if builder.optimized_view_port_width.is_none() {
        builder.optimized_view_port_width = Some(Default::default())
    }
    builder
}

pub(crate) fn grid_layout_configuration_correct_errors(
    mut builder: crate::types::builders::GridLayoutConfigurationBuilder,
) -> crate::types::builders::GridLayoutConfigurationBuilder {
    if builder.elements.is_none() {
        builder.elements = Some(Default::default())
    }
    builder
}

pub(crate) fn grid_layout_screen_canvas_size_options_correct_errors(
    mut builder: crate::types::builders::GridLayoutScreenCanvasSizeOptionsBuilder,
) -> crate::types::builders::GridLayoutScreenCanvasSizeOptionsBuilder {
    if builder.resize_option.is_none() {
        builder.resize_option = "no value was set".parse::<crate::types::ResizeOption>().ok()
    }
    builder
}

pub(crate) fn section_based_layout_configuration_correct_errors(
    mut builder: crate::types::builders::SectionBasedLayoutConfigurationBuilder,
) -> crate::types::builders::SectionBasedLayoutConfigurationBuilder {
    if builder.header_sections.is_none() {
        builder.header_sections = Some(Default::default())
    }
    if builder.body_sections.is_none() {
        builder.body_sections = Some(Default::default())
    }
    if builder.footer_sections.is_none() {
        builder.footer_sections = Some(Default::default())
    }
    if builder.canvas_size_options.is_none() {
        builder.canvas_size_options = {
            let builder = crate::types::builders::SectionBasedLayoutCanvasSizeOptionsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn sheet_visual_scoping_configuration_correct_errors(
    mut builder: crate::types::builders::SheetVisualScopingConfigurationBuilder,
) -> crate::types::builders::SheetVisualScopingConfigurationBuilder {
    if builder.sheet_id.is_none() {
        builder.sheet_id = Some(Default::default())
    }
    if builder.scope.is_none() {
        builder.scope = "no value was set".parse::<crate::types::FilterVisualScope>().ok()
    }
    builder
}

pub(crate) fn snapshot_file_sheet_selection_correct_errors(
    mut builder: crate::types::builders::SnapshotFileSheetSelectionBuilder,
) -> crate::types::builders::SnapshotFileSheetSelectionBuilder {
    if builder.sheet_id.is_none() {
        builder.sheet_id = Some(Default::default())
    }
    if builder.selection_scope.is_none() {
        builder.selection_scope = "no value was set".parse::<crate::types::SnapshotFileSheetSelectionScope>().ok()
    }
    builder
}

pub(crate) fn aggregation_sort_configuration_correct_errors(
    mut builder: crate::types::builders::AggregationSortConfigurationBuilder,
) -> crate::types::builders::AggregationSortConfigurationBuilder {
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.sort_direction.is_none() {
        builder.sort_direction = "no value was set".parse::<crate::types::SortDirection>().ok()
    }
    builder
}

pub(crate) fn calculated_column_correct_errors(
    mut builder: crate::types::builders::CalculatedColumnBuilder,
) -> crate::types::builders::CalculatedColumnBuilder {
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    if builder.column_id.is_none() {
        builder.column_id = Some(Default::default())
    }
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn color_scale_correct_errors(mut builder: crate::types::builders::ColorScaleBuilder) -> crate::types::builders::ColorScaleBuilder {
    if builder.colors.is_none() {
        builder.colors = Some(Default::default())
    }
    if builder.color_fill_type.is_none() {
        builder.color_fill_type = "no value was set".parse::<crate::types::ColorFillType>().ok()
    }
    builder
}

pub(crate) fn custom_filter_configuration_correct_errors(
    mut builder: crate::types::builders::CustomFilterConfigurationBuilder,
) -> crate::types::builders::CustomFilterConfigurationBuilder {
    if builder.match_operator.is_none() {
        builder.match_operator = "no value was set".parse::<crate::types::CategoryFilterMatchOperator>().ok()
    }
    if builder.null_option.is_none() {
        builder.null_option = "no value was set".parse::<crate::types::FilterNullOption>().ok()
    }
    builder
}

pub(crate) fn custom_filter_list_configuration_correct_errors(
    mut builder: crate::types::builders::CustomFilterListConfigurationBuilder,
) -> crate::types::builders::CustomFilterListConfigurationBuilder {
    if builder.match_operator.is_none() {
        builder.match_operator = "no value was set".parse::<crate::types::CategoryFilterMatchOperator>().ok()
    }
    if builder.null_option.is_none() {
        builder.null_option = "no value was set".parse::<crate::types::FilterNullOption>().ok()
    }
    builder
}

pub(crate) fn custom_narrative_options_correct_errors(
    mut builder: crate::types::builders::CustomNarrativeOptionsBuilder,
) -> crate::types::builders::CustomNarrativeOptionsBuilder {
    if builder.narrative.is_none() {
        builder.narrative = Some(Default::default())
    }
    builder
}

pub(crate) fn decimal_places_configuration_correct_errors(
    mut builder: crate::types::builders::DecimalPlacesConfigurationBuilder,
) -> crate::types::builders::DecimalPlacesConfigurationBuilder {
    if builder.decimal_places.is_none() {
        builder.decimal_places = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_list_configuration_correct_errors(
    mut builder: crate::types::builders::FilterListConfigurationBuilder,
) -> crate::types::builders::FilterListConfigurationBuilder {
    if builder.match_operator.is_none() {
        builder.match_operator = "no value was set".parse::<crate::types::CategoryFilterMatchOperator>().ok()
    }
    builder
}

pub(crate) fn negative_value_configuration_correct_errors(
    mut builder: crate::types::builders::NegativeValueConfigurationBuilder,
) -> crate::types::builders::NegativeValueConfigurationBuilder {
    if builder.display_mode.is_none() {
        builder.display_mode = "no value was set".parse::<crate::types::NegativeValueDisplayMode>().ok()
    }
    builder
}

pub(crate) fn visual_custom_action_correct_errors(
    mut builder: crate::types::builders::VisualCustomActionBuilder,
) -> crate::types::builders::VisualCustomActionBuilder {
    if builder.custom_action_id.is_none() {
        builder.custom_action_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.trigger.is_none() {
        builder.trigger = "no value was set".parse::<crate::types::VisualCustomActionTrigger>().ok()
    }
    if builder.action_operations.is_none() {
        builder.action_operations = Some(Default::default())
    }
    builder
}

pub(crate) fn body_section_configuration_correct_errors(
    mut builder: crate::types::builders::BodySectionConfigurationBuilder,
) -> crate::types::builders::BodySectionConfigurationBuilder {
    if builder.section_id.is_none() {
        builder.section_id = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = {
            let builder = crate::types::builders::BodySectionContentBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn contribution_analysis_default_correct_errors(
    mut builder: crate::types::builders::ContributionAnalysisDefaultBuilder,
) -> crate::types::builders::ContributionAnalysisDefaultBuilder {
    if builder.measure_field_id.is_none() {
        builder.measure_field_id = Some(Default::default())
    }
    if builder.contributor_dimensions.is_none() {
        builder.contributor_dimensions = Some(Default::default())
    }
    builder
}

pub(crate) fn date_time_hierarchy_correct_errors(
    mut builder: crate::types::builders::DateTimeHierarchyBuilder,
) -> crate::types::builders::DateTimeHierarchyBuilder {
    if builder.hierarchy_id.is_none() {
        builder.hierarchy_id = Some(Default::default())
    }
    builder
}

pub(crate) fn explicit_hierarchy_correct_errors(
    mut builder: crate::types::builders::ExplicitHierarchyBuilder,
) -> crate::types::builders::ExplicitHierarchyBuilder {
    if builder.hierarchy_id.is_none() {
        builder.hierarchy_id = Some(Default::default())
    }
    if builder.columns.is_none() {
        builder.columns = Some(Default::default())
    }
    builder
}

pub(crate) fn filled_map_conditional_formatting_option_correct_errors(
    mut builder: crate::types::builders::FilledMapConditionalFormattingOptionBuilder,
) -> crate::types::builders::FilledMapConditionalFormattingOptionBuilder {
    if builder.shape.is_none() {
        builder.shape = {
            let builder = crate::types::builders::FilledMapShapeConditionalFormattingBuilder::default();
            crate::serde_util::filled_map_shape_conditional_formatting_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn free_form_layout_element_correct_errors(
    mut builder: crate::types::builders::FreeFormLayoutElementBuilder,
) -> crate::types::builders::FreeFormLayoutElementBuilder {
    if builder.element_id.is_none() {
        builder.element_id = Some(Default::default())
    }
    if builder.element_type.is_none() {
        builder.element_type = "no value was set".parse::<crate::types::LayoutElementType>().ok()
    }
    if builder.x_axis_location.is_none() {
        builder.x_axis_location = Some(Default::default())
    }
    if builder.y_axis_location.is_none() {
        builder.y_axis_location = Some(Default::default())
    }
    if builder.width.is_none() {
        builder.width = Some(Default::default())
    }
    if builder.height.is_none() {
        builder.height = Some(Default::default())
    }
    builder
}

pub(crate) fn geospatial_coordinate_bounds_correct_errors(
    mut builder: crate::types::builders::GeospatialCoordinateBoundsBuilder,
) -> crate::types::builders::GeospatialCoordinateBoundsBuilder {
    if builder.north.is_none() {
        builder.north = Some(Default::default())
    }
    if builder.south.is_none() {
        builder.south = Some(Default::default())
    }
    if builder.west.is_none() {
        builder.west = Some(Default::default())
    }
    if builder.east.is_none() {
        builder.east = Some(Default::default())
    }
    builder
}

pub(crate) fn grid_layout_element_correct_errors(
    mut builder: crate::types::builders::GridLayoutElementBuilder,
) -> crate::types::builders::GridLayoutElementBuilder {
    if builder.element_id.is_none() {
        builder.element_id = Some(Default::default())
    }
    if builder.element_type.is_none() {
        builder.element_type = "no value was set".parse::<crate::types::LayoutElementType>().ok()
    }
    if builder.column_span.is_none() {
        builder.column_span = Some(Default::default())
    }
    if builder.row_span.is_none() {
        builder.row_span = Some(Default::default())
    }
    builder
}

pub(crate) fn header_footer_section_configuration_correct_errors(
    mut builder: crate::types::builders::HeaderFooterSectionConfigurationBuilder,
) -> crate::types::builders::HeaderFooterSectionConfigurationBuilder {
    if builder.section_id.is_none() {
        builder.section_id = Some(Default::default())
    }
    if builder.layout.is_none() {
        builder.layout = {
            let builder = crate::types::builders::SectionLayoutConfigurationBuilder::default();
            Some(crate::serde_util::section_layout_configuration_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn kpi_sparkline_options_correct_errors(
    mut builder: crate::types::builders::KpiSparklineOptionsBuilder,
) -> crate::types::builders::KpiSparklineOptionsBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::KpiSparklineType>().ok()
    }
    builder
}

pub(crate) fn pagination_configuration_correct_errors(
    mut builder: crate::types::builders::PaginationConfigurationBuilder,
) -> crate::types::builders::PaginationConfigurationBuilder {
    if builder.page_size.is_none() {
        builder.page_size = Some(Default::default())
    }
    if builder.page_number.is_none() {
        builder.page_number = Some(Default::default())
    }
    builder
}

pub(crate) fn predefined_hierarchy_correct_errors(
    mut builder: crate::types::builders::PredefinedHierarchyBuilder,
) -> crate::types::builders::PredefinedHierarchyBuilder {
    if builder.hierarchy_id.is_none() {
        builder.hierarchy_id = Some(Default::default())
    }
    if builder.columns.is_none() {
        builder.columns = Some(Default::default())
    }
    builder
}

pub(crate) fn reference_line_correct_errors(
    mut builder: crate::types::builders::ReferenceLineBuilder,
) -> crate::types::builders::ReferenceLineBuilder {
    if builder.data_configuration.is_none() {
        builder.data_configuration = {
            let builder = crate::types::builders::ReferenceLineDataConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn data_bars_options_correct_errors(
    mut builder: crate::types::builders::DataBarsOptionsBuilder,
) -> crate::types::builders::DataBarsOptionsBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    builder
}

pub(crate) fn data_field_series_item_correct_errors(
    mut builder: crate::types::builders::DataFieldSeriesItemBuilder,
) -> crate::types::builders::DataFieldSeriesItemBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.axis_binding.is_none() {
        builder.axis_binding = "no value was set".parse::<crate::types::AxisBinding>().ok()
    }
    builder
}

pub(crate) fn data_path_color_correct_errors(
    mut builder: crate::types::builders::DataPathColorBuilder,
) -> crate::types::builders::DataPathColorBuilder {
    if builder.element.is_none() {
        builder.element = {
            let builder = crate::types::builders::DataPathValueBuilder::default();
            Some(builder.build())
        }
    }
    if builder.color.is_none() {
        builder.color = Some(Default::default())
    }
    builder
}

pub(crate) fn field_series_item_correct_errors(
    mut builder: crate::types::builders::FieldSeriesItemBuilder,
) -> crate::types::builders::FieldSeriesItemBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.axis_binding.is_none() {
        builder.axis_binding = "no value was set".parse::<crate::types::AxisBinding>().ok()
    }
    builder
}

pub(crate) fn filled_map_shape_conditional_formatting_correct_errors(
    mut builder: crate::types::builders::FilledMapShapeConditionalFormattingBuilder,
) -> crate::types::builders::FilledMapShapeConditionalFormattingBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    builder
}

pub(crate) fn forecast_computation_correct_errors(
    mut builder: crate::types::builders::ForecastComputationBuilder,
) -> crate::types::builders::ForecastComputationBuilder {
    if builder.computation_id.is_none() {
        builder.computation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn growth_rate_computation_correct_errors(
    mut builder: crate::types::builders::GrowthRateComputationBuilder,
) -> crate::types::builders::GrowthRateComputationBuilder {
    if builder.computation_id.is_none() {
        builder.computation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn kpi_visual_standard_layout_correct_errors(
    mut builder: crate::types::builders::KpiVisualStandardLayoutBuilder,
) -> crate::types::builders::KpiVisualStandardLayoutBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::KpiVisualStandardLayoutType>().ok()
    }
    builder
}

pub(crate) fn maximum_minimum_computation_correct_errors(
    mut builder: crate::types::builders::MaximumMinimumComputationBuilder,
) -> crate::types::builders::MaximumMinimumComputationBuilder {
    if builder.computation_id.is_none() {
        builder.computation_id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::MaximumMinimumComputationType>().ok()
    }
    builder
}

pub(crate) fn metric_comparison_computation_correct_errors(
    mut builder: crate::types::builders::MetricComparisonComputationBuilder,
) -> crate::types::builders::MetricComparisonComputationBuilder {
    if builder.computation_id.is_none() {
        builder.computation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn period_over_period_computation_correct_errors(
    mut builder: crate::types::builders::PeriodOverPeriodComputationBuilder,
) -> crate::types::builders::PeriodOverPeriodComputationBuilder {
    if builder.computation_id.is_none() {
        builder.computation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn period_to_date_computation_correct_errors(
    mut builder: crate::types::builders::PeriodToDateComputationBuilder,
) -> crate::types::builders::PeriodToDateComputationBuilder {
    if builder.computation_id.is_none() {
        builder.computation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn pivot_field_sort_options_correct_errors(
    mut builder: crate::types::builders::PivotFieldSortOptionsBuilder,
) -> crate::types::builders::PivotFieldSortOptionsBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.sort_by.is_none() {
        builder.sort_by = {
            let builder = crate::types::builders::PivotTableSortByBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn pivot_table_cell_conditional_formatting_correct_errors(
    mut builder: crate::types::builders::PivotTableCellConditionalFormattingBuilder,
) -> crate::types::builders::PivotTableCellConditionalFormattingBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    builder
}

pub(crate) fn pivot_table_data_path_option_correct_errors(
    mut builder: crate::types::builders::PivotTableDataPathOptionBuilder,
) -> crate::types::builders::PivotTableDataPathOptionBuilder {
    if builder.data_path_list.is_none() {
        builder.data_path_list = Some(Default::default())
    }
    builder
}

pub(crate) fn pivot_table_field_collapse_state_option_correct_errors(
    mut builder: crate::types::builders::PivotTableFieldCollapseStateOptionBuilder,
) -> crate::types::builders::PivotTableFieldCollapseStateOptionBuilder {
    if builder.target.is_none() {
        builder.target = {
            let builder = crate::types::builders::PivotTableFieldCollapseStateTargetBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn pivot_table_field_option_correct_errors(
    mut builder: crate::types::builders::PivotTableFieldOptionBuilder,
) -> crate::types::builders::PivotTableFieldOptionBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    builder
}

pub(crate) fn section_layout_configuration_correct_errors(
    mut builder: crate::types::builders::SectionLayoutConfigurationBuilder,
) -> crate::types::builders::SectionLayoutConfigurationBuilder {
    if builder.free_form_layout.is_none() {
        builder.free_form_layout = {
            let builder = crate::types::builders::FreeFormSectionLayoutConfigurationBuilder::default();
            crate::serde_util::free_form_section_layout_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn table_cell_conditional_formatting_correct_errors(
    mut builder: crate::types::builders::TableCellConditionalFormattingBuilder,
) -> crate::types::builders::TableCellConditionalFormattingBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    builder
}

pub(crate) fn table_field_option_correct_errors(
    mut builder: crate::types::builders::TableFieldOptionBuilder,
) -> crate::types::builders::TableFieldOptionBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    builder
}

pub(crate) fn top_bottom_movers_computation_correct_errors(
    mut builder: crate::types::builders::TopBottomMoversComputationBuilder,
) -> crate::types::builders::TopBottomMoversComputationBuilder {
    if builder.computation_id.is_none() {
        builder.computation_id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::TopBottomComputationType>().ok()
    }
    builder
}

pub(crate) fn top_bottom_ranked_computation_correct_errors(
    mut builder: crate::types::builders::TopBottomRankedComputationBuilder,
) -> crate::types::builders::TopBottomRankedComputationBuilder {
    if builder.computation_id.is_none() {
        builder.computation_id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::TopBottomComputationType>().ok()
    }
    builder
}

pub(crate) fn total_aggregation_computation_correct_errors(
    mut builder: crate::types::builders::TotalAggregationComputationBuilder,
) -> crate::types::builders::TotalAggregationComputationBuilder {
    if builder.computation_id.is_none() {
        builder.computation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn total_aggregation_option_correct_errors(
    mut builder: crate::types::builders::TotalAggregationOptionBuilder,
) -> crate::types::builders::TotalAggregationOptionBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.total_aggregation_function.is_none() {
        builder.total_aggregation_function = {
            let builder = crate::types::builders::TotalAggregationFunctionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn unique_values_computation_correct_errors(
    mut builder: crate::types::builders::UniqueValuesComputationBuilder,
) -> crate::types::builders::UniqueValuesComputationBuilder {
    if builder.computation_id.is_none() {
        builder.computation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn axis_label_reference_options_correct_errors(
    mut builder: crate::types::builders::AxisLabelReferenceOptionsBuilder,
) -> crate::types::builders::AxisLabelReferenceOptionsBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn calculated_measure_field_correct_errors(
    mut builder: crate::types::builders::CalculatedMeasureFieldBuilder,
) -> crate::types::builders::CalculatedMeasureFieldBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn categorical_dimension_field_correct_errors(
    mut builder: crate::types::builders::CategoricalDimensionFieldBuilder,
) -> crate::types::builders::CategoricalDimensionFieldBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn categorical_measure_field_correct_errors(
    mut builder: crate::types::builders::CategoricalMeasureFieldBuilder,
) -> crate::types::builders::CategoricalMeasureFieldBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn column_sort_correct_errors(mut builder: crate::types::builders::ColumnSortBuilder) -> crate::types::builders::ColumnSortBuilder {
    if builder.sort_by.is_none() {
        builder.sort_by = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.direction.is_none() {
        builder.direction = "no value was set".parse::<crate::types::SortDirection>().ok()
    }
    builder
}

pub(crate) fn custom_action_filter_operation_correct_errors(
    mut builder: crate::types::builders::CustomActionFilterOperationBuilder,
) -> crate::types::builders::CustomActionFilterOperationBuilder {
    if builder.selected_fields_configuration.is_none() {
        builder.selected_fields_configuration = {
            let builder = crate::types::builders::FilterOperationSelectedFieldsConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    if builder.target_visuals_configuration.is_none() {
        builder.target_visuals_configuration = {
            let builder = crate::types::builders::FilterOperationTargetVisualsConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn custom_action_set_parameters_operation_correct_errors(
    mut builder: crate::types::builders::CustomActionSetParametersOperationBuilder,
) -> crate::types::builders::CustomActionSetParametersOperationBuilder {
    if builder.parameter_value_configurations.is_none() {
        builder.parameter_value_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_action_url_operation_correct_errors(
    mut builder: crate::types::builders::CustomActionUrlOperationBuilder,
) -> crate::types::builders::CustomActionUrlOperationBuilder {
    if builder.url_template.is_none() {
        builder.url_template = Some(Default::default())
    }
    if builder.url_target.is_none() {
        builder.url_target = "no value was set".parse::<crate::types::UrlTargetConfiguration>().ok()
    }
    builder
}

pub(crate) fn date_dimension_field_correct_errors(
    mut builder: crate::types::builders::DateDimensionFieldBuilder,
) -> crate::types::builders::DateDimensionFieldBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn date_measure_field_correct_errors(
    mut builder: crate::types::builders::DateMeasureFieldBuilder,
) -> crate::types::builders::DateMeasureFieldBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn field_sort_correct_errors(mut builder: crate::types::builders::FieldSortBuilder) -> crate::types::builders::FieldSortBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.direction.is_none() {
        builder.direction = "no value was set".parse::<crate::types::SortDirection>().ok()
    }
    builder
}

pub(crate) fn free_form_section_layout_configuration_correct_errors(
    mut builder: crate::types::builders::FreeFormSectionLayoutConfigurationBuilder,
) -> crate::types::builders::FreeFormSectionLayoutConfigurationBuilder {
    if builder.elements.is_none() {
        builder.elements = Some(Default::default())
    }
    builder
}

pub(crate) fn numerical_dimension_field_correct_errors(
    mut builder: crate::types::builders::NumericalDimensionFieldBuilder,
) -> crate::types::builders::NumericalDimensionFieldBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn numerical_measure_field_correct_errors(
    mut builder: crate::types::builders::NumericalMeasureFieldBuilder,
) -> crate::types::builders::NumericalMeasureFieldBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn reference_line_custom_label_configuration_correct_errors(
    mut builder: crate::types::builders::ReferenceLineCustomLabelConfigurationBuilder,
) -> crate::types::builders::ReferenceLineCustomLabelConfigurationBuilder {
    if builder.custom_label.is_none() {
        builder.custom_label = Some(Default::default())
    }
    builder
}

pub(crate) fn reference_line_dynamic_data_configuration_correct_errors(
    mut builder: crate::types::builders::ReferenceLineDynamicDataConfigurationBuilder,
) -> crate::types::builders::ReferenceLineDynamicDataConfigurationBuilder {
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.calculation.is_none() {
        builder.calculation = {
            let builder = crate::types::builders::NumericalAggregationFunctionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn reference_line_static_data_configuration_correct_errors(
    mut builder: crate::types::builders::ReferenceLineStaticDataConfigurationBuilder,
) -> crate::types::builders::ReferenceLineStaticDataConfigurationBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn shape_conditional_format_correct_errors(
    mut builder: crate::types::builders::ShapeConditionalFormatBuilder,
) -> crate::types::builders::ShapeConditionalFormatBuilder {
    if builder.background_color.is_none() {
        builder.background_color = {
            let builder = crate::types::builders::ConditionalFormattingColorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn sheet_element_rendering_rule_correct_errors(
    mut builder: crate::types::builders::SheetElementRenderingRuleBuilder,
) -> crate::types::builders::SheetElementRenderingRuleBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    if builder.configuration_overrides.is_none() {
        builder.configuration_overrides = {
            let builder = crate::types::builders::SheetElementConfigurationOverridesBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn table_style_target_correct_errors(
    mut builder: crate::types::builders::TableStyleTargetBuilder,
) -> crate::types::builders::TableStyleTargetBuilder {
    if builder.cell_type.is_none() {
        builder.cell_type = "no value was set".parse::<crate::types::StyledCellType>().ok()
    }
    builder
}

pub(crate) fn unaggregated_field_correct_errors(
    mut builder: crate::types::builders::UnaggregatedFieldBuilder,
) -> crate::types::builders::UnaggregatedFieldBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn what_if_point_scenario_correct_errors(
    mut builder: crate::types::builders::WhatIfPointScenarioBuilder,
) -> crate::types::builders::WhatIfPointScenarioBuilder {
    if builder.date.is_none() {
        builder.date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn what_if_range_scenario_correct_errors(
    mut builder: crate::types::builders::WhatIfRangeScenarioBuilder,
) -> crate::types::builders::WhatIfRangeScenarioBuilder {
    if builder.start_date.is_none() {
        builder.start_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_date.is_none() {
        builder.end_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn category_drill_down_filter_correct_errors(
    mut builder: crate::types::builders::CategoryDrillDownFilterBuilder,
) -> crate::types::builders::CategoryDrillDownFilterBuilder {
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.category_values.is_none() {
        builder.category_values = Some(Default::default())
    }
    builder
}

pub(crate) fn column_tooltip_item_correct_errors(
    mut builder: crate::types::builders::ColumnTooltipItemBuilder,
) -> crate::types::builders::ColumnTooltipItemBuilder {
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn conditional_formatting_custom_icon_condition_correct_errors(
    mut builder: crate::types::builders::ConditionalFormattingCustomIconConditionBuilder,
) -> crate::types::builders::ConditionalFormattingCustomIconConditionBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    if builder.icon_options.is_none() {
        builder.icon_options = {
            let builder = crate::types::builders::ConditionalFormattingCustomIconOptionsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn conditional_formatting_gradient_color_correct_errors(
    mut builder: crate::types::builders::ConditionalFormattingGradientColorBuilder,
) -> crate::types::builders::ConditionalFormattingGradientColorBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    if builder.color.is_none() {
        builder.color = {
            let builder = crate::types::builders::GradientColorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn conditional_formatting_icon_set_correct_errors(
    mut builder: crate::types::builders::ConditionalFormattingIconSetBuilder,
) -> crate::types::builders::ConditionalFormattingIconSetBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn conditional_formatting_solid_color_correct_errors(
    mut builder: crate::types::builders::ConditionalFormattingSolidColorBuilder,
) -> crate::types::builders::ConditionalFormattingSolidColorBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn data_path_sort_correct_errors(mut builder: crate::types::builders::DataPathSortBuilder) -> crate::types::builders::DataPathSortBuilder {
    if builder.direction.is_none() {
        builder.direction = "no value was set".parse::<crate::types::SortDirection>().ok()
    }
    if builder.sort_paths.is_none() {
        builder.sort_paths = Some(Default::default())
    }
    builder
}

pub(crate) fn field_tooltip_item_correct_errors(
    mut builder: crate::types::builders::FieldTooltipItemBuilder,
) -> crate::types::builders::FieldTooltipItemBuilder {
    if builder.field_id.is_none() {
        builder.field_id = Some(Default::default())
    }
    builder
}

pub(crate) fn geospatial_heatmap_data_color_correct_errors(
    mut builder: crate::types::builders::GeospatialHeatmapDataColorBuilder,
) -> crate::types::builders::GeospatialHeatmapDataColorBuilder {
    if builder.color.is_none() {
        builder.color = Some(Default::default())
    }
    builder
}

pub(crate) fn local_navigation_configuration_correct_errors(
    mut builder: crate::types::builders::LocalNavigationConfigurationBuilder,
) -> crate::types::builders::LocalNavigationConfigurationBuilder {
    if builder.target_sheet_id.is_none() {
        builder.target_sheet_id = Some(Default::default())
    }
    builder
}

pub(crate) fn numeric_equality_drill_down_filter_correct_errors(
    mut builder: crate::types::builders::NumericEqualityDrillDownFilterBuilder,
) -> crate::types::builders::NumericEqualityDrillDownFilterBuilder {
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn table_field_link_configuration_correct_errors(
    mut builder: crate::types::builders::TableFieldLinkConfigurationBuilder,
) -> crate::types::builders::TableFieldLinkConfigurationBuilder {
    if builder.target.is_none() {
        builder.target = "no value was set".parse::<crate::types::UrlTargetConfiguration>().ok()
    }
    if builder.content.is_none() {
        builder.content = {
            let builder = crate::types::builders::TableFieldLinkContentConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn time_range_drill_down_filter_correct_errors(
    mut builder: crate::types::builders::TimeRangeDrillDownFilterBuilder,
) -> crate::types::builders::TimeRangeDrillDownFilterBuilder {
    if builder.column.is_none() {
        builder.column = {
            let builder = crate::types::builders::ColumnIdentifierBuilder::default();
            crate::serde_util::column_identifier_correct_errors(builder).build().ok()
        }
    }
    if builder.range_minimum.is_none() {
        builder.range_minimum = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.range_maximum.is_none() {
        builder.range_maximum = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.time_granularity.is_none() {
        builder.time_granularity = "no value was set".parse::<crate::types::TimeGranularity>().ok()
    }
    builder
}

pub(crate) fn set_parameter_value_configuration_correct_errors(
    mut builder: crate::types::builders::SetParameterValueConfigurationBuilder,
) -> crate::types::builders::SetParameterValueConfigurationBuilder {
    if builder.destination_parameter_name.is_none() {
        builder.destination_parameter_name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = {
            let builder = crate::types::builders::DestinationParameterValueConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn table_field_custom_text_content_correct_errors(
    mut builder: crate::types::builders::TableFieldCustomTextContentBuilder,
) -> crate::types::builders::TableFieldCustomTextContentBuilder {
    if builder.font_configuration.is_none() {
        builder.font_configuration = {
            let builder = crate::types::builders::FontConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn custom_values_configuration_correct_errors(
    mut builder: crate::types::builders::CustomValuesConfigurationBuilder,
) -> crate::types::builders::CustomValuesConfigurationBuilder {
    if builder.custom_values.is_none() {
        builder.custom_values = {
            let builder = crate::types::builders::CustomParameterValuesBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn gradient_stop_correct_errors(mut builder: crate::types::builders::GradientStopBuilder) -> crate::types::builders::GradientStopBuilder {
    if builder.gradient_offset.is_none() {
        builder.gradient_offset = Some(Default::default())
    }
    builder
}
