// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have access to this item. The provided credentials couldn't be validated. You might not be authorized to carry out the request. Make sure that your account is authorized to use the Amazon QuickSight service, that your policies have the correct permissions, and that you are using the correct access keys.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>A resource is already in a state that indicates an operation is happening that must complete before a new update can be applied.</p>
    ConcurrentUpdatingException(crate::error::ConcurrentUpdatingException),
    /// <p>Updating or deleting a resource can cause an inconsistent state.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The domain specified isn't on the allow list. All domains for embedded dashboards must be added to the approved list by an Amazon QuickSight admin.</p>
    DomainNotWhitelistedException(crate::error::DomainNotWhitelistedException),
    /// <p>The identity type specified isn't supported. Supported identity types include <code>IAM</code> and <code>QUICKSIGHT</code>.</p>
    IdentityTypeNotSupportedException(crate::error::IdentityTypeNotSupportedException),
    /// <p>An internal failure occurred.</p>
    InternalFailureException(crate::error::InternalFailureException),
    /// <p>The <code>NextToken</code> value isn't valid.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>One or more parameters has a value that isn't valid.</p>
    InvalidParameterValueException(crate::error::InvalidParameterValueException),
    /// <p>You don't have this feature activated for your account. To fix this issue, contact Amazon Web Services support.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>A limit is exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>One or more preconditions aren't met.</p>
    PreconditionNotMetException(crate::error::PreconditionNotMetException),
    /// <p>The user with the provided name isn't found. This error can happen in any operation that requires finding a user based on a provided user name, such as <code>DeleteUser</code>, <code>DescribeUser</code>, and so on.</p>
    QuickSightUserNotFoundException(crate::error::QuickSightUserNotFoundException),
    /// <p>The resource specified already exists. </p>
    ResourceExistsException(crate::error::ResourceExistsException),
    /// <p>One or more resources can't be found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>This resource is currently unavailable.</p>
    ResourceUnavailableException(crate::error::ResourceUnavailableException),
    /// <p>The number of minutes specified for the lifetime of a session isn't valid. The session lifetime must be 15-600 minutes.</p>
    SessionLifetimeInMinutesInvalidException(
        crate::error::SessionLifetimeInMinutesInvalidException,
    ),
    /// <p>Access is throttled.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>This error indicates that you are calling an embedding operation in Amazon QuickSight without the required pricing plan on your Amazon Web Services account. Before you can use embedding for anonymous users, a QuickSight administrator needs to add capacity pricing to Amazon QuickSight. You can do this on the <b>Manage Amazon QuickSight</b> page. </p>
    /// <p>After capacity pricing is added, you can use the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GetDashboardEmbedUrl.html">GetDashboardEmbedUrl</a> </code> API operation with the <code>--identity-type ANONYMOUS</code> option.</p>
    UnsupportedPricingPlanException(crate::error::UnsupportedPricingPlanException),
    /// <p>This error indicates that you are calling an operation on an Amazon QuickSight subscription where the edition doesn't include support for that operation. Amazon Amazon QuickSight currently has Standard Edition and Enterprise Edition. Not every operation and capability is available in every edition.</p>
    UnsupportedUserEditionException(crate::error::UnsupportedUserEditionException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConcurrentUpdatingException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DomainNotWhitelistedException(inner) => inner.fmt(f),
            Error::IdentityTypeNotSupportedException(inner) => inner.fmt(f),
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidParameterValueException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::PreconditionNotMetException(inner) => inner.fmt(f),
            Error::QuickSightUserNotFoundException(inner) => inner.fmt(f),
            Error::ResourceExistsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceUnavailableException(inner) => inner.fmt(f),
            Error::SessionLifetimeInMinutesInvalidException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnsupportedPricingPlanException(inner) => inner.fmt(f),
            Error::UnsupportedUserEditionException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelIngestionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CancelIngestionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelIngestionError> for Error {
    fn from(err: crate::error::CancelIngestionError) -> Self {
        match err {
            crate::error::CancelIngestionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CancelIngestionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CancelIngestionError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CancelIngestionError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CancelIngestionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelIngestionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelIngestionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAccountCustomizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAccountCustomizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAccountCustomizationError> for Error {
    fn from(err: crate::error::CreateAccountCustomizationError) -> Self {
        match err {
            crate::error::CreateAccountCustomizationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateAccountCustomizationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAccountCustomizationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateAccountCustomizationError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::CreateAccountCustomizationError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateAccountCustomizationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateAccountCustomizationError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::CreateAccountCustomizationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateAccountCustomizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAccountSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAccountSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAccountSubscriptionError> for Error {
    fn from(err: crate::error::CreateAccountSubscriptionError) -> Self {
        match err {
            crate::error::CreateAccountSubscriptionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateAccountSubscriptionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAccountSubscriptionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateAccountSubscriptionError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateAccountSubscriptionError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::CreateAccountSubscriptionError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateAccountSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateAccountSubscriptionError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::CreateAccountSubscriptionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateAccountSubscriptionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAnalysisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAnalysisError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAnalysisError> for Error {
    fn from(err: crate::error::CreateAnalysisError) -> Self {
        match err {
            crate::error::CreateAnalysisError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAnalysisError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateAnalysisError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateAnalysisError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAnalysisError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateAnalysisError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateAnalysisError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::CreateAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDashboardError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDashboardError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDashboardError> for Error {
    fn from(err: crate::error::CreateDashboardError) -> Self {
        match err {
            crate::error::CreateDashboardError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateDashboardError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateDashboardError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateDashboardError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDashboardError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateDashboardError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateDashboardError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateDashboardError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::CreateDashboardError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDataSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDataSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDataSetError> for Error {
    fn from(err: crate::error::CreateDataSetError) -> Self {
        match err {
            crate::error::CreateDataSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDataSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateDataSetError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateDataSetError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateDataSetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDataSetError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateDataSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateDataSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateDataSetError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::CreateDataSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDataSourceError> for Error {
    fn from(err: crate::error::CreateDataSourceError) -> Self {
        match err {
            crate::error::CreateDataSourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDataSourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateDataSourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateDataSourceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateDataSourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDataSourceError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateDataSourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFolderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateFolderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFolderError> for Error {
    fn from(err: crate::error::CreateFolderError) -> Self {
        match err {
            crate::error::CreateFolderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateFolderError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateFolderError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateFolderError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateFolderError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateFolderError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateFolderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateFolderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateFolderError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::CreateFolderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFolderMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateFolderMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFolderMembershipError> for Error {
    fn from(err: crate::error::CreateFolderMembershipError) -> Self {
        match err {
            crate::error::CreateFolderMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateFolderMembershipError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateFolderMembershipError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateFolderMembershipError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateFolderMembershipError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateFolderMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateFolderMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateFolderMembershipError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::CreateFolderMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGroupError> for Error {
    fn from(err: crate::error::CreateGroupError) -> Self {
        match err {
            crate::error::CreateGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateGroupError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateGroupError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::CreateGroupError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateGroupError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::CreateGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGroupMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGroupMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGroupMembershipError> for Error {
    fn from(err: crate::error::CreateGroupMembershipError) -> Self {
        match err {
            crate::error::CreateGroupMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateGroupMembershipError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateGroupMembershipError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateGroupMembershipError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::CreateGroupMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateGroupMembershipError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::CreateGroupMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateGroupMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateIAMPolicyAssignmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateIAMPolicyAssignmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateIAMPolicyAssignmentError> for Error {
    fn from(err: crate::error::CreateIAMPolicyAssignmentError) -> Self {
        match err {
            crate::error::CreateIAMPolicyAssignmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateIAMPolicyAssignmentError::ConcurrentUpdatingException(inner) => {
                Error::ConcurrentUpdatingException(inner)
            }
            crate::error::CreateIAMPolicyAssignmentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateIAMPolicyAssignmentError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateIAMPolicyAssignmentError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateIAMPolicyAssignmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateIAMPolicyAssignmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateIAMPolicyAssignmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateIngestionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateIngestionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateIngestionError> for Error {
    fn from(err: crate::error::CreateIngestionError) -> Self {
        match err {
            crate::error::CreateIngestionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateIngestionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateIngestionError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateIngestionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateIngestionError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateIngestionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateIngestionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateIngestionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateNamespaceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateNamespaceError> for Error {
    fn from(err: crate::error::CreateNamespaceError) -> Self {
        match err {
            crate::error::CreateNamespaceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateNamespaceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateNamespaceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateNamespaceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateNamespaceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateNamespaceError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::CreateNamespaceError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateNamespaceError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::CreateNamespaceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTemplateError> for Error {
    fn from(err: crate::error::CreateTemplateError) -> Self {
        match err {
            crate::error::CreateTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateTemplateError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateTemplateError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateTemplateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateTemplateError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateTemplateError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::CreateTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTemplateAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateTemplateAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTemplateAliasError> for Error {
    fn from(err: crate::error::CreateTemplateAliasError) -> Self {
        match err {
            crate::error::CreateTemplateAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateTemplateAliasError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateTemplateAliasError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateTemplateAliasError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateTemplateAliasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateTemplateAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateTemplateAliasError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::CreateTemplateAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateThemeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateThemeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateThemeError> for Error {
    fn from(err: crate::error::CreateThemeError) -> Self {
        match err {
            crate::error::CreateThemeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateThemeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateThemeError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateThemeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateThemeError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateThemeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateThemeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateThemeError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::CreateThemeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateThemeAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateThemeAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateThemeAliasError> for Error {
    fn from(err: crate::error::CreateThemeAliasError) -> Self {
        match err {
            crate::error::CreateThemeAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateThemeAliasError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateThemeAliasError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateThemeAliasError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateThemeAliasError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateThemeAliasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateThemeAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateThemeAliasError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::CreateThemeAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAccountCustomizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAccountCustomizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAccountCustomizationError> for Error {
    fn from(err: crate::error::DeleteAccountCustomizationError) -> Self {
        match err {
            crate::error::DeleteAccountCustomizationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAccountCustomizationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteAccountCustomizationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteAccountCustomizationError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DeleteAccountCustomizationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAccountCustomizationError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DeleteAccountCustomizationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteAccountCustomizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAccountSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAccountSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAccountSubscriptionError> for Error {
    fn from(err: crate::error::DeleteAccountSubscriptionError) -> Self {
        match err {
            crate::error::DeleteAccountSubscriptionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAccountSubscriptionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteAccountSubscriptionError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteAccountSubscriptionError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::DeleteAccountSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAccountSubscriptionError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DeleteAccountSubscriptionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteAccountSubscriptionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAnalysisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAnalysisError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAnalysisError> for Error {
    fn from(err: crate::error::DeleteAnalysisError) -> Self {
        match err {
            crate::error::DeleteAnalysisError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteAnalysisError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteAnalysisError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteAnalysisError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteAnalysisError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DeleteAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDashboardError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDashboardError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDashboardError> for Error {
    fn from(err: crate::error::DeleteDashboardError) -> Self {
        match err {
            crate::error::DeleteDashboardError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteDashboardError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteDashboardError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteDashboardError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDashboardError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteDashboardError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DeleteDashboardError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDataSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDataSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDataSetError> for Error {
    fn from(err: crate::error::DeleteDataSetError) -> Self {
        match err {
            crate::error::DeleteDataSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDataSetError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteDataSetError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteDataSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDataSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteDataSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDataSourceError> for Error {
    fn from(err: crate::error::DeleteDataSourceError) -> Self {
        match err {
            crate::error::DeleteDataSourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDataSourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteDataSourceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDataSourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFolderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteFolderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFolderError> for Error {
    fn from(err: crate::error::DeleteFolderError) -> Self {
        match err {
            crate::error::DeleteFolderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteFolderError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteFolderError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteFolderError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteFolderError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::DeleteFolderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteFolderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteFolderError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DeleteFolderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFolderMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteFolderMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFolderMembershipError> for Error {
    fn from(err: crate::error::DeleteFolderMembershipError) -> Self {
        match err {
            crate::error::DeleteFolderMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteFolderMembershipError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteFolderMembershipError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteFolderMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteFolderMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteFolderMembershipError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DeleteFolderMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGroupError> for Error {
    fn from(err: crate::error::DeleteGroupError) -> Self {
        match err {
            crate::error::DeleteGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteGroupError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteGroupError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::DeleteGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteGroupError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DeleteGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGroupMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGroupMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGroupMembershipError> for Error {
    fn from(err: crate::error::DeleteGroupMembershipError) -> Self {
        match err {
            crate::error::DeleteGroupMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteGroupMembershipError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteGroupMembershipError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteGroupMembershipError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::DeleteGroupMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteGroupMembershipError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DeleteGroupMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteGroupMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIAMPolicyAssignmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteIAMPolicyAssignmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIAMPolicyAssignmentError> for Error {
    fn from(err: crate::error::DeleteIAMPolicyAssignmentError) -> Self {
        match err {
            crate::error::DeleteIAMPolicyAssignmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteIAMPolicyAssignmentError::ConcurrentUpdatingException(inner) => {
                Error::ConcurrentUpdatingException(inner)
            }
            crate::error::DeleteIAMPolicyAssignmentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteIAMPolicyAssignmentError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteIAMPolicyAssignmentError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::DeleteIAMPolicyAssignmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteIAMPolicyAssignmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteIAMPolicyAssignmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteNamespaceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteNamespaceError> for Error {
    fn from(err: crate::error::DeleteNamespaceError) -> Self {
        match err {
            crate::error::DeleteNamespaceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteNamespaceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteNamespaceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteNamespaceError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::DeleteNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteNamespaceError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DeleteNamespaceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTemplateError> for Error {
    fn from(err: crate::error::DeleteTemplateError) -> Self {
        match err {
            crate::error::DeleteTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteTemplateError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteTemplateError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteTemplateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteTemplateError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DeleteTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTemplateAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteTemplateAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTemplateAliasError> for Error {
    fn from(err: crate::error::DeleteTemplateAliasError) -> Self {
        match err {
            crate::error::DeleteTemplateAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteTemplateAliasError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteTemplateAliasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteTemplateAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteTemplateAliasError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DeleteTemplateAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteThemeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteThemeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteThemeError> for Error {
    fn from(err: crate::error::DeleteThemeError) -> Self {
        match err {
            crate::error::DeleteThemeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteThemeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteThemeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteThemeError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteThemeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteThemeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteThemeError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DeleteThemeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteThemeAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteThemeAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteThemeAliasError> for Error {
    fn from(err: crate::error::DeleteThemeAliasError) -> Self {
        match err {
            crate::error::DeleteThemeAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteThemeAliasError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteThemeAliasError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteThemeAliasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteThemeAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteThemeAliasError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DeleteThemeAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserError> for Error {
    fn from(err: crate::error::DeleteUserError) -> Self {
        match err {
            crate::error::DeleteUserError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteUserError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteUserError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteUserError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::DeleteUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteUserError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DeleteUserError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserByPrincipalIdError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUserByPrincipalIdError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserByPrincipalIdError> for Error {
    fn from(err: crate::error::DeleteUserByPrincipalIdError) -> Self {
        match err {
            crate::error::DeleteUserByPrincipalIdError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteUserByPrincipalIdError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteUserByPrincipalIdError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteUserByPrincipalIdError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::DeleteUserByPrincipalIdError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteUserByPrincipalIdError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DeleteUserByPrincipalIdError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteUserByPrincipalIdError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAccountCustomizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAccountCustomizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccountCustomizationError> for Error {
    fn from(err: crate::error::DescribeAccountCustomizationError) -> Self {
        match err {
            crate::error::DescribeAccountCustomizationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeAccountCustomizationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeAccountCustomizationError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeAccountCustomizationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeAccountCustomizationError::ResourceUnavailableException(
                inner,
            ) => Error::ResourceUnavailableException(inner),
            crate::error::DescribeAccountCustomizationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeAccountCustomizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAccountSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAccountSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccountSettingsError> for Error {
    fn from(err: crate::error::DescribeAccountSettingsError) -> Self {
        match err {
            crate::error::DescribeAccountSettingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeAccountSettingsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeAccountSettingsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeAccountSettingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeAccountSettingsError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DescribeAccountSettingsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAccountSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAccountSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccountSubscriptionError> for Error {
    fn from(err: crate::error::DescribeAccountSubscriptionError) -> Self {
        match err {
            crate::error::DescribeAccountSubscriptionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeAccountSubscriptionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeAccountSubscriptionError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeAccountSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeAccountSubscriptionError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DescribeAccountSubscriptionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeAccountSubscriptionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAnalysisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAnalysisError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAnalysisError> for Error {
    fn from(err: crate::error::DescribeAnalysisError) -> Self {
        match err {
            crate::error::DescribeAnalysisError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeAnalysisError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeAnalysisError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeAnalysisError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeAnalysisError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DescribeAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAnalysisDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAnalysisDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAnalysisDefinitionError> for Error {
    fn from(err: crate::error::DescribeAnalysisDefinitionError) -> Self {
        match err {
            crate::error::DescribeAnalysisDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeAnalysisDefinitionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeAnalysisDefinitionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeAnalysisDefinitionError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeAnalysisDefinitionError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::DescribeAnalysisDefinitionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeAnalysisDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeAnalysisDefinitionError::UnsupportedUserEditionException(
                inner,
            ) => Error::UnsupportedUserEditionException(inner),
            crate::error::DescribeAnalysisDefinitionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAnalysisPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAnalysisPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAnalysisPermissionsError> for Error {
    fn from(err: crate::error::DescribeAnalysisPermissionsError) -> Self {
        match err {
            crate::error::DescribeAnalysisPermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeAnalysisPermissionsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeAnalysisPermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeAnalysisPermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeAnalysisPermissionsError::UnsupportedUserEditionException(
                inner,
            ) => Error::UnsupportedUserEditionException(inner),
            crate::error::DescribeAnalysisPermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDashboardError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDashboardError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDashboardError> for Error {
    fn from(err: crate::error::DescribeDashboardError) -> Self {
        match err {
            crate::error::DescribeDashboardError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeDashboardError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeDashboardError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeDashboardError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDashboardError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeDashboardError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DescribeDashboardError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDashboardDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDashboardDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDashboardDefinitionError> for Error {
    fn from(err: crate::error::DescribeDashboardDefinitionError) -> Self {
        match err {
            crate::error::DescribeDashboardDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeDashboardDefinitionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeDashboardDefinitionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeDashboardDefinitionError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeDashboardDefinitionError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::DescribeDashboardDefinitionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDashboardDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeDashboardDefinitionError::UnsupportedUserEditionException(
                inner,
            ) => Error::UnsupportedUserEditionException(inner),
            crate::error::DescribeDashboardDefinitionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDashboardPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDashboardPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDashboardPermissionsError> for Error {
    fn from(err: crate::error::DescribeDashboardPermissionsError) -> Self {
        match err {
            crate::error::DescribeDashboardPermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeDashboardPermissionsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeDashboardPermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDashboardPermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeDashboardPermissionsError::UnsupportedUserEditionException(
                inner,
            ) => Error::UnsupportedUserEditionException(inner),
            crate::error::DescribeDashboardPermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDataSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDataSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDataSetError> for Error {
    fn from(err: crate::error::DescribeDataSetError) -> Self {
        match err {
            crate::error::DescribeDataSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeDataSetError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeDataSetError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeDataSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDataSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeDataSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDataSetPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDataSetPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDataSetPermissionsError> for Error {
    fn from(err: crate::error::DescribeDataSetPermissionsError) -> Self {
        match err {
            crate::error::DescribeDataSetPermissionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeDataSetPermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeDataSetPermissionsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeDataSetPermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDataSetPermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeDataSetPermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDataSourceError> for Error {
    fn from(err: crate::error::DescribeDataSourceError) -> Self {
        match err {
            crate::error::DescribeDataSourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeDataSourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeDataSourceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDataSourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDataSourcePermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDataSourcePermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDataSourcePermissionsError> for Error {
    fn from(err: crate::error::DescribeDataSourcePermissionsError) -> Self {
        match err {
            crate::error::DescribeDataSourcePermissionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeDataSourcePermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeDataSourcePermissionsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeDataSourcePermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDataSourcePermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeDataSourcePermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFolderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeFolderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFolderError> for Error {
    fn from(err: crate::error::DescribeFolderError) -> Self {
        match err {
            crate::error::DescribeFolderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeFolderError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeFolderError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeFolderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeFolderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeFolderError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DescribeFolderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFolderPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeFolderPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFolderPermissionsError> for Error {
    fn from(err: crate::error::DescribeFolderPermissionsError) -> Self {
        match err {
            crate::error::DescribeFolderPermissionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeFolderPermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeFolderPermissionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeFolderPermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeFolderPermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeFolderPermissionsError::UnsupportedUserEditionException(
                inner,
            ) => Error::UnsupportedUserEditionException(inner),
            crate::error::DescribeFolderPermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeFolderResolvedPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeFolderResolvedPermissionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFolderResolvedPermissionsError> for Error {
    fn from(err: crate::error::DescribeFolderResolvedPermissionsError) -> Self {
        match err {
            crate::error::DescribeFolderResolvedPermissionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeFolderResolvedPermissionsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::error::DescribeFolderResolvedPermissionsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeFolderResolvedPermissionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeFolderResolvedPermissionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeFolderResolvedPermissionsError::UnsupportedUserEditionException(inner) => Error::UnsupportedUserEditionException(inner),
            crate::error::DescribeFolderResolvedPermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGroupError> for Error {
    fn from(err: crate::error::DescribeGroupError) -> Self {
        match err {
            crate::error::DescribeGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeGroupError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeGroupError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::DescribeGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeGroupError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DescribeGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGroupMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGroupMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGroupMembershipError> for Error {
    fn from(err: crate::error::DescribeGroupMembershipError) -> Self {
        match err {
            crate::error::DescribeGroupMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeGroupMembershipError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeGroupMembershipError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeGroupMembershipError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::DescribeGroupMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeGroupMembershipError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DescribeGroupMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeGroupMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeIAMPolicyAssignmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeIAMPolicyAssignmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeIAMPolicyAssignmentError> for Error {
    fn from(err: crate::error::DescribeIAMPolicyAssignmentError) -> Self {
        match err {
            crate::error::DescribeIAMPolicyAssignmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeIAMPolicyAssignmentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeIAMPolicyAssignmentError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeIAMPolicyAssignmentError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeIAMPolicyAssignmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeIAMPolicyAssignmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeIAMPolicyAssignmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeIngestionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeIngestionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeIngestionError> for Error {
    fn from(err: crate::error::DescribeIngestionError) -> Self {
        match err {
            crate::error::DescribeIngestionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeIngestionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeIngestionError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeIngestionError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::DescribeIngestionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeIngestionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeIngestionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeIpRestrictionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeIpRestrictionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeIpRestrictionError> for Error {
    fn from(err: crate::error::DescribeIpRestrictionError) -> Self {
        match err {
            crate::error::DescribeIpRestrictionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeIpRestrictionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeIpRestrictionError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeIpRestrictionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeIpRestrictionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeIpRestrictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeNamespaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeNamespaceError> for Error {
    fn from(err: crate::error::DescribeNamespaceError) -> Self {
        match err {
            crate::error::DescribeNamespaceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeNamespaceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeNamespaceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeNamespaceError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DescribeNamespaceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTemplateError> for Error {
    fn from(err: crate::error::DescribeTemplateError) -> Self {
        match err {
            crate::error::DescribeTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeTemplateError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeTemplateError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeTemplateError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::DescribeTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeTemplateError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DescribeTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTemplateAliasError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTemplateAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTemplateAliasError> for Error {
    fn from(err: crate::error::DescribeTemplateAliasError) -> Self {
        match err {
            crate::error::DescribeTemplateAliasError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeTemplateAliasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeTemplateAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeTemplateAliasError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DescribeTemplateAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTemplateDefinitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTemplateDefinitionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTemplateDefinitionError> for Error {
    fn from(err: crate::error::DescribeTemplateDefinitionError) -> Self {
        match err {
            crate::error::DescribeTemplateDefinitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeTemplateDefinitionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeTemplateDefinitionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeTemplateDefinitionError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeTemplateDefinitionError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::DescribeTemplateDefinitionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeTemplateDefinitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeTemplateDefinitionError::UnsupportedUserEditionException(
                inner,
            ) => Error::UnsupportedUserEditionException(inner),
            crate::error::DescribeTemplateDefinitionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTemplatePermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTemplatePermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTemplatePermissionsError> for Error {
    fn from(err: crate::error::DescribeTemplatePermissionsError) -> Self {
        match err {
            crate::error::DescribeTemplatePermissionsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeTemplatePermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeTemplatePermissionsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeTemplatePermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeTemplatePermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeTemplatePermissionsError::UnsupportedUserEditionException(
                inner,
            ) => Error::UnsupportedUserEditionException(inner),
            crate::error::DescribeTemplatePermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeThemeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeThemeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeThemeError> for Error {
    fn from(err: crate::error::DescribeThemeError) -> Self {
        match err {
            crate::error::DescribeThemeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeThemeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeThemeError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeThemeError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::DescribeThemeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeThemeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeThemeError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DescribeThemeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeThemeAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeThemeAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeThemeAliasError> for Error {
    fn from(err: crate::error::DescribeThemeAliasError) -> Self {
        match err {
            crate::error::DescribeThemeAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeThemeAliasError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeThemeAliasError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeThemeAliasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeThemeAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeThemeAliasError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DescribeThemeAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeThemePermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeThemePermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeThemePermissionsError> for Error {
    fn from(err: crate::error::DescribeThemePermissionsError) -> Self {
        match err {
            crate::error::DescribeThemePermissionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeThemePermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeThemePermissionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeThemePermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeThemePermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeThemePermissionsError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::DescribeThemePermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserError> for Error {
    fn from(err: crate::error::DescribeUserError) -> Self {
        match err {
            crate::error::DescribeUserError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeUserError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DescribeUserError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeUserError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::DescribeUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeUserError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::DescribeUserError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GenerateEmbedUrlForAnonymousUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GenerateEmbedUrlForAnonymousUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GenerateEmbedUrlForAnonymousUserError> for Error {
    fn from(err: crate::error::GenerateEmbedUrlForAnonymousUserError) -> Self {
        match err {
            crate::error::GenerateEmbedUrlForAnonymousUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GenerateEmbedUrlForAnonymousUserError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::error::GenerateEmbedUrlForAnonymousUserError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::GenerateEmbedUrlForAnonymousUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GenerateEmbedUrlForAnonymousUserError::SessionLifetimeInMinutesInvalidException(inner) => Error::SessionLifetimeInMinutesInvalidException(inner),
            crate::error::GenerateEmbedUrlForAnonymousUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GenerateEmbedUrlForAnonymousUserError::UnsupportedPricingPlanException(inner) => Error::UnsupportedPricingPlanException(inner),
            crate::error::GenerateEmbedUrlForAnonymousUserError::UnsupportedUserEditionException(inner) => Error::UnsupportedUserEditionException(inner),
            crate::error::GenerateEmbedUrlForAnonymousUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GenerateEmbedUrlForRegisteredUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GenerateEmbedUrlForRegisteredUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GenerateEmbedUrlForRegisteredUserError> for Error {
    fn from(err: crate::error::GenerateEmbedUrlForRegisteredUserError) -> Self {
        match err {
            crate::error::GenerateEmbedUrlForRegisteredUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GenerateEmbedUrlForRegisteredUserError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::error::GenerateEmbedUrlForRegisteredUserError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::GenerateEmbedUrlForRegisteredUserError::QuickSightUserNotFoundException(inner) => Error::QuickSightUserNotFoundException(inner),
            crate::error::GenerateEmbedUrlForRegisteredUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GenerateEmbedUrlForRegisteredUserError::SessionLifetimeInMinutesInvalidException(inner) => Error::SessionLifetimeInMinutesInvalidException(inner),
            crate::error::GenerateEmbedUrlForRegisteredUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GenerateEmbedUrlForRegisteredUserError::UnsupportedPricingPlanException(inner) => Error::UnsupportedPricingPlanException(inner),
            crate::error::GenerateEmbedUrlForRegisteredUserError::UnsupportedUserEditionException(inner) => Error::UnsupportedUserEditionException(inner),
            crate::error::GenerateEmbedUrlForRegisteredUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDashboardEmbedUrlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDashboardEmbedUrlError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDashboardEmbedUrlError> for Error {
    fn from(err: crate::error::GetDashboardEmbedUrlError) -> Self {
        match err {
            crate::error::GetDashboardEmbedUrlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDashboardEmbedUrlError::DomainNotWhitelistedException(inner) => {
                Error::DomainNotWhitelistedException(inner)
            }
            crate::error::GetDashboardEmbedUrlError::IdentityTypeNotSupportedException(inner) => {
                Error::IdentityTypeNotSupportedException(inner)
            }
            crate::error::GetDashboardEmbedUrlError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetDashboardEmbedUrlError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::GetDashboardEmbedUrlError::QuickSightUserNotFoundException(inner) => {
                Error::QuickSightUserNotFoundException(inner)
            }
            crate::error::GetDashboardEmbedUrlError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::GetDashboardEmbedUrlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetDashboardEmbedUrlError::SessionLifetimeInMinutesInvalidException(
                inner,
            ) => Error::SessionLifetimeInMinutesInvalidException(inner),
            crate::error::GetDashboardEmbedUrlError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetDashboardEmbedUrlError::UnsupportedPricingPlanException(inner) => {
                Error::UnsupportedPricingPlanException(inner)
            }
            crate::error::GetDashboardEmbedUrlError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::GetDashboardEmbedUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSessionEmbedUrlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSessionEmbedUrlError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSessionEmbedUrlError> for Error {
    fn from(err: crate::error::GetSessionEmbedUrlError) -> Self {
        match err {
            crate::error::GetSessionEmbedUrlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSessionEmbedUrlError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetSessionEmbedUrlError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::GetSessionEmbedUrlError::QuickSightUserNotFoundException(inner) => {
                Error::QuickSightUserNotFoundException(inner)
            }
            crate::error::GetSessionEmbedUrlError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::GetSessionEmbedUrlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetSessionEmbedUrlError::SessionLifetimeInMinutesInvalidException(
                inner,
            ) => Error::SessionLifetimeInMinutesInvalidException(inner),
            crate::error::GetSessionEmbedUrlError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetSessionEmbedUrlError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::GetSessionEmbedUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAnalysesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAnalysesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAnalysesError> for Error {
    fn from(err: crate::error::ListAnalysesError) -> Self {
        match err {
            crate::error::ListAnalysesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListAnalysesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListAnalysesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListAnalysesError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::ListAnalysesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDashboardsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDashboardsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDashboardsError> for Error {
    fn from(err: crate::error::ListDashboardsError) -> Self {
        match err {
            crate::error::ListDashboardsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListDashboardsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListDashboardsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDashboardsError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::ListDashboardsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDashboardVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDashboardVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDashboardVersionsError> for Error {
    fn from(err: crate::error::ListDashboardVersionsError) -> Self {
        match err {
            crate::error::ListDashboardVersionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListDashboardVersionsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListDashboardVersionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListDashboardVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListDashboardVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDashboardVersionsError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::ListDashboardVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDataSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDataSetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDataSetsError> for Error {
    fn from(err: crate::error::ListDataSetsError) -> Self {
        match err {
            crate::error::ListDataSetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDataSetsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListDataSetsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListDataSetsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListDataSetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDataSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDataSourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDataSourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDataSourcesError> for Error {
    fn from(err: crate::error::ListDataSourcesError) -> Self {
        match err {
            crate::error::ListDataSourcesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDataSourcesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListDataSourcesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListDataSourcesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListDataSourcesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFolderMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListFolderMembersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFolderMembersError> for Error {
    fn from(err: crate::error::ListFolderMembersError) -> Self {
        match err {
            crate::error::ListFolderMembersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFolderMembersError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListFolderMembersError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListFolderMembersError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListFolderMembersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFolderMembersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFolderMembersError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::ListFolderMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFoldersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFoldersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFoldersError> for Error {
    fn from(err: crate::error::ListFoldersError) -> Self {
        match err {
            crate::error::ListFoldersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFoldersError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListFoldersError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListFoldersError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListFoldersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFoldersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFoldersError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::ListFoldersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupMembershipsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListGroupMembershipsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGroupMembershipsError> for Error {
    fn from(err: crate::error::ListGroupMembershipsError) -> Self {
        match err {
            crate::error::ListGroupMembershipsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListGroupMembershipsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListGroupMembershipsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListGroupMembershipsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListGroupMembershipsError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::ListGroupMembershipsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListGroupMembershipsError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::ListGroupMembershipsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListGroupMembershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGroupsError> for Error {
    fn from(err: crate::error::ListGroupsError) -> Self {
        match err {
            crate::error::ListGroupsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListGroupsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListGroupsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListGroupsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListGroupsError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::ListGroupsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListGroupsError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::ListGroupsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListIAMPolicyAssignmentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListIAMPolicyAssignmentsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListIAMPolicyAssignmentsError> for Error {
    fn from(err: crate::error::ListIAMPolicyAssignmentsError) -> Self {
        match err {
            crate::error::ListIAMPolicyAssignmentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListIAMPolicyAssignmentsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListIAMPolicyAssignmentsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListIAMPolicyAssignmentsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListIAMPolicyAssignmentsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListIAMPolicyAssignmentsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListIAMPolicyAssignmentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListIAMPolicyAssignmentsForUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListIAMPolicyAssignmentsForUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListIAMPolicyAssignmentsForUserError> for Error {
    fn from(err: crate::error::ListIAMPolicyAssignmentsForUserError) -> Self {
        match err {
            crate::error::ListIAMPolicyAssignmentsForUserError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListIAMPolicyAssignmentsForUserError::ConcurrentUpdatingException(
                inner,
            ) => Error::ConcurrentUpdatingException(inner),
            crate::error::ListIAMPolicyAssignmentsForUserError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListIAMPolicyAssignmentsForUserError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::ListIAMPolicyAssignmentsForUserError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::ListIAMPolicyAssignmentsForUserError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListIAMPolicyAssignmentsForUserError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListIAMPolicyAssignmentsForUserError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListIngestionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListIngestionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListIngestionsError> for Error {
    fn from(err: crate::error::ListIngestionsError) -> Self {
        match err {
            crate::error::ListIngestionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListIngestionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListIngestionsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListIngestionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListIngestionsError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::ListIngestionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListIngestionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListIngestionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNamespacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListNamespacesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListNamespacesError> for Error {
    fn from(err: crate::error::ListNamespacesError) -> Self {
        match err {
            crate::error::ListNamespacesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListNamespacesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListNamespacesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListNamespacesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListNamespacesError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::ListNamespacesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListNamespacesError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::ListNamespacesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListNamespacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTemplateAliasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTemplateAliasesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTemplateAliasesError> for Error {
    fn from(err: crate::error::ListTemplateAliasesError) -> Self {
        match err {
            crate::error::ListTemplateAliasesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListTemplateAliasesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListTemplateAliasesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTemplateAliasesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTemplateAliasesError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::ListTemplateAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTemplatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTemplatesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTemplatesError> for Error {
    fn from(err: crate::error::ListTemplatesError) -> Self {
        match err {
            crate::error::ListTemplatesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListTemplatesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListTemplatesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListTemplatesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTemplatesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTemplatesError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::ListTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTemplateVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTemplateVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTemplateVersionsError> for Error {
    fn from(err: crate::error::ListTemplateVersionsError) -> Self {
        match err {
            crate::error::ListTemplateVersionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListTemplateVersionsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListTemplateVersionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListTemplateVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTemplateVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTemplateVersionsError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::ListTemplateVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListThemeAliasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListThemeAliasesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListThemeAliasesError> for Error {
    fn from(err: crate::error::ListThemeAliasesError) -> Self {
        match err {
            crate::error::ListThemeAliasesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListThemeAliasesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListThemeAliasesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListThemeAliasesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListThemeAliasesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListThemeAliasesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListThemeAliasesError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::ListThemeAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListThemesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListThemesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListThemesError> for Error {
    fn from(err: crate::error::ListThemesError) -> Self {
        match err {
            crate::error::ListThemesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListThemesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListThemesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListThemesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListThemesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListThemesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListThemesError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::ListThemesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListThemeVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListThemeVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListThemeVersionsError> for Error {
    fn from(err: crate::error::ListThemeVersionsError) -> Self {
        match err {
            crate::error::ListThemeVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListThemeVersionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListThemeVersionsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListThemeVersionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListThemeVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListThemeVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListThemeVersionsError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::ListThemeVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUserGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUserGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUserGroupsError> for Error {
    fn from(err: crate::error::ListUserGroupsError) -> Self {
        match err {
            crate::error::ListUserGroupsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListUserGroupsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListUserGroupsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListUserGroupsError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::ListUserGroupsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListUserGroupsError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::ListUserGroupsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListUserGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUsersError> for Error {
    fn from(err: crate::error::ListUsersError) -> Self {
        match err {
            crate::error::ListUsersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListUsersError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListUsersError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListUsersError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListUsersError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::ListUsersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListUsersError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::ListUsersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RegisterUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterUserError> for Error {
    fn from(err: crate::error::RegisterUserError) -> Self {
        match err {
            crate::error::RegisterUserError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RegisterUserError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::RegisterUserError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::RegisterUserError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RegisterUserError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::RegisterUserError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::RegisterUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RegisterUserError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::RegisterUserError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RegisterUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreAnalysisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RestoreAnalysisError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreAnalysisError> for Error {
    fn from(err: crate::error::RestoreAnalysisError) -> Self {
        match err {
            crate::error::RestoreAnalysisError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RestoreAnalysisError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::RestoreAnalysisError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::RestoreAnalysisError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RestoreAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RestoreAnalysisError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::RestoreAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchAnalysesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchAnalysesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchAnalysesError> for Error {
    fn from(err: crate::error::SearchAnalysesError) -> Self {
        match err {
            crate::error::SearchAnalysesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::SearchAnalysesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::SearchAnalysesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::SearchAnalysesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchAnalysesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchAnalysesError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::SearchAnalysesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchDashboardsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchDashboardsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchDashboardsError> for Error {
    fn from(err: crate::error::SearchDashboardsError) -> Self {
        match err {
            crate::error::SearchDashboardsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::SearchDashboardsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::SearchDashboardsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::SearchDashboardsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchDashboardsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchDashboardsError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::SearchDashboardsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchDataSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchDataSetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchDataSetsError> for Error {
    fn from(err: crate::error::SearchDataSetsError) -> Self {
        match err {
            crate::error::SearchDataSetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchDataSetsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::SearchDataSetsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::SearchDataSetsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::SearchDataSetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchDataSetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchDataSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchDataSourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchDataSourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchDataSourcesError> for Error {
    fn from(err: crate::error::SearchDataSourcesError) -> Self {
        match err {
            crate::error::SearchDataSourcesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchDataSourcesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::SearchDataSourcesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::SearchDataSourcesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::SearchDataSourcesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchDataSourcesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchFoldersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchFoldersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchFoldersError> for Error {
    fn from(err: crate::error::SearchFoldersError) -> Self {
        match err {
            crate::error::SearchFoldersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchFoldersError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::SearchFoldersError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::SearchFoldersError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::SearchFoldersError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SearchFoldersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchFoldersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchFoldersError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::SearchFoldersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchGroupsError> for Error {
    fn from(err: crate::error::SearchGroupsError) -> Self {
        match err {
            crate::error::SearchGroupsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchGroupsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::SearchGroupsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::SearchGroupsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::SearchGroupsError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::SearchGroupsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchGroupsError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::SearchGroupsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::TagResourceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::TagResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UntagResourceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAccountCustomizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAccountCustomizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAccountCustomizationError> for Error {
    fn from(err: crate::error::UpdateAccountCustomizationError) -> Self {
        match err {
            crate::error::UpdateAccountCustomizationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAccountCustomizationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAccountCustomizationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateAccountCustomizationError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::UpdateAccountCustomizationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAccountCustomizationError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::UpdateAccountCustomizationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateAccountCustomizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAccountSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAccountSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAccountSettingsError> for Error {
    fn from(err: crate::error::UpdateAccountSettingsError) -> Self {
        match err {
            crate::error::UpdateAccountSettingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAccountSettingsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateAccountSettingsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateAccountSettingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAccountSettingsError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::UpdateAccountSettingsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAnalysisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateAnalysisError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAnalysisError> for Error {
    fn from(err: crate::error::UpdateAnalysisError) -> Self {
        match err {
            crate::error::UpdateAnalysisError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAnalysisError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateAnalysisError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateAnalysisError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::UpdateAnalysisError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateAnalysisError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::UpdateAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAnalysisPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAnalysisPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAnalysisPermissionsError> for Error {
    fn from(err: crate::error::UpdateAnalysisPermissionsError) -> Self {
        match err {
            crate::error::UpdateAnalysisPermissionsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAnalysisPermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateAnalysisPermissionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateAnalysisPermissionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateAnalysisPermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAnalysisPermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateAnalysisPermissionsError::UnsupportedUserEditionException(
                inner,
            ) => Error::UnsupportedUserEditionException(inner),
            crate::error::UpdateAnalysisPermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDashboardError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDashboardError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDashboardError> for Error {
    fn from(err: crate::error::UpdateDashboardError) -> Self {
        match err {
            crate::error::UpdateDashboardError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDashboardError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateDashboardError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateDashboardError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDashboardError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDashboardError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDashboardError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::UpdateDashboardError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDashboardPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDashboardPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDashboardPermissionsError> for Error {
    fn from(err: crate::error::UpdateDashboardPermissionsError) -> Self {
        match err {
            crate::error::UpdateDashboardPermissionsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDashboardPermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateDashboardPermissionsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::UpdateDashboardPermissionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDashboardPermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDashboardPermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDashboardPermissionsError::UnsupportedUserEditionException(
                inner,
            ) => Error::UnsupportedUserEditionException(inner),
            crate::error::UpdateDashboardPermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateDashboardPublishedVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateDashboardPublishedVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDashboardPublishedVersionError> for Error {
    fn from(err: crate::error::UpdateDashboardPublishedVersionError) -> Self {
        match err {
            crate::error::UpdateDashboardPublishedVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDashboardPublishedVersionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateDashboardPublishedVersionError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::UpdateDashboardPublishedVersionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateDashboardPublishedVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDashboardPublishedVersionError::UnsupportedUserEditionException(
                inner,
            ) => Error::UnsupportedUserEditionException(inner),
            crate::error::UpdateDashboardPublishedVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDataSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDataSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDataSetError> for Error {
    fn from(err: crate::error::UpdateDataSetError) -> Self {
        match err {
            crate::error::UpdateDataSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDataSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDataSetError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateDataSetError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateDataSetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDataSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDataSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDataSetError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::UpdateDataSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDataSetPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDataSetPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDataSetPermissionsError> for Error {
    fn from(err: crate::error::UpdateDataSetPermissionsError) -> Self {
        match err {
            crate::error::UpdateDataSetPermissionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDataSetPermissionsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDataSetPermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateDataSetPermissionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateDataSetPermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDataSetPermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDataSetPermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDataSourceError> for Error {
    fn from(err: crate::error::UpdateDataSourceError) -> Self {
        match err {
            crate::error::UpdateDataSourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDataSourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDataSourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateDataSourceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDataSourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDataSourcePermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDataSourcePermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDataSourcePermissionsError> for Error {
    fn from(err: crate::error::UpdateDataSourcePermissionsError) -> Self {
        match err {
            crate::error::UpdateDataSourcePermissionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDataSourcePermissionsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDataSourcePermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateDataSourcePermissionsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::UpdateDataSourcePermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDataSourcePermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDataSourcePermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFolderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateFolderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFolderError> for Error {
    fn from(err: crate::error::UpdateFolderError) -> Self {
        match err {
            crate::error::UpdateFolderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateFolderError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateFolderError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateFolderError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateFolderError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::UpdateFolderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateFolderError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateFolderError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::UpdateFolderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFolderPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateFolderPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFolderPermissionsError> for Error {
    fn from(err: crate::error::UpdateFolderPermissionsError) -> Self {
        match err {
            crate::error::UpdateFolderPermissionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateFolderPermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateFolderPermissionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateFolderPermissionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateFolderPermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateFolderPermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateFolderPermissionsError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::UpdateFolderPermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGroupError> for Error {
    fn from(err: crate::error::UpdateGroupError) -> Self {
        match err {
            crate::error::UpdateGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateGroupError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateGroupError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::UpdateGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateGroupError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::UpdateGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateIAMPolicyAssignmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateIAMPolicyAssignmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateIAMPolicyAssignmentError> for Error {
    fn from(err: crate::error::UpdateIAMPolicyAssignmentError) -> Self {
        match err {
            crate::error::UpdateIAMPolicyAssignmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateIAMPolicyAssignmentError::ConcurrentUpdatingException(inner) => {
                Error::ConcurrentUpdatingException(inner)
            }
            crate::error::UpdateIAMPolicyAssignmentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateIAMPolicyAssignmentError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateIAMPolicyAssignmentError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::UpdateIAMPolicyAssignmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateIAMPolicyAssignmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateIAMPolicyAssignmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateIpRestrictionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateIpRestrictionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateIpRestrictionError> for Error {
    fn from(err: crate::error::UpdateIpRestrictionError) -> Self {
        match err {
            crate::error::UpdateIpRestrictionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateIpRestrictionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateIpRestrictionError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateIpRestrictionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateIpRestrictionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateIpRestrictionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateIpRestrictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePublicSharingSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePublicSharingSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePublicSharingSettingsError> for Error {
    fn from(err: crate::error::UpdatePublicSharingSettingsError) -> Self {
        match err {
            crate::error::UpdatePublicSharingSettingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePublicSharingSettingsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdatePublicSharingSettingsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::UpdatePublicSharingSettingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePublicSharingSettingsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdatePublicSharingSettingsError::UnsupportedPricingPlanException(
                inner,
            ) => Error::UnsupportedPricingPlanException(inner),
            crate::error::UpdatePublicSharingSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTemplateError> for Error {
    fn from(err: crate::error::UpdateTemplateError) -> Self {
        match err {
            crate::error::UpdateTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateTemplateError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateTemplateError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateTemplateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateTemplateError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::UpdateTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateTemplateError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::UpdateTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTemplateAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateTemplateAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTemplateAliasError> for Error {
    fn from(err: crate::error::UpdateTemplateAliasError) -> Self {
        match err {
            crate::error::UpdateTemplateAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateTemplateAliasError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateTemplateAliasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateTemplateAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateTemplateAliasError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::UpdateTemplateAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTemplatePermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateTemplatePermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTemplatePermissionsError> for Error {
    fn from(err: crate::error::UpdateTemplatePermissionsError) -> Self {
        match err {
            crate::error::UpdateTemplatePermissionsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateTemplatePermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateTemplatePermissionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateTemplatePermissionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateTemplatePermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateTemplatePermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateTemplatePermissionsError::UnsupportedUserEditionException(
                inner,
            ) => Error::UnsupportedUserEditionException(inner),
            crate::error::UpdateTemplatePermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateThemeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateThemeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateThemeError> for Error {
    fn from(err: crate::error::UpdateThemeError) -> Self {
        match err {
            crate::error::UpdateThemeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateThemeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateThemeError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateThemeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateThemeError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::UpdateThemeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateThemeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateThemeError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::UpdateThemeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateThemeAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateThemeAliasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateThemeAliasError> for Error {
    fn from(err: crate::error::UpdateThemeAliasError) -> Self {
        match err {
            crate::error::UpdateThemeAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateThemeAliasError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateThemeAliasError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateThemeAliasError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::UpdateThemeAliasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateThemeAliasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateThemeAliasError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::UpdateThemeAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateThemePermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateThemePermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateThemePermissionsError> for Error {
    fn from(err: crate::error::UpdateThemePermissionsError) -> Self {
        match err {
            crate::error::UpdateThemePermissionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateThemePermissionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateThemePermissionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateThemePermissionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateThemePermissionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateThemePermissionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateThemePermissionsError::UnsupportedUserEditionException(inner) => {
                Error::UnsupportedUserEditionException(inner)
            }
            crate::error::UpdateThemePermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserError> for Error {
    fn from(err: crate::error::UpdateUserError) -> Self {
        match err {
            crate::error::UpdateUserError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateUserError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateUserError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateUserError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::UpdateUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::UpdateUserError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConcurrentUpdatingException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DomainNotWhitelistedException(e) => e.request_id(),
            Self::IdentityTypeNotSupportedException(e) => e.request_id(),
            Self::InternalFailureException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidParameterValueException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::PreconditionNotMetException(e) => e.request_id(),
            Self::QuickSightUserNotFoundException(e) => e.request_id(),
            Self::ResourceExistsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceUnavailableException(e) => e.request_id(),
            Self::SessionLifetimeInMinutesInvalidException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnsupportedPricingPlanException(e) => e.request_id(),
            Self::UnsupportedUserEditionException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
