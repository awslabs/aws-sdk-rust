// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The scope configuration for a <code>FilterGroup</code>.</p>
/// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FilterScopeConfiguration {
    /// <p>The configuration for applying a filter to specific sheets.</p>
    #[doc(hidden)]
    pub selected_sheets: std::option::Option<crate::types::SelectedSheetsFilterScopeConfiguration>,
}
impl FilterScopeConfiguration {
    /// <p>The configuration for applying a filter to specific sheets.</p>
    pub fn selected_sheets(
        &self,
    ) -> std::option::Option<&crate::types::SelectedSheetsFilterScopeConfiguration> {
        self.selected_sheets.as_ref()
    }
}
impl FilterScopeConfiguration {
    /// Creates a new builder-style object to manufacture [`FilterScopeConfiguration`](crate::types::FilterScopeConfiguration).
    pub fn builder() -> crate::types::builders::FilterScopeConfigurationBuilder {
        crate::types::builders::FilterScopeConfigurationBuilder::default()
    }
}

/// A builder for [`FilterScopeConfiguration`](crate::types::FilterScopeConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterScopeConfigurationBuilder {
    pub(crate) selected_sheets:
        std::option::Option<crate::types::SelectedSheetsFilterScopeConfiguration>,
}
impl FilterScopeConfigurationBuilder {
    /// <p>The configuration for applying a filter to specific sheets.</p>
    pub fn selected_sheets(
        mut self,
        input: crate::types::SelectedSheetsFilterScopeConfiguration,
    ) -> Self {
        self.selected_sheets = Some(input);
        self
    }
    /// <p>The configuration for applying a filter to specific sheets.</p>
    pub fn set_selected_sheets(
        mut self,
        input: std::option::Option<crate::types::SelectedSheetsFilterScopeConfiguration>,
    ) -> Self {
        self.selected_sheets = input;
        self
    }
    /// Consumes the builder and constructs a [`FilterScopeConfiguration`](crate::types::FilterScopeConfiguration).
    pub fn build(self) -> crate::types::FilterScopeConfiguration {
        crate::types::FilterScopeConfiguration {
            selected_sheets: self.selected_sheets,
        }
    }
}
