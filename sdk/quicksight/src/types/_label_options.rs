// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The share label options for the labels.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LabelOptions {
    /// <p>Determines whether or not the label is visible.</p>
    #[doc(hidden)]
    pub visibility: std::option::Option<crate::types::Visibility>,
    /// <p>The font configuration of the label.</p>
    #[doc(hidden)]
    pub font_configuration: std::option::Option<crate::types::FontConfiguration>,
    /// <p>The text for the label.</p>
    #[doc(hidden)]
    pub custom_label: std::option::Option<std::string::String>,
}
impl LabelOptions {
    /// <p>Determines whether or not the label is visible.</p>
    pub fn visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>The font configuration of the label.</p>
    pub fn font_configuration(&self) -> std::option::Option<&crate::types::FontConfiguration> {
        self.font_configuration.as_ref()
    }
    /// <p>The text for the label.</p>
    pub fn custom_label(&self) -> std::option::Option<&str> {
        self.custom_label.as_deref()
    }
}
impl LabelOptions {
    /// Creates a new builder-style object to manufacture [`LabelOptions`](crate::types::LabelOptions).
    pub fn builder() -> crate::types::builders::LabelOptionsBuilder {
        crate::types::builders::LabelOptionsBuilder::default()
    }
}

/// A builder for [`LabelOptions`](crate::types::LabelOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LabelOptionsBuilder {
    pub(crate) visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) font_configuration: std::option::Option<crate::types::FontConfiguration>,
    pub(crate) custom_label: std::option::Option<std::string::String>,
}
impl LabelOptionsBuilder {
    /// <p>Determines whether or not the label is visible.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = Some(input);
        self
    }
    /// <p>Determines whether or not the label is visible.</p>
    pub fn set_visibility(mut self, input: std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The font configuration of the label.</p>
    pub fn font_configuration(mut self, input: crate::types::FontConfiguration) -> Self {
        self.font_configuration = Some(input);
        self
    }
    /// <p>The font configuration of the label.</p>
    pub fn set_font_configuration(
        mut self,
        input: std::option::Option<crate::types::FontConfiguration>,
    ) -> Self {
        self.font_configuration = input;
        self
    }
    /// <p>The text for the label.</p>
    pub fn custom_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_label = Some(input.into());
        self
    }
    /// <p>The text for the label.</p>
    pub fn set_custom_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.custom_label = input;
        self
    }
    /// Consumes the builder and constructs a [`LabelOptions`](crate::types::LabelOptions).
    pub fn build(self) -> crate::types::LabelOptions {
        crate::types::LabelOptions {
            visibility: self.visibility,
            font_configuration: self.font_configuration,
            custom_label: self.custom_label,
        }
    }
}
