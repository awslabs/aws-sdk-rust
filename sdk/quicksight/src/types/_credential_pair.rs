// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The combination of user name and password that are used as credentials.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CredentialPair {
    /// <p>User name.</p>
    pub username: ::std::string::String,
    /// <p>Password.</p>
    pub password: ::std::string::String,
    /// <p>A set of alternate data source parameters that you want to share for these credentials. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the new data source with the existing credentials. If the <code>AlternateDataSourceParameters</code> list is null, the <code>DataSourceParameters</code> originally used with these <code>Credentials</code> is automatically allowed.</p>
    pub alternate_data_source_parameters: ::std::option::Option<::std::vec::Vec<crate::types::DataSourceParameters>>,
}
impl CredentialPair {
    /// <p>User name.</p>
    pub fn username(&self) -> &str {
        use std::ops::Deref;
        self.username.deref()
    }
    /// <p>Password.</p>
    pub fn password(&self) -> &str {
        use std::ops::Deref;
        self.password.deref()
    }
    /// <p>A set of alternate data source parameters that you want to share for these credentials. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the new data source with the existing credentials. If the <code>AlternateDataSourceParameters</code> list is null, the <code>DataSourceParameters</code> originally used with these <code>Credentials</code> is automatically allowed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.alternate_data_source_parameters.is_none()`.
    pub fn alternate_data_source_parameters(&self) -> &[crate::types::DataSourceParameters] {
        self.alternate_data_source_parameters.as_deref().unwrap_or_default()
    }
}
impl CredentialPair {
    /// Creates a new builder-style object to manufacture [`CredentialPair`](crate::types::CredentialPair).
    pub fn builder() -> crate::types::builders::CredentialPairBuilder {
        crate::types::builders::CredentialPairBuilder::default()
    }
}

/// A builder for [`CredentialPair`](crate::types::CredentialPair).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CredentialPairBuilder {
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) password: ::std::option::Option<::std::string::String>,
    pub(crate) alternate_data_source_parameters: ::std::option::Option<::std::vec::Vec<crate::types::DataSourceParameters>>,
}
impl CredentialPairBuilder {
    /// <p>User name.</p>
    /// This field is required.
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>User name.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>User name.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// <p>Password.</p>
    /// This field is required.
    pub fn password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Password.</p>
    pub fn set_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.password = input;
        self
    }
    /// <p>Password.</p>
    pub fn get_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.password
    }
    /// Appends an item to `alternate_data_source_parameters`.
    ///
    /// To override the contents of this collection use [`set_alternate_data_source_parameters`](Self::set_alternate_data_source_parameters).
    ///
    /// <p>A set of alternate data source parameters that you want to share for these credentials. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the new data source with the existing credentials. If the <code>AlternateDataSourceParameters</code> list is null, the <code>DataSourceParameters</code> originally used with these <code>Credentials</code> is automatically allowed.</p>
    pub fn alternate_data_source_parameters(mut self, input: crate::types::DataSourceParameters) -> Self {
        let mut v = self.alternate_data_source_parameters.unwrap_or_default();
        v.push(input);
        self.alternate_data_source_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A set of alternate data source parameters that you want to share for these credentials. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the new data source with the existing credentials. If the <code>AlternateDataSourceParameters</code> list is null, the <code>DataSourceParameters</code> originally used with these <code>Credentials</code> is automatically allowed.</p>
    pub fn set_alternate_data_source_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataSourceParameters>>) -> Self {
        self.alternate_data_source_parameters = input;
        self
    }
    /// <p>A set of alternate data source parameters that you want to share for these credentials. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the new data source with the existing credentials. If the <code>AlternateDataSourceParameters</code> list is null, the <code>DataSourceParameters</code> originally used with these <code>Credentials</code> is automatically allowed.</p>
    pub fn get_alternate_data_source_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataSourceParameters>> {
        &self.alternate_data_source_parameters
    }
    /// Consumes the builder and constructs a [`CredentialPair`](crate::types::CredentialPair).
    /// This method will fail if any of the following fields are not set:
    /// - [`username`](crate::types::builders::CredentialPairBuilder::username)
    /// - [`password`](crate::types::builders::CredentialPairBuilder::password)
    pub fn build(self) -> ::std::result::Result<crate::types::CredentialPair, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CredentialPair {
            username: self.username.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "username",
                    "username was not specified but it is required when building CredentialPair",
                )
            })?,
            password: self.password.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "password",
                    "password was not specified but it is required when building CredentialPair",
                )
            })?,
            alternate_data_source_parameters: self.alternate_data_source_parameters,
        })
    }
}
