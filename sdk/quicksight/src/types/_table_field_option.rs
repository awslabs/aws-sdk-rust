// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options for a table field.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TableFieldOption {
    /// <p>The field ID for a table field.</p>
    pub field_id: ::std::string::String,
    /// <p>The width for a table field.</p>
    pub width: ::std::option::Option<::std::string::String>,
    /// <p>The custom label for a table field.</p>
    pub custom_label: ::std::option::Option<::std::string::String>,
    /// <p>The visibility of a table field.</p>
    pub visibility: ::std::option::Option<crate::types::Visibility>,
    /// <p>The URL configuration for a table field.</p>
    pub url_styling: ::std::option::Option<crate::types::TableFieldUrlConfiguration>,
}
impl TableFieldOption {
    /// <p>The field ID for a table field.</p>
    pub fn field_id(&self) -> &str {
        use std::ops::Deref;
        self.field_id.deref()
    }
    /// <p>The width for a table field.</p>
    pub fn width(&self) -> ::std::option::Option<&str> {
        self.width.as_deref()
    }
    /// <p>The custom label for a table field.</p>
    pub fn custom_label(&self) -> ::std::option::Option<&str> {
        self.custom_label.as_deref()
    }
    /// <p>The visibility of a table field.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>The URL configuration for a table field.</p>
    pub fn url_styling(&self) -> ::std::option::Option<&crate::types::TableFieldUrlConfiguration> {
        self.url_styling.as_ref()
    }
}
impl TableFieldOption {
    /// Creates a new builder-style object to manufacture [`TableFieldOption`](crate::types::TableFieldOption).
    pub fn builder() -> crate::types::builders::TableFieldOptionBuilder {
        crate::types::builders::TableFieldOptionBuilder::default()
    }
}

/// A builder for [`TableFieldOption`](crate::types::TableFieldOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TableFieldOptionBuilder {
    pub(crate) field_id: ::std::option::Option<::std::string::String>,
    pub(crate) width: ::std::option::Option<::std::string::String>,
    pub(crate) custom_label: ::std::option::Option<::std::string::String>,
    pub(crate) visibility: ::std::option::Option<crate::types::Visibility>,
    pub(crate) url_styling: ::std::option::Option<crate::types::TableFieldUrlConfiguration>,
}
impl TableFieldOptionBuilder {
    /// <p>The field ID for a table field.</p>
    /// This field is required.
    pub fn field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field ID for a table field.</p>
    pub fn set_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The field ID for a table field.</p>
    pub fn get_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_id
    }
    /// <p>The width for a table field.</p>
    pub fn width(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.width = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The width for a table field.</p>
    pub fn set_width(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.width = input;
        self
    }
    /// <p>The width for a table field.</p>
    pub fn get_width(&self) -> &::std::option::Option<::std::string::String> {
        &self.width
    }
    /// <p>The custom label for a table field.</p>
    pub fn custom_label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The custom label for a table field.</p>
    pub fn set_custom_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_label = input;
        self
    }
    /// <p>The custom label for a table field.</p>
    pub fn get_custom_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_label
    }
    /// <p>The visibility of a table field.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visibility of a table field.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The visibility of a table field.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.visibility
    }
    /// <p>The URL configuration for a table field.</p>
    pub fn url_styling(mut self, input: crate::types::TableFieldUrlConfiguration) -> Self {
        self.url_styling = ::std::option::Option::Some(input);
        self
    }
    /// <p>The URL configuration for a table field.</p>
    pub fn set_url_styling(mut self, input: ::std::option::Option<crate::types::TableFieldUrlConfiguration>) -> Self {
        self.url_styling = input;
        self
    }
    /// <p>The URL configuration for a table field.</p>
    pub fn get_url_styling(&self) -> &::std::option::Option<crate::types::TableFieldUrlConfiguration> {
        &self.url_styling
    }
    /// Consumes the builder and constructs a [`TableFieldOption`](crate::types::TableFieldOption).
    /// This method will fail if any of the following fields are not set:
    /// - [`field_id`](crate::types::builders::TableFieldOptionBuilder::field_id)
    pub fn build(self) -> ::std::result::Result<crate::types::TableFieldOption, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TableFieldOption {
            field_id: self.field_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_id",
                    "field_id was not specified but it is required when building TableFieldOption",
                )
            })?,
            width: self.width,
            custom_label: self.custom_label,
            visibility: self.visibility,
            url_styling: self.url_styling,
        })
    }
}
