// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Formatting configuration for icon set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ConditionalFormattingIconSet {
    /// <p>The expression that determines the formatting configuration for the icon set.</p>
    pub expression: ::std::string::String,
    /// <p>Determines the icon set type.</p>
    pub icon_set_type: ::std::option::Option<crate::types::ConditionalFormattingIconSetType>,
}
impl ConditionalFormattingIconSet {
    /// <p>The expression that determines the formatting configuration for the icon set.</p>
    pub fn expression(&self) -> &str {
        use std::ops::Deref;
        self.expression.deref()
    }
    /// <p>Determines the icon set type.</p>
    pub fn icon_set_type(&self) -> ::std::option::Option<&crate::types::ConditionalFormattingIconSetType> {
        self.icon_set_type.as_ref()
    }
}
impl ::std::fmt::Debug for ConditionalFormattingIconSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ConditionalFormattingIconSet");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("icon_set_type", &self.icon_set_type);
        formatter.finish()
    }
}
impl ConditionalFormattingIconSet {
    /// Creates a new builder-style object to manufacture [`ConditionalFormattingIconSet`](crate::types::ConditionalFormattingIconSet).
    pub fn builder() -> crate::types::builders::ConditionalFormattingIconSetBuilder {
        crate::types::builders::ConditionalFormattingIconSetBuilder::default()
    }
}

/// A builder for [`ConditionalFormattingIconSet`](crate::types::ConditionalFormattingIconSet).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ConditionalFormattingIconSetBuilder {
    pub(crate) expression: ::std::option::Option<::std::string::String>,
    pub(crate) icon_set_type: ::std::option::Option<crate::types::ConditionalFormattingIconSetType>,
}
impl ConditionalFormattingIconSetBuilder {
    /// <p>The expression that determines the formatting configuration for the icon set.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expression that determines the formatting configuration for the icon set.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The expression that determines the formatting configuration for the icon set.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// <p>Determines the icon set type.</p>
    pub fn icon_set_type(mut self, input: crate::types::ConditionalFormattingIconSetType) -> Self {
        self.icon_set_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the icon set type.</p>
    pub fn set_icon_set_type(mut self, input: ::std::option::Option<crate::types::ConditionalFormattingIconSetType>) -> Self {
        self.icon_set_type = input;
        self
    }
    /// <p>Determines the icon set type.</p>
    pub fn get_icon_set_type(&self) -> &::std::option::Option<crate::types::ConditionalFormattingIconSetType> {
        &self.icon_set_type
    }
    /// Consumes the builder and constructs a [`ConditionalFormattingIconSet`](crate::types::ConditionalFormattingIconSet).
    /// This method will fail if any of the following fields are not set:
    /// - [`expression`](crate::types::builders::ConditionalFormattingIconSetBuilder::expression)
    pub fn build(self) -> ::std::result::Result<crate::types::ConditionalFormattingIconSet, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConditionalFormattingIconSet {
            expression: self.expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expression",
                    "expression was not specified but it is required when building ConditionalFormattingIconSet",
                )
            })?,
            icon_set_type: self.icon_set_type,
        })
    }
}
impl ::std::fmt::Debug for ConditionalFormattingIconSetBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ConditionalFormattingIconSetBuilder");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("icon_set_type", &self.icon_set_type);
        formatter.finish()
    }
}
