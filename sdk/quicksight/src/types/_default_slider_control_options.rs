// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The default options that correspond to the <code>Slider</code> filter control type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefaultSliderControlOptions {
    /// <p>The display options of a control.</p>
    pub display_options: ::std::option::Option<crate::types::SliderControlDisplayOptions>,
    /// <p>The type of the <code>DefaultSliderControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE_POINT</code>: Filter against(equals) a single data point.</p></li>
    /// <li>
    /// <p><code>RANGE</code>: Filter data that is in a specified range.</p></li>
    /// </ul>
    pub r#type: ::std::option::Option<crate::types::SheetControlSliderType>,
    /// <p>The larger value that is displayed at the right of the slider.</p>
    pub maximum_value: f64,
    /// <p>The smaller value that is displayed at the left of the slider.</p>
    pub minimum_value: f64,
    /// <p>The number of increments that the slider bar is divided into.</p>
    pub step_size: f64,
}
impl DefaultSliderControlOptions {
    /// <p>The display options of a control.</p>
    pub fn display_options(&self) -> ::std::option::Option<&crate::types::SliderControlDisplayOptions> {
        self.display_options.as_ref()
    }
    /// <p>The type of the <code>DefaultSliderControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE_POINT</code>: Filter against(equals) a single data point.</p></li>
    /// <li>
    /// <p><code>RANGE</code>: Filter data that is in a specified range.</p></li>
    /// </ul>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::SheetControlSliderType> {
        self.r#type.as_ref()
    }
    /// <p>The larger value that is displayed at the right of the slider.</p>
    pub fn maximum_value(&self) -> f64 {
        self.maximum_value
    }
    /// <p>The smaller value that is displayed at the left of the slider.</p>
    pub fn minimum_value(&self) -> f64 {
        self.minimum_value
    }
    /// <p>The number of increments that the slider bar is divided into.</p>
    pub fn step_size(&self) -> f64 {
        self.step_size
    }
}
impl DefaultSliderControlOptions {
    /// Creates a new builder-style object to manufacture [`DefaultSliderControlOptions`](crate::types::DefaultSliderControlOptions).
    pub fn builder() -> crate::types::builders::DefaultSliderControlOptionsBuilder {
        crate::types::builders::DefaultSliderControlOptionsBuilder::default()
    }
}

/// A builder for [`DefaultSliderControlOptions`](crate::types::DefaultSliderControlOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefaultSliderControlOptionsBuilder {
    pub(crate) display_options: ::std::option::Option<crate::types::SliderControlDisplayOptions>,
    pub(crate) r#type: ::std::option::Option<crate::types::SheetControlSliderType>,
    pub(crate) maximum_value: ::std::option::Option<f64>,
    pub(crate) minimum_value: ::std::option::Option<f64>,
    pub(crate) step_size: ::std::option::Option<f64>,
}
impl DefaultSliderControlOptionsBuilder {
    /// <p>The display options of a control.</p>
    pub fn display_options(mut self, input: crate::types::SliderControlDisplayOptions) -> Self {
        self.display_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The display options of a control.</p>
    pub fn set_display_options(mut self, input: ::std::option::Option<crate::types::SliderControlDisplayOptions>) -> Self {
        self.display_options = input;
        self
    }
    /// <p>The display options of a control.</p>
    pub fn get_display_options(&self) -> &::std::option::Option<crate::types::SliderControlDisplayOptions> {
        &self.display_options
    }
    /// <p>The type of the <code>DefaultSliderControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE_POINT</code>: Filter against(equals) a single data point.</p></li>
    /// <li>
    /// <p><code>RANGE</code>: Filter data that is in a specified range.</p></li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::SheetControlSliderType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the <code>DefaultSliderControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE_POINT</code>: Filter against(equals) a single data point.</p></li>
    /// <li>
    /// <p><code>RANGE</code>: Filter data that is in a specified range.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SheetControlSliderType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the <code>DefaultSliderControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE_POINT</code>: Filter against(equals) a single data point.</p></li>
    /// <li>
    /// <p><code>RANGE</code>: Filter data that is in a specified range.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SheetControlSliderType> {
        &self.r#type
    }
    /// <p>The larger value that is displayed at the right of the slider.</p>
    /// This field is required.
    pub fn maximum_value(mut self, input: f64) -> Self {
        self.maximum_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The larger value that is displayed at the right of the slider.</p>
    pub fn set_maximum_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.maximum_value = input;
        self
    }
    /// <p>The larger value that is displayed at the right of the slider.</p>
    pub fn get_maximum_value(&self) -> &::std::option::Option<f64> {
        &self.maximum_value
    }
    /// <p>The smaller value that is displayed at the left of the slider.</p>
    /// This field is required.
    pub fn minimum_value(mut self, input: f64) -> Self {
        self.minimum_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The smaller value that is displayed at the left of the slider.</p>
    pub fn set_minimum_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.minimum_value = input;
        self
    }
    /// <p>The smaller value that is displayed at the left of the slider.</p>
    pub fn get_minimum_value(&self) -> &::std::option::Option<f64> {
        &self.minimum_value
    }
    /// <p>The number of increments that the slider bar is divided into.</p>
    /// This field is required.
    pub fn step_size(mut self, input: f64) -> Self {
        self.step_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of increments that the slider bar is divided into.</p>
    pub fn set_step_size(mut self, input: ::std::option::Option<f64>) -> Self {
        self.step_size = input;
        self
    }
    /// <p>The number of increments that the slider bar is divided into.</p>
    pub fn get_step_size(&self) -> &::std::option::Option<f64> {
        &self.step_size
    }
    /// Consumes the builder and constructs a [`DefaultSliderControlOptions`](crate::types::DefaultSliderControlOptions).
    pub fn build(self) -> crate::types::DefaultSliderControlOptions {
        crate::types::DefaultSliderControlOptions {
            display_options: self.display_options,
            r#type: self.r#type,
            maximum_value: self.maximum_value.unwrap_or_default(),
            minimum_value: self.minimum_value.unwrap_or_default(),
            step_size: self.step_size.unwrap_or_default(),
        }
    }
}
