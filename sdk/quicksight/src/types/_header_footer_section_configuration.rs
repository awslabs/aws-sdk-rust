// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of a header or footer section.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HeaderFooterSectionConfiguration {
    /// <p>The unique identifier of the header or footer section.</p>
    #[doc(hidden)]
    pub section_id: std::option::Option<std::string::String>,
    /// <p>The layout configuration of the header or footer section.</p>
    #[doc(hidden)]
    pub layout: std::option::Option<crate::types::SectionLayoutConfiguration>,
    /// <p>The style options of a header or footer section.</p>
    #[doc(hidden)]
    pub style: std::option::Option<crate::types::SectionStyle>,
}
impl HeaderFooterSectionConfiguration {
    /// <p>The unique identifier of the header or footer section.</p>
    pub fn section_id(&self) -> std::option::Option<&str> {
        self.section_id.as_deref()
    }
    /// <p>The layout configuration of the header or footer section.</p>
    pub fn layout(&self) -> std::option::Option<&crate::types::SectionLayoutConfiguration> {
        self.layout.as_ref()
    }
    /// <p>The style options of a header or footer section.</p>
    pub fn style(&self) -> std::option::Option<&crate::types::SectionStyle> {
        self.style.as_ref()
    }
}
impl HeaderFooterSectionConfiguration {
    /// Creates a new builder-style object to manufacture [`HeaderFooterSectionConfiguration`](crate::types::HeaderFooterSectionConfiguration).
    pub fn builder() -> crate::types::builders::HeaderFooterSectionConfigurationBuilder {
        crate::types::builders::HeaderFooterSectionConfigurationBuilder::default()
    }
}

/// A builder for [`HeaderFooterSectionConfiguration`](crate::types::HeaderFooterSectionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HeaderFooterSectionConfigurationBuilder {
    pub(crate) section_id: std::option::Option<std::string::String>,
    pub(crate) layout: std::option::Option<crate::types::SectionLayoutConfiguration>,
    pub(crate) style: std::option::Option<crate::types::SectionStyle>,
}
impl HeaderFooterSectionConfigurationBuilder {
    /// <p>The unique identifier of the header or footer section.</p>
    pub fn section_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.section_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the header or footer section.</p>
    pub fn set_section_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.section_id = input;
        self
    }
    /// <p>The layout configuration of the header or footer section.</p>
    pub fn layout(mut self, input: crate::types::SectionLayoutConfiguration) -> Self {
        self.layout = Some(input);
        self
    }
    /// <p>The layout configuration of the header or footer section.</p>
    pub fn set_layout(
        mut self,
        input: std::option::Option<crate::types::SectionLayoutConfiguration>,
    ) -> Self {
        self.layout = input;
        self
    }
    /// <p>The style options of a header or footer section.</p>
    pub fn style(mut self, input: crate::types::SectionStyle) -> Self {
        self.style = Some(input);
        self
    }
    /// <p>The style options of a header or footer section.</p>
    pub fn set_style(mut self, input: std::option::Option<crate::types::SectionStyle>) -> Self {
        self.style = input;
        self
    }
    /// Consumes the builder and constructs a [`HeaderFooterSectionConfiguration`](crate::types::HeaderFooterSectionConfiguration).
    pub fn build(self) -> crate::types::HeaderFooterSectionConfiguration {
        crate::types::HeaderFooterSectionConfiguration {
            section_id: self.section_id,
            layout: self.layout,
            style: self.style,
        }
    }
}
