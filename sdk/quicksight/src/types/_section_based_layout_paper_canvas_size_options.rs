// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options for a paper canvas of a section-based layout.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SectionBasedLayoutPaperCanvasSizeOptions {
    /// <p>The paper size that is used to define canvas dimensions.</p>
    #[doc(hidden)]
    pub paper_size: std::option::Option<crate::types::PaperSize>,
    /// <p>The paper orientation that is used to define canvas dimensions. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>PORTRAIT</p> </li>
    /// <li> <p>LANDSCAPE</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub paper_orientation: std::option::Option<crate::types::PaperOrientation>,
    /// <p>Defines the spacing between the canvas content and the top, bottom, left, and right edges.</p>
    #[doc(hidden)]
    pub paper_margin: std::option::Option<crate::types::Spacing>,
}
impl SectionBasedLayoutPaperCanvasSizeOptions {
    /// <p>The paper size that is used to define canvas dimensions.</p>
    pub fn paper_size(&self) -> std::option::Option<&crate::types::PaperSize> {
        self.paper_size.as_ref()
    }
    /// <p>The paper orientation that is used to define canvas dimensions. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>PORTRAIT</p> </li>
    /// <li> <p>LANDSCAPE</p> </li>
    /// </ul>
    pub fn paper_orientation(&self) -> std::option::Option<&crate::types::PaperOrientation> {
        self.paper_orientation.as_ref()
    }
    /// <p>Defines the spacing between the canvas content and the top, bottom, left, and right edges.</p>
    pub fn paper_margin(&self) -> std::option::Option<&crate::types::Spacing> {
        self.paper_margin.as_ref()
    }
}
impl SectionBasedLayoutPaperCanvasSizeOptions {
    /// Creates a new builder-style object to manufacture [`SectionBasedLayoutPaperCanvasSizeOptions`](crate::types::SectionBasedLayoutPaperCanvasSizeOptions).
    pub fn builder() -> crate::types::builders::SectionBasedLayoutPaperCanvasSizeOptionsBuilder {
        crate::types::builders::SectionBasedLayoutPaperCanvasSizeOptionsBuilder::default()
    }
}

/// A builder for [`SectionBasedLayoutPaperCanvasSizeOptions`](crate::types::SectionBasedLayoutPaperCanvasSizeOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SectionBasedLayoutPaperCanvasSizeOptionsBuilder {
    pub(crate) paper_size: std::option::Option<crate::types::PaperSize>,
    pub(crate) paper_orientation: std::option::Option<crate::types::PaperOrientation>,
    pub(crate) paper_margin: std::option::Option<crate::types::Spacing>,
}
impl SectionBasedLayoutPaperCanvasSizeOptionsBuilder {
    /// <p>The paper size that is used to define canvas dimensions.</p>
    pub fn paper_size(mut self, input: crate::types::PaperSize) -> Self {
        self.paper_size = Some(input);
        self
    }
    /// <p>The paper size that is used to define canvas dimensions.</p>
    pub fn set_paper_size(mut self, input: std::option::Option<crate::types::PaperSize>) -> Self {
        self.paper_size = input;
        self
    }
    /// <p>The paper orientation that is used to define canvas dimensions. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>PORTRAIT</p> </li>
    /// <li> <p>LANDSCAPE</p> </li>
    /// </ul>
    pub fn paper_orientation(mut self, input: crate::types::PaperOrientation) -> Self {
        self.paper_orientation = Some(input);
        self
    }
    /// <p>The paper orientation that is used to define canvas dimensions. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>PORTRAIT</p> </li>
    /// <li> <p>LANDSCAPE</p> </li>
    /// </ul>
    pub fn set_paper_orientation(
        mut self,
        input: std::option::Option<crate::types::PaperOrientation>,
    ) -> Self {
        self.paper_orientation = input;
        self
    }
    /// <p>Defines the spacing between the canvas content and the top, bottom, left, and right edges.</p>
    pub fn paper_margin(mut self, input: crate::types::Spacing) -> Self {
        self.paper_margin = Some(input);
        self
    }
    /// <p>Defines the spacing between the canvas content and the top, bottom, left, and right edges.</p>
    pub fn set_paper_margin(mut self, input: std::option::Option<crate::types::Spacing>) -> Self {
        self.paper_margin = input;
        self
    }
    /// Consumes the builder and constructs a [`SectionBasedLayoutPaperCanvasSizeOptions`](crate::types::SectionBasedLayoutPaperCanvasSizeOptions).
    pub fn build(self) -> crate::types::SectionBasedLayoutPaperCanvasSizeOptions {
        crate::types::SectionBasedLayoutPaperCanvasSizeOptions {
            paper_size: self.paper_size,
            paper_orientation: self.paper_orientation,
            paper_margin: self.paper_margin,
        }
    }
}
