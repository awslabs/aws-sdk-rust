// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The range options for the data zoom scroll bar.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VisibleRangeOptions {
    /// <p>The percent range in the visible range.</p>
    #[doc(hidden)]
    pub percent_range: std::option::Option<crate::types::PercentVisibleRange>,
}
impl VisibleRangeOptions {
    /// <p>The percent range in the visible range.</p>
    pub fn percent_range(&self) -> std::option::Option<&crate::types::PercentVisibleRange> {
        self.percent_range.as_ref()
    }
}
impl VisibleRangeOptions {
    /// Creates a new builder-style object to manufacture [`VisibleRangeOptions`](crate::types::VisibleRangeOptions).
    pub fn builder() -> crate::types::builders::VisibleRangeOptionsBuilder {
        crate::types::builders::VisibleRangeOptionsBuilder::default()
    }
}

/// A builder for [`VisibleRangeOptions`](crate::types::VisibleRangeOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VisibleRangeOptionsBuilder {
    pub(crate) percent_range: std::option::Option<crate::types::PercentVisibleRange>,
}
impl VisibleRangeOptionsBuilder {
    /// <p>The percent range in the visible range.</p>
    pub fn percent_range(mut self, input: crate::types::PercentVisibleRange) -> Self {
        self.percent_range = Some(input);
        self
    }
    /// <p>The percent range in the visible range.</p>
    pub fn set_percent_range(
        mut self,
        input: std::option::Option<crate::types::PercentVisibleRange>,
    ) -> Self {
        self.percent_range = input;
        self
    }
    /// Consumes the builder and constructs a [`VisibleRangeOptions`](crate::types::VisibleRangeOptions).
    pub fn build(self) -> crate::types::VisibleRangeOptions {
        crate::types::VisibleRangeOptions {
            percent_range: self.percent_range,
        }
    }
}
