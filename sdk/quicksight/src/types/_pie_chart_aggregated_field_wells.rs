// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The field well configuration of a pie chart.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PieChartAggregatedFieldWells {
    /// <p>The category (group/color) field wells of a pie chart.</p>
    #[doc(hidden)]
    pub category: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    /// <p>The value field wells of a pie chart. Values are aggregated based on categories.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<crate::types::MeasureField>>,
    /// <p>The small multiples field well of a pie chart.</p>
    #[doc(hidden)]
    pub small_multiples: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
}
impl PieChartAggregatedFieldWells {
    /// <p>The category (group/color) field wells of a pie chart.</p>
    pub fn category(&self) -> std::option::Option<&[crate::types::DimensionField]> {
        self.category.as_deref()
    }
    /// <p>The value field wells of a pie chart. Values are aggregated based on categories.</p>
    pub fn values(&self) -> std::option::Option<&[crate::types::MeasureField]> {
        self.values.as_deref()
    }
    /// <p>The small multiples field well of a pie chart.</p>
    pub fn small_multiples(&self) -> std::option::Option<&[crate::types::DimensionField]> {
        self.small_multiples.as_deref()
    }
}
impl PieChartAggregatedFieldWells {
    /// Creates a new builder-style object to manufacture [`PieChartAggregatedFieldWells`](crate::types::PieChartAggregatedFieldWells).
    pub fn builder() -> crate::types::builders::PieChartAggregatedFieldWellsBuilder {
        crate::types::builders::PieChartAggregatedFieldWellsBuilder::default()
    }
}

/// A builder for [`PieChartAggregatedFieldWells`](crate::types::PieChartAggregatedFieldWells).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PieChartAggregatedFieldWellsBuilder {
    pub(crate) category: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    pub(crate) values: std::option::Option<std::vec::Vec<crate::types::MeasureField>>,
    pub(crate) small_multiples: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
}
impl PieChartAggregatedFieldWellsBuilder {
    /// Appends an item to `category`.
    ///
    /// To override the contents of this collection use [`set_category`](Self::set_category).
    ///
    /// <p>The category (group/color) field wells of a pie chart.</p>
    pub fn category(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.category.unwrap_or_default();
        v.push(input);
        self.category = Some(v);
        self
    }
    /// <p>The category (group/color) field wells of a pie chart.</p>
    pub fn set_category(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    ) -> Self {
        self.category = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The value field wells of a pie chart. Values are aggregated based on categories.</p>
    pub fn values(mut self, input: crate::types::MeasureField) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = Some(v);
        self
    }
    /// <p>The value field wells of a pie chart. Values are aggregated based on categories.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MeasureField>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Appends an item to `small_multiples`.
    ///
    /// To override the contents of this collection use [`set_small_multiples`](Self::set_small_multiples).
    ///
    /// <p>The small multiples field well of a pie chart.</p>
    pub fn small_multiples(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.small_multiples.unwrap_or_default();
        v.push(input);
        self.small_multiples = Some(v);
        self
    }
    /// <p>The small multiples field well of a pie chart.</p>
    pub fn set_small_multiples(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    ) -> Self {
        self.small_multiples = input;
        self
    }
    /// Consumes the builder and constructs a [`PieChartAggregatedFieldWells`](crate::types::PieChartAggregatedFieldWells).
    pub fn build(self) -> crate::types::PieChartAggregatedFieldWells {
        crate::types::PieChartAggregatedFieldWells {
            category: self.category,
            values: self.values,
            small_multiples: self.small_multiples,
        }
    }
}
