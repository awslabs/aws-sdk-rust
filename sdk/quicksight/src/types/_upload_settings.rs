// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the format for a source file or files.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UploadSettings {
    /// <p>File format.</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::FileFormat>,
    /// <p>A row number to start reading data from.</p>
    #[doc(hidden)]
    pub start_from_row: std::option::Option<i32>,
    /// <p>Whether the file has a header row, or the files each have a header row.</p>
    #[doc(hidden)]
    pub contains_header: std::option::Option<bool>,
    /// <p>Text qualifier.</p>
    #[doc(hidden)]
    pub text_qualifier: std::option::Option<crate::types::TextQualifier>,
    /// <p>The delimiter between values in the file.</p>
    #[doc(hidden)]
    pub delimiter: std::option::Option<std::string::String>,
}
impl UploadSettings {
    /// <p>File format.</p>
    pub fn format(&self) -> std::option::Option<&crate::types::FileFormat> {
        self.format.as_ref()
    }
    /// <p>A row number to start reading data from.</p>
    pub fn start_from_row(&self) -> std::option::Option<i32> {
        self.start_from_row
    }
    /// <p>Whether the file has a header row, or the files each have a header row.</p>
    pub fn contains_header(&self) -> std::option::Option<bool> {
        self.contains_header
    }
    /// <p>Text qualifier.</p>
    pub fn text_qualifier(&self) -> std::option::Option<&crate::types::TextQualifier> {
        self.text_qualifier.as_ref()
    }
    /// <p>The delimiter between values in the file.</p>
    pub fn delimiter(&self) -> std::option::Option<&str> {
        self.delimiter.as_deref()
    }
}
impl UploadSettings {
    /// Creates a new builder-style object to manufacture [`UploadSettings`](crate::types::UploadSettings).
    pub fn builder() -> crate::types::builders::UploadSettingsBuilder {
        crate::types::builders::UploadSettingsBuilder::default()
    }
}

/// A builder for [`UploadSettings`](crate::types::UploadSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UploadSettingsBuilder {
    pub(crate) format: std::option::Option<crate::types::FileFormat>,
    pub(crate) start_from_row: std::option::Option<i32>,
    pub(crate) contains_header: std::option::Option<bool>,
    pub(crate) text_qualifier: std::option::Option<crate::types::TextQualifier>,
    pub(crate) delimiter: std::option::Option<std::string::String>,
}
impl UploadSettingsBuilder {
    /// <p>File format.</p>
    pub fn format(mut self, input: crate::types::FileFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>File format.</p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::FileFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>A row number to start reading data from.</p>
    pub fn start_from_row(mut self, input: i32) -> Self {
        self.start_from_row = Some(input);
        self
    }
    /// <p>A row number to start reading data from.</p>
    pub fn set_start_from_row(mut self, input: std::option::Option<i32>) -> Self {
        self.start_from_row = input;
        self
    }
    /// <p>Whether the file has a header row, or the files each have a header row.</p>
    pub fn contains_header(mut self, input: bool) -> Self {
        self.contains_header = Some(input);
        self
    }
    /// <p>Whether the file has a header row, or the files each have a header row.</p>
    pub fn set_contains_header(mut self, input: std::option::Option<bool>) -> Self {
        self.contains_header = input;
        self
    }
    /// <p>Text qualifier.</p>
    pub fn text_qualifier(mut self, input: crate::types::TextQualifier) -> Self {
        self.text_qualifier = Some(input);
        self
    }
    /// <p>Text qualifier.</p>
    pub fn set_text_qualifier(
        mut self,
        input: std::option::Option<crate::types::TextQualifier>,
    ) -> Self {
        self.text_qualifier = input;
        self
    }
    /// <p>The delimiter between values in the file.</p>
    pub fn delimiter(mut self, input: impl Into<std::string::String>) -> Self {
        self.delimiter = Some(input.into());
        self
    }
    /// <p>The delimiter between values in the file.</p>
    pub fn set_delimiter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.delimiter = input;
        self
    }
    /// Consumes the builder and constructs a [`UploadSettings`](crate::types::UploadSettings).
    pub fn build(self) -> crate::types::UploadSettings {
        crate::types::UploadSettings {
            format: self.format,
            start_from_row: self.start_from_row,
            contains_header: self.contains_header,
            text_qualifier: self.text_qualifier,
            delimiter: self.delimiter,
        }
    }
}
