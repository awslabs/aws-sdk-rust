// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that represents a dataset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatasetMetadata {
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    pub dataset_arn: ::std::string::String,
    /// <p>The name of the dataset.</p>
    pub dataset_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the dataset.</p>
    pub dataset_description: ::std::option::Option<::std::string::String>,
    /// <p>The definition of a data aggregation.</p>
    pub data_aggregation: ::std::option::Option<crate::types::DataAggregation>,
    /// <p>The list of filter definitions.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::TopicFilter>>,
    /// <p>The list of column definitions.</p>
    pub columns: ::std::option::Option<::std::vec::Vec<crate::types::TopicColumn>>,
    /// <p>The list of calculated field definitions.</p>
    pub calculated_fields: ::std::option::Option<::std::vec::Vec<crate::types::TopicCalculatedField>>,
    /// <p>The list of named entities definitions.</p>
    pub named_entities: ::std::option::Option<::std::vec::Vec<crate::types::TopicNamedEntity>>,
}
impl DatasetMetadata {
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    pub fn dataset_arn(&self) -> &str {
        use std::ops::Deref;
        self.dataset_arn.deref()
    }
    /// <p>The name of the dataset.</p>
    pub fn dataset_name(&self) -> ::std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>The description of the dataset.</p>
    pub fn dataset_description(&self) -> ::std::option::Option<&str> {
        self.dataset_description.as_deref()
    }
    /// <p>The definition of a data aggregation.</p>
    pub fn data_aggregation(&self) -> ::std::option::Option<&crate::types::DataAggregation> {
        self.data_aggregation.as_ref()
    }
    /// <p>The list of filter definitions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::TopicFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of column definitions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.columns.is_none()`.
    pub fn columns(&self) -> &[crate::types::TopicColumn] {
        self.columns.as_deref().unwrap_or_default()
    }
    /// <p>The list of calculated field definitions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.calculated_fields.is_none()`.
    pub fn calculated_fields(&self) -> &[crate::types::TopicCalculatedField] {
        self.calculated_fields.as_deref().unwrap_or_default()
    }
    /// <p>The list of named entities definitions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.named_entities.is_none()`.
    pub fn named_entities(&self) -> &[crate::types::TopicNamedEntity] {
        self.named_entities.as_deref().unwrap_or_default()
    }
}
impl DatasetMetadata {
    /// Creates a new builder-style object to manufacture [`DatasetMetadata`](crate::types::DatasetMetadata).
    pub fn builder() -> crate::types::builders::DatasetMetadataBuilder {
        crate::types::builders::DatasetMetadataBuilder::default()
    }
}

/// A builder for [`DatasetMetadata`](crate::types::DatasetMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatasetMetadataBuilder {
    pub(crate) dataset_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_name: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_description: ::std::option::Option<::std::string::String>,
    pub(crate) data_aggregation: ::std::option::Option<crate::types::DataAggregation>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::TopicFilter>>,
    pub(crate) columns: ::std::option::Option<::std::vec::Vec<crate::types::TopicColumn>>,
    pub(crate) calculated_fields: ::std::option::Option<::std::vec::Vec<crate::types::TopicCalculatedField>>,
    pub(crate) named_entities: ::std::option::Option<::std::vec::Vec<crate::types::TopicNamedEntity>>,
}
impl DatasetMetadataBuilder {
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    /// This field is required.
    pub fn dataset_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    pub fn set_dataset_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    pub fn get_dataset_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_arn
    }
    /// <p>The name of the dataset.</p>
    pub fn dataset_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn set_dataset_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn get_dataset_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_name
    }
    /// <p>The description of the dataset.</p>
    pub fn dataset_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the dataset.</p>
    pub fn set_dataset_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_description = input;
        self
    }
    /// <p>The description of the dataset.</p>
    pub fn get_dataset_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_description
    }
    /// <p>The definition of a data aggregation.</p>
    pub fn data_aggregation(mut self, input: crate::types::DataAggregation) -> Self {
        self.data_aggregation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of a data aggregation.</p>
    pub fn set_data_aggregation(mut self, input: ::std::option::Option<crate::types::DataAggregation>) -> Self {
        self.data_aggregation = input;
        self
    }
    /// <p>The definition of a data aggregation.</p>
    pub fn get_data_aggregation(&self) -> &::std::option::Option<crate::types::DataAggregation> {
        &self.data_aggregation
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The list of filter definitions.</p>
    pub fn filters(mut self, input: crate::types::TopicFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of filter definitions.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TopicFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The list of filter definitions.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicFilter>> {
        &self.filters
    }
    /// Appends an item to `columns`.
    ///
    /// To override the contents of this collection use [`set_columns`](Self::set_columns).
    ///
    /// <p>The list of column definitions.</p>
    pub fn columns(mut self, input: crate::types::TopicColumn) -> Self {
        let mut v = self.columns.unwrap_or_default();
        v.push(input);
        self.columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of column definitions.</p>
    pub fn set_columns(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TopicColumn>>) -> Self {
        self.columns = input;
        self
    }
    /// <p>The list of column definitions.</p>
    pub fn get_columns(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicColumn>> {
        &self.columns
    }
    /// Appends an item to `calculated_fields`.
    ///
    /// To override the contents of this collection use [`set_calculated_fields`](Self::set_calculated_fields).
    ///
    /// <p>The list of calculated field definitions.</p>
    pub fn calculated_fields(mut self, input: crate::types::TopicCalculatedField) -> Self {
        let mut v = self.calculated_fields.unwrap_or_default();
        v.push(input);
        self.calculated_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of calculated field definitions.</p>
    pub fn set_calculated_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TopicCalculatedField>>) -> Self {
        self.calculated_fields = input;
        self
    }
    /// <p>The list of calculated field definitions.</p>
    pub fn get_calculated_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicCalculatedField>> {
        &self.calculated_fields
    }
    /// Appends an item to `named_entities`.
    ///
    /// To override the contents of this collection use [`set_named_entities`](Self::set_named_entities).
    ///
    /// <p>The list of named entities definitions.</p>
    pub fn named_entities(mut self, input: crate::types::TopicNamedEntity) -> Self {
        let mut v = self.named_entities.unwrap_or_default();
        v.push(input);
        self.named_entities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of named entities definitions.</p>
    pub fn set_named_entities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TopicNamedEntity>>) -> Self {
        self.named_entities = input;
        self
    }
    /// <p>The list of named entities definitions.</p>
    pub fn get_named_entities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicNamedEntity>> {
        &self.named_entities
    }
    /// Consumes the builder and constructs a [`DatasetMetadata`](crate::types::DatasetMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`dataset_arn`](crate::types::builders::DatasetMetadataBuilder::dataset_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::DatasetMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DatasetMetadata {
            dataset_arn: self.dataset_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dataset_arn",
                    "dataset_arn was not specified but it is required when building DatasetMetadata",
                )
            })?,
            dataset_name: self.dataset_name,
            dataset_description: self.dataset_description,
            data_aggregation: self.data_aggregation,
            filters: self.filters,
            columns: self.columns,
            calculated_fields: self.calculated_fields,
            named_entities: self.named_entities,
        })
    }
}
