// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The tooltip item for the columns that are not part of a field well.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ColumnTooltipItem {
    /// <p>The target column of the tooltip item.</p>
    #[doc(hidden)]
    pub column: std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The label of the tooltip item.</p>
    #[doc(hidden)]
    pub label: std::option::Option<std::string::String>,
    /// <p>The visibility of the tooltip item.</p>
    #[doc(hidden)]
    pub visibility: std::option::Option<crate::types::Visibility>,
    /// <p>The aggregation function of the column tooltip item.</p>
    #[doc(hidden)]
    pub aggregation: std::option::Option<crate::types::AggregationFunction>,
}
impl ColumnTooltipItem {
    /// <p>The target column of the tooltip item.</p>
    pub fn column(&self) -> std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>The label of the tooltip item.</p>
    pub fn label(&self) -> std::option::Option<&str> {
        self.label.as_deref()
    }
    /// <p>The visibility of the tooltip item.</p>
    pub fn visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>The aggregation function of the column tooltip item.</p>
    pub fn aggregation(&self) -> std::option::Option<&crate::types::AggregationFunction> {
        self.aggregation.as_ref()
    }
}
impl ColumnTooltipItem {
    /// Creates a new builder-style object to manufacture [`ColumnTooltipItem`](crate::types::ColumnTooltipItem).
    pub fn builder() -> crate::types::builders::ColumnTooltipItemBuilder {
        crate::types::builders::ColumnTooltipItemBuilder::default()
    }
}

/// A builder for [`ColumnTooltipItem`](crate::types::ColumnTooltipItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ColumnTooltipItemBuilder {
    pub(crate) column: std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) label: std::option::Option<std::string::String>,
    pub(crate) visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) aggregation: std::option::Option<crate::types::AggregationFunction>,
}
impl ColumnTooltipItemBuilder {
    /// <p>The target column of the tooltip item.</p>
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = Some(input);
        self
    }
    /// <p>The target column of the tooltip item.</p>
    pub fn set_column(
        mut self,
        input: std::option::Option<crate::types::ColumnIdentifier>,
    ) -> Self {
        self.column = input;
        self
    }
    /// <p>The label of the tooltip item.</p>
    pub fn label(mut self, input: impl Into<std::string::String>) -> Self {
        self.label = Some(input.into());
        self
    }
    /// <p>The label of the tooltip item.</p>
    pub fn set_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.label = input;
        self
    }
    /// <p>The visibility of the tooltip item.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = Some(input);
        self
    }
    /// <p>The visibility of the tooltip item.</p>
    pub fn set_visibility(mut self, input: std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The aggregation function of the column tooltip item.</p>
    pub fn aggregation(mut self, input: crate::types::AggregationFunction) -> Self {
        self.aggregation = Some(input);
        self
    }
    /// <p>The aggregation function of the column tooltip item.</p>
    pub fn set_aggregation(
        mut self,
        input: std::option::Option<crate::types::AggregationFunction>,
    ) -> Self {
        self.aggregation = input;
        self
    }
    /// Consumes the builder and constructs a [`ColumnTooltipItem`](crate::types::ColumnTooltipItem).
    pub fn build(self) -> crate::types::ColumnTooltipItem {
        crate::types::ColumnTooltipItem {
            column: self.column,
            label: self.label,
            visibility: self.visibility,
            aggregation: self.aggregation,
        }
    }
}
