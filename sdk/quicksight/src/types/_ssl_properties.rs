// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Secure Socket Layer (SSL) properties that apply when Quick Sight connects to your underlying data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SslProperties {
    /// <p>A Boolean option to control whether SSL should be disabled.</p>
    pub disable_ssl: bool,
}
impl SslProperties {
    /// <p>A Boolean option to control whether SSL should be disabled.</p>
    pub fn disable_ssl(&self) -> bool {
        self.disable_ssl
    }
}
impl SslProperties {
    /// Creates a new builder-style object to manufacture [`SslProperties`](crate::types::SslProperties).
    pub fn builder() -> crate::types::builders::SslPropertiesBuilder {
        crate::types::builders::SslPropertiesBuilder::default()
    }
}

/// A builder for [`SslProperties`](crate::types::SslProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SslPropertiesBuilder {
    pub(crate) disable_ssl: ::std::option::Option<bool>,
}
impl SslPropertiesBuilder {
    /// <p>A Boolean option to control whether SSL should be disabled.</p>
    pub fn disable_ssl(mut self, input: bool) -> Self {
        self.disable_ssl = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean option to control whether SSL should be disabled.</p>
    pub fn set_disable_ssl(mut self, input: ::std::option::Option<bool>) -> Self {
        self.disable_ssl = input;
        self
    }
    /// <p>A Boolean option to control whether SSL should be disabled.</p>
    pub fn get_disable_ssl(&self) -> &::std::option::Option<bool> {
        &self.disable_ssl
    }
    /// Consumes the builder and constructs a [`SslProperties`](crate::types::SslProperties).
    pub fn build(self) -> crate::types::SslProperties {
        crate::types::SslProperties {
            disable_ssl: self.disable_ssl.unwrap_or_default(),
        }
    }
}
