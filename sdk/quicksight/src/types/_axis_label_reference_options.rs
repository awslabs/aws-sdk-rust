// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The reference that specifies where the axis label is applied to.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AxisLabelReferenceOptions {
    /// <p>The field that the axis label is targeted to.</p>
    pub field_id: ::std::string::String,
    /// <p>The column that the axis label is targeted to.</p>
    pub column: ::std::option::Option<crate::types::ColumnIdentifier>,
}
impl AxisLabelReferenceOptions {
    /// <p>The field that the axis label is targeted to.</p>
    pub fn field_id(&self) -> &str {
        use std::ops::Deref;
        self.field_id.deref()
    }
    /// <p>The column that the axis label is targeted to.</p>
    pub fn column(&self) -> ::std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
}
impl AxisLabelReferenceOptions {
    /// Creates a new builder-style object to manufacture [`AxisLabelReferenceOptions`](crate::types::AxisLabelReferenceOptions).
    pub fn builder() -> crate::types::builders::AxisLabelReferenceOptionsBuilder {
        crate::types::builders::AxisLabelReferenceOptionsBuilder::default()
    }
}

/// A builder for [`AxisLabelReferenceOptions`](crate::types::AxisLabelReferenceOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AxisLabelReferenceOptionsBuilder {
    pub(crate) field_id: ::std::option::Option<::std::string::String>,
    pub(crate) column: ::std::option::Option<crate::types::ColumnIdentifier>,
}
impl AxisLabelReferenceOptionsBuilder {
    /// <p>The field that the axis label is targeted to.</p>
    /// This field is required.
    pub fn field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field that the axis label is targeted to.</p>
    pub fn set_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The field that the axis label is targeted to.</p>
    pub fn get_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_id
    }
    /// <p>The column that the axis label is targeted to.</p>
    /// This field is required.
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = ::std::option::Option::Some(input);
        self
    }
    /// <p>The column that the axis label is targeted to.</p>
    pub fn set_column(mut self, input: ::std::option::Option<crate::types::ColumnIdentifier>) -> Self {
        self.column = input;
        self
    }
    /// <p>The column that the axis label is targeted to.</p>
    pub fn get_column(&self) -> &::std::option::Option<crate::types::ColumnIdentifier> {
        &self.column
    }
    /// Consumes the builder and constructs a [`AxisLabelReferenceOptions`](crate::types::AxisLabelReferenceOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`field_id`](crate::types::builders::AxisLabelReferenceOptionsBuilder::field_id)
    pub fn build(self) -> ::std::result::Result<crate::types::AxisLabelReferenceOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AxisLabelReferenceOptions {
            field_id: self.field_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_id",
                    "field_id was not specified but it is required when building AxisLabelReferenceOptions",
                )
            })?,
            column: self.column,
        })
    }
}
