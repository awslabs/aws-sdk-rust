// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that determine the default settings for a grid layout configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefaultGridLayoutConfiguration {
    /// <p>Determines the screen canvas size options for a grid layout.</p>
    pub canvas_size_options: ::std::option::Option<crate::types::GridLayoutCanvasSizeOptions>,
}
impl DefaultGridLayoutConfiguration {
    /// <p>Determines the screen canvas size options for a grid layout.</p>
    pub fn canvas_size_options(&self) -> ::std::option::Option<&crate::types::GridLayoutCanvasSizeOptions> {
        self.canvas_size_options.as_ref()
    }
}
impl DefaultGridLayoutConfiguration {
    /// Creates a new builder-style object to manufacture [`DefaultGridLayoutConfiguration`](crate::types::DefaultGridLayoutConfiguration).
    pub fn builder() -> crate::types::builders::DefaultGridLayoutConfigurationBuilder {
        crate::types::builders::DefaultGridLayoutConfigurationBuilder::default()
    }
}

/// A builder for [`DefaultGridLayoutConfiguration`](crate::types::DefaultGridLayoutConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefaultGridLayoutConfigurationBuilder {
    pub(crate) canvas_size_options: ::std::option::Option<crate::types::GridLayoutCanvasSizeOptions>,
}
impl DefaultGridLayoutConfigurationBuilder {
    /// <p>Determines the screen canvas size options for a grid layout.</p>
    /// This field is required.
    pub fn canvas_size_options(mut self, input: crate::types::GridLayoutCanvasSizeOptions) -> Self {
        self.canvas_size_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the screen canvas size options for a grid layout.</p>
    pub fn set_canvas_size_options(mut self, input: ::std::option::Option<crate::types::GridLayoutCanvasSizeOptions>) -> Self {
        self.canvas_size_options = input;
        self
    }
    /// <p>Determines the screen canvas size options for a grid layout.</p>
    pub fn get_canvas_size_options(&self) -> &::std::option::Option<crate::types::GridLayoutCanvasSizeOptions> {
        &self.canvas_size_options
    }
    /// Consumes the builder and constructs a [`DefaultGridLayoutConfiguration`](crate::types::DefaultGridLayoutConfiguration).
    pub fn build(self) -> crate::types::DefaultGridLayoutConfiguration {
        crate::types::DefaultGridLayoutConfiguration {
            canvas_size_options: self.canvas_size_options,
        }
    }
}
