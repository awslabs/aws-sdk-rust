// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The minimum and maximum setup for an axis display range.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AxisDisplayMinMaxRange {
    /// <p>The minimum setup for an axis display range.</p>
    #[doc(hidden)]
    pub minimum: std::option::Option<f64>,
    /// <p>The maximum setup for an axis display range.</p>
    #[doc(hidden)]
    pub maximum: std::option::Option<f64>,
}
impl AxisDisplayMinMaxRange {
    /// <p>The minimum setup for an axis display range.</p>
    pub fn minimum(&self) -> std::option::Option<f64> {
        self.minimum
    }
    /// <p>The maximum setup for an axis display range.</p>
    pub fn maximum(&self) -> std::option::Option<f64> {
        self.maximum
    }
}
impl AxisDisplayMinMaxRange {
    /// Creates a new builder-style object to manufacture [`AxisDisplayMinMaxRange`](crate::types::AxisDisplayMinMaxRange).
    pub fn builder() -> crate::types::builders::AxisDisplayMinMaxRangeBuilder {
        crate::types::builders::AxisDisplayMinMaxRangeBuilder::default()
    }
}

/// A builder for [`AxisDisplayMinMaxRange`](crate::types::AxisDisplayMinMaxRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AxisDisplayMinMaxRangeBuilder {
    pub(crate) minimum: std::option::Option<f64>,
    pub(crate) maximum: std::option::Option<f64>,
}
impl AxisDisplayMinMaxRangeBuilder {
    /// <p>The minimum setup for an axis display range.</p>
    pub fn minimum(mut self, input: f64) -> Self {
        self.minimum = Some(input);
        self
    }
    /// <p>The minimum setup for an axis display range.</p>
    pub fn set_minimum(mut self, input: std::option::Option<f64>) -> Self {
        self.minimum = input;
        self
    }
    /// <p>The maximum setup for an axis display range.</p>
    pub fn maximum(mut self, input: f64) -> Self {
        self.maximum = Some(input);
        self
    }
    /// <p>The maximum setup for an axis display range.</p>
    pub fn set_maximum(mut self, input: std::option::Option<f64>) -> Self {
        self.maximum = input;
        self
    }
    /// Consumes the builder and constructs a [`AxisDisplayMinMaxRange`](crate::types::AxisDisplayMinMaxRange).
    pub fn build(self) -> crate::types::AxisDisplayMinMaxRange {
        crate::types::AxisDisplayMinMaxRange {
            minimum: self.minimum,
            maximum: self.maximum,
        }
    }
}
