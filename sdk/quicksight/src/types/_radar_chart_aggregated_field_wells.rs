// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The aggregated field well configuration of a <code>RadarChartVisual</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RadarChartAggregatedFieldWells {
    /// <p>The aggregated field well categories of a radar chart.</p>
    pub category: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    /// <p>The color that are assigned to the aggregated field wells of a radar chart.</p>
    pub color: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    /// <p>The values that are assigned to the aggregated field wells of a radar chart.</p>
    pub values: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>,
}
impl RadarChartAggregatedFieldWells {
    /// <p>The aggregated field well categories of a radar chart.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.category.is_none()`.
    pub fn category(&self) -> &[crate::types::DimensionField] {
        self.category.as_deref().unwrap_or_default()
    }
    /// <p>The color that are assigned to the aggregated field wells of a radar chart.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.color.is_none()`.
    pub fn color(&self) -> &[crate::types::DimensionField] {
        self.color.as_deref().unwrap_or_default()
    }
    /// <p>The values that are assigned to the aggregated field wells of a radar chart.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[crate::types::MeasureField] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl RadarChartAggregatedFieldWells {
    /// Creates a new builder-style object to manufacture [`RadarChartAggregatedFieldWells`](crate::types::RadarChartAggregatedFieldWells).
    pub fn builder() -> crate::types::builders::RadarChartAggregatedFieldWellsBuilder {
        crate::types::builders::RadarChartAggregatedFieldWellsBuilder::default()
    }
}

/// A builder for [`RadarChartAggregatedFieldWells`](crate::types::RadarChartAggregatedFieldWells).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RadarChartAggregatedFieldWellsBuilder {
    pub(crate) category: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    pub(crate) color: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>,
}
impl RadarChartAggregatedFieldWellsBuilder {
    /// Appends an item to `category`.
    ///
    /// To override the contents of this collection use [`set_category`](Self::set_category).
    ///
    /// <p>The aggregated field well categories of a radar chart.</p>
    pub fn category(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.category.unwrap_or_default();
        v.push(input);
        self.category = ::std::option::Option::Some(v);
        self
    }
    /// <p>The aggregated field well categories of a radar chart.</p>
    pub fn set_category(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>) -> Self {
        self.category = input;
        self
    }
    /// <p>The aggregated field well categories of a radar chart.</p>
    pub fn get_category(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DimensionField>> {
        &self.category
    }
    /// Appends an item to `color`.
    ///
    /// To override the contents of this collection use [`set_color`](Self::set_color).
    ///
    /// <p>The color that are assigned to the aggregated field wells of a radar chart.</p>
    pub fn color(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.color.unwrap_or_default();
        v.push(input);
        self.color = ::std::option::Option::Some(v);
        self
    }
    /// <p>The color that are assigned to the aggregated field wells of a radar chart.</p>
    pub fn set_color(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>) -> Self {
        self.color = input;
        self
    }
    /// <p>The color that are assigned to the aggregated field wells of a radar chart.</p>
    pub fn get_color(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DimensionField>> {
        &self.color
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values that are assigned to the aggregated field wells of a radar chart.</p>
    pub fn values(mut self, input: crate::types::MeasureField) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values that are assigned to the aggregated field wells of a radar chart.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The values that are assigned to the aggregated field wells of a radar chart.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MeasureField>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`RadarChartAggregatedFieldWells`](crate::types::RadarChartAggregatedFieldWells).
    pub fn build(self) -> crate::types::RadarChartAggregatedFieldWells {
        crate::types::RadarChartAggregatedFieldWells {
            category: self.category,
            color: self.color,
            values: self.values,
        }
    }
}
