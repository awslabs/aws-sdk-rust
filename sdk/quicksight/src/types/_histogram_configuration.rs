// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a <code>HistogramVisual</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HistogramConfiguration {
    /// <p>The field well configuration of a histogram.</p>
    #[doc(hidden)]
    pub field_wells: std::option::Option<crate::types::HistogramFieldWells>,
    /// <p>The options that determine the presentation of the x-axis.</p>
    #[doc(hidden)]
    pub x_axis_display_options: std::option::Option<crate::types::AxisDisplayOptions>,
    /// <p>The options that determine the presentation of the x-axis label.</p>
    #[doc(hidden)]
    pub x_axis_label_options: std::option::Option<crate::types::ChartAxisLabelOptions>,
    /// <p>The options that determine the presentation of the y-axis.</p>
    #[doc(hidden)]
    pub y_axis_display_options: std::option::Option<crate::types::AxisDisplayOptions>,
    /// <p>The options that determine the presentation of histogram bins.</p>
    #[doc(hidden)]
    pub bin_options: std::option::Option<crate::types::HistogramBinOptions>,
    /// <p>The data label configuration of a histogram.</p>
    #[doc(hidden)]
    pub data_labels: std::option::Option<crate::types::DataLabelOptions>,
    /// <p>The tooltip configuration of a histogram.</p>
    #[doc(hidden)]
    pub tooltip: std::option::Option<crate::types::TooltipOptions>,
    /// <p>The visual palette configuration of a histogram.</p>
    #[doc(hidden)]
    pub visual_palette: std::option::Option<crate::types::VisualPalette>,
}
impl HistogramConfiguration {
    /// <p>The field well configuration of a histogram.</p>
    pub fn field_wells(&self) -> std::option::Option<&crate::types::HistogramFieldWells> {
        self.field_wells.as_ref()
    }
    /// <p>The options that determine the presentation of the x-axis.</p>
    pub fn x_axis_display_options(&self) -> std::option::Option<&crate::types::AxisDisplayOptions> {
        self.x_axis_display_options.as_ref()
    }
    /// <p>The options that determine the presentation of the x-axis label.</p>
    pub fn x_axis_label_options(
        &self,
    ) -> std::option::Option<&crate::types::ChartAxisLabelOptions> {
        self.x_axis_label_options.as_ref()
    }
    /// <p>The options that determine the presentation of the y-axis.</p>
    pub fn y_axis_display_options(&self) -> std::option::Option<&crate::types::AxisDisplayOptions> {
        self.y_axis_display_options.as_ref()
    }
    /// <p>The options that determine the presentation of histogram bins.</p>
    pub fn bin_options(&self) -> std::option::Option<&crate::types::HistogramBinOptions> {
        self.bin_options.as_ref()
    }
    /// <p>The data label configuration of a histogram.</p>
    pub fn data_labels(&self) -> std::option::Option<&crate::types::DataLabelOptions> {
        self.data_labels.as_ref()
    }
    /// <p>The tooltip configuration of a histogram.</p>
    pub fn tooltip(&self) -> std::option::Option<&crate::types::TooltipOptions> {
        self.tooltip.as_ref()
    }
    /// <p>The visual palette configuration of a histogram.</p>
    pub fn visual_palette(&self) -> std::option::Option<&crate::types::VisualPalette> {
        self.visual_palette.as_ref()
    }
}
impl HistogramConfiguration {
    /// Creates a new builder-style object to manufacture [`HistogramConfiguration`](crate::types::HistogramConfiguration).
    pub fn builder() -> crate::types::builders::HistogramConfigurationBuilder {
        crate::types::builders::HistogramConfigurationBuilder::default()
    }
}

/// A builder for [`HistogramConfiguration`](crate::types::HistogramConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HistogramConfigurationBuilder {
    pub(crate) field_wells: std::option::Option<crate::types::HistogramFieldWells>,
    pub(crate) x_axis_display_options: std::option::Option<crate::types::AxisDisplayOptions>,
    pub(crate) x_axis_label_options: std::option::Option<crate::types::ChartAxisLabelOptions>,
    pub(crate) y_axis_display_options: std::option::Option<crate::types::AxisDisplayOptions>,
    pub(crate) bin_options: std::option::Option<crate::types::HistogramBinOptions>,
    pub(crate) data_labels: std::option::Option<crate::types::DataLabelOptions>,
    pub(crate) tooltip: std::option::Option<crate::types::TooltipOptions>,
    pub(crate) visual_palette: std::option::Option<crate::types::VisualPalette>,
}
impl HistogramConfigurationBuilder {
    /// <p>The field well configuration of a histogram.</p>
    pub fn field_wells(mut self, input: crate::types::HistogramFieldWells) -> Self {
        self.field_wells = Some(input);
        self
    }
    /// <p>The field well configuration of a histogram.</p>
    pub fn set_field_wells(
        mut self,
        input: std::option::Option<crate::types::HistogramFieldWells>,
    ) -> Self {
        self.field_wells = input;
        self
    }
    /// <p>The options that determine the presentation of the x-axis.</p>
    pub fn x_axis_display_options(mut self, input: crate::types::AxisDisplayOptions) -> Self {
        self.x_axis_display_options = Some(input);
        self
    }
    /// <p>The options that determine the presentation of the x-axis.</p>
    pub fn set_x_axis_display_options(
        mut self,
        input: std::option::Option<crate::types::AxisDisplayOptions>,
    ) -> Self {
        self.x_axis_display_options = input;
        self
    }
    /// <p>The options that determine the presentation of the x-axis label.</p>
    pub fn x_axis_label_options(mut self, input: crate::types::ChartAxisLabelOptions) -> Self {
        self.x_axis_label_options = Some(input);
        self
    }
    /// <p>The options that determine the presentation of the x-axis label.</p>
    pub fn set_x_axis_label_options(
        mut self,
        input: std::option::Option<crate::types::ChartAxisLabelOptions>,
    ) -> Self {
        self.x_axis_label_options = input;
        self
    }
    /// <p>The options that determine the presentation of the y-axis.</p>
    pub fn y_axis_display_options(mut self, input: crate::types::AxisDisplayOptions) -> Self {
        self.y_axis_display_options = Some(input);
        self
    }
    /// <p>The options that determine the presentation of the y-axis.</p>
    pub fn set_y_axis_display_options(
        mut self,
        input: std::option::Option<crate::types::AxisDisplayOptions>,
    ) -> Self {
        self.y_axis_display_options = input;
        self
    }
    /// <p>The options that determine the presentation of histogram bins.</p>
    pub fn bin_options(mut self, input: crate::types::HistogramBinOptions) -> Self {
        self.bin_options = Some(input);
        self
    }
    /// <p>The options that determine the presentation of histogram bins.</p>
    pub fn set_bin_options(
        mut self,
        input: std::option::Option<crate::types::HistogramBinOptions>,
    ) -> Self {
        self.bin_options = input;
        self
    }
    /// <p>The data label configuration of a histogram.</p>
    pub fn data_labels(mut self, input: crate::types::DataLabelOptions) -> Self {
        self.data_labels = Some(input);
        self
    }
    /// <p>The data label configuration of a histogram.</p>
    pub fn set_data_labels(
        mut self,
        input: std::option::Option<crate::types::DataLabelOptions>,
    ) -> Self {
        self.data_labels = input;
        self
    }
    /// <p>The tooltip configuration of a histogram.</p>
    pub fn tooltip(mut self, input: crate::types::TooltipOptions) -> Self {
        self.tooltip = Some(input);
        self
    }
    /// <p>The tooltip configuration of a histogram.</p>
    pub fn set_tooltip(mut self, input: std::option::Option<crate::types::TooltipOptions>) -> Self {
        self.tooltip = input;
        self
    }
    /// <p>The visual palette configuration of a histogram.</p>
    pub fn visual_palette(mut self, input: crate::types::VisualPalette) -> Self {
        self.visual_palette = Some(input);
        self
    }
    /// <p>The visual palette configuration of a histogram.</p>
    pub fn set_visual_palette(
        mut self,
        input: std::option::Option<crate::types::VisualPalette>,
    ) -> Self {
        self.visual_palette = input;
        self
    }
    /// Consumes the builder and constructs a [`HistogramConfiguration`](crate::types::HistogramConfiguration).
    pub fn build(self) -> crate::types::HistogramConfiguration {
        crate::types::HistogramConfiguration {
            field_wells: self.field_wells,
            x_axis_display_options: self.x_axis_display_options,
            x_axis_label_options: self.x_axis_label_options,
            y_axis_display_options: self.y_axis_display_options,
            bin_options: self.bin_options,
            data_labels: self.data_labels,
            tooltip: self.tooltip,
            visual_palette: self.visual_palette,
        }
    }
}
