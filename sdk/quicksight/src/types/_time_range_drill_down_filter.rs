// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The time range drill down filter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeRangeDrillDownFilter {
    /// <p>The column that the filter is applied to.</p>
    #[doc(hidden)]
    pub column: std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The minimum value for the filter value range.</p>
    #[doc(hidden)]
    pub range_minimum: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The maximum value for the filter value range.</p>
    #[doc(hidden)]
    pub range_maximum: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    #[doc(hidden)]
    pub time_granularity: std::option::Option<crate::types::TimeGranularity>,
}
impl TimeRangeDrillDownFilter {
    /// <p>The column that the filter is applied to.</p>
    pub fn column(&self) -> std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>The minimum value for the filter value range.</p>
    pub fn range_minimum(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.range_minimum.as_ref()
    }
    /// <p>The maximum value for the filter value range.</p>
    pub fn range_maximum(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.range_maximum.as_ref()
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(&self) -> std::option::Option<&crate::types::TimeGranularity> {
        self.time_granularity.as_ref()
    }
}
impl TimeRangeDrillDownFilter {
    /// Creates a new builder-style object to manufacture [`TimeRangeDrillDownFilter`](crate::types::TimeRangeDrillDownFilter).
    pub fn builder() -> crate::types::builders::TimeRangeDrillDownFilterBuilder {
        crate::types::builders::TimeRangeDrillDownFilterBuilder::default()
    }
}

/// A builder for [`TimeRangeDrillDownFilter`](crate::types::TimeRangeDrillDownFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeRangeDrillDownFilterBuilder {
    pub(crate) column: std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) range_minimum: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) range_maximum: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) time_granularity: std::option::Option<crate::types::TimeGranularity>,
}
impl TimeRangeDrillDownFilterBuilder {
    /// <p>The column that the filter is applied to.</p>
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = Some(input);
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn set_column(
        mut self,
        input: std::option::Option<crate::types::ColumnIdentifier>,
    ) -> Self {
        self.column = input;
        self
    }
    /// <p>The minimum value for the filter value range.</p>
    pub fn range_minimum(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.range_minimum = Some(input);
        self
    }
    /// <p>The minimum value for the filter value range.</p>
    pub fn set_range_minimum(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.range_minimum = input;
        self
    }
    /// <p>The maximum value for the filter value range.</p>
    pub fn range_maximum(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.range_maximum = Some(input);
        self
    }
    /// <p>The maximum value for the filter value range.</p>
    pub fn set_range_maximum(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.range_maximum = input;
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(mut self, input: crate::types::TimeGranularity) -> Self {
        self.time_granularity = Some(input);
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn set_time_granularity(
        mut self,
        input: std::option::Option<crate::types::TimeGranularity>,
    ) -> Self {
        self.time_granularity = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeRangeDrillDownFilter`](crate::types::TimeRangeDrillDownFilter).
    pub fn build(self) -> crate::types::TimeRangeDrillDownFilter {
        crate::types::TimeRangeDrillDownFilter {
            column: self.column,
            range_minimum: self.range_minimum,
            range_maximum: self.range_maximum,
            time_granularity: self.time_granularity,
        }
    }
}
