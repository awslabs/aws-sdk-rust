// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for Jira.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JiraParameters {
    /// <p>The base URL of the Jira site.</p>
    #[doc(hidden)]
    pub site_base_url: std::option::Option<std::string::String>,
}
impl JiraParameters {
    /// <p>The base URL of the Jira site.</p>
    pub fn site_base_url(&self) -> std::option::Option<&str> {
        self.site_base_url.as_deref()
    }
}
impl JiraParameters {
    /// Creates a new builder-style object to manufacture [`JiraParameters`](crate::types::JiraParameters).
    pub fn builder() -> crate::types::builders::JiraParametersBuilder {
        crate::types::builders::JiraParametersBuilder::default()
    }
}

/// A builder for [`JiraParameters`](crate::types::JiraParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JiraParametersBuilder {
    pub(crate) site_base_url: std::option::Option<std::string::String>,
}
impl JiraParametersBuilder {
    /// <p>The base URL of the Jira site.</p>
    pub fn site_base_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.site_base_url = Some(input.into());
        self
    }
    /// <p>The base URL of the Jira site.</p>
    pub fn set_site_base_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.site_base_url = input;
        self
    }
    /// Consumes the builder and constructs a [`JiraParameters`](crate::types::JiraParameters).
    pub fn build(self) -> crate::types::JiraParameters {
        crate::types::JiraParameters {
            site_base_url: self.site_base_url,
        }
    }
}
