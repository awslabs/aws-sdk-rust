// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines the font settings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Font {
    /// <p>Determines the font family settings.</p>
    #[doc(hidden)]
    pub font_family: std::option::Option<std::string::String>,
}
impl Font {
    /// <p>Determines the font family settings.</p>
    pub fn font_family(&self) -> std::option::Option<&str> {
        self.font_family.as_deref()
    }
}
impl Font {
    /// Creates a new builder-style object to manufacture [`Font`](crate::types::Font).
    pub fn builder() -> crate::types::builders::FontBuilder {
        crate::types::builders::FontBuilder::default()
    }
}

/// A builder for [`Font`](crate::types::Font).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FontBuilder {
    pub(crate) font_family: std::option::Option<std::string::String>,
}
impl FontBuilder {
    /// <p>Determines the font family settings.</p>
    pub fn font_family(mut self, input: impl Into<std::string::String>) -> Self {
        self.font_family = Some(input.into());
        self
    }
    /// <p>Determines the font family settings.</p>
    pub fn set_font_family(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.font_family = input;
        self
    }
    /// Consumes the builder and constructs a [`Font`](crate::types::Font).
    pub fn build(self) -> crate::types::Font {
        crate::types::Font {
            font_family: self.font_family,
        }
    }
}
