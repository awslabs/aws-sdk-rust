// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataSetUsageConfiguration {
    /// <p>An option that controls whether a child dataset of a direct query can use this dataset as a source.</p>
    #[doc(hidden)]
    pub disable_use_as_direct_query_source: bool,
    /// <p>An option that controls whether a child dataset that's stored in QuickSight can use this dataset as a source.</p>
    #[doc(hidden)]
    pub disable_use_as_imported_source: bool,
}
impl DataSetUsageConfiguration {
    /// <p>An option that controls whether a child dataset of a direct query can use this dataset as a source.</p>
    pub fn disable_use_as_direct_query_source(&self) -> bool {
        self.disable_use_as_direct_query_source
    }
    /// <p>An option that controls whether a child dataset that's stored in QuickSight can use this dataset as a source.</p>
    pub fn disable_use_as_imported_source(&self) -> bool {
        self.disable_use_as_imported_source
    }
}
impl DataSetUsageConfiguration {
    /// Creates a new builder-style object to manufacture [`DataSetUsageConfiguration`](crate::types::DataSetUsageConfiguration).
    pub fn builder() -> crate::types::builders::DataSetUsageConfigurationBuilder {
        crate::types::builders::DataSetUsageConfigurationBuilder::default()
    }
}

/// A builder for [`DataSetUsageConfiguration`](crate::types::DataSetUsageConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataSetUsageConfigurationBuilder {
    pub(crate) disable_use_as_direct_query_source: std::option::Option<bool>,
    pub(crate) disable_use_as_imported_source: std::option::Option<bool>,
}
impl DataSetUsageConfigurationBuilder {
    /// <p>An option that controls whether a child dataset of a direct query can use this dataset as a source.</p>
    pub fn disable_use_as_direct_query_source(mut self, input: bool) -> Self {
        self.disable_use_as_direct_query_source = Some(input);
        self
    }
    /// <p>An option that controls whether a child dataset of a direct query can use this dataset as a source.</p>
    pub fn set_disable_use_as_direct_query_source(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.disable_use_as_direct_query_source = input;
        self
    }
    /// <p>An option that controls whether a child dataset that's stored in QuickSight can use this dataset as a source.</p>
    pub fn disable_use_as_imported_source(mut self, input: bool) -> Self {
        self.disable_use_as_imported_source = Some(input);
        self
    }
    /// <p>An option that controls whether a child dataset that's stored in QuickSight can use this dataset as a source.</p>
    pub fn set_disable_use_as_imported_source(mut self, input: std::option::Option<bool>) -> Self {
        self.disable_use_as_imported_source = input;
        self
    }
    /// Consumes the builder and constructs a [`DataSetUsageConfiguration`](crate::types::DataSetUsageConfiguration).
    pub fn build(self) -> crate::types::DataSetUsageConfiguration {
        crate::types::DataSetUsageConfiguration {
            disable_use_as_direct_query_source: self
                .disable_use_as_direct_query_source
                .unwrap_or_default(),
            disable_use_as_imported_source: self.disable_use_as_imported_source.unwrap_or_default(),
        }
    }
}
