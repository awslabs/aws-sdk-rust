// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The forecast configuration that is used in a line chart's display properties.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ForecastConfiguration {
    /// <p>The forecast properties setup of a forecast in the line chart.</p>
    #[doc(hidden)]
    pub forecast_properties: std::option::Option<crate::types::TimeBasedForecastProperties>,
    /// <p>The forecast scenario of a forecast in the line chart.</p>
    #[doc(hidden)]
    pub scenario: std::option::Option<crate::types::ForecastScenario>,
}
impl ForecastConfiguration {
    /// <p>The forecast properties setup of a forecast in the line chart.</p>
    pub fn forecast_properties(
        &self,
    ) -> std::option::Option<&crate::types::TimeBasedForecastProperties> {
        self.forecast_properties.as_ref()
    }
    /// <p>The forecast scenario of a forecast in the line chart.</p>
    pub fn scenario(&self) -> std::option::Option<&crate::types::ForecastScenario> {
        self.scenario.as_ref()
    }
}
impl ForecastConfiguration {
    /// Creates a new builder-style object to manufacture [`ForecastConfiguration`](crate::types::ForecastConfiguration).
    pub fn builder() -> crate::types::builders::ForecastConfigurationBuilder {
        crate::types::builders::ForecastConfigurationBuilder::default()
    }
}

/// A builder for [`ForecastConfiguration`](crate::types::ForecastConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ForecastConfigurationBuilder {
    pub(crate) forecast_properties: std::option::Option<crate::types::TimeBasedForecastProperties>,
    pub(crate) scenario: std::option::Option<crate::types::ForecastScenario>,
}
impl ForecastConfigurationBuilder {
    /// <p>The forecast properties setup of a forecast in the line chart.</p>
    pub fn forecast_properties(mut self, input: crate::types::TimeBasedForecastProperties) -> Self {
        self.forecast_properties = Some(input);
        self
    }
    /// <p>The forecast properties setup of a forecast in the line chart.</p>
    pub fn set_forecast_properties(
        mut self,
        input: std::option::Option<crate::types::TimeBasedForecastProperties>,
    ) -> Self {
        self.forecast_properties = input;
        self
    }
    /// <p>The forecast scenario of a forecast in the line chart.</p>
    pub fn scenario(mut self, input: crate::types::ForecastScenario) -> Self {
        self.scenario = Some(input);
        self
    }
    /// <p>The forecast scenario of a forecast in the line chart.</p>
    pub fn set_scenario(
        mut self,
        input: std::option::Option<crate::types::ForecastScenario>,
    ) -> Self {
        self.scenario = input;
        self
    }
    /// Consumes the builder and constructs a [`ForecastConfiguration`](crate::types::ForecastConfiguration).
    pub fn build(self) -> crate::types::ForecastConfiguration {
        crate::types::ForecastConfiguration {
            forecast_properties: self.forecast_properties,
            scenario: self.scenario,
        }
    }
}
