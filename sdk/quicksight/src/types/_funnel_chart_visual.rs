// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A funnel chart.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html">Using funnel charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FunnelChartVisual {
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..</p>
    #[doc(hidden)]
    pub visual_id: std::option::Option<std::string::String>,
    /// <p>The title that is displayed on the visual.</p>
    #[doc(hidden)]
    pub title: std::option::Option<crate::types::VisualTitleLabelOptions>,
    /// <p>The subtitle that is displayed on the visual.</p>
    #[doc(hidden)]
    pub subtitle: std::option::Option<crate::types::VisualSubtitleLabelOptions>,
    /// <p>The configuration of a <code>FunnelChartVisual</code>.</p>
    #[doc(hidden)]
    pub chart_configuration: std::option::Option<crate::types::FunnelChartConfiguration>,
    /// <p>The list of custom actions that are configured for a visual.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<std::vec::Vec<crate::types::VisualCustomAction>>,
    /// <p>The column hierarchy that is used during drill-downs and drill-ups.</p>
    #[doc(hidden)]
    pub column_hierarchies: std::option::Option<std::vec::Vec<crate::types::ColumnHierarchy>>,
}
impl FunnelChartVisual {
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..</p>
    pub fn visual_id(&self) -> std::option::Option<&str> {
        self.visual_id.as_deref()
    }
    /// <p>The title that is displayed on the visual.</p>
    pub fn title(&self) -> std::option::Option<&crate::types::VisualTitleLabelOptions> {
        self.title.as_ref()
    }
    /// <p>The subtitle that is displayed on the visual.</p>
    pub fn subtitle(&self) -> std::option::Option<&crate::types::VisualSubtitleLabelOptions> {
        self.subtitle.as_ref()
    }
    /// <p>The configuration of a <code>FunnelChartVisual</code>.</p>
    pub fn chart_configuration(
        &self,
    ) -> std::option::Option<&crate::types::FunnelChartConfiguration> {
        self.chart_configuration.as_ref()
    }
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn actions(&self) -> std::option::Option<&[crate::types::VisualCustomAction]> {
        self.actions.as_deref()
    }
    /// <p>The column hierarchy that is used during drill-downs and drill-ups.</p>
    pub fn column_hierarchies(&self) -> std::option::Option<&[crate::types::ColumnHierarchy]> {
        self.column_hierarchies.as_deref()
    }
}
impl FunnelChartVisual {
    /// Creates a new builder-style object to manufacture [`FunnelChartVisual`](crate::types::FunnelChartVisual).
    pub fn builder() -> crate::types::builders::FunnelChartVisualBuilder {
        crate::types::builders::FunnelChartVisualBuilder::default()
    }
}

/// A builder for [`FunnelChartVisual`](crate::types::FunnelChartVisual).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FunnelChartVisualBuilder {
    pub(crate) visual_id: std::option::Option<std::string::String>,
    pub(crate) title: std::option::Option<crate::types::VisualTitleLabelOptions>,
    pub(crate) subtitle: std::option::Option<crate::types::VisualSubtitleLabelOptions>,
    pub(crate) chart_configuration: std::option::Option<crate::types::FunnelChartConfiguration>,
    pub(crate) actions: std::option::Option<std::vec::Vec<crate::types::VisualCustomAction>>,
    pub(crate) column_hierarchies:
        std::option::Option<std::vec::Vec<crate::types::ColumnHierarchy>>,
}
impl FunnelChartVisualBuilder {
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..</p>
    pub fn visual_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.visual_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..</p>
    pub fn set_visual_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.visual_id = input;
        self
    }
    /// <p>The title that is displayed on the visual.</p>
    pub fn title(mut self, input: crate::types::VisualTitleLabelOptions) -> Self {
        self.title = Some(input);
        self
    }
    /// <p>The title that is displayed on the visual.</p>
    pub fn set_title(
        mut self,
        input: std::option::Option<crate::types::VisualTitleLabelOptions>,
    ) -> Self {
        self.title = input;
        self
    }
    /// <p>The subtitle that is displayed on the visual.</p>
    pub fn subtitle(mut self, input: crate::types::VisualSubtitleLabelOptions) -> Self {
        self.subtitle = Some(input);
        self
    }
    /// <p>The subtitle that is displayed on the visual.</p>
    pub fn set_subtitle(
        mut self,
        input: std::option::Option<crate::types::VisualSubtitleLabelOptions>,
    ) -> Self {
        self.subtitle = input;
        self
    }
    /// <p>The configuration of a <code>FunnelChartVisual</code>.</p>
    pub fn chart_configuration(mut self, input: crate::types::FunnelChartConfiguration) -> Self {
        self.chart_configuration = Some(input);
        self
    }
    /// <p>The configuration of a <code>FunnelChartVisual</code>.</p>
    pub fn set_chart_configuration(
        mut self,
        input: std::option::Option<crate::types::FunnelChartConfiguration>,
    ) -> Self {
        self.chart_configuration = input;
        self
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn actions(mut self, input: crate::types::VisualCustomAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = Some(v);
        self
    }
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::VisualCustomAction>>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// Appends an item to `column_hierarchies`.
    ///
    /// To override the contents of this collection use [`set_column_hierarchies`](Self::set_column_hierarchies).
    ///
    /// <p>The column hierarchy that is used during drill-downs and drill-ups.</p>
    pub fn column_hierarchies(mut self, input: crate::types::ColumnHierarchy) -> Self {
        let mut v = self.column_hierarchies.unwrap_or_default();
        v.push(input);
        self.column_hierarchies = Some(v);
        self
    }
    /// <p>The column hierarchy that is used during drill-downs and drill-ups.</p>
    pub fn set_column_hierarchies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ColumnHierarchy>>,
    ) -> Self {
        self.column_hierarchies = input;
        self
    }
    /// Consumes the builder and constructs a [`FunnelChartVisual`](crate::types::FunnelChartVisual).
    pub fn build(self) -> crate::types::FunnelChartVisual {
        crate::types::FunnelChartVisual {
            visual_id: self.visual_id,
            title: self.title,
            subtitle: self.subtitle,
            chart_configuration: self.chart_configuration,
            actions: self.actions,
            column_hierarchies: self.column_hierarchies,
        }
    }
}
