// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The format of the comparison.</p>
/// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ComparisonFormatConfiguration {
    /// <p>The number display format.</p>
    #[doc(hidden)]
    pub number_display_format_configuration:
        std::option::Option<crate::types::NumberDisplayFormatConfiguration>,
    /// <p>The percentage display format.</p>
    #[doc(hidden)]
    pub percentage_display_format_configuration:
        std::option::Option<crate::types::PercentageDisplayFormatConfiguration>,
}
impl ComparisonFormatConfiguration {
    /// <p>The number display format.</p>
    pub fn number_display_format_configuration(
        &self,
    ) -> std::option::Option<&crate::types::NumberDisplayFormatConfiguration> {
        self.number_display_format_configuration.as_ref()
    }
    /// <p>The percentage display format.</p>
    pub fn percentage_display_format_configuration(
        &self,
    ) -> std::option::Option<&crate::types::PercentageDisplayFormatConfiguration> {
        self.percentage_display_format_configuration.as_ref()
    }
}
impl ComparisonFormatConfiguration {
    /// Creates a new builder-style object to manufacture [`ComparisonFormatConfiguration`](crate::types::ComparisonFormatConfiguration).
    pub fn builder() -> crate::types::builders::ComparisonFormatConfigurationBuilder {
        crate::types::builders::ComparisonFormatConfigurationBuilder::default()
    }
}

/// A builder for [`ComparisonFormatConfiguration`](crate::types::ComparisonFormatConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ComparisonFormatConfigurationBuilder {
    pub(crate) number_display_format_configuration:
        std::option::Option<crate::types::NumberDisplayFormatConfiguration>,
    pub(crate) percentage_display_format_configuration:
        std::option::Option<crate::types::PercentageDisplayFormatConfiguration>,
}
impl ComparisonFormatConfigurationBuilder {
    /// <p>The number display format.</p>
    pub fn number_display_format_configuration(
        mut self,
        input: crate::types::NumberDisplayFormatConfiguration,
    ) -> Self {
        self.number_display_format_configuration = Some(input);
        self
    }
    /// <p>The number display format.</p>
    pub fn set_number_display_format_configuration(
        mut self,
        input: std::option::Option<crate::types::NumberDisplayFormatConfiguration>,
    ) -> Self {
        self.number_display_format_configuration = input;
        self
    }
    /// <p>The percentage display format.</p>
    pub fn percentage_display_format_configuration(
        mut self,
        input: crate::types::PercentageDisplayFormatConfiguration,
    ) -> Self {
        self.percentage_display_format_configuration = Some(input);
        self
    }
    /// <p>The percentage display format.</p>
    pub fn set_percentage_display_format_configuration(
        mut self,
        input: std::option::Option<crate::types::PercentageDisplayFormatConfiguration>,
    ) -> Self {
        self.percentage_display_format_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`ComparisonFormatConfiguration`](crate::types::ComparisonFormatConfiguration).
    pub fn build(self) -> crate::types::ComparisonFormatConfiguration {
        crate::types::ComparisonFormatConfiguration {
            number_display_format_configuration: self.number_display_format_configuration,
            percentage_display_format_configuration: self.percentage_display_format_configuration,
        }
    }
}
