// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The collapse state options for the pivot table field options.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PivotTableFieldCollapseStateOption {
    /// <p>A tagged-union object that sets the collapse state.</p>
    pub target: ::std::option::Option<crate::types::PivotTableFieldCollapseStateTarget>,
    /// <p>The state of the field target of a pivot table. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>COLLAPSED</code> </p> </li>
    /// <li> <p> <code>EXPANDED</code> </p> </li>
    /// </ul>
    pub state: ::std::option::Option<crate::types::PivotTableFieldCollapseState>,
}
impl PivotTableFieldCollapseStateOption {
    /// <p>A tagged-union object that sets the collapse state.</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::PivotTableFieldCollapseStateTarget> {
        self.target.as_ref()
    }
    /// <p>The state of the field target of a pivot table. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>COLLAPSED</code> </p> </li>
    /// <li> <p> <code>EXPANDED</code> </p> </li>
    /// </ul>
    pub fn state(&self) -> ::std::option::Option<&crate::types::PivotTableFieldCollapseState> {
        self.state.as_ref()
    }
}
impl PivotTableFieldCollapseStateOption {
    /// Creates a new builder-style object to manufacture [`PivotTableFieldCollapseStateOption`](crate::types::PivotTableFieldCollapseStateOption).
    pub fn builder() -> crate::types::builders::PivotTableFieldCollapseStateOptionBuilder {
        crate::types::builders::PivotTableFieldCollapseStateOptionBuilder::default()
    }
}

/// A builder for [`PivotTableFieldCollapseStateOption`](crate::types::PivotTableFieldCollapseStateOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PivotTableFieldCollapseStateOptionBuilder {
    pub(crate) target: ::std::option::Option<crate::types::PivotTableFieldCollapseStateTarget>,
    pub(crate) state: ::std::option::Option<crate::types::PivotTableFieldCollapseState>,
}
impl PivotTableFieldCollapseStateOptionBuilder {
    /// <p>A tagged-union object that sets the collapse state.</p>
    /// This field is required.
    pub fn target(mut self, input: crate::types::PivotTableFieldCollapseStateTarget) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>A tagged-union object that sets the collapse state.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::PivotTableFieldCollapseStateTarget>) -> Self {
        self.target = input;
        self
    }
    /// <p>A tagged-union object that sets the collapse state.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::PivotTableFieldCollapseStateTarget> {
        &self.target
    }
    /// <p>The state of the field target of a pivot table. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>COLLAPSED</code> </p> </li>
    /// <li> <p> <code>EXPANDED</code> </p> </li>
    /// </ul>
    pub fn state(mut self, input: crate::types::PivotTableFieldCollapseState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the field target of a pivot table. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>COLLAPSED</code> </p> </li>
    /// <li> <p> <code>EXPANDED</code> </p> </li>
    /// </ul>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::PivotTableFieldCollapseState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the field target of a pivot table. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>COLLAPSED</code> </p> </li>
    /// <li> <p> <code>EXPANDED</code> </p> </li>
    /// </ul>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::PivotTableFieldCollapseState> {
        &self.state
    }
    /// Consumes the builder and constructs a [`PivotTableFieldCollapseStateOption`](crate::types::PivotTableFieldCollapseStateOption).
    pub fn build(self) -> crate::types::PivotTableFieldCollapseStateOption {
        crate::types::PivotTableFieldCollapseStateOption {
            target: self.target,
            state: self.state,
        }
    }
}
