// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Conditional formatting options for a <code>PivotTableVisual</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TableConditionalFormattingOption {
    /// <p>The cell conditional formatting option for a table.</p>
    #[doc(hidden)]
    pub cell: std::option::Option<crate::types::TableCellConditionalFormatting>,
    /// <p>The row conditional formatting option for a table.</p>
    #[doc(hidden)]
    pub row: std::option::Option<crate::types::TableRowConditionalFormatting>,
}
impl TableConditionalFormattingOption {
    /// <p>The cell conditional formatting option for a table.</p>
    pub fn cell(&self) -> std::option::Option<&crate::types::TableCellConditionalFormatting> {
        self.cell.as_ref()
    }
    /// <p>The row conditional formatting option for a table.</p>
    pub fn row(&self) -> std::option::Option<&crate::types::TableRowConditionalFormatting> {
        self.row.as_ref()
    }
}
impl TableConditionalFormattingOption {
    /// Creates a new builder-style object to manufacture [`TableConditionalFormattingOption`](crate::types::TableConditionalFormattingOption).
    pub fn builder() -> crate::types::builders::TableConditionalFormattingOptionBuilder {
        crate::types::builders::TableConditionalFormattingOptionBuilder::default()
    }
}

/// A builder for [`TableConditionalFormattingOption`](crate::types::TableConditionalFormattingOption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TableConditionalFormattingOptionBuilder {
    pub(crate) cell: std::option::Option<crate::types::TableCellConditionalFormatting>,
    pub(crate) row: std::option::Option<crate::types::TableRowConditionalFormatting>,
}
impl TableConditionalFormattingOptionBuilder {
    /// <p>The cell conditional formatting option for a table.</p>
    pub fn cell(mut self, input: crate::types::TableCellConditionalFormatting) -> Self {
        self.cell = Some(input);
        self
    }
    /// <p>The cell conditional formatting option for a table.</p>
    pub fn set_cell(
        mut self,
        input: std::option::Option<crate::types::TableCellConditionalFormatting>,
    ) -> Self {
        self.cell = input;
        self
    }
    /// <p>The row conditional formatting option for a table.</p>
    pub fn row(mut self, input: crate::types::TableRowConditionalFormatting) -> Self {
        self.row = Some(input);
        self
    }
    /// <p>The row conditional formatting option for a table.</p>
    pub fn set_row(
        mut self,
        input: std::option::Option<crate::types::TableRowConditionalFormatting>,
    ) -> Self {
        self.row = input;
        self
    }
    /// Consumes the builder and constructs a [`TableConditionalFormattingOption`](crate::types::TableConditionalFormattingOption).
    pub fn build(self) -> crate::types::TableConditionalFormattingOption {
        crate::types::TableConditionalFormattingOption {
            cell: self.cell,
            row: self.row,
        }
    }
}
