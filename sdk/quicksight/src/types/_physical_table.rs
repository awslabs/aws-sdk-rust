// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A view of a data source that contains information about the shape of the data in the underlying source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum PhysicalTable {
    /// <p>A physical table type built from the results of the custom SQL query.</p>
    CustomSql(crate::types::CustomSql),
    /// <p>A physical table type for relational data sources.</p>
    RelationalTable(crate::types::RelationalTable),
    /// <p>A physical table type for as S3 data source.</p>
    S3Source(crate::types::S3Source),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl PhysicalTable {
    /// Tries to convert the enum instance into [`CustomSql`](crate::types::PhysicalTable::CustomSql), extracting the inner [`CustomSql`](crate::types::CustomSql).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_custom_sql(&self) -> std::result::Result<&crate::types::CustomSql, &Self> {
        if let PhysicalTable::CustomSql(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`CustomSql`](crate::types::PhysicalTable::CustomSql).
    pub fn is_custom_sql(&self) -> bool {
        self.as_custom_sql().is_ok()
    }
    /// Tries to convert the enum instance into [`RelationalTable`](crate::types::PhysicalTable::RelationalTable), extracting the inner [`RelationalTable`](crate::types::RelationalTable).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_relational_table(
        &self,
    ) -> std::result::Result<&crate::types::RelationalTable, &Self> {
        if let PhysicalTable::RelationalTable(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`RelationalTable`](crate::types::PhysicalTable::RelationalTable).
    pub fn is_relational_table(&self) -> bool {
        self.as_relational_table().is_ok()
    }
    /// Tries to convert the enum instance into [`S3Source`](crate::types::PhysicalTable::S3Source), extracting the inner [`S3Source`](crate::types::S3Source).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_s3_source(&self) -> std::result::Result<&crate::types::S3Source, &Self> {
        if let PhysicalTable::S3Source(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`S3Source`](crate::types::PhysicalTable::S3Source).
    pub fn is_s3_source(&self) -> bool {
        self.as_s3_source().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
