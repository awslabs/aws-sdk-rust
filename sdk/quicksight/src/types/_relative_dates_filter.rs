// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>RelativeDatesFilter</code> filters relative dates values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RelativeDatesFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub filter_id: ::std::string::String,
    /// <p>The column that the filter is applied to.</p>
    pub column: ::std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The date configuration of the filter.</p>
    pub anchor_date_configuration: ::std::option::Option<crate::types::AnchorDateConfiguration>,
    /// <p>The minimum granularity (period granularity) of the relative dates filter.</p>
    pub minimum_granularity: ::std::option::Option<crate::types::TimeGranularity>,
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub time_granularity: crate::types::TimeGranularity,
    /// <p>The range date type of the filter. Choose one of the options below:</p>
    /// <ul>
    /// <li> <p> <code>PREVIOUS</code> </p> </li>
    /// <li> <p> <code>THIS</code> </p> </li>
    /// <li> <p> <code>LAST</code> </p> </li>
    /// <li> <p> <code>NOW</code> </p> </li>
    /// <li> <p> <code>NEXT</code> </p> </li>
    /// </ul>
    pub relative_date_type: crate::types::RelativeDateType,
    /// <p>The date value of the filter.</p>
    pub relative_date_value: ::std::option::Option<i32>,
    /// <p>The parameter whose value should be used for the filter value.</p>
    pub parameter_name: ::std::option::Option<::std::string::String>,
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    pub null_option: crate::types::FilterNullOption,
    /// <p>The configuration for the exclude period of the filter.</p>
    pub exclude_period_configuration: ::std::option::Option<crate::types::ExcludePeriodConfiguration>,
}
impl RelativeDatesFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn filter_id(&self) -> &str {
        use std::ops::Deref;
        self.filter_id.deref()
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn column(&self) -> ::std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>The date configuration of the filter.</p>
    pub fn anchor_date_configuration(&self) -> ::std::option::Option<&crate::types::AnchorDateConfiguration> {
        self.anchor_date_configuration.as_ref()
    }
    /// <p>The minimum granularity (period granularity) of the relative dates filter.</p>
    pub fn minimum_granularity(&self) -> ::std::option::Option<&crate::types::TimeGranularity> {
        self.minimum_granularity.as_ref()
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(&self) -> &crate::types::TimeGranularity {
        &self.time_granularity
    }
    /// <p>The range date type of the filter. Choose one of the options below:</p>
    /// <ul>
    /// <li> <p> <code>PREVIOUS</code> </p> </li>
    /// <li> <p> <code>THIS</code> </p> </li>
    /// <li> <p> <code>LAST</code> </p> </li>
    /// <li> <p> <code>NOW</code> </p> </li>
    /// <li> <p> <code>NEXT</code> </p> </li>
    /// </ul>
    pub fn relative_date_type(&self) -> &crate::types::RelativeDateType {
        &self.relative_date_type
    }
    /// <p>The date value of the filter.</p>
    pub fn relative_date_value(&self) -> ::std::option::Option<i32> {
        self.relative_date_value
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    pub fn parameter_name(&self) -> ::std::option::Option<&str> {
        self.parameter_name.as_deref()
    }
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    pub fn null_option(&self) -> &crate::types::FilterNullOption {
        &self.null_option
    }
    /// <p>The configuration for the exclude period of the filter.</p>
    pub fn exclude_period_configuration(&self) -> ::std::option::Option<&crate::types::ExcludePeriodConfiguration> {
        self.exclude_period_configuration.as_ref()
    }
}
impl RelativeDatesFilter {
    /// Creates a new builder-style object to manufacture [`RelativeDatesFilter`](crate::types::RelativeDatesFilter).
    pub fn builder() -> crate::types::builders::RelativeDatesFilterBuilder {
        crate::types::builders::RelativeDatesFilterBuilder::default()
    }
}

/// A builder for [`RelativeDatesFilter`](crate::types::RelativeDatesFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RelativeDatesFilterBuilder {
    pub(crate) filter_id: ::std::option::Option<::std::string::String>,
    pub(crate) column: ::std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) anchor_date_configuration: ::std::option::Option<crate::types::AnchorDateConfiguration>,
    pub(crate) minimum_granularity: ::std::option::Option<crate::types::TimeGranularity>,
    pub(crate) time_granularity: ::std::option::Option<crate::types::TimeGranularity>,
    pub(crate) relative_date_type: ::std::option::Option<crate::types::RelativeDateType>,
    pub(crate) relative_date_value: ::std::option::Option<i32>,
    pub(crate) parameter_name: ::std::option::Option<::std::string::String>,
    pub(crate) null_option: ::std::option::Option<crate::types::FilterNullOption>,
    pub(crate) exclude_period_configuration: ::std::option::Option<crate::types::ExcludePeriodConfiguration>,
}
impl RelativeDatesFilterBuilder {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    /// This field is required.
    pub fn filter_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn set_filter_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_id = input;
        self
    }
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn get_filter_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_id
    }
    /// <p>The column that the filter is applied to.</p>
    /// This field is required.
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = ::std::option::Option::Some(input);
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn set_column(mut self, input: ::std::option::Option<crate::types::ColumnIdentifier>) -> Self {
        self.column = input;
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn get_column(&self) -> &::std::option::Option<crate::types::ColumnIdentifier> {
        &self.column
    }
    /// <p>The date configuration of the filter.</p>
    /// This field is required.
    pub fn anchor_date_configuration(mut self, input: crate::types::AnchorDateConfiguration) -> Self {
        self.anchor_date_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date configuration of the filter.</p>
    pub fn set_anchor_date_configuration(mut self, input: ::std::option::Option<crate::types::AnchorDateConfiguration>) -> Self {
        self.anchor_date_configuration = input;
        self
    }
    /// <p>The date configuration of the filter.</p>
    pub fn get_anchor_date_configuration(&self) -> &::std::option::Option<crate::types::AnchorDateConfiguration> {
        &self.anchor_date_configuration
    }
    /// <p>The minimum granularity (period granularity) of the relative dates filter.</p>
    pub fn minimum_granularity(mut self, input: crate::types::TimeGranularity) -> Self {
        self.minimum_granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum granularity (period granularity) of the relative dates filter.</p>
    pub fn set_minimum_granularity(mut self, input: ::std::option::Option<crate::types::TimeGranularity>) -> Self {
        self.minimum_granularity = input;
        self
    }
    /// <p>The minimum granularity (period granularity) of the relative dates filter.</p>
    pub fn get_minimum_granularity(&self) -> &::std::option::Option<crate::types::TimeGranularity> {
        &self.minimum_granularity
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    /// This field is required.
    pub fn time_granularity(mut self, input: crate::types::TimeGranularity) -> Self {
        self.time_granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn set_time_granularity(mut self, input: ::std::option::Option<crate::types::TimeGranularity>) -> Self {
        self.time_granularity = input;
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn get_time_granularity(&self) -> &::std::option::Option<crate::types::TimeGranularity> {
        &self.time_granularity
    }
    /// <p>The range date type of the filter. Choose one of the options below:</p>
    /// <ul>
    /// <li> <p> <code>PREVIOUS</code> </p> </li>
    /// <li> <p> <code>THIS</code> </p> </li>
    /// <li> <p> <code>LAST</code> </p> </li>
    /// <li> <p> <code>NOW</code> </p> </li>
    /// <li> <p> <code>NEXT</code> </p> </li>
    /// </ul>
    /// This field is required.
    pub fn relative_date_type(mut self, input: crate::types::RelativeDateType) -> Self {
        self.relative_date_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The range date type of the filter. Choose one of the options below:</p>
    /// <ul>
    /// <li> <p> <code>PREVIOUS</code> </p> </li>
    /// <li> <p> <code>THIS</code> </p> </li>
    /// <li> <p> <code>LAST</code> </p> </li>
    /// <li> <p> <code>NOW</code> </p> </li>
    /// <li> <p> <code>NEXT</code> </p> </li>
    /// </ul>
    pub fn set_relative_date_type(mut self, input: ::std::option::Option<crate::types::RelativeDateType>) -> Self {
        self.relative_date_type = input;
        self
    }
    /// <p>The range date type of the filter. Choose one of the options below:</p>
    /// <ul>
    /// <li> <p> <code>PREVIOUS</code> </p> </li>
    /// <li> <p> <code>THIS</code> </p> </li>
    /// <li> <p> <code>LAST</code> </p> </li>
    /// <li> <p> <code>NOW</code> </p> </li>
    /// <li> <p> <code>NEXT</code> </p> </li>
    /// </ul>
    pub fn get_relative_date_type(&self) -> &::std::option::Option<crate::types::RelativeDateType> {
        &self.relative_date_type
    }
    /// <p>The date value of the filter.</p>
    pub fn relative_date_value(mut self, input: i32) -> Self {
        self.relative_date_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date value of the filter.</p>
    pub fn set_relative_date_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.relative_date_value = input;
        self
    }
    /// <p>The date value of the filter.</p>
    pub fn get_relative_date_value(&self) -> &::std::option::Option<i32> {
        &self.relative_date_value
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    pub fn parameter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    pub fn set_parameter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameter_name = input;
        self
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    pub fn get_parameter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameter_name
    }
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn null_option(mut self, input: crate::types::FilterNullOption) -> Self {
        self.null_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    pub fn set_null_option(mut self, input: ::std::option::Option<crate::types::FilterNullOption>) -> Self {
        self.null_option = input;
        self
    }
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    pub fn get_null_option(&self) -> &::std::option::Option<crate::types::FilterNullOption> {
        &self.null_option
    }
    /// <p>The configuration for the exclude period of the filter.</p>
    pub fn exclude_period_configuration(mut self, input: crate::types::ExcludePeriodConfiguration) -> Self {
        self.exclude_period_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the exclude period of the filter.</p>
    pub fn set_exclude_period_configuration(mut self, input: ::std::option::Option<crate::types::ExcludePeriodConfiguration>) -> Self {
        self.exclude_period_configuration = input;
        self
    }
    /// <p>The configuration for the exclude period of the filter.</p>
    pub fn get_exclude_period_configuration(&self) -> &::std::option::Option<crate::types::ExcludePeriodConfiguration> {
        &self.exclude_period_configuration
    }
    /// Consumes the builder and constructs a [`RelativeDatesFilter`](crate::types::RelativeDatesFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`filter_id`](crate::types::builders::RelativeDatesFilterBuilder::filter_id)
    /// - [`time_granularity`](crate::types::builders::RelativeDatesFilterBuilder::time_granularity)
    /// - [`relative_date_type`](crate::types::builders::RelativeDatesFilterBuilder::relative_date_type)
    /// - [`null_option`](crate::types::builders::RelativeDatesFilterBuilder::null_option)
    pub fn build(self) -> ::std::result::Result<crate::types::RelativeDatesFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RelativeDatesFilter {
            filter_id: self.filter_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_id",
                    "filter_id was not specified but it is required when building RelativeDatesFilter",
                )
            })?,
            column: self.column,
            anchor_date_configuration: self.anchor_date_configuration,
            minimum_granularity: self.minimum_granularity,
            time_granularity: self.time_granularity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "time_granularity",
                    "time_granularity was not specified but it is required when building RelativeDatesFilter",
                )
            })?,
            relative_date_type: self.relative_date_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "relative_date_type",
                    "relative_date_type was not specified but it is required when building RelativeDatesFilter",
                )
            })?,
            relative_date_value: self.relative_date_value,
            parameter_name: self.parameter_name,
            null_option: self.null_option.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "null_option",
                    "null_option was not specified but it is required when building RelativeDatesFilter",
                )
            })?,
            exclude_period_configuration: self.exclude_period_configuration,
        })
    }
}
