// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure of a data source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataSource {
    /// <p>The Amazon Resource Name (ARN) of the data source.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    #[doc(hidden)]
    pub data_source_id: std::option::Option<std::string::String>,
    /// <p>A display name for the data source.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of the data source. This type indicates which database engine the data source connects to.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::DataSourceType>,
    /// <p>The HTTP status of the request.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ResourceStatus>,
    /// <p>The time that this data source was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time that this data source was updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The parameters that Amazon QuickSight uses to connect to your underlying source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.</p>
    #[doc(hidden)]
    pub data_source_parameters: std::option::Option<crate::types::DataSourceParameters>,
    /// <p>A set of alternate data source parameters that you want to share for the credentials stored with this data source. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the credentials from this existing data source. If the <code>AlternateDataSourceParameters</code> list is null, the <code>Credentials</code> originally used with this <code>DataSourceParameters</code> are automatically allowed.</p>
    #[doc(hidden)]
    pub alternate_data_source_parameters:
        std::option::Option<std::vec::Vec<crate::types::DataSourceParameters>>,
    /// <p>The VPC connection information. You need to use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source.</p>
    #[doc(hidden)]
    pub vpc_connection_properties: std::option::Option<crate::types::VpcConnectionProperties>,
    /// <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source.</p>
    #[doc(hidden)]
    pub ssl_properties: std::option::Option<crate::types::SslProperties>,
    /// <p>Error information from the last update or the creation of the data source.</p>
    #[doc(hidden)]
    pub error_info: std::option::Option<crate::types::DataSourceErrorInfo>,
    /// <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
    #[doc(hidden)]
    pub secret_arn: std::option::Option<std::string::String>,
}
impl DataSource {
    /// <p>The Amazon Resource Name (ARN) of the data source.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn data_source_id(&self) -> std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
    /// <p>A display name for the data source.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of the data source. This type indicates which database engine the data source connects to.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::DataSourceType> {
        self.r#type.as_ref()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ResourceStatus> {
        self.status.as_ref()
    }
    /// <p>The time that this data source was created.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The last time that this data source was updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The parameters that Amazon QuickSight uses to connect to your underlying source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.</p>
    pub fn data_source_parameters(
        &self,
    ) -> std::option::Option<&crate::types::DataSourceParameters> {
        self.data_source_parameters.as_ref()
    }
    /// <p>A set of alternate data source parameters that you want to share for the credentials stored with this data source. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the credentials from this existing data source. If the <code>AlternateDataSourceParameters</code> list is null, the <code>Credentials</code> originally used with this <code>DataSourceParameters</code> are automatically allowed.</p>
    pub fn alternate_data_source_parameters(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceParameters]> {
        self.alternate_data_source_parameters.as_deref()
    }
    /// <p>The VPC connection information. You need to use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source.</p>
    pub fn vpc_connection_properties(
        &self,
    ) -> std::option::Option<&crate::types::VpcConnectionProperties> {
        self.vpc_connection_properties.as_ref()
    }
    /// <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source.</p>
    pub fn ssl_properties(&self) -> std::option::Option<&crate::types::SslProperties> {
        self.ssl_properties.as_ref()
    }
    /// <p>Error information from the last update or the creation of the data source.</p>
    pub fn error_info(&self) -> std::option::Option<&crate::types::DataSourceErrorInfo> {
        self.error_info.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
    pub fn secret_arn(&self) -> std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
}
impl DataSource {
    /// Creates a new builder-style object to manufacture [`DataSource`](crate::types::DataSource).
    pub fn builder() -> crate::types::builders::DataSourceBuilder {
        crate::types::builders::DataSourceBuilder::default()
    }
}

/// A builder for [`DataSource`](crate::types::DataSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataSourceBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) data_source_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::DataSourceType>,
    pub(crate) status: std::option::Option<crate::types::ResourceStatus>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) data_source_parameters: std::option::Option<crate::types::DataSourceParameters>,
    pub(crate) alternate_data_source_parameters:
        std::option::Option<std::vec::Vec<crate::types::DataSourceParameters>>,
    pub(crate) vpc_connection_properties:
        std::option::Option<crate::types::VpcConnectionProperties>,
    pub(crate) ssl_properties: std::option::Option<crate::types::SslProperties>,
    pub(crate) error_info: std::option::Option<crate::types::DataSourceErrorInfo>,
    pub(crate) secret_arn: std::option::Option<std::string::String>,
}
impl DataSourceBuilder {
    /// <p>The Amazon Resource Name (ARN) of the data source.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the data source.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn data_source_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_source_id = Some(input.into());
        self
    }
    /// <p>The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn set_data_source_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>A display name for the data source.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A display name for the data source.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of the data source. This type indicates which database engine the data source connects to.</p>
    pub fn r#type(mut self, input: crate::types::DataSourceType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the data source. This type indicates which database engine the data source connects to.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::DataSourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The time that this data source was created.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The time that this data source was created.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The last time that this data source was updated.</p>
    pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = Some(input);
        self
    }
    /// <p>The last time that this data source was updated.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The parameters that Amazon QuickSight uses to connect to your underlying source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.</p>
    pub fn data_source_parameters(mut self, input: crate::types::DataSourceParameters) -> Self {
        self.data_source_parameters = Some(input);
        self
    }
    /// <p>The parameters that Amazon QuickSight uses to connect to your underlying source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.</p>
    pub fn set_data_source_parameters(
        mut self,
        input: std::option::Option<crate::types::DataSourceParameters>,
    ) -> Self {
        self.data_source_parameters = input;
        self
    }
    /// Appends an item to `alternate_data_source_parameters`.
    ///
    /// To override the contents of this collection use [`set_alternate_data_source_parameters`](Self::set_alternate_data_source_parameters).
    ///
    /// <p>A set of alternate data source parameters that you want to share for the credentials stored with this data source. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the credentials from this existing data source. If the <code>AlternateDataSourceParameters</code> list is null, the <code>Credentials</code> originally used with this <code>DataSourceParameters</code> are automatically allowed.</p>
    pub fn alternate_data_source_parameters(
        mut self,
        input: crate::types::DataSourceParameters,
    ) -> Self {
        let mut v = self.alternate_data_source_parameters.unwrap_or_default();
        v.push(input);
        self.alternate_data_source_parameters = Some(v);
        self
    }
    /// <p>A set of alternate data source parameters that you want to share for the credentials stored with this data source. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the credentials from this existing data source. If the <code>AlternateDataSourceParameters</code> list is null, the <code>Credentials</code> originally used with this <code>DataSourceParameters</code> are automatically allowed.</p>
    pub fn set_alternate_data_source_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceParameters>>,
    ) -> Self {
        self.alternate_data_source_parameters = input;
        self
    }
    /// <p>The VPC connection information. You need to use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source.</p>
    pub fn vpc_connection_properties(
        mut self,
        input: crate::types::VpcConnectionProperties,
    ) -> Self {
        self.vpc_connection_properties = Some(input);
        self
    }
    /// <p>The VPC connection information. You need to use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source.</p>
    pub fn set_vpc_connection_properties(
        mut self,
        input: std::option::Option<crate::types::VpcConnectionProperties>,
    ) -> Self {
        self.vpc_connection_properties = input;
        self
    }
    /// <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source.</p>
    pub fn ssl_properties(mut self, input: crate::types::SslProperties) -> Self {
        self.ssl_properties = Some(input);
        self
    }
    /// <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source.</p>
    pub fn set_ssl_properties(
        mut self,
        input: std::option::Option<crate::types::SslProperties>,
    ) -> Self {
        self.ssl_properties = input;
        self
    }
    /// <p>Error information from the last update or the creation of the data source.</p>
    pub fn error_info(mut self, input: crate::types::DataSourceErrorInfo) -> Self {
        self.error_info = Some(input);
        self
    }
    /// <p>Error information from the last update or the creation of the data source.</p>
    pub fn set_error_info(
        mut self,
        input: std::option::Option<crate::types::DataSourceErrorInfo>,
    ) -> Self {
        self.error_info = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
    pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
    pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`DataSource`](crate::types::DataSource).
    pub fn build(self) -> crate::types::DataSource {
        crate::types::DataSource {
            arn: self.arn,
            data_source_id: self.data_source_id,
            name: self.name,
            r#type: self.r#type,
            status: self.status,
            created_time: self.created_time,
            last_updated_time: self.last_updated_time,
            data_source_parameters: self.data_source_parameters,
            alternate_data_source_parameters: self.alternate_data_source_parameters,
            vpc_connection_properties: self.vpc_connection_properties,
            ssl_properties: self.ssl_properties,
            error_info: self.error_info,
            secret_arn: self.secret_arn,
        }
    }
}
