// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Custom icon options for an icon set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConditionalFormattingCustomIconOptions {
    /// <p>Determines the type of icon.</p>
    #[doc(hidden)]
    pub icon: std::option::Option<crate::types::Icon>,
    /// <p>Determines the Unicode icon type.</p>
    #[doc(hidden)]
    pub unicode_icon: std::option::Option<std::string::String>,
}
impl ConditionalFormattingCustomIconOptions {
    /// <p>Determines the type of icon.</p>
    pub fn icon(&self) -> std::option::Option<&crate::types::Icon> {
        self.icon.as_ref()
    }
    /// <p>Determines the Unicode icon type.</p>
    pub fn unicode_icon(&self) -> std::option::Option<&str> {
        self.unicode_icon.as_deref()
    }
}
impl ConditionalFormattingCustomIconOptions {
    /// Creates a new builder-style object to manufacture [`ConditionalFormattingCustomIconOptions`](crate::types::ConditionalFormattingCustomIconOptions).
    pub fn builder() -> crate::types::builders::ConditionalFormattingCustomIconOptionsBuilder {
        crate::types::builders::ConditionalFormattingCustomIconOptionsBuilder::default()
    }
}

/// A builder for [`ConditionalFormattingCustomIconOptions`](crate::types::ConditionalFormattingCustomIconOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConditionalFormattingCustomIconOptionsBuilder {
    pub(crate) icon: std::option::Option<crate::types::Icon>,
    pub(crate) unicode_icon: std::option::Option<std::string::String>,
}
impl ConditionalFormattingCustomIconOptionsBuilder {
    /// <p>Determines the type of icon.</p>
    pub fn icon(mut self, input: crate::types::Icon) -> Self {
        self.icon = Some(input);
        self
    }
    /// <p>Determines the type of icon.</p>
    pub fn set_icon(mut self, input: std::option::Option<crate::types::Icon>) -> Self {
        self.icon = input;
        self
    }
    /// <p>Determines the Unicode icon type.</p>
    pub fn unicode_icon(mut self, input: impl Into<std::string::String>) -> Self {
        self.unicode_icon = Some(input.into());
        self
    }
    /// <p>Determines the Unicode icon type.</p>
    pub fn set_unicode_icon(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unicode_icon = input;
        self
    }
    /// Consumes the builder and constructs a [`ConditionalFormattingCustomIconOptions`](crate::types::ConditionalFormattingCustomIconOptions).
    pub fn build(self) -> crate::types::ConditionalFormattingCustomIconOptions {
        crate::types::ConditionalFormattingCustomIconOptions {
            icon: self.icon,
            unicode_icon: self.unicode_icon,
        }
    }
}
