// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The general configuration of a column.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ColumnConfiguration {
    /// <p>The column.</p>
    #[doc(hidden)]
    pub column: std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The format configuration of a column.</p>
    #[doc(hidden)]
    pub format_configuration: std::option::Option<crate::types::FormatConfiguration>,
    /// <p>The role of the column.</p>
    #[doc(hidden)]
    pub role: std::option::Option<crate::types::ColumnRole>,
}
impl ColumnConfiguration {
    /// <p>The column.</p>
    pub fn column(&self) -> std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>The format configuration of a column.</p>
    pub fn format_configuration(&self) -> std::option::Option<&crate::types::FormatConfiguration> {
        self.format_configuration.as_ref()
    }
    /// <p>The role of the column.</p>
    pub fn role(&self) -> std::option::Option<&crate::types::ColumnRole> {
        self.role.as_ref()
    }
}
impl ColumnConfiguration {
    /// Creates a new builder-style object to manufacture [`ColumnConfiguration`](crate::types::ColumnConfiguration).
    pub fn builder() -> crate::types::builders::ColumnConfigurationBuilder {
        crate::types::builders::ColumnConfigurationBuilder::default()
    }
}

/// A builder for [`ColumnConfiguration`](crate::types::ColumnConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ColumnConfigurationBuilder {
    pub(crate) column: std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) format_configuration: std::option::Option<crate::types::FormatConfiguration>,
    pub(crate) role: std::option::Option<crate::types::ColumnRole>,
}
impl ColumnConfigurationBuilder {
    /// <p>The column.</p>
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = Some(input);
        self
    }
    /// <p>The column.</p>
    pub fn set_column(
        mut self,
        input: std::option::Option<crate::types::ColumnIdentifier>,
    ) -> Self {
        self.column = input;
        self
    }
    /// <p>The format configuration of a column.</p>
    pub fn format_configuration(mut self, input: crate::types::FormatConfiguration) -> Self {
        self.format_configuration = Some(input);
        self
    }
    /// <p>The format configuration of a column.</p>
    pub fn set_format_configuration(
        mut self,
        input: std::option::Option<crate::types::FormatConfiguration>,
    ) -> Self {
        self.format_configuration = input;
        self
    }
    /// <p>The role of the column.</p>
    pub fn role(mut self, input: crate::types::ColumnRole) -> Self {
        self.role = Some(input);
        self
    }
    /// <p>The role of the column.</p>
    pub fn set_role(mut self, input: std::option::Option<crate::types::ColumnRole>) -> Self {
        self.role = input;
        self
    }
    /// Consumes the builder and constructs a [`ColumnConfiguration`](crate::types::ColumnConfiguration).
    pub fn build(self) -> crate::types::ColumnConfiguration {
        crate::types::ColumnConfiguration {
            column: self.column,
            format_configuration: self.format_configuration,
            role: self.role,
        }
    }
}
