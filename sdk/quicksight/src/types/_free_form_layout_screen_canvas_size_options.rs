// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that determine the sizing of the canvas used in a free-form layout.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FreeFormLayoutScreenCanvasSizeOptions {
    /// <p>The width that the view port will be optimized for when the layout renders.</p>
    pub optimized_view_port_width: ::std::string::String,
}
impl FreeFormLayoutScreenCanvasSizeOptions {
    /// <p>The width that the view port will be optimized for when the layout renders.</p>
    pub fn optimized_view_port_width(&self) -> &str {
        use std::ops::Deref;
        self.optimized_view_port_width.deref()
    }
}
impl FreeFormLayoutScreenCanvasSizeOptions {
    /// Creates a new builder-style object to manufacture [`FreeFormLayoutScreenCanvasSizeOptions`](crate::types::FreeFormLayoutScreenCanvasSizeOptions).
    pub fn builder() -> crate::types::builders::FreeFormLayoutScreenCanvasSizeOptionsBuilder {
        crate::types::builders::FreeFormLayoutScreenCanvasSizeOptionsBuilder::default()
    }
}

/// A builder for [`FreeFormLayoutScreenCanvasSizeOptions`](crate::types::FreeFormLayoutScreenCanvasSizeOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FreeFormLayoutScreenCanvasSizeOptionsBuilder {
    pub(crate) optimized_view_port_width: ::std::option::Option<::std::string::String>,
}
impl FreeFormLayoutScreenCanvasSizeOptionsBuilder {
    /// <p>The width that the view port will be optimized for when the layout renders.</p>
    /// This field is required.
    pub fn optimized_view_port_width(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.optimized_view_port_width = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The width that the view port will be optimized for when the layout renders.</p>
    pub fn set_optimized_view_port_width(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.optimized_view_port_width = input;
        self
    }
    /// <p>The width that the view port will be optimized for when the layout renders.</p>
    pub fn get_optimized_view_port_width(&self) -> &::std::option::Option<::std::string::String> {
        &self.optimized_view_port_width
    }
    /// Consumes the builder and constructs a [`FreeFormLayoutScreenCanvasSizeOptions`](crate::types::FreeFormLayoutScreenCanvasSizeOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`optimized_view_port_width`](crate::types::builders::FreeFormLayoutScreenCanvasSizeOptionsBuilder::optimized_view_port_width)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::FreeFormLayoutScreenCanvasSizeOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FreeFormLayoutScreenCanvasSizeOptions {
            optimized_view_port_width: self.optimized_view_port_width.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "optimized_view_port_width",
                    "optimized_view_port_width was not specified but it is required when building FreeFormLayoutScreenCanvasSizeOptions",
                )
            })?,
        })
    }
}
