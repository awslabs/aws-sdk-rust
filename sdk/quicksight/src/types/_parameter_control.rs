// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The control of a parameter that users can interact with in a dashboard or an analysis.</p>
/// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ParameterControl {
    /// <p>A control from a date parameter that specifies date and time.</p>
    #[doc(hidden)]
    pub date_time_picker: std::option::Option<crate::types::ParameterDateTimePickerControl>,
    /// <p>A control to display a list with buttons or boxes that are used to select either a single value or multiple values.</p>
    #[doc(hidden)]
    pub list: std::option::Option<crate::types::ParameterListControl>,
    /// <p>A control to display a dropdown list with buttons that are used to select a single value.</p>
    #[doc(hidden)]
    pub dropdown: std::option::Option<crate::types::ParameterDropDownControl>,
    /// <p>A control to display a text box that is used to enter a single entry.</p>
    #[doc(hidden)]
    pub text_field: std::option::Option<crate::types::ParameterTextFieldControl>,
    /// <p>A control to display a text box that is used to enter multiple entries.</p>
    #[doc(hidden)]
    pub text_area: std::option::Option<crate::types::ParameterTextAreaControl>,
    /// <p>A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.</p>
    #[doc(hidden)]
    pub slider: std::option::Option<crate::types::ParameterSliderControl>,
}
impl ParameterControl {
    /// <p>A control from a date parameter that specifies date and time.</p>
    pub fn date_time_picker(
        &self,
    ) -> std::option::Option<&crate::types::ParameterDateTimePickerControl> {
        self.date_time_picker.as_ref()
    }
    /// <p>A control to display a list with buttons or boxes that are used to select either a single value or multiple values.</p>
    pub fn list(&self) -> std::option::Option<&crate::types::ParameterListControl> {
        self.list.as_ref()
    }
    /// <p>A control to display a dropdown list with buttons that are used to select a single value.</p>
    pub fn dropdown(&self) -> std::option::Option<&crate::types::ParameterDropDownControl> {
        self.dropdown.as_ref()
    }
    /// <p>A control to display a text box that is used to enter a single entry.</p>
    pub fn text_field(&self) -> std::option::Option<&crate::types::ParameterTextFieldControl> {
        self.text_field.as_ref()
    }
    /// <p>A control to display a text box that is used to enter multiple entries.</p>
    pub fn text_area(&self) -> std::option::Option<&crate::types::ParameterTextAreaControl> {
        self.text_area.as_ref()
    }
    /// <p>A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.</p>
    pub fn slider(&self) -> std::option::Option<&crate::types::ParameterSliderControl> {
        self.slider.as_ref()
    }
}
impl ParameterControl {
    /// Creates a new builder-style object to manufacture [`ParameterControl`](crate::types::ParameterControl).
    pub fn builder() -> crate::types::builders::ParameterControlBuilder {
        crate::types::builders::ParameterControlBuilder::default()
    }
}

/// A builder for [`ParameterControl`](crate::types::ParameterControl).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParameterControlBuilder {
    pub(crate) date_time_picker: std::option::Option<crate::types::ParameterDateTimePickerControl>,
    pub(crate) list: std::option::Option<crate::types::ParameterListControl>,
    pub(crate) dropdown: std::option::Option<crate::types::ParameterDropDownControl>,
    pub(crate) text_field: std::option::Option<crate::types::ParameterTextFieldControl>,
    pub(crate) text_area: std::option::Option<crate::types::ParameterTextAreaControl>,
    pub(crate) slider: std::option::Option<crate::types::ParameterSliderControl>,
}
impl ParameterControlBuilder {
    /// <p>A control from a date parameter that specifies date and time.</p>
    pub fn date_time_picker(mut self, input: crate::types::ParameterDateTimePickerControl) -> Self {
        self.date_time_picker = Some(input);
        self
    }
    /// <p>A control from a date parameter that specifies date and time.</p>
    pub fn set_date_time_picker(
        mut self,
        input: std::option::Option<crate::types::ParameterDateTimePickerControl>,
    ) -> Self {
        self.date_time_picker = input;
        self
    }
    /// <p>A control to display a list with buttons or boxes that are used to select either a single value or multiple values.</p>
    pub fn list(mut self, input: crate::types::ParameterListControl) -> Self {
        self.list = Some(input);
        self
    }
    /// <p>A control to display a list with buttons or boxes that are used to select either a single value or multiple values.</p>
    pub fn set_list(
        mut self,
        input: std::option::Option<crate::types::ParameterListControl>,
    ) -> Self {
        self.list = input;
        self
    }
    /// <p>A control to display a dropdown list with buttons that are used to select a single value.</p>
    pub fn dropdown(mut self, input: crate::types::ParameterDropDownControl) -> Self {
        self.dropdown = Some(input);
        self
    }
    /// <p>A control to display a dropdown list with buttons that are used to select a single value.</p>
    pub fn set_dropdown(
        mut self,
        input: std::option::Option<crate::types::ParameterDropDownControl>,
    ) -> Self {
        self.dropdown = input;
        self
    }
    /// <p>A control to display a text box that is used to enter a single entry.</p>
    pub fn text_field(mut self, input: crate::types::ParameterTextFieldControl) -> Self {
        self.text_field = Some(input);
        self
    }
    /// <p>A control to display a text box that is used to enter a single entry.</p>
    pub fn set_text_field(
        mut self,
        input: std::option::Option<crate::types::ParameterTextFieldControl>,
    ) -> Self {
        self.text_field = input;
        self
    }
    /// <p>A control to display a text box that is used to enter multiple entries.</p>
    pub fn text_area(mut self, input: crate::types::ParameterTextAreaControl) -> Self {
        self.text_area = Some(input);
        self
    }
    /// <p>A control to display a text box that is used to enter multiple entries.</p>
    pub fn set_text_area(
        mut self,
        input: std::option::Option<crate::types::ParameterTextAreaControl>,
    ) -> Self {
        self.text_area = input;
        self
    }
    /// <p>A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.</p>
    pub fn slider(mut self, input: crate::types::ParameterSliderControl) -> Self {
        self.slider = Some(input);
        self
    }
    /// <p>A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.</p>
    pub fn set_slider(
        mut self,
        input: std::option::Option<crate::types::ParameterSliderControl>,
    ) -> Self {
        self.slider = input;
        self
    }
    /// Consumes the builder and constructs a [`ParameterControl`](crate::types::ParameterControl).
    pub fn build(self) -> crate::types::ParameterControl {
        crate::types::ParameterControl {
            date_time_picker: self.date_time_picker,
            list: self.list,
            dropdown: self.dropdown,
            text_field: self.text_field,
            text_area: self.text_area,
            slider: self.slider,
        }
    }
}
