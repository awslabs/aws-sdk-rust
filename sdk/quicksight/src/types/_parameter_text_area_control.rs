// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A control to display a text box that is used to enter multiple entries.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParameterTextAreaControl {
    /// <p>The ID of the <code>ParameterTextAreaControl</code>.</p>
    pub parameter_control_id: ::std::string::String,
    /// <p>The title of the <code>ParameterTextAreaControl</code>.</p>
    pub title: ::std::string::String,
    /// <p>The source parameter name of the <code>ParameterTextAreaControl</code>.</p>
    pub source_parameter_name: ::std::string::String,
    /// <p>The delimiter that is used to separate the lines in text.</p>
    pub delimiter: ::std::option::Option<::std::string::String>,
    /// <p>The display options of a control.</p>
    pub display_options: ::std::option::Option<crate::types::TextAreaControlDisplayOptions>,
}
impl ParameterTextAreaControl {
    /// <p>The ID of the <code>ParameterTextAreaControl</code>.</p>
    pub fn parameter_control_id(&self) -> &str {
        use std::ops::Deref;
        self.parameter_control_id.deref()
    }
    /// <p>The title of the <code>ParameterTextAreaControl</code>.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The source parameter name of the <code>ParameterTextAreaControl</code>.</p>
    pub fn source_parameter_name(&self) -> &str {
        use std::ops::Deref;
        self.source_parameter_name.deref()
    }
    /// <p>The delimiter that is used to separate the lines in text.</p>
    pub fn delimiter(&self) -> ::std::option::Option<&str> {
        self.delimiter.as_deref()
    }
    /// <p>The display options of a control.</p>
    pub fn display_options(&self) -> ::std::option::Option<&crate::types::TextAreaControlDisplayOptions> {
        self.display_options.as_ref()
    }
}
impl ParameterTextAreaControl {
    /// Creates a new builder-style object to manufacture [`ParameterTextAreaControl`](crate::types::ParameterTextAreaControl).
    pub fn builder() -> crate::types::builders::ParameterTextAreaControlBuilder {
        crate::types::builders::ParameterTextAreaControlBuilder::default()
    }
}

/// A builder for [`ParameterTextAreaControl`](crate::types::ParameterTextAreaControl).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParameterTextAreaControlBuilder {
    pub(crate) parameter_control_id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) source_parameter_name: ::std::option::Option<::std::string::String>,
    pub(crate) delimiter: ::std::option::Option<::std::string::String>,
    pub(crate) display_options: ::std::option::Option<crate::types::TextAreaControlDisplayOptions>,
}
impl ParameterTextAreaControlBuilder {
    /// <p>The ID of the <code>ParameterTextAreaControl</code>.</p>
    /// This field is required.
    pub fn parameter_control_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameter_control_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the <code>ParameterTextAreaControl</code>.</p>
    pub fn set_parameter_control_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameter_control_id = input;
        self
    }
    /// <p>The ID of the <code>ParameterTextAreaControl</code>.</p>
    pub fn get_parameter_control_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameter_control_id
    }
    /// <p>The title of the <code>ParameterTextAreaControl</code>.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the <code>ParameterTextAreaControl</code>.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the <code>ParameterTextAreaControl</code>.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The source parameter name of the <code>ParameterTextAreaControl</code>.</p>
    /// This field is required.
    pub fn source_parameter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_parameter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source parameter name of the <code>ParameterTextAreaControl</code>.</p>
    pub fn set_source_parameter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_parameter_name = input;
        self
    }
    /// <p>The source parameter name of the <code>ParameterTextAreaControl</code>.</p>
    pub fn get_source_parameter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_parameter_name
    }
    /// <p>The delimiter that is used to separate the lines in text.</p>
    pub fn delimiter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.delimiter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The delimiter that is used to separate the lines in text.</p>
    pub fn set_delimiter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.delimiter = input;
        self
    }
    /// <p>The delimiter that is used to separate the lines in text.</p>
    pub fn get_delimiter(&self) -> &::std::option::Option<::std::string::String> {
        &self.delimiter
    }
    /// <p>The display options of a control.</p>
    pub fn display_options(mut self, input: crate::types::TextAreaControlDisplayOptions) -> Self {
        self.display_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The display options of a control.</p>
    pub fn set_display_options(mut self, input: ::std::option::Option<crate::types::TextAreaControlDisplayOptions>) -> Self {
        self.display_options = input;
        self
    }
    /// <p>The display options of a control.</p>
    pub fn get_display_options(&self) -> &::std::option::Option<crate::types::TextAreaControlDisplayOptions> {
        &self.display_options
    }
    /// Consumes the builder and constructs a [`ParameterTextAreaControl`](crate::types::ParameterTextAreaControl).
    /// This method will fail if any of the following fields are not set:
    /// - [`parameter_control_id`](crate::types::builders::ParameterTextAreaControlBuilder::parameter_control_id)
    /// - [`title`](crate::types::builders::ParameterTextAreaControlBuilder::title)
    /// - [`source_parameter_name`](crate::types::builders::ParameterTextAreaControlBuilder::source_parameter_name)
    pub fn build(self) -> ::std::result::Result<crate::types::ParameterTextAreaControl, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ParameterTextAreaControl {
            parameter_control_id: self.parameter_control_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "parameter_control_id",
                    "parameter_control_id was not specified but it is required when building ParameterTextAreaControl",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building ParameterTextAreaControl",
                )
            })?,
            source_parameter_name: self.source_parameter_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_parameter_name",
                    "source_parameter_name was not specified but it is required when building ParameterTextAreaControl",
                )
            })?,
            delimiter: self.delimiter,
            display_options: self.display_options,
        })
    }
}
