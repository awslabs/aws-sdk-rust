// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Authentication configuration for connecting to external services.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthConfig {
    /// <p>The type of authentication method.</p>
    pub authentication_type: crate::types::ConnectionAuthType,
    /// <p>The authentication metadata containing the specific configuration for the chosen authentication type.</p>
    pub authentication_metadata: ::std::option::Option<crate::types::AuthenticationMetadata>,
}
impl AuthConfig {
    /// <p>The type of authentication method.</p>
    pub fn authentication_type(&self) -> &crate::types::ConnectionAuthType {
        &self.authentication_type
    }
    /// <p>The authentication metadata containing the specific configuration for the chosen authentication type.</p>
    pub fn authentication_metadata(&self) -> ::std::option::Option<&crate::types::AuthenticationMetadata> {
        self.authentication_metadata.as_ref()
    }
}
impl AuthConfig {
    /// Creates a new builder-style object to manufacture [`AuthConfig`](crate::types::AuthConfig).
    pub fn builder() -> crate::types::builders::AuthConfigBuilder {
        crate::types::builders::AuthConfigBuilder::default()
    }
}

/// A builder for [`AuthConfig`](crate::types::AuthConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuthConfigBuilder {
    pub(crate) authentication_type: ::std::option::Option<crate::types::ConnectionAuthType>,
    pub(crate) authentication_metadata: ::std::option::Option<crate::types::AuthenticationMetadata>,
}
impl AuthConfigBuilder {
    /// <p>The type of authentication method.</p>
    /// This field is required.
    pub fn authentication_type(mut self, input: crate::types::ConnectionAuthType) -> Self {
        self.authentication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of authentication method.</p>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::ConnectionAuthType>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The type of authentication method.</p>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::ConnectionAuthType> {
        &self.authentication_type
    }
    /// <p>The authentication metadata containing the specific configuration for the chosen authentication type.</p>
    /// This field is required.
    pub fn authentication_metadata(mut self, input: crate::types::AuthenticationMetadata) -> Self {
        self.authentication_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication metadata containing the specific configuration for the chosen authentication type.</p>
    pub fn set_authentication_metadata(mut self, input: ::std::option::Option<crate::types::AuthenticationMetadata>) -> Self {
        self.authentication_metadata = input;
        self
    }
    /// <p>The authentication metadata containing the specific configuration for the chosen authentication type.</p>
    pub fn get_authentication_metadata(&self) -> &::std::option::Option<crate::types::AuthenticationMetadata> {
        &self.authentication_metadata
    }
    /// Consumes the builder and constructs a [`AuthConfig`](crate::types::AuthConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`authentication_type`](crate::types::builders::AuthConfigBuilder::authentication_type)
    pub fn build(self) -> ::std::result::Result<crate::types::AuthConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuthConfig {
            authentication_type: self.authentication_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authentication_type",
                    "authentication_type was not specified but it is required when building AuthConfig",
                )
            })?,
            authentication_metadata: self.authentication_metadata,
        })
    }
}
