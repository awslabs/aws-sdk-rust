// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The lookback window setup of an incremental refresh configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LookbackWindow {
    /// <p>The name of the lookback window column.</p>
    pub column_name: ::std::string::String,
    /// <p>The lookback window column size.</p>
    pub size: i64,
    /// <p>The size unit that is used for the lookback window column. Valid values for this structure are <code>HOUR</code>, <code>DAY</code>, and <code>WEEK</code>.</p>
    pub size_unit: crate::types::LookbackWindowSizeUnit,
}
impl LookbackWindow {
    /// <p>The name of the lookback window column.</p>
    pub fn column_name(&self) -> &str {
        use std::ops::Deref;
        self.column_name.deref()
    }
    /// <p>The lookback window column size.</p>
    pub fn size(&self) -> i64 {
        self.size
    }
    /// <p>The size unit that is used for the lookback window column. Valid values for this structure are <code>HOUR</code>, <code>DAY</code>, and <code>WEEK</code>.</p>
    pub fn size_unit(&self) -> &crate::types::LookbackWindowSizeUnit {
        &self.size_unit
    }
}
impl LookbackWindow {
    /// Creates a new builder-style object to manufacture [`LookbackWindow`](crate::types::LookbackWindow).
    pub fn builder() -> crate::types::builders::LookbackWindowBuilder {
        crate::types::builders::LookbackWindowBuilder::default()
    }
}

/// A builder for [`LookbackWindow`](crate::types::LookbackWindow).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LookbackWindowBuilder {
    pub(crate) column_name: ::std::option::Option<::std::string::String>,
    pub(crate) size: ::std::option::Option<i64>,
    pub(crate) size_unit: ::std::option::Option<crate::types::LookbackWindowSizeUnit>,
}
impl LookbackWindowBuilder {
    /// <p>The name of the lookback window column.</p>
    /// This field is required.
    pub fn column_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.column_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the lookback window column.</p>
    pub fn set_column_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.column_name = input;
        self
    }
    /// <p>The name of the lookback window column.</p>
    pub fn get_column_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.column_name
    }
    /// <p>The lookback window column size.</p>
    /// This field is required.
    pub fn size(mut self, input: i64) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lookback window column size.</p>
    pub fn set_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// <p>The lookback window column size.</p>
    pub fn get_size(&self) -> &::std::option::Option<i64> {
        &self.size
    }
    /// <p>The size unit that is used for the lookback window column. Valid values for this structure are <code>HOUR</code>, <code>DAY</code>, and <code>WEEK</code>.</p>
    /// This field is required.
    pub fn size_unit(mut self, input: crate::types::LookbackWindowSizeUnit) -> Self {
        self.size_unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size unit that is used for the lookback window column. Valid values for this structure are <code>HOUR</code>, <code>DAY</code>, and <code>WEEK</code>.</p>
    pub fn set_size_unit(mut self, input: ::std::option::Option<crate::types::LookbackWindowSizeUnit>) -> Self {
        self.size_unit = input;
        self
    }
    /// <p>The size unit that is used for the lookback window column. Valid values for this structure are <code>HOUR</code>, <code>DAY</code>, and <code>WEEK</code>.</p>
    pub fn get_size_unit(&self) -> &::std::option::Option<crate::types::LookbackWindowSizeUnit> {
        &self.size_unit
    }
    /// Consumes the builder and constructs a [`LookbackWindow`](crate::types::LookbackWindow).
    /// This method will fail if any of the following fields are not set:
    /// - [`column_name`](crate::types::builders::LookbackWindowBuilder::column_name)
    /// - [`size`](crate::types::builders::LookbackWindowBuilder::size)
    /// - [`size_unit`](crate::types::builders::LookbackWindowBuilder::size_unit)
    pub fn build(self) -> ::std::result::Result<crate::types::LookbackWindow, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LookbackWindow {
            column_name: self.column_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "column_name",
                    "column_name was not specified but it is required when building LookbackWindow",
                )
            })?,
            size: self.size.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "size",
                    "size was not specified but it is required when building LookbackWindow",
                )
            })?,
            size_unit: self.size_unit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "size_unit",
                    "size_unit was not specified but it is required when building LookbackWindow",
                )
            })?,
        })
    }
}
