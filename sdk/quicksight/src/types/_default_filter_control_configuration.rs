// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The default configuration for all dependent controls of the filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefaultFilterControlConfiguration {
    /// <p>The title of the <code>DefaultFilterControlConfiguration</code>. This title is shared by all controls that are tied to this filter.</p>
    pub title: ::std::string::String,
    /// <p>The control option for the <code>DefaultFilterControlConfiguration</code>.</p>
    pub control_options: ::std::option::Option<crate::types::DefaultFilterControlOptions>,
}
impl DefaultFilterControlConfiguration {
    /// <p>The title of the <code>DefaultFilterControlConfiguration</code>. This title is shared by all controls that are tied to this filter.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The control option for the <code>DefaultFilterControlConfiguration</code>.</p>
    pub fn control_options(&self) -> ::std::option::Option<&crate::types::DefaultFilterControlOptions> {
        self.control_options.as_ref()
    }
}
impl DefaultFilterControlConfiguration {
    /// Creates a new builder-style object to manufacture [`DefaultFilterControlConfiguration`](crate::types::DefaultFilterControlConfiguration).
    pub fn builder() -> crate::types::builders::DefaultFilterControlConfigurationBuilder {
        crate::types::builders::DefaultFilterControlConfigurationBuilder::default()
    }
}

/// A builder for [`DefaultFilterControlConfiguration`](crate::types::DefaultFilterControlConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefaultFilterControlConfigurationBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) control_options: ::std::option::Option<crate::types::DefaultFilterControlOptions>,
}
impl DefaultFilterControlConfigurationBuilder {
    /// <p>The title of the <code>DefaultFilterControlConfiguration</code>. This title is shared by all controls that are tied to this filter.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the <code>DefaultFilterControlConfiguration</code>. This title is shared by all controls that are tied to this filter.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the <code>DefaultFilterControlConfiguration</code>. This title is shared by all controls that are tied to this filter.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The control option for the <code>DefaultFilterControlConfiguration</code>.</p>
    /// This field is required.
    pub fn control_options(mut self, input: crate::types::DefaultFilterControlOptions) -> Self {
        self.control_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The control option for the <code>DefaultFilterControlConfiguration</code>.</p>
    pub fn set_control_options(mut self, input: ::std::option::Option<crate::types::DefaultFilterControlOptions>) -> Self {
        self.control_options = input;
        self
    }
    /// <p>The control option for the <code>DefaultFilterControlConfiguration</code>.</p>
    pub fn get_control_options(&self) -> &::std::option::Option<crate::types::DefaultFilterControlOptions> {
        &self.control_options
    }
    /// Consumes the builder and constructs a [`DefaultFilterControlConfiguration`](crate::types::DefaultFilterControlConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`title`](crate::types::builders::DefaultFilterControlConfigurationBuilder::title)
    pub fn build(self) -> ::std::result::Result<crate::types::DefaultFilterControlConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DefaultFilterControlConfiguration {
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building DefaultFilterControlConfiguration",
                )
            })?,
            control_options: self.control_options,
        })
    }
}
