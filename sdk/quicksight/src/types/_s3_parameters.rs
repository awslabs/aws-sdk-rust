// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for S3.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3Parameters {
    /// <p>Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded into Amazon QuickSight.</p>
    #[doc(hidden)]
    pub manifest_file_location: std::option::Option<crate::types::ManifestFileLocation>,
}
impl S3Parameters {
    /// <p>Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded into Amazon QuickSight.</p>
    pub fn manifest_file_location(
        &self,
    ) -> std::option::Option<&crate::types::ManifestFileLocation> {
        self.manifest_file_location.as_ref()
    }
}
impl S3Parameters {
    /// Creates a new builder-style object to manufacture [`S3Parameters`](crate::types::S3Parameters).
    pub fn builder() -> crate::types::builders::S3ParametersBuilder {
        crate::types::builders::S3ParametersBuilder::default()
    }
}

/// A builder for [`S3Parameters`](crate::types::S3Parameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3ParametersBuilder {
    pub(crate) manifest_file_location: std::option::Option<crate::types::ManifestFileLocation>,
}
impl S3ParametersBuilder {
    /// <p>Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded into Amazon QuickSight.</p>
    pub fn manifest_file_location(mut self, input: crate::types::ManifestFileLocation) -> Self {
        self.manifest_file_location = Some(input);
        self
    }
    /// <p>Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded into Amazon QuickSight.</p>
    pub fn set_manifest_file_location(
        mut self,
        input: std::option::Option<crate::types::ManifestFileLocation>,
    ) -> Self {
        self.manifest_file_location = input;
        self
    }
    /// Consumes the builder and constructs a [`S3Parameters`](crate::types::S3Parameters).
    pub fn build(self) -> crate::types::S3Parameters {
        crate::types::S3Parameters {
            manifest_file_location: self.manifest_file_location,
        }
    }
}
