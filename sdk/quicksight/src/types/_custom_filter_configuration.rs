// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A custom filter that filters based on a single value. This filter can be partially matched.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomFilterConfiguration {
    /// <p>The match operator that is used to determine if a filter should be applied.</p>
    pub match_operator: crate::types::CategoryFilterMatchOperator,
    /// <p>The category value for the filter.</p>
    /// <p>This field is mutually exclusive to <code>ParameterName</code>.</p>
    pub category_value: ::std::option::Option<::std::string::String>,
    /// <p>Select all of the values. Null is not the assigned value of select all.</p>
    /// <ul>
    /// <li> <p> <code>FILTER_ALL_VALUES</code> </p> </li>
    /// </ul>
    pub select_all_options: ::std::option::Option<crate::types::CategoryFilterSelectAllOptions>,
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>CategoryValue</code>.</p>
    pub parameter_name: ::std::option::Option<::std::string::String>,
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    pub null_option: crate::types::FilterNullOption,
}
impl CustomFilterConfiguration {
    /// <p>The match operator that is used to determine if a filter should be applied.</p>
    pub fn match_operator(&self) -> &crate::types::CategoryFilterMatchOperator {
        &self.match_operator
    }
    /// <p>The category value for the filter.</p>
    /// <p>This field is mutually exclusive to <code>ParameterName</code>.</p>
    pub fn category_value(&self) -> ::std::option::Option<&str> {
        self.category_value.as_deref()
    }
    /// <p>Select all of the values. Null is not the assigned value of select all.</p>
    /// <ul>
    /// <li> <p> <code>FILTER_ALL_VALUES</code> </p> </li>
    /// </ul>
    pub fn select_all_options(&self) -> ::std::option::Option<&crate::types::CategoryFilterSelectAllOptions> {
        self.select_all_options.as_ref()
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>CategoryValue</code>.</p>
    pub fn parameter_name(&self) -> ::std::option::Option<&str> {
        self.parameter_name.as_deref()
    }
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    pub fn null_option(&self) -> &crate::types::FilterNullOption {
        &self.null_option
    }
}
impl CustomFilterConfiguration {
    /// Creates a new builder-style object to manufacture [`CustomFilterConfiguration`](crate::types::CustomFilterConfiguration).
    pub fn builder() -> crate::types::builders::CustomFilterConfigurationBuilder {
        crate::types::builders::CustomFilterConfigurationBuilder::default()
    }
}

/// A builder for [`CustomFilterConfiguration`](crate::types::CustomFilterConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomFilterConfigurationBuilder {
    pub(crate) match_operator: ::std::option::Option<crate::types::CategoryFilterMatchOperator>,
    pub(crate) category_value: ::std::option::Option<::std::string::String>,
    pub(crate) select_all_options: ::std::option::Option<crate::types::CategoryFilterSelectAllOptions>,
    pub(crate) parameter_name: ::std::option::Option<::std::string::String>,
    pub(crate) null_option: ::std::option::Option<crate::types::FilterNullOption>,
}
impl CustomFilterConfigurationBuilder {
    /// <p>The match operator that is used to determine if a filter should be applied.</p>
    /// This field is required.
    pub fn match_operator(mut self, input: crate::types::CategoryFilterMatchOperator) -> Self {
        self.match_operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The match operator that is used to determine if a filter should be applied.</p>
    pub fn set_match_operator(mut self, input: ::std::option::Option<crate::types::CategoryFilterMatchOperator>) -> Self {
        self.match_operator = input;
        self
    }
    /// <p>The match operator that is used to determine if a filter should be applied.</p>
    pub fn get_match_operator(&self) -> &::std::option::Option<crate::types::CategoryFilterMatchOperator> {
        &self.match_operator
    }
    /// <p>The category value for the filter.</p>
    /// <p>This field is mutually exclusive to <code>ParameterName</code>.</p>
    pub fn category_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.category_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category value for the filter.</p>
    /// <p>This field is mutually exclusive to <code>ParameterName</code>.</p>
    pub fn set_category_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.category_value = input;
        self
    }
    /// <p>The category value for the filter.</p>
    /// <p>This field is mutually exclusive to <code>ParameterName</code>.</p>
    pub fn get_category_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.category_value
    }
    /// <p>Select all of the values. Null is not the assigned value of select all.</p>
    /// <ul>
    /// <li> <p> <code>FILTER_ALL_VALUES</code> </p> </li>
    /// </ul>
    pub fn select_all_options(mut self, input: crate::types::CategoryFilterSelectAllOptions) -> Self {
        self.select_all_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Select all of the values. Null is not the assigned value of select all.</p>
    /// <ul>
    /// <li> <p> <code>FILTER_ALL_VALUES</code> </p> </li>
    /// </ul>
    pub fn set_select_all_options(mut self, input: ::std::option::Option<crate::types::CategoryFilterSelectAllOptions>) -> Self {
        self.select_all_options = input;
        self
    }
    /// <p>Select all of the values. Null is not the assigned value of select all.</p>
    /// <ul>
    /// <li> <p> <code>FILTER_ALL_VALUES</code> </p> </li>
    /// </ul>
    pub fn get_select_all_options(&self) -> &::std::option::Option<crate::types::CategoryFilterSelectAllOptions> {
        &self.select_all_options
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>CategoryValue</code>.</p>
    pub fn parameter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>CategoryValue</code>.</p>
    pub fn set_parameter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameter_name = input;
        self
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>CategoryValue</code>.</p>
    pub fn get_parameter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameter_name
    }
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn null_option(mut self, input: crate::types::FilterNullOption) -> Self {
        self.null_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    pub fn set_null_option(mut self, input: ::std::option::Option<crate::types::FilterNullOption>) -> Self {
        self.null_option = input;
        self
    }
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    pub fn get_null_option(&self) -> &::std::option::Option<crate::types::FilterNullOption> {
        &self.null_option
    }
    /// Consumes the builder and constructs a [`CustomFilterConfiguration`](crate::types::CustomFilterConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`match_operator`](crate::types::builders::CustomFilterConfigurationBuilder::match_operator)
    /// - [`null_option`](crate::types::builders::CustomFilterConfigurationBuilder::null_option)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomFilterConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomFilterConfiguration {
            match_operator: self.match_operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "match_operator",
                    "match_operator was not specified but it is required when building CustomFilterConfiguration",
                )
            })?,
            category_value: self.category_value,
            select_all_options: self.select_all_options,
            parameter_name: self.parameter_name,
            null_option: self.null_option.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "null_option",
                    "null_option was not specified but it is required when building CustomFilterConfiguration",
                )
            })?,
        })
    }
}
