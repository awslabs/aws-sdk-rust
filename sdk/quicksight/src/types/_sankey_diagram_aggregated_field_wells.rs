// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The field well configuration of a sankey diagram.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SankeyDiagramAggregatedFieldWells {
    /// <p>The source field wells of a sankey diagram.</p>
    pub source: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    /// <p>The destination field wells of a sankey diagram.</p>
    pub destination: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    /// <p>The weight field wells of a sankey diagram.</p>
    pub weight: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>,
}
impl SankeyDiagramAggregatedFieldWells {
    /// <p>The source field wells of a sankey diagram.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source.is_none()`.
    pub fn source(&self) -> &[crate::types::DimensionField] {
        self.source.as_deref().unwrap_or_default()
    }
    /// <p>The destination field wells of a sankey diagram.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination.is_none()`.
    pub fn destination(&self) -> &[crate::types::DimensionField] {
        self.destination.as_deref().unwrap_or_default()
    }
    /// <p>The weight field wells of a sankey diagram.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.weight.is_none()`.
    pub fn weight(&self) -> &[crate::types::MeasureField] {
        self.weight.as_deref().unwrap_or_default()
    }
}
impl SankeyDiagramAggregatedFieldWells {
    /// Creates a new builder-style object to manufacture [`SankeyDiagramAggregatedFieldWells`](crate::types::SankeyDiagramAggregatedFieldWells).
    pub fn builder() -> crate::types::builders::SankeyDiagramAggregatedFieldWellsBuilder {
        crate::types::builders::SankeyDiagramAggregatedFieldWellsBuilder::default()
    }
}

/// A builder for [`SankeyDiagramAggregatedFieldWells`](crate::types::SankeyDiagramAggregatedFieldWells).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SankeyDiagramAggregatedFieldWellsBuilder {
    pub(crate) source: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    pub(crate) destination: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>,
    pub(crate) weight: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>,
}
impl SankeyDiagramAggregatedFieldWellsBuilder {
    /// Appends an item to `source`.
    ///
    /// To override the contents of this collection use [`set_source`](Self::set_source).
    ///
    /// <p>The source field wells of a sankey diagram.</p>
    pub fn source(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.source.unwrap_or_default();
        v.push(input);
        self.source = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source field wells of a sankey diagram.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source field wells of a sankey diagram.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DimensionField>> {
        &self.source
    }
    /// Appends an item to `destination`.
    ///
    /// To override the contents of this collection use [`set_destination`](Self::set_destination).
    ///
    /// <p>The destination field wells of a sankey diagram.</p>
    pub fn destination(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.destination.unwrap_or_default();
        v.push(input);
        self.destination = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destination field wells of a sankey diagram.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DimensionField>>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The destination field wells of a sankey diagram.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DimensionField>> {
        &self.destination
    }
    /// Appends an item to `weight`.
    ///
    /// To override the contents of this collection use [`set_weight`](Self::set_weight).
    ///
    /// <p>The weight field wells of a sankey diagram.</p>
    pub fn weight(mut self, input: crate::types::MeasureField) -> Self {
        let mut v = self.weight.unwrap_or_default();
        v.push(input);
        self.weight = ::std::option::Option::Some(v);
        self
    }
    /// <p>The weight field wells of a sankey diagram.</p>
    pub fn set_weight(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MeasureField>>) -> Self {
        self.weight = input;
        self
    }
    /// <p>The weight field wells of a sankey diagram.</p>
    pub fn get_weight(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MeasureField>> {
        &self.weight
    }
    /// Consumes the builder and constructs a [`SankeyDiagramAggregatedFieldWells`](crate::types::SankeyDiagramAggregatedFieldWells).
    pub fn build(self) -> crate::types::SankeyDiagramAggregatedFieldWells {
        crate::types::SankeyDiagramAggregatedFieldWells {
            source: self.source,
            destination: self.destination,
            weight: self.weight,
        }
    }
}
