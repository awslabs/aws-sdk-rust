// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The rolling date configuration of a date time filter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RollingDateConfiguration {
    /// <p>The data set that is used in the rolling date configuration.</p>
    #[doc(hidden)]
    pub data_set_identifier: std::option::Option<std::string::String>,
    /// <p>The expression of the rolling date configuration.</p>
    #[doc(hidden)]
    pub expression: std::option::Option<std::string::String>,
}
impl RollingDateConfiguration {
    /// <p>The data set that is used in the rolling date configuration.</p>
    pub fn data_set_identifier(&self) -> std::option::Option<&str> {
        self.data_set_identifier.as_deref()
    }
    /// <p>The expression of the rolling date configuration.</p>
    pub fn expression(&self) -> std::option::Option<&str> {
        self.expression.as_deref()
    }
}
impl std::fmt::Debug for RollingDateConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RollingDateConfiguration");
        formatter.field("data_set_identifier", &self.data_set_identifier);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RollingDateConfiguration {
    /// Creates a new builder-style object to manufacture [`RollingDateConfiguration`](crate::types::RollingDateConfiguration).
    pub fn builder() -> crate::types::builders::RollingDateConfigurationBuilder {
        crate::types::builders::RollingDateConfigurationBuilder::default()
    }
}

/// A builder for [`RollingDateConfiguration`](crate::types::RollingDateConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct RollingDateConfigurationBuilder {
    pub(crate) data_set_identifier: std::option::Option<std::string::String>,
    pub(crate) expression: std::option::Option<std::string::String>,
}
impl RollingDateConfigurationBuilder {
    /// <p>The data set that is used in the rolling date configuration.</p>
    pub fn data_set_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_set_identifier = Some(input.into());
        self
    }
    /// <p>The data set that is used in the rolling date configuration.</p>
    pub fn set_data_set_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.data_set_identifier = input;
        self
    }
    /// <p>The expression of the rolling date configuration.</p>
    pub fn expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.expression = Some(input.into());
        self
    }
    /// <p>The expression of the rolling date configuration.</p>
    pub fn set_expression(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// Consumes the builder and constructs a [`RollingDateConfiguration`](crate::types::RollingDateConfiguration).
    pub fn build(self) -> crate::types::RollingDateConfiguration {
        crate::types::RollingDateConfiguration {
            data_set_identifier: self.data_set_identifier,
            expression: self.expression,
        }
    }
}
impl std::fmt::Debug for RollingDateConfigurationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RollingDateConfigurationBuilder");
        formatter.field("data_set_identifier", &self.data_set_identifier);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
