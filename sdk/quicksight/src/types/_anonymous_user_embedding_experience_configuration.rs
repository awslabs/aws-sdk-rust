// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The type of experience you want to embed. For anonymous users, you can embed QuickSight dashboards.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnonymousUserEmbeddingExperienceConfiguration {
    /// <p>The type of embedding experience. In this case, Amazon Quick Sight dashboards.</p>
    pub dashboard: ::std::option::Option<crate::types::AnonymousUserDashboardEmbeddingConfiguration>,
    /// <p>The type of embedding experience. In this case, Amazon Quick Sight visuals.</p>
    pub dashboard_visual: ::std::option::Option<crate::types::AnonymousUserDashboardVisualEmbeddingConfiguration>,
    /// <p>The Q search bar that you want to use for anonymous user embedding.</p>
    pub q_search_bar: ::std::option::Option<crate::types::AnonymousUserQSearchBarEmbeddingConfiguration>,
    /// <p>The Generative Q&amp;A experience that you want to use for anonymous user embedding.</p>
    pub generative_qn_a: ::std::option::Option<crate::types::AnonymousUserGenerativeQnAEmbeddingConfiguration>,
}
impl AnonymousUserEmbeddingExperienceConfiguration {
    /// <p>The type of embedding experience. In this case, Amazon Quick Sight dashboards.</p>
    pub fn dashboard(&self) -> ::std::option::Option<&crate::types::AnonymousUserDashboardEmbeddingConfiguration> {
        self.dashboard.as_ref()
    }
    /// <p>The type of embedding experience. In this case, Amazon Quick Sight visuals.</p>
    pub fn dashboard_visual(&self) -> ::std::option::Option<&crate::types::AnonymousUserDashboardVisualEmbeddingConfiguration> {
        self.dashboard_visual.as_ref()
    }
    /// <p>The Q search bar that you want to use for anonymous user embedding.</p>
    pub fn q_search_bar(&self) -> ::std::option::Option<&crate::types::AnonymousUserQSearchBarEmbeddingConfiguration> {
        self.q_search_bar.as_ref()
    }
    /// <p>The Generative Q&amp;A experience that you want to use for anonymous user embedding.</p>
    pub fn generative_qn_a(&self) -> ::std::option::Option<&crate::types::AnonymousUserGenerativeQnAEmbeddingConfiguration> {
        self.generative_qn_a.as_ref()
    }
}
impl AnonymousUserEmbeddingExperienceConfiguration {
    /// Creates a new builder-style object to manufacture [`AnonymousUserEmbeddingExperienceConfiguration`](crate::types::AnonymousUserEmbeddingExperienceConfiguration).
    pub fn builder() -> crate::types::builders::AnonymousUserEmbeddingExperienceConfigurationBuilder {
        crate::types::builders::AnonymousUserEmbeddingExperienceConfigurationBuilder::default()
    }
}

/// A builder for [`AnonymousUserEmbeddingExperienceConfiguration`](crate::types::AnonymousUserEmbeddingExperienceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnonymousUserEmbeddingExperienceConfigurationBuilder {
    pub(crate) dashboard: ::std::option::Option<crate::types::AnonymousUserDashboardEmbeddingConfiguration>,
    pub(crate) dashboard_visual: ::std::option::Option<crate::types::AnonymousUserDashboardVisualEmbeddingConfiguration>,
    pub(crate) q_search_bar: ::std::option::Option<crate::types::AnonymousUserQSearchBarEmbeddingConfiguration>,
    pub(crate) generative_qn_a: ::std::option::Option<crate::types::AnonymousUserGenerativeQnAEmbeddingConfiguration>,
}
impl AnonymousUserEmbeddingExperienceConfigurationBuilder {
    /// <p>The type of embedding experience. In this case, Amazon Quick Sight dashboards.</p>
    pub fn dashboard(mut self, input: crate::types::AnonymousUserDashboardEmbeddingConfiguration) -> Self {
        self.dashboard = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of embedding experience. In this case, Amazon Quick Sight dashboards.</p>
    pub fn set_dashboard(mut self, input: ::std::option::Option<crate::types::AnonymousUserDashboardEmbeddingConfiguration>) -> Self {
        self.dashboard = input;
        self
    }
    /// <p>The type of embedding experience. In this case, Amazon Quick Sight dashboards.</p>
    pub fn get_dashboard(&self) -> &::std::option::Option<crate::types::AnonymousUserDashboardEmbeddingConfiguration> {
        &self.dashboard
    }
    /// <p>The type of embedding experience. In this case, Amazon Quick Sight visuals.</p>
    pub fn dashboard_visual(mut self, input: crate::types::AnonymousUserDashboardVisualEmbeddingConfiguration) -> Self {
        self.dashboard_visual = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of embedding experience. In this case, Amazon Quick Sight visuals.</p>
    pub fn set_dashboard_visual(mut self, input: ::std::option::Option<crate::types::AnonymousUserDashboardVisualEmbeddingConfiguration>) -> Self {
        self.dashboard_visual = input;
        self
    }
    /// <p>The type of embedding experience. In this case, Amazon Quick Sight visuals.</p>
    pub fn get_dashboard_visual(&self) -> &::std::option::Option<crate::types::AnonymousUserDashboardVisualEmbeddingConfiguration> {
        &self.dashboard_visual
    }
    /// <p>The Q search bar that you want to use for anonymous user embedding.</p>
    pub fn q_search_bar(mut self, input: crate::types::AnonymousUserQSearchBarEmbeddingConfiguration) -> Self {
        self.q_search_bar = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Q search bar that you want to use for anonymous user embedding.</p>
    pub fn set_q_search_bar(mut self, input: ::std::option::Option<crate::types::AnonymousUserQSearchBarEmbeddingConfiguration>) -> Self {
        self.q_search_bar = input;
        self
    }
    /// <p>The Q search bar that you want to use for anonymous user embedding.</p>
    pub fn get_q_search_bar(&self) -> &::std::option::Option<crate::types::AnonymousUserQSearchBarEmbeddingConfiguration> {
        &self.q_search_bar
    }
    /// <p>The Generative Q&amp;A experience that you want to use for anonymous user embedding.</p>
    pub fn generative_qn_a(mut self, input: crate::types::AnonymousUserGenerativeQnAEmbeddingConfiguration) -> Self {
        self.generative_qn_a = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Generative Q&amp;A experience that you want to use for anonymous user embedding.</p>
    pub fn set_generative_qn_a(mut self, input: ::std::option::Option<crate::types::AnonymousUserGenerativeQnAEmbeddingConfiguration>) -> Self {
        self.generative_qn_a = input;
        self
    }
    /// <p>The Generative Q&amp;A experience that you want to use for anonymous user embedding.</p>
    pub fn get_generative_qn_a(&self) -> &::std::option::Option<crate::types::AnonymousUserGenerativeQnAEmbeddingConfiguration> {
        &self.generative_qn_a
    }
    /// Consumes the builder and constructs a [`AnonymousUserEmbeddingExperienceConfiguration`](crate::types::AnonymousUserEmbeddingExperienceConfiguration).
    pub fn build(self) -> crate::types::AnonymousUserEmbeddingExperienceConfiguration {
        crate::types::AnonymousUserEmbeddingExperienceConfiguration {
            dashboard: self.dashboard,
            dashboard_visual: self.dashboard_visual,
            q_search_bar: self.q_search_bar,
            generative_qn_a: self.generative_qn_a,
        }
    }
}
