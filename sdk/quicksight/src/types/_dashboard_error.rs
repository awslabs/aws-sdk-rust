// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Dashboard error.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DashboardError {
    /// <p>Type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::DashboardErrorType>,
    /// <p>Message.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub violated_entities: std::option::Option<std::vec::Vec<crate::types::Entity>>,
}
impl DashboardError {
    /// <p>Type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::DashboardErrorType> {
        self.r#type.as_ref()
    }
    /// <p>Message.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p></p>
    pub fn violated_entities(&self) -> std::option::Option<&[crate::types::Entity]> {
        self.violated_entities.as_deref()
    }
}
impl DashboardError {
    /// Creates a new builder-style object to manufacture [`DashboardError`](crate::types::DashboardError).
    pub fn builder() -> crate::types::builders::DashboardErrorBuilder {
        crate::types::builders::DashboardErrorBuilder::default()
    }
}

/// A builder for [`DashboardError`](crate::types::DashboardError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DashboardErrorBuilder {
    pub(crate) r#type: std::option::Option<crate::types::DashboardErrorType>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) violated_entities: std::option::Option<std::vec::Vec<crate::types::Entity>>,
}
impl DashboardErrorBuilder {
    /// <p>Type.</p>
    pub fn r#type(mut self, input: crate::types::DashboardErrorType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Type.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::DashboardErrorType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Message.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>Message.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Appends an item to `violated_entities`.
    ///
    /// To override the contents of this collection use [`set_violated_entities`](Self::set_violated_entities).
    ///
    /// <p></p>
    pub fn violated_entities(mut self, input: crate::types::Entity) -> Self {
        let mut v = self.violated_entities.unwrap_or_default();
        v.push(input);
        self.violated_entities = Some(v);
        self
    }
    /// <p></p>
    pub fn set_violated_entities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Entity>>,
    ) -> Self {
        self.violated_entities = input;
        self
    }
    /// Consumes the builder and constructs a [`DashboardError`](crate::types::DashboardError).
    pub fn build(self) -> crate::types::DashboardError {
        crate::types::DashboardError {
            r#type: self.r#type,
            message: self.message,
            violated_entities: self.violated_entities,
        }
    }
}
