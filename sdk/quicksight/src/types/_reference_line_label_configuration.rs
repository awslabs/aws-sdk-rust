// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The label configuration of a reference line.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReferenceLineLabelConfiguration {
    /// <p>The value label configuration of the label in a reference line.</p>
    #[doc(hidden)]
    pub value_label_configuration:
        std::option::Option<crate::types::ReferenceLineValueLabelConfiguration>,
    /// <p>The custom label configuration of the label in a reference line.</p>
    #[doc(hidden)]
    pub custom_label_configuration:
        std::option::Option<crate::types::ReferenceLineCustomLabelConfiguration>,
    /// <p>The font configuration of the label in a reference line.</p>
    #[doc(hidden)]
    pub font_configuration: std::option::Option<crate::types::FontConfiguration>,
    /// <p>The font color configuration of the label in a reference line.</p>
    #[doc(hidden)]
    pub font_color: std::option::Option<std::string::String>,
    /// <p>The horizontal position configuration of the label in a reference line. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>LEFT</code> </p> </li>
    /// <li> <p> <code>CENTER</code> </p> </li>
    /// <li> <p> <code>RIGHT</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub horizontal_position:
        std::option::Option<crate::types::ReferenceLineLabelHorizontalPosition>,
    /// <p>The vertical position configuration of the label in a reference line. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ABOVE</code> </p> </li>
    /// <li> <p> <code>BELOW</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub vertical_position: std::option::Option<crate::types::ReferenceLineLabelVerticalPosition>,
}
impl ReferenceLineLabelConfiguration {
    /// <p>The value label configuration of the label in a reference line.</p>
    pub fn value_label_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ReferenceLineValueLabelConfiguration> {
        self.value_label_configuration.as_ref()
    }
    /// <p>The custom label configuration of the label in a reference line.</p>
    pub fn custom_label_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ReferenceLineCustomLabelConfiguration> {
        self.custom_label_configuration.as_ref()
    }
    /// <p>The font configuration of the label in a reference line.</p>
    pub fn font_configuration(&self) -> std::option::Option<&crate::types::FontConfiguration> {
        self.font_configuration.as_ref()
    }
    /// <p>The font color configuration of the label in a reference line.</p>
    pub fn font_color(&self) -> std::option::Option<&str> {
        self.font_color.as_deref()
    }
    /// <p>The horizontal position configuration of the label in a reference line. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>LEFT</code> </p> </li>
    /// <li> <p> <code>CENTER</code> </p> </li>
    /// <li> <p> <code>RIGHT</code> </p> </li>
    /// </ul>
    pub fn horizontal_position(
        &self,
    ) -> std::option::Option<&crate::types::ReferenceLineLabelHorizontalPosition> {
        self.horizontal_position.as_ref()
    }
    /// <p>The vertical position configuration of the label in a reference line. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ABOVE</code> </p> </li>
    /// <li> <p> <code>BELOW</code> </p> </li>
    /// </ul>
    pub fn vertical_position(
        &self,
    ) -> std::option::Option<&crate::types::ReferenceLineLabelVerticalPosition> {
        self.vertical_position.as_ref()
    }
}
impl ReferenceLineLabelConfiguration {
    /// Creates a new builder-style object to manufacture [`ReferenceLineLabelConfiguration`](crate::types::ReferenceLineLabelConfiguration).
    pub fn builder() -> crate::types::builders::ReferenceLineLabelConfigurationBuilder {
        crate::types::builders::ReferenceLineLabelConfigurationBuilder::default()
    }
}

/// A builder for [`ReferenceLineLabelConfiguration`](crate::types::ReferenceLineLabelConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReferenceLineLabelConfigurationBuilder {
    pub(crate) value_label_configuration:
        std::option::Option<crate::types::ReferenceLineValueLabelConfiguration>,
    pub(crate) custom_label_configuration:
        std::option::Option<crate::types::ReferenceLineCustomLabelConfiguration>,
    pub(crate) font_configuration: std::option::Option<crate::types::FontConfiguration>,
    pub(crate) font_color: std::option::Option<std::string::String>,
    pub(crate) horizontal_position:
        std::option::Option<crate::types::ReferenceLineLabelHorizontalPosition>,
    pub(crate) vertical_position:
        std::option::Option<crate::types::ReferenceLineLabelVerticalPosition>,
}
impl ReferenceLineLabelConfigurationBuilder {
    /// <p>The value label configuration of the label in a reference line.</p>
    pub fn value_label_configuration(
        mut self,
        input: crate::types::ReferenceLineValueLabelConfiguration,
    ) -> Self {
        self.value_label_configuration = Some(input);
        self
    }
    /// <p>The value label configuration of the label in a reference line.</p>
    pub fn set_value_label_configuration(
        mut self,
        input: std::option::Option<crate::types::ReferenceLineValueLabelConfiguration>,
    ) -> Self {
        self.value_label_configuration = input;
        self
    }
    /// <p>The custom label configuration of the label in a reference line.</p>
    pub fn custom_label_configuration(
        mut self,
        input: crate::types::ReferenceLineCustomLabelConfiguration,
    ) -> Self {
        self.custom_label_configuration = Some(input);
        self
    }
    /// <p>The custom label configuration of the label in a reference line.</p>
    pub fn set_custom_label_configuration(
        mut self,
        input: std::option::Option<crate::types::ReferenceLineCustomLabelConfiguration>,
    ) -> Self {
        self.custom_label_configuration = input;
        self
    }
    /// <p>The font configuration of the label in a reference line.</p>
    pub fn font_configuration(mut self, input: crate::types::FontConfiguration) -> Self {
        self.font_configuration = Some(input);
        self
    }
    /// <p>The font configuration of the label in a reference line.</p>
    pub fn set_font_configuration(
        mut self,
        input: std::option::Option<crate::types::FontConfiguration>,
    ) -> Self {
        self.font_configuration = input;
        self
    }
    /// <p>The font color configuration of the label in a reference line.</p>
    pub fn font_color(mut self, input: impl Into<std::string::String>) -> Self {
        self.font_color = Some(input.into());
        self
    }
    /// <p>The font color configuration of the label in a reference line.</p>
    pub fn set_font_color(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.font_color = input;
        self
    }
    /// <p>The horizontal position configuration of the label in a reference line. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>LEFT</code> </p> </li>
    /// <li> <p> <code>CENTER</code> </p> </li>
    /// <li> <p> <code>RIGHT</code> </p> </li>
    /// </ul>
    pub fn horizontal_position(
        mut self,
        input: crate::types::ReferenceLineLabelHorizontalPosition,
    ) -> Self {
        self.horizontal_position = Some(input);
        self
    }
    /// <p>The horizontal position configuration of the label in a reference line. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>LEFT</code> </p> </li>
    /// <li> <p> <code>CENTER</code> </p> </li>
    /// <li> <p> <code>RIGHT</code> </p> </li>
    /// </ul>
    pub fn set_horizontal_position(
        mut self,
        input: std::option::Option<crate::types::ReferenceLineLabelHorizontalPosition>,
    ) -> Self {
        self.horizontal_position = input;
        self
    }
    /// <p>The vertical position configuration of the label in a reference line. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ABOVE</code> </p> </li>
    /// <li> <p> <code>BELOW</code> </p> </li>
    /// </ul>
    pub fn vertical_position(
        mut self,
        input: crate::types::ReferenceLineLabelVerticalPosition,
    ) -> Self {
        self.vertical_position = Some(input);
        self
    }
    /// <p>The vertical position configuration of the label in a reference line. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ABOVE</code> </p> </li>
    /// <li> <p> <code>BELOW</code> </p> </li>
    /// </ul>
    pub fn set_vertical_position(
        mut self,
        input: std::option::Option<crate::types::ReferenceLineLabelVerticalPosition>,
    ) -> Self {
        self.vertical_position = input;
        self
    }
    /// Consumes the builder and constructs a [`ReferenceLineLabelConfiguration`](crate::types::ReferenceLineLabelConfiguration).
    pub fn build(self) -> crate::types::ReferenceLineLabelConfiguration {
        crate::types::ReferenceLineLabelConfiguration {
            value_label_configuration: self.value_label_configuration,
            custom_label_configuration: self.custom_label_configuration,
            font_configuration: self.font_configuration,
            font_color: self.font_color,
            horizontal_position: self.horizontal_position,
            vertical_position: self.vertical_position,
        }
    }
}
