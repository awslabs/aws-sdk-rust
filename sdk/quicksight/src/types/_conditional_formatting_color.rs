// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The formatting configuration for the color.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConditionalFormattingColor {
    /// <p>Formatting configuration for solid color.</p>
    #[doc(hidden)]
    pub solid: std::option::Option<crate::types::ConditionalFormattingSolidColor>,
    /// <p>Formatting configuration for gradient color.</p>
    #[doc(hidden)]
    pub gradient: std::option::Option<crate::types::ConditionalFormattingGradientColor>,
}
impl ConditionalFormattingColor {
    /// <p>Formatting configuration for solid color.</p>
    pub fn solid(&self) -> std::option::Option<&crate::types::ConditionalFormattingSolidColor> {
        self.solid.as_ref()
    }
    /// <p>Formatting configuration for gradient color.</p>
    pub fn gradient(
        &self,
    ) -> std::option::Option<&crate::types::ConditionalFormattingGradientColor> {
        self.gradient.as_ref()
    }
}
impl ConditionalFormattingColor {
    /// Creates a new builder-style object to manufacture [`ConditionalFormattingColor`](crate::types::ConditionalFormattingColor).
    pub fn builder() -> crate::types::builders::ConditionalFormattingColorBuilder {
        crate::types::builders::ConditionalFormattingColorBuilder::default()
    }
}

/// A builder for [`ConditionalFormattingColor`](crate::types::ConditionalFormattingColor).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConditionalFormattingColorBuilder {
    pub(crate) solid: std::option::Option<crate::types::ConditionalFormattingSolidColor>,
    pub(crate) gradient: std::option::Option<crate::types::ConditionalFormattingGradientColor>,
}
impl ConditionalFormattingColorBuilder {
    /// <p>Formatting configuration for solid color.</p>
    pub fn solid(mut self, input: crate::types::ConditionalFormattingSolidColor) -> Self {
        self.solid = Some(input);
        self
    }
    /// <p>Formatting configuration for solid color.</p>
    pub fn set_solid(
        mut self,
        input: std::option::Option<crate::types::ConditionalFormattingSolidColor>,
    ) -> Self {
        self.solid = input;
        self
    }
    /// <p>Formatting configuration for gradient color.</p>
    pub fn gradient(mut self, input: crate::types::ConditionalFormattingGradientColor) -> Self {
        self.gradient = Some(input);
        self
    }
    /// <p>Formatting configuration for gradient color.</p>
    pub fn set_gradient(
        mut self,
        input: std::option::Option<crate::types::ConditionalFormattingGradientColor>,
    ) -> Self {
        self.gradient = input;
        self
    }
    /// Consumes the builder and constructs a [`ConditionalFormattingColor`](crate::types::ConditionalFormattingColor).
    pub fn build(self) -> crate::types::ConditionalFormattingColor {
        crate::types::ConditionalFormattingColor {
            solid: self.solid,
            gradient: self.gradient,
        }
    }
}
