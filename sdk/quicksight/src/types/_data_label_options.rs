// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that determine the presentation of the data labels.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataLabelOptions {
    /// <p>Determines the visibility of the data labels.</p>
    #[doc(hidden)]
    pub visibility: std::option::Option<crate::types::Visibility>,
    /// <p>Determines the visibility of the category field labels.</p>
    #[doc(hidden)]
    pub category_label_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>Determines the visibility of the measure field labels.</p>
    #[doc(hidden)]
    pub measure_label_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>The option that determines the data label type.</p>
    #[doc(hidden)]
    pub data_label_types: std::option::Option<std::vec::Vec<crate::types::DataLabelType>>,
    /// <p>Determines the position of the data labels.</p>
    #[doc(hidden)]
    pub position: std::option::Option<crate::types::DataLabelPosition>,
    /// <p>Determines the content of the data labels.</p>
    #[doc(hidden)]
    pub label_content: std::option::Option<crate::types::DataLabelContent>,
    /// <p>Determines the font configuration of the data labels.</p>
    #[doc(hidden)]
    pub label_font_configuration: std::option::Option<crate::types::FontConfiguration>,
    /// <p>Determines the color of the data labels.</p>
    #[doc(hidden)]
    pub label_color: std::option::Option<std::string::String>,
    /// <p>Determines whether overlap is enabled or disabled for the data labels.</p>
    #[doc(hidden)]
    pub overlap: std::option::Option<crate::types::DataLabelOverlap>,
}
impl DataLabelOptions {
    /// <p>Determines the visibility of the data labels.</p>
    pub fn visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>Determines the visibility of the category field labels.</p>
    pub fn category_label_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.category_label_visibility.as_ref()
    }
    /// <p>Determines the visibility of the measure field labels.</p>
    pub fn measure_label_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.measure_label_visibility.as_ref()
    }
    /// <p>The option that determines the data label type.</p>
    pub fn data_label_types(&self) -> std::option::Option<&[crate::types::DataLabelType]> {
        self.data_label_types.as_deref()
    }
    /// <p>Determines the position of the data labels.</p>
    pub fn position(&self) -> std::option::Option<&crate::types::DataLabelPosition> {
        self.position.as_ref()
    }
    /// <p>Determines the content of the data labels.</p>
    pub fn label_content(&self) -> std::option::Option<&crate::types::DataLabelContent> {
        self.label_content.as_ref()
    }
    /// <p>Determines the font configuration of the data labels.</p>
    pub fn label_font_configuration(
        &self,
    ) -> std::option::Option<&crate::types::FontConfiguration> {
        self.label_font_configuration.as_ref()
    }
    /// <p>Determines the color of the data labels.</p>
    pub fn label_color(&self) -> std::option::Option<&str> {
        self.label_color.as_deref()
    }
    /// <p>Determines whether overlap is enabled or disabled for the data labels.</p>
    pub fn overlap(&self) -> std::option::Option<&crate::types::DataLabelOverlap> {
        self.overlap.as_ref()
    }
}
impl DataLabelOptions {
    /// Creates a new builder-style object to manufacture [`DataLabelOptions`](crate::types::DataLabelOptions).
    pub fn builder() -> crate::types::builders::DataLabelOptionsBuilder {
        crate::types::builders::DataLabelOptionsBuilder::default()
    }
}

/// A builder for [`DataLabelOptions`](crate::types::DataLabelOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataLabelOptionsBuilder {
    pub(crate) visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) category_label_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) measure_label_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) data_label_types: std::option::Option<std::vec::Vec<crate::types::DataLabelType>>,
    pub(crate) position: std::option::Option<crate::types::DataLabelPosition>,
    pub(crate) label_content: std::option::Option<crate::types::DataLabelContent>,
    pub(crate) label_font_configuration: std::option::Option<crate::types::FontConfiguration>,
    pub(crate) label_color: std::option::Option<std::string::String>,
    pub(crate) overlap: std::option::Option<crate::types::DataLabelOverlap>,
}
impl DataLabelOptionsBuilder {
    /// <p>Determines the visibility of the data labels.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = Some(input);
        self
    }
    /// <p>Determines the visibility of the data labels.</p>
    pub fn set_visibility(mut self, input: std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>Determines the visibility of the category field labels.</p>
    pub fn category_label_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.category_label_visibility = Some(input);
        self
    }
    /// <p>Determines the visibility of the category field labels.</p>
    pub fn set_category_label_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.category_label_visibility = input;
        self
    }
    /// <p>Determines the visibility of the measure field labels.</p>
    pub fn measure_label_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.measure_label_visibility = Some(input);
        self
    }
    /// <p>Determines the visibility of the measure field labels.</p>
    pub fn set_measure_label_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.measure_label_visibility = input;
        self
    }
    /// Appends an item to `data_label_types`.
    ///
    /// To override the contents of this collection use [`set_data_label_types`](Self::set_data_label_types).
    ///
    /// <p>The option that determines the data label type.</p>
    pub fn data_label_types(mut self, input: crate::types::DataLabelType) -> Self {
        let mut v = self.data_label_types.unwrap_or_default();
        v.push(input);
        self.data_label_types = Some(v);
        self
    }
    /// <p>The option that determines the data label type.</p>
    pub fn set_data_label_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataLabelType>>,
    ) -> Self {
        self.data_label_types = input;
        self
    }
    /// <p>Determines the position of the data labels.</p>
    pub fn position(mut self, input: crate::types::DataLabelPosition) -> Self {
        self.position = Some(input);
        self
    }
    /// <p>Determines the position of the data labels.</p>
    pub fn set_position(
        mut self,
        input: std::option::Option<crate::types::DataLabelPosition>,
    ) -> Self {
        self.position = input;
        self
    }
    /// <p>Determines the content of the data labels.</p>
    pub fn label_content(mut self, input: crate::types::DataLabelContent) -> Self {
        self.label_content = Some(input);
        self
    }
    /// <p>Determines the content of the data labels.</p>
    pub fn set_label_content(
        mut self,
        input: std::option::Option<crate::types::DataLabelContent>,
    ) -> Self {
        self.label_content = input;
        self
    }
    /// <p>Determines the font configuration of the data labels.</p>
    pub fn label_font_configuration(mut self, input: crate::types::FontConfiguration) -> Self {
        self.label_font_configuration = Some(input);
        self
    }
    /// <p>Determines the font configuration of the data labels.</p>
    pub fn set_label_font_configuration(
        mut self,
        input: std::option::Option<crate::types::FontConfiguration>,
    ) -> Self {
        self.label_font_configuration = input;
        self
    }
    /// <p>Determines the color of the data labels.</p>
    pub fn label_color(mut self, input: impl Into<std::string::String>) -> Self {
        self.label_color = Some(input.into());
        self
    }
    /// <p>Determines the color of the data labels.</p>
    pub fn set_label_color(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.label_color = input;
        self
    }
    /// <p>Determines whether overlap is enabled or disabled for the data labels.</p>
    pub fn overlap(mut self, input: crate::types::DataLabelOverlap) -> Self {
        self.overlap = Some(input);
        self
    }
    /// <p>Determines whether overlap is enabled or disabled for the data labels.</p>
    pub fn set_overlap(
        mut self,
        input: std::option::Option<crate::types::DataLabelOverlap>,
    ) -> Self {
        self.overlap = input;
        self
    }
    /// Consumes the builder and constructs a [`DataLabelOptions`](crate::types::DataLabelOptions).
    pub fn build(self) -> crate::types::DataLabelOptions {
        crate::types::DataLabelOptions {
            visibility: self.visibility,
            category_label_visibility: self.category_label_visibility,
            measure_label_visibility: self.measure_label_visibility,
            data_label_types: self.data_label_types,
            position: self.position,
            label_content: self.label_content,
            label_font_configuration: self.label_font_configuration,
            label_color: self.label_color,
            overlap: self.overlap,
        }
    }
}
