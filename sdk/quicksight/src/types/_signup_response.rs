// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>SignupResponse</code> object that contains a summary of a newly created account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SignupResponse {
    /// <p>A Boolean that is <code>TRUE</code> if the Amazon Quick Sight uses IAM as an authentication method.</p>
    pub iam_user: bool,
    /// <p>The user login name for your Amazon Quick Sight account.</p>
    pub user_login_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of your Quick Sight account.</p>
    pub account_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of Active Directory that is being used to authenticate the Amazon Quick Sight account. Valid values are <code>SIMPLE_AD</code>, <code>AD_CONNECTOR</code>, and <code>MICROSOFT_AD</code>.</p>
    pub directory_type: ::std::option::Option<::std::string::String>,
}
impl SignupResponse {
    /// <p>A Boolean that is <code>TRUE</code> if the Amazon Quick Sight uses IAM as an authentication method.</p>
    pub fn iam_user(&self) -> bool {
        self.iam_user
    }
    /// <p>The user login name for your Amazon Quick Sight account.</p>
    pub fn user_login_name(&self) -> ::std::option::Option<&str> {
        self.user_login_name.as_deref()
    }
    /// <p>The name of your Quick Sight account.</p>
    pub fn account_name(&self) -> ::std::option::Option<&str> {
        self.account_name.as_deref()
    }
    /// <p>The type of Active Directory that is being used to authenticate the Amazon Quick Sight account. Valid values are <code>SIMPLE_AD</code>, <code>AD_CONNECTOR</code>, and <code>MICROSOFT_AD</code>.</p>
    pub fn directory_type(&self) -> ::std::option::Option<&str> {
        self.directory_type.as_deref()
    }
}
impl SignupResponse {
    /// Creates a new builder-style object to manufacture [`SignupResponse`](crate::types::SignupResponse).
    pub fn builder() -> crate::types::builders::SignupResponseBuilder {
        crate::types::builders::SignupResponseBuilder::default()
    }
}

/// A builder for [`SignupResponse`](crate::types::SignupResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SignupResponseBuilder {
    pub(crate) iam_user: ::std::option::Option<bool>,
    pub(crate) user_login_name: ::std::option::Option<::std::string::String>,
    pub(crate) account_name: ::std::option::Option<::std::string::String>,
    pub(crate) directory_type: ::std::option::Option<::std::string::String>,
}
impl SignupResponseBuilder {
    /// <p>A Boolean that is <code>TRUE</code> if the Amazon Quick Sight uses IAM as an authentication method.</p>
    pub fn iam_user(mut self, input: bool) -> Self {
        self.iam_user = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean that is <code>TRUE</code> if the Amazon Quick Sight uses IAM as an authentication method.</p>
    pub fn set_iam_user(mut self, input: ::std::option::Option<bool>) -> Self {
        self.iam_user = input;
        self
    }
    /// <p>A Boolean that is <code>TRUE</code> if the Amazon Quick Sight uses IAM as an authentication method.</p>
    pub fn get_iam_user(&self) -> &::std::option::Option<bool> {
        &self.iam_user
    }
    /// <p>The user login name for your Amazon Quick Sight account.</p>
    pub fn user_login_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_login_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user login name for your Amazon Quick Sight account.</p>
    pub fn set_user_login_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_login_name = input;
        self
    }
    /// <p>The user login name for your Amazon Quick Sight account.</p>
    pub fn get_user_login_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_login_name
    }
    /// <p>The name of your Quick Sight account.</p>
    pub fn account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of your Quick Sight account.</p>
    pub fn set_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_name = input;
        self
    }
    /// <p>The name of your Quick Sight account.</p>
    pub fn get_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_name
    }
    /// <p>The type of Active Directory that is being used to authenticate the Amazon Quick Sight account. Valid values are <code>SIMPLE_AD</code>, <code>AD_CONNECTOR</code>, and <code>MICROSOFT_AD</code>.</p>
    pub fn directory_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of Active Directory that is being used to authenticate the Amazon Quick Sight account. Valid values are <code>SIMPLE_AD</code>, <code>AD_CONNECTOR</code>, and <code>MICROSOFT_AD</code>.</p>
    pub fn set_directory_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_type = input;
        self
    }
    /// <p>The type of Active Directory that is being used to authenticate the Amazon Quick Sight account. Valid values are <code>SIMPLE_AD</code>, <code>AD_CONNECTOR</code>, and <code>MICROSOFT_AD</code>.</p>
    pub fn get_directory_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_type
    }
    /// Consumes the builder and constructs a [`SignupResponse`](crate::types::SignupResponse).
    pub fn build(self) -> crate::types::SignupResponse {
        crate::types::SignupResponse {
            iam_user: self.iam_user.unwrap_or_default(),
            user_login_name: self.user_login_name,
            account_name: self.account_name,
            directory_type: self.directory_type,
        }
    }
}
