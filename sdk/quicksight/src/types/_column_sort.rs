// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The sort configuration for a column that is not used in a field well.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ColumnSort {
    /// <p>A column of a data set.</p>
    pub sort_by: ::std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The sort direction.</p>
    pub direction: crate::types::SortDirection,
    /// <p>The aggregation function that is defined in the column sort.</p>
    pub aggregation_function: ::std::option::Option<crate::types::AggregationFunction>,
}
impl ColumnSort {
    /// <p>A column of a data set.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::ColumnIdentifier> {
        self.sort_by.as_ref()
    }
    /// <p>The sort direction.</p>
    pub fn direction(&self) -> &crate::types::SortDirection {
        &self.direction
    }
    /// <p>The aggregation function that is defined in the column sort.</p>
    pub fn aggregation_function(&self) -> ::std::option::Option<&crate::types::AggregationFunction> {
        self.aggregation_function.as_ref()
    }
}
impl ColumnSort {
    /// Creates a new builder-style object to manufacture [`ColumnSort`](crate::types::ColumnSort).
    pub fn builder() -> crate::types::builders::ColumnSortBuilder {
        crate::types::builders::ColumnSortBuilder::default()
    }
}

/// A builder for [`ColumnSort`](crate::types::ColumnSort).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ColumnSortBuilder {
    pub(crate) sort_by: ::std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) direction: ::std::option::Option<crate::types::SortDirection>,
    pub(crate) aggregation_function: ::std::option::Option<crate::types::AggregationFunction>,
}
impl ColumnSortBuilder {
    /// <p>A column of a data set.</p>
    /// This field is required.
    pub fn sort_by(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>A column of a data set.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::ColumnIdentifier>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>A column of a data set.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::ColumnIdentifier> {
        &self.sort_by
    }
    /// <p>The sort direction.</p>
    /// This field is required.
    pub fn direction(mut self, input: crate::types::SortDirection) -> Self {
        self.direction = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort direction.</p>
    pub fn set_direction(mut self, input: ::std::option::Option<crate::types::SortDirection>) -> Self {
        self.direction = input;
        self
    }
    /// <p>The sort direction.</p>
    pub fn get_direction(&self) -> &::std::option::Option<crate::types::SortDirection> {
        &self.direction
    }
    /// <p>The aggregation function that is defined in the column sort.</p>
    pub fn aggregation_function(mut self, input: crate::types::AggregationFunction) -> Self {
        self.aggregation_function = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregation function that is defined in the column sort.</p>
    pub fn set_aggregation_function(mut self, input: ::std::option::Option<crate::types::AggregationFunction>) -> Self {
        self.aggregation_function = input;
        self
    }
    /// <p>The aggregation function that is defined in the column sort.</p>
    pub fn get_aggregation_function(&self) -> &::std::option::Option<crate::types::AggregationFunction> {
        &self.aggregation_function
    }
    /// Consumes the builder and constructs a [`ColumnSort`](crate::types::ColumnSort).
    /// This method will fail if any of the following fields are not set:
    /// - [`direction`](crate::types::builders::ColumnSortBuilder::direction)
    pub fn build(self) -> ::std::result::Result<crate::types::ColumnSort, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ColumnSort {
            sort_by: self.sort_by,
            direction: self.direction.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "direction",
                    "direction was not specified but it is required when building ColumnSort",
                )
            })?,
            aggregation_function: self.aggregation_function,
        })
    }
}
