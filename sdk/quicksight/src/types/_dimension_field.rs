// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The dimension type field.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DimensionField {
    /// <p>The dimension type field with numerical type columns.</p>
    #[doc(hidden)]
    pub numerical_dimension_field: std::option::Option<crate::types::NumericalDimensionField>,
    /// <p>The dimension type field with categorical type columns.</p>
    #[doc(hidden)]
    pub categorical_dimension_field: std::option::Option<crate::types::CategoricalDimensionField>,
    /// <p>The dimension type field with date type columns.</p>
    #[doc(hidden)]
    pub date_dimension_field: std::option::Option<crate::types::DateDimensionField>,
}
impl DimensionField {
    /// <p>The dimension type field with numerical type columns.</p>
    pub fn numerical_dimension_field(
        &self,
    ) -> std::option::Option<&crate::types::NumericalDimensionField> {
        self.numerical_dimension_field.as_ref()
    }
    /// <p>The dimension type field with categorical type columns.</p>
    pub fn categorical_dimension_field(
        &self,
    ) -> std::option::Option<&crate::types::CategoricalDimensionField> {
        self.categorical_dimension_field.as_ref()
    }
    /// <p>The dimension type field with date type columns.</p>
    pub fn date_dimension_field(&self) -> std::option::Option<&crate::types::DateDimensionField> {
        self.date_dimension_field.as_ref()
    }
}
impl DimensionField {
    /// Creates a new builder-style object to manufacture [`DimensionField`](crate::types::DimensionField).
    pub fn builder() -> crate::types::builders::DimensionFieldBuilder {
        crate::types::builders::DimensionFieldBuilder::default()
    }
}

/// A builder for [`DimensionField`](crate::types::DimensionField).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DimensionFieldBuilder {
    pub(crate) numerical_dimension_field:
        std::option::Option<crate::types::NumericalDimensionField>,
    pub(crate) categorical_dimension_field:
        std::option::Option<crate::types::CategoricalDimensionField>,
    pub(crate) date_dimension_field: std::option::Option<crate::types::DateDimensionField>,
}
impl DimensionFieldBuilder {
    /// <p>The dimension type field with numerical type columns.</p>
    pub fn numerical_dimension_field(
        mut self,
        input: crate::types::NumericalDimensionField,
    ) -> Self {
        self.numerical_dimension_field = Some(input);
        self
    }
    /// <p>The dimension type field with numerical type columns.</p>
    pub fn set_numerical_dimension_field(
        mut self,
        input: std::option::Option<crate::types::NumericalDimensionField>,
    ) -> Self {
        self.numerical_dimension_field = input;
        self
    }
    /// <p>The dimension type field with categorical type columns.</p>
    pub fn categorical_dimension_field(
        mut self,
        input: crate::types::CategoricalDimensionField,
    ) -> Self {
        self.categorical_dimension_field = Some(input);
        self
    }
    /// <p>The dimension type field with categorical type columns.</p>
    pub fn set_categorical_dimension_field(
        mut self,
        input: std::option::Option<crate::types::CategoricalDimensionField>,
    ) -> Self {
        self.categorical_dimension_field = input;
        self
    }
    /// <p>The dimension type field with date type columns.</p>
    pub fn date_dimension_field(mut self, input: crate::types::DateDimensionField) -> Self {
        self.date_dimension_field = Some(input);
        self
    }
    /// <p>The dimension type field with date type columns.</p>
    pub fn set_date_dimension_field(
        mut self,
        input: std::option::Option<crate::types::DateDimensionField>,
    ) -> Self {
        self.date_dimension_field = input;
        self
    }
    /// Consumes the builder and constructs a [`DimensionField`](crate::types::DimensionField).
    pub fn build(self) -> crate::types::DimensionField {
        crate::types::DimensionField {
            numerical_dimension_field: self.numerical_dimension_field,
            categorical_dimension_field: self.categorical_dimension_field,
            date_dimension_field: self.date_dimension_field,
        }
    }
}
