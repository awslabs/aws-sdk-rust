// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the configuration of a shared link to an Amazon Quick Sight dashboard.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetBundleResourceLinkSharingConfiguration {
    /// <p>A list of link sharing permissions for the dashboards that you want to apply overrides to.</p>
    pub permissions: ::std::option::Option<crate::types::AssetBundleResourcePermissions>,
}
impl AssetBundleResourceLinkSharingConfiguration {
    /// <p>A list of link sharing permissions for the dashboards that you want to apply overrides to.</p>
    pub fn permissions(&self) -> ::std::option::Option<&crate::types::AssetBundleResourcePermissions> {
        self.permissions.as_ref()
    }
}
impl AssetBundleResourceLinkSharingConfiguration {
    /// Creates a new builder-style object to manufacture [`AssetBundleResourceLinkSharingConfiguration`](crate::types::AssetBundleResourceLinkSharingConfiguration).
    pub fn builder() -> crate::types::builders::AssetBundleResourceLinkSharingConfigurationBuilder {
        crate::types::builders::AssetBundleResourceLinkSharingConfigurationBuilder::default()
    }
}

/// A builder for [`AssetBundleResourceLinkSharingConfiguration`](crate::types::AssetBundleResourceLinkSharingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssetBundleResourceLinkSharingConfigurationBuilder {
    pub(crate) permissions: ::std::option::Option<crate::types::AssetBundleResourcePermissions>,
}
impl AssetBundleResourceLinkSharingConfigurationBuilder {
    /// <p>A list of link sharing permissions for the dashboards that you want to apply overrides to.</p>
    pub fn permissions(mut self, input: crate::types::AssetBundleResourcePermissions) -> Self {
        self.permissions = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of link sharing permissions for the dashboards that you want to apply overrides to.</p>
    pub fn set_permissions(mut self, input: ::std::option::Option<crate::types::AssetBundleResourcePermissions>) -> Self {
        self.permissions = input;
        self
    }
    /// <p>A list of link sharing permissions for the dashboards that you want to apply overrides to.</p>
    pub fn get_permissions(&self) -> &::std::option::Option<crate::types::AssetBundleResourcePermissions> {
        &self.permissions
    }
    /// Consumes the builder and constructs a [`AssetBundleResourceLinkSharingConfiguration`](crate::types::AssetBundleResourceLinkSharingConfiguration).
    pub fn build(self) -> crate::types::AssetBundleResourceLinkSharingConfiguration {
        crate::types::AssetBundleResourceLinkSharingConfiguration {
            permissions: self.permissions,
        }
    }
}
