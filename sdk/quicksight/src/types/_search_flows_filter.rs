// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the filter information when searching flows.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchFlowsFilter {
    /// <p>The name of the value that you want to use as a filter, for example <code>"Name": "DIRECT_QUICKSIGHT_SOLE_OWNER"</code>.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>assetName</code>: Any flows whose names have a substring match to this value will be returned.</p></li>
    /// <li>
    /// <p><code>assetDescription</code>: Any flows whose descriptions have a substring match to this value will be returned.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_SOLE_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as the only owner of the analysis are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as one of the owners of the analyses are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_VIEWER_OR_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as one of the owners or viewers of the analyses are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// </ul>
    pub name: crate::types::FieldName,
    /// <p>The comparison operator that you want to use as a filter, for example <code>"Operator": "StringEquals"</code>. Valid values are <code>"StringEquals"</code> and <code>"StringLike"</code>.</p>
    pub operator: crate::types::SearchFilterOperator,
    /// <p>The value of the named item, in this case <code>DIRECT_QUICKSIGHT_SOLE_OWNER</code>, that you want to use as a filter, for example <code>"Value"</code>. An example is <code>"arn:aws:quicksight:us-east-1:1:user/default/UserName1"</code>.</p>
    pub value: ::std::string::String,
}
impl SearchFlowsFilter {
    /// <p>The name of the value that you want to use as a filter, for example <code>"Name": "DIRECT_QUICKSIGHT_SOLE_OWNER"</code>.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>assetName</code>: Any flows whose names have a substring match to this value will be returned.</p></li>
    /// <li>
    /// <p><code>assetDescription</code>: Any flows whose descriptions have a substring match to this value will be returned.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_SOLE_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as the only owner of the analysis are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as one of the owners of the analyses are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_VIEWER_OR_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as one of the owners or viewers of the analyses are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// </ul>
    pub fn name(&self) -> &crate::types::FieldName {
        &self.name
    }
    /// <p>The comparison operator that you want to use as a filter, for example <code>"Operator": "StringEquals"</code>. Valid values are <code>"StringEquals"</code> and <code>"StringLike"</code>.</p>
    pub fn operator(&self) -> &crate::types::SearchFilterOperator {
        &self.operator
    }
    /// <p>The value of the named item, in this case <code>DIRECT_QUICKSIGHT_SOLE_OWNER</code>, that you want to use as a filter, for example <code>"Value"</code>. An example is <code>"arn:aws:quicksight:us-east-1:1:user/default/UserName1"</code>.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
}
impl SearchFlowsFilter {
    /// Creates a new builder-style object to manufacture [`SearchFlowsFilter`](crate::types::SearchFlowsFilter).
    pub fn builder() -> crate::types::builders::SearchFlowsFilterBuilder {
        crate::types::builders::SearchFlowsFilterBuilder::default()
    }
}

/// A builder for [`SearchFlowsFilter`](crate::types::SearchFlowsFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchFlowsFilterBuilder {
    pub(crate) name: ::std::option::Option<crate::types::FieldName>,
    pub(crate) operator: ::std::option::Option<crate::types::SearchFilterOperator>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl SearchFlowsFilterBuilder {
    /// <p>The name of the value that you want to use as a filter, for example <code>"Name": "DIRECT_QUICKSIGHT_SOLE_OWNER"</code>.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>assetName</code>: Any flows whose names have a substring match to this value will be returned.</p></li>
    /// <li>
    /// <p><code>assetDescription</code>: Any flows whose descriptions have a substring match to this value will be returned.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_SOLE_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as the only owner of the analysis are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as one of the owners of the analyses are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_VIEWER_OR_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as one of the owners or viewers of the analyses are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// </ul>
    /// This field is required.
    pub fn name(mut self, input: crate::types::FieldName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the value that you want to use as a filter, for example <code>"Name": "DIRECT_QUICKSIGHT_SOLE_OWNER"</code>.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>assetName</code>: Any flows whose names have a substring match to this value will be returned.</p></li>
    /// <li>
    /// <p><code>assetDescription</code>: Any flows whose descriptions have a substring match to this value will be returned.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_SOLE_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as the only owner of the analysis are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as one of the owners of the analyses are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_VIEWER_OR_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as one of the owners or viewers of the analyses are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// </ul>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::FieldName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the value that you want to use as a filter, for example <code>"Name": "DIRECT_QUICKSIGHT_SOLE_OWNER"</code>.</p>
    /// <p>Valid values are defined as follows:</p>
    /// <ul>
    /// <li>
    /// <p><code>assetName</code>: Any flows whose names have a substring match to this value will be returned.</p></li>
    /// <li>
    /// <p><code>assetDescription</code>: Any flows whose descriptions have a substring match to this value will be returned.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_SOLE_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as the only owner of the analysis are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as one of the owners of the analyses are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// <li>
    /// <p><code>DIRECT_QUICKSIGHT_VIEWER_OR_OWNER</code>: Provide an ARN of a user or group, and any analyses with that ARN listed as one of the owners or viewers of the analyses are returned. Implicit permissions from folders or groups are not considered.</p></li>
    /// </ul>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::FieldName> {
        &self.name
    }
    /// <p>The comparison operator that you want to use as a filter, for example <code>"Operator": "StringEquals"</code>. Valid values are <code>"StringEquals"</code> and <code>"StringLike"</code>.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::SearchFilterOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The comparison operator that you want to use as a filter, for example <code>"Operator": "StringEquals"</code>. Valid values are <code>"StringEquals"</code> and <code>"StringLike"</code>.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::SearchFilterOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The comparison operator that you want to use as a filter, for example <code>"Operator": "StringEquals"</code>. Valid values are <code>"StringEquals"</code> and <code>"StringLike"</code>.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::SearchFilterOperator> {
        &self.operator
    }
    /// <p>The value of the named item, in this case <code>DIRECT_QUICKSIGHT_SOLE_OWNER</code>, that you want to use as a filter, for example <code>"Value"</code>. An example is <code>"arn:aws:quicksight:us-east-1:1:user/default/UserName1"</code>.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the named item, in this case <code>DIRECT_QUICKSIGHT_SOLE_OWNER</code>, that you want to use as a filter, for example <code>"Value"</code>. An example is <code>"arn:aws:quicksight:us-east-1:1:user/default/UserName1"</code>.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the named item, in this case <code>DIRECT_QUICKSIGHT_SOLE_OWNER</code>, that you want to use as a filter, for example <code>"Value"</code>. An example is <code>"arn:aws:quicksight:us-east-1:1:user/default/UserName1"</code>.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`SearchFlowsFilter`](crate::types::SearchFlowsFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::SearchFlowsFilterBuilder::name)
    /// - [`operator`](crate::types::builders::SearchFlowsFilterBuilder::operator)
    /// - [`value`](crate::types::builders::SearchFlowsFilterBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchFlowsFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchFlowsFilter {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building SearchFlowsFilter",
                )
            })?,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building SearchFlowsFilter",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building SearchFlowsFilter",
                )
            })?,
        })
    }
}
