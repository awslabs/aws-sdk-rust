// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains detailed information about an action connector, including its configuration, status, and enabled actions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ActionConnector {
    /// <p>The Amazon Resource Name (ARN) of the action connector.</p>
    pub arn: ::std::string::String,
    /// <p>The unique identifier of the action connector.</p>
    pub action_connector_id: ::std::string::String,
    /// <p>The type of action connector.</p>
    pub r#type: crate::types::ActionConnectorType,
    /// <p>The name of the action connector.</p>
    pub name: ::std::string::String,
    /// <p>The timestamp when the action connector was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the action connector was last updated.</p>
    pub last_updated_time: ::aws_smithy_types::DateTime,
    /// <p>The current status of the action connector.</p>
    pub status: ::std::option::Option<crate::types::ResourceStatus>,
    /// <p>Error information if the action connector is in an error state.</p>
    pub error: ::std::option::Option<crate::types::ActionConnectorError>,
    /// <p>The description of the action connector.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The authentication configuration used to connect to the external service.</p>
    pub authentication_config: ::std::option::Option<crate::types::ReadAuthConfig>,
    /// <p>The list of actions that are enabled for this connector.</p>
    pub enabled_actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ARN of the VPC connection used for secure connectivity to the external service.</p>
    pub vpc_connection_arn: ::std::option::Option<::std::string::String>,
}
impl ActionConnector {
    /// <p>The Amazon Resource Name (ARN) of the action connector.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The unique identifier of the action connector.</p>
    pub fn action_connector_id(&self) -> &str {
        use std::ops::Deref;
        self.action_connector_id.deref()
    }
    /// <p>The type of action connector.</p>
    pub fn r#type(&self) -> &crate::types::ActionConnectorType {
        &self.r#type
    }
    /// <p>The name of the action connector.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The timestamp when the action connector was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The date and time when the action connector was last updated.</p>
    pub fn last_updated_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_time
    }
    /// <p>The current status of the action connector.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ResourceStatus> {
        self.status.as_ref()
    }
    /// <p>Error information if the action connector is in an error state.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ActionConnectorError> {
        self.error.as_ref()
    }
    /// <p>The description of the action connector.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The authentication configuration used to connect to the external service.</p>
    pub fn authentication_config(&self) -> ::std::option::Option<&crate::types::ReadAuthConfig> {
        self.authentication_config.as_ref()
    }
    /// <p>The list of actions that are enabled for this connector.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enabled_actions.is_none()`.
    pub fn enabled_actions(&self) -> &[::std::string::String] {
        self.enabled_actions.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the VPC connection used for secure connectivity to the external service.</p>
    pub fn vpc_connection_arn(&self) -> ::std::option::Option<&str> {
        self.vpc_connection_arn.as_deref()
    }
}
impl ::std::fmt::Debug for ActionConnector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ActionConnector");
        formatter.field("arn", &self.arn);
        formatter.field("action_connector_id", &self.action_connector_id);
        formatter.field("r#type", &self.r#type);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("created_time", &self.created_time);
        formatter.field("last_updated_time", &self.last_updated_time);
        formatter.field("status", &self.status);
        formatter.field("error", &self.error);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("authentication_config", &self.authentication_config);
        formatter.field("enabled_actions", &self.enabled_actions);
        formatter.field("vpc_connection_arn", &self.vpc_connection_arn);
        formatter.finish()
    }
}
impl ActionConnector {
    /// Creates a new builder-style object to manufacture [`ActionConnector`](crate::types::ActionConnector).
    pub fn builder() -> crate::types::builders::ActionConnectorBuilder {
        crate::types::builders::ActionConnectorBuilder::default()
    }
}

/// A builder for [`ActionConnector`](crate::types::ActionConnector).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ActionConnectorBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) action_connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ActionConnectorType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::ResourceStatus>,
    pub(crate) error: ::std::option::Option<crate::types::ActionConnectorError>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_config: ::std::option::Option<crate::types::ReadAuthConfig>,
    pub(crate) enabled_actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) vpc_connection_arn: ::std::option::Option<::std::string::String>,
}
impl ActionConnectorBuilder {
    /// <p>The Amazon Resource Name (ARN) of the action connector.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the action connector.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the action connector.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique identifier of the action connector.</p>
    /// This field is required.
    pub fn action_connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the action connector.</p>
    pub fn set_action_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_connector_id = input;
        self
    }
    /// <p>The unique identifier of the action connector.</p>
    pub fn get_action_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_connector_id
    }
    /// <p>The type of action connector.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ActionConnectorType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of action connector.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ActionConnectorType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of action connector.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ActionConnectorType> {
        &self.r#type
    }
    /// <p>The name of the action connector.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the action connector.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the action connector.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The timestamp when the action connector was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the action connector was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp when the action connector was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The date and time when the action connector was last updated.</p>
    /// This field is required.
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the action connector was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The date and time when the action connector was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>The current status of the action connector.</p>
    pub fn status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the action connector.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the action connector.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceStatus> {
        &self.status
    }
    /// <p>Error information if the action connector is in an error state.</p>
    pub fn error(mut self, input: crate::types::ActionConnectorError) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Error information if the action connector is in an error state.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ActionConnectorError>) -> Self {
        self.error = input;
        self
    }
    /// <p>Error information if the action connector is in an error state.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ActionConnectorError> {
        &self.error
    }
    /// <p>The description of the action connector.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the action connector.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the action connector.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The authentication configuration used to connect to the external service.</p>
    pub fn authentication_config(mut self, input: crate::types::ReadAuthConfig) -> Self {
        self.authentication_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration used to connect to the external service.</p>
    pub fn set_authentication_config(mut self, input: ::std::option::Option<crate::types::ReadAuthConfig>) -> Self {
        self.authentication_config = input;
        self
    }
    /// <p>The authentication configuration used to connect to the external service.</p>
    pub fn get_authentication_config(&self) -> &::std::option::Option<crate::types::ReadAuthConfig> {
        &self.authentication_config
    }
    /// Appends an item to `enabled_actions`.
    ///
    /// To override the contents of this collection use [`set_enabled_actions`](Self::set_enabled_actions).
    ///
    /// <p>The list of actions that are enabled for this connector.</p>
    pub fn enabled_actions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.enabled_actions.unwrap_or_default();
        v.push(input.into());
        self.enabled_actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of actions that are enabled for this connector.</p>
    pub fn set_enabled_actions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.enabled_actions = input;
        self
    }
    /// <p>The list of actions that are enabled for this connector.</p>
    pub fn get_enabled_actions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.enabled_actions
    }
    /// <p>The ARN of the VPC connection used for secure connectivity to the external service.</p>
    pub fn vpc_connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_connection_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the VPC connection used for secure connectivity to the external service.</p>
    pub fn set_vpc_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_connection_arn = input;
        self
    }
    /// <p>The ARN of the VPC connection used for secure connectivity to the external service.</p>
    pub fn get_vpc_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_connection_arn
    }
    /// Consumes the builder and constructs a [`ActionConnector`](crate::types::ActionConnector).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ActionConnectorBuilder::arn)
    /// - [`action_connector_id`](crate::types::builders::ActionConnectorBuilder::action_connector_id)
    /// - [`r#type`](crate::types::builders::ActionConnectorBuilder::type)
    /// - [`name`](crate::types::builders::ActionConnectorBuilder::name)
    /// - [`last_updated_time`](crate::types::builders::ActionConnectorBuilder::last_updated_time)
    pub fn build(self) -> ::std::result::Result<crate::types::ActionConnector, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ActionConnector {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ActionConnector",
                )
            })?,
            action_connector_id: self.action_connector_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_connector_id",
                    "action_connector_id was not specified but it is required when building ActionConnector",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building ActionConnector",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ActionConnector",
                )
            })?,
            created_time: self.created_time,
            last_updated_time: self.last_updated_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_time",
                    "last_updated_time was not specified but it is required when building ActionConnector",
                )
            })?,
            status: self.status,
            error: self.error,
            description: self.description,
            authentication_config: self.authentication_config,
            enabled_actions: self.enabled_actions,
            vpc_connection_arn: self.vpc_connection_arn,
        })
    }
}
impl ::std::fmt::Debug for ActionConnectorBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ActionConnectorBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("action_connector_id", &self.action_connector_id);
        formatter.field("r#type", &self.r#type);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("created_time", &self.created_time);
        formatter.field("last_updated_time", &self.last_updated_time);
        formatter.field("status", &self.status);
        formatter.field("error", &self.error);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("authentication_config", &self.authentication_config);
        formatter.field("enabled_actions", &self.enabled_actions);
        formatter.field("vpc_connection_arn", &self.vpc_connection_arn);
        formatter.finish()
    }
}
