// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The setup for the detailed tooltip.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldBasedTooltip {
    /// <p>The visibility of <code>Show aggregations</code>.</p>
    #[doc(hidden)]
    pub aggregation_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>The type for the &gt;tooltip title. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code>: Doesn't use the primary value as the title.</p> </li>
    /// <li> <p> <code>PRIMARY_VALUE</code>: Uses primary value as the title.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub tooltip_title_type: std::option::Option<crate::types::TooltipTitleType>,
    /// <p>The fields configuration in the tooltip.</p>
    #[doc(hidden)]
    pub tooltip_fields: std::option::Option<std::vec::Vec<crate::types::TooltipItem>>,
}
impl FieldBasedTooltip {
    /// <p>The visibility of <code>Show aggregations</code>.</p>
    pub fn aggregation_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.aggregation_visibility.as_ref()
    }
    /// <p>The type for the &gt;tooltip title. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code>: Doesn't use the primary value as the title.</p> </li>
    /// <li> <p> <code>PRIMARY_VALUE</code>: Uses primary value as the title.</p> </li>
    /// </ul>
    pub fn tooltip_title_type(&self) -> std::option::Option<&crate::types::TooltipTitleType> {
        self.tooltip_title_type.as_ref()
    }
    /// <p>The fields configuration in the tooltip.</p>
    pub fn tooltip_fields(&self) -> std::option::Option<&[crate::types::TooltipItem]> {
        self.tooltip_fields.as_deref()
    }
}
impl FieldBasedTooltip {
    /// Creates a new builder-style object to manufacture [`FieldBasedTooltip`](crate::types::FieldBasedTooltip).
    pub fn builder() -> crate::types::builders::FieldBasedTooltipBuilder {
        crate::types::builders::FieldBasedTooltipBuilder::default()
    }
}

/// A builder for [`FieldBasedTooltip`](crate::types::FieldBasedTooltip).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldBasedTooltipBuilder {
    pub(crate) aggregation_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) tooltip_title_type: std::option::Option<crate::types::TooltipTitleType>,
    pub(crate) tooltip_fields: std::option::Option<std::vec::Vec<crate::types::TooltipItem>>,
}
impl FieldBasedTooltipBuilder {
    /// <p>The visibility of <code>Show aggregations</code>.</p>
    pub fn aggregation_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.aggregation_visibility = Some(input);
        self
    }
    /// <p>The visibility of <code>Show aggregations</code>.</p>
    pub fn set_aggregation_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.aggregation_visibility = input;
        self
    }
    /// <p>The type for the &gt;tooltip title. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code>: Doesn't use the primary value as the title.</p> </li>
    /// <li> <p> <code>PRIMARY_VALUE</code>: Uses primary value as the title.</p> </li>
    /// </ul>
    pub fn tooltip_title_type(mut self, input: crate::types::TooltipTitleType) -> Self {
        self.tooltip_title_type = Some(input);
        self
    }
    /// <p>The type for the &gt;tooltip title. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>NONE</code>: Doesn't use the primary value as the title.</p> </li>
    /// <li> <p> <code>PRIMARY_VALUE</code>: Uses primary value as the title.</p> </li>
    /// </ul>
    pub fn set_tooltip_title_type(
        mut self,
        input: std::option::Option<crate::types::TooltipTitleType>,
    ) -> Self {
        self.tooltip_title_type = input;
        self
    }
    /// Appends an item to `tooltip_fields`.
    ///
    /// To override the contents of this collection use [`set_tooltip_fields`](Self::set_tooltip_fields).
    ///
    /// <p>The fields configuration in the tooltip.</p>
    pub fn tooltip_fields(mut self, input: crate::types::TooltipItem) -> Self {
        let mut v = self.tooltip_fields.unwrap_or_default();
        v.push(input);
        self.tooltip_fields = Some(v);
        self
    }
    /// <p>The fields configuration in the tooltip.</p>
    pub fn set_tooltip_fields(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TooltipItem>>,
    ) -> Self {
        self.tooltip_fields = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldBasedTooltip`](crate::types::FieldBasedTooltip).
    pub fn build(self) -> crate::types::FieldBasedTooltip {
        crate::types::FieldBasedTooltip {
            aggregation_visibility: self.aggregation_visibility,
            tooltip_title_type: self.tooltip_title_type,
            tooltip_fields: self.tooltip_fields,
        }
    }
}
