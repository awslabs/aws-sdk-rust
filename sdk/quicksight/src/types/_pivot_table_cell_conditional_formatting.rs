// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The cell conditional formatting option for a pivot table.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PivotTableCellConditionalFormatting {
    /// <p>The field ID of the cell for conditional formatting.</p>
    pub field_id: ::std::string::String,
    /// <p>The text format of the cell for conditional formatting.</p>
    pub text_format: ::std::option::Option<crate::types::TextConditionalFormat>,
    /// <p>The scope of the cell for conditional formatting.</p>
    pub scope: ::std::option::Option<crate::types::PivotTableConditionalFormattingScope>,
    /// <p>A list of cell scopes for conditional formatting.</p>
    pub scopes: ::std::option::Option<::std::vec::Vec<crate::types::PivotTableConditionalFormattingScope>>,
}
impl PivotTableCellConditionalFormatting {
    /// <p>The field ID of the cell for conditional formatting.</p>
    pub fn field_id(&self) -> &str {
        use std::ops::Deref;
        self.field_id.deref()
    }
    /// <p>The text format of the cell for conditional formatting.</p>
    pub fn text_format(&self) -> ::std::option::Option<&crate::types::TextConditionalFormat> {
        self.text_format.as_ref()
    }
    /// <p>The scope of the cell for conditional formatting.</p>
    pub fn scope(&self) -> ::std::option::Option<&crate::types::PivotTableConditionalFormattingScope> {
        self.scope.as_ref()
    }
    /// <p>A list of cell scopes for conditional formatting.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scopes.is_none()`.
    pub fn scopes(&self) -> &[crate::types::PivotTableConditionalFormattingScope] {
        self.scopes.as_deref().unwrap_or_default()
    }
}
impl PivotTableCellConditionalFormatting {
    /// Creates a new builder-style object to manufacture [`PivotTableCellConditionalFormatting`](crate::types::PivotTableCellConditionalFormatting).
    pub fn builder() -> crate::types::builders::PivotTableCellConditionalFormattingBuilder {
        crate::types::builders::PivotTableCellConditionalFormattingBuilder::default()
    }
}

/// A builder for [`PivotTableCellConditionalFormatting`](crate::types::PivotTableCellConditionalFormatting).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PivotTableCellConditionalFormattingBuilder {
    pub(crate) field_id: ::std::option::Option<::std::string::String>,
    pub(crate) text_format: ::std::option::Option<crate::types::TextConditionalFormat>,
    pub(crate) scope: ::std::option::Option<crate::types::PivotTableConditionalFormattingScope>,
    pub(crate) scopes: ::std::option::Option<::std::vec::Vec<crate::types::PivotTableConditionalFormattingScope>>,
}
impl PivotTableCellConditionalFormattingBuilder {
    /// <p>The field ID of the cell for conditional formatting.</p>
    /// This field is required.
    pub fn field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field ID of the cell for conditional formatting.</p>
    pub fn set_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The field ID of the cell for conditional formatting.</p>
    pub fn get_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_id
    }
    /// <p>The text format of the cell for conditional formatting.</p>
    pub fn text_format(mut self, input: crate::types::TextConditionalFormat) -> Self {
        self.text_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The text format of the cell for conditional formatting.</p>
    pub fn set_text_format(mut self, input: ::std::option::Option<crate::types::TextConditionalFormat>) -> Self {
        self.text_format = input;
        self
    }
    /// <p>The text format of the cell for conditional formatting.</p>
    pub fn get_text_format(&self) -> &::std::option::Option<crate::types::TextConditionalFormat> {
        &self.text_format
    }
    /// <p>The scope of the cell for conditional formatting.</p>
    pub fn scope(mut self, input: crate::types::PivotTableConditionalFormattingScope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of the cell for conditional formatting.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::PivotTableConditionalFormattingScope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The scope of the cell for conditional formatting.</p>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::PivotTableConditionalFormattingScope> {
        &self.scope
    }
    /// Appends an item to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>A list of cell scopes for conditional formatting.</p>
    pub fn scopes(mut self, input: crate::types::PivotTableConditionalFormattingScope) -> Self {
        let mut v = self.scopes.unwrap_or_default();
        v.push(input);
        self.scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of cell scopes for conditional formatting.</p>
    pub fn set_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PivotTableConditionalFormattingScope>>) -> Self {
        self.scopes = input;
        self
    }
    /// <p>A list of cell scopes for conditional formatting.</p>
    pub fn get_scopes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PivotTableConditionalFormattingScope>> {
        &self.scopes
    }
    /// Consumes the builder and constructs a [`PivotTableCellConditionalFormatting`](crate::types::PivotTableCellConditionalFormatting).
    /// This method will fail if any of the following fields are not set:
    /// - [`field_id`](crate::types::builders::PivotTableCellConditionalFormattingBuilder::field_id)
    pub fn build(self) -> ::std::result::Result<crate::types::PivotTableCellConditionalFormatting, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PivotTableCellConditionalFormatting {
            field_id: self.field_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_id",
                    "field_id was not specified but it is required when building PivotTableCellConditionalFormatting",
                )
            })?,
            text_format: self.text_format,
            scope: self.scope,
            scopes: self.scopes,
        })
    }
}
