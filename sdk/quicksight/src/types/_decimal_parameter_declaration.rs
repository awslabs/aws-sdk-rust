// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A parameter declaration for the <code>Decimal</code> data type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DecimalParameterDeclaration {
    /// <p>The value type determines whether the parameter is a single-value or multi-value parameter.</p>
    pub parameter_value_type: crate::types::ParameterValueType,
    /// <p>The name of the parameter that is being declared.</p>
    pub name: ::std::string::String,
    /// <p>The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.</p>
    pub default_values: ::std::option::Option<crate::types::DecimalDefaultValues>,
    /// <p>The configuration that defines the default value of a <code>Decimal</code> parameter when a value has not been set.</p>
    pub value_when_unset: ::std::option::Option<crate::types::DecimalValueWhenUnsetConfiguration>,
    /// <p>A list of dataset parameters that are mapped to an analysis parameter.</p>
    pub mapped_data_set_parameters: ::std::option::Option<::std::vec::Vec<crate::types::MappedDataSetParameter>>,
}
impl DecimalParameterDeclaration {
    /// <p>The value type determines whether the parameter is a single-value or multi-value parameter.</p>
    pub fn parameter_value_type(&self) -> &crate::types::ParameterValueType {
        &self.parameter_value_type
    }
    /// <p>The name of the parameter that is being declared.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.</p>
    pub fn default_values(&self) -> ::std::option::Option<&crate::types::DecimalDefaultValues> {
        self.default_values.as_ref()
    }
    /// <p>The configuration that defines the default value of a <code>Decimal</code> parameter when a value has not been set.</p>
    pub fn value_when_unset(&self) -> ::std::option::Option<&crate::types::DecimalValueWhenUnsetConfiguration> {
        self.value_when_unset.as_ref()
    }
    /// <p>A list of dataset parameters that are mapped to an analysis parameter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.mapped_data_set_parameters.is_none()`.
    pub fn mapped_data_set_parameters(&self) -> &[crate::types::MappedDataSetParameter] {
        self.mapped_data_set_parameters.as_deref().unwrap_or_default()
    }
}
impl DecimalParameterDeclaration {
    /// Creates a new builder-style object to manufacture [`DecimalParameterDeclaration`](crate::types::DecimalParameterDeclaration).
    pub fn builder() -> crate::types::builders::DecimalParameterDeclarationBuilder {
        crate::types::builders::DecimalParameterDeclarationBuilder::default()
    }
}

/// A builder for [`DecimalParameterDeclaration`](crate::types::DecimalParameterDeclaration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DecimalParameterDeclarationBuilder {
    pub(crate) parameter_value_type: ::std::option::Option<crate::types::ParameterValueType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) default_values: ::std::option::Option<crate::types::DecimalDefaultValues>,
    pub(crate) value_when_unset: ::std::option::Option<crate::types::DecimalValueWhenUnsetConfiguration>,
    pub(crate) mapped_data_set_parameters: ::std::option::Option<::std::vec::Vec<crate::types::MappedDataSetParameter>>,
}
impl DecimalParameterDeclarationBuilder {
    /// <p>The value type determines whether the parameter is a single-value or multi-value parameter.</p>
    /// This field is required.
    pub fn parameter_value_type(mut self, input: crate::types::ParameterValueType) -> Self {
        self.parameter_value_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value type determines whether the parameter is a single-value or multi-value parameter.</p>
    pub fn set_parameter_value_type(mut self, input: ::std::option::Option<crate::types::ParameterValueType>) -> Self {
        self.parameter_value_type = input;
        self
    }
    /// <p>The value type determines whether the parameter is a single-value or multi-value parameter.</p>
    pub fn get_parameter_value_type(&self) -> &::std::option::Option<crate::types::ParameterValueType> {
        &self.parameter_value_type
    }
    /// <p>The name of the parameter that is being declared.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the parameter that is being declared.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the parameter that is being declared.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.</p>
    pub fn default_values(mut self, input: crate::types::DecimalDefaultValues) -> Self {
        self.default_values = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.</p>
    pub fn set_default_values(mut self, input: ::std::option::Option<crate::types::DecimalDefaultValues>) -> Self {
        self.default_values = input;
        self
    }
    /// <p>The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.</p>
    pub fn get_default_values(&self) -> &::std::option::Option<crate::types::DecimalDefaultValues> {
        &self.default_values
    }
    /// <p>The configuration that defines the default value of a <code>Decimal</code> parameter when a value has not been set.</p>
    pub fn value_when_unset(mut self, input: crate::types::DecimalValueWhenUnsetConfiguration) -> Self {
        self.value_when_unset = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration that defines the default value of a <code>Decimal</code> parameter when a value has not been set.</p>
    pub fn set_value_when_unset(mut self, input: ::std::option::Option<crate::types::DecimalValueWhenUnsetConfiguration>) -> Self {
        self.value_when_unset = input;
        self
    }
    /// <p>The configuration that defines the default value of a <code>Decimal</code> parameter when a value has not been set.</p>
    pub fn get_value_when_unset(&self) -> &::std::option::Option<crate::types::DecimalValueWhenUnsetConfiguration> {
        &self.value_when_unset
    }
    /// Appends an item to `mapped_data_set_parameters`.
    ///
    /// To override the contents of this collection use [`set_mapped_data_set_parameters`](Self::set_mapped_data_set_parameters).
    ///
    /// <p>A list of dataset parameters that are mapped to an analysis parameter.</p>
    pub fn mapped_data_set_parameters(mut self, input: crate::types::MappedDataSetParameter) -> Self {
        let mut v = self.mapped_data_set_parameters.unwrap_or_default();
        v.push(input);
        self.mapped_data_set_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of dataset parameters that are mapped to an analysis parameter.</p>
    pub fn set_mapped_data_set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MappedDataSetParameter>>) -> Self {
        self.mapped_data_set_parameters = input;
        self
    }
    /// <p>A list of dataset parameters that are mapped to an analysis parameter.</p>
    pub fn get_mapped_data_set_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MappedDataSetParameter>> {
        &self.mapped_data_set_parameters
    }
    /// Consumes the builder and constructs a [`DecimalParameterDeclaration`](crate::types::DecimalParameterDeclaration).
    /// This method will fail if any of the following fields are not set:
    /// - [`parameter_value_type`](crate::types::builders::DecimalParameterDeclarationBuilder::parameter_value_type)
    /// - [`name`](crate::types::builders::DecimalParameterDeclarationBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::DecimalParameterDeclaration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DecimalParameterDeclaration {
            parameter_value_type: self.parameter_value_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "parameter_value_type",
                    "parameter_value_type was not specified but it is required when building DecimalParameterDeclaration",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DecimalParameterDeclaration",
                )
            })?,
            default_values: self.default_values,
            value_when_unset: self.value_when_unset,
            mapped_data_set_parameters: self.mapped_data_set_parameters,
        })
    }
}
