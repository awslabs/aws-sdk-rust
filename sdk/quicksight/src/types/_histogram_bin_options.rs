// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that determine the presentation of histogram bins.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HistogramBinOptions {
    /// <p>The options that determine the selected bin type.</p>
    #[doc(hidden)]
    pub selected_bin_type: std::option::Option<crate::types::HistogramBinType>,
    /// <p>The options that determine the bin count of a histogram.</p>
    #[doc(hidden)]
    pub bin_count: std::option::Option<crate::types::BinCountOptions>,
    /// <p>The options that determine the bin width of a histogram.</p>
    #[doc(hidden)]
    pub bin_width: std::option::Option<crate::types::BinWidthOptions>,
    /// <p>The options that determine the bin start value.</p>
    #[doc(hidden)]
    pub start_value: std::option::Option<f64>,
}
impl HistogramBinOptions {
    /// <p>The options that determine the selected bin type.</p>
    pub fn selected_bin_type(&self) -> std::option::Option<&crate::types::HistogramBinType> {
        self.selected_bin_type.as_ref()
    }
    /// <p>The options that determine the bin count of a histogram.</p>
    pub fn bin_count(&self) -> std::option::Option<&crate::types::BinCountOptions> {
        self.bin_count.as_ref()
    }
    /// <p>The options that determine the bin width of a histogram.</p>
    pub fn bin_width(&self) -> std::option::Option<&crate::types::BinWidthOptions> {
        self.bin_width.as_ref()
    }
    /// <p>The options that determine the bin start value.</p>
    pub fn start_value(&self) -> std::option::Option<f64> {
        self.start_value
    }
}
impl HistogramBinOptions {
    /// Creates a new builder-style object to manufacture [`HistogramBinOptions`](crate::types::HistogramBinOptions).
    pub fn builder() -> crate::types::builders::HistogramBinOptionsBuilder {
        crate::types::builders::HistogramBinOptionsBuilder::default()
    }
}

/// A builder for [`HistogramBinOptions`](crate::types::HistogramBinOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HistogramBinOptionsBuilder {
    pub(crate) selected_bin_type: std::option::Option<crate::types::HistogramBinType>,
    pub(crate) bin_count: std::option::Option<crate::types::BinCountOptions>,
    pub(crate) bin_width: std::option::Option<crate::types::BinWidthOptions>,
    pub(crate) start_value: std::option::Option<f64>,
}
impl HistogramBinOptionsBuilder {
    /// <p>The options that determine the selected bin type.</p>
    pub fn selected_bin_type(mut self, input: crate::types::HistogramBinType) -> Self {
        self.selected_bin_type = Some(input);
        self
    }
    /// <p>The options that determine the selected bin type.</p>
    pub fn set_selected_bin_type(
        mut self,
        input: std::option::Option<crate::types::HistogramBinType>,
    ) -> Self {
        self.selected_bin_type = input;
        self
    }
    /// <p>The options that determine the bin count of a histogram.</p>
    pub fn bin_count(mut self, input: crate::types::BinCountOptions) -> Self {
        self.bin_count = Some(input);
        self
    }
    /// <p>The options that determine the bin count of a histogram.</p>
    pub fn set_bin_count(
        mut self,
        input: std::option::Option<crate::types::BinCountOptions>,
    ) -> Self {
        self.bin_count = input;
        self
    }
    /// <p>The options that determine the bin width of a histogram.</p>
    pub fn bin_width(mut self, input: crate::types::BinWidthOptions) -> Self {
        self.bin_width = Some(input);
        self
    }
    /// <p>The options that determine the bin width of a histogram.</p>
    pub fn set_bin_width(
        mut self,
        input: std::option::Option<crate::types::BinWidthOptions>,
    ) -> Self {
        self.bin_width = input;
        self
    }
    /// <p>The options that determine the bin start value.</p>
    pub fn start_value(mut self, input: f64) -> Self {
        self.start_value = Some(input);
        self
    }
    /// <p>The options that determine the bin start value.</p>
    pub fn set_start_value(mut self, input: std::option::Option<f64>) -> Self {
        self.start_value = input;
        self
    }
    /// Consumes the builder and constructs a [`HistogramBinOptions`](crate::types::HistogramBinOptions).
    pub fn build(self) -> crate::types::HistogramBinOptions {
        crate::types::HistogramBinOptions {
            selected_bin_type: self.selected_bin_type,
            bin_count: self.bin_count,
            bin_width: self.bin_width,
            start_value: self.start_value,
        }
    }
}
