// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines the color that is applied to a particular data value.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataColor {
    /// <p>The color that is applied to the data value.</p>
    #[doc(hidden)]
    pub color: std::option::Option<std::string::String>,
    /// <p>The data value that the color is applied to.</p>
    #[doc(hidden)]
    pub data_value: std::option::Option<f64>,
}
impl DataColor {
    /// <p>The color that is applied to the data value.</p>
    pub fn color(&self) -> std::option::Option<&str> {
        self.color.as_deref()
    }
    /// <p>The data value that the color is applied to.</p>
    pub fn data_value(&self) -> std::option::Option<f64> {
        self.data_value
    }
}
impl DataColor {
    /// Creates a new builder-style object to manufacture [`DataColor`](crate::types::DataColor).
    pub fn builder() -> crate::types::builders::DataColorBuilder {
        crate::types::builders::DataColorBuilder::default()
    }
}

/// A builder for [`DataColor`](crate::types::DataColor).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataColorBuilder {
    pub(crate) color: std::option::Option<std::string::String>,
    pub(crate) data_value: std::option::Option<f64>,
}
impl DataColorBuilder {
    /// <p>The color that is applied to the data value.</p>
    pub fn color(mut self, input: impl Into<std::string::String>) -> Self {
        self.color = Some(input.into());
        self
    }
    /// <p>The color that is applied to the data value.</p>
    pub fn set_color(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// <p>The data value that the color is applied to.</p>
    pub fn data_value(mut self, input: f64) -> Self {
        self.data_value = Some(input);
        self
    }
    /// <p>The data value that the color is applied to.</p>
    pub fn set_data_value(mut self, input: std::option::Option<f64>) -> Self {
        self.data_value = input;
        self
    }
    /// Consumes the builder and constructs a [`DataColor`](crate::types::DataColor).
    pub fn build(self) -> crate::types::DataColor {
        crate::types::DataColor {
            color: self.color,
            data_value: self.data_value,
        }
    }
}
