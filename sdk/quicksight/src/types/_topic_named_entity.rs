// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that represents a named entity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopicNamedEntity {
    /// <p>The name of the named entity.</p>
    pub entity_name: ::std::string::String,
    /// <p>The description of the named entity.</p>
    pub entity_description: ::std::option::Option<::std::string::String>,
    /// <p>The other names or aliases for the named entity.</p>
    pub entity_synonyms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The type of named entity that a topic represents.</p>
    pub semantic_entity_type: ::std::option::Option<crate::types::SemanticEntityType>,
    /// <p>The definition of a named entity.</p>
    pub definition: ::std::option::Option<::std::vec::Vec<crate::types::NamedEntityDefinition>>,
}
impl TopicNamedEntity {
    /// <p>The name of the named entity.</p>
    pub fn entity_name(&self) -> &str {
        use std::ops::Deref;
        self.entity_name.deref()
    }
    /// <p>The description of the named entity.</p>
    pub fn entity_description(&self) -> ::std::option::Option<&str> {
        self.entity_description.as_deref()
    }
    /// <p>The other names or aliases for the named entity.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.entity_synonyms.is_none()`.
    pub fn entity_synonyms(&self) -> &[::std::string::String] {
        self.entity_synonyms.as_deref().unwrap_or_default()
    }
    /// <p>The type of named entity that a topic represents.</p>
    pub fn semantic_entity_type(&self) -> ::std::option::Option<&crate::types::SemanticEntityType> {
        self.semantic_entity_type.as_ref()
    }
    /// <p>The definition of a named entity.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.definition.is_none()`.
    pub fn definition(&self) -> &[crate::types::NamedEntityDefinition] {
        self.definition.as_deref().unwrap_or_default()
    }
}
impl TopicNamedEntity {
    /// Creates a new builder-style object to manufacture [`TopicNamedEntity`](crate::types::TopicNamedEntity).
    pub fn builder() -> crate::types::builders::TopicNamedEntityBuilder {
        crate::types::builders::TopicNamedEntityBuilder::default()
    }
}

/// A builder for [`TopicNamedEntity`](crate::types::TopicNamedEntity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TopicNamedEntityBuilder {
    pub(crate) entity_name: ::std::option::Option<::std::string::String>,
    pub(crate) entity_description: ::std::option::Option<::std::string::String>,
    pub(crate) entity_synonyms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) semantic_entity_type: ::std::option::Option<crate::types::SemanticEntityType>,
    pub(crate) definition: ::std::option::Option<::std::vec::Vec<crate::types::NamedEntityDefinition>>,
}
impl TopicNamedEntityBuilder {
    /// <p>The name of the named entity.</p>
    /// This field is required.
    pub fn entity_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the named entity.</p>
    pub fn set_entity_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_name = input;
        self
    }
    /// <p>The name of the named entity.</p>
    pub fn get_entity_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_name
    }
    /// <p>The description of the named entity.</p>
    pub fn entity_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the named entity.</p>
    pub fn set_entity_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_description = input;
        self
    }
    /// <p>The description of the named entity.</p>
    pub fn get_entity_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_description
    }
    /// Appends an item to `entity_synonyms`.
    ///
    /// To override the contents of this collection use [`set_entity_synonyms`](Self::set_entity_synonyms).
    ///
    /// <p>The other names or aliases for the named entity.</p>
    pub fn entity_synonyms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.entity_synonyms.unwrap_or_default();
        v.push(input.into());
        self.entity_synonyms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The other names or aliases for the named entity.</p>
    pub fn set_entity_synonyms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.entity_synonyms = input;
        self
    }
    /// <p>The other names or aliases for the named entity.</p>
    pub fn get_entity_synonyms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.entity_synonyms
    }
    /// <p>The type of named entity that a topic represents.</p>
    pub fn semantic_entity_type(mut self, input: crate::types::SemanticEntityType) -> Self {
        self.semantic_entity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of named entity that a topic represents.</p>
    pub fn set_semantic_entity_type(mut self, input: ::std::option::Option<crate::types::SemanticEntityType>) -> Self {
        self.semantic_entity_type = input;
        self
    }
    /// <p>The type of named entity that a topic represents.</p>
    pub fn get_semantic_entity_type(&self) -> &::std::option::Option<crate::types::SemanticEntityType> {
        &self.semantic_entity_type
    }
    /// Appends an item to `definition`.
    ///
    /// To override the contents of this collection use [`set_definition`](Self::set_definition).
    ///
    /// <p>The definition of a named entity.</p>
    pub fn definition(mut self, input: crate::types::NamedEntityDefinition) -> Self {
        let mut v = self.definition.unwrap_or_default();
        v.push(input);
        self.definition = ::std::option::Option::Some(v);
        self
    }
    /// <p>The definition of a named entity.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NamedEntityDefinition>>) -> Self {
        self.definition = input;
        self
    }
    /// <p>The definition of a named entity.</p>
    pub fn get_definition(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NamedEntityDefinition>> {
        &self.definition
    }
    /// Consumes the builder and constructs a [`TopicNamedEntity`](crate::types::TopicNamedEntity).
    /// This method will fail if any of the following fields are not set:
    /// - [`entity_name`](crate::types::builders::TopicNamedEntityBuilder::entity_name)
    pub fn build(self) -> ::std::result::Result<crate::types::TopicNamedEntity, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TopicNamedEntity {
            entity_name: self.entity_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entity_name",
                    "entity_name was not specified but it is required when building TopicNamedEntity",
                )
            })?,
            entity_description: self.entity_description,
            entity_synonyms: self.entity_synonyms,
            semantic_entity_type: self.semantic_entity_type,
            definition: self.definition,
        })
    }
}
