// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the following elements:</p>
/// <ul>
/// <li> <p>The <code>DashboardId</code> of the dashboard that has the visual that you want to embed.</p> </li>
/// <li> <p>The <code>SheetId</code> of the sheet that has the visual that you want to embed.</p> </li>
/// <li> <p>The <code>VisualId</code> of the visual that you want to embed.</p> </li>
/// </ul>
/// <p>The <code>DashboardId</code>, <code>SheetId</code>, and <code>VisualId</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console. You can also get the <code>DashboardId</code> with a <code>ListDashboards</code> API operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DashboardVisualId {
    /// <p>The ID of the dashboard that has the visual that you want to embed. The <code>DashboardId</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console. You can also get the <code>DashboardId</code> with a <code>ListDashboards</code> API operation.</p>
    #[doc(hidden)]
    pub dashboard_id: std::option::Option<std::string::String>,
    /// <p>The ID of the sheet that the has visual that you want to embed. The <code>SheetId</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console.</p>
    #[doc(hidden)]
    pub sheet_id: std::option::Option<std::string::String>,
    /// <p>The ID of the visual that you want to embed. The <code>VisualID</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console.</p>
    #[doc(hidden)]
    pub visual_id: std::option::Option<std::string::String>,
}
impl DashboardVisualId {
    /// <p>The ID of the dashboard that has the visual that you want to embed. The <code>DashboardId</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console. You can also get the <code>DashboardId</code> with a <code>ListDashboards</code> API operation.</p>
    pub fn dashboard_id(&self) -> std::option::Option<&str> {
        self.dashboard_id.as_deref()
    }
    /// <p>The ID of the sheet that the has visual that you want to embed. The <code>SheetId</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console.</p>
    pub fn sheet_id(&self) -> std::option::Option<&str> {
        self.sheet_id.as_deref()
    }
    /// <p>The ID of the visual that you want to embed. The <code>VisualID</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console.</p>
    pub fn visual_id(&self) -> std::option::Option<&str> {
        self.visual_id.as_deref()
    }
}
impl DashboardVisualId {
    /// Creates a new builder-style object to manufacture [`DashboardVisualId`](crate::types::DashboardVisualId).
    pub fn builder() -> crate::types::builders::DashboardVisualIdBuilder {
        crate::types::builders::DashboardVisualIdBuilder::default()
    }
}

/// A builder for [`DashboardVisualId`](crate::types::DashboardVisualId).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DashboardVisualIdBuilder {
    pub(crate) dashboard_id: std::option::Option<std::string::String>,
    pub(crate) sheet_id: std::option::Option<std::string::String>,
    pub(crate) visual_id: std::option::Option<std::string::String>,
}
impl DashboardVisualIdBuilder {
    /// <p>The ID of the dashboard that has the visual that you want to embed. The <code>DashboardId</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console. You can also get the <code>DashboardId</code> with a <code>ListDashboards</code> API operation.</p>
    pub fn dashboard_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_id = Some(input.into());
        self
    }
    /// <p>The ID of the dashboard that has the visual that you want to embed. The <code>DashboardId</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console. You can also get the <code>DashboardId</code> with a <code>ListDashboards</code> API operation.</p>
    pub fn set_dashboard_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_id = input;
        self
    }
    /// <p>The ID of the sheet that the has visual that you want to embed. The <code>SheetId</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console.</p>
    pub fn sheet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sheet_id = Some(input.into());
        self
    }
    /// <p>The ID of the sheet that the has visual that you want to embed. The <code>SheetId</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console.</p>
    pub fn set_sheet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sheet_id = input;
        self
    }
    /// <p>The ID of the visual that you want to embed. The <code>VisualID</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console.</p>
    pub fn visual_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.visual_id = Some(input.into());
        self
    }
    /// <p>The ID of the visual that you want to embed. The <code>VisualID</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console.</p>
    pub fn set_visual_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.visual_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DashboardVisualId`](crate::types::DashboardVisualId).
    pub fn build(self) -> crate::types::DashboardVisualId {
        crate::types::DashboardVisualId {
            dashboard_id: self.dashboard_id,
            sheet_id: self.sheet_id,
            visual_id: self.visual_id,
        }
    }
}
