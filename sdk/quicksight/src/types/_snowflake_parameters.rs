// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for Snowflake.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SnowflakeParameters {
    /// <p>Host.</p>
    pub host: ::std::string::String,
    /// <p>Database.</p>
    pub database: ::std::string::String,
    /// <p>Warehouse.</p>
    pub warehouse: ::std::string::String,
    /// <p>The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.</p>
    pub authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    /// <p>The database access control role.</p>
    pub database_access_control_role: ::std::option::Option<::std::string::String>,
    /// <p>An object that contains information needed to create a data source connection between an Quick Sight account and Snowflake.</p>
    pub o_auth_parameters: ::std::option::Option<crate::types::OAuthParameters>,
}
impl SnowflakeParameters {
    /// <p>Host.</p>
    pub fn host(&self) -> &str {
        use std::ops::Deref;
        self.host.deref()
    }
    /// <p>Database.</p>
    pub fn database(&self) -> &str {
        use std::ops::Deref;
        self.database.deref()
    }
    /// <p>Warehouse.</p>
    pub fn warehouse(&self) -> &str {
        use std::ops::Deref;
        self.warehouse.deref()
    }
    /// <p>The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.</p>
    pub fn authentication_type(&self) -> ::std::option::Option<&crate::types::AuthenticationType> {
        self.authentication_type.as_ref()
    }
    /// <p>The database access control role.</p>
    pub fn database_access_control_role(&self) -> ::std::option::Option<&str> {
        self.database_access_control_role.as_deref()
    }
    /// <p>An object that contains information needed to create a data source connection between an Quick Sight account and Snowflake.</p>
    pub fn o_auth_parameters(&self) -> ::std::option::Option<&crate::types::OAuthParameters> {
        self.o_auth_parameters.as_ref()
    }
}
impl SnowflakeParameters {
    /// Creates a new builder-style object to manufacture [`SnowflakeParameters`](crate::types::SnowflakeParameters).
    pub fn builder() -> crate::types::builders::SnowflakeParametersBuilder {
        crate::types::builders::SnowflakeParametersBuilder::default()
    }
}

/// A builder for [`SnowflakeParameters`](crate::types::SnowflakeParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SnowflakeParametersBuilder {
    pub(crate) host: ::std::option::Option<::std::string::String>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
    pub(crate) warehouse: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    pub(crate) database_access_control_role: ::std::option::Option<::std::string::String>,
    pub(crate) o_auth_parameters: ::std::option::Option<crate::types::OAuthParameters>,
}
impl SnowflakeParametersBuilder {
    /// <p>Host.</p>
    /// This field is required.
    pub fn host(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Host.</p>
    pub fn set_host(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host = input;
        self
    }
    /// <p>Host.</p>
    pub fn get_host(&self) -> &::std::option::Option<::std::string::String> {
        &self.host
    }
    /// <p>Database.</p>
    /// This field is required.
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Database.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>Database.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// <p>Warehouse.</p>
    /// This field is required.
    pub fn warehouse(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.warehouse = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Warehouse.</p>
    pub fn set_warehouse(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.warehouse = input;
        self
    }
    /// <p>Warehouse.</p>
    pub fn get_warehouse(&self) -> &::std::option::Option<::std::string::String> {
        &self.warehouse
    }
    /// <p>The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.</p>
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.authentication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.</p>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::AuthenticationType>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.</p>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::AuthenticationType> {
        &self.authentication_type
    }
    /// <p>The database access control role.</p>
    pub fn database_access_control_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_access_control_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database access control role.</p>
    pub fn set_database_access_control_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_access_control_role = input;
        self
    }
    /// <p>The database access control role.</p>
    pub fn get_database_access_control_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_access_control_role
    }
    /// <p>An object that contains information needed to create a data source connection between an Quick Sight account and Snowflake.</p>
    pub fn o_auth_parameters(mut self, input: crate::types::OAuthParameters) -> Self {
        self.o_auth_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains information needed to create a data source connection between an Quick Sight account and Snowflake.</p>
    pub fn set_o_auth_parameters(mut self, input: ::std::option::Option<crate::types::OAuthParameters>) -> Self {
        self.o_auth_parameters = input;
        self
    }
    /// <p>An object that contains information needed to create a data source connection between an Quick Sight account and Snowflake.</p>
    pub fn get_o_auth_parameters(&self) -> &::std::option::Option<crate::types::OAuthParameters> {
        &self.o_auth_parameters
    }
    /// Consumes the builder and constructs a [`SnowflakeParameters`](crate::types::SnowflakeParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`host`](crate::types::builders::SnowflakeParametersBuilder::host)
    /// - [`database`](crate::types::builders::SnowflakeParametersBuilder::database)
    /// - [`warehouse`](crate::types::builders::SnowflakeParametersBuilder::warehouse)
    pub fn build(self) -> ::std::result::Result<crate::types::SnowflakeParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SnowflakeParameters {
            host: self.host.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "host",
                    "host was not specified but it is required when building SnowflakeParameters",
                )
            })?,
            database: self.database.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database",
                    "database was not specified but it is required when building SnowflakeParameters",
                )
            })?,
            warehouse: self.warehouse.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "warehouse",
                    "warehouse was not specified but it is required when building SnowflakeParameters",
                )
            })?,
            authentication_type: self.authentication_type,
            database_access_control_role: self.database_access_control_role,
            o_auth_parameters: self.o_auth_parameters,
        })
    }
}
