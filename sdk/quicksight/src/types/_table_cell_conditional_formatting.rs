// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The cell conditional formatting option for a table.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TableCellConditionalFormatting {
    /// <p>The field ID of the cell for conditional formatting.</p>
    #[doc(hidden)]
    pub field_id: std::option::Option<std::string::String>,
    /// <p>The text format of the cell for conditional formatting.</p>
    #[doc(hidden)]
    pub text_format: std::option::Option<crate::types::TextConditionalFormat>,
}
impl TableCellConditionalFormatting {
    /// <p>The field ID of the cell for conditional formatting.</p>
    pub fn field_id(&self) -> std::option::Option<&str> {
        self.field_id.as_deref()
    }
    /// <p>The text format of the cell for conditional formatting.</p>
    pub fn text_format(&self) -> std::option::Option<&crate::types::TextConditionalFormat> {
        self.text_format.as_ref()
    }
}
impl TableCellConditionalFormatting {
    /// Creates a new builder-style object to manufacture [`TableCellConditionalFormatting`](crate::types::TableCellConditionalFormatting).
    pub fn builder() -> crate::types::builders::TableCellConditionalFormattingBuilder {
        crate::types::builders::TableCellConditionalFormattingBuilder::default()
    }
}

/// A builder for [`TableCellConditionalFormatting`](crate::types::TableCellConditionalFormatting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TableCellConditionalFormattingBuilder {
    pub(crate) field_id: std::option::Option<std::string::String>,
    pub(crate) text_format: std::option::Option<crate::types::TextConditionalFormat>,
}
impl TableCellConditionalFormattingBuilder {
    /// <p>The field ID of the cell for conditional formatting.</p>
    pub fn field_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_id = Some(input.into());
        self
    }
    /// <p>The field ID of the cell for conditional formatting.</p>
    pub fn set_field_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The text format of the cell for conditional formatting.</p>
    pub fn text_format(mut self, input: crate::types::TextConditionalFormat) -> Self {
        self.text_format = Some(input);
        self
    }
    /// <p>The text format of the cell for conditional formatting.</p>
    pub fn set_text_format(
        mut self,
        input: std::option::Option<crate::types::TextConditionalFormat>,
    ) -> Self {
        self.text_format = input;
        self
    }
    /// Consumes the builder and constructs a [`TableCellConditionalFormatting`](crate::types::TableCellConditionalFormatting).
    pub fn build(self) -> crate::types::TableCellConditionalFormatting {
        crate::types::TableCellConditionalFormatting {
            field_id: self.field_id,
            text_format: self.text_format,
        }
    }
}
