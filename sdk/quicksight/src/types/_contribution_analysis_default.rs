// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The contribution analysis visual display for a line, pie, or bar chart.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContributionAnalysisDefault {
    /// <p>The measure field that is used in the contribution analysis.</p>
    pub measure_field_id: ::std::string::String,
    /// <p>The dimensions columns that are used in the contribution analysis, usually a list of <code>ColumnIdentifiers</code>.</p>
    pub contributor_dimensions: ::std::vec::Vec<crate::types::ColumnIdentifier>,
}
impl ContributionAnalysisDefault {
    /// <p>The measure field that is used in the contribution analysis.</p>
    pub fn measure_field_id(&self) -> &str {
        use std::ops::Deref;
        self.measure_field_id.deref()
    }
    /// <p>The dimensions columns that are used in the contribution analysis, usually a list of <code>ColumnIdentifiers</code>.</p>
    pub fn contributor_dimensions(&self) -> &[crate::types::ColumnIdentifier] {
        use std::ops::Deref;
        self.contributor_dimensions.deref()
    }
}
impl ContributionAnalysisDefault {
    /// Creates a new builder-style object to manufacture [`ContributionAnalysisDefault`](crate::types::ContributionAnalysisDefault).
    pub fn builder() -> crate::types::builders::ContributionAnalysisDefaultBuilder {
        crate::types::builders::ContributionAnalysisDefaultBuilder::default()
    }
}

/// A builder for [`ContributionAnalysisDefault`](crate::types::ContributionAnalysisDefault).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContributionAnalysisDefaultBuilder {
    pub(crate) measure_field_id: ::std::option::Option<::std::string::String>,
    pub(crate) contributor_dimensions: ::std::option::Option<::std::vec::Vec<crate::types::ColumnIdentifier>>,
}
impl ContributionAnalysisDefaultBuilder {
    /// <p>The measure field that is used in the contribution analysis.</p>
    /// This field is required.
    pub fn measure_field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.measure_field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The measure field that is used in the contribution analysis.</p>
    pub fn set_measure_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.measure_field_id = input;
        self
    }
    /// <p>The measure field that is used in the contribution analysis.</p>
    pub fn get_measure_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.measure_field_id
    }
    /// Appends an item to `contributor_dimensions`.
    ///
    /// To override the contents of this collection use [`set_contributor_dimensions`](Self::set_contributor_dimensions).
    ///
    /// <p>The dimensions columns that are used in the contribution analysis, usually a list of <code>ColumnIdentifiers</code>.</p>
    pub fn contributor_dimensions(mut self, input: crate::types::ColumnIdentifier) -> Self {
        let mut v = self.contributor_dimensions.unwrap_or_default();
        v.push(input);
        self.contributor_dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The dimensions columns that are used in the contribution analysis, usually a list of <code>ColumnIdentifiers</code>.</p>
    pub fn set_contributor_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ColumnIdentifier>>) -> Self {
        self.contributor_dimensions = input;
        self
    }
    /// <p>The dimensions columns that are used in the contribution analysis, usually a list of <code>ColumnIdentifiers</code>.</p>
    pub fn get_contributor_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ColumnIdentifier>> {
        &self.contributor_dimensions
    }
    /// Consumes the builder and constructs a [`ContributionAnalysisDefault`](crate::types::ContributionAnalysisDefault).
    /// This method will fail if any of the following fields are not set:
    /// - [`measure_field_id`](crate::types::builders::ContributionAnalysisDefaultBuilder::measure_field_id)
    /// - [`contributor_dimensions`](crate::types::builders::ContributionAnalysisDefaultBuilder::contributor_dimensions)
    pub fn build(self) -> ::std::result::Result<crate::types::ContributionAnalysisDefault, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ContributionAnalysisDefault {
            measure_field_id: self.measure_field_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "measure_field_id",
                    "measure_field_id was not specified but it is required when building ContributionAnalysisDefault",
                )
            })?,
            contributor_dimensions: self.contributor_dimensions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "contributor_dimensions",
                    "contributor_dimensions was not specified but it is required when building ContributionAnalysisDefault",
                )
            })?,
        })
    }
}
