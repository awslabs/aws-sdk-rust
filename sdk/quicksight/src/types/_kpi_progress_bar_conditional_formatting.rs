// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The conditional formatting for the progress bar of a KPI visual.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KpiProgressBarConditionalFormatting {
    /// <p>The conditional formatting of the progress bar's foreground color.</p>
    #[doc(hidden)]
    pub foreground_color: std::option::Option<crate::types::ConditionalFormattingColor>,
}
impl KpiProgressBarConditionalFormatting {
    /// <p>The conditional formatting of the progress bar's foreground color.</p>
    pub fn foreground_color(
        &self,
    ) -> std::option::Option<&crate::types::ConditionalFormattingColor> {
        self.foreground_color.as_ref()
    }
}
impl KpiProgressBarConditionalFormatting {
    /// Creates a new builder-style object to manufacture [`KpiProgressBarConditionalFormatting`](crate::types::KpiProgressBarConditionalFormatting).
    pub fn builder() -> crate::types::builders::KpiProgressBarConditionalFormattingBuilder {
        crate::types::builders::KpiProgressBarConditionalFormattingBuilder::default()
    }
}

/// A builder for [`KpiProgressBarConditionalFormatting`](crate::types::KpiProgressBarConditionalFormatting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KpiProgressBarConditionalFormattingBuilder {
    pub(crate) foreground_color: std::option::Option<crate::types::ConditionalFormattingColor>,
}
impl KpiProgressBarConditionalFormattingBuilder {
    /// <p>The conditional formatting of the progress bar's foreground color.</p>
    pub fn foreground_color(mut self, input: crate::types::ConditionalFormattingColor) -> Self {
        self.foreground_color = Some(input);
        self
    }
    /// <p>The conditional formatting of the progress bar's foreground color.</p>
    pub fn set_foreground_color(
        mut self,
        input: std::option::Option<crate::types::ConditionalFormattingColor>,
    ) -> Self {
        self.foreground_color = input;
        self
    }
    /// Consumes the builder and constructs a [`KpiProgressBarConditionalFormatting`](crate::types::KpiProgressBarConditionalFormatting).
    pub fn build(self) -> crate::types::KpiProgressBarConditionalFormatting {
        crate::types::KpiProgressBarConditionalFormatting {
            foreground_color: self.foreground_color,
        }
    }
}
