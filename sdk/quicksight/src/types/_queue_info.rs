// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a queued dataset SPICE ingestion.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueueInfo {
    /// <p>The ID of the queued ingestion.</p>
    #[doc(hidden)]
    pub waiting_on_ingestion: std::option::Option<std::string::String>,
    /// <p>The ID of the ongoing ingestion. The queued ingestion is waiting for the ongoing ingestion to complete.</p>
    #[doc(hidden)]
    pub queued_ingestion: std::option::Option<std::string::String>,
}
impl QueueInfo {
    /// <p>The ID of the queued ingestion.</p>
    pub fn waiting_on_ingestion(&self) -> std::option::Option<&str> {
        self.waiting_on_ingestion.as_deref()
    }
    /// <p>The ID of the ongoing ingestion. The queued ingestion is waiting for the ongoing ingestion to complete.</p>
    pub fn queued_ingestion(&self) -> std::option::Option<&str> {
        self.queued_ingestion.as_deref()
    }
}
impl QueueInfo {
    /// Creates a new builder-style object to manufacture [`QueueInfo`](crate::types::QueueInfo).
    pub fn builder() -> crate::types::builders::QueueInfoBuilder {
        crate::types::builders::QueueInfoBuilder::default()
    }
}

/// A builder for [`QueueInfo`](crate::types::QueueInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueueInfoBuilder {
    pub(crate) waiting_on_ingestion: std::option::Option<std::string::String>,
    pub(crate) queued_ingestion: std::option::Option<std::string::String>,
}
impl QueueInfoBuilder {
    /// <p>The ID of the queued ingestion.</p>
    pub fn waiting_on_ingestion(mut self, input: impl Into<std::string::String>) -> Self {
        self.waiting_on_ingestion = Some(input.into());
        self
    }
    /// <p>The ID of the queued ingestion.</p>
    pub fn set_waiting_on_ingestion(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.waiting_on_ingestion = input;
        self
    }
    /// <p>The ID of the ongoing ingestion. The queued ingestion is waiting for the ongoing ingestion to complete.</p>
    pub fn queued_ingestion(mut self, input: impl Into<std::string::String>) -> Self {
        self.queued_ingestion = Some(input.into());
        self
    }
    /// <p>The ID of the ongoing ingestion. The queued ingestion is waiting for the ongoing ingestion to complete.</p>
    pub fn set_queued_ingestion(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.queued_ingestion = input;
        self
    }
    /// Consumes the builder and constructs a [`QueueInfo`](crate::types::QueueInfo).
    pub fn build(self) -> crate::types::QueueInfo {
        crate::types::QueueInfo {
            waiting_on_ingestion: self.waiting_on_ingestion,
            queued_ingestion: self.queued_ingestion,
        }
    }
}
