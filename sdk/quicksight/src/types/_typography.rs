// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines the typography options.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Typography {
    /// <p>Determines the list of font families.</p>
    #[doc(hidden)]
    pub font_families: std::option::Option<std::vec::Vec<crate::types::Font>>,
}
impl Typography {
    /// <p>Determines the list of font families.</p>
    pub fn font_families(&self) -> std::option::Option<&[crate::types::Font]> {
        self.font_families.as_deref()
    }
}
impl Typography {
    /// Creates a new builder-style object to manufacture [`Typography`](crate::types::Typography).
    pub fn builder() -> crate::types::builders::TypographyBuilder {
        crate::types::builders::TypographyBuilder::default()
    }
}

/// A builder for [`Typography`](crate::types::Typography).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TypographyBuilder {
    pub(crate) font_families: std::option::Option<std::vec::Vec<crate::types::Font>>,
}
impl TypographyBuilder {
    /// Appends an item to `font_families`.
    ///
    /// To override the contents of this collection use [`set_font_families`](Self::set_font_families).
    ///
    /// <p>Determines the list of font families.</p>
    pub fn font_families(mut self, input: crate::types::Font) -> Self {
        let mut v = self.font_families.unwrap_or_default();
        v.push(input);
        self.font_families = Some(v);
        self
    }
    /// <p>Determines the list of font families.</p>
    pub fn set_font_families(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Font>>,
    ) -> Self {
        self.font_families = input;
        self
    }
    /// Consumes the builder and constructs a [`Typography`](crate::types::Typography).
    pub fn build(self) -> crate::types::Typography {
        crate::types::Typography {
            font_families: self.font_families,
        }
    }
}
