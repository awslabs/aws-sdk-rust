// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The subtitle label options for a visual.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VisualSubtitleLabelOptions {
    /// <p>The visibility of the subtitle label.</p>
    #[doc(hidden)]
    pub visibility: std::option::Option<crate::types::Visibility>,
    /// <p>The long text format of the subtitle label, such as plain text or rich text.</p>
    #[doc(hidden)]
    pub format_text: std::option::Option<crate::types::LongFormatText>,
}
impl VisualSubtitleLabelOptions {
    /// <p>The visibility of the subtitle label.</p>
    pub fn visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>The long text format of the subtitle label, such as plain text or rich text.</p>
    pub fn format_text(&self) -> std::option::Option<&crate::types::LongFormatText> {
        self.format_text.as_ref()
    }
}
impl VisualSubtitleLabelOptions {
    /// Creates a new builder-style object to manufacture [`VisualSubtitleLabelOptions`](crate::types::VisualSubtitleLabelOptions).
    pub fn builder() -> crate::types::builders::VisualSubtitleLabelOptionsBuilder {
        crate::types::builders::VisualSubtitleLabelOptionsBuilder::default()
    }
}

/// A builder for [`VisualSubtitleLabelOptions`](crate::types::VisualSubtitleLabelOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VisualSubtitleLabelOptionsBuilder {
    pub(crate) visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) format_text: std::option::Option<crate::types::LongFormatText>,
}
impl VisualSubtitleLabelOptionsBuilder {
    /// <p>The visibility of the subtitle label.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = Some(input);
        self
    }
    /// <p>The visibility of the subtitle label.</p>
    pub fn set_visibility(mut self, input: std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The long text format of the subtitle label, such as plain text or rich text.</p>
    pub fn format_text(mut self, input: crate::types::LongFormatText) -> Self {
        self.format_text = Some(input);
        self
    }
    /// <p>The long text format of the subtitle label, such as plain text or rich text.</p>
    pub fn set_format_text(
        mut self,
        input: std::option::Option<crate::types::LongFormatText>,
    ) -> Self {
        self.format_text = input;
        self
    }
    /// Consumes the builder and constructs a [`VisualSubtitleLabelOptions`](crate::types::VisualSubtitleLabelOptions).
    pub fn build(self) -> crate::types::VisualSubtitleLabelOptions {
        crate::types::VisualSubtitleLabelOptions {
            visibility: self.visibility,
            format_text: self.format_text,
        }
    }
}
