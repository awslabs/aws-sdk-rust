// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The default values of the <code>StringParameterDeclaration</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StringDefaultValues {
    /// <p>The dynamic value of the <code>StringDefaultValues</code>. Different defaults displayed according to users, groups, and values mapping.</p>
    #[doc(hidden)]
    pub dynamic_value: std::option::Option<crate::types::DynamicDefaultValue>,
    /// <p>The static values of the <code>DecimalDefaultValues</code>.</p>
    #[doc(hidden)]
    pub static_values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl StringDefaultValues {
    /// <p>The dynamic value of the <code>StringDefaultValues</code>. Different defaults displayed according to users, groups, and values mapping.</p>
    pub fn dynamic_value(&self) -> std::option::Option<&crate::types::DynamicDefaultValue> {
        self.dynamic_value.as_ref()
    }
    /// <p>The static values of the <code>DecimalDefaultValues</code>.</p>
    pub fn static_values(&self) -> std::option::Option<&[std::string::String]> {
        self.static_values.as_deref()
    }
}
impl StringDefaultValues {
    /// Creates a new builder-style object to manufacture [`StringDefaultValues`](crate::types::StringDefaultValues).
    pub fn builder() -> crate::types::builders::StringDefaultValuesBuilder {
        crate::types::builders::StringDefaultValuesBuilder::default()
    }
}

/// A builder for [`StringDefaultValues`](crate::types::StringDefaultValues).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StringDefaultValuesBuilder {
    pub(crate) dynamic_value: std::option::Option<crate::types::DynamicDefaultValue>,
    pub(crate) static_values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl StringDefaultValuesBuilder {
    /// <p>The dynamic value of the <code>StringDefaultValues</code>. Different defaults displayed according to users, groups, and values mapping.</p>
    pub fn dynamic_value(mut self, input: crate::types::DynamicDefaultValue) -> Self {
        self.dynamic_value = Some(input);
        self
    }
    /// <p>The dynamic value of the <code>StringDefaultValues</code>. Different defaults displayed according to users, groups, and values mapping.</p>
    pub fn set_dynamic_value(
        mut self,
        input: std::option::Option<crate::types::DynamicDefaultValue>,
    ) -> Self {
        self.dynamic_value = input;
        self
    }
    /// Appends an item to `static_values`.
    ///
    /// To override the contents of this collection use [`set_static_values`](Self::set_static_values).
    ///
    /// <p>The static values of the <code>DecimalDefaultValues</code>.</p>
    pub fn static_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.static_values.unwrap_or_default();
        v.push(input.into());
        self.static_values = Some(v);
        self
    }
    /// <p>The static values of the <code>DecimalDefaultValues</code>.</p>
    pub fn set_static_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.static_values = input;
        self
    }
    /// Consumes the builder and constructs a [`StringDefaultValues`](crate::types::StringDefaultValues).
    pub fn build(self) -> crate::types::StringDefaultValues {
        crate::types::StringDefaultValues {
            dynamic_value: self.dynamic_value,
            static_values: self.static_values,
        }
    }
}
