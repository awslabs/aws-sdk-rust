// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for a web crawler data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebCrawlerParameters {
    /// <p>The authentication type for the web crawler. The type can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>NO_AUTH</code>: No authentication required.</p></li>
    /// <li>
    /// <p><code>BASIC_AUTH</code>: Basic authentication using username and password.</p></li>
    /// <li>
    /// <p><code>SAML</code>: SAML-based authentication.</p></li>
    /// <li>
    /// <p><code>FORM</code>: Form-based authentication.</p></li>
    /// </ul>
    pub web_crawler_auth_type: crate::types::WebCrawlerAuthType,
    /// <p>The XPath expression for locating the username field on the login page.</p>
    pub username_field_xpath: ::std::option::Option<::std::string::String>,
    /// <p>The XPath expression for locating the password field on the login page.</p>
    pub password_field_xpath: ::std::option::Option<::std::string::String>,
    /// <p>The XPath expression for locating the username submit button on the login page.</p>
    pub username_button_xpath: ::std::option::Option<::std::string::String>,
    /// <p>The XPath expression for locating the password submit button on the login page.</p>
    pub password_button_xpath: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the login page for the web crawler to authenticate.</p>
    pub login_page_url: ::std::option::Option<::std::string::String>,
    /// <p>The hostname of the web proxy server for the web crawler.</p>
    pub web_proxy_host_name: ::std::option::Option<::std::string::String>,
    /// <p>The port number of the web proxy server for the web crawler.</p>
    pub web_proxy_port_number: i32,
}
impl WebCrawlerParameters {
    /// <p>The authentication type for the web crawler. The type can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>NO_AUTH</code>: No authentication required.</p></li>
    /// <li>
    /// <p><code>BASIC_AUTH</code>: Basic authentication using username and password.</p></li>
    /// <li>
    /// <p><code>SAML</code>: SAML-based authentication.</p></li>
    /// <li>
    /// <p><code>FORM</code>: Form-based authentication.</p></li>
    /// </ul>
    pub fn web_crawler_auth_type(&self) -> &crate::types::WebCrawlerAuthType {
        &self.web_crawler_auth_type
    }
    /// <p>The XPath expression for locating the username field on the login page.</p>
    pub fn username_field_xpath(&self) -> ::std::option::Option<&str> {
        self.username_field_xpath.as_deref()
    }
    /// <p>The XPath expression for locating the password field on the login page.</p>
    pub fn password_field_xpath(&self) -> ::std::option::Option<&str> {
        self.password_field_xpath.as_deref()
    }
    /// <p>The XPath expression for locating the username submit button on the login page.</p>
    pub fn username_button_xpath(&self) -> ::std::option::Option<&str> {
        self.username_button_xpath.as_deref()
    }
    /// <p>The XPath expression for locating the password submit button on the login page.</p>
    pub fn password_button_xpath(&self) -> ::std::option::Option<&str> {
        self.password_button_xpath.as_deref()
    }
    /// <p>The URL of the login page for the web crawler to authenticate.</p>
    pub fn login_page_url(&self) -> ::std::option::Option<&str> {
        self.login_page_url.as_deref()
    }
    /// <p>The hostname of the web proxy server for the web crawler.</p>
    pub fn web_proxy_host_name(&self) -> ::std::option::Option<&str> {
        self.web_proxy_host_name.as_deref()
    }
    /// <p>The port number of the web proxy server for the web crawler.</p>
    pub fn web_proxy_port_number(&self) -> i32 {
        self.web_proxy_port_number
    }
}
impl WebCrawlerParameters {
    /// Creates a new builder-style object to manufacture [`WebCrawlerParameters`](crate::types::WebCrawlerParameters).
    pub fn builder() -> crate::types::builders::WebCrawlerParametersBuilder {
        crate::types::builders::WebCrawlerParametersBuilder::default()
    }
}

/// A builder for [`WebCrawlerParameters`](crate::types::WebCrawlerParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WebCrawlerParametersBuilder {
    pub(crate) web_crawler_auth_type: ::std::option::Option<crate::types::WebCrawlerAuthType>,
    pub(crate) username_field_xpath: ::std::option::Option<::std::string::String>,
    pub(crate) password_field_xpath: ::std::option::Option<::std::string::String>,
    pub(crate) username_button_xpath: ::std::option::Option<::std::string::String>,
    pub(crate) password_button_xpath: ::std::option::Option<::std::string::String>,
    pub(crate) login_page_url: ::std::option::Option<::std::string::String>,
    pub(crate) web_proxy_host_name: ::std::option::Option<::std::string::String>,
    pub(crate) web_proxy_port_number: ::std::option::Option<i32>,
}
impl WebCrawlerParametersBuilder {
    /// <p>The authentication type for the web crawler. The type can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>NO_AUTH</code>: No authentication required.</p></li>
    /// <li>
    /// <p><code>BASIC_AUTH</code>: Basic authentication using username and password.</p></li>
    /// <li>
    /// <p><code>SAML</code>: SAML-based authentication.</p></li>
    /// <li>
    /// <p><code>FORM</code>: Form-based authentication.</p></li>
    /// </ul>
    /// This field is required.
    pub fn web_crawler_auth_type(mut self, input: crate::types::WebCrawlerAuthType) -> Self {
        self.web_crawler_auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication type for the web crawler. The type can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>NO_AUTH</code>: No authentication required.</p></li>
    /// <li>
    /// <p><code>BASIC_AUTH</code>: Basic authentication using username and password.</p></li>
    /// <li>
    /// <p><code>SAML</code>: SAML-based authentication.</p></li>
    /// <li>
    /// <p><code>FORM</code>: Form-based authentication.</p></li>
    /// </ul>
    pub fn set_web_crawler_auth_type(mut self, input: ::std::option::Option<crate::types::WebCrawlerAuthType>) -> Self {
        self.web_crawler_auth_type = input;
        self
    }
    /// <p>The authentication type for the web crawler. The type can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>NO_AUTH</code>: No authentication required.</p></li>
    /// <li>
    /// <p><code>BASIC_AUTH</code>: Basic authentication using username and password.</p></li>
    /// <li>
    /// <p><code>SAML</code>: SAML-based authentication.</p></li>
    /// <li>
    /// <p><code>FORM</code>: Form-based authentication.</p></li>
    /// </ul>
    pub fn get_web_crawler_auth_type(&self) -> &::std::option::Option<crate::types::WebCrawlerAuthType> {
        &self.web_crawler_auth_type
    }
    /// <p>The XPath expression for locating the username field on the login page.</p>
    pub fn username_field_xpath(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username_field_xpath = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The XPath expression for locating the username field on the login page.</p>
    pub fn set_username_field_xpath(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username_field_xpath = input;
        self
    }
    /// <p>The XPath expression for locating the username field on the login page.</p>
    pub fn get_username_field_xpath(&self) -> &::std::option::Option<::std::string::String> {
        &self.username_field_xpath
    }
    /// <p>The XPath expression for locating the password field on the login page.</p>
    pub fn password_field_xpath(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.password_field_xpath = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The XPath expression for locating the password field on the login page.</p>
    pub fn set_password_field_xpath(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.password_field_xpath = input;
        self
    }
    /// <p>The XPath expression for locating the password field on the login page.</p>
    pub fn get_password_field_xpath(&self) -> &::std::option::Option<::std::string::String> {
        &self.password_field_xpath
    }
    /// <p>The XPath expression for locating the username submit button on the login page.</p>
    pub fn username_button_xpath(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username_button_xpath = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The XPath expression for locating the username submit button on the login page.</p>
    pub fn set_username_button_xpath(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username_button_xpath = input;
        self
    }
    /// <p>The XPath expression for locating the username submit button on the login page.</p>
    pub fn get_username_button_xpath(&self) -> &::std::option::Option<::std::string::String> {
        &self.username_button_xpath
    }
    /// <p>The XPath expression for locating the password submit button on the login page.</p>
    pub fn password_button_xpath(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.password_button_xpath = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The XPath expression for locating the password submit button on the login page.</p>
    pub fn set_password_button_xpath(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.password_button_xpath = input;
        self
    }
    /// <p>The XPath expression for locating the password submit button on the login page.</p>
    pub fn get_password_button_xpath(&self) -> &::std::option::Option<::std::string::String> {
        &self.password_button_xpath
    }
    /// <p>The URL of the login page for the web crawler to authenticate.</p>
    pub fn login_page_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.login_page_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the login page for the web crawler to authenticate.</p>
    pub fn set_login_page_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.login_page_url = input;
        self
    }
    /// <p>The URL of the login page for the web crawler to authenticate.</p>
    pub fn get_login_page_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.login_page_url
    }
    /// <p>The hostname of the web proxy server for the web crawler.</p>
    pub fn web_proxy_host_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_proxy_host_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hostname of the web proxy server for the web crawler.</p>
    pub fn set_web_proxy_host_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_proxy_host_name = input;
        self
    }
    /// <p>The hostname of the web proxy server for the web crawler.</p>
    pub fn get_web_proxy_host_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_proxy_host_name
    }
    /// <p>The port number of the web proxy server for the web crawler.</p>
    pub fn web_proxy_port_number(mut self, input: i32) -> Self {
        self.web_proxy_port_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number of the web proxy server for the web crawler.</p>
    pub fn set_web_proxy_port_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.web_proxy_port_number = input;
        self
    }
    /// <p>The port number of the web proxy server for the web crawler.</p>
    pub fn get_web_proxy_port_number(&self) -> &::std::option::Option<i32> {
        &self.web_proxy_port_number
    }
    /// Consumes the builder and constructs a [`WebCrawlerParameters`](crate::types::WebCrawlerParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`web_crawler_auth_type`](crate::types::builders::WebCrawlerParametersBuilder::web_crawler_auth_type)
    pub fn build(self) -> ::std::result::Result<crate::types::WebCrawlerParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WebCrawlerParameters {
            web_crawler_auth_type: self.web_crawler_auth_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "web_crawler_auth_type",
                    "web_crawler_auth_type was not specified but it is required when building WebCrawlerParameters",
                )
            })?,
            username_field_xpath: self.username_field_xpath,
            password_field_xpath: self.password_field_xpath,
            username_button_xpath: self.username_button_xpath,
            password_button_xpath: self.password_button_xpath,
            login_page_url: self.login_page_url,
            web_proxy_host_name: self.web_proxy_host_name,
            web_proxy_port_number: self.web_proxy_port_number.unwrap_or_default(),
        })
    }
}
