// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The arc configuration of a <code>GaugeChartVisual</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ArcConfiguration {
    /// <p>The option that determines the arc angle of a <code>GaugeChartVisual</code>.</p>
    #[doc(hidden)]
    pub arc_angle: std::option::Option<f64>,
    /// <p>The options that determine the arc thickness of a <code>GaugeChartVisual</code>.</p>
    #[doc(hidden)]
    pub arc_thickness: std::option::Option<crate::types::ArcThicknessOptions>,
}
impl ArcConfiguration {
    /// <p>The option that determines the arc angle of a <code>GaugeChartVisual</code>.</p>
    pub fn arc_angle(&self) -> std::option::Option<f64> {
        self.arc_angle
    }
    /// <p>The options that determine the arc thickness of a <code>GaugeChartVisual</code>.</p>
    pub fn arc_thickness(&self) -> std::option::Option<&crate::types::ArcThicknessOptions> {
        self.arc_thickness.as_ref()
    }
}
impl ArcConfiguration {
    /// Creates a new builder-style object to manufacture [`ArcConfiguration`](crate::types::ArcConfiguration).
    pub fn builder() -> crate::types::builders::ArcConfigurationBuilder {
        crate::types::builders::ArcConfigurationBuilder::default()
    }
}

/// A builder for [`ArcConfiguration`](crate::types::ArcConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ArcConfigurationBuilder {
    pub(crate) arc_angle: std::option::Option<f64>,
    pub(crate) arc_thickness: std::option::Option<crate::types::ArcThicknessOptions>,
}
impl ArcConfigurationBuilder {
    /// <p>The option that determines the arc angle of a <code>GaugeChartVisual</code>.</p>
    pub fn arc_angle(mut self, input: f64) -> Self {
        self.arc_angle = Some(input);
        self
    }
    /// <p>The option that determines the arc angle of a <code>GaugeChartVisual</code>.</p>
    pub fn set_arc_angle(mut self, input: std::option::Option<f64>) -> Self {
        self.arc_angle = input;
        self
    }
    /// <p>The options that determine the arc thickness of a <code>GaugeChartVisual</code>.</p>
    pub fn arc_thickness(mut self, input: crate::types::ArcThicknessOptions) -> Self {
        self.arc_thickness = Some(input);
        self
    }
    /// <p>The options that determine the arc thickness of a <code>GaugeChartVisual</code>.</p>
    pub fn set_arc_thickness(
        mut self,
        input: std::option::Option<crate::types::ArcThicknessOptions>,
    ) -> Self {
        self.arc_thickness = input;
        self
    }
    /// Consumes the builder and constructs a [`ArcConfiguration`](crate::types::ArcConfiguration).
    pub fn build(self) -> crate::types::ArcConfiguration {
        crate::types::ArcConfiguration {
            arc_angle: self.arc_angle,
            arc_thickness: self.arc_thickness,
        }
    }
}
