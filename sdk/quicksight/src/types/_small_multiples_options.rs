// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options that determine the layout and display options of a chart's small multiples.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SmallMultiplesOptions {
    /// <p>Sets the maximum number of visible rows to display in the grid of small multiples panels.</p>
    /// <p>The default value is <code>Auto</code>, which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.</p>
    #[doc(hidden)]
    pub max_visible_rows: std::option::Option<i64>,
    /// <p>Sets the maximum number of visible columns to display in the grid of small multiples panels.</p>
    /// <p>The default is <code>Auto</code>, which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.</p>
    #[doc(hidden)]
    pub max_visible_columns: std::option::Option<i64>,
    /// <p>Configures the display options for each small multiples panel.</p>
    #[doc(hidden)]
    pub panel_configuration: std::option::Option<crate::types::PanelConfiguration>,
}
impl SmallMultiplesOptions {
    /// <p>Sets the maximum number of visible rows to display in the grid of small multiples panels.</p>
    /// <p>The default value is <code>Auto</code>, which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.</p>
    pub fn max_visible_rows(&self) -> std::option::Option<i64> {
        self.max_visible_rows
    }
    /// <p>Sets the maximum number of visible columns to display in the grid of small multiples panels.</p>
    /// <p>The default is <code>Auto</code>, which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.</p>
    pub fn max_visible_columns(&self) -> std::option::Option<i64> {
        self.max_visible_columns
    }
    /// <p>Configures the display options for each small multiples panel.</p>
    pub fn panel_configuration(&self) -> std::option::Option<&crate::types::PanelConfiguration> {
        self.panel_configuration.as_ref()
    }
}
impl SmallMultiplesOptions {
    /// Creates a new builder-style object to manufacture [`SmallMultiplesOptions`](crate::types::SmallMultiplesOptions).
    pub fn builder() -> crate::types::builders::SmallMultiplesOptionsBuilder {
        crate::types::builders::SmallMultiplesOptionsBuilder::default()
    }
}

/// A builder for [`SmallMultiplesOptions`](crate::types::SmallMultiplesOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SmallMultiplesOptionsBuilder {
    pub(crate) max_visible_rows: std::option::Option<i64>,
    pub(crate) max_visible_columns: std::option::Option<i64>,
    pub(crate) panel_configuration: std::option::Option<crate::types::PanelConfiguration>,
}
impl SmallMultiplesOptionsBuilder {
    /// <p>Sets the maximum number of visible rows to display in the grid of small multiples panels.</p>
    /// <p>The default value is <code>Auto</code>, which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.</p>
    pub fn max_visible_rows(mut self, input: i64) -> Self {
        self.max_visible_rows = Some(input);
        self
    }
    /// <p>Sets the maximum number of visible rows to display in the grid of small multiples panels.</p>
    /// <p>The default value is <code>Auto</code>, which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.</p>
    pub fn set_max_visible_rows(mut self, input: std::option::Option<i64>) -> Self {
        self.max_visible_rows = input;
        self
    }
    /// <p>Sets the maximum number of visible columns to display in the grid of small multiples panels.</p>
    /// <p>The default is <code>Auto</code>, which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.</p>
    pub fn max_visible_columns(mut self, input: i64) -> Self {
        self.max_visible_columns = Some(input);
        self
    }
    /// <p>Sets the maximum number of visible columns to display in the grid of small multiples panels.</p>
    /// <p>The default is <code>Auto</code>, which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.</p>
    pub fn set_max_visible_columns(mut self, input: std::option::Option<i64>) -> Self {
        self.max_visible_columns = input;
        self
    }
    /// <p>Configures the display options for each small multiples panel.</p>
    pub fn panel_configuration(mut self, input: crate::types::PanelConfiguration) -> Self {
        self.panel_configuration = Some(input);
        self
    }
    /// <p>Configures the display options for each small multiples panel.</p>
    pub fn set_panel_configuration(
        mut self,
        input: std::option::Option<crate::types::PanelConfiguration>,
    ) -> Self {
        self.panel_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`SmallMultiplesOptions`](crate::types::SmallMultiplesOptions).
    pub fn build(self) -> crate::types::SmallMultiplesOptions {
        crate::types::SmallMultiplesOptions {
            max_visible_rows: self.max_visible_rows,
            max_visible_columns: self.max_visible_columns,
            panel_configuration: self.panel_configuration,
        }
    }
}
