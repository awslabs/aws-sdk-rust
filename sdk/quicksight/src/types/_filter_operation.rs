// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A transform operation that filters rows based on a condition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct FilterOperation {
    /// <p>An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.</p>
    #[doc(hidden)]
    pub condition_expression: std::option::Option<std::string::String>,
}
impl FilterOperation {
    /// <p>An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.</p>
    pub fn condition_expression(&self) -> std::option::Option<&str> {
        self.condition_expression.as_deref()
    }
}
impl std::fmt::Debug for FilterOperation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("FilterOperation");
        formatter.field("condition_expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FilterOperation {
    /// Creates a new builder-style object to manufacture [`FilterOperation`](crate::types::FilterOperation).
    pub fn builder() -> crate::types::builders::FilterOperationBuilder {
        crate::types::builders::FilterOperationBuilder::default()
    }
}

/// A builder for [`FilterOperation`](crate::types::FilterOperation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct FilterOperationBuilder {
    pub(crate) condition_expression: std::option::Option<std::string::String>,
}
impl FilterOperationBuilder {
    /// <p>An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.</p>
    pub fn condition_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.condition_expression = Some(input.into());
        self
    }
    /// <p>An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.</p>
    pub fn set_condition_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.condition_expression = input;
        self
    }
    /// Consumes the builder and constructs a [`FilterOperation`](crate::types::FilterOperation).
    pub fn build(self) -> crate::types::FilterOperation {
        crate::types::FilterOperation {
            condition_expression: self.condition_expression,
        }
    }
}
impl std::fmt::Debug for FilterOperationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("FilterOperationBuilder");
        formatter.field("condition_expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
