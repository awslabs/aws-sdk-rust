// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A transform operation that filters rows based on a condition.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FilterOperation {
    /// <p>An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.</p>
    pub condition_expression: ::std::string::String,
}
impl FilterOperation {
    /// <p>An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.</p>
    pub fn condition_expression(&self) -> &str {
        use std::ops::Deref;
        self.condition_expression.deref()
    }
}
impl ::std::fmt::Debug for FilterOperation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FilterOperation");
        formatter.field("condition_expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FilterOperation {
    /// Creates a new builder-style object to manufacture [`FilterOperation`](crate::types::FilterOperation).
    pub fn builder() -> crate::types::builders::FilterOperationBuilder {
        crate::types::builders::FilterOperationBuilder::default()
    }
}

/// A builder for [`FilterOperation`](crate::types::FilterOperation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct FilterOperationBuilder {
    pub(crate) condition_expression: ::std::option::Option<::std::string::String>,
}
impl FilterOperationBuilder {
    /// <p>An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.</p>
    /// This field is required.
    pub fn condition_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.condition_expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.</p>
    pub fn set_condition_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.condition_expression = input;
        self
    }
    /// <p>An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.</p>
    pub fn get_condition_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.condition_expression
    }
    /// Consumes the builder and constructs a [`FilterOperation`](crate::types::FilterOperation).
    /// This method will fail if any of the following fields are not set:
    /// - [`condition_expression`](crate::types::builders::FilterOperationBuilder::condition_expression)
    pub fn build(self) -> ::std::result::Result<crate::types::FilterOperation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FilterOperation {
            condition_expression: self.condition_expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "condition_expression",
                    "condition_expression was not specified but it is required when building FilterOperation",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for FilterOperationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FilterOperationBuilder");
        formatter.field("condition_expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
