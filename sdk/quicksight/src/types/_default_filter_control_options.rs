// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The option that corresponds to the control type of the filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefaultFilterControlOptions {
    /// <p>The default options that correspond to the filter control type of a <code>DateTimePicker</code>.</p>
    pub default_date_time_picker_options: ::std::option::Option<crate::types::DefaultDateTimePickerControlOptions>,
    /// <p>The default options that correspond to the <code>List</code> filter control type.</p>
    pub default_list_options: ::std::option::Option<crate::types::DefaultFilterListControlOptions>,
    /// <p>The default options that correspond to the <code>Dropdown</code> filter control type.</p>
    pub default_dropdown_options: ::std::option::Option<crate::types::DefaultFilterDropDownControlOptions>,
    /// <p>The default options that correspond to the <code>TextField</code> filter control type.</p>
    pub default_text_field_options: ::std::option::Option<crate::types::DefaultTextFieldControlOptions>,
    /// <p>The default options that correspond to the <code>TextArea</code> filter control type.</p>
    pub default_text_area_options: ::std::option::Option<crate::types::DefaultTextAreaControlOptions>,
    /// <p>The default options that correspond to the <code>Slider</code> filter control type.</p>
    pub default_slider_options: ::std::option::Option<crate::types::DefaultSliderControlOptions>,
    /// <p>The default options that correspond to the <code>RelativeDateTime</code> filter control type.</p>
    pub default_relative_date_time_options: ::std::option::Option<crate::types::DefaultRelativeDateTimeControlOptions>,
}
impl DefaultFilterControlOptions {
    /// <p>The default options that correspond to the filter control type of a <code>DateTimePicker</code>.</p>
    pub fn default_date_time_picker_options(&self) -> ::std::option::Option<&crate::types::DefaultDateTimePickerControlOptions> {
        self.default_date_time_picker_options.as_ref()
    }
    /// <p>The default options that correspond to the <code>List</code> filter control type.</p>
    pub fn default_list_options(&self) -> ::std::option::Option<&crate::types::DefaultFilterListControlOptions> {
        self.default_list_options.as_ref()
    }
    /// <p>The default options that correspond to the <code>Dropdown</code> filter control type.</p>
    pub fn default_dropdown_options(&self) -> ::std::option::Option<&crate::types::DefaultFilterDropDownControlOptions> {
        self.default_dropdown_options.as_ref()
    }
    /// <p>The default options that correspond to the <code>TextField</code> filter control type.</p>
    pub fn default_text_field_options(&self) -> ::std::option::Option<&crate::types::DefaultTextFieldControlOptions> {
        self.default_text_field_options.as_ref()
    }
    /// <p>The default options that correspond to the <code>TextArea</code> filter control type.</p>
    pub fn default_text_area_options(&self) -> ::std::option::Option<&crate::types::DefaultTextAreaControlOptions> {
        self.default_text_area_options.as_ref()
    }
    /// <p>The default options that correspond to the <code>Slider</code> filter control type.</p>
    pub fn default_slider_options(&self) -> ::std::option::Option<&crate::types::DefaultSliderControlOptions> {
        self.default_slider_options.as_ref()
    }
    /// <p>The default options that correspond to the <code>RelativeDateTime</code> filter control type.</p>
    pub fn default_relative_date_time_options(&self) -> ::std::option::Option<&crate::types::DefaultRelativeDateTimeControlOptions> {
        self.default_relative_date_time_options.as_ref()
    }
}
impl DefaultFilterControlOptions {
    /// Creates a new builder-style object to manufacture [`DefaultFilterControlOptions`](crate::types::DefaultFilterControlOptions).
    pub fn builder() -> crate::types::builders::DefaultFilterControlOptionsBuilder {
        crate::types::builders::DefaultFilterControlOptionsBuilder::default()
    }
}

/// A builder for [`DefaultFilterControlOptions`](crate::types::DefaultFilterControlOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefaultFilterControlOptionsBuilder {
    pub(crate) default_date_time_picker_options: ::std::option::Option<crate::types::DefaultDateTimePickerControlOptions>,
    pub(crate) default_list_options: ::std::option::Option<crate::types::DefaultFilterListControlOptions>,
    pub(crate) default_dropdown_options: ::std::option::Option<crate::types::DefaultFilterDropDownControlOptions>,
    pub(crate) default_text_field_options: ::std::option::Option<crate::types::DefaultTextFieldControlOptions>,
    pub(crate) default_text_area_options: ::std::option::Option<crate::types::DefaultTextAreaControlOptions>,
    pub(crate) default_slider_options: ::std::option::Option<crate::types::DefaultSliderControlOptions>,
    pub(crate) default_relative_date_time_options: ::std::option::Option<crate::types::DefaultRelativeDateTimeControlOptions>,
}
impl DefaultFilterControlOptionsBuilder {
    /// <p>The default options that correspond to the filter control type of a <code>DateTimePicker</code>.</p>
    pub fn default_date_time_picker_options(mut self, input: crate::types::DefaultDateTimePickerControlOptions) -> Self {
        self.default_date_time_picker_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default options that correspond to the filter control type of a <code>DateTimePicker</code>.</p>
    pub fn set_default_date_time_picker_options(mut self, input: ::std::option::Option<crate::types::DefaultDateTimePickerControlOptions>) -> Self {
        self.default_date_time_picker_options = input;
        self
    }
    /// <p>The default options that correspond to the filter control type of a <code>DateTimePicker</code>.</p>
    pub fn get_default_date_time_picker_options(&self) -> &::std::option::Option<crate::types::DefaultDateTimePickerControlOptions> {
        &self.default_date_time_picker_options
    }
    /// <p>The default options that correspond to the <code>List</code> filter control type.</p>
    pub fn default_list_options(mut self, input: crate::types::DefaultFilterListControlOptions) -> Self {
        self.default_list_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default options that correspond to the <code>List</code> filter control type.</p>
    pub fn set_default_list_options(mut self, input: ::std::option::Option<crate::types::DefaultFilterListControlOptions>) -> Self {
        self.default_list_options = input;
        self
    }
    /// <p>The default options that correspond to the <code>List</code> filter control type.</p>
    pub fn get_default_list_options(&self) -> &::std::option::Option<crate::types::DefaultFilterListControlOptions> {
        &self.default_list_options
    }
    /// <p>The default options that correspond to the <code>Dropdown</code> filter control type.</p>
    pub fn default_dropdown_options(mut self, input: crate::types::DefaultFilterDropDownControlOptions) -> Self {
        self.default_dropdown_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default options that correspond to the <code>Dropdown</code> filter control type.</p>
    pub fn set_default_dropdown_options(mut self, input: ::std::option::Option<crate::types::DefaultFilterDropDownControlOptions>) -> Self {
        self.default_dropdown_options = input;
        self
    }
    /// <p>The default options that correspond to the <code>Dropdown</code> filter control type.</p>
    pub fn get_default_dropdown_options(&self) -> &::std::option::Option<crate::types::DefaultFilterDropDownControlOptions> {
        &self.default_dropdown_options
    }
    /// <p>The default options that correspond to the <code>TextField</code> filter control type.</p>
    pub fn default_text_field_options(mut self, input: crate::types::DefaultTextFieldControlOptions) -> Self {
        self.default_text_field_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default options that correspond to the <code>TextField</code> filter control type.</p>
    pub fn set_default_text_field_options(mut self, input: ::std::option::Option<crate::types::DefaultTextFieldControlOptions>) -> Self {
        self.default_text_field_options = input;
        self
    }
    /// <p>The default options that correspond to the <code>TextField</code> filter control type.</p>
    pub fn get_default_text_field_options(&self) -> &::std::option::Option<crate::types::DefaultTextFieldControlOptions> {
        &self.default_text_field_options
    }
    /// <p>The default options that correspond to the <code>TextArea</code> filter control type.</p>
    pub fn default_text_area_options(mut self, input: crate::types::DefaultTextAreaControlOptions) -> Self {
        self.default_text_area_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default options that correspond to the <code>TextArea</code> filter control type.</p>
    pub fn set_default_text_area_options(mut self, input: ::std::option::Option<crate::types::DefaultTextAreaControlOptions>) -> Self {
        self.default_text_area_options = input;
        self
    }
    /// <p>The default options that correspond to the <code>TextArea</code> filter control type.</p>
    pub fn get_default_text_area_options(&self) -> &::std::option::Option<crate::types::DefaultTextAreaControlOptions> {
        &self.default_text_area_options
    }
    /// <p>The default options that correspond to the <code>Slider</code> filter control type.</p>
    pub fn default_slider_options(mut self, input: crate::types::DefaultSliderControlOptions) -> Self {
        self.default_slider_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default options that correspond to the <code>Slider</code> filter control type.</p>
    pub fn set_default_slider_options(mut self, input: ::std::option::Option<crate::types::DefaultSliderControlOptions>) -> Self {
        self.default_slider_options = input;
        self
    }
    /// <p>The default options that correspond to the <code>Slider</code> filter control type.</p>
    pub fn get_default_slider_options(&self) -> &::std::option::Option<crate::types::DefaultSliderControlOptions> {
        &self.default_slider_options
    }
    /// <p>The default options that correspond to the <code>RelativeDateTime</code> filter control type.</p>
    pub fn default_relative_date_time_options(mut self, input: crate::types::DefaultRelativeDateTimeControlOptions) -> Self {
        self.default_relative_date_time_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default options that correspond to the <code>RelativeDateTime</code> filter control type.</p>
    pub fn set_default_relative_date_time_options(
        mut self,
        input: ::std::option::Option<crate::types::DefaultRelativeDateTimeControlOptions>,
    ) -> Self {
        self.default_relative_date_time_options = input;
        self
    }
    /// <p>The default options that correspond to the <code>RelativeDateTime</code> filter control type.</p>
    pub fn get_default_relative_date_time_options(&self) -> &::std::option::Option<crate::types::DefaultRelativeDateTimeControlOptions> {
        &self.default_relative_date_time_options
    }
    /// Consumes the builder and constructs a [`DefaultFilterControlOptions`](crate::types::DefaultFilterControlOptions).
    pub fn build(self) -> crate::types::DefaultFilterControlOptions {
        crate::types::DefaultFilterControlOptions {
            default_date_time_picker_options: self.default_date_time_picker_options,
            default_list_options: self.default_list_options,
            default_dropdown_options: self.default_dropdown_options,
            default_text_field_options: self.default_text_field_options,
            default_text_area_options: self.default_text_area_options,
            default_slider_options: self.default_slider_options,
            default_relative_date_time_options: self.default_relative_date_time_options,
        }
    }
}
