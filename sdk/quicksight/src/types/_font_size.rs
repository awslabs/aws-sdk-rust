// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The option that determines the text display size.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FontSize {
    /// <p>The lexical name for the text size, proportional to its surrounding context.</p>
    #[doc(hidden)]
    pub relative: std::option::Option<crate::types::RelativeFontSize>,
}
impl FontSize {
    /// <p>The lexical name for the text size, proportional to its surrounding context.</p>
    pub fn relative(&self) -> std::option::Option<&crate::types::RelativeFontSize> {
        self.relative.as_ref()
    }
}
impl FontSize {
    /// Creates a new builder-style object to manufacture [`FontSize`](crate::types::FontSize).
    pub fn builder() -> crate::types::builders::FontSizeBuilder {
        crate::types::builders::FontSizeBuilder::default()
    }
}

/// A builder for [`FontSize`](crate::types::FontSize).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FontSizeBuilder {
    pub(crate) relative: std::option::Option<crate::types::RelativeFontSize>,
}
impl FontSizeBuilder {
    /// <p>The lexical name for the text size, proportional to its surrounding context.</p>
    pub fn relative(mut self, input: crate::types::RelativeFontSize) -> Self {
        self.relative = Some(input);
        self
    }
    /// <p>The lexical name for the text size, proportional to its surrounding context.</p>
    pub fn set_relative(
        mut self,
        input: std::option::Option<crate::types::RelativeFontSize>,
    ) -> Self {
        self.relative = input;
        self
    }
    /// Consumes the builder and constructs a [`FontSize`](crate::types::FontSize).
    pub fn build(self) -> crate::types::FontSize {
        crate::types::FontSize {
            relative: self.relative,
        }
    }
}
