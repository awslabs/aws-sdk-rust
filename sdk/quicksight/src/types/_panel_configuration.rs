// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of options that configure how each panel displays in a small multiples chart.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PanelConfiguration {
    /// <p>Configures the title display within each small multiples panel.</p>
    #[doc(hidden)]
    pub title: std::option::Option<crate::types::PanelTitleOptions>,
    /// <p>Determines whether or not each panel displays a border.</p>
    #[doc(hidden)]
    pub border_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>Sets the line thickness of panel borders.</p>
    #[doc(hidden)]
    pub border_thickness: std::option::Option<std::string::String>,
    /// <p>Sets the line style of panel borders.</p>
    #[doc(hidden)]
    pub border_style: std::option::Option<crate::types::PanelBorderStyle>,
    /// <p>Sets the line color of panel borders.</p>
    #[doc(hidden)]
    pub border_color: std::option::Option<std::string::String>,
    /// <p>Determines whether or not negative space between sibling panels is rendered.</p>
    #[doc(hidden)]
    pub gutter_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>Sets the total amount of negative space to display between sibling panels.</p>
    #[doc(hidden)]
    pub gutter_spacing: std::option::Option<std::string::String>,
    /// <p>Determines whether or not a background for each small multiples panel is rendered.</p>
    #[doc(hidden)]
    pub background_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>Sets the background color for each panel.</p>
    #[doc(hidden)]
    pub background_color: std::option::Option<std::string::String>,
}
impl PanelConfiguration {
    /// <p>Configures the title display within each small multiples panel.</p>
    pub fn title(&self) -> std::option::Option<&crate::types::PanelTitleOptions> {
        self.title.as_ref()
    }
    /// <p>Determines whether or not each panel displays a border.</p>
    pub fn border_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.border_visibility.as_ref()
    }
    /// <p>Sets the line thickness of panel borders.</p>
    pub fn border_thickness(&self) -> std::option::Option<&str> {
        self.border_thickness.as_deref()
    }
    /// <p>Sets the line style of panel borders.</p>
    pub fn border_style(&self) -> std::option::Option<&crate::types::PanelBorderStyle> {
        self.border_style.as_ref()
    }
    /// <p>Sets the line color of panel borders.</p>
    pub fn border_color(&self) -> std::option::Option<&str> {
        self.border_color.as_deref()
    }
    /// <p>Determines whether or not negative space between sibling panels is rendered.</p>
    pub fn gutter_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.gutter_visibility.as_ref()
    }
    /// <p>Sets the total amount of negative space to display between sibling panels.</p>
    pub fn gutter_spacing(&self) -> std::option::Option<&str> {
        self.gutter_spacing.as_deref()
    }
    /// <p>Determines whether or not a background for each small multiples panel is rendered.</p>
    pub fn background_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.background_visibility.as_ref()
    }
    /// <p>Sets the background color for each panel.</p>
    pub fn background_color(&self) -> std::option::Option<&str> {
        self.background_color.as_deref()
    }
}
impl PanelConfiguration {
    /// Creates a new builder-style object to manufacture [`PanelConfiguration`](crate::types::PanelConfiguration).
    pub fn builder() -> crate::types::builders::PanelConfigurationBuilder {
        crate::types::builders::PanelConfigurationBuilder::default()
    }
}

/// A builder for [`PanelConfiguration`](crate::types::PanelConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PanelConfigurationBuilder {
    pub(crate) title: std::option::Option<crate::types::PanelTitleOptions>,
    pub(crate) border_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) border_thickness: std::option::Option<std::string::String>,
    pub(crate) border_style: std::option::Option<crate::types::PanelBorderStyle>,
    pub(crate) border_color: std::option::Option<std::string::String>,
    pub(crate) gutter_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) gutter_spacing: std::option::Option<std::string::String>,
    pub(crate) background_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) background_color: std::option::Option<std::string::String>,
}
impl PanelConfigurationBuilder {
    /// <p>Configures the title display within each small multiples panel.</p>
    pub fn title(mut self, input: crate::types::PanelTitleOptions) -> Self {
        self.title = Some(input);
        self
    }
    /// <p>Configures the title display within each small multiples panel.</p>
    pub fn set_title(
        mut self,
        input: std::option::Option<crate::types::PanelTitleOptions>,
    ) -> Self {
        self.title = input;
        self
    }
    /// <p>Determines whether or not each panel displays a border.</p>
    pub fn border_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.border_visibility = Some(input);
        self
    }
    /// <p>Determines whether or not each panel displays a border.</p>
    pub fn set_border_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.border_visibility = input;
        self
    }
    /// <p>Sets the line thickness of panel borders.</p>
    pub fn border_thickness(mut self, input: impl Into<std::string::String>) -> Self {
        self.border_thickness = Some(input.into());
        self
    }
    /// <p>Sets the line thickness of panel borders.</p>
    pub fn set_border_thickness(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.border_thickness = input;
        self
    }
    /// <p>Sets the line style of panel borders.</p>
    pub fn border_style(mut self, input: crate::types::PanelBorderStyle) -> Self {
        self.border_style = Some(input);
        self
    }
    /// <p>Sets the line style of panel borders.</p>
    pub fn set_border_style(
        mut self,
        input: std::option::Option<crate::types::PanelBorderStyle>,
    ) -> Self {
        self.border_style = input;
        self
    }
    /// <p>Sets the line color of panel borders.</p>
    pub fn border_color(mut self, input: impl Into<std::string::String>) -> Self {
        self.border_color = Some(input.into());
        self
    }
    /// <p>Sets the line color of panel borders.</p>
    pub fn set_border_color(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.border_color = input;
        self
    }
    /// <p>Determines whether or not negative space between sibling panels is rendered.</p>
    pub fn gutter_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.gutter_visibility = Some(input);
        self
    }
    /// <p>Determines whether or not negative space between sibling panels is rendered.</p>
    pub fn set_gutter_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.gutter_visibility = input;
        self
    }
    /// <p>Sets the total amount of negative space to display between sibling panels.</p>
    pub fn gutter_spacing(mut self, input: impl Into<std::string::String>) -> Self {
        self.gutter_spacing = Some(input.into());
        self
    }
    /// <p>Sets the total amount of negative space to display between sibling panels.</p>
    pub fn set_gutter_spacing(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.gutter_spacing = input;
        self
    }
    /// <p>Determines whether or not a background for each small multiples panel is rendered.</p>
    pub fn background_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.background_visibility = Some(input);
        self
    }
    /// <p>Determines whether or not a background for each small multiples panel is rendered.</p>
    pub fn set_background_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.background_visibility = input;
        self
    }
    /// <p>Sets the background color for each panel.</p>
    pub fn background_color(mut self, input: impl Into<std::string::String>) -> Self {
        self.background_color = Some(input.into());
        self
    }
    /// <p>Sets the background color for each panel.</p>
    pub fn set_background_color(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.background_color = input;
        self
    }
    /// Consumes the builder and constructs a [`PanelConfiguration`](crate::types::PanelConfiguration).
    pub fn build(self) -> crate::types::PanelConfiguration {
        crate::types::PanelConfiguration {
            title: self.title,
            border_visibility: self.border_visibility,
            border_thickness: self.border_thickness,
            border_style: self.border_style,
            border_color: self.border_color,
            gutter_visibility: self.gutter_visibility,
            gutter_spacing: self.gutter_spacing,
            background_visibility: self.background_visibility,
            background_color: self.background_color,
        }
    }
}
