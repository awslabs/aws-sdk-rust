// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DataSourceErrorInfoType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let datasourceerrorinfotype = unimplemented!();
/// match datasourceerrorinfotype {
///     DataSourceErrorInfoType::AccessDenied => { /* ... */ },
///     DataSourceErrorInfoType::Conflict => { /* ... */ },
///     DataSourceErrorInfoType::CopySourceNotFound => { /* ... */ },
///     DataSourceErrorInfoType::EngineVersionNotSupported => { /* ... */ },
///     DataSourceErrorInfoType::GenericSqlFailure => { /* ... */ },
///     DataSourceErrorInfoType::Timeout => { /* ... */ },
///     DataSourceErrorInfoType::UnknownValue => { /* ... */ },
///     DataSourceErrorInfoType::UnknownHost => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `datasourceerrorinfotype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DataSourceErrorInfoType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DataSourceErrorInfoType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DataSourceErrorInfoType::NewFeature` is defined.
/// Specifically, when `datasourceerrorinfotype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DataSourceErrorInfoType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// _Note: `DataSourceErrorInfoType::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DataSourceErrorInfoType {
    #[allow(missing_docs)] // documentation missing in model
    AccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    Conflict,
    #[allow(missing_docs)] // documentation missing in model
    CopySourceNotFound,
    #[allow(missing_docs)] // documentation missing in model
    EngineVersionNotSupported,
    #[allow(missing_docs)] // documentation missing in model
    GenericSqlFailure,
    #[allow(missing_docs)] // documentation missing in model
    Timeout,
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    #[allow(missing_docs)] // documentation missing in model
    UnknownHost,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for DataSourceErrorInfoType {
    fn from(s: &str) -> Self {
        match s {
            "ACCESS_DENIED" => DataSourceErrorInfoType::AccessDenied,
            "CONFLICT" => DataSourceErrorInfoType::Conflict,
            "COPY_SOURCE_NOT_FOUND" => DataSourceErrorInfoType::CopySourceNotFound,
            "ENGINE_VERSION_NOT_SUPPORTED" => DataSourceErrorInfoType::EngineVersionNotSupported,
            "GENERIC_SQL_FAILURE" => DataSourceErrorInfoType::GenericSqlFailure,
            "TIMEOUT" => DataSourceErrorInfoType::Timeout,
            "UNKNOWN" => DataSourceErrorInfoType::UnknownValue,
            "UNKNOWN_HOST" => DataSourceErrorInfoType::UnknownHost,
            other => DataSourceErrorInfoType::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for DataSourceErrorInfoType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DataSourceErrorInfoType::from(s))
    }
}
impl DataSourceErrorInfoType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DataSourceErrorInfoType::AccessDenied => "ACCESS_DENIED",
            DataSourceErrorInfoType::Conflict => "CONFLICT",
            DataSourceErrorInfoType::CopySourceNotFound => "COPY_SOURCE_NOT_FOUND",
            DataSourceErrorInfoType::EngineVersionNotSupported => "ENGINE_VERSION_NOT_SUPPORTED",
            DataSourceErrorInfoType::GenericSqlFailure => "GENERIC_SQL_FAILURE",
            DataSourceErrorInfoType::Timeout => "TIMEOUT",
            DataSourceErrorInfoType::UnknownValue => "UNKNOWN",
            DataSourceErrorInfoType::UnknownHost => "UNKNOWN_HOST",
            DataSourceErrorInfoType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCESS_DENIED",
            "CONFLICT",
            "COPY_SOURCE_NOT_FOUND",
            "ENGINE_VERSION_NOT_SUPPORTED",
            "GENERIC_SQL_FAILURE",
            "TIMEOUT",
            "UNKNOWN",
            "UNKNOWN_HOST",
        ]
    }
}
impl AsRef<str> for DataSourceErrorInfoType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
